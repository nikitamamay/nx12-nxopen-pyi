# module 'NXOpen.Die'
#
# Automatically generated 2025-06-09T14:38:45.464879
#
"""Default documentation for NXOpen.Die."""

import typing

import NXOpen
import NXOpen.Facet
import NXOpen.Features
import NXOpen.GeometricUtilities



def _handle_import() -> None:
    """internal method to handle importing an NXOpen Python module"""
    ...


class ConnectProfileParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Connecting Profile sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def SetProfile(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the connecting profiles of the steel insert 
        
        Signature ``SetProfile(direction, profileEntries)`` 
        
        :param direction:  profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  profile entries  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetProfile(self) -> tuple:
        """
        Gets the connecting profiles of the steel insert  
        
        Signature ``GetProfile()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   profile entries direction is a :py:class:`NXOpen.Die.DirectionOption`.   profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of die connecting profiles 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of  die connecting profiles 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of die pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: ConnectProfileParentBuilder = ...  # unknown typename


class HoleChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Hole Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def TranslateCenter(self, translateDist: NXOpen.Vector3d) -> None:
        """
        Translates the center of the die hole by the specified amount.  
        
        Signature ``TranslateCenter(translateDist)`` 
        
        :param translateDist:  A scaled vector indicating the distance to translate  
        :type translateDist: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetHoleAttributes(self) -> tuple:
        """
        Gets the hole attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle, depthTitle, counterBoreDiameterTitle). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of hole faces. diameterTitle is a str.   Title for diameter attribute. depthTitle is a str.   Title for depth attribute. counterBoreDiameterTitle is a str.   Title for counter bore diameter attribute. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str, depthTitle: str, counterBoreDiameterTitle: str) -> None:
        """
        Sets the hole attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetHoleAttributes(title, value, color, diameterTitle, depthTitle, counterBoreDiameterTitle)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of hole faces.  
        :type color: int 
        :param diameterTitle:  Title for diameter attribute.  
        :type diameterTitle: str 
        :param depthTitle:  Title for depth attribute.  
        :type depthTitle: str 
        :param counterBoreDiameterTitle:  Title for counter bore diameter attribute.  
        :type counterBoreDiameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPadAttributes(self) -> tuple:
        """
        Gets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetPadAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of pad faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPadAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetPadAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of pad faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Center: NXOpen.ILocation = ...
    """
    Returns or sets  the center of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``Center`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Center`` 
    
    :param center: 
    :type center: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CounterBoreDiameter: float = ...
    """
    Returns or sets  the counter bore diameter of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``CounterBoreDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CounterBoreDiameter`` 
    
    :param counterBoreDiameter: 
    :type counterBoreDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CreateWithPad: bool = ...
    """
    Returns or sets  the create with pad switch of the die hole, if true a pad will be created around the hole, if false the pad will not be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateWithPad`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CreateWithPad`` 
    
    :param createWithPad: 
    :type createWithPad: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Depth: float = ...
    """
    Returns or sets  the depth of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Depth`` 
    
    :param depth: 
    :type depth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the die hole, if true the hole will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Diameter: float = ...
    """
    Returns or sets  the diameter of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Diameter`` 
    
    :param diameter: 
    :type diameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayHoles: bool = ...
    """
    Returns or sets  the display holes switch of the die hole, if true the hole will be built into the model, if false it will not.  
    
    Note that this setting has the same affect as design status, unless the create with pad switch is true. 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayHoles`` 
    
    :param displayHoles: 
    :type displayHoles: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the die hole, if true input data to the hole will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DropThruDiameter: float = ...
    """
    Returns or sets  the drop thru diameter of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``DropThruDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DropThruDiameter`` 
    
    :param dropThruDiameter: 
    :type dropThruDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PadDiameter: float = ...
    """
    Returns or sets  the pad diameter of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``PadDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PadDiameter`` 
    
    :param padDiameter: 
    :type padDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PadHeight: float = ...
    """
    Returns or sets  the pad height of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``PadHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PadHeight`` 
    
    :param padHeight: 
    :type padHeight: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Plane: NXOpen.ISurface = ...
    """
    Returns or sets  the plane of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PlaneOffset: float = ...
    """
    Returns or sets  the plane offset of the die hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneOffset`` 
    
    :param planeOffset: 
    :type planeOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: HoleChildBuilder = ...  # unknown typename


class DieDirectionBuilderDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieDirectionBuilderDirectionType():
    """
    the options available for defining the direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Selection", "Select a coordinate system (-Z) or plane for the direction."
       "CoordinateSystem", "Define a coordinate system (-Z) for the direction."
       "Vector", "Define a vector for the direction."
    """
    Selection = 0  # DieDirectionBuilderDirectionTypeMemberType
    CoordinateSystem = 1  # DieDirectionBuilderDirectionTypeMemberType
    Vector = 2  # DieDirectionBuilderDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieDirectionBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Die.DieDirectionBuilder`.  
    
    The Die 
    Direction is a helper to the main Die Design feature to gather the 
    vector for items such as Trim direction or Flange direction. Note that
    if a coordinate system is specified, then the direction will be -Z of
    that coordinate system.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateDieDirection`
    
    .. versionadded:: NX6.0.0
    """
    
    class DirectionType():
        """
        the options available for defining the direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Selection", "Select a coordinate system (-Z) or plane for the direction."
           "CoordinateSystem", "Define a coordinate system (-Z) for the direction."
           "Vector", "Define a vector for the direction."
        """
        Selection = 0  # DieDirectionBuilderDirectionTypeMemberType
        CoordinateSystem = 1  # DieDirectionBuilderDirectionTypeMemberType
        Vector = 2  # DieDirectionBuilderDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CoordinateSystemMatrix: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the coordinate system matrix 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystemMatrix`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystemMatrix`` 
    
    :param coordinateSystemMatrix: 
    :type coordinateSystemMatrix: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CoordinateSystemOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the coordinate system origin 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystemOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystemOrigin`` 
    
    :param coordinateSystemOrigin: 
    :type coordinateSystemOrigin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Direction: NXOpen.SelectNXObject = ...
    """
    Returns  the selected direction 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    InputType: DieDirectionBuilderDirectionType = ...
    """
    Returns or sets  the type of input that defined the direction 
    
    <hr>
    
    Getter Method
    
    Signature ``InputType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieDirectionBuilderDirectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InputType`` 
    
    :param inputType: 
    :type inputType: :py:class:`NXOpen.Die.DieDirectionBuilderDirectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReverseSourceDirection: bool = ...
    """
    Returns or sets  the indication if the source's direction should be reversed.  
    
    True indicates the source's direction should be reversed
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseSourceDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseSourceDirection`` 
    
    :param reverseSourceDirection: 
    :type reverseSourceDirection: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Vector: NXOpen.Direction = ...
    """
    Returns or sets  the specified vector 
    
    <hr>
    
    Getter Method
    
    Signature ``Vector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Vector`` 
    
    :param vector: 
    :type vector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DieDirectionBuilder = ...  # unknown typename


class DeckParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Deck Feature sub feature.  
    
    Used by the Upper Draw Die
    and Draw Die Punch to capture the deck definition. Unless specified, the
    attributes and methods are generic and can be applied to any type of deck. 
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def SetMainDeck(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the main deck profile of the upper draw die deck.  
        
        Signature ``SetMainDeck(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetMainDeck(self) -> tuple:
        """
        Gets the main deck profile of the upper draw die deck.  
        
        Signature ``GetMainDeck()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBinderEdge(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the binder edge profile of the upper draw die deck.  
        
        Signature ``SetBinderEdge(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBinderEdge(self) -> tuple:
        """
        Gets the binder edge profile of the upper draw die deck.  
        
        Signature ``GetBinderEdge()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetMainWallCenterline(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the main wall centerline profile of the draw die punch.  
        
        Knowledge Fusion: Main Deck of Upper Draw Die.
        
        Signature ``SetMainWallCenterline(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetMainWallCenterline(self) -> tuple:
        """
        Gets the main wall centerline profile of the draw die punch.  
        
        Knowledge Fusion: Main Deck of Upper Draw Die.
        
        Signature ``GetMainWallCenterline()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBaseFlange(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the base flange profile of the draw die punch.  
        
        Knowledge Fusion: Binder Edge of Upper Draw Die.
        
        Signature ``SetBaseFlange(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBaseFlange(self) -> tuple:
        """
        Gets the base flange profile of the draw die punch.  
        
        Knowledge Fusion: Binder Edge of Upper Draw Die.
        
        Signature ``GetBaseFlange()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetIntermediateDeck(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the intermediate deck profile of the deck.  
        
        Signature ``SetIntermediateDeck(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetIntermediateDeck(self) -> tuple:
        """
        Gets the intermediate deck profile of the deck.  
        
        Signature ``GetIntermediateDeck()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of deck.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of deck, if true the deck will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of deck, if true input data to the deck will be displayed, if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    InnerDeckSheet: NXOpen.Body = ...
    """
    Returns or sets  the inner deck sheet of deck.  
    
    <hr>
    
    Getter Method
    
    Signature ``InnerDeckSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``InnerDeckSheet`` 
    
    :param innerDeckSheet: 
    :type innerDeckSheet: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    IntermediateDeckOrientation: NXOpen.ISurface = ...
    """
    Returns or sets  the intermediate deck orientation of the deck.  
    
    <hr>
    
    Getter Method
    
    Signature ``IntermediateDeckOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``IntermediateDeckOrientation`` 
    
    :param intermediateDeckOrientation: 
    :type intermediateDeckOrientation: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: DeckParentBuilder = ...  # unknown typename


class PierceHoleParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Pierce Hole Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def SetProfileBlendRadius(self, profileBlendRadius: str) -> None:
        """
        Signature ``SetProfileBlendRadius(profileBlendRadius)`` 
        
        :param profileBlendRadius: 
        :type profileBlendRadius: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetDieClearance(self, dieClearance: str) -> None:
        """
        Signature ``SetDieClearance(dieClearance)`` 
        
        :param dieClearance: 
        :type dieClearance: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetDiameter(self, diameter: str) -> None:
        """
        Signature ``SetDiameter(diameter)`` 
        
        :param diameter: 
        :type diameter: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetDepth(self, depth: str) -> None:
        """
        Signature ``SetDepth(depth)`` 
        
        :param depth: 
        :type depth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetLength(self, length: str) -> None:
        """
        Signature ``SetLength(length)`` 
        
        :param length: 
        :type length: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetWidth(self, pierceHoleWidth: str) -> None:
        """
        Signature ``SetWidth(pierceHoleWidth)`` 
        
        :param pierceHoleWidth: 
        :type pierceHoleWidth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetSlugHoleDiameterIncrement(self, slugHoleDiameterIncrement: str) -> None:
        """
        Signature ``SetSlugHoleDiameterIncrement(slugHoleDiameterIncrement)`` 
        
        :param slugHoleDiameterIncrement: 
        :type slugHoleDiameterIncrement: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetSlugHoleOffset(self, slugHoleOffset: str) -> None:
        """
        Signature ``SetSlugHoleOffset(slugHoleOffset)`` 
        
        :param slugHoleOffset: 
        :type slugHoleOffset: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBreakerHoleFactor(self, breakerHoleFactor: str) -> None:
        """
        Signature ``SetBreakerHoleFactor(breakerHoleFactor)`` 
        
        :param breakerHoleFactor: 
        :type breakerHoleFactor: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBreakerHoleOffset(self, breakerHoleOffset: str) -> None:
        """
        Signature ``SetBreakerHoleOffset(breakerHoleOffset)`` 
        
        :param breakerHoleOffset: 
        :type breakerHoleOffset: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBreakerHoleDepth(self, breakerHoleDepth: str) -> None:
        """
        Signature ``SetBreakerHoleDepth(breakerHoleDepth)`` 
        
        :param breakerHoleDepth: 
        :type breakerHoleDepth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetHoleAttributes(self) -> tuple:
        """
        Gets the hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``GetHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of hole faces diameterTitle is a str.   title for diameter attribute 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str) -> None:
        """
        Sets the hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``SetHoleAttributes(title, value, color, diameterTitle)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of hole faces  
        :type color: int 
        :param diameterTitle:  title for diameter attribute  
        :type diameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetSlugHoleAttributes(self) -> tuple:
        """
        Gets the slug hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``GetSlugHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of hole faces diameterTitle is a str.   title for diameter attribute 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetSlugHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str) -> None:
        """
        Sets the slug hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``SetSlugHoleAttributes(title, value, color, diameterTitle)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of hole faces  
        :type color: int 
        :param diameterTitle:  title for diameter attribute  
        :type diameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBreakerHoleAttributes(self) -> tuple:
        """
        Gets the breaker hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``GetBreakerHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of hole faces diameterTitle is a str.   title for diameter attribute 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBreakerHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str) -> None:
        """
        Sets the breaker hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``SetBreakerHoleAttributes(title, value, color, diameterTitle)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of hole faces  
        :type color: int 
        :param diameterTitle:  title for diameter attribute  
        :type diameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateChild(self) -> PierceHoleChildBuilder:
        """
        Creates a child pierce hole  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.PierceHoleChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, dieholechild: PierceHoleChildBuilder) -> None:
        """
        Deletes a child pierce hole 
        
        Signature ``DeleteChild(dieholechild)`` 
        
        :param dieholechild: 
        :type dieholechild: :py:class:`NXOpen.Die.PierceHoleChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[PierceHoleChildBuilder]':
        """
        Outputs the pierce hole children  
        
        Signature ``GetChildren()`` 
        
        :returns:  children  
        :rtype: list of :py:class:`NXOpen.Die.PierceHoleChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BreakerHoleDepth: NXOpen.Expression = ...
    """
    Returns  the breaker hole depth of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakerHoleDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BreakerHoleFactor: NXOpen.Expression = ...
    """
    Returns  the breaker hole factor of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakerHoleFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BreakerHoleOffset: NXOpen.Expression = ...
    """
    Returns  the breaker hole offset of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakerHoleOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CircularSlugHole: bool = ...
    """
    Returns or sets  the circular slug hole switch of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``CircularSlugHole`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CircularSlugHole`` 
    
    :param circularSlugHole: 
    :type circularSlugHole: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CommonSlugHole: bool = ...
    """
    Returns or sets  the common slug hole switch of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``CommonSlugHole`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CommonSlugHole`` 
    
    :param commonSlugHole: 
    :type commonSlugHole: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Depth: NXOpen.Expression = ...
    """
    Returns  the depth of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Diameter: NXOpen.Expression = ...
    """
    Returns  the diameter of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DieClearance: NXOpen.Expression = ...
    """
    Returns  the die clearance of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``DieClearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayHoles: bool = ...
    """
    Returns or sets  the display holes option of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayHoles`` 
    
    :param displayPierceHoles: 
    :type displayPierceHoles: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProfileBlendRadius: NXOpen.Expression = ...
    """
    Returns  the profile blend radius of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileBlendRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SlugHoleDiameterIncrement: NXOpen.Expression = ...
    """
    Returns  the slug hole diameter increment of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugHoleDiameterIncrement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SlugHoleOffset: NXOpen.Expression = ...
    """
    Returns  the slug hole offset of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugHoleOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width of pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: PierceHoleParentBuilder = ...  # unknown typename


class SteelInsertBuilderInsertTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelInsertBuilderInsertTypeOption():
    """
    Settings for the insert type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Trim", "trim"
       "Flange", "flange"
       "OffsetFlange", "offset_flange"
    """
    Trim = 0  # SteelInsertBuilderInsertTypeOptionMemberType
    Flange = 1  # SteelInsertBuilderInsertTypeOptionMemberType
    OffsetFlange = 2  # SteelInsertBuilderInsertTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelInsertBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Steel Insert feature builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.Steelinsert`
    
    .. versionadded:: NX4.0.0
    """
    
    class InsertTypeOption():
        """
        Settings for the insert type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Trim", "trim"
           "Flange", "flange"
           "OffsetFlange", "offset_flange"
        """
        Trim = 0  # SteelInsertBuilderInsertTypeOptionMemberType
        Flange = 1  # SteelInsertBuilderInsertTypeOptionMemberType
        OffsetFlange = 2  # SteelInsertBuilderInsertTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetMainProfile(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the main profile of the steel insert 
        
        Signature ``SetMainProfile(direction, profileEntries)`` 
        
        :param direction:  profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  profile entries  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetMainProfile(self) -> tuple:
        """
        Gets the main profile of the steel insert  
        
        Signature ``GetMainProfile()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   profile entries direction is a :py:class:`NXOpen.Die.DirectionOption`.   profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetFlangeEndProfile(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the flange end profile of the steel insert 
        
        Signature ``SetFlangeEndProfile(direction, profileEntries)`` 
        
        :param direction:  profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  profile entries  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetFlangeEndProfile(self) -> tuple:
        """
        Gets the flange end profile of the steel insert  
        
        Signature ``GetFlangeEndProfile()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   profile entries direction is a :py:class:`NXOpen.Die.DirectionOption`.   profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBackShape(self, backEntries: 'list[NXOpen.ISurface]') -> None:
        """
        Signature ``SetBackShape(backEntries)`` 
        
        :param backEntries:  back entries  
        :type backEntries: list of :py:class:`NXOpen.ISurface` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBackShape(self) -> 'list[NXOpen.ISurface]':
        """
        Gets the back shape of the die steelinsert  
        
        Signature ``GetBackShape()`` 
        
        :returns:  back entries  
        :rtype: list of :py:class:`NXOpen.ISurface` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetHoleGridOrientation(self) -> tuple:
        """
        Gets the hole grid orientation for the dowel and bolt holes 
        
        Signature ``GetHoleGridOrientation()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (gridOrigin, gridMatrix). gridOrigin is a :py:class:`NXOpen.Point3d`. gridMatrix is a :py:class:`NXOpen.Matrix3x3`. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetHoleGridOrientation(self, gridOrigin: NXOpen.Point3d, gridMatrix: NXOpen.Matrix3x3) -> None:
        """
        Signature ``SetHoleGridOrientation(gridOrigin, gridMatrix)`` 
        
        :param gridOrigin: 
        :type gridOrigin: :py:class:`NXOpen.Point3d` 
        :param gridMatrix: 
        :type gridMatrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance of the diesteelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BackReliefToggle: int = ...
    """
    Returns or sets  the back relief toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``BackReliefToggle`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BackReliefToggle`` 
    
    :param backReliefToggle: 
    :type backReliefToggle: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseOrientation: NXOpen.ISurface = ...
    """
    Returns or sets  the base orientation of the steelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseOrientation`` 
    
    :param baseOrientation: 
    :type baseOrientation: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BoltHoleParent: HoleParentBuilder = ...
    """
    Returns  the bolt hole parent builder of the diesteelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``BoltHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CamDirection: NXOpen.IReferenceAxis = ...
    """
    Returns or sets  the cam direction of the steelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``CamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IReferenceAxis` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CamDirection`` 
    
    :param camDirection: 
    :type camDirection: :py:class:`NXOpen.IReferenceAxis` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ConnectProfilesParent: ConnectProfileParentBuilder = ...
    """
    Returns  the connecting profiles parent builder of the diesteelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectProfilesParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.ConnectProfileParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayHoles: bool = ...
    """
    Returns or sets  the display holes of the diesteelinsert  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayHoles`` 
    
    :param displayHoles: 
    :type displayHoles: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance of the diesteelinsert casting 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DowelHoleParent: HoleParentBuilder = ...
    """
    Returns  the dowel hole parent builder of the diesteelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``DowelHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    EndOrientation: NXOpen.ISurface = ...
    """
    Returns or sets  the end orientation of the steelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``EndOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``EndOrientation`` 
    
    :param endOrientation: 
    :type endOrientation: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    InsertType: SteelInsertBuilderInsertTypeOption = ...
    """
    Returns or sets  the insert type 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SteelInsertBuilderInsertTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``InsertType`` 
    
    :param insertType: 
    :type insertType: :py:class:`NXOpen.Die.SteelInsertBuilderInsertTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PierceHoleParent: PierceHoleParentBuilder = ...
    """
    Returns  the pierce hole  parent builder of the diesteelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``PierceHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PierceHoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProfileReliefToggle: int = ...
    """
    Returns or sets  the profile relief toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileReliefToggle`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ProfileReliefToggle`` 
    
    :param profileReliefToggle: 
    :type profileReliefToggle: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReverseTrimSide: bool = ...
    """
    Returns or sets  the reverse trim side setting of the steel insert.  
    
    True indicates that the trim side should be reversed. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseTrimSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseTrimSide`` 
    
    :param reverse: 
    :type reverse: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RibsParent: FlangeSteelRibParentBuilder = ...
    """
    Returns  the ribs  parent builder of the diesteelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``RibsParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.FlangeSteelRibParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Section: SteelInsertSectionBuilder = ...
    """
    Returns  the section builder of the diesteelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``Section`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SteelInsertSectionBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SegmentsParent: SteelInsertSegmentParentBuilder = ...
    """
    Returns  the segments parent builder of the diesteelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentsParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SteelInsertSegmentParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SheetMetal: NXOpen.Body = ...
    """
    Returns or sets  the sheet metal of the die steelinsert  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SheetMetal`` 
    
    :param sheetMetal: 
    :type sheetMetal: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    StartOrientation: NXOpen.ISurface = ...
    """
    Returns or sets  the start orientation of the steelinsert 
    
    <hr>
    
    Getter Method
    
    Signature ``StartOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``StartOrientation`` 
    
    :param startOrientation: 
    :type startOrientation: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: SteelInsertBuilder = ...  # unknown typename


class HandlingCoreBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HandlingCoreBuilderTypes():
    """
    Identifies how the handling Core is located in space. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AtLocation", "Location specified by the user."
       "FromBase", "Location is an offset from the base."
       "MapFromBase", "Locate by finding the minimum distance to the main profile of the target and then project and offset from the base. Used specifically for coring the main wall."
    """
    AtLocation = 0  # HandlingCoreBuilderTypesMemberType
    FromBase = 1  # HandlingCoreBuilderTypesMemberType
    MapFromBase = 2  # HandlingCoreBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HandlingCoreBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a builder that is used to create or edit a :py:class:`NXOpen.Die.HandlingCore` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateHandlingCoreBuilder`
    
    Default values.
    
    ================  =========================================
    Property          Value
    ================  =========================================
    Clearance.Value   100 (millimeters part), 4 (inches part) 
    ----------------  -----------------------------------------
    Depth.Value       40 (millimeters part), 1.6 (inches part) 
    ----------------  -----------------------------------------
    Height.Value      100 (millimeters part), 4 (inches part) 
    ----------------  -----------------------------------------
    Width.Value       75 (millimeters part), 3 (inches part) 
    ================  =========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Identifies how the handling Core is located in space. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AtLocation", "Location specified by the user."
           "FromBase", "Location is an offset from the base."
           "MapFromBase", "Locate by finding the minimum distance to the main profile of the target and then project and offset from the base. Used specifically for coring the main wall."
        """
        AtLocation = 0  # HandlingCoreBuilderTypesMemberType
        FromBase = 1  # HandlingCoreBuilderTypesMemberType
        MapFromBase = 2  # HandlingCoreBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseOrientation: DiePlaneBuilder = ...
    """
    Returns  the base plane of the target.  
    
    Used for orienting the core and offset if needed. 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Clearance: NXOpen.Expression = ...
    """
    Returns  the expression containing the value to use for the clearance offset of the core from the base plane.  
    
    Only valid when type is :py:class:`Die.HandlingCoreBuilderTypes.FromBase <Die.HandlingCoreBuilderTypes>` or :py:class:`Die.HandlingCoreBuilderTypes.MapFromBase <Die.HandlingCoreBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CoreOrientation: DiePlaneBuilder = ...
    """
    Returns  the plane of the core for deriving the rectangle and the start of the core.  
    
    Only valid when type is :py:class:`Die.HandlingCoreBuilderTypes.AtLocation <Die.HandlingCoreBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CoreOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Depth: NXOpen.Expression = ...
    """
    Returns  the expression containing the value to use for the extrusion depth when creating the core.  
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the expression containing the value to use for the height of the core.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Location: DieLocationsBuilder = ...
    """
    Returns  the center location of the handling core.  
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLocationsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Target: NXOpen.SelectBody = ...
    """
    Returns  the target solid the handling core will be subtracted from.  
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: HandlingCoreBuilderTypes = ...
    """
    Returns or sets  the indicator defining how the handling core is located in space.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HandlingCoreBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.HandlingCoreBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the expression containing the value to use for the width of the core.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: HandlingCoreBuilder = ...  # unknown typename


class DieAssistantFlangeProfileList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DieAssistantFlangeProfile]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DieAssistantFlangeProfile) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DieAssistantFlangeProfile) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DieAssistantFlangeProfile:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieAssistantFlangeProfile) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieAssistantFlangeProfile, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DieAssistantFlangeProfile]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DieAssistantFlangeProfile]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DieAssistantFlangeProfile, object2: DieAssistantFlangeProfile) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DieAssistantFlangeProfile) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DieAssistantFlangeProfileList = ...  # unknown typename


class FaceSheetBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Face Sheet feature   
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX5.0.0
    """
    StampingOutput: NXOpen.Features.Feature = ...
    """
    Returns or sets  the stamping output feature of the Face Sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``StampingOutput`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``StampingOutput`` 
    
    :param object: 
    :type object: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: FaceSheetBuilder = ...  # unknown typename


class PierceTaskBuilderCamTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PierceTaskBuilderCamTypes():
    """
    Settings for the cam type of the pierce task. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Direct", "Direct"
       "Aerial", "Aerial Cam"
       "BaseMounted", "Base Mounted Cam"
    """
    Direct = 2  # PierceTaskBuilderCamTypesMemberType
    Aerial = 0  # PierceTaskBuilderCamTypesMemberType
    BaseMounted = 1  # PierceTaskBuilderCamTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PierceTaskBuilderPrecisionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PierceTaskBuilderPrecisionTypes():
    """
    Settings for the precistion type of the pierce task. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Gage", "Gage hole"
       "Critical", "Critical hole"
       "Standard", "Standard hole"
    """
    Gage = 0  # PierceTaskBuilderPrecisionTypesMemberType
    Critical = 1  # PierceTaskBuilderPrecisionTypesMemberType
    Standard = 2  # PierceTaskBuilderPrecisionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PierceTaskBuilderCenterPointOptionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PierceTaskBuilderCenterPointOptionTypes():
    """
    Settings for the center point output options of the pierce task. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No center points output"
       "Die", "Center points output in die position"
       "Product", "Center points output in product position"
       "Both", "Center points output in both die and product position"
    """
    NotSet = 0  # PierceTaskBuilderCenterPointOptionTypesMemberType
    Die = 1  # PierceTaskBuilderCenterPointOptionTypesMemberType
    Product = 2  # PierceTaskBuilderCenterPointOptionTypesMemberType
    Both = 3  # PierceTaskBuilderCenterPointOptionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PierceTaskBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Pierce Task feature builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.PierceTask`
    
    .. versionadded:: NX4.0.0
    """
    
    class CamTypes():
        """
        Settings for the cam type of the pierce task. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Direct", "Direct"
           "Aerial", "Aerial Cam"
           "BaseMounted", "Base Mounted Cam"
        """
        Direct = 2  # PierceTaskBuilderCamTypesMemberType
        Aerial = 0  # PierceTaskBuilderCamTypesMemberType
        BaseMounted = 1  # PierceTaskBuilderCamTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PrecisionTypes():
        """
        Settings for the precistion type of the pierce task. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Gage", "Gage hole"
           "Critical", "Critical hole"
           "Standard", "Standard hole"
        """
        Gage = 0  # PierceTaskBuilderPrecisionTypesMemberType
        Critical = 1  # PierceTaskBuilderPrecisionTypesMemberType
        Standard = 2  # PierceTaskBuilderPrecisionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CenterPointOptionTypes():
        """
        Settings for the center point output options of the pierce task. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No center points output"
           "Die", "Center points output in die position"
           "Product", "Center points output in product position"
           "Both", "Center points output in both die and product position"
        """
        NotSet = 0  # PierceTaskBuilderCenterPointOptionTypesMemberType
        Die = 1  # PierceTaskBuilderCenterPointOptionTypesMemberType
        Product = 2  # PierceTaskBuilderCenterPointOptionTypesMemberType
        Both = 3  # PierceTaskBuilderCenterPointOptionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetPierceBounds(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the pierce bounds of the pierce task.  
        
        Note - :py:meth:`Die.PierceTaskBuilder.TippedProduct` needs to be called before this function. 
        
        Signature ``SetPierceBounds(direction, profileEntries)`` 
        
        :param direction:  Profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  Profile entries that make up the                                                                                               boundary of the pierce task  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetPierceBounds(self) -> tuple:
        """
        Gets the pierce bounds of the pierce task  
        
        Signature ``GetPierceBounds()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   Profile entries that make up the                                                                                            boundary of the pierce task direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetAssociativeObjects(self, objects: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets the associative objects of the pierce task 
        
        Signature ``SetAssociativeObjects(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetAssociativeObjects(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Gets the associative objects of the pierce task  
        
        Signature ``GetAssociativeObjects()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetCameraViews(self, objects: 'list[NXOpen.View]') -> None:
        """
        Sets the camera views of the pierce task 
        
        Signature ``SetCameraViews(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetCameraViews(self) -> 'list[NXOpen.View]':
        """
        Gets the camera views of the pierce task  
        
        Signature ``GetCameraViews()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetDetails(self, strings: 'list[str]') -> None:
        """
        Sets the detailed description of the pierce task 
        
        Signature ``SetDetails(strings)`` 
        
        :param strings:  detail strings  
        :type strings: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetDetails(self) -> 'list[str]':
        """
        Gets the detailed description of the pierce task  
        
        Signature ``GetDetails()`` 
        
        :returns:  detail strings  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetCameraLayerAndXmlp(self) -> tuple:
        """
        Gets the camera layer settings and xmlp data  
        
        Signature ``GetCameraLayerAndXmlp()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (layerSettings, xmlpData). layerSettings is a list of str.   1 layer setting string for each camera object.                                                                the string needs to be 256 characters long                                                                (one for each user layer) with either 0 for off                                                               or 1 for on. xmlpData is a list of str.   xmlp data 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetCameraLayerAndXmlp(self, layerSettings: 'list[str]', xmlpData: 'list[str]') -> None:
        """
        Sets the camera layer settings and xmlp data 
        
        Signature ``SetCameraLayerAndXmlp(layerSettings, xmlpData)`` 
        
        :param layerSettings:  1 layer setting string for each camera object.                                                                the string needs to be 256 characters long                                                                (one for each user layer) with either 0 for off                                                               or 1 for on.  
        :type layerSettings: list of str 
        :param xmlpData:  xmlp data  
        :type xmlpData: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetCameraNames(self, strings: 'list[str]') -> None:
        """
        Sets the names of the camera 
        
        Signature ``SetCameraNames(strings)`` 
        
        :param strings:  each string contains the name of a camera object  
        :type strings: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetCameraNames(self) -> 'list[str]':
        """
        Gets the names of the camera  
        
        Signature ``GetCameraNames()`` 
        
        :returns:  each string contains the name of a camera object  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def NewPierceHole(self, holeShape: PierceItemBuilderHoleShapeType) -> PierceItemBuilder:
        """
        Creates a new pierce hole item in the set  
        
        Signature ``NewPierceHole(holeShape)`` 
        
        :param holeShape: 
        :type holeShape: :py:class:`NXOpen.Die.PierceItemBuilderHoleShapeType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.PierceItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance of the pierce task 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    AssociatedObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the assoc objects 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CamDirection: NXOpen.ILocation = ...
    """
    Returns or sets  the cam direction of the pierce task 
    
    <hr>
    
    Getter Method
    
    Signature ``CamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CamDirection`` 
    
    :param camDirection: 
    :type camDirection: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CamType: PierceTaskBuilderCamTypes = ...
    """
    Returns or sets  the cam type of the pierce task 
    
    <hr>
    
    Getter Method
    
    Signature ``CamType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PierceTaskBuilderCamTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CamType`` 
    
    :param camType: 
    :type camType: :py:class:`NXOpen.Die.PierceTaskBuilderCamTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CenterPointOption: PierceTaskBuilderCenterPointOptionTypes = ...
    """
    Returns or sets  the center point output option of the pierce task 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterPointOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PierceTaskBuilderCenterPointOptionTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CenterPointOption`` 
    
    :param centerPointOption: 
    :type centerPointOption: :py:class:`NXOpen.Die.PierceTaskBuilderCenterPointOptionTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CreateScrap: bool = ...
    """
    Returns or sets  the create scrap setting of the pierce task.  
    
    True indicates that the scrap is to be created. 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateScrap`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CreateScrap`` 
    
    :param createScrap: 
    :type createScrap: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance of the pierce task 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FinishOperation: bool = ...
    """
    Returns or sets  the finish operation of the pierce task 
    True indicates the pierce is to be a finish pierce.  
    
    False indicates rough pierce. 
    
    <hr>
    
    Getter Method
    
    Signature ``FinishOperation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FinishOperation`` 
    
    :param finishOperation: 
    :type finishOperation: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    LayoutFlange: bool = ...
    """
    Returns or sets  the layout flange setting of the pierce task.  
    
    True indicates that the pierce curve is to be laid out on the flange. 
    
    <hr>
    
    Getter Method
    
    Signature ``LayoutFlange`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``LayoutFlange`` 
    
    :param layoutFlange: 
    :type layoutFlange: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PierceHoles: NXOpen.ScCollector = ...
    """
    Returns  the pierce holes 
    
    <hr>
    
    Getter Method
    
    Signature ``PierceHoles`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PierceHolesList: PierceItemBuilderList = ...
    """
    Returns  the pierce holes list 
    
    <hr>
    
    Getter Method
    
    Signature ``PierceHolesList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PierceItemBuilderList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PrecisionType: PierceTaskBuilderPrecisionTypes = ...
    """
    Returns or sets  the precision type of the pierce task 
    
    <hr>
    
    Getter Method
    
    Signature ``PrecisionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PierceTaskBuilderPrecisionTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``PrecisionType`` 
    
    :param precisionType: 
    :type precisionType: :py:class:`NXOpen.Die.PierceTaskBuilderPrecisionTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TipFeature: NXOpen.Features.SelectFeature = ...
    """
    Returns  the tip feature 
    
    <hr>
    
    Getter Method
    
    Signature ``TipFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TippedProduct: NXOpen.Features.Feature = ...
    """
    Returns or sets  the tipped product of the pierce task 
    
    <hr>
    
    Getter Method
    
    Signature ``TippedProduct`` 
    
    :returns:  The tip of the operation where the pierce
    task resides.  
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TippedProduct`` 
    
    :param tippedProduct:  The tip of the operation where the pierce                                                                   task resides.  
    :type tippedProduct: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimNewDieFace: bool = ...
    """
    Returns or sets  the trim new die face, from NX10.  
    
    0 new stamping output can import one new die face to die engineer process.
    If this pierce task will trim this new die face, set trimNewDieFace to true, or else set it to false. 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimNewDieFace`` 
    
    :returns:  if pierce task performs on new die face, this will be true, or else this will be false.  
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimNewDieFace`` 
    
    :param trimNewDieFace:  if set to true, pierce task performs on new die face, or else it will perform on original die face.  
    :type trimNewDieFace: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    WithoutWorkflowSheet: NXOpen.Body = ...
    """
    Returns or sets  the without workflow sheet of the pierce task builder.  
    
    In release NX11.0, pierce task supports without workflow type 
    when the workflow tip feature does not exist. 
    
    <hr>
    
    Getter Method
    
    Signature ``WithoutWorkflowSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``WithoutWorkflowSheet`` 
    
    :param sheet: 
    :type sheet: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: PierceTaskBuilder = ...  # unknown typename


class PierceItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[PierceItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Die.PierceItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: PierceItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Die.PierceItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: PierceItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Die.PierceItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> PierceItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Die.PierceItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PierceItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.PierceItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PierceItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.PierceItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[PierceItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Die.PierceItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[PierceItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Die.PierceItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: PierceItemBuilder, object2: PierceItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Die.PierceItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Die.PierceItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: PierceItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Die.PierceItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: PierceItemBuilderList = ...  # unknown typename


class Tip(NXOpen.Features.Feature):
    """
    Represents a Tip feature.  
    
    This class supports operations on a Tip feature, see TipBuilder for creation.
    
    .. versionadded:: NX4.0.0
    """
    
    def CreateDieData(self, allTips: bool) -> None:
        """
        Creates a copy of the product data in die position.  
        
        The product data is not visible upon creation. 
        This method must be called before using the methods :py:meth:`Die.Tip.DeleteDieData`, 
        :py:meth:`Die.Tip.DisplayDieData`, :py:meth:`Die.Tip.UndisplayDieData`, 
        :py:meth:`Die.Tip.TransformDiePoint`, or :py:meth:`Die.Tip.TransformDieDirection`. 
        
        Signature ``CreateDieData(allTips)`` 
        
        :param allTips:  Create the die position product data of all tips in the operation?  
        :type allTips: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def DeleteDieData(self) -> None:
        """
        Deletes the copy of the product data.  
        
        Signature ``DeleteDieData()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def DisplayDieData(self) -> None:
        """
        Makes the product data in die position visible.  
        
        The display of the Tip feature is made invisible. 
        
        Signature ``DisplayDieData()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def UndisplayDieData(self) -> None:
        """
        Makes the product data in die position invisible.  
        
        The display of the Tip feature is made visible. 
        
        Signature ``UndisplayDieData()`` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def TransformDiePoint(self, point: NXOpen.Point) -> None:
        """
        Transforms the point from die position to product position.  
        
        Signature ``TransformDiePoint(point)`` 
        
        :param point:  Point to be transformed.  
        :type point: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def TransformDieDirection(self, vector: NXOpen.Direction) -> None:
        """
        Transforms the direction from die position to product position.  
        
        Signature ``TransformDieDirection(vector)`` 
        
        :param vector:  Direction to be transformed.  
        :type vector: :py:class:`NXOpen.Direction` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetReferenceCurves(self, objects: 'list[NXOpen.Curve]') -> None:
        """
        Sets reference curves in the die tip feature.  
        
        Signature ``SetReferenceCurves(objects)`` 
        
        :param objects:  Curves to be added to the tip  
        :type objects: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def MapCollectorToPart(self, collector: NXOpen.ScCollector) -> None:
        """
        Maps the edges in the collector from die position to part position.  
        
        Signature ``MapCollectorToPart(collector)`` 
        
        :param collector: 
        :type collector: :py:class:`NXOpen.ScCollector` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def MapCollectorToDie(self, collector: NXOpen.ScCollector) -> None:
        """
        Maps the edges in the collector from part position to die position.  
        
        Signature ``MapCollectorToDie(collector)`` 
        
        :param collector: 
        :type collector: :py:class:`NXOpen.ScCollector` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def MapEdge(self, inEdge: NXOpen.IProfile) -> tuple:
        """
        Maps the edge to find the part and die position entity, either can be a None.  
        
        Signature ``MapEdge(inEdge)`` 
        
        :param inEdge: 
        :type inEdge: :py:class:`NXOpen.IProfile` 
        :returns: a tuple 
        :rtype: A tuple consisting of (partEdge, dieEdge). partEdge is a :py:class:`NXOpen.IProfile`. dieEdge is a :py:class:`NXOpen.IProfile`. 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetUnprocessedHoles(self) -> 'list[NXOpen.Edge]':
        """
        Finds the hole edges that have not been processed yet.  
        
        Signature ``GetUnprocessedHoles()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Edge` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def AddToDieData(self, objects: 'list[NXOpen.Curve]') -> None:
        """
        Adds the input curves to the die data.  
        
        Signature ``AddToDieData(objects)`` 
        
        :param objects:  Curves to be added to the die data  
        :type objects: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    Null: Tip = ...  # unknown typename


class PressureSystemChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Pressure System Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the pressure system.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Clearance: float = ...
    """
    Returns or sets  the clearance of the pressure system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Clearance`` 
    
    :param clearance: 
    :type clearance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Csys: NXOpen.CartesianCoordinateSystem = ...
    """
    Returns or sets  the csys of the pressure system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Csys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CartesianCoordinateSystem` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Csys`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.CartesianCoordinateSystem` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the pressure system, if true the pressure system will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Diameter: float = ...
    """
    Returns or sets  the diameter of the pressure system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Diameter`` 
    
    :param diameter: 
    :type diameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the pressure system, if true input data to the pressure system will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Height: float = ...
    """
    Returns or sets  the height of the pressure system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the location of the pressure system.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: PressureSystemChildBuilder = ...  # unknown typename


class KeywayBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class KeywayBuilderTypes():
    """
    Keyway runoff types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangular", "tool runoff is perpendicular to slot"
       "Circular", "tool runoff is created using a plunge cut at the end of the slot"
    """
    Rectangular = 0  # KeywayBuilderTypesMemberType
    Circular = 1  # KeywayBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class KeywayBuilderLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class KeywayBuilderLocationType():
    """
    Keyway location direction relative to the die centerline coordinate system 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PositiveX", "+X relative to the center of the coordinate system"
       "NegativeX", "-X relative to the center of the coordinate system"
       "PositiveY", "+Y relative to the center of the coordinate system"
       "NegativeY", "-Y relative to the center of the coordinate system"
    """
    PositiveX = 0  # KeywayBuilderLocationTypeMemberType
    NegativeX = 1  # KeywayBuilderLocationTypeMemberType
    PositiveY = 2  # KeywayBuilderLocationTypeMemberType
    NegativeY = 3  # KeywayBuilderLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class KeywayBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Die.KeywayBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.Keyway`
    
    Default values.
    
    =======================  ===============================================
    Property                 Value
    =======================  ===============================================
    AngleTolerance           0.5 
    -----------------------  -----------------------------------------------
    CreateWithPad            1 
    -----------------------  -----------------------------------------------
    DeckThickness.Value      0 (millimeters part), 0 (inches part) 
    -----------------------  -----------------------------------------------
    DistanceTolerance        0.0254 (millimeters part), 0.001 (inches part) 
    -----------------------  -----------------------------------------------
    Location                 PositiveX 
    -----------------------  -----------------------------------------------
    MinimumRibHeight.Value   200 (millimeters part), 8 (inches part) 
    -----------------------  -----------------------------------------------
    Offset.Value             0 (millimeters part), 0 (inches part) 
    -----------------------  -----------------------------------------------
    PadHeight.Value          65 (millimeters part), 2.6 (inches part) 
    -----------------------  -----------------------------------------------
    PadWidth.Value           60 (millimeters part), 2.4 (inches part) 
    -----------------------  -----------------------------------------------
    PlacementOffset.Value    0 (millimeters part), 0 (inches part) 
    -----------------------  -----------------------------------------------
    RunoffDepth.Value        40 (millimeters part), 1.6 (inches part) 
    -----------------------  -----------------------------------------------
    RunoffLength.Value       60 (millimeters part), 2.4 (inches part) 
    -----------------------  -----------------------------------------------
    RunoffRadius.Value       30 (millimeters part), 1.2 (inches part) 
    -----------------------  -----------------------------------------------
    RunoffWidth.Value        16 (millimeters part), 0.625 (inches part) 
    -----------------------  -----------------------------------------------
    SlotDepth.Value          20 (millimeters part), 0.8 (inches part) 
    -----------------------  -----------------------------------------------
    SlotLength.Value         100 (millimeters part), 4 (inches part) 
    -----------------------  -----------------------------------------------
    SlotWidth.Value          25 (millimeters part), 1 (inches part) 
    =======================  ===============================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Keyway runoff types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangular", "tool runoff is perpendicular to slot"
           "Circular", "tool runoff is created using a plunge cut at the end of the slot"
        """
        Rectangular = 0  # KeywayBuilderTypesMemberType
        Circular = 1  # KeywayBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LocationType():
        """
        Keyway location direction relative to the die centerline coordinate system 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PositiveX", "+X relative to the center of the coordinate system"
           "NegativeX", "-X relative to the center of the coordinate system"
           "PositiveY", "+Y relative to the center of the coordinate system"
           "NegativeY", "-Y relative to the center of the coordinate system"
        """
        PositiveX = 0  # KeywayBuilderLocationTypeMemberType
        NegativeX = 1  # KeywayBuilderLocationTypeMemberType
        PositiveY = 2  # KeywayBuilderLocationTypeMemberType
        NegativeY = 3  # KeywayBuilderLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseFlange: NXOpen.Section = ...
    """
    Returns  the closed loop section representing the base flange 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseFlange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BaseOrientation: DiePlaneBuilder = ...
    """
    Returns  the bottom orientation plane of the keyway pad 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CreateWithPad: bool = ...
    """
    Returns or sets  the value, true or false) to decide if the pad should be created for the keyway 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateWithPad`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateWithPad`` 
    
    :param createWithPad: 
    :type createWithPad: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DeckThickness: NXOpen.Expression = ...
    """
    Returns  the expression for the deck thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``DeckThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DieCenterlineCoordinateSystem: NXOpen.SelectCartesianCoordinateSystem = ...
    """
    Returns  the die centerline coordinate system for orienting the keyway 
    
    <hr>
    
    Getter Method
    
    Signature ``DieCenterlineCoordinateSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCartesianCoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    InteriorProfile: NXOpen.Section = ...
    """
    Returns  the closed loop section representing the interior profile of the casting 
    
    <hr>
    
    Getter Method
    
    Signature ``InteriorProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Location: KeywayBuilderLocationType = ...
    """
    Returns or sets  the location for the keyway 
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.KeywayBuilderLocationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Location`` 
    
    :param location: 
    :type location: :py:class:`NXOpen.Die.KeywayBuilderLocationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MinimumRibHeight: NXOpen.Expression = ...
    """
    Returns  the expression for the minimum rib height 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumRibHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the amount to offset the keyway perpendicular to the slot orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadAttributes: DieAttributesBuilder = ...
    """
    Returns  the pad attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``PadAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadHeight: NXOpen.Expression = ...
    """
    Returns  the expression for the pad height 
    
    <hr>
    
    Getter Method
    
    Signature ``PadHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadWidth: NXOpen.Expression = ...
    """
    Returns  the expression for the pad width 
    
    <hr>
    
    Getter Method
    
    Signature ``PadWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PlacementOffset: NXOpen.Expression = ...
    """
    Returns  the amount to offset the base orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RunoffDepth: NXOpen.Expression = ...
    """
    Returns  the expression for the runoff depth 
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RunoffLength: NXOpen.Expression = ...
    """
    Returns  the expression for the runoff length 
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RunoffRadius: NXOpen.Expression = ...
    """
    Returns  the expression for the runoff radius 
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RunoffWidth: NXOpen.Expression = ...
    """
    Returns  the expression for the runoff width 
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SheetMetal: NXOpen.SelectNXObject = ...
    """
    Returns  the sheet metal being formed by the casting.  
    
    Used to measure the height. 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SlotAttributes: DieAttributesBuilder = ...
    """
    Returns  the slot attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``SlotAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SlotDepth: NXOpen.Expression = ...
    """
    Returns  the expression for the slot depth 
    
    <hr>
    
    Getter Method
    
    Signature ``SlotDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SlotLength: NXOpen.Expression = ...
    """
    Returns  the expression for the slot length 
    
    <hr>
    
    Getter Method
    
    Signature ``SlotLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SlotWidth: NXOpen.Expression = ...
    """
    Returns  the expression for the slot width 
    
    <hr>
    
    Getter Method
    
    Signature ``SlotWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Target: NXOpen.SelectNXObject = ...
    """
    Returns  the target solid the keyway will be united with 
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: KeywayBuilderTypes = ...
    """
    Returns or sets  the type of the keyway runoff 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.KeywayBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.KeywayBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: KeywayBuilder = ...  # unknown typename


class AddendumSectionUserDefinedBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Die.AddendumSectionUserDefinedBuilder` builder used to select a previously
    defined section or a string of objects to define the section shape.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateAddendumSectionUserDefinedBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def CreateUserDefinedSection(self) -> NXOpen.Curve:
        """
        Creates user defined addendum section based upon input to :py:meth:`NXOpen.Die.AddendumSectionUserDefinedBuilder.Section`.  
        
        Signature ``CreateUserDefinedSection()`` 
        
        :returns:  user defined section curve  
        :rtype: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    ReverseAnchorPoint: bool = ...
    """
    Returns or sets  the indicator to reverse the anchor point.  
    
    The anchor point is initially the first point of the joined string of
    selected objects.  This is used as the starting point for the section when it is placed on the tangency curve.
    It can be reversed to use the other end of the string as the starting point. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseAnchorPoint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseAnchorPoint`` 
    
    :param reverseAnchorPoint: 
    :type reverseAnchorPoint: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Section: NXOpen.Section = ...
    """
    Returns  the objects defining the section, either a previously defined section or a string of objects defining the section shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``Section`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: AddendumSectionUserDefinedBuilder = ...  # unknown typename


class ThroatParentBuilderTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ThroatParentBuilderTypeOption():
    """
    Settings for the type of the throat section. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Wipe", "Throat is built for a wipe operation."
       "Restrike", "Throat is built for a restrike operation."
    """
    Wipe = 0  # ThroatParentBuilderTypeOptionMemberType
    Restrike = 1  # ThroatParentBuilderTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ThroatParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Throat Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class TypeOption():
        """
        Settings for the type of the throat section. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Wipe", "Throat is built for a wipe operation."
           "Restrike", "Throat is built for a restrike operation."
        """
        Wipe = 0  # ThroatParentBuilderTypeOptionMemberType
        Restrike = 1  # ThroatParentBuilderTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetExtensionAttributes(self) -> tuple:
        """
        Gets the extension attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetExtensionAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of extension faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetExtensionAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the extension attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetExtensionAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of extension faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetCavityAttributes(self) -> tuple:
        """
        Gets the cavity attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetCavityAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of cavity faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetCavityAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the cavity attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetCavityAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of cavity faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateChild(self) -> ThroatChildBuilder:
        """
        Creates a child throat section.  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.ThroatChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, diethroatchild: ThroatChildBuilder) -> None:
        """
        Deletes a child throat section.  
        
        Signature ``DeleteChild(diethroatchild)`` 
        
        :param diethroatchild: 
        :type diethroatchild: :py:class:`NXOpen.Die.ThroatChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[ThroatChildBuilder]':
        """
        Outputs the child throat sections.  
        
        Signature ``GetChildren()`` 
        
        :returns:  The child throat sections.  
        :rtype: list of :py:class:`NXOpen.Die.ThroatChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the throat sections.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the throat sections, if true the throat sections will be built into the model, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the throat sections, if true input data to the throat sections will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Radius: float = ...
    """
    Returns or sets  the radius to be applied at the back of the throat, top and bottom 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Radius`` 
    
    :param radius: 
    :type radius: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Step: float = ...
    """
    Returns or sets  the step to be applied at the end of the tangential extension of the flange 
    
    <hr>
    
    Getter Method
    
    Signature ``Step`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Step`` 
    
    :param step: 
    :type step: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Type: ThroatParentBuilderTypeOption = ...
    """
    Returns or sets  the type of throat sections.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.ThroatParentBuilderTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.ThroatParentBuilderTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: ThroatParentBuilder = ...  # unknown typename


class HandlingCoreParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Handling Core Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def CreateChild(self) -> HandlingCoreChildBuilder:
        """
        Creates a child handling core.  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.HandlingCoreChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, diehandlingcorechild: HandlingCoreChildBuilder) -> None:
        """
        Deletes a child handling core.  
        
        Signature ``DeleteChild(diehandlingcorechild)`` 
        
        :param diehandlingcorechild: 
        :type diehandlingcorechild: :py:class:`NXOpen.Die.HandlingCoreChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[HandlingCoreChildBuilder]':
        """
        Outputs the child handling cores.  
        
        Signature ``GetChildren()`` 
        
        :returns:  The child handling cores.  
        :rtype: list of :py:class:`NXOpen.Die.HandlingCoreChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of handling cores.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Clearance: float = ...
    """
    Returns or sets  the clearance of handling cores.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Clearance`` 
    
    :param clearance: 
    :type clearance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Depth: float = ...
    """
    Returns or sets  the depth of handling cores.  
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Depth`` 
    
    :param depth: 
    :type depth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of handling cores, if true the handling cores will be built into the model, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of handling cores, if true input data to the handling cores will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Height: float = ...
    """
    Returns or sets  the height of handling cores.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: float = ...
    """
    Returns or sets  the width of handling cores.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: HandlingCoreParentBuilder = ...  # unknown typename


class SteelInsertSegmentParentBuilderInsertTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelInsertSegmentParentBuilderInsertTypeOption():
    """
    Settings for the insert type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Trim", "trim"
       "Flange", "flange"
       "OffsetFlange", "offset_flange"
    """
    Trim = 0  # SteelInsertSegmentParentBuilderInsertTypeOptionMemberType
    Flange = 1  # SteelInsertSegmentParentBuilderInsertTypeOptionMemberType
    OffsetFlange = 2  # SteelInsertSegmentParentBuilderInsertTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelInsertSegmentParentBuilderExtensionTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelInsertSegmentParentBuilderExtensionTypeOption():
    """
    Settings for the extension type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "constant"
       "MaxdistPlusConst", "maximum distance + constant"
       "Law", "law"
    """
    Constant = 0  # SteelInsertSegmentParentBuilderExtensionTypeOptionMemberType
    MaxdistPlusConst = 1  # SteelInsertSegmentParentBuilderExtensionTypeOptionMemberType
    Law = 2  # SteelInsertSegmentParentBuilderExtensionTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelInsertSegmentParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Steel Insert Segment Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class InsertTypeOption():
        """
        Settings for the insert type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Trim", "trim"
           "Flange", "flange"
           "OffsetFlange", "offset_flange"
        """
        Trim = 0  # SteelInsertSegmentParentBuilderInsertTypeOptionMemberType
        Flange = 1  # SteelInsertSegmentParentBuilderInsertTypeOptionMemberType
        OffsetFlange = 2  # SteelInsertSegmentParentBuilderInsertTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ExtensionTypeOption():
        """
        Settings for the extension type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "constant"
           "MaxdistPlusConst", "maximum distance + constant"
           "Law", "law"
        """
        Constant = 0  # SteelInsertSegmentParentBuilderExtensionTypeOptionMemberType
        MaxdistPlusConst = 1  # SteelInsertSegmentParentBuilderExtensionTypeOptionMemberType
        Law = 2  # SteelInsertSegmentParentBuilderExtensionTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetBeltThickness(self, beltThickness: str) -> None:
        """
        Signature ``SetBeltThickness(beltThickness)`` 
        
        :param beltThickness: 
        :type beltThickness: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetReliefAngle(self, reliefAngle: str) -> None:
        """
        Signature ``SetReliefAngle(reliefAngle)`` 
        
        :param reliefAngle: 
        :type reliefAngle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetProfileRelief(self, profileRelief: str) -> None:
        """
        Signature ``SetProfileRelief(profileRelief)`` 
        
        :param profileRelief: 
        :type profileRelief: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetExtensionDistance(self, extensionDistance: str) -> None:
        """
        Signature ``SetExtensionDistance(extensionDistance)`` 
        
        :param extensionDistance: 
        :type extensionDistance: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateChild(self) -> SteelInsertSegmentChildBuilder:
        """
        Creates a child siseg  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.SteelInsertSegmentChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, diesisegchild: SteelInsertSegmentChildBuilder) -> None:
        """
        Deletes a child siseg 
        
        Signature ``DeleteChild(diesisegchild)`` 
        
        :param diesisegchild: 
        :type diesisegchild: :py:class:`NXOpen.Die.SteelInsertSegmentChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[SteelInsertSegmentChildBuilder]':
        """
        Outputs the children  
        
        Signature ``GetChildren()`` 
        
        :returns:  children  
        :rtype: list of :py:class:`NXOpen.Die.SteelInsertSegmentChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    AddEndPointsSwitch: int = ...
    """
    Returns or sets  the add end points switch 
    
    <hr>
    
    Getter Method
    
    Signature ``AddEndPointsSwitch`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``AddEndPointsSwitch`` 
    
    :param addEndPointsSwitch: 
    :type addEndPointsSwitch: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BeltThickness: NXOpen.Expression = ...
    """
    Returns  the belt thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``BeltThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of die sisegs 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of die sisegs 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of die sisegs 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExtensionDistance: NXOpen.Expression = ...
    """
    Returns  the extension distance 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExtensionType: SteelInsertSegmentParentBuilderExtensionTypeOption = ...
    """
    Returns or sets  the extension type 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SteelInsertSegmentParentBuilderExtensionTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionType`` 
    
    :param extensionType: 
    :type extensionType: :py:class:`NXOpen.Die.SteelInsertSegmentParentBuilderExtensionTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    InsertType: SteelInsertSegmentParentBuilderInsertTypeOption = ...
    """
    Returns or sets  the insert type 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SteelInsertSegmentParentBuilderInsertTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``InsertType`` 
    
    :param insertType: 
    :type insertType: :py:class:`NXOpen.Die.SteelInsertSegmentParentBuilderInsertTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProfileRelief: NXOpen.Expression = ...
    """
    Returns  the profile relief 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileRelief`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProfileReliefToggle: bool = ...
    """
    Returns or sets  the profile relief 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileReliefToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ProfileReliefToggle`` 
    
    :param profileReliefToggle: 
    :type profileReliefToggle: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefAngle: NXOpen.Expression = ...
    """
    Returns  the relief angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: SteelInsertSegmentParentBuilder = ...  # unknown typename


class FormTaskBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Form Task feature builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.FormTask`
    
    .. versionadded:: NX4.0.0
    """
    
    def SetRegionBounds(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the region bounds of the form task.  
        
        Signature ``SetRegionBounds(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetRegionBounds(self) -> tuple:
        """
        Gets the region bounds of the form task.  
        
        Signature ``GetRegionBounds()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    @typing.overload
    def SetShapeDetail(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the shape detail of the form task using a profile. 
        
        Signature ``SetShapeDetail(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    @typing.overload
    def SetShapeDetail(self, bodies: 'list[NXOpen.Body]') -> None:
        """
        Sets the shape detail of the form task. 
        
        Signature ``SetShapeDetail(bodies)`` 
        
        :param bodies:  Sheet bodies defining the unfinished shape.  
        :type bodies: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetShapeDetailByProfile(self) -> tuple:
        """
        Gets the shape detail of the form task as a profile.  
        
        Signature ``GetShapeDetailByProfile()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetShapeDetail(self) -> 'list[NXOpen.Body]':
        """
        Gets the shape detail of the form task.  
        
        Signature ``GetShapeDetail()`` 
        
        :returns:  Sheet bodies defining the unfinished shape.  
        :rtype: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetDetails(self, strings: 'list[str]') -> None:
        """
        Sets the details of the form task.  
        
        Signature ``SetDetails(strings)`` 
        
        :param strings:  Detail strings.  
        :type strings: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetDetails(self) -> 'list[str]':
        """
        Gets the details of the form task.  
        
        Signature ``GetDetails()`` 
        
        :returns:  Detail strings.  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance of the form task.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CamDirection: NXOpen.ILocation = ...
    """
    Returns or sets  the cam direction of the form task.  
    
    <hr>
    
    Getter Method
    
    Signature ``CamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CamDirection`` 
    
    :param camDirection: 
    :type camDirection: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance of the form task.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FinishOperation: bool = ...
    """
    Returns or sets  the finish operation switch of the form task, if true the form task is a finish operation, if false it is not.  
    
    <hr>
    
    Getter Method
    
    Signature ``FinishOperation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FinishOperation`` 
    
    :param finishOperation: 
    :type finishOperation: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PointInRegion: NXOpen.Point = ...
    """
    Returns or sets  the point in region of the form task.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointInRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``PointInRegion`` 
    
    :param pointInRegion: 
    :type pointInRegion: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TippedProduct: NXOpen.Features.Feature = ...
    """
    Returns or sets  the tipped product of the form task.  
    
    <hr>
    
    Getter Method
    
    Signature ``TippedProduct`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TippedProduct`` 
    
    :param tippedProduct: 
    :type tippedProduct: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: FormTaskBuilder = ...  # unknown typename


class QuickBinderBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickBinderBuilderTypes():
    """
    The method used to approximate the product faces. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Planar", "planar"
       "Cylindrical", "cylindrical"
       "Conical", "conical"
       "MonoArc", "mono arc"
    """
    Planar = 0  # QuickBinderBuilderTypesMemberType
    Cylindrical = 1  # QuickBinderBuilderTypesMemberType
    Conical = 2  # QuickBinderBuilderTypesMemberType
    MonoArc = 3  # QuickBinderBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickBinderBuilderEditTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickBinderBuilderEditTypes():
    """
    The type of edit to be performed on the face. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EdgeExtend", "Extend edge of a face."
       "EdgeExtendStart", "Extend start edge of a planar face."
       "EdgeExtendEnd", "Extend end edge of a planar face."
       "EdgeAngleStart", "Change the angle of the start edge of a planar face."
       "EdgeAngleEnd", "Change the angle of the end edge of a planar face."
       "FaceRadius", "Change the face radius of a conical/cylindrical face."
       "FaceCentralAngle", "Change the central angle of a conical/cylindrical face."
       "FaceReverseConvexity", "Reverse the convexity of a conical/cylindrical face."
       "Transform", "Transform body."
       "ExtendUMinimum", "Extend the U Minimum edge of the anchor face."
       "ExtendUMaximum", "Extend the U Maximum edge of the anchor face."
       "ExtendVMinimum", "Extend the V Minimum edge of the anchor face."
       "ExtendVMaximum", "Extend the V Maximum edge of the anchor face."
    """
    EdgeExtend = 0  # QuickBinderBuilderEditTypesMemberType
    EdgeExtendStart = 1  # QuickBinderBuilderEditTypesMemberType
    EdgeExtendEnd = 2  # QuickBinderBuilderEditTypesMemberType
    EdgeAngleStart = 3  # QuickBinderBuilderEditTypesMemberType
    EdgeAngleEnd = 4  # QuickBinderBuilderEditTypesMemberType
    FaceRadius = 5  # QuickBinderBuilderEditTypesMemberType
    FaceCentralAngle = 6  # QuickBinderBuilderEditTypesMemberType
    FaceReverseConvexity = 7  # QuickBinderBuilderEditTypesMemberType
    Transform = 8  # QuickBinderBuilderEditTypesMemberType
    ExtendUMinimum = 9  # QuickBinderBuilderEditTypesMemberType
    ExtendUMaximum = 10  # QuickBinderBuilderEditTypesMemberType
    ExtendVMinimum = 11  # QuickBinderBuilderEditTypesMemberType
    ExtendVMaximum = 12  # QuickBinderBuilderEditTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickBinderBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Die.QuickBinderBuilder` builder which builds a developable binder sheet
    body by adding cones, cylinders, or planes to an approximated face.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateQuickBinderBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        The method used to approximate the product faces. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Planar", "planar"
           "Cylindrical", "cylindrical"
           "Conical", "conical"
           "MonoArc", "mono arc"
        """
        Planar = 0  # QuickBinderBuilderTypesMemberType
        Cylindrical = 1  # QuickBinderBuilderTypesMemberType
        Conical = 2  # QuickBinderBuilderTypesMemberType
        MonoArc = 3  # QuickBinderBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EditTypes():
        """
        The type of edit to be performed on the face. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EdgeExtend", "Extend edge of a face."
           "EdgeExtendStart", "Extend start edge of a planar face."
           "EdgeExtendEnd", "Extend end edge of a planar face."
           "EdgeAngleStart", "Change the angle of the start edge of a planar face."
           "EdgeAngleEnd", "Change the angle of the end edge of a planar face."
           "FaceRadius", "Change the face radius of a conical/cylindrical face."
           "FaceCentralAngle", "Change the central angle of a conical/cylindrical face."
           "FaceReverseConvexity", "Reverse the convexity of a conical/cylindrical face."
           "Transform", "Transform body."
           "ExtendUMinimum", "Extend the U Minimum edge of the anchor face."
           "ExtendUMaximum", "Extend the U Maximum edge of the anchor face."
           "ExtendVMinimum", "Extend the V Minimum edge of the anchor face."
           "ExtendVMaximum", "Extend the V Maximum edge of the anchor face."
        """
        EdgeExtend = 0  # QuickBinderBuilderEditTypesMemberType
        EdgeExtendStart = 1  # QuickBinderBuilderEditTypesMemberType
        EdgeExtendEnd = 2  # QuickBinderBuilderEditTypesMemberType
        EdgeAngleStart = 3  # QuickBinderBuilderEditTypesMemberType
        EdgeAngleEnd = 4  # QuickBinderBuilderEditTypesMemberType
        FaceRadius = 5  # QuickBinderBuilderEditTypesMemberType
        FaceCentralAngle = 6  # QuickBinderBuilderEditTypesMemberType
        FaceReverseConvexity = 7  # QuickBinderBuilderEditTypesMemberType
        Transform = 8  # QuickBinderBuilderEditTypesMemberType
        ExtendUMinimum = 9  # QuickBinderBuilderEditTypesMemberType
        ExtendUMaximum = 10  # QuickBinderBuilderEditTypesMemberType
        ExtendVMinimum = 11  # QuickBinderBuilderEditTypesMemberType
        ExtendVMaximum = 12  # QuickBinderBuilderEditTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateAnchorFace(self) -> int:
        """
        Create initial face approximated from the selected faces.  
        
        Signature ``CreateAnchorFace()`` 
        
        :returns:  index of anchor face created  
        :rtype: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def EditFace(self) -> None:
        """
        Edit the parameters of a face according to the type of edit previously indicated by 
        :py:meth:`NXOpen.Die.QuickBinderBuilder.EditType`.  
        
        Signature ``EditFace()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AddFace(self, type: QuickBinderBuilderTypes) -> int:
        """
        Add a component face to the binder body.  
        
        Signature ``AddFace(type)`` 
        
        :param type:  type of face to add  
        :type type: :py:class:`NXOpen.Die.QuickBinderBuilderTypes` 
        :returns:  index of component face created  
        :rtype: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def RemoveFace(self) -> None:
        """
        Remove a face from the binder body.  
        
        Face to remove is indicated by 
        :py:meth:`NXOpen.Die.QuickBinderBuilder.FaceIndexToEdit`.
        
        Signature ``RemoveFace()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetReferencePoint(self, location: NXOpen.Point3d) -> None:
        """
        Set the point used to determine the start and end side of the face.  
        
        Also used to determine
        which end of the conic to edit.
        
        Signature ``SetReferencePoint(location)`` 
        
        :param location:  Reference Point in absolute coordinates  
        :type location: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetEdgesOfFace(self, faceIndex: int) -> tuple:
        """
        Get the edge indexes for a face.  
        
        Also returns corresponding points for each edge to be used as input to
        :py:meth:`NXOpen.Die.QuickBinderBuilder.SetReferencePoint`.
        
        Signature ``GetEdgesOfFace(faceIndex)`` 
        
        :param faceIndex:  face index  
        :type faceIndex: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (edgeIndex, referencePoints). edgeIndex is a list of int.   edge indexes referencePoints is a list of :py:class:`NXOpen.Point3d`.   reference points corresponding to each edge 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AnchorBaseRadius: NXOpen.Expression = ...
    """
    Returns  the base radius for a conical anchor face.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorBaseRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AnchorRadius: NXOpen.Expression = ...
    """
    Returns  the radius value of a cylidrical anchor face.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AnchorTopRadius: NXOpen.Expression = ...
    """
    Returns  the top radius for a conical anchor face.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorTopRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BaseRadius: NXOpen.Expression = ...
    """
    Returns  the base radius for a cone.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CentralAngle: NXOpen.Expression = ...
    """
    Returns  the central angle of a cylinder/cone.  
    
    <hr>
    
    Getter Method
    
    Signature ``CentralAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EdgeIndexToEdit: int = ...
    """
    Returns or sets  the index of the edge to edit.  
    
    <hr>
    
    Getter Method
    
    Signature ``EdgeIndexToEdit`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EdgeIndexToEdit`` 
    
    :param index: 
    :type index: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EditType: QuickBinderBuilderEditTypes = ...
    """
    Returns or sets  the type edit to be performed on the face or edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``EditType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.QuickBinderBuilderEditTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.QuickBinderBuilderEditTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    End: NXOpen.Expression = ...
    """
    Returns  the end length extension.  
    
    <hr>
    
    Getter Method
    
    Signature ``End`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EndAngle: NXOpen.Expression = ...
    """
    Returns  the end angle of a planar face.  
    
    This angle rotates the side edge around the face normal with 
    the rotation point being one of the endpoints of the edge that is attached to the previous face.
    
    <hr>
    
    Getter Method
    
    Signature ``EndAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Extend: NXOpen.Expression = ...
    """
    Returns  the value to extend both sides of a face.  
    
    <hr>
    
    Getter Method
    
    Signature ``Extend`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FaceIndexToEdit: int = ...
    """
    Returns or sets  the index of the face to edit.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceIndexToEdit`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceIndexToEdit`` 
    
    :param index: 
    :type index: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Faces: NXOpen.ScCollector = ...
    """
    Returns  the product faces used to perform the initial approximation.  
    
    <hr>
    
    Getter Method
    
    Signature ``Faces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Limits: NXOpen.GeometricUtilities.Limits = ...
    """
    Returns  the central angle limits of cylinder/cone.  
    
    <hr>
    
    Getter Method
    
    Signature ``Limits`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.Limits` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OriginAnchorOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the anchor origin of binder sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``OriginAnchorOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OriginAnchorOrigin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius value of a cylidrical face.  
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Start: NXOpen.Expression = ...
    """
    Returns  the start length extension.  
    
    <hr>
    
    Getter Method
    
    Signature ``Start`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartAngle: NXOpen.Expression = ...
    """
    Returns  the start angle of a planar face.  
    
    This angle rotates the side edge around the face normal with 
    the rotation point being one of the endpoints of the edge that is attached to the previous face.
    
    <hr>
    
    Getter Method
    
    Signature ``StartAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TopRadius: NXOpen.Expression = ...
    """
    Returns  the top radius for a cone.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TransformMatrix: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the rotation matrix of binder sheet body transformation.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransformMatrix`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransformMatrix`` 
    
    :param matrix: 
    :type matrix: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TransformOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the new origin of binder sheet body transformation.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransformOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransformOrigin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: QuickBinderBuilderTypes = ...
    """
    Returns or sets  the type of initial face created by approximating the faces indicated by
    :py:meth:`NXOpen.Die.QuickBinderBuilder.Faces`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.QuickBinderBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.QuickBinderBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UMaximum: NXOpen.Expression = ...
    """
    Returns  the u maximum extension distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UMaximum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UMinimum: NXOpen.Expression = ...
    """
    Returns  the u minimum extension distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UMinimum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    VMaximum: NXOpen.Expression = ...
    """
    Returns  the v maximum extension distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``VMaximum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    VMinimum: NXOpen.Expression = ...
    """
    Returns  the v minimum extension distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``VMinimum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: QuickBinderBuilder = ...  # unknown typename


class PierceItemBuilderSizingMethodOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PierceItemBuilderSizingMethodOption():
    """
    Settings for the sizing method of individual pierces. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Auto", "Will calculate size at creation and during update"
       "Manual", "Will use size specified"
    """
    Auto = 0  # PierceItemBuilderSizingMethodOptionMemberType
    Manual = 1  # PierceItemBuilderSizingMethodOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PierceItemBuilderHoleShapeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PierceItemBuilderHoleShapeType():
    """
    Settings for the hole shape of individual pierces. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circular", "Circular shaped hole"
       "Oblong", "Oblong shaped hole"
       "Square", "Square shaped hole"
       "Rectangular", "Rectangular shaped hole"
       "RoundedRectangular", "Rouned Rectangular shaped hole"
       "ChordRectangular", "Chord Rectangular hole"
       "Hexagonal", "Hexagonal shaped hole"
       "Other", "Not a standard shape"
    """
    Circular = 0  # PierceItemBuilderHoleShapeTypeMemberType
    Oblong = 1  # PierceItemBuilderHoleShapeTypeMemberType
    Square = 2  # PierceItemBuilderHoleShapeTypeMemberType
    Rectangular = 3  # PierceItemBuilderHoleShapeTypeMemberType
    RoundedRectangular = 4  # PierceItemBuilderHoleShapeTypeMemberType
    ChordRectangular = 5  # PierceItemBuilderHoleShapeTypeMemberType
    Hexagonal = 6  # PierceItemBuilderHoleShapeTypeMemberType
    Other = 7  # PierceItemBuilderHoleShapeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PierceItemBuilder(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Die.PierceItemBuilder`
    
    .. versionadded:: NX5.0.0
    """
    
    class SizingMethodOption():
        """
        Settings for the sizing method of individual pierces. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Auto", "Will calculate size at creation and during update"
           "Manual", "Will use size specified"
        """
        Auto = 0  # PierceItemBuilderSizingMethodOptionMemberType
        Manual = 1  # PierceItemBuilderSizingMethodOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HoleShapeType():
        """
        Settings for the hole shape of individual pierces. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circular", "Circular shaped hole"
           "Oblong", "Oblong shaped hole"
           "Square", "Square shaped hole"
           "Rectangular", "Rectangular shaped hole"
           "RoundedRectangular", "Rouned Rectangular shaped hole"
           "ChordRectangular", "Chord Rectangular hole"
           "Hexagonal", "Hexagonal shaped hole"
           "Other", "Not a standard shape"
        """
        Circular = 0  # PierceItemBuilderHoleShapeTypeMemberType
        Oblong = 1  # PierceItemBuilderHoleShapeTypeMemberType
        Square = 2  # PierceItemBuilderHoleShapeTypeMemberType
        Rectangular = 3  # PierceItemBuilderHoleShapeTypeMemberType
        RoundedRectangular = 4  # PierceItemBuilderHoleShapeTypeMemberType
        ChordRectangular = 5  # PierceItemBuilderHoleShapeTypeMemberType
        Hexagonal = 6  # PierceItemBuilderHoleShapeTypeMemberType
        Other = 7  # PierceItemBuilderHoleShapeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetPierceObjects(self, objects: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the objects making up the hole to be pierced.  
        
        Signature ``SetPierceObjects(objects)`` 
        
        :param objects:  Objects that make up the hole to be pierced  
        :type objects: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetPierceObjects(self) -> 'list[NXOpen.IProfile]':
        """
        Gets the objects making up the hole to be pierced.  
        
        Signature ``GetPierceObjects()`` 
        
        :returns:  Objects that make up the hole to be pierced  
        :rtype: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    HoleShape: PierceItemBuilderHoleShapeType = ...
    """
    Returns or sets  the hole shape 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PierceItemBuilderHoleShapeType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleShape`` 
    
    :param holeShape: 
    :type holeShape: :py:class:`NXOpen.Die.PierceItemBuilderHoleShapeType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PunchDiameter: NXOpen.Expression = ...
    """
    Returns  the punch radius 
    
    <hr>
    
    Getter Method
    
    Signature ``PunchDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    PunchLength: NXOpen.Expression = ...
    """
    Returns  the punch length 
    
    <hr>
    
    Getter Method
    
    Signature ``PunchLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    PunchRadius: NXOpen.Expression = ...
    """
    Returns  the punch radius 
    
    <hr>
    
    Getter Method
    
    Signature ``PunchRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PunchWidth: NXOpen.Expression = ...
    """
    Returns  the punch width 
    
    <hr>
    
    Getter Method
    
    Signature ``PunchWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ReferenceVector: NXOpen.ILocation = ...
    """
    Returns or sets  the reference direction of the hole 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceVector`` 
    
    :param refVector: 
    :type refVector: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SizingMethod: PierceItemBuilderSizingMethodOption = ...
    """
    Returns or sets  the sizing method 
    
    <hr>
    
    Getter Method
    
    Signature ``SizingMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PierceItemBuilderSizingMethodOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SizingMethod`` 
    
    :param sizingMethod: 
    :type sizingMethod: :py:class:`NXOpen.Die.PierceItemBuilderSizingMethodOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: PierceItemBuilder = ...  # unknown typename


class HeelpostBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HeelpostBuilderTypes():
    """
    Heelpost types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "GuidepostWearplate", "allows a guide pin hole to be created"
       "StorageBlock", "no hole allowed"
       "SafetyBlock", "no hole allowed"
    """
    GuidepostWearplate = 0  # HeelpostBuilderTypesMemberType
    StorageBlock = 1  # HeelpostBuilderTypesMemberType
    SafetyBlock = 2  # HeelpostBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HeelpostBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Die.HeelpostBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.Heelpost`
    
    Default values.
    
    =====================  ==========================================
    Property               Value
    =====================  ==========================================
    AngleTolerance         0.5 
    ---------------------  ------------------------------------------
    BaseOffset.Value       0 (millimeters part), 0 (inches part) 
    ---------------------  ------------------------------------------
    Center.InputType       SelectLocation 
    ---------------------  ------------------------------------------
    CreateFloor            0 
    ---------------------  ------------------------------------------
    Diameter.Value         50 (millimeters part), 2 (inches part) 
    ---------------------  ------------------------------------------
    DistanceTolerance      0.0254 
    ---------------------  ------------------------------------------
    FloorThickness.Value   60 (millimeters part), 1.4 (inches part) 
    ---------------------  ------------------------------------------
    Height.Value           300 (millimeters part), 12 (inches part) 
    ---------------------  ------------------------------------------
    Length.Value           150 (millimeters part), 6 (inches part) 
    ---------------------  ------------------------------------------
    LocationOffset.Value   0 (millimeters part), 0 (inches part) 
    ---------------------  ------------------------------------------
    PadOffset.Value        0 (millimeters part), 0 (inches part) 
    ---------------------  ------------------------------------------
    PadThickness.Value     60 (millimeters part), 10.4 (inches part) 
    ---------------------  ------------------------------------------
    ReliefDepth.Value      5 (millimeters part), 0.2 (inches part) 
    ---------------------  ------------------------------------------
    ReliefWidth.Value      5 (millimeters part), 0.2 (inches part) 
    ---------------------  ------------------------------------------
    UsePercent             0 
    ---------------------  ------------------------------------------
    WallACreate            1 
    ---------------------  ------------------------------------------
    WallAOffset.Value      0 (millimeters part), 0 (inches part) 
    ---------------------  ------------------------------------------
    WallARelief            0 
    ---------------------  ------------------------------------------
    WallAThickness.Value   30 (millimeters part), 1.2 (inches part) 
    ---------------------  ------------------------------------------
    WallBCreate            1 
    ---------------------  ------------------------------------------
    WallBOffset.Value      0 (millimeters part), 0 (inches part) 
    ---------------------  ------------------------------------------
    WallBRelief            0 
    ---------------------  ------------------------------------------
    WallBThickness.Value   30 (millimeters part), 1.2 (inches part) 
    ---------------------  ------------------------------------------
    WallCCreate            1 
    ---------------------  ------------------------------------------
    WallCOffset.Value      0 (millimeters part), 0 (inches part) 
    ---------------------  ------------------------------------------
    WallCRelief            0 
    ---------------------  ------------------------------------------
    WallCThickness.Value   30 (millimeters part), 1.2 (inches part) 
    ---------------------  ------------------------------------------
    WallDCreate            1 
    ---------------------  ------------------------------------------
    WallDOffset.Value      0 (millimeters part), 0 (inches part) 
    ---------------------  ------------------------------------------
    WallDRelief            0 
    ---------------------  ------------------------------------------
    WallDThickness.Value   30 (millimeters part), 1.2 (inches part) 
    ---------------------  ------------------------------------------
    WallPercentage.Value   40 
    ---------------------  ------------------------------------------
    Width.Value            150 (millimeters part), 6 (inches part) 
    ---------------------  ------------------------------------------
    XOffset.Value          0 (millimeters part), 0 (inches part) 
    ---------------------  ------------------------------------------
    YOffset.Value          0 (millimeters part), 0 (inches part) 
    =====================  ==========================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Heelpost types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "GuidepostWearplate", "allows a guide pin hole to be created"
           "StorageBlock", "no hole allowed"
           "SafetyBlock", "no hole allowed"
        """
        GuidepostWearplate = 0  # HeelpostBuilderTypesMemberType
        StorageBlock = 1  # HeelpostBuilderTypesMemberType
        SafetyBlock = 2  # HeelpostBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseOffset: NXOpen.Expression = ...
    """
    Returns  the offset to apply to the given base before building the heelpost 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BaseOrientation: DiePlaneBuilder = ...
    """
    Returns  the base of the heelpost 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Center: DieLocationBuilder = ...
    """
    Returns  the location (center) for the heelpost 
    
    <hr>
    
    Getter Method
    
    Signature ``Center`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLocationBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CreateFloor: bool = ...
    """
    Returns or sets  the value (true or false) to decide if the floor of the post should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateFloor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateFloor`` 
    
    :param createFloor: 
    :type createFloor: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Diameter: NXOpen.Expression = ...
    """
    Returns  the diameter of the guide pin hole 
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DieCenterlineCoordinateSystem: NXOpen.SelectCoordinateSystem = ...
    """
    Returns  the die centerline coordinate system for orienting the heelpost 
    
    <hr>
    
    Getter Method
    
    Signature ``DieCenterlineCoordinateSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    FloorThickness: NXOpen.Expression = ...
    """
    Returns  the floor thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``FloorThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height from the selected base orientation to the origin of the pad orientation, if the pad orientation is not specified.  
    
    This is before application of any specified base and pad offsets.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    HoleAttributes: DieAttributesBuilder = ...
    """
    Returns  the hole attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    HoleDiameterAttributes: DieAttributesBuilder = ...
    """
    Returns  the hole diameter attributes (only the title is used) 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameterAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length with respect to the coordinate system 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LocationOffset: NXOpen.Expression = ...
    """
    Returns  the offset value to apply in the offset direction to find the heelpost center 
    
    <hr>
    
    Getter Method
    
    Signature ``LocationOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OffsetDirection: DieDirectionBuilder = ...
    """
    Returns  the direction to apply to the location to determine the center of the heelpost 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieDirectionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadAttributes: DieAttributesBuilder = ...
    """
    Returns  the pad attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``PadAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadOffset: NXOpen.Expression = ...
    """
    Returns  the offset value to apply to the pad orientation before building the heelpost 
    
    <hr>
    
    Getter Method
    
    Signature ``PadOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadOrientation: DiePlaneBuilder = ...
    """
    Returns  the orientation at the top of the heelpost 
    
    <hr>
    
    Getter Method
    
    Signature ``PadOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadThickness: NXOpen.Expression = ...
    """
    Returns  the pad thickness at the top of the post 
    
    <hr>
    
    Getter Method
    
    Signature ``PadThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReliefAttributes: DieAttributesBuilder = ...
    """
    Returns  the relief attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReliefDepth: NXOpen.Expression = ...
    """
    Returns  the relief depth 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReliefWidth: NXOpen.Expression = ...
    """
    Returns  the relief width 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Target: NXOpen.SelectNXObject = ...
    """
    Returns  the target solid the heelpost will be united with 
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: HeelpostBuilderTypes = ...
    """
    Returns or sets  the post type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HeelpostBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.HeelpostBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UsePercent: bool = ...
    """
    Returns or sets  the value (true or false) to decide how to determine the wall thickness.  
    
    True will evaluate each wall based on the total area of the post 
    
    <hr>
    
    Getter Method
    
    Signature ``UsePercent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePercent`` 
    
    :param usePercent: 
    :type usePercent: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallACreate: bool = ...
    """
    Returns or sets  the value (true or false) to decide if the "A" wall should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``WallACreate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallACreate`` 
    
    :param wallACreate: 
    :type wallACreate: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallAOffset: NXOpen.Expression = ...
    """
    Returns  the offset from the outside to be applied to the "A" wall 
    
    <hr>
    
    Getter Method
    
    Signature ``WallAOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WallARelief: bool = ...
    """
    Returns or sets  the value (true or false) to decide if relief should be created at the top of the "A" wall 
    
    <hr>
    
    Getter Method
    
    Signature ``WallARelief`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallARelief`` 
    
    :param wallARelief: 
    :type wallARelief: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallAThickness: NXOpen.Expression = ...
    """
    Returns  the "A" wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``WallAThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WallBCreate: bool = ...
    """
    Returns or sets  the value (true or false) to decide if the "B" wall should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``WallBCreate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallBCreate`` 
    
    :param wallBCreate: 
    :type wallBCreate: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallBOffset: NXOpen.Expression = ...
    """
    Returns  the offset from the outside to be applied to the "B wall 
    
    <hr>
    
    Getter Method
    
    Signature ``WallBOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WallBRelief: bool = ...
    """
    Returns or sets  the value (true or false) to decide if relief should be created at the top of the "B" wall 
    
    <hr>
    
    Getter Method
    
    Signature ``WallBRelief`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallBRelief`` 
    
    :param wallBRelief: 
    :type wallBRelief: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallBThickness: NXOpen.Expression = ...
    """
    Returns  the "B" wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``WallBThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WallCCreate: bool = ...
    """
    Returns or sets  the value (true or false) to decide if the "C" wall should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``WallCCreate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallCCreate`` 
    
    :param wallCCreate: 
    :type wallCCreate: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallCOffset: NXOpen.Expression = ...
    """
    Returns  the offset from the outside to be applied to the "C" wall 
    
    <hr>
    
    Getter Method
    
    Signature ``WallCOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WallCRelief: bool = ...
    """
    Returns or sets  the value (true or false) to decide if relief should be created at the top of the "C" wall 
    
    <hr>
    
    Getter Method
    
    Signature ``WallCRelief`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallCRelief`` 
    
    :param wallCRelief: 
    :type wallCRelief: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallCThickness: NXOpen.Expression = ...
    """
    Returns  the "C" wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``WallCThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WallDCreate: bool = ...
    """
    Returns or sets  the value (true or false) to decide if the "D" wall should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``WallDCreate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallDCreate`` 
    
    :param wallDCreate: 
    :type wallDCreate: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallDOffset: NXOpen.Expression = ...
    """
    Returns  the offset from the outside to be applied to the "D" wall 
    
    <hr>
    
    Getter Method
    
    Signature ``WallDOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WallDRelief: bool = ...
    """
    Returns or sets  the value (true or false) to decide if relief should be created at the top of the "D" wall 
    
    <hr>
    
    Getter Method
    
    Signature ``WallDRelief`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallDRelief`` 
    
    :param wallDRelief: 
    :type wallDRelief: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallDThickness: NXOpen.Expression = ...
    """
    Returns  the "D" wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``WallDThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WallPercentage: NXOpen.Expression = ...
    """
    Returns  the percentage of the post area to be applied to determine the wall thicknesses 
    
    <hr>
    
    Getter Method
    
    Signature ``WallPercentage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width with respect to the coordinate system 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    XOffset: NXOpen.Expression = ...
    """
    Returns  the offset applied in the X direction to determine the hole center 
    
    <hr>
    
    Getter Method
    
    Signature ``XOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    YOffset: NXOpen.Expression = ...
    """
    Returns  the offset applied in the Y direction to determine the hole center 
    
    <hr>
    
    Getter Method
    
    Signature ``YOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: HeelpostBuilder = ...  # unknown typename


class TrimTaskBuilderCamTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimTaskBuilderCamTypes():
    """
    Settings for the cam type of the trim task. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Direct", "Direct"
       "Aerial", "Aerial Cam"
       "BaseMounted", "Base Mounted Cam"
    """
    Direct = 2  # TrimTaskBuilderCamTypesMemberType
    Aerial = 0  # TrimTaskBuilderCamTypesMemberType
    BaseMounted = 1  # TrimTaskBuilderCamTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimTaskBuilderMatchCutTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimTaskBuilderMatchCutTypes():
    """
    Settings for the match cut type of the trim task. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No match cut."
       "AtStart", "At start plane only."
       "AtEnd", "At end plane only."
       "AtBoth", "At both start and end planes."
    """
    NotSet = 0  # TrimTaskBuilderMatchCutTypesMemberType
    AtStart = 1  # TrimTaskBuilderMatchCutTypesMemberType
    AtEnd = 2  # TrimTaskBuilderMatchCutTypesMemberType
    AtBoth = 3  # TrimTaskBuilderMatchCutTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimTaskBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Trim Task feature builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.TrimTask`
    
    .. versionadded:: NX4.0.0
    """
    
    class CamTypes():
        """
        Settings for the cam type of the trim task. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Direct", "Direct"
           "Aerial", "Aerial Cam"
           "BaseMounted", "Base Mounted Cam"
        """
        Direct = 2  # TrimTaskBuilderCamTypesMemberType
        Aerial = 0  # TrimTaskBuilderCamTypesMemberType
        BaseMounted = 1  # TrimTaskBuilderCamTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MatchCutTypes():
        """
        Settings for the match cut type of the trim task. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No match cut."
           "AtStart", "At start plane only."
           "AtEnd", "At end plane only."
           "AtBoth", "At both start and end planes."
        """
        NotSet = 0  # TrimTaskBuilderMatchCutTypesMemberType
        AtStart = 1  # TrimTaskBuilderMatchCutTypesMemberType
        AtEnd = 2  # TrimTaskBuilderMatchCutTypesMemberType
        AtBoth = 3  # TrimTaskBuilderMatchCutTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CheckAndMovePlanes(self, origTip: NXOpen.Features.Feature, targetTip: NXOpen.Features.Feature, origStartPlaneTag: NXOpen.ISurface, origEndPlaneTag: NXOpen.ISurface) -> tuple:
        """
        Move end planes if the position of Trim Task is changed.  
        
        Signature ``CheckAndMovePlanes(origTip, targetTip, origStartPlaneTag, origEndPlaneTag)`` 
        
        :param origTip:  Original Die Tip.  
        :type origTip: :py:class:`NXOpen.Features.Feature` 
        :param targetTip:  Die Tip in the target operation.  
        :type targetTip: :py:class:`NXOpen.Features.Feature` 
        :param origStartPlaneTag:  Original start plane.  
        :type origStartPlaneTag: :py:class:`NXOpen.ISurface` 
        :param origEndPlaneTag:  Original end plane.  
        :type origEndPlaneTag: :py:class:`NXOpen.ISurface` 
        :returns: a tuple 
        :rtype: A tuple consisting of (targetStartPlaneTag, targetEndPlaneTag). targetStartPlaneTag is a :py:class:`NXOpen.ISurface`.   Start plane in target operation. targetEndPlaneTag is a :py:class:`NXOpen.ISurface`.   End plane in target operation. 
        
        .. versionadded:: NX8.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetTrimBounds(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the trim bounds of the trim task.  
        
        Note - :py:meth:`Die.TrimTaskBuilder.TippedProduct` needs to be called before this function. 
        
        Signature ``SetTrimBounds(direction, profileEntries)`` 
        
        :param direction:  Profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  Profile entries that make up the                                                                                               boundary of the trim task  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetTrimBounds(self) -> tuple:
        """
        Gets the trim bounds of the trim task  
        
        Signature ``GetTrimBounds()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   Profile entries that make up the                                                                                            boundary of the trim task direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetScrapCutters(self, planes: 'list[NXOpen.ISurface]') -> None:
        """
        Sets the scrap cutters of the trim task 
        
        Signature ``SetScrapCutters(planes)`` 
        
        :param planes: 
        :type planes: list of :py:class:`NXOpen.ISurface` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetScrapCutters(self) -> 'list[NXOpen.ISurface]':
        """
        Gets the scrap cutters of the trim task  
        
        Signature ``GetScrapCutters()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.ISurface` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetAssociativeObjects(self, objects: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets the associative objects of the trim task 
        
        Signature ``SetAssociativeObjects(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetAssociativeObjects(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Gets the associative objects of the trim task  
        
        Signature ``GetAssociativeObjects()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetCameraViews(self, objects: 'list[NXOpen.View]') -> None:
        """
        Sets the camera views of the trim task 
        
        Signature ``SetCameraViews(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetCameraViews(self) -> 'list[NXOpen.View]':
        """
        Gets the camera views of the trim task  
        
        Signature ``GetCameraViews()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetDetails(self, strings: 'list[str]') -> None:
        """
        Sets the detailed description of the trim task 
        
        Signature ``SetDetails(strings)`` 
        
        :param strings:  detail strings  
        :type strings: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetDetails(self) -> 'list[str]':
        """
        Gets the detailed description of the trim task  
        
        Signature ``GetDetails()`` 
        
        :returns:  detail strings  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetCameraLayerAndXmlp(self) -> tuple:
        """
        Gets the camera layer settings and xmlp data  
        
        Signature ``GetCameraLayerAndXmlp()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (layerSettings, xmlpData). layerSettings is a list of str.   1 layer setting string for each camera object.                                                                the string needs to be 256 characters long                                                                (one for each user layer) with either 0 for off                                                               or 1 for on. xmlpData is a list of str.   xmlp data 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetCameraLayerAndXmlp(self, layerSettings: 'list[str]', xmlpData: 'list[str]') -> None:
        """
        Sets the camera layer settings and xmlp data 
        
        Signature ``SetCameraLayerAndXmlp(layerSettings, xmlpData)`` 
        
        :param layerSettings:  1 layer setting string for each camera object.                                                                the string needs to be 256 characters long                                                                (one for each user layer) with either 0 for off                                                               or 1 for on.  
        :type layerSettings: list of str 
        :param xmlpData:  xmlp data  
        :type xmlpData: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetCameraNames(self, strings: 'list[str]') -> None:
        """
        Sets the names of the camera 
        
        Signature ``SetCameraNames(strings)`` 
        
        :param strings:  each string contains the name of a camera object  
        :type strings: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetCameraNames(self) -> 'list[str]':
        """
        Gets the names of the camera  
        
        Signature ``GetCameraNames()`` 
        
        :returns:  each string contains the name of a camera object  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CamDirection: NXOpen.ILocation = ...
    """
    Returns or sets  the cam direction of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``CamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CamDirection`` 
    
    :param camDirection: 
    :type camDirection: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CamType: TrimTaskBuilderCamTypes = ...
    """
    Returns or sets  the cam type of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``CamType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.TrimTaskBuilderCamTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CamType`` 
    
    :param camType: 
    :type camType: :py:class:`NXOpen.Die.TrimTaskBuilderCamTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CreateScrap: bool = ...
    """
    Returns or sets  the create scrap setting of the trim task.  
    
    True indicates that the scrap is to be created. 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateScrap`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CreateScrap`` 
    
    :param createScrap: 
    :type createScrap: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    EndPlane: NXOpen.ISurface = ...
    """
    Returns or sets  the end plane of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``EndPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``EndPlane`` 
    
    :param endPlane: 
    :type endPlane: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FinishOperation: bool = ...
    """
    Returns or sets  the finish operation of the trim task 
    True indicates the trim is to be a finish trim.  
    
    False indicates rough trim. 
    
    <hr>
    
    Getter Method
    
    Signature ``FinishOperation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FinishOperation`` 
    
    :param finishOperation: 
    :type finishOperation: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    LayoutFlange: bool = ...
    """
    Returns or sets  the layout flange setting of the trim task.  
    
    True indicates that the trim curve is to be laid out on the flange. 
    
    <hr>
    
    Getter Method
    
    Signature ``LayoutFlange`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``LayoutFlange`` 
    
    :param layoutFlange: 
    :type layoutFlange: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCutExtensionAngle: float = ...
    """
    Returns or sets  the match cut extension angle dimension of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCutExtensionAngle`` 
    
    :returns:  angle of extension line from perpendicular  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCutExtensionAngle`` 
    
    :param extensionAngle:  angle of extension line from perpendicular  
    :type extensionAngle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCutFirstRadius: float = ...
    """
    Returns or sets  the match cut first radius dimension of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCutFirstRadius`` 
    
    :returns:  first radius after notch  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCutFirstRadius`` 
    
    :param firstRadius:  first radius after notch  
    :type firstRadius: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCutNotchOffset: float = ...
    """
    Returns or sets  the match cut notch offset dimension of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCutNotchOffset`` 
    
    :returns:  notch offset from trim line  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCutNotchOffset`` 
    
    :param notchOffset:  notch offset from trim line  
    :type notchOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCutOffsetFromPlane: float = ...
    """
    Returns or sets  the match cut offset from plane dimension of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCutOffsetFromPlane`` 
    
    :returns:  offset from scrap cutter plane  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCutOffsetFromPlane`` 
    
    :param offsetFromPlane:  offset from scrap cutter plane  
    :type offsetFromPlane: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCutOffsetLength: float = ...
    """
    Returns or sets  the match cut offset length dimension of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCutOffsetLength`` 
    
    :returns:  length of offset piece  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCutOffsetLength`` 
    
    :param offsetLength:  length of offset piece  
    :type offsetLength: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCutScrapCutterLength: float = ...
    """
    Returns or sets  the match cut scrap cutter length dimension of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCutScrapCutterLength`` 
    
    :returns:  entension line length  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCutScrapCutterLength`` 
    
    :param scrapCutterLength:  entension line length  
    :type scrapCutterLength: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCutSecondRadius: float = ...
    """
    Returns or sets  the match cut second radius dimension of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCutSecondRadius`` 
    
    :returns:  second radius after notch  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCutSecondRadius`` 
    
    :param secondRadius:  second radius after notch  
    :type secondRadius: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCutThirdRadius: float = ...
    """
    Returns or sets  the match cut third radius dimension of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCutThirdRadius`` 
    
    :returns:  radius between offset piece and entension line  
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCutThirdRadius`` 
    
    :param thirdRadius:  radius between offset piece and entension line  
    :type thirdRadius: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCutType: TrimTaskBuilderMatchCutTypes = ...
    """
    Returns or sets  the match cut type of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.TrimTaskBuilderMatchCutTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCutType`` 
    
    :param matchCutType: 
    :type matchCutType: :py:class:`NXOpen.Die.TrimTaskBuilderMatchCutTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ReverseTrimSide: bool = ...
    """
    Returns or sets  the reverse trim side setting of the trim task.  
    
    True indicates that the trim side should be reversed. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseTrimSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseTrimSide`` 
    
    :param reverse: 
    :type reverse: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    StartPlane: NXOpen.ISurface = ...
    """
    Returns or sets  the start plane of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``StartPlane`` 
    
    :param startPlane: 
    :type startPlane: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TippedProduct: NXOpen.Features.Feature = ...
    """
    Returns or sets  the tipped product of the trim task 
    
    <hr>
    
    Getter Method
    
    Signature ``TippedProduct`` 
    
    :returns:  The tip of the operation where the trim
    task resides.  
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TippedProduct`` 
    
    :param tippedProduct:  The tip of the operation where the trim                                                                   task resides.  
    :type tippedProduct: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimNewDieFace: bool = ...
    """
    Returns or sets  the trim new die face, from NX10.  
    
    0 new stamping output can import one new die face to die engineer process.
    If this trim task will trim this new die face, set newDieFace to true, or else set it to false. 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimNewDieFace`` 
    
    :returns:  if trim task performs on new die face, this will be true, or else this will be false.  
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimNewDieFace`` 
    
    :param newDieFace:  if set to true, trim task performs on new die face, or else it will perform on original die face.  
    :type newDieFace: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: TrimTaskBuilder = ...  # unknown typename


class CastRelief(NXOpen.Features.BodyFeature):
    """
    Represents a cast relief feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.CastReliefBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: CastRelief = ...  # unknown typename


class LineupBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Lineup feature builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.Lineup`
    
    .. versionadded:: NX4.0.0
    """
    
    def SetProductBodies(self, objects: 'list[NXOpen.Body]') -> None:
        """
        Sets the product sheet bodies of the lineup 
        
        Signature ``SetProductBodies(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetProductBodies(self) -> 'list[NXOpen.Body]':
        """
        Gets the product sheet bodies of the lineup  
        
        Signature ``GetProductBodies()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetDetails(self, strings: 'list[str]') -> None:
        """
        Sets the detailed description of the lineup 
        
        Signature ``SetDetails(strings)`` 
        
        :param strings:  detail strings  
        :type strings: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetDetails(self) -> 'list[str]':
        """
        Gets the detailed description of the lineup  
        
        Signature ``GetDetails()`` 
        
        :returns:  detail strings  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    FlowDirection: NXOpen.Vector3d = ...
    """
    Returns or sets  the flow direction of the lineup 
    
    <hr>
    
    Getter Method
    
    Signature ``FlowDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FlowDirection`` 
    
    :param flowDirection: 
    :type flowDirection: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Origin: NXOpen.Point3d = ...
    """
    Returns or sets  the origin of the lineup 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PressDirection: NXOpen.Vector3d = ...
    """
    Returns or sets  the press direction of the lineup 
    
    <hr>
    
    Getter Method
    
    Signature ``PressDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``PressDirection`` 
    
    :param pressDirection: 
    :type pressDirection: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: LineupBuilder = ...  # unknown typename


class PointParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Point Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def CreateChild(self) -> PointChildBuilder:
        """
        Creates a child point.  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.PointChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, diepointchild: PointChildBuilder) -> None:
        """
        Deletes a child point.  
        
        Signature ``DeleteChild(diepointchild)`` 
        
        :param diepointchild: 
        :type diepointchild: :py:class:`NXOpen.Die.PointChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[PointChildBuilder]':
        """
        Outputs the child points.  
        
        Signature ``GetChildren()`` 
        
        :returns:  The child points.  
        :rtype: list of :py:class:`NXOpen.Die.PointChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of points.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of points, if true the points will be built into the model, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of points, if true input data to the points will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: PointParentBuilder = ...  # unknown typename


class PressModel(NXOpen.TransientObject):
    """
    Represents a Die Simulation - Press Model   
    
    .. versionadded:: NX6.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object.  In .NET, this method is automatically
        called when the object is deleted by the garbage collector.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNumOperations(self) -> int:
        """
        Get number of operations  
        
        Signature ``GetNumOperations()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetOperationSlideHeight(self, operation: int, slideHeight: float) -> None:
        """
        Set operation slide height 
        
        Signature ``SetOperationSlideHeight(operation, slideHeight)`` 
        
        :param operation:  Operation of the slide  
        :type operation: int 
        :param slideHeight:  Slide height  
        :type slideHeight: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetOperationCushionSettings(self, operation: int, liftStartAngle: float, liftStopAngle: float, liftToDist: float, lockAtDist: float) -> None:
        """
        Set operation cushion values (Obsolete) 
        
        Signature ``SetOperationCushionSettings(operation, liftStartAngle, liftStopAngle, liftToDist, lockAtDist)`` 
        
        :param operation:  Operation of the cushion  
        :type operation: int 
        :param liftStartAngle:  Lift start angle  
        :type liftStartAngle: float 
        :param liftStopAngle:  Lift stop angle  
        :type liftStopAngle: float 
        :param liftToDist:  Distance to lift to  
        :type liftToDist: float 
        :param lockAtDist:  Distance where lock happens  
        :type lockAtDist: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetOperationUserTransportCurves(self, operation: int, vals: 'list[float]') -> None:
        """
        Set values of the User Defined transport curve set, for given operation 
        
        Signature ``SetOperationUserTransportCurves(operation, vals)`` 
        
        :param operation:  Operation of the transport devices  
        :type operation: int 
        :param vals:  The curve set values  
        :type vals: list of float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetOperationTransportCurveSet(self, operation: int, curveSet: int) -> None:
        """
        Tell the press model which transport curve set to use in the given operation 
        
        Signature ``SetOperationTransportCurveSet(operation, curveSet)`` 
        
        :param operation:  Operation of the transport devices  
        :type operation: int 
        :param curveSet:  Index of the curve set  
        :type curveSet: int 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetOperationCushionSettings2(self, operation: int, ventilationLiftDistance: float, ventilationLiftStay: int, binderWayLiftDistance: float, binderWayLiftDuration: int, upperLimit: float, lowerLimit: float) -> None:
        """
        Set operation cushion values 
        
        Signature ``SetOperationCushionSettings2(operation, ventilationLiftDistance, ventilationLiftStay, binderWayLiftDistance, binderWayLiftDuration, upperLimit, lowerLimit)`` 
        
        :param operation:  Operation of the cushion  
        :type operation: int 
        :param ventilationLiftDistance:  Ventilation lift distance  
        :type ventilationLiftDistance: float 
        :param ventilationLiftStay:  Ventilation lift stay duration in degrees  
        :type ventilationLiftStay: int 
        :param binderWayLiftDistance:  Binder way lift distance  
        :type binderWayLiftDistance: float 
        :param binderWayLiftDuration:  Binder way lift duration in degrees  
        :type binderWayLiftDuration: int 
        :param upperLimit:  Cushion range upper limit  
        :type upperLimit: float 
        :param lowerLimit:  Cushion range lowe limit  
        :type lowerLimit: float 
        
        .. versionadded:: NX11.0.1
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    


class Clearance(NXOpen.Features.BodyFeature):
    """
    Represents a die design clearance feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.ClearanceBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: Clearance = ...  # unknown typename


class FillArea(NXOpen.Features.BodyFeature):
    """
    Represents a die design fill area feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.FillAreaBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: FillArea = ...  # unknown typename


class SteelInsertSectionBuilderExtensionTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelInsertSectionBuilderExtensionTypeOption():
    """
    Settings for the extension type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "constant"
       "MaxdistPlusConst", "maximum distance + constant"
       "Law", "law"
    """
    Constant = 0  # SteelInsertSectionBuilderExtensionTypeOptionMemberType
    MaxdistPlusConst = 1  # SteelInsertSectionBuilderExtensionTypeOptionMemberType
    Law = 2  # SteelInsertSectionBuilderExtensionTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelInsertSectionBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Steel Insert Section sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class ExtensionTypeOption():
        """
        Settings for the extension type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "constant"
           "MaxdistPlusConst", "maximum distance + constant"
           "Law", "law"
        """
        Constant = 0  # SteelInsertSectionBuilderExtensionTypeOptionMemberType
        MaxdistPlusConst = 1  # SteelInsertSectionBuilderExtensionTypeOptionMemberType
        Law = 2  # SteelInsertSectionBuilderExtensionTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetBackSideReliefDistance(self, backSideReliefDistance: str) -> None:
        """
        Signature ``SetBackSideReliefDistance(backSideReliefDistance)`` 
        
        :param backSideReliefDistance: 
        :type backSideReliefDistance: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetProductContactWidth(self, productContactWidth: str) -> None:
        """
        Signature ``SetProductContactWidth(productContactWidth)`` 
        
        :param productContactWidth: 
        :type productContactWidth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetProductContactRelief(self, productContactRelief: str) -> None:
        """
        Signature ``SetProductContactRelief(productContactRelief)`` 
        
        :param productContactRelief: 
        :type productContactRelief: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPlanarOffsetHeight(self, planarOffsetHeight: str) -> None:
        """
        Signature ``SetPlanarOffsetHeight(planarOffsetHeight)`` 
        
        :param planarOffsetHeight: 
        :type planarOffsetHeight: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetOffsetProfileToTop(self, offsetProfileToTop: str) -> None:
        """
        Signature ``SetOffsetProfileToTop(offsetProfileToTop)`` 
        
        :param offsetProfileToTop: 
        :type offsetProfileToTop: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBeltThickness(self, beltThickness: str) -> None:
        """
        Signature ``SetBeltThickness(beltThickness)`` 
        
        :param beltThickness: 
        :type beltThickness: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetReliefAngle(self, reliefAngle: str) -> None:
        """
        Signature ``SetReliefAngle(reliefAngle)`` 
        
        :param reliefAngle: 
        :type reliefAngle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetProfileRelief(self, profileRelief: str) -> None:
        """
        Signature ``SetProfileRelief(profileRelief)`` 
        
        :param profileRelief: 
        :type profileRelief: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetExtensionDistance(self, extensionDistance: str) -> None:
        """
        Signature ``SetExtensionDistance(extensionDistance)`` 
        
        :param extensionDistance: 
        :type extensionDistance: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetFormingAttributes(self) -> tuple:
        """
        Gets the forming faces attributes 
        
        Signature ``GetFormingAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of forming faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetFormingAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the forming faces attributes 
        
        Signature ``SetFormingAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of forming faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetTrimWallAttributes(self) -> tuple:
        """
        Gets the steelinsert trim wall faces attributes 
        
        Signature ``GetTrimWallAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of trim wall faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetTrimWallAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the steelinsert trim wall faces attributes 
        
        Signature ``SetTrimWallAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of trim wall faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetFlangeWallAttributes(self) -> tuple:
        """
        Gets the flange wall attributes 
        
        Signature ``GetFlangeWallAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of flange wall faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetFlangeWallAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the flange wall attributes 
        
        Signature ``SetFlangeWallAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of flange wall faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetEndAttributes(self) -> tuple:
        """
        Gets the end faces attributes 
        
        Signature ``GetEndAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of end faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetEndAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the end faces attributes 
        
        Signature ``SetEndAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of end faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBackAttributes(self) -> tuple:
        """
        Gets the back faces attributes 
        
        Signature ``GetBackAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of back faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBackAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the back faces attributes 
        
        Signature ``SetBackAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of back faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBaseAttributes(self) -> tuple:
        """
        Gets the base faces attributes 
        
        Signature ``GetBaseAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of base faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBaseAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the base faces attributes 
        
        Signature ``SetBaseAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of base faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BackSideReliefDistance: NXOpen.Expression = ...
    """
    Returns  the back/side relief distance of the steel insert casting 
    
    <hr>
    
    Getter Method
    
    Signature ``BackSideReliefDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BeltThickness: NXOpen.Expression = ...
    """
    Returns  the belt thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``BeltThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExtensionDistance: NXOpen.Expression = ...
    """
    Returns  the extension distance 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExtensionType: SteelInsertSectionBuilderExtensionTypeOption = ...
    """
    Returns or sets  the extension type 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SteelInsertSectionBuilderExtensionTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionType`` 
    
    :param extensionType: 
    :type extensionType: :py:class:`NXOpen.Die.SteelInsertSectionBuilderExtensionTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MassLimit: float = ...
    """
    Returns or sets  the mass limit of the steel insert casting 
    
    <hr>
    
    Getter Method
    
    Signature ``MassLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``MassLimit`` 
    
    :param massLimit: 
    :type massLimit: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    OffsetProfileToTop: NXOpen.Expression = ...
    """
    Returns  the offset of the profile to the top of the steel insert casting 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetProfileToTop`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PlanarOffsetHeight: NXOpen.Expression = ...
    """
    Returns  the planar contact height of the steel insert casting 
    
    <hr>
    
    Getter Method
    
    Signature ``PlanarOffsetHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProductContactRelief: NXOpen.Expression = ...
    """
    Returns  the product contact relief of the steel insert casting 
    
    <hr>
    
    Getter Method
    
    Signature ``ProductContactRelief`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProductContactWidth: NXOpen.Expression = ...
    """
    Returns  the product contact width of the steel insert casting 
    
    <hr>
    
    Getter Method
    
    Signature ``ProductContactWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProfileRelief: NXOpen.Expression = ...
    """
    Returns  the profile relief 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileRelief`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefAngle: NXOpen.Expression = ...
    """
    Returns  the relief angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: SteelInsertSectionBuilder = ...  # unknown typename


class DieLimitsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Limits a path to a segment of the path.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateDieLimits`
    
    .. versionadded:: NX7.5.0
    """
    
    def GetPathObjects(self) -> 'list[NXOpen.NXObject]':
        """
        Get the objects used to create the path.  
        
        Signature ``GetPathObjects()`` 
        
        :returns:  The opening objects that were used to create the path.  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPathObjects(self, objectArray: 'list[NXOpen.NXObject]') -> None:
        """
        Set the objects used to create the path.  
        
        Signature ``SetPathObjects(objectArray)`` 
        
        :param objectArray:  The opening objects that were used to create the path.  
        :type objectArray: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPath(self, path: NXOpen.Curve) -> None:
        """
        Set the path used for the limits.  
        
        Signature ``SetPath(path)`` 
        
        :param path:  Path curve  
        :type path: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLimitsFromCurve(self, curve: NXOpen.Curve) -> None:
        """
        Set the limits from the endpoints of the input curve.  
        
        Signature ``SetLimitsFromCurve(curve)`` 
        
        :param curve:  Curve to set limits  
        :type curve: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPath(self) -> NXOpen.Curve:
        """
        Get the path used for the limits.  
        
        Signature ``GetPath()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Curve: NXOpen.ScCollector = ...
    """
    Returns  the curve used to set the limits.  
    
    The string will be combined into a single curve and the endpoints of
    the combined curve will be used to set the first and last limit points.
    
    <hr>
    
    Getter Method
    
    Signature ``Curve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Point1: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the first limit point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Point2: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the last limit point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RemoveLimitPoints: bool = ...
    """
    Returns or sets  the indication that limit points are being removed.  
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveLimitPoints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveLimitPoints`` 
    
    :param remove: 
    :type remove: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Reverse: int = ...
    """
    Returns or sets  the indication that limit points should be reversed.  
    
    Setting of 1 indicates to reverse. 
    
    <hr>
    
    Getter Method
    
    Signature ``Reverse`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Reverse`` 
    
    :param reverse: 
    :type reverse: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: DieLimitsBuilder = ...  # unknown typename


class DieAssistantTrimProfileList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DieAssistantTrimProfile]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DieAssistantTrimProfile) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DieAssistantTrimProfile) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DieAssistantTrimProfile:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieAssistantTrimProfile) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieAssistantTrimProfile, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DieAssistantTrimProfile]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DieAssistantTrimProfile]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DieAssistantTrimProfile, object2: DieAssistantTrimProfile) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DieAssistantTrimProfile) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DieAssistantTrimProfileList = ...  # unknown typename


class MachineReliefBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MachineReliefBuilderTypes():
    """
    Identifies the type of structure to be added, or subtracted, to the casting. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Cam", "Add casting material for the trim, or flange, steel mating surface."
       "Relief", "Remove casting material to allow for clearance between two mating objects (such as the upper and lower castings)."
       "Thicken", "Add casting material to thicken an existing wall."
    """
    Cam = 0  # MachineReliefBuilderTypesMemberType
    Relief = 1  # MachineReliefBuilderTypesMemberType
    Thicken = 2  # MachineReliefBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MachineReliefBuilderMainProfileTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MachineReliefBuilderMainProfileTypes():
    """
    Specifies that the profile is for an exterior or interior profile. This is necessary when the target supplies the profile 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Exterior", "Profile is for the exterior surface of the main wall."
       "Interior", "Profile is for the interior surface of the main wall."
    """
    Exterior = 0  # MachineReliefBuilderMainProfileTypesMemberType
    Interior = 1  # MachineReliefBuilderMainProfileTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MachineReliefBuilderTrimSheetTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MachineReliefBuilderTrimSheetTypes():
    """
    Specifies what the trimming surface is defined by. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sheet", "Trimming surface is a sheet body."
       "Face", "Trimming surface is a face, or faces to be sewed together."
    """
    Sheet = 0  # MachineReliefBuilderTrimSheetTypesMemberType
    Face = 1  # MachineReliefBuilderTrimSheetTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MachineReliefBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a builder that is used to create or edit a :py:class:`NXOpen.Die.MachineRelief` feature.  
    
    The builder may generate a Cam Definition, Machine Relief, or Wall Thickness.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateMachineReliefBuilder`
    
    Default values.
    
    ========================  ==========================================
    Property                  Value
    ========================  ==========================================
    BaseOffset.Value          0 (millimeters part), 0 (inches part) 
    ------------------------  ------------------------------------------
    BeltFaceThickness.Value   20 (millimeters part), 0.8 (inches part) 
    ------------------------  ------------------------------------------
    End.InputType             SelectLocation 
    ------------------------  ------------------------------------------
    JogWall                   0 
    ------------------------  ------------------------------------------
    MainProfileType           Exterior 
    ------------------------  ------------------------------------------
    Offset.Value              20 (millimeters part), 0.8 (inches part) 
    ------------------------  ------------------------------------------
    ProfileOffset.Value       30 (millimeters part), 1.2 (inches part) 
    ------------------------  ------------------------------------------
    Relief.Value              20 (millimeters part), 0.8 (inches part) 
    ------------------------  ------------------------------------------
    ReliefOffset.Value        5 (millimeters part), 0.2 (inches part) 
    ------------------------  ------------------------------------------
    TopOffset.Value           1000 (millimeters part), 40 (inches part) 
    ------------------------  ------------------------------------------
    TrimOffset.Value          5 (millimeters part), 0.2 (inches part) 
    ------------------------  ------------------------------------------
    TrimSheetOffset.Value     0 (millimeters part), 0 (inches part) 
    ------------------------  ------------------------------------------
    TrimSheetType             Sheet 
    ------------------------  ------------------------------------------
    WallOffset.Value          10 (millimeters part), 0.4 (inches part) 
    ------------------------  ------------------------------------------
    WallThickness.Value       45 (millimeters part), 1.8 (inches part) 
    ========================  ==========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Identifies the type of structure to be added, or subtracted, to the casting. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Cam", "Add casting material for the trim, or flange, steel mating surface."
           "Relief", "Remove casting material to allow for clearance between two mating objects (such as the upper and lower castings)."
           "Thicken", "Add casting material to thicken an existing wall."
        """
        Cam = 0  # MachineReliefBuilderTypesMemberType
        Relief = 1  # MachineReliefBuilderTypesMemberType
        Thicken = 2  # MachineReliefBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MainProfileTypes():
        """
        Specifies that the profile is for an exterior or interior profile. This is necessary when the target supplies the profile 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Exterior", "Profile is for the exterior surface of the main wall."
           "Interior", "Profile is for the interior surface of the main wall."
        """
        Exterior = 0  # MachineReliefBuilderMainProfileTypesMemberType
        Interior = 1  # MachineReliefBuilderMainProfileTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimSheetTypes():
        """
        Specifies what the trimming surface is defined by. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sheet", "Trimming surface is a sheet body."
           "Face", "Trimming surface is a face, or faces to be sewed together."
        """
        Sheet = 0  # MachineReliefBuilderTrimSheetTypesMemberType
        Face = 1  # MachineReliefBuilderTrimSheetTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value to apply to the base definition before trimming the base of the tool solids.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BaseOrientation: DiePlaneBuilder = ...
    """
    Returns  the base orientation of the target solid.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BeltAttributes: DieAttributesBuilder = ...
    """
    Returns  the attribute title, value and face color to apply to the belt faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``BeltAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BeltFaceThickness: NXOpen.Expression = ...
    """
    Returns  the expression containing the value to apply for the belt face on the cam definition.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Cam <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``BeltFaceThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CamDirection: DieDirectionBuilder = ...
    """
    Returns  the direction of the cam for trimming.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Cam <Die.MachineReliefBuilderTypes>` or :py:class:`Die.MachineReliefBuilderTypes.Relief <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieDirectionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    End: DieLocationBuilder = ...
    """
    Returns  the location for the end of the segment definition.  
    
    The default is the end of the segment if an open profile is selected. 
    
    <hr>
    
    Getter Method
    
    Signature ``End`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLocationBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InsideWallProfile: NXOpen.Section = ...
    """
    Returns  the wall profile defining the inside of the main wall used for the cam definition.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Cam <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``InsideWallProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    JogWall: bool = ...
    """
    Returns or sets  the indicator defining if the wall should be jogged (or changed) to accommodate the cam definition.  
    
    TRUE indicates that the wal should be jogged. 
    
    <hr>
    
    Getter Method
    
    Signature ``JogWall`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JogWall`` 
    
    :param jogWall: 
    :type jogWall: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MainProfile: NXOpen.Section = ...
    """
    Returns  the primary profile for the machine relief casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``MainProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MainProfileType: MachineReliefBuilderMainProfileTypes = ...
    """
    Returns or sets  the value specifying the main profile for the Thicken operation.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Thicken <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MainProfileType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.MachineReliefBuilderMainProfileTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MainProfileType`` 
    
    :param mainProfileType: 
    :type mainProfileType: :py:class:`NXOpen.Die.MachineReliefBuilderMainProfileTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the expression containing the value to apply for the thicken operation to create the tool solid.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Relief <Die.MachineReliefBuilderTypes>` or :py:class:`Die.MachineReliefBuilderTypes.Thicken <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProfileOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the value to apply to the profile to create the primary head solid for the cam definition.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Cam <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Relief: NXOpen.Expression = ...
    """
    Returns  the expression containing the value to apply for the machine relief operation to create the tool solid.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Relief <Die.MachineReliefBuilderTypes>` or :py:class:`Die.MachineReliefBuilderTypes.Thicken <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Relief`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReliefOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the value of the relief around the primary head solid for the cam definition if a wall is created.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Cam <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Start: DieLocationBuilder = ...
    """
    Returns  the location for the start of the segment definition.  
    
    The default is the start of the segment if an open profile is selected. 
    
    <hr>
    
    Getter Method
    
    Signature ``Start`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLocationBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SwitchTrimSide: bool = ...
    """
    Returns or sets  the indicator if the trim side should be switched from the default for the sheet metal.  
    
    TRUE indicates that the trim side should be reversed. 
    
    <hr>
    
    Getter Method
    
    Signature ``SwitchTrimSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SwitchTrimSide`` 
    
    :param switchTrimSide: 
    :type switchTrimSide: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Target: NXOpen.SelectBody = ...
    """
    Returns  the target solid to add or subtract material too.  
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TopOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value from the base to define the top extent of the internal builds.  
    
    This value will be defined internally if a target is selected. 
    
    <hr>
    
    Getter Method
    
    Signature ``TopOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the clearance value to apply at the start and the end of the cam definition to define the primary head solid.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Cam <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimSheet: NXOpen.SelectBody = ...
    """
    Returns  the sheet body selection for the trim sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimSheetFace: NXOpen.ScCollector = ...
    """
    Returns  the face selections to define the trim sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimSheetFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimSheetOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value to apply to the trim sheet to construct the tool solids.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Relief <Die.MachineReliefBuilderTypes>` or :py:class:`Die.MachineReliefBuilderTypes.Thicken <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimSheetOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimSheetType: MachineReliefBuilderTrimSheetTypes = ...
    """
    Returns or sets  the indicator for how the trim sheet is specified.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimSheetType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.MachineReliefBuilderTrimSheetTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimSheetType`` 
    
    :param trimSheetType: 
    :type trimSheetType: :py:class:`NXOpen.Die.MachineReliefBuilderTrimSheetTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Type: MachineReliefBuilderTypes = ...
    """
    Returns or sets  the value defining the type of build to perform for this tool.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.MachineReliefBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.MachineReliefBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset to apply to the wall to create the wall area for the cam definition.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Cam <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``WallOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WallThickness: NXOpen.Expression = ...
    """
    Returns  the expression containing the thickness value of the wall for the cam definition.  
    
    Only valid when type is :py:class:`Die.MachineReliefBuilderTypes.Cam <Die.MachineReliefBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``WallThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: MachineReliefBuilder = ...  # unknown typename


class Heelpost(NXOpen.Features.BodyFeature):
    """
    Represents a heelpost feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.HeelpostBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: Heelpost = ...  # unknown typename


class CastReliefParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Cast Relief sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def SetCastRelief(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the profile of the cast relief.  
        
        Signature ``SetCastRelief(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetCastRelief(self) -> tuple:
        """
        Gets the profile of the cast relief.  
        
        Signature ``GetCastRelief()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of cast relief.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of cast relief, if true the cast relief will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of cast relief, if true input data to the cast relief will be displayed, if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefDepth: float = ...
    """
    Returns or sets  the relief depth of cast relief.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefDepth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefDepth`` 
    
    :param reliefDepth: 
    :type reliefDepth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefSheet: NXOpen.Body = ...
    """
    Returns or sets  the relief sheet of cast relief.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefSheet`` 
    
    :param reliefSheet: 
    :type reliefSheet: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: CastReliefParentBuilder = ...  # unknown typename


class DieShoeBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Shoe feature builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.DieShoe`
    
    .. versionadded:: NX6.0.0
    """
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseAttributes: DieAttributesBuilder = ...
    """
    Returns  the base attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BaseFlangeSection: NXOpen.Section = ...
    """
    Returns  the base flange section 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseFlangeSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BaseOrientation: DiePlaneBuilder = ...
    """
    Returns  the base orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CenterlineSlotAttributes: DieAttributesBuilder = ...
    """
    Returns  the centerline slot attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineSlotAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CenterlineSlotCreate: bool = ...
    """
    Returns or sets  the toggle to create the centerline slot 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineSlotCreate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineSlotCreate`` 
    
    :param centerlineSlotCreate: 
    :type centerlineSlotCreate: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CenterlineSlotDepth: NXOpen.Expression = ...
    """
    Returns  the centerline slot depth 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineSlotDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CenterlineSlotDirection: DieDirectionBuilder = ...
    """
    Returns  the centerline slot direction 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineSlotDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieDirectionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CenterlineSlotWidth: NXOpen.Expression = ...
    """
    Returns  the centerline slot width 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineSlotWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DeckCutoutsSection: NXOpen.Section = ...
    """
    Returns  the cutout sections in the main deck 
    
    <hr>
    
    Getter Method
    
    Signature ``DeckCutoutsSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DeckThickness: NXOpen.Expression = ...
    """
    Returns  the deck thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``DeckThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DieBooleansList: DieBooleanBuilderList = ...
    """
    Returns  the die boolean solids list 
    
    <hr>
    
    Getter Method
    
    Signature ``DieBooleansList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBooleanBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    FlangeThickness: NXOpen.Expression = ...
    """
    Returns  the flange thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MainDeckAttributes: DieAttributesBuilder = ...
    """
    Returns  the main deck attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``MainDeckAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MainDeckOffset: NXOpen.Expression = ...
    """
    Returns  the offset for the main deck either measured from the main deck specification or the base plane 
    
    <hr>
    
    Getter Method
    
    Signature ``MainDeckOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MainDeckPlane: DiePlaneBuilder = ...
    """
    Returns  the main deck plane 
    
    <hr>
    
    Getter Method
    
    Signature ``MainDeckPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MainDeckSection: NXOpen.Section = ...
    """
    Returns  the main deck section 
    
    <hr>
    
    Getter Method
    
    Signature ``MainDeckSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WallThickness: NXOpen.Expression = ...
    """
    Returns  the wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``WallThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DieShoeBuilder = ...  # unknown typename


class OutputCurvesBuilderSmoothTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OutputCurvesBuilderSmoothTypes():
    """
    Settings for the curve smoothing type.   
    
    .. versionadded:: NX4.0.1
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No smoothing"
       "Cubic", "Cubic"
       "Quintic", "Quintic"
    """
    NotSet = 0  # OutputCurvesBuilderSmoothTypesMemberType
    Cubic = 1  # OutputCurvesBuilderSmoothTypesMemberType
    Quintic = 2  # OutputCurvesBuilderSmoothTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OutputCurvesBuilderTrimCurveTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OutputCurvesBuilderTrimCurveTypes():
    """
    Settings for the trim curve type.   
    
    .. versionadded:: NX4.0.1
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Trim", "Regular trim curve."
       "Extended", "extended trim curve."
       "NotSet", "No trim curve."
    """
    Trim = 0  # OutputCurvesBuilderTrimCurveTypesMemberType
    Extended = 1  # OutputCurvesBuilderTrimCurveTypesMemberType
    NotSet = 2  # OutputCurvesBuilderTrimCurveTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OutputCurvesBuilderTrimOutputCurveTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OutputCurvesBuilderTrimOutputCurveTypes():
    """
    Settings for the trim curve output type.   
    
    .. versionadded:: NX4.0.1
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Geometric", "Geometric."
       "Corrected", "Corrected."
       "Both", "Both geometric and corrected."
    """
    Geometric = 0  # OutputCurvesBuilderTrimOutputCurveTypesMemberType
    Corrected = 1  # OutputCurvesBuilderTrimOutputCurveTypesMemberType
    Both = 2  # OutputCurvesBuilderTrimOutputCurveTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OutputCurvesBuilderTrimCurveCreateTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OutputCurvesBuilderTrimCurveCreateTypes():
    """
    Settings for the trim curve creation type.   
    
    .. versionadded:: NX4.0.1
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Section", "Section."
       "Surface", "Surface."
    """
    Section = 0  # OutputCurvesBuilderTrimCurveCreateTypesMemberType
    Surface = 1  # OutputCurvesBuilderTrimCurveCreateTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OutputCurvesBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents an output curves feature builder.  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX4.0.1
    """
    
    class SmoothTypes():
        """
        Settings for the curve smoothing type.   
        
        .. versionadded:: NX4.0.1
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No smoothing"
           "Cubic", "Cubic"
           "Quintic", "Quintic"
        """
        NotSet = 0  # OutputCurvesBuilderSmoothTypesMemberType
        Cubic = 1  # OutputCurvesBuilderSmoothTypesMemberType
        Quintic = 2  # OutputCurvesBuilderSmoothTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimCurveTypes():
        """
        Settings for the trim curve type.   
        
        .. versionadded:: NX4.0.1
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Trim", "Regular trim curve."
           "Extended", "extended trim curve."
           "NotSet", "No trim curve."
        """
        Trim = 0  # OutputCurvesBuilderTrimCurveTypesMemberType
        Extended = 1  # OutputCurvesBuilderTrimCurveTypesMemberType
        NotSet = 2  # OutputCurvesBuilderTrimCurveTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimOutputCurveTypes():
        """
        Settings for the trim curve output type.   
        
        .. versionadded:: NX4.0.1
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Geometric", "Geometric."
           "Corrected", "Corrected."
           "Both", "Both geometric and corrected."
        """
        Geometric = 0  # OutputCurvesBuilderTrimOutputCurveTypesMemberType
        Corrected = 1  # OutputCurvesBuilderTrimOutputCurveTypesMemberType
        Both = 2  # OutputCurvesBuilderTrimOutputCurveTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimCurveCreateTypes():
        """
        Settings for the trim curve creation type.   
        
        .. versionadded:: NX4.0.1
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Section", "Section."
           "Surface", "Surface."
        """
        Section = 0  # OutputCurvesBuilderTrimCurveCreateTypesMemberType
        Surface = 1  # OutputCurvesBuilderTrimCurveCreateTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateNonAssociative(self) -> 'list[NXOpen.ICurve]':
        """
        Creates the output curve without a feature.  
        
        Signature ``CreateNonAssociative()`` 
        
        :returns:  output curves  
        :rtype: list of :py:class:`NXOpen.ICurve` 
        
        .. versionadded:: NX4.0.1
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FirstLimitPoint: NXOpen.Point3d = ...
    """
    Returns or sets  the first limit point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstLimitPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FirstLimitPoint`` 
    
    :param firstLimitPoint: 
    :type firstLimitPoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    LastLimitPoint: NXOpen.Point3d = ...
    """
    Returns or sets  the last limit point.  
    
    <hr>
    
    Getter Method
    
    Signature ``LastLimitPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``LastLimitPoint`` 
    
    :param lastLimitPoint: 
    :type lastLimitPoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    OffsetDistance: float = ...
    """
    Returns or sets  the offset distance 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistance`` 
    
    :returns:  each non-trim offset curve will be output by this distance  
    :rtype: float 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetDistance`` 
    
    :param offsetDistance:  each non-trim offset curve will be output by this distance  
    :type offsetDistance: float 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ReferenceFeature: NXOpen.Features.Feature = ...
    """
    Returns or sets  the reference feature - must be either a die section or form task feature 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceFeature`` 
    
    :param referenceFeature: 
    :type referenceFeature: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ReferencePoint: NXOpen.Point3d = ...
    """
    Returns or sets  the reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePoint`` 
    
    :returns:  Reference point indicating which output curve you want  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePoint`` 
    
    :param referencePoint: 
    :type referencePoint: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SmoothTolerance: float = ...
    """
    Returns or sets  the tolerance used for cubic or quintic smoothing.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothTolerance`` 
    
    :param smoothTolerance: 
    :type smoothTolerance: float 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SmoothType: OutputCurvesBuilderSmoothTypes = ...
    """
    Returns or sets  the smooth type 
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.OutputCurvesBuilderSmoothTypes` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothType`` 
    
    :param smoothType: 
    :type smoothType: :py:class:`NXOpen.Die.OutputCurvesBuilderSmoothTypes` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimCurveCreateType: OutputCurvesBuilderTrimCurveCreateTypes = ...
    """
    Returns or sets  the trim curve creation type 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimCurveCreateType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.OutputCurvesBuilderTrimCurveCreateTypes` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimCurveCreateType`` 
    
    :param trimCurveType: 
    :type trimCurveType: :py:class:`NXOpen.Die.OutputCurvesBuilderTrimCurveCreateTypes` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimCurveType: OutputCurvesBuilderTrimCurveTypes = ...
    """
    Returns or sets  the trim curve type.  
    
    Needs to be set before reference point 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimCurveType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.OutputCurvesBuilderTrimCurveTypes` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimCurveType`` 
    
    :param trimCurveType: 
    :type trimCurveType: :py:class:`NXOpen.Die.OutputCurvesBuilderTrimCurveTypes` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimOutputCurveType: OutputCurvesBuilderTrimOutputCurveTypes = ...
    """
    Returns or sets  the trim curve output type 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimOutputCurveType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.OutputCurvesBuilderTrimOutputCurveTypes` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimOutputCurveType`` 
    
    :param trimCurveOutputType: 
    :type trimCurveOutputType: :py:class:`NXOpen.Die.OutputCurvesBuilderTrimOutputCurveTypes` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: OutputCurvesBuilder = ...  # unknown typename


class DrawDiePunchSectionBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Draw Die Punch Section sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def SetReliefDistance(self, reliefDistance: float) -> None:
        """
        Signature ``SetReliefDistance(reliefDistance)`` 
        
        :param reliefDistance: 
        :type reliefDistance: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetDeckThickness(self, deckThickness: float) -> None:
        """
        Signature ``SetDeckThickness(deckThickness)`` 
        
        :param deckThickness: 
        :type deckThickness: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetWallThickness(self, wallThickness: float) -> None:
        """
        Signature ``SetWallThickness(wallThickness)`` 
        
        :param wallThickness: 
        :type wallThickness: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBaseThickness(self, baseThickness: float) -> None:
        """
        Signature ``SetBaseThickness(baseThickness)`` 
        
        :param baseThickness: 
        :type baseThickness: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBaseWidth(self, baseWidth: float) -> None:
        """
        Signature ``SetBaseWidth(baseWidth)`` 
        
        :param baseWidth: 
        :type baseWidth: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPartialRibHeight(self, partialRibHeight: float) -> None:
        """
        Signature ``SetPartialRibHeight(partialRibHeight)`` 
        
        :param partialRibHeight: 
        :type partialRibHeight: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetOffsetProfileToTop(self, offsetProfileToTop: float) -> None:
        """
        Signature ``SetOffsetProfileToTop(offsetProfileToTop)`` 
        
        :param offsetProfileToTop: 
        :type offsetProfileToTop: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetReliefAngle(self, reliefAngle: float) -> None:
        """
        Signature ``SetReliefAngle(reliefAngle)`` 
        
        :param reliefAngle: 
        :type reliefAngle: float 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBeltThickness(self, beltThickness: str) -> None:
        """
        Signature ``SetBeltThickness(beltThickness)`` 
        
        :param beltThickness: 
        :type beltThickness: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetDesignStatus(self, designStatus: bool) -> None:
        """
        Signature ``SetDesignStatus(designStatus)`` 
        
        :param designStatus: 
        :type designStatus: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetDisplayStatus(self, displayStatus: bool) -> None:
        """
        Signature ``SetDisplayStatus(displayStatus)`` 
        
        :param displayStatus: 
        :type displayStatus: bool 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetFormingAttributes(self) -> tuple:
        """
        Gets the forming faces attributes.  
        
        Signature ``GetFormingAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of forming faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetFormingAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the forming faces attributes.  
        
        Signature ``SetFormingAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of forming faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBeltWallAttributes(self) -> tuple:
        """
        Gets the belt wall faces attributes.  
        
        Signature ``GetBeltWallAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of belt wall faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBeltWallAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the belt wall faces attributes.  
        
        Signature ``SetBeltWallAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of belt wall faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBaseAttributes(self) -> tuple:
        """
        Gets the base faces attributes.  
        
        Signature ``GetBaseAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of base faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBaseAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the base faces attributes.  
        
        Signature ``SetBaseAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of base faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPunchProfileAttributes(self) -> tuple:
        """
        Gets the punch profile edges attributes.  
        
        Signature ``GetPunchProfileAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value). title is a str.   Title for attribute. value is a str.   Value of attribute. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPunchProfileAttributes(self, title: str, value: str) -> None:
        """
        Sets the punch profile edges attributes.  
        
        Signature ``SetPunchProfileAttributes(title, value)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BaseThickness: float = ...
    """
    Returns  the base thickness of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseWidth: float = ...
    """
    Returns  the base width of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BeltThickness: NXOpen.Expression = ...
    """
    Returns  the belt thickness of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``BeltThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DeckThickness: float = ...
    """
    Returns  the deck thickness of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns  the design status of the draw die punch casting, if true the casting will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns  the display status of the draw die punch casting, if true input data to the draw die punch casting will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    OffsetProfileToTop: float = ...
    """
    Returns  the offset profile to top distance of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetProfileToTop`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PartialRibHeight: float = ...
    """
    Returns  the partial rib height of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartialRibHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefAngle: float = ...
    """
    Returns  the relief angle of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefDistance: float = ...
    """
    Returns  the relief distance of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallThickness: float = ...
    """
    Returns  the wall thickness of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``WallThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: DrawDiePunchSectionBuilder = ...  # unknown typename


class DieLimitsBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DieLimitsBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Die.DieLimitsBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DieLimitsBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Die.DieLimitsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DieLimitsBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Die.DieLimitsBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DieLimitsBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Die.DieLimitsBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieLimitsBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieLimitsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieLimitsBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieLimitsBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DieLimitsBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Die.DieLimitsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DieLimitsBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Die.DieLimitsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DieLimitsBuilder, object2: DieLimitsBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Die.DieLimitsBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Die.DieLimitsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DieLimitsBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Die.DieLimitsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DieLimitsBuilderList = ...  # unknown typename


class DieCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a Die Engineering/Design feature builder.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Features.FeatureCollection`
    
    .. versionadded:: NX4.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def DrawDiePunch(self, drawDiePunch: NXOpen.Features.Feature) -> DrawDiePunchBuilder:
        """
        Creates the draw die punch feature builder.  
        
        Signature ``DrawDiePunch(drawDiePunch)`` 
        
        :param drawDiePunch:  Draw Die Punch to be edited, None if create.  
        :type drawDiePunch: :py:class:`NXOpen.Features.Feature` 
        :returns:  Draw Die Punch feature builder.  
        :rtype: :py:class:`NXOpen.Die.DrawDiePunchBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def FormTask(self, formTask: NXOpen.Features.Feature) -> FormTaskBuilder:
        """
        Creates/Edits the form task feature builder.  
        
        Signature ``FormTask(formTask)`` 
        
        :param formTask:  Form Task to be edited, None if create.  
        :type formTask: :py:class:`NXOpen.Features.Feature` 
        :returns:  Form Task feature builder.  
        :rtype: :py:class:`NXOpen.Die.FormTaskBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def Rotor(self, rotor: NXOpen.Features.Feature) -> RotorBuilder:
        """
        Creates the die_rotor feature builder.  
        
        Signature ``Rotor(rotor)`` 
        
        :param rotor:  Die Rotor to be edited, None if create.  
        :type rotor: :py:class:`NXOpen.Features.Feature` 
        :returns:  Die Rotor feature builder.  
        :rtype: :py:class:`NXOpen.Die.RotorBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def FlangeTask(self, flangeTask: NXOpen.Features.Feature) -> FlangeTaskBuilder:
        """
        Creates/Edits the flange task feature builder.  
        
        Signature ``FlangeTask(flangeTask)`` 
        
        :param flangeTask:  Flange Task to be edited, None if create.  
        :type flangeTask: :py:class:`NXOpen.Features.Feature` 
        :returns:  Flange Task feature builder 
        :rtype: :py:class:`NXOpen.Die.FlangeTaskBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def TrimTask(self, trimTask: NXOpen.Features.Feature) -> TrimTaskBuilder:
        """
        Creates/Edits the trim task feature builder.  
        
        Signature ``TrimTask(trimTask)`` 
        
        :param trimTask:  Trim Task to be edited, None if create.  
        :type trimTask: :py:class:`NXOpen.Features.Feature` 
        :returns:  Trim Task feature builder 
        :rtype: :py:class:`NXOpen.Die.TrimTaskBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def PierceTask(self, pierceTask: NXOpen.Features.Feature) -> PierceTaskBuilder:
        """
        Creates/Edits the pierce task feature builder.  
        
        Signature ``PierceTask(pierceTask)`` 
        
        :param pierceTask:  Pierce Task to be edited, None if create.  
        :type pierceTask: :py:class:`NXOpen.Features.Feature` 
        :returns:  Pierce Task feature builder 
        :rtype: :py:class:`NXOpen.Die.PierceTaskBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateAddendumSectionUserDefinedBuilder(self) -> AddendumSectionUserDefinedBuilder:
        """
        Creates a user defined addendum section builder.  
        
        Signature ``CreateAddendumSectionUserDefinedBuilder()`` 
        
        :returns:  User Defined Section builder.  
        :rtype: :py:class:`NXOpen.Die.AddendumSectionUserDefinedBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateAddendumSectionBuilder(self, addSection: NXOpen.Features.Feature) -> AddendumSectionBuilder:
        """
        Creates/Edits the addendum section builder.  
        
        Signature ``CreateAddendumSectionBuilder(addSection)`` 
        
        :param addSection:  the AddendumSection feature to be edited, None if create.  
        :type addSection: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.AddendumSectionBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def Fill(self, fill: NXOpen.Features.Feature) -> FillBuilder:
        """
        Creates/Edits the die area fill feature builder.  
        
        Signature ``Fill(fill)`` 
        
        :param fill:  area fill to be edited, None if create.  
        :type fill: :py:class:`NXOpen.Features.Feature` 
        :returns:  area fill feature builder 
        :rtype: :py:class:`NXOpen.Die.FillBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def Lineup(self, lineup: NXOpen.Features.Feature) -> LineupBuilder:
        """
        Creates/Edits the die lineup feature builder.  
        
        Signature ``Lineup(lineup)`` 
        
        :param lineup:  lineup to be edited, None if create.  
        :type lineup: :py:class:`NXOpen.Features.Feature` 
        :returns:  lineup feature builder 
        :rtype: :py:class:`NXOpen.Die.LineupBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def OutputCurves(self, outcurves: NXOpen.Features.Feature) -> OutputCurvesBuilder:
        """
        Creates/Edits the die output curves feature builder.  
        
        Signature ``OutputCurves(outcurves)`` 
        
        :param outcurves:  output curves feature to be edited, None if create.  
        :type outcurves: :py:class:`NXOpen.Features.Feature` 
        :returns:  output curves feature builder 
        :rtype: :py:class:`NXOpen.Die.OutputCurvesBuilder` 
        
        .. versionadded:: NX4.0.1
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def Steelinsert(self, steelInsert: NXOpen.Features.Feature) -> SteelInsertBuilder:
        """
        Creates/Edits the steel insert feature builder.  
        
        Signature ``Steelinsert(steelInsert)`` 
        
        :param steelInsert:  Steel Insert to be edited, None if create.  
        :type steelInsert: :py:class:`NXOpen.Features.Feature` 
        :returns:  Steel Insert feature builder 
        :rtype: :py:class:`NXOpen.Die.SteelInsertBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateQuickBinderBuilder(self, quickBinder: NXOpen.Features.QuickBinder) -> QuickBinderBuilder:
        """
        Creates a :py:class:`NXOpen.Die.QuickBinderBuilder`  
        
        Signature ``CreateQuickBinderBuilder(quickBinder)`` 
        
        :param quickBinder:  :py:class:`NXOpen.Features.QuickBinder` to be edited  
        :type quickBinder: :py:class:`NXOpen.Features.QuickBinder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.QuickBinderBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateQuickBinderWrapBuilder(self, quickBinderWrap: NXOpen.Features.Feature) -> QuickBinderWrapBuilder:
        """
        Creates a :py:class:`NXOpen.Die.QuickBinderWrapBuilder`.  
        
        Signature ``CreateQuickBinderWrapBuilder(quickBinderWrap)`` 
        
        :param quickBinderWrap:  the QuickBinderWrap feature to be edited, None if create.  
        :type quickBinderWrap: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.QuickBinderWrapBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateTrimLineDevelopmentBuilder(self, trimLineDevelopment: NXOpen.Features.Feature) -> TrimLineDevelopmentBuilder:
        """
        Creates a :py:class:`NXOpen.Die.TrimLineDevelopmentBuilder`.  
        
        Signature ``CreateTrimLineDevelopmentBuilder(trimLineDevelopment)`` 
        
        :param trimLineDevelopment:  the TrimLineDevelopment feature to be edited, None if create.  
        :type trimLineDevelopment: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateAddSurfBuilder(self, addSurf: NXOpen.Features.Feature) -> AddSurfBuilder:
        """
        Creates a :py:class:`NXOpen.Die.AddSurfBuilder`.  
        
        Signature ``CreateAddSurfBuilder(addSurf)`` 
        
        :param addSurf:  the AddSurf feature to be edited, None if create.  
        :type addSurf: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.AddSurfBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def FaceSheet(self, faceSheet: NXOpen.Features.Feature) -> FaceSheetBuilder:
        """
        Creates a :py:class:`NXOpen.Die.FaceSheetBuilder`.  
        
        Signature ``FaceSheet(faceSheet)`` 
        
        :param faceSheet:  :py:class:`NXOpen.Die.FaceSheetBuilder` to be edited.  
        :type faceSheet: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.FaceSheetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def TrimFlangeDieAssistant(self, nullFeature: NXOpen.Features.Feature) -> TrimFlangeDieAssistantBuilder:
        """
        Creates the trim/flange die assistant builder.  
        
        Signature ``TrimFlangeDieAssistant(nullFeature)`` 
        
        :param nullFeature:  must be None to create trim die.  
        :type nullFeature: :py:class:`NXOpen.Features.Feature` 
        :returns:  Trim/Flange Die Assistant builder 
        :rtype: :py:class:`NXOpen.Die.TrimFlangeDieAssistantBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DieShoe(self, dieShoe: DieShoe) -> DieShoeBuilder:
        """
        Creates a die_shoe feature builder :py:class:`NXOpen.Die.DieShoeBuilder`.  
        
        Signature ``DieShoe(dieShoe)`` 
        
        :param dieShoe:  :py:class:`NXOpen.Die.DieShoe` to be edited.  
        :type dieShoe: :py:class:`NXOpen.Die.DieShoe` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DieShoeBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDieAttribute(self) -> DieAttributesBuilder:
        """
        Creates a :py:class:`NXOpen.Die.DieAttributesBuilder`.  
        
        Signature ``CreateDieAttribute()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDieBoolean(self) -> DieBooleanBuilder:
        """
        Creates a :py:class:`NXOpen.Die.DieBooleanBuilder`.  
        
        Signature ``CreateDieBoolean()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DieBooleanBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDieDirection(self, feature: NXOpen.Features.Feature) -> DieDirectionBuilder:
        """
        Creates a :py:class:`NXOpen.Die.DieDirectionBuilder`.  
        
        Signature ``CreateDieDirection(feature)`` 
        
        :param feature:  Parent NX Feature.  
        :type feature: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DieDirectionBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDiePlane(self, feature: NXOpen.Features.Feature) -> DiePlaneBuilder:
        """
        Creates a :py:class:`NXOpen.Die.DiePlaneBuilder`.  
        
        Signature ``CreateDiePlane(feature)`` 
        
        :param feature:  Parent NX Feature.  
        :type feature: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def ClampingSlot(self, clampingSlot: ClampingSlot) -> ClampingSlotBuilder:
        """
        Creates a clamping slot feature builder :py:class:`NXOpen.Die.ClampingSlotBuilder`.  
        
        Signature ``ClampingSlot(clampingSlot)`` 
        
        :param clampingSlot:  :py:class:`NXOpen.Die.ClampingSlot` to be edited.  
        :type clampingSlot: :py:class:`NXOpen.Die.ClampingSlot` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.ClampingSlotBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CompensateRoughData(self, compensateRoughData: NXOpen.Features.CompensateRoughData) -> CompensateRoughDataBuilder:
        """
        Creates a :py:class:`NXOpen.Die.CompensateRoughDataBuilder`.  
        
        Signature ``CompensateRoughData(compensateRoughData)`` 
        
        :param compensateRoughData:  :py:class:`NXOpen.Features.CompensateRoughData` to be edited.  
        :type compensateRoughData: :py:class:`NXOpen.Features.CompensateRoughData` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.CompensateRoughDataBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def Keyway(self, keyway: Keyway) -> KeywayBuilder:
        """
        Creates a keyway feature builder :py:class:`NXOpen.Die.KeywayBuilder`.  
        
        Signature ``Keyway(keyway)`` 
        
        :param keyway:  :py:class:`NXOpen.Die.Keyway` to be edited.  
        :type keyway: :py:class:`NXOpen.Die.Keyway` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.KeywayBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def Heelpost(self, heelpost: Heelpost) -> HeelpostBuilder:
        """
        Creates a heelpost feature builder :py:class:`NXOpen.Die.HeelpostBuilder`.  
        
        Signature ``Heelpost(heelpost)`` 
        
        :param heelpost:  :py:class:`NXOpen.Die.Heelpost` to be edited.  
        :type heelpost: :py:class:`NXOpen.Die.Heelpost` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.HeelpostBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CastRelief(self, castRelief: CastRelief) -> CastReliefBuilder:
        """
        Creates a cast relief feature builder :py:class:`NXOpen.Die.CastReliefBuilder`.  
        
        Signature ``CastRelief(castRelief)`` 
        
        :param castRelief:  :py:class:`NXOpen.Die.CastRelief` to be edited.  
        :type castRelief: :py:class:`NXOpen.Die.CastRelief` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.CastReliefBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateUncutRegionsBuilder(self) -> UncutRegionsBuilder:
        """
        Creates a :py:class:`NXOpen.Die.UncutRegionsBuilder`  
        
        Signature ``CreateUncutRegionsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.UncutRegionsBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDieLocation(self) -> DieLocationBuilder:
        """
        Creates a :py:class:`NXOpen.Die.DieLocationBuilder`.  
        
        Signature ``CreateDieLocation()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DieLocationBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDieLimits(self) -> DieLimitsBuilder:
        """
        Creates a :py:class:`NXOpen.Die.DieLimitsBuilder`.  
        
        Signature ``CreateDieLimits()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DieLimitsBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDieLocations(self, feature: NXOpen.Features.Feature, allowSelection: bool, allowNewPoint: bool, allowNewCoordinateSystem: bool, allowNewVector: bool, allowNewPlane: bool, isRequired: bool, allowMultipleSelection: bool) -> DieLocationsBuilder:
        """
        Creates a :py:class:`NXOpen.Die.DieLocationsBuilder`.  
        
        Signature ``CreateDieLocations(feature, allowSelection, allowNewPoint, allowNewCoordinateSystem, allowNewVector, allowNewPlane, isRequired, allowMultipleSelection)`` 
        
        :param feature:  Parent NX Feature.  
        :type feature: :py:class:`NXOpen.Features.Feature` 
        :param allowSelection:  Is selection available?  
        :type allowSelection: bool 
        :param allowNewPoint:  Is specify point available?  
        :type allowNewPoint: bool 
        :param allowNewCoordinateSystem:  Is specify coordinate system available?  
        :type allowNewCoordinateSystem: bool 
        :param allowNewVector:  Is specify vector available?  
        :type allowNewVector: bool 
        :param allowNewPlane:  Is specify plane available?  
        :type allowNewPlane: bool 
        :param isRequired:  Is it required that something be specified, or is everything optional?  
        :type isRequired: bool 
        :param allowMultipleSelection:  Can builder support multiple locations?  
        :type allowMultipleSelection: bool 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DieLocationsBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateFillAreaBuilder(self, fillArea: FillArea) -> FillAreaBuilder:
        """
        Creates a fill area builder :py:class:`NXOpen.Die.FillAreaBuilder`.  
        
        Signature ``CreateFillAreaBuilder(fillArea)`` 
        
        :param fillArea:  :py:class:`NXOpen.Die.FillArea` to be edited.  
        :type fillArea: :py:class:`NXOpen.Die.FillArea` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.FillAreaBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateFingerClearanceNotchBuilder(self, fingerClearanceNotch: FingerClearanceNotch) -> FingerClearanceNotchBuilder:
        """
        Creates a finger clearance notch builder :py:class:`NXOpen.Die.FingerClearanceNotchBuilder`.  
        
        Signature ``CreateFingerClearanceNotchBuilder(fingerClearanceNotch)`` 
        
        :param fingerClearanceNotch:  :py:class:`NXOpen.Die.FingerClearanceNotch` to be edited.  
        :type fingerClearanceNotch: :py:class:`NXOpen.Die.FingerClearanceNotch` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.FingerClearanceNotchBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateClearanceBuilder(self, clearance: Clearance) -> ClearanceBuilder:
        """
        Creates a clearance builder :py:class:`NXOpen.Die.ClearanceBuilder`.  
        
        Signature ``CreateClearanceBuilder(clearance)`` 
        
        :param clearance:  :py:class:`NXOpen.Die.Clearance` to be edited.  
        :type clearance: :py:class:`NXOpen.Die.Clearance` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.ClearanceBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateHandlingCoreBuilder(self, handlingCore: HandlingCore) -> HandlingCoreBuilder:
        """
        Creates a handling core builder :py:class:`NXOpen.Die.HandlingCoreBuilder`.  
        
        Signature ``CreateHandlingCoreBuilder(handlingCore)`` 
        
        :param handlingCore:  :py:class:`NXOpen.Die.HandlingCore` to be edited.  
        :type handlingCore: :py:class:`NXOpen.Die.HandlingCore` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.HandlingCoreBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateMachineReliefBuilder(self, machineRelief: MachineRelief) -> MachineReliefBuilder:
        """
        Creates a machine relief builder :py:class:`NXOpen.Die.MachineReliefBuilder`.  
        
        Signature ``CreateMachineReliefBuilder(machineRelief)`` 
        
        :param machineRelief:  :py:class:`NXOpen.Die.MachineRelief` to be edited.  
        :type machineRelief: :py:class:`NXOpen.Die.MachineRelief` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.MachineReliefBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDrawBeadBuilder(self, drawBead: DrawBead) -> DrawBeadBuilder:
        """
        Creates a draw bead builder :py:class:`NXOpen.Die.DrawBeadBuilder`.  
        
        Signature ``CreateDrawBeadBuilder(drawBead)`` 
        
        :param drawBead:  :py:class:`NXOpen.Die.DrawBead` to be edited.  
        :type drawBead: :py:class:`NXOpen.Die.DrawBead` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DrawBeadBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateSpringbackCompensationBuilder(self, springbackCompensation: SpringbackCompensation) -> SpringbackCompensationBuilder:
        """
        Creates a springback compensation builder :py:class:`NXOpen.Die.SpringbackCompensationBuilder`.  
        
        Signature ``CreateSpringbackCompensationBuilder(springbackCompensation)`` 
        
        :param springbackCompensation:  :py:class:`NXOpen.Die.SpringbackCompensation` to be edited  
        :type springbackCompensation: :py:class:`NXOpen.Die.SpringbackCompensation` 
        :returns: 
        :rtype: :py:class:`NXOpen.Die.SpringbackCompensationBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    


class DieBooleanBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DieBooleanBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Die.DieBooleanBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DieBooleanBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Die.DieBooleanBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DieBooleanBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Die.DieBooleanBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DieBooleanBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Die.DieBooleanBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieBooleanBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieBooleanBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieBooleanBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieBooleanBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DieBooleanBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Die.DieBooleanBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DieBooleanBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Die.DieBooleanBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DieBooleanBuilder, object2: DieBooleanBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Die.DieBooleanBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Die.DieBooleanBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DieBooleanBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Die.DieBooleanBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DieBooleanBuilderList = ...  # unknown typename


class PointChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Point Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the point, if true the point will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the point, if true input data to the point will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the location of the point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: PointChildBuilder = ...  # unknown typename


class FingerClearanceNotch(NXOpen.Features.BodyFeature):
    """
    Represents a die design finger clearance notch feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.FingerClearanceNotchBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: FingerClearanceNotch = ...  # unknown typename


class KeywayParentBuilderRunoffTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class KeywayParentBuilderRunoffTypeOption():
    """
    Settings for the runoff type of the keyway. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangular", "Rectangular runoff."
       "Circular", "Circular runoff."
    """
    Rectangular = 0  # KeywayParentBuilderRunoffTypeOptionMemberType
    Circular = 1  # KeywayParentBuilderRunoffTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class KeywayParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Keyway Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class RunoffTypeOption():
        """
        Settings for the runoff type of the keyway. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangular", "Rectangular runoff."
           "Circular", "Circular runoff."
        """
        Rectangular = 0  # KeywayParentBuilderRunoffTypeOptionMemberType
        Circular = 1  # KeywayParentBuilderRunoffTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetSlotAttributes(self) -> tuple:
        """
        Gets the slot attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetSlotAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of slot faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetSlotAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the slot attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetSlotAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of slot faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPadAttributes(self) -> tuple:
        """
        Gets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetPadAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of pad faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPadAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetPadAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of pad faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateChild(self) -> KeywayChildBuilder:
        """
        Creates a child keyway.  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.KeywayChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, diekeywaychild: KeywayChildBuilder) -> None:
        """
        Deletes a child keyway.  
        
        Signature ``DeleteChild(diekeywaychild)`` 
        
        :param diekeywaychild: 
        :type diekeywaychild: :py:class:`NXOpen.Die.KeywayChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[KeywayChildBuilder]':
        """
        Outputs the child keyways.  
        
        Signature ``GetChildren()`` 
        
        :returns:  The child keyways.  
        :rtype: list of :py:class:`NXOpen.Die.KeywayChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Depth: float = ...
    """
    Returns or sets  the depth of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Depth`` 
    
    :param depth: 
    :type depth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of keyways, if true the keyways will be built into the model, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of keyways, if true input data to the keyways will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Length: float = ...
    """
    Returns or sets  the length of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Length`` 
    
    :param length: 
    :type length: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MinimumRibHeight: float = ...
    """
    Returns or sets  the minimum rib height of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumRibHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumRibHeight`` 
    
    :param minimumRibHeight: 
    :type minimumRibHeight: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PadHeight: float = ...
    """
    Returns or sets  the pad height of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``PadHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PadHeight`` 
    
    :param padHeight: 
    :type padHeight: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PadWidth: float = ...
    """
    Returns or sets  the pad width of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``PadWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PadWidth`` 
    
    :param padWidth: 
    :type padWidth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PlacementOffset: float = ...
    """
    Returns or sets  the placement offset of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementOffset`` 
    
    :param placementOffset: 
    :type placementOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffDepth: float = ...
    """
    Returns or sets  the runoff depth of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffDepth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffDepth`` 
    
    :param runoffDepth: 
    :type runoffDepth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffDiameter: float = ...
    """
    Returns or sets  the runoff diameter of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffDiameter`` 
    
    :param runoffDiameter: 
    :type runoffDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffLength: float = ...
    """
    Returns or sets  the runoff length of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffLength`` 
    
    :param runoffLength: 
    :type runoffLength: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffType: KeywayParentBuilderRunoffTypeOption = ...
    """
    Returns or sets  the runoff type of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.KeywayParentBuilderRunoffTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffType`` 
    
    :param runoffType: 
    :type runoffType: :py:class:`NXOpen.Die.KeywayParentBuilderRunoffTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffWidth: float = ...
    """
    Returns or sets  the runoff width of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffWidth`` 
    
    :param runoffWidth: 
    :type runoffWidth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: float = ...
    """
    Returns or sets  the width of keyways.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: KeywayParentBuilder = ...  # unknown typename


class PierceHoleChildBuilderShapeTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PierceHoleChildBuilderShapeTypeOption():
    """
    Settings for the shape type of the pierce hole. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circular", "circular hole"
       "Rectangular", "rectangular hole"
       "Curve", "curve defined hole"
    """
    Circular = 0  # PierceHoleChildBuilderShapeTypeOptionMemberType
    Rectangular = 1  # PierceHoleChildBuilderShapeTypeOptionMemberType
    Curve = 2  # PierceHoleChildBuilderShapeTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PierceHoleChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Pierce Hole Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class ShapeTypeOption():
        """
        Settings for the shape type of the pierce hole. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circular", "circular hole"
           "Rectangular", "rectangular hole"
           "Curve", "curve defined hole"
        """
        Circular = 0  # PierceHoleChildBuilderShapeTypeOptionMemberType
        Rectangular = 1  # PierceHoleChildBuilderShapeTypeOptionMemberType
        Curve = 2  # PierceHoleChildBuilderShapeTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetPierceHoleLocation(self, pierceHoleLocations: 'list[NXOpen.ILocation]') -> None:
        """
        Sets the locations of the pierce hole 
        
        Signature ``SetPierceHoleLocation(pierceHoleLocations)`` 
        
        :param pierceHoleLocations:  pierce hole location  
        :type pierceHoleLocations: list of :py:class:`NXOpen.ILocation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPierceHoleLocation(self) -> 'list[NXOpen.ILocation]':
        """
        Gets the locations of the pierce hole  
        
        Signature ``GetPierceHoleLocation()`` 
        
        :returns:  pierce hole location  
        :rtype: list of :py:class:`NXOpen.ILocation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPierceHoleShape(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the shape of the pierce hole 
        
        Signature ``SetPierceHoleShape(direction, profileEntries)`` 
        
        :param direction:  profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  profile entries  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPierceHoleShape(self) -> tuple:
        """
        Gets the shape of the pierce hole  
        
        Signature ``GetPierceHoleShape()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   profile entries direction is a :py:class:`NXOpen.Die.DirectionOption`.   profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetSlugHoleShape(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the slug hole shape of the pierce hole 
        
        Signature ``SetSlugHoleShape(direction, profileEntries)`` 
        
        :param direction:  profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  profile entries  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetSlugHoleShape(self) -> tuple:
        """
        Gets the slug hole shape of the pierce hole  
        
        Signature ``GetSlugHoleShape()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   profile entries direction is a :py:class:`NXOpen.Die.DirectionOption`.   profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBreakerHoleShape(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the breaker hole shape of the pierce hole 
        
        Signature ``SetBreakerHoleShape(direction, profileEntries)`` 
        
        :param direction:  profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  profile entries  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBreakerHoleShape(self) -> tuple:
        """
        Gets the breaker hole shape of the pierce hole  
        
        Signature ``GetBreakerHoleShape()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   profile entries direction is a :py:class:`NXOpen.Die.DirectionOption`.   profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetProfileBlendRadius(self, profileBlendRadius: str) -> None:
        """
        Signature ``SetProfileBlendRadius(profileBlendRadius)`` 
        
        :param profileBlendRadius:  profile blend radius  
        :type profileBlendRadius: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetDieClearance(self, dieClearance: str) -> None:
        """
        Signature ``SetDieClearance(dieClearance)`` 
        
        :param dieClearance: 
        :type dieClearance: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetDiameter(self, diameter: str) -> None:
        """
        Signature ``SetDiameter(diameter)`` 
        
        :param diameter: 
        :type diameter: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetDepth(self, depth: str) -> None:
        """
        Signature ``SetDepth(depth)`` 
        
        :param depth: 
        :type depth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetLength(self, length: str) -> None:
        """
        Signature ``SetLength(length)`` 
        
        :param length: 
        :type length: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetWidth(self, width: str) -> None:
        """
        Signature ``SetWidth(width)`` 
        
        :param width: 
        :type width: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetSlugHoleDiameterIncrement(self, slugHoleDiameterIncrement: str) -> None:
        """
        Signature ``SetSlugHoleDiameterIncrement(slugHoleDiameterIncrement)`` 
        
        :param slugHoleDiameterIncrement: 
        :type slugHoleDiameterIncrement: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetSlugHoleOffset(self, slugHoleOffset: str) -> None:
        """
        Signature ``SetSlugHoleOffset(slugHoleOffset)`` 
        
        :param slugHoleOffset: 
        :type slugHoleOffset: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBreakerHoleFactor(self, breakerHoleFactor: str) -> None:
        """
        Signature ``SetBreakerHoleFactor(breakerHoleFactor)`` 
        
        :param breakerHoleFactor: 
        :type breakerHoleFactor: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBreakerHoleOffset(self, breakerHoleOffset: str) -> None:
        """
        Signature ``SetBreakerHoleOffset(breakerHoleOffset)`` 
        
        :param breakerHoleOffset: 
        :type breakerHoleOffset: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBreakerHoleDepth(self, breakerHoleDepth: str) -> None:
        """
        Signature ``SetBreakerHoleDepth(breakerHoleDepth)`` 
        
        :param breakerHoleDepth: 
        :type breakerHoleDepth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetHoleAttributes(self) -> tuple:
        """
        Gets the hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``GetHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of hole faces diameterTitle is a str.   title for diameter attribute 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str) -> None:
        """
        Sets the hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``SetHoleAttributes(title, value, color, diameterTitle)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of hole faces  
        :type color: int 
        :param diameterTitle:  title for diameter attribute  
        :type diameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetSlugHoleAttributes(self) -> tuple:
        """
        Gets the slug hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``GetSlugHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of hole faces diameterTitle is a str.   title for diameter attribute 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetSlugHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str) -> None:
        """
        Sets the slug hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``SetSlugHoleAttributes(title, value, color, diameterTitle)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of hole faces  
        :type color: int 
        :param diameterTitle:  title for diameter attribute  
        :type diameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetBreakerHoleAttributes(self) -> tuple:
        """
        Gets the breaker hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``GetBreakerHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of hole faces diameterTitle is a str.   title for diameter attribute 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetBreakerHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str) -> None:
        """
        Sets the breaker hole attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``SetBreakerHoleAttributes(title, value, color, diameterTitle)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of hole faces  
        :type color: int 
        :param diameterTitle:  title for diameter attribute  
        :type diameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def TranslatePierceHoleLocation(self, translateDist: NXOpen.Vector3d) -> None:
        """
        Translates the center of the die pierce hole by the specified amount.  
        
        Signature ``TranslatePierceHoleLocation(translateDist)`` 
        
        :param translateDist:  A scaled vector indicating the distance to translate  
        :type translateDist: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BreakerHoleDepth: NXOpen.Expression = ...
    """
    Returns  the breaker hole depth of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakerHoleDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BreakerHoleDirection: NXOpen.ILocation = ...
    """
    Returns or sets  the breaker hole direction of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakerHoleDirection`` 
    
    :returns:  breaker hole direction  
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BreakerHoleDirection`` 
    
    :param breakerHoleDirection:  breaker hole direction  
    :type breakerHoleDirection: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BreakerHoleFactor: NXOpen.Expression = ...
    """
    Returns  the breaker hole factor of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakerHoleFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BreakerHoleLocation: NXOpen.ILocation = ...
    """
    Returns or sets  the location of breaker holes for the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakerHoleLocation`` 
    
    :returns:  breaker hole location   
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BreakerHoleLocation`` 
    
    :param breakerHoleLocation:  breaker hole location  
    :type breakerHoleLocation: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BreakerHoleOffset: NXOpen.Expression = ...
    """
    Returns  the breaker hole offset of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakerHoleOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CircularSlugHole: bool = ...
    """
    Returns or sets  the circular slug hole switch of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``CircularSlugHole`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CircularSlugHole`` 
    
    :param circularSlugHole: 
    :type circularSlugHole: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Depth: NXOpen.Expression = ...
    """
    Returns  the depth of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Diameter: NXOpen.Expression = ...
    """
    Returns  the diameter of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DieClearance: NXOpen.Expression = ...
    """
    Returns  the die clearance of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``DieClearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayHoles: bool = ...
    """
    Returns or sets  the display holes option of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayHoles`` 
    
    :param displayPierceHoles: 
    :type displayPierceHoles: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PierceHoleDirection: NXOpen.ILocation = ...
    """
    Returns or sets  the pierce hole direction 
    
    <hr>
    
    Getter Method
    
    Signature ``PierceHoleDirection`` 
    
    :returns: pierce hole direction  
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PierceHoleDirection`` 
    
    :param pierceHoleDirection:  pierce hole direction  
    :type pierceHoleDirection: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProfileBlendRadius: NXOpen.Expression = ...
    """
    Returns  the profile blend radius of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileBlendRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ShapeType: PierceHoleChildBuilderShapeTypeOption = ...
    """
    Returns or sets  the pierce hole shape type 
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeType`` 
    
    :returns:  hole type  
    :rtype: :py:class:`NXOpen.Die.PierceHoleChildBuilderShapeTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ShapeType`` 
    
    :param shapeType:  hole type  
    :type shapeType: :py:class:`NXOpen.Die.PierceHoleChildBuilderShapeTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SlugHoleDiameterIncrement: NXOpen.Expression = ...
    """
    Returns  the slug hole diameter increment of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugHoleDiameterIncrement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SlugHoleOffset: NXOpen.Expression = ...
    """
    Returns  the slug hole offset of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugHoleOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width of the pierce hole 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: PierceHoleChildBuilder = ...  # unknown typename


class DirectionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DirectionOption():
    """
    Settings for the profile direction. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromEnd", "Profile direction is aligned with the first curve from the end to start."
       "FromStart", "Profile direction is aligned with the first curve from the start to end."
    """
    FromEnd = -1  # DirectionOptionMemberType
    FromStart = 1  # DirectionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimFlangeDieAssistant(NXOpen.Features.BodyFeature):
    """
    Represents a trim/flange die assistant   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.TrimFlangeDieAssistantBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: TrimFlangeDieAssistant = ...  # unknown typename


class SpringbackCompensationBuilderDefinedByTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpringbackCompensationBuilderDefinedByType():
    """
    The type of input data that defines the compensation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OneStepFeature", "A One-Step feature."
       "FacetedBodies", "Facted bodies."
       "Points", "Points ."
    """
    OneStepFeature = 0  # SpringbackCompensationBuilderDefinedByTypeMemberType
    FacetedBodies = 1  # SpringbackCompensationBuilderDefinedByTypeMemberType
    Points = 2  # SpringbackCompensationBuilderDefinedByTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpringbackCompensationBuilderResultSheetTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpringbackCompensationBuilderResultSheetType():
    """
    The type of sheet body you would like created as output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Compensated", "Compensated sheet body."
       "Sprung", "Sprung sheet body."
    """
    Compensated = 0  # SpringbackCompensationBuilderResultSheetTypeMemberType
    Sprung = 1  # SpringbackCompensationBuilderResultSheetTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpringbackCompensationBuilderDegreeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpringbackCompensationBuilderDegreeType():
    """
    The polynomial degree type. Acceptable degrees are 2, 3, 5, and 7. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Two", "Degree is 2"
       "Three", "Degree is 3"
       "Five", "Degree is 5"
       "Seven", "Degree is 7"
    """
    Two = 0  # SpringbackCompensationBuilderDegreeTypeMemberType
    Three = 1  # SpringbackCompensationBuilderDegreeTypeMemberType
    Five = 2  # SpringbackCompensationBuilderDegreeTypeMemberType
    Seven = 3  # SpringbackCompensationBuilderDegreeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpringbackCompensationBuilder(NXOpen.Features.FeatureBuilder):
    """
    Used to create or edit a :py:class:`NXOpen.Die.SpringbackCompensation` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateSpringbackCompensationBuilder`
    
    Default values.
    
    ==================  ===============
    Property            Value
    ==================  ===============
    ConvexityEnabled    false 
    ------------------  ---------------
    CreateFacets        false 
    ------------------  ---------------
    DefinedBy           OneStepFeature 
    ------------------  ---------------
    DeformationFactor   1 
    ------------------  ---------------
    Degree              Two 
    ------------------  ---------------
    Divisions           3 
    ------------------  ---------------
    ResultType          Compensated 
    ------------------  ---------------
    ShapeValue          0.5 
    ------------------  ---------------
    SmoothingFactor     1e-009 
    ------------------  ---------------
    StepSize            1.0 
    ==================  ===============
    
    .. versionadded:: NX7.5.0
    """
    
    class DefinedByType():
        """
        The type of input data that defines the compensation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OneStepFeature", "A One-Step feature."
           "FacetedBodies", "Facted bodies."
           "Points", "Points ."
        """
        OneStepFeature = 0  # SpringbackCompensationBuilderDefinedByTypeMemberType
        FacetedBodies = 1  # SpringbackCompensationBuilderDefinedByTypeMemberType
        Points = 2  # SpringbackCompensationBuilderDefinedByTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ResultSheetType():
        """
        The type of sheet body you would like created as output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Compensated", "Compensated sheet body."
           "Sprung", "Sprung sheet body."
        """
        Compensated = 0  # SpringbackCompensationBuilderResultSheetTypeMemberType
        Sprung = 1  # SpringbackCompensationBuilderResultSheetTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DegreeType():
        """
        The polynomial degree type. Acceptable degrees are 2, 3, 5, and 7. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Two", "Degree is 2"
           "Three", "Degree is 3"
           "Five", "Degree is 5"
           "Seven", "Degree is 7"
        """
        Two = 0  # SpringbackCompensationBuilderDegreeTypeMemberType
        Three = 1  # SpringbackCompensationBuilderDegreeTypeMemberType
        Five = 2  # SpringbackCompensationBuilderDegreeTypeMemberType
        Seven = 3  # SpringbackCompensationBuilderDegreeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetProductPoints(self) -> 'list[NXOpen.Point3d]':
        """
        Get the sample points on the product surface.  
        
        Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.Points <Die.SpringbackCompensationBuilderDefinedByType>`. Optional. 
        
        Signature ``GetProductPoints()`` 
        
        :returns:  Points representing the shape of the product.  
        :rtype: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetProductPoints(self, productPoints: 'list[NXOpen.Point3d]') -> None:
        """
        Set the sample points on the product surface.  
        
        Must have the same number as sprung points. Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.Points <Die.SpringbackCompensationBuilderDefinedByType>`. Optional. 
        
        Signature ``SetProductPoints(productPoints)`` 
        
        :param productPoints:  Points representing the shape of the product.  
        :type productPoints: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    
    
    def GetSprungPoints(self) -> 'list[NXOpen.Point3d]':
        """
        Get the sample points on the sprung surface.  
        
        Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.Points <Die.SpringbackCompensationBuilderDefinedByType>`. 
        
        Signature ``GetSprungPoints()`` 
        
        :returns:  Points representing the shape of the sprung sheet.  
        :rtype: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSprungPoints(self, sprungPoints: 'list[NXOpen.Point3d]') -> None:
        """
        Set the sample points on the sprung surface.  
        
        Must have the same number as product points. Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.Points <Die.SpringbackCompensationBuilderDefinedByType>`. 
        
        Signature ``SetSprungPoints(sprungPoints)`` 
        
        :param sprungPoints:  Points representing the shape of the sprung sheet.  
        :type sprungPoints: list of :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    CalculateMaxDeviation: bool = ...
    """
    Returns or sets  the indication if the feature should calculate the maximum deviation of the result.  
    
    True indicates the deviation should be calculated, false indicates the deviation will not be calculated. 
    
    <hr>
    
    Getter Method
    
    Signature ``CalculateMaxDeviation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalculateMaxDeviation`` 
    
    :param calculateMaxDeviation: 
    :type calculateMaxDeviation: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    ConvexityDirection: NXOpen.Direction = ...
    """
    Returns or sets  the convexity direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConvexityDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvexityDirection`` 
    
    :param convexityDirection: 
    :type convexityDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    ConvexityEnabled: bool = ...
    """
    Returns or sets  the toggle that determines whether to constrain convexity 
    
    <hr>
    
    Getter Method
    
    Signature ``ConvexityEnabled`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvexityEnabled`` 
    
    :param isConvexityEnabled: 
    :type isConvexityEnabled: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    CreateFacets: bool = ...
    """
    Returns or sets  the value determines if a faceted output body is also created.  
    
    True indicates to output a faceted body, false indicates that a faceted body is not output.
    Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.FacetedBodies <Die.SpringbackCompensationBuilderDefinedByType>`
    
    <hr>
    
    Getter Method
    
    Signature ``CreateFacets`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateFacets`` 
    
    :param createFacets: 
    :type createFacets: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    DefinedBy: SpringbackCompensationBuilderDefinedByType = ...
    """
    Returns or sets  the type of data that will be used to define the feature.  
    
    :py:class:`Die.SpringbackCompensationBuilderDefinedByType.OneStepFeature <Die.SpringbackCompensationBuilderDefinedByType>` 
    
      * :py:meth:`Die.SpringbackCompensationBuilder.OneStep`
    
    :py:class:`Die.SpringbackCompensationBuilderDefinedByType.FacetedBodies <Die.SpringbackCompensationBuilderDefinedByType>` 
    
      * :py:meth:`Die.SpringbackCompensationBuilder.ProductSheet`
      * :py:meth:`Die.SpringbackCompensationBuilder.ProductFacets`
      * :py:meth:`Die.SpringbackCompensationBuilder.SprungFacets`
    
    :py:class:`Die.SpringbackCompensationBuilderDefinedByType.Points <Die.SpringbackCompensationBuilderDefinedByType>` 
    
      * :py:meth:`Die.SpringbackCompensationBuilder.ProductSheet`
      * :py:meth:`Die.SpringbackCompensationBuilder.SetProductPoints`
      * :py:meth:`Die.SpringbackCompensationBuilder.SetSprungPoints`
    
    <hr>
    
    Getter Method
    
    Signature ``DefinedBy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SpringbackCompensationBuilderDefinedByType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefinedBy`` 
    
    :param definedBy: 
    :type definedBy: :py:class:`NXOpen.Die.SpringbackCompensationBuilderDefinedByType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    DeformationFactor: float = ...
    """
    Returns or sets  the deformation factor determines how much of the calculated deformation is applied to the result body.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeformationFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeformationFactor`` 
    
    :param deformationFactor: 
    :type deformationFactor: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    Degree: SpringbackCompensationBuilderDegreeType = ...
    """
    Returns or sets  the polynomial degree (one unit less than the order).  
    
    <hr>
    
    Getter Method
    
    Signature ``Degree`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SpringbackCompensationBuilderDegreeType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Degree`` 
    
    :param degree: 
    :type degree: :py:class:`NXOpen.Die.SpringbackCompensationBuilderDegreeType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    Divisions: int = ...
    """
    Returns or sets  the number of equi-distant points to divide the cube of the sheet body (N x N x N).  
    
    <hr>
    
    Getter Method
    
    Signature ``Divisions`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Divisions`` 
    
    :param divisions: 
    :type divisions: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    DrawVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector indicating the draw direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawVector`` 
    
    :param drawVector: 
    :type drawVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    InnerCurve: NXOpen.Section = ...
    """
    Returns  the inner boundary curve of the transition area.  
    
    <hr>
    
    Getter Method
    
    Signature ``InnerCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    IsGlobalDeformation: bool = ...
    """
    Returns or sets  the indication if the feature is a generic Global Deformation.  
    
    True indicates the feature is a Global Deformation, false indicates the feature is not a Global Deformation. 
    
    <hr>
    
    Getter Method
    
    Signature ``IsGlobalDeformation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsGlobalDeformation`` 
    
    :param isGlobalDeformation: 
    :type isGlobalDeformation: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    OneStep: NXOpen.Features.SelectFeature = ...
    """
    Returns  the one-step feature.  
    
    Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.OneStepFeature <Die.SpringbackCompensationBuilderDefinedByType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``OneStep`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OuterCurve: NXOpen.Section = ...
    """
    Returns  the outer boundary curve of transition area.  
    
    <hr>
    
    Getter Method
    
    Signature ``OuterCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProductFacets: NXOpen.Facet.SelectFacetedBody = ...
    """
    Returns  the product facets.  
    
    Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.FacetedBodies <Die.SpringbackCompensationBuilderDefinedByType>`. Optional. 
    
    <hr>
    
    Getter Method
    
    Signature ``ProductFacets`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Facet.SelectFacetedBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProductPointsFile: str = ...
    """
    Returns or sets  the product points file name.  
    
    This is saved for reference only. 
    The product points are actually defined by calling :py:meth:`Die.SpringbackCompensationBuilder.SetProductPoints`. 
    Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.Points <Die.SpringbackCompensationBuilderDefinedByType>`. Optional.
    
    <hr>
    
    Getter Method
    
    Signature ``ProductPointsFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProductPointsFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    ProductSheet: NXOpen.SelectBody = ...
    """
    Returns  the sheet body representing the product shape.  
    
    Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.FacetedBodies <Die.SpringbackCompensationBuilderDefinedByType>` or
    :py:class:`Die.SpringbackCompensationBuilderDefinedByType.Points <Die.SpringbackCompensationBuilderDefinedByType>`.   
    
    <hr>
    
    Getter Method
    
    Signature ``ProductSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ResultType: SpringbackCompensationBuilderResultSheetType = ...
    """
    Returns or sets  the type of output to generate.  
    
    <hr>
    
    Getter Method
    
    Signature ``ResultType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SpringbackCompensationBuilderResultSheetType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ResultType`` 
    
    :param resultType: 
    :type resultType: :py:class:`NXOpen.Die.SpringbackCompensationBuilderResultSheetType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    ShapeValue: float = ...
    """
    Returns or sets  the parameter that determines the shape of the transition area.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShapeValue`` 
    
    :param shapeValue: 
    :type shapeValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    SmoothingFactor: float = ...
    """
    Returns or sets  the smoothing factor regulates a trade-off between interpolation error and smoothing when creating the result body.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothingFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothingFactor`` 
    
    :param smoothingFactor: 
    :type smoothingFactor: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    SprungFacets: NXOpen.Facet.SelectFacetedBody = ...
    """
    Returns  the sprung facets.  
    
    Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.FacetedBodies <Die.SpringbackCompensationBuilderDefinedByType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SprungFacets`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Facet.SelectFacetedBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SprungPointsFile: str = ...
    """
    Returns or sets  the sprung points file name.  
    
    This is saved for reference only. 
    The product points are actually defined by calling :py:meth:`Die.SpringbackCompensationBuilder.SetSprungPoints`. 
    Only when type is :py:class:`Die.SpringbackCompensationBuilderDefinedByType.Points <Die.SpringbackCompensationBuilderDefinedByType>`. Optional.
    
    <hr>
    
    Getter Method
    
    Signature ``SprungPointsFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SprungPointsFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    StepSize: float = ...
    """
    Returns or sets  the step size.  
    
    <hr>
    
    Getter Method
    
    Signature ``StepSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StepSize`` 
    
    :param stepSize: 
    :type stepSize: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR nx_freeform_2 ("advanced freeform modeling")
    """
    Null: SpringbackCompensationBuilder = ...  # unknown typename


class RotorBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a CAM Rotor feature builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.Rotor`
    
    .. versionadded:: NX4.0.0
    """
    
    def SetFlangeBendProfile(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the flange bend profile of the rotor casting.  
        
        Signature ``SetFlangeBendProfile(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetFlangeBendProfile(self) -> tuple:
        """
        Gets the flange bend profile of the rotor casting.  
        
        Signature ``GetFlangeBendProfile()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetEndOfFlangeProfile(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the end of flange profile of the die rotor casting.  
        
        Signature ``SetEndOfFlangeProfile(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetEndOfFlangeProfile(self) -> tuple:
        """
        Gets the end of flange profile of the die rotor casting.  
        
        Signature ``GetEndOfFlangeProfile()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetStartOrientation(self, startEntries: 'list[NXOpen.ISurface]') -> None:
        """
        Sets the start orientation of the rotor casting.  
        
        Signature ``SetStartOrientation(startEntries)`` 
        
        :param startEntries: 
        :type startEntries: list of :py:class:`NXOpen.ISurface` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetStartOrientation(self) -> 'list[NXOpen.ISurface]':
        """
        Gets the start orientation of the rotor casting.  
        
        Signature ``GetStartOrientation()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.ISurface` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetEndOrientation(self, endEntries: 'list[NXOpen.ISurface]') -> None:
        """
        Sets the end orientation of the rotor casting.  
        
        Signature ``SetEndOrientation(endEntries)`` 
        
        :param endEntries: 
        :type endEntries: list of :py:class:`NXOpen.ISurface` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetEndOrientation(self) -> 'list[NXOpen.ISurface]':
        """
        Gets the end orientation of the rotor casting.  
        
        Signature ``GetEndOrientation()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.ISurface` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetRotorRotationAngle(self, degrees: str) -> None:
        """
        Signature ``SetRotorRotationAngle(degrees)`` 
        
        :param degrees: 
        :type degrees: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    AirCylinderParent: PadParentBuilder = ...
    """
    Returns  the air cylinder parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``AirCylinderParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PadParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance of the rotor casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BoltHoleParent: HoleParentBuilder = ...
    """
    Returns  the bolt holes parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoltHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayHoles: bool = ...
    """
    Returns or sets  the display holes of the rotor casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayHoles`` 
    
    :param displayHoles: 
    :type displayHoles: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance of the rotor casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DowelHoleParent: HoleParentBuilder = ...
    """
    Returns  the dowel holes parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``DowelHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    EndStopsParent: PadParentBuilder = ...
    """
    Returns  the end stops parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndStopsParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PadParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    HandlingHoleParent: HoleParentBuilder = ...
    """
    Returns  the handling holes parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``HandlingHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PressDirection: NXOpen.IReferenceAxis = ...
    """
    Returns or sets  the press direction of the rotor casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``PressDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IReferenceAxis` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PressDirection`` 
    
    :param pressDirection: 
    :type pressDirection: :py:class:`NXOpen.IReferenceAxis` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RotorRotationAngle: NXOpen.Expression = ...
    """
    Returns  the rotor rotation angle value of the rotor casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotorRotationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RotorSolid: NXOpen.Body = ...
    """
    Returns or sets  the rotor solid of the rotor casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotorSolid`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RotorSolid`` 
    
    :param rotorSolid: 
    :type rotorSolid: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Section: RotorSectionBuilder = ...
    """
    Returns  the section builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``Section`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.RotorSectionBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SensorParent: PadParentBuilder = ...
    """
    Returns  the sensor parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``SensorParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PadParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SetupBlocksParent: PadParentBuilder = ...
    """
    Returns  the setup blocks parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``SetupBlocksParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PadParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SheetMetal: NXOpen.Body = ...
    """
    Returns or sets  the sheet metal of the rotor casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SheetMetal`` 
    
    :param sheetMetal: 
    :type sheetMetal: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    TbarHoleParent: HoleParentBuilder = ...
    """
    Returns  the T-bar holes parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``TbarHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ThroatDefinitionParent: ThroatParentBuilder = ...
    """
    Returns  the throat definition parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThroatDefinitionParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.ThroatParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ThroatOrientation: NXOpen.CartesianCoordinateSystem = ...
    """
    Returns or sets  the throat orientation of the rotor casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThroatOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CartesianCoordinateSystem` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ThroatOrientation`` 
    
    :param throatOrientation: 
    :type throatOrientation: :py:class:`NXOpen.CartesianCoordinateSystem` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WearPlateLocatorsParent: WearPlateLocParentBuilder = ...
    """
    Returns  the wear plate and locator parent builder of the rotor.  
    
    <hr>
    
    Getter Method
    
    Signature ``WearPlateLocatorsParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.WearPlateLocParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: RotorBuilder = ...  # unknown typename


class AddSurfBuilderMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddSurfBuilderMethods():
    """
    Settings for the type of addendum surface being created. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sectional", "Sweep section around tangency curve."
       "CurveMesh", "Modeling curve mesh."
       "ChannelTunnelCap", "To close an end cap."
       "MultiFaceBlend", "Face blend between sets of walls."
       "WallsOnly", "Produces just the walls, no blend."
       "DiskFaceBlend", "Disk type face blend."
       "SphereFaceBlend", "Spherical type face blend."
    """
    Sectional = 0  # AddSurfBuilderMethodsMemberType
    CurveMesh = 1  # AddSurfBuilderMethodsMemberType
    ChannelTunnelCap = 2  # AddSurfBuilderMethodsMemberType
    MultiFaceBlend = 3  # AddSurfBuilderMethodsMemberType
    WallsOnly = 4  # AddSurfBuilderMethodsMemberType
    DiskFaceBlend = 5  # AddSurfBuilderMethodsMemberType
    SphereFaceBlend = 6  # AddSurfBuilderMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddSurfBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Die.AddSurfBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateAddSurfBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class Methods():
        """
        Settings for the type of addendum surface being created. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sectional", "Sweep section around tangency curve."
           "CurveMesh", "Modeling curve mesh."
           "ChannelTunnelCap", "To close an end cap."
           "MultiFaceBlend", "Face blend between sets of walls."
           "WallsOnly", "Produces just the walls, no blend."
           "DiskFaceBlend", "Disk type face blend."
           "SphereFaceBlend", "Spherical type face blend."
        """
        Sectional = 0  # AddSurfBuilderMethodsMemberType
        CurveMesh = 1  # AddSurfBuilderMethodsMemberType
        ChannelTunnelCap = 2  # AddSurfBuilderMethodsMemberType
        MultiFaceBlend = 3  # AddSurfBuilderMethodsMemberType
        WallsOnly = 4  # AddSurfBuilderMethodsMemberType
        DiskFaceBlend = 5  # AddSurfBuilderMethodsMemberType
        SphereFaceBlend = 6  # AddSurfBuilderMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateDefaultSpine(self) -> None:
        """
        Creates a smoothed spine curve from the forming boundary using the spine radius value 
        
        Signature ``CreateDefaultSpine()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    Associative: bool = ...
    """
    Returns or sets  the flag that indicates during creation if a feature is to be created or just the sheet body,
    true indicates a feature will be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ConcaveCornerRadius: NXOpen.Expression = ...
    """
    Returns  the concave corner radius value 
    
    <hr>
    
    Getter Method
    
    Signature ``ConcaveCornerRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Limits: DieLimitsBuilder = ...
    """
    Returns  the limits to control the span of the addendum 
    
    <hr>
    
    Getter Method
    
    Signature ``Limits`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLimitsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Method: AddSurfBuilderMethods = ...
    """
    Returns or sets  the addendum surface output method.  
    
    <hr>
    
    Getter Method
    
    Signature ``Method`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.AddSurfBuilderMethods` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Method`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.AddSurfBuilderMethods` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RefPoint: NXOpen.Point = ...
    """
    Returns or sets  the keep point for trimming.  
    
    <hr>
    
    Getter Method
    
    Signature ``RefPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RefPoint`` 
    
    :param point0: 
    :type point0: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectSection: NXOpen.SelectNXObjectList = ...
    """
    Returns  the addendum section feature to define the shape of the addendum surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Sewn: bool = ...
    """
    Returns or sets  the flag that indicates whether the faces of the addendum sheet body will be sewn into one sheet body
    or individual sheet bodies for each face will be output.  
    
    True indicates one sewn sheet body will be output. 
    
    <hr>
    
    Getter Method
    
    Signature ``Sewn`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Sewn`` 
    
    :param sewn: 
    :type sewn: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Spine: NXOpen.ScCollector = ...
    """
    Returns  the spine string, which determines the orientation of the sample planes 
    
    <hr>
    
    Getter Method
    
    Signature ``Spine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SpineRadius: float = ...
    """
    Returns or sets  the spine radius, used by :py:meth:`NXOpen.Die.AddSurfBuilder.CreateDefaultSpine` 
    
    <hr>
    
    Getter Method
    
    Signature ``SpineRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpineRadius`` 
    
    :param spineRadius: 
    :type spineRadius: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TrimBound: NXOpen.ScCollector = ...
    """
    Returns  the trimming boundary for the addendum surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimBound`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: AddSurfBuilder = ...  # unknown typename


class FillBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents an Area Fill feature   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.Fill`
    
    .. versionadded:: NX4.0.0
    """
    
    def SetFillShape(self, bodies: 'list[NXOpen.Body]') -> None:
        """
        Sets the fill shape of the area fill 
        
        Signature ``SetFillShape(bodies)`` 
        
        :param bodies:  bodies  
        :type bodies: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetFillShape(self) -> 'list[NXOpen.Body]':
        """
        Gets the fill shape of the area fill  
        
        Signature ``GetFillShape()`` 
        
        :returns:  bodies  
        :rtype: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetRegionBounds(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the region bounds of the area fill 
        
        Signature ``SetRegionBounds(direction, profileEntries)`` 
        
        :param direction:  Profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  profile entries  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetRegionBounds(self) -> tuple:
        """
        Gets the region bounds of the area fill  
        
        Signature ``GetRegionBounds()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   profile entries direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance of the area fill 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CopyAndMirror: bool = ...
    """
    Returns or sets  the copy and mirror setting of the area fill 
    
    <hr>
    
    Getter Method
    
    Signature ``CopyAndMirror`` 
    
    :returns:  = true - original sheet body will be copied in its current
    position and a copy will also be mirrored.  the two
    sheet bodies will be sewn together on output
    = false - only mirrored copy will be produced  
    :rtype: bool 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CopyAndMirror`` 
    
    :param copyAndMirror:  = true - original sheet body will be copied in its current                                                     position and a copy will also be mirrored.  the two                                                     sheet bodies will be sewn together on output                                            = false - only mirrored copy will be produced  
    :type copyAndMirror: bool 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance of the area fill 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FillForAddendum: bool = ...
    """
    Returns or sets  the fill for addendum setting of the area fill 
    
    <hr>
    
    Getter Method
    
    Signature ``FillForAddendum`` 
    
    :returns:  = true - area fill is for addendum and will be called 
    DIE_ADDENDUM_FILL  
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FillForAddendum`` 
    
    :param fillForAddendum:  = true - area fill is for addendum and will be called                                                       DIE_ADDENDUM_FILL  
    :type fillForAddendum: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MirrorPlane: NXOpen.ISurface = ...
    """
    Returns or sets  the plane to mirror the area fill about 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorPlane`` 
    
    :param mirrorPlane: 
    :type mirrorPlane: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.1
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PointInRegion: NXOpen.Point = ...
    """
    Returns or sets  the point in region of the area fill 
    
    <hr>
    
    Getter Method
    
    Signature ``PointInRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``PointInRegion`` 
    
    :param pointInRegion: 
    :type pointInRegion: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TippedProduct: NXOpen.Features.Feature = ...
    """
    Returns or sets  the tipped product of the area fill 
    
    <hr>
    
    Getter Method
    
    Signature ``TippedProduct`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TippedProduct`` 
    
    :param tippedProduct: 
    :type tippedProduct: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: FillBuilder = ...  # unknown typename


class DieLocationBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DieLocationBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Die.DieLocationBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DieLocationBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Die.DieLocationBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DieLocationBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Die.DieLocationBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DieLocationBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Die.DieLocationBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieLocationBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieLocationBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DieLocationBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DieLocationBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DieLocationBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Die.DieLocationBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DieLocationBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Die.DieLocationBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DieLocationBuilder, object2: DieLocationBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Die.DieLocationBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Die.DieLocationBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DieLocationBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Die.DieLocationBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DieLocationBuilderList = ...  # unknown typename


class DieBuildStatusOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBuildStatusOption():
    """
    Settings for the build status of the die design sub features. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Indeterminant", "Build status could not be determined since sub feature is not active."
       "Unknown", "Build status is unknown since sub feature has not been built yet."
       "Fail", "Sub feature build has failed."
       "Valid", "Sub feature has built successfully."
    """
    Indeterminant = 0  # DieBuildStatusOptionMemberType
    Unknown = 1  # DieBuildStatusOptionMemberType
    Fail = 2  # DieBuildStatusOptionMemberType
    Valid = 3  # DieBuildStatusOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DiePlaneBuilderPlaneTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DiePlaneBuilderPlaneType():
    """
    the options available for defining the plane 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Selection", "Select the plane to be used."
       "Plane", "Define the plane to be used."
       "CoordinateSystem", "Define a coordinate system to specify the plane."
    """
    Selection = 0  # DiePlaneBuilderPlaneTypeMemberType
    Plane = 1  # DiePlaneBuilderPlaneTypeMemberType
    CoordinateSystem = 2  # DiePlaneBuilderPlaneTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DiePlaneBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Die.DiePlaneBuilder`.  
    
    The Die Plane is
    a helper to the main Die Design feature to specify the plane, such as the
    base plane or end planes. If a coordinate system is specified, then the
    XY plane of the coordinate system will be used.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateDiePlane`
    
    .. versionadded:: NX6.0.0
    """
    
    class PlaneType():
        """
        the options available for defining the plane 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Selection", "Select the plane to be used."
           "Plane", "Define the plane to be used."
           "CoordinateSystem", "Define a coordinate system to specify the plane."
        """
        Selection = 0  # DiePlaneBuilderPlaneTypeMemberType
        Plane = 1  # DiePlaneBuilderPlaneTypeMemberType
        CoordinateSystem = 2  # DiePlaneBuilderPlaneTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CoordinateSystemMatrix: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the coordinate system matrix 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystemMatrix`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystemMatrix`` 
    
    :param coordinateSystemMatrix: 
    :type coordinateSystemMatrix: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CoordinateSystemOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the coordinate system origin 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystemOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystemOrigin`` 
    
    :param coordinateSystemOrigin: 
    :type coordinateSystemOrigin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    InputType: DiePlaneBuilderPlaneType = ...
    """
    Returns or sets  the type of input that defined the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``InputType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilderPlaneType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InputType`` 
    
    :param inputType: 
    :type inputType: :py:class:`NXOpen.Die.DiePlaneBuilderPlaneType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReverseSourceDirection: bool = ...
    """
    Returns or sets  the indication if the source's direction should be reversed.  
    
    True indicates the source's direction should be reversed 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseSourceDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseSourceDirection`` 
    
    :param reverseSourceDirection: 
    :type reverseSourceDirection: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SelectPlane: NXOpen.SelectNXObject = ...
    """
    Returns  the selected plane 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SpecifyPlane: NXOpen.Plane = ...
    """
    Returns or sets  the specified plane 
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyPlane`` 
    
    :param specifyPlane: 
    :type specifyPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: DiePlaneBuilder = ...  # unknown typename


class ClearanceBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ClearanceBuilderTypes():
    """
    Identifies which clearance type is being created in the casting. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Gage", "Clearance will be provided encompassing gage solids."
       "Gripper", "Clearance will be provided encompassing gripper, or transfer, machinery solids."
       "Lifter", "Clearance will be provided encompassing interior casting lifting solids."
    """
    Gage = 0  # ClearanceBuilderTypesMemberType
    Gripper = 1  # ClearanceBuilderTypesMemberType
    Lifter = 2  # ClearanceBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ClearanceBuilderClearanceGeometryTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ClearanceBuilderClearanceGeometryTypes():
    """
    Identifies which type of input defines the clearance. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Solid", "The input is solids."
       "Section", "The input is closed profiles."
    """
    Solid = 0  # ClearanceBuilderClearanceGeometryTypesMemberType
    Section = 1  # ClearanceBuilderClearanceGeometryTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ClearanceBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a builder that is used to create or edit a :py:class:`NXOpen.Die.Clearance` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateClearanceBuilder`
    
    Default values.
    
    ======================  ========================================
    Property                Value
    ======================  ========================================
    ClearanceGeometryType   Solid 
    ----------------------  ----------------------------------------
    Distance.Value          0 (millimeters part), 0 (inches part) 
    ----------------------  ----------------------------------------
    Offset.Value            5 (millimeters part), 0.2 (inches part) 
    ======================  ========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Identifies which clearance type is being created in the casting. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Gage", "Clearance will be provided encompassing gage solids."
           "Gripper", "Clearance will be provided encompassing gripper, or transfer, machinery solids."
           "Lifter", "Clearance will be provided encompassing interior casting lifting solids."
        """
        Gage = 0  # ClearanceBuilderTypesMemberType
        Gripper = 1  # ClearanceBuilderTypesMemberType
        Lifter = 2  # ClearanceBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ClearanceGeometryTypes():
        """
        Identifies which type of input defines the clearance. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Solid", "The input is solids."
           "Section", "The input is closed profiles."
        """
        Solid = 0  # ClearanceBuilderClearanceGeometryTypesMemberType
        Section = 1  # ClearanceBuilderClearanceGeometryTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Attributes: DieAttributesBuilder = ...
    """
    Returns  the attribute title, value and face color to apply to the clearance faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``Attributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ClearanceDirection: DieDirectionBuilder = ...
    """
    Returns  the direction to use when extruding to create the clearance areas.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieDirectionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ClearanceGeometryType: ClearanceBuilderClearanceGeometryTypes = ...
    """
    Returns or sets  the input type of the clearance geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceGeometryType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.ClearanceBuilderClearanceGeometryTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClearanceGeometryType`` 
    
    :param clearanceGeometryType: 
    :type clearanceGeometryType: :py:class:`NXOpen.Die.ClearanceBuilderClearanceGeometryTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Distance: NXOpen.Expression = ...
    """
    Returns  the expression containing the distance value for extrusions when defining the clearance area.  
    
    If the value is 0.0, then a value will be generated from the target solid. 
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Geometry: NXOpen.SelectBodyList = ...
    """
    Returns  the solid to use for the basis of the clearance area.  
    
    Only valid when type is :py:class:`NXOpen.Die.ClearanceBuilderClearanceGeometryTypes.Solid <NXOpen.Die.ClearanceBuilderClearanceGeometryTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value to apply to create a clearance area around the solid or closed profile definitions.  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Orientation: DiePlaneBuilder = ...
    """
    Returns  the projection plane for the closed profiles to define the clearance areas.  
    
    Only valid when type is :py:class:`NXOpen.Die.ClearanceBuilderClearanceGeometryTypes.Section <NXOpen.Die.ClearanceBuilderClearanceGeometryTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Section: NXOpen.Section = ...
    """
    Returns  the closed profile sections to use for the basis of the clearance area.  
    
    Only valid when type is :py:class:`NXOpen.Die.ClearanceBuilderClearanceGeometryTypes.Section <NXOpen.Die.ClearanceBuilderClearanceGeometryTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Section`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Target: NXOpen.SelectBody = ...
    """
    Returns  the target solid the clearance will be subtracted from.  
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: ClearanceBuilderTypes = ...
    """
    Returns or sets  the identification of the clearance type (:py:class:`NXOpen.Die.ClearanceBuilderTypes.Gage <NXOpen.Die.ClearanceBuilderTypes>`, :py:class:`NXOpen.Die.ClearanceBuilderTypes.Gripper <NXOpen.Die.ClearanceBuilderTypes>`, 
    or :py:class:`NXOpen.Die.ClearanceBuilderTypes.Lifter <NXOpen.Die.ClearanceBuilderTypes>`) to create in the target solid.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.ClearanceBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.ClearanceBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: ClearanceBuilder = ...  # unknown typename


class FillAreaBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FillAreaBuilderTypes():
    """
    Identifies the area of the casting the fill is targeted for. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BaseFlange", "Fill area is in the base flange area."
       "ProductContact", "Fill area is in the upper deck where relief for the product has been added."
       "ScrapArea", "Remove the volume instead of filling. Targeted for the outer trim line area."
       "UserDefined", "The user must defined all the constraints for the area (inputs from the target are ignored)."
    """
    BaseFlange = 0  # FillAreaBuilderTypesMemberType
    ProductContact = 1  # FillAreaBuilderTypesMemberType
    ScrapArea = 2  # FillAreaBuilderTypesMemberType
    UserDefined = 3  # FillAreaBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FillAreaBuilderUpperLimitTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FillAreaBuilderUpperLimitTypes():
    """
    Specifies how the upper limit of the fill area is defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sheet", "Upper limit is defined by a sheet body."
       "Plane", "Upper limit is defined by a plane."
    """
    Sheet = 0  # FillAreaBuilderUpperLimitTypesMemberType
    Plane = 1  # FillAreaBuilderUpperLimitTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FillAreaBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a builder that is used to create or edit a :py:class:`NXOpen.Die.FillArea` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateFillAreaBuilder`
    
    Default values.
    
    =======================  =========================================
    Property                 Value
    =======================  =========================================
    LowerLimitOffset.Value   1 (millimeters part), 0.04 (inches part) 
    -----------------------  -----------------------------------------
    UpperLimitType           Sheet 
    =======================  =========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Identifies the area of the casting the fill is targeted for. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BaseFlange", "Fill area is in the base flange area."
           "ProductContact", "Fill area is in the upper deck where relief for the product has been added."
           "ScrapArea", "Remove the volume instead of filling. Targeted for the outer trim line area."
           "UserDefined", "The user must defined all the constraints for the area (inputs from the target are ignored)."
        """
        BaseFlange = 0  # FillAreaBuilderTypesMemberType
        ProductContact = 1  # FillAreaBuilderTypesMemberType
        ScrapArea = 2  # FillAreaBuilderTypesMemberType
        UserDefined = 3  # FillAreaBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class UpperLimitTypes():
        """
        Specifies how the upper limit of the fill area is defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sheet", "Upper limit is defined by a sheet body."
           "Plane", "Upper limit is defined by a plane."
        """
        Sheet = 0  # FillAreaBuilderUpperLimitTypesMemberType
        Plane = 1  # FillAreaBuilderUpperLimitTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseOrientation: DiePlaneBuilder = ...
    """
    Returns  the plane defining the base of the target solid.  
    
    Used to orient the direction of the build and the trims for the fill area. May be supplied by the selected target. 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Boundary: NXOpen.Section = ...
    """
    Returns  the closed boundary profile that defines the fill area.  
    
    <hr>
    
    Getter Method
    
    Signature ``Boundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LowerLimitOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the lower limit offset used to adjust the lower limit to ensure a boolean.  
    
    A positive value will indicate transforming the limit away from the upper limit. 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimitOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LowerLimitSheet: NXOpen.SelectBody = ...
    """
    Returns  the sheet (such as the inner deck sheet) used to trim the fill area solid.  
    
    This might be a sheet that is interior to the upper deck, but is always defined between the base and the upper limit. 
    Only valid when type is :py:class:`Die.FillAreaBuilderTypes.ProductContact <Die.FillAreaBuilderTypes>` or :py:class:`Die.FillAreaBuilderTypes.UserDefined <Die.FillAreaBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimitSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Target: NXOpen.SelectBody = ...
    """
    Returns  the target solid the fill area will be united with or subtracted from.  
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: FillAreaBuilderTypes = ...
    """
    Returns or sets  the indicator for the type of fill area to build.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.FillAreaBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.FillAreaBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UpperLimitPlane: DiePlaneBuilder = ...
    """
    Returns  the plane used to trim the fill area solid.  
    
    A plane might be used to limit the fill area solid to just the flange of the casting. Only valid when type is :py:class:`Die.FillAreaBuilderUpperLimitTypes.Plane <Die.FillAreaBuilderUpperLimitTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimitPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UpperLimitSheet: NXOpen.SelectBody = ...
    """
    Returns  the sheet (such as the sheet metal) used to trim the fill area solid.  
    
    Only valid when type is :py:class:`Die.FillAreaBuilderUpperLimitTypes.Sheet <Die.FillAreaBuilderUpperLimitTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimitSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UpperLimitType: FillAreaBuilderUpperLimitTypes = ...
    """
    Returns or sets  the value that determines whether the upper limit is defined by a sheet or plane.  
    
    Only valid when type is :py:class:`Die.FillAreaBuilderTypes.ScrapArea <Die.FillAreaBuilderTypes>` 
    or :py:class:`Die.FillAreaBuilderTypes.UserDefined <Die.FillAreaBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimitType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.FillAreaBuilderUpperLimitTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperLimitType`` 
    
    :param upperLimitType: 
    :type upperLimitType: :py:class:`NXOpen.Die.FillAreaBuilderUpperLimitTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: FillAreaBuilder = ...  # unknown typename


class Keyway(NXOpen.Features.BodyFeature):
    """
    Represents a keyway feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.KeywayBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: Keyway = ...  # unknown typename


class ThroatChildBuilderTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ThroatChildBuilderTypeOption():
    """
    Settings for the type of the throat section. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Wipe", "Throat section is built for a wipe operation."
       "Restrike", "Throat section is built for a restrike operation."
    """
    Wipe = 0  # ThroatChildBuilderTypeOptionMemberType
    Restrike = 1  # ThroatChildBuilderTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ThroatChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Throat Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class TypeOption():
        """
        Settings for the type of the throat section. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Wipe", "Throat section is built for a wipe operation."
           "Restrike", "Throat section is built for a restrike operation."
        """
        Wipe = 0  # ThroatChildBuilderTypeOptionMemberType
        Restrike = 1  # ThroatChildBuilderTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetSectionPlacement(self, sectionPlacement: str) -> None:
        """
        Signature ``SetSectionPlacement(sectionPlacement)`` 
        
        :param sectionPlacement: 
        :type sectionPlacement: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetExtensionAttributes(self) -> tuple:
        """
        Gets the extension attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetExtensionAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of extension faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetExtensionAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the extension attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetExtensionAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of extension faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetCavityAttributes(self) -> tuple:
        """
        Gets the cavity attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetCavityAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of cavity faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetCavityAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the cavity attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetCavityAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of cavity faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetExtensionLength(self, extensionLength: str) -> None:
        """
        Signature ``SetExtensionLength(extensionLength)`` 
        
        :param extensionLength: 
        :type extensionLength: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetStepDistance(self, stepDistance: str) -> None:
        """
        Signature ``SetStepDistance(stepDistance)`` 
        
        :param stepDistance: 
        :type stepDistance: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetUpperRadius(self, upperRadius: str) -> None:
        """
        Signature ``SetUpperRadius(upperRadius)`` 
        
        :param upperRadius: 
        :type upperRadius: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetLowerRadius(self, lowerRadius: str) -> None:
        """
        Signature ``SetLowerRadius(lowerRadius)`` 
        
        :param lowerRadius: 
        :type lowerRadius: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetCavityOffset(self, cavityOffset: str) -> None:
        """
        Signature ``SetCavityOffset(cavityOffset)`` 
        
        :param cavityOffset: 
        :type cavityOffset: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetCavityDepth(self, cavityDepth: str) -> None:
        """
        Signature ``SetCavityDepth(cavityDepth)`` 
        
        :param cavityDepth: 
        :type cavityDepth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the throat section.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CavityDepth: NXOpen.Expression = ...
    """
    Returns  the distance measured from the bend profile of the flange to the
    base of the throat.  
    
    The base of the throat is considered to be
    the surface the wear plates are mounted on for guiding and aliging
    the flange steels. The value given must be larger than the
    minimum cavity depth. An expression containg the value.
    Value is used in both the Wipe and Restrike Flange. 
    
    <hr>
    
    Getter Method
    
    Signature ``CavityDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CavityOffset: NXOpen.Expression = ...
    """
    Returns  the offset distance measured from the Throat CSYS to the back
    cavity area of the throat.  
    
    Both positive and negative values may
    given to adjust the cavity to the proper location.
    An expression containg the value.
    Value is used in both the Wipe and Restrike Flange. 
    
    <hr>
    
    Getter Method
    
    Signature ``CavityOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the throat section, if true the throat section will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the throat section, if true input data to the throat section will be displayed,
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExtensionLength: NXOpen.Expression = ...
    """
    Returns  the tangent distance to add to the end of the flange.  
    
    An expression containg the length along the tangent.
    Value is used in both the Wipe and Restrike Flange. 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LowerRadius: NXOpen.Expression = ...
    """
    Returns  the radius to apply to the lower corner of the throat cavity.  
    
    Typically, both the lower and the upper radius will be the
    same. An expression containg the value.
    Value is used in both the Wipe and Restrike Flange. 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Radius: float = ...
    """
    Returns or sets  the radius to be applied at the back of the throat, top and bottom 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Radius`` 
    
    :param radius: 
    :type radius: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SectionPlacement: NXOpen.Expression = ...
    """
    Returns  the throat section placement along the center line, an expression containg the length along the centerline for placement 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Step: float = ...
    """
    Returns or sets  the step to be applied at the end of the tangent extension of the flange 
    
    <hr>
    
    Getter Method
    
    Signature ``Step`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Step`` 
    
    :param step: 
    :type step: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    StepDistance: NXOpen.Expression = ...
    """
    Returns  the step distance to add at the end of the tangent extension.  
    
    The
    step is at a right angle and only applies to the Wipe Flange. An
    expression containg the step distance. 
    
    <hr>
    
    Getter Method
    
    Signature ``StepDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UpperRadius: NXOpen.Expression = ...
    """
    Returns  the radius to apply to the upper corner of the throat cavity.  
    
    An expression containg the value.
    Value is used in both the Wipe and Restrike Flange. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: ThroatChildBuilder = ...  # unknown typename


class DieShoe(NXOpen.Features.BodyFeature):
    """
    Represents a die shoe feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.DieShoeBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: DieShoe = ...  # unknown typename


class HandlingCoreChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Handling Core Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def TranslateCenter(self, translateDist: NXOpen.Vector3d) -> None:
        """
        Translates the center of the die handling core by the specified amount.  
        
        Signature ``TranslateCenter(translateDist)`` 
        
        :param translateDist:  A scaled vector indicating the distance to translate  
        :type translateDist: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the handling core.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Center: NXOpen.ILocation = ...
    """
    Returns or sets  the center of the handling core.  
    
    <hr>
    
    Getter Method
    
    Signature ``Center`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Center`` 
    
    :param center: 
    :type center: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Clearance: float = ...
    """
    Returns or sets  the clearance of the handling core.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Clearance`` 
    
    :param clearance: 
    :type clearance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CoreOrientation: NXOpen.ISurface = ...
    """
    Returns or sets  the core orientation of the handling core.  
    
    <hr>
    
    Getter Method
    
    Signature ``CoreOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CoreOrientation`` 
    
    :param coreOrientation: 
    :type coreOrientation: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Depth: float = ...
    """
    Returns or sets  the depth of the handling core.  
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Depth`` 
    
    :param depth: 
    :type depth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the handling core, if true the handling core will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the handling core, if true input data to the handling core will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Height: float = ...
    """
    Returns or sets  the height of the handling core.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReverseOrientation: bool = ...
    """
    Returns or sets  the value to reverse the orientation of the core plane,
    if true the handling core orientation normal will be reversed,
    if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseOrientation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseOrientation`` 
    
    :param reverseOrientation: 
    :type reverseOrientation: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: float = ...
    """
    Returns or sets  the width of the handling core.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: HandlingCoreChildBuilder = ...  # unknown typename


class WearPlateLocParentBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WearPlateLocParentBuilderPositionType():
    """
    Settings for the positioning of the locator relative to the wear plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", "Position locator to the left of the wear plate."
       "Right", "Position locator to the right of the wear plate."
       "Both", "Position locator on both sides of the wear plate."
       "Neither", "No locators."
    """
    Left = 0  # WearPlateLocParentBuilderPositionTypeMemberType
    Right = 1  # WearPlateLocParentBuilderPositionTypeMemberType
    Both = 2  # WearPlateLocParentBuilderPositionTypeMemberType
    Neither = 3  # WearPlateLocParentBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WearPlateLocParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Wear Plate Locator sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class PositionType():
        """
        Settings for the positioning of the locator relative to the wear plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", "Position locator to the left of the wear plate."
           "Right", "Position locator to the right of the wear plate."
           "Both", "Position locator on both sides of the wear plate."
           "Neither", "No locators."
        """
        Left = 0  # WearPlateLocParentBuilderPositionTypeMemberType
        Right = 1  # WearPlateLocParentBuilderPositionTypeMemberType
        Both = 2  # WearPlateLocParentBuilderPositionTypeMemberType
        Neither = 3  # WearPlateLocParentBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetWearPlateWidth(self, width: str) -> None:
        """
        Signature ``SetWearPlateWidth(width)`` 
        
        :param width:  Expression value  
        :type width: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetWearPlateLength(self, length: str) -> None:
        """
        Signature ``SetWearPlateLength(length)`` 
        
        :param length:  Expression value  
        :type length: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetLocatorWidth(self, width: str) -> None:
        """
        Signature ``SetLocatorWidth(width)`` 
        
        :param width:  Expression value  
        :type width: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetLocatorDepth(self, depth: str) -> None:
        """
        Signature ``SetLocatorDepth(depth)`` 
        
        :param depth:  Expression value  
        :type depth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetRibSupportWidth(self, ribSupportWidth: str) -> None:
        """
        Signature ``SetRibSupportWidth(ribSupportWidth)`` 
        
        :param ribSupportWidth:  Expression value  
        :type ribSupportWidth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPadAttributes(self) -> tuple:
        """
        Gets the pad attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``GetPadAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of pad faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPadAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the pad attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``SetPadAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of pad faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetReliefAttributes(self) -> tuple:
        """
        Gets the relief attributes 
        
        Signature ``GetReliefAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of relief faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetReliefAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the relief attributes 
        
        Signature ``SetReliefAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of relief faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetRecessAttributes(self) -> tuple:
        """
        Gets the recess attributes 
        
        Signature ``GetRecessAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of recess faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetRecessAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the recess attributes 
        
        Signature ``SetRecessAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of recess faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateChild(self) -> WearPlateLocChildBuilder:
        """
        Creates a child wear plate and locator  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.WearPlateLocChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, diewearplatelocchild: WearPlateLocChildBuilder) -> None:
        """
        Deletes a child wear plate and locator 
        
        Signature ``DeleteChild(diewearplatelocchild)`` 
        
        :param diewearplatelocchild: 
        :type diewearplatelocchild: :py:class:`NXOpen.Die.WearPlateLocChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[WearPlateLocChildBuilder]':
        """
        Outputs the children  
        
        Signature ``GetChildren()`` 
        
        :returns:  children  
        :rtype: list of :py:class:`NXOpen.Die.WearPlateLocChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LocatorDepth: NXOpen.Expression = ...
    """
    Returns  the locator depth of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``LocatorDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LocatorPosition: WearPlateLocParentBuilderPositionType = ...
    """
    Returns or sets  the locator position of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``LocatorPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.WearPlateLocParentBuilderPositionType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LocatorPosition`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Die.WearPlateLocParentBuilderPositionType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LocatorWidth: NXOpen.Expression = ...
    """
    Returns  the locator width of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``LocatorWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReverseNormal: int = ...
    """
    Returns or sets  the reverse normal setting of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseNormal`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseNormal`` 
    
    :param reverseNormal: 
    :type reverseNormal: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RibSupportWidth: NXOpen.Expression = ...
    """
    Returns  the wear plate rib support width of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``RibSupportWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WearPlateLength: NXOpen.Expression = ...
    """
    Returns  the wear plate length of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``WearPlateLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WearPlateWidth: NXOpen.Expression = ...
    """
    Returns  the wear plate width of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``WearPlateWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: WearPlateLocParentBuilder = ...  # unknown typename


class DrawBeadSegmentBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[DrawBeadSegmentBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: DrawBeadSegmentBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: DrawBeadSegmentBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> DrawBeadSegmentBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DrawBeadSegmentBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: DrawBeadSegmentBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[DrawBeadSegmentBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[DrawBeadSegmentBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: DrawBeadSegmentBuilder, object2: DrawBeadSegmentBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: DrawBeadSegmentBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DrawBeadSegmentBuilderList = ...  # unknown typename


class PressureSystemParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Pressure System Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def CreateChild(self) -> PressureSystemChildBuilder:
        """
        Creates a child pressure system.  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.PressureSystemChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, diepressuresystemchild: PressureSystemChildBuilder) -> None:
        """
        Deletes a child pressure system.  
        
        Signature ``DeleteChild(diepressuresystemchild)`` 
        
        :param diepressuresystemchild: 
        :type diepressuresystemchild: :py:class:`NXOpen.Die.PressureSystemChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[PressureSystemChildBuilder]':
        """
        Outputs the child pressure systems.  
        
        Signature ``GetChildren()`` 
        
        :returns:  The child pressure systems.  
        :rtype: list of :py:class:`NXOpen.Die.PressureSystemChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Clearance: float = ...
    """
    Returns or sets  the clearance of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Clearance`` 
    
    :param clearance: 
    :type clearance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of pressure systems, if true the pressure systems will be built into the model, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Diameter: float = ...
    """
    Returns or sets  the diameter of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Diameter`` 
    
    :param diameter: 
    :type diameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of pressure systems, if true input data to the pressure systems will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Height: float = ...
    """
    Returns or sets  the height of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    XCount: int = ...
    """
    Returns or sets  the x count of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``XCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``XCount`` 
    
    :param xCount: 
    :type xCount: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    XDistance: float = ...
    """
    Returns or sets  the x distance of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``XDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``XDistance`` 
    
    :param xDistance: 
    :type xDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    XOffset: float = ...
    """
    Returns or sets  the x offset of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``XOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``XOffset`` 
    
    :param xOffset: 
    :type xOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    YCount: int = ...
    """
    Returns or sets  the y count of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``YCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``YCount`` 
    
    :param yCount: 
    :type yCount: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    YDistance: float = ...
    """
    Returns or sets  the y distance of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``YDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``YDistance`` 
    
    :param yDistance: 
    :type yDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    YOffset: float = ...
    """
    Returns or sets  the y offset of pressure systems.  
    
    <hr>
    
    Getter Method
    
    Signature ``YOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``YOffset`` 
    
    :param yOffset: 
    :type yOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: PressureSystemParentBuilder = ...  # unknown typename


class DieSimCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Die Simulation - Press Models   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindActivePressModel(self) -> PressModel:
        """
        Finds the active press model, if any, in the part's assembly structure  
        
        Signature ``FindActivePressModel()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.PressModel` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    


class DrawBeadBuilderMaleBeadPositionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadBuilderMaleBeadPositionTypes():
    """
    Identifes which casting the male bead is created in. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Upper", "Attach the male bead to the upper die casting."
       "Lower", "Attach the male bead to the lower die casting."
    """
    Upper = 0  # DrawBeadBuilderMaleBeadPositionTypesMemberType
    Lower = 1  # DrawBeadBuilderMaleBeadPositionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadBuilderProjectionDirectionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadBuilderProjectionDirectionTypes():
    """
    Identifes how the centerline should be projected to the placement face during processing. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DrawDirection", "Project the centerline along the draw direction vector."
       "NormalToPlacementFace", "Project the centerline along the placement face normal."
    """
    DrawDirection = 0  # DrawBeadBuilderProjectionDirectionTypesMemberType
    NormalToPlacementFace = 1  # DrawBeadBuilderProjectionDirectionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadBuilderOrientationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadBuilderOrientationTypes():
    """
    Identifies the orientation of the base parameters to the sheet metal. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Orthogonal", "The width and angle parameters are orthogonal, or normal, to the sheet metal normal at the section location."
       "Vertical", "The width and angle parameters are oriented along the draw direction at the section location."
    """
    Orthogonal = 0  # DrawBeadBuilderOrientationTypesMemberType
    Vertical = 1  # DrawBeadBuilderOrientationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadBuilderTransitionDefinitionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadBuilderTransitionDefinitionTypes():
    """
    Specifies how the transition area should be determined from segment to segment within a single bead. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "Shorten the bead segment that has the lowest height."
       "Manual", "User specified start and end segments so transition areas are fully defined."
    """
    Automatic = 0  # DrawBeadBuilderTransitionDefinitionTypesMemberType
    Manual = 1  # DrawBeadBuilderTransitionDefinitionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadBuilderFemaleDepthTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadBuilderFemaleDepthTypes():
    """
    Specifies how the female depth is calculated or defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Derived", "The female depth is derived from the male bead (Max Male Depth + Constant)."
       "Constant", "The female depth is a user specified constant."
    """
    Derived = 0  # DrawBeadBuilderFemaleDepthTypesMemberType
    Constant = 1  # DrawBeadBuilderFemaleDepthTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadBuilderFemaleWidthTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadBuilderFemaleWidthTypes():
    """
    Specifies how the feamle width is calcualted or defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Derived", "The female width is derived from the male (Male Width + 2(Sheet Metal Thickness + Clearance))."
       "Constant", "The female width is a user specified constant."
    """
    Derived = 0  # DrawBeadBuilderFemaleWidthTypesMemberType
    Constant = 1  # DrawBeadBuilderFemaleWidthTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadBuilderOutputTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadBuilderOutputTypes():
    """
    Specifies what type of output is desired for the feature creation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Creates a small sphere on the centerline."
       "Male", "Creates the male bead only."
       "PlusFemale", "Creates the male and female bead."
       "PlusSheetMetal", "Creates the male, female and sheet metal bead."
    """
    NotSet = 0  # DrawBeadBuilderOutputTypesMemberType
    Male = 1  # DrawBeadBuilderOutputTypesMemberType
    PlusFemale = 2  # DrawBeadBuilderOutputTypesMemberType
    PlusSheetMetal = 3  # DrawBeadBuilderOutputTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadBuilderOrientSectionToDrawTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadBuilderOrientSectionToDrawTypes():
    """
    Specifies if the segment height section parameter should be oriented to the draw direction or the sheet metal normal at the section location. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DrawDirection", "Orient height parameter to the draw direction."
       "SheetMetalNormal", "Orient height parameter to the sheet metal normal at the section location."
    """
    DrawDirection = 0  # DrawBeadBuilderOrientSectionToDrawTypesMemberType
    SheetMetalNormal = 1  # DrawBeadBuilderOrientSectionToDrawTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a builder that is used to create or edit a :py:class:`NXOpen.Die.DrawBead` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateDrawBeadBuilder`
    
    Default values.
    
    ==================================  =============================================
    Property                            Value
    ==================================  =============================================
    BaseOrientation                     Vertical 
    ----------------------------------  ---------------------------------------------
    BuildEndTaper                       1 
    ----------------------------------  ---------------------------------------------
    BuildStartTaper                     1 
    ----------------------------------  ---------------------------------------------
    CenterlineProjection                DrawDirection 
    ----------------------------------  ---------------------------------------------
    Clearance.Value                     0.2 (millimeters part), 0.008 (inches part) 
    ----------------------------------  ---------------------------------------------
    EndPoint.InputType                  SelectLocation 
    ----------------------------------  ---------------------------------------------
    EndTaper.TaperRadius.Value          90 (millimeters part), 3.8 (inches part) 
    ----------------------------------  ---------------------------------------------
    EndTaper.TaperType                  Spherical 
    ----------------------------------  ---------------------------------------------
    EndTaper.TaperWashoutHeight.Value   10 (millimeters part), 0.4 (inches part) 
    ----------------------------------  ---------------------------------------------
    EndTaper.TaperWashoutLength.Value   50 (millimeters part), 2 (inches part) 
    ----------------------------------  ---------------------------------------------
    FemaleDepthType                     Derived 
    ----------------------------------  ---------------------------------------------
    FemaleDepthValue.Value              11 (millimeters part), 0.43 (inches part) 
    ----------------------------------  ---------------------------------------------
    FemaleWidthType                     Derived 
    ----------------------------------  ---------------------------------------------
    FemaleWidthValue.Value              12.4 (millimeters part), 0.488 (inches part) 
    ----------------------------------  ---------------------------------------------
    GenerateHeightCurve                 0 
    ----------------------------------  ---------------------------------------------
    MachineOffset                       0 
    ----------------------------------  ---------------------------------------------
    MaleBeadPosition                    Upper 
    ----------------------------------  ---------------------------------------------
    MetalThickness.Value                1 (millimeters part), 0.04 (inches part) 
    ----------------------------------  ---------------------------------------------
    OrientSectionToDraw                 DrawDirection 
    ----------------------------------  ---------------------------------------------
    Output                              Male 
    ----------------------------------  ---------------------------------------------
    TaperBead                           0 
    ----------------------------------  ---------------------------------------------
    TransitionDefinition                Automatic 
    ==================================  =============================================
    
    .. versionadded:: NX7.5.0
    """
    
    class MaleBeadPositionTypes():
        """
        Identifes which casting the male bead is created in. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Upper", "Attach the male bead to the upper die casting."
           "Lower", "Attach the male bead to the lower die casting."
        """
        Upper = 0  # DrawBeadBuilderMaleBeadPositionTypesMemberType
        Lower = 1  # DrawBeadBuilderMaleBeadPositionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProjectionDirectionTypes():
        """
        Identifes how the centerline should be projected to the placement face during processing. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DrawDirection", "Project the centerline along the draw direction vector."
           "NormalToPlacementFace", "Project the centerline along the placement face normal."
        """
        DrawDirection = 0  # DrawBeadBuilderProjectionDirectionTypesMemberType
        NormalToPlacementFace = 1  # DrawBeadBuilderProjectionDirectionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientationTypes():
        """
        Identifies the orientation of the base parameters to the sheet metal. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Orthogonal", "The width and angle parameters are orthogonal, or normal, to the sheet metal normal at the section location."
           "Vertical", "The width and angle parameters are oriented along the draw direction at the section location."
        """
        Orthogonal = 0  # DrawBeadBuilderOrientationTypesMemberType
        Vertical = 1  # DrawBeadBuilderOrientationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TransitionDefinitionTypes():
        """
        Specifies how the transition area should be determined from segment to segment within a single bead. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "Shorten the bead segment that has the lowest height."
           "Manual", "User specified start and end segments so transition areas are fully defined."
        """
        Automatic = 0  # DrawBeadBuilderTransitionDefinitionTypesMemberType
        Manual = 1  # DrawBeadBuilderTransitionDefinitionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FemaleDepthTypes():
        """
        Specifies how the female depth is calculated or defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Derived", "The female depth is derived from the male bead (Max Male Depth + Constant)."
           "Constant", "The female depth is a user specified constant."
        """
        Derived = 0  # DrawBeadBuilderFemaleDepthTypesMemberType
        Constant = 1  # DrawBeadBuilderFemaleDepthTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FemaleWidthTypes():
        """
        Specifies how the feamle width is calcualted or defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Derived", "The female width is derived from the male (Male Width + 2(Sheet Metal Thickness + Clearance))."
           "Constant", "The female width is a user specified constant."
        """
        Derived = 0  # DrawBeadBuilderFemaleWidthTypesMemberType
        Constant = 1  # DrawBeadBuilderFemaleWidthTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OutputTypes():
        """
        Specifies what type of output is desired for the feature creation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Creates a small sphere on the centerline."
           "Male", "Creates the male bead only."
           "PlusFemale", "Creates the male and female bead."
           "PlusSheetMetal", "Creates the male, female and sheet metal bead."
        """
        NotSet = 0  # DrawBeadBuilderOutputTypesMemberType
        Male = 1  # DrawBeadBuilderOutputTypesMemberType
        PlusFemale = 2  # DrawBeadBuilderOutputTypesMemberType
        PlusSheetMetal = 3  # DrawBeadBuilderOutputTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OrientSectionToDrawTypes():
        """
        Specifies if the segment height section parameter should be oriented to the draw direction or the sheet metal normal at the section location. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DrawDirection", "Orient height parameter to the draw direction."
           "SheetMetalNormal", "Orient height parameter to the sheet metal normal at the section location."
        """
        DrawDirection = 0  # DrawBeadBuilderOrientSectionToDrawTypesMemberType
        SheetMetalNormal = 1  # DrawBeadBuilderOrientSectionToDrawTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateSegmentsFromCenterlineCurves(self) -> None:
        """
        For each curve of the centerline, create a bead segment.  
        
        Signature ``CreateSegmentsFromCenterlineCurves()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateDrawBeadSegment(self) -> DrawBeadSegmentBuilder:
        """
        Creates a :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` builder.  
        
        Signature ``CreateDrawBeadSegment()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetDefaultDrawDirection(self) -> None:
        """
        Set the default draw direction to the -Z direction of the work coordinate system.  
        
        Signature ``SetDefaultDrawDirection()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetMoreDetails(self, strings: 'list[str]') -> None:
        """
        Set the detailed description strings of the draw bead.  
        
        Signature ``SetMoreDetails(strings)`` 
        
        :param strings:  Array of detail strings.  
        :type strings: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetMoreDetails(self) -> 'list[str]':
        """
        Get the detailed description strings of the draw bead.  
        
        Signature ``GetMoreDetails()`` 
        
        :returns:  Array of detail strings.  
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BaseOrientation: DrawBeadBuilderOrientationTypes = ...
    """
    Returns or sets  the orientation used to construct the sections representing the bead shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadBuilderOrientationTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseOrientation`` 
    
    :param baseOrientation: 
    :type baseOrientation: :py:class:`NXOpen.Die.DrawBeadBuilderOrientationTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BuildEndTaper: bool = ...
    """
    Returns or sets  the indication if the taper at the end of the bead should be built.  
    
    True indicates that the taper at the end of the bead should be created. 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildEndTaper`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BuildEndTaper`` 
    
    :param buildEndTaper: 
    :type buildEndTaper: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BuildStartTaper: bool = ...
    """
    Returns or sets  the indication if the taper at the start of the bead should be built.  
    
    True indicates that the taper at the start of the bead should be created. 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStartTaper`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BuildStartTaper`` 
    
    :param buildStartTaper: 
    :type buildStartTaper: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Centerline: NXOpen.Section = ...
    """
    Returns  the section containing the centerline of the bead.  
    
    <hr>
    
    Getter Method
    
    Signature ``Centerline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CenterlineProjection: DrawBeadBuilderProjectionDirectionTypes = ...
    """
    Returns or sets  the projection method to apply to the centerline to place it on the sewn faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineProjection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadBuilderProjectionDirectionTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineProjection`` 
    
    :param centerlineProjection: 
    :type centerlineProjection: :py:class:`NXOpen.Die.DrawBeadBuilderProjectionDirectionTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Clearance: NXOpen.Expression = ...
    """
    Returns  the expression containing the clearance value between the male and female bead sheets.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DrawDirection: DieDirectionBuilder = ...
    """
    Returns  the draw direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieDirectionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EndPoint: DieLocationBuilder = ...
    """
    Returns  the point location defining the end of the centerline.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLocationBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EndTaper: DrawBeadTaperBuilder = ...
    """
    Returns  the taper definition at the end of the bead.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndTaper`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadTaperBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FemaleDepthType: DrawBeadBuilderFemaleDepthTypes = ...
    """
    Returns or sets  the method used to calculate the female depth.  
    
    Only valid when taper bead is false. 
    
    <hr>
    
    Getter Method
    
    Signature ``FemaleDepthType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadBuilderFemaleDepthTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FemaleDepthType`` 
    
    :param femaleDepthType: 
    :type femaleDepthType: :py:class:`NXOpen.Die.DrawBeadBuilderFemaleDepthTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    FemaleDepthValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the female depth value.  
    
    Only valid when taper bead is false and type is :py:class:`NXOpen.Die.DrawBeadBuilderFemaleDepthTypes.Constant <NXOpen.Die.DrawBeadBuilderFemaleDepthTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``FemaleDepthValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FemaleFaceAttribute: DieAttributesBuilder = ...
    """
    Returns  the attribute definition to be applied to the faces of the female bead sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``FemaleFaceAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FemaleSheetAttribute: DieAttributesBuilder = ...
    """
    Returns  the attribute definition to be applied to the female bead sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``FemaleSheetAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FemaleWidthType: DrawBeadBuilderFemaleWidthTypes = ...
    """
    Returns or sets  the method used to calculate the female width.  
    
    Changing this will affect all segments. Only valid when taper bead is false. 
    
    <hr>
    
    Getter Method
    
    Signature ``FemaleWidthType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadBuilderFemaleWidthTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FemaleWidthType`` 
    
    :param femaleWidthType: 
    :type femaleWidthType: :py:class:`NXOpen.Die.DrawBeadBuilderFemaleWidthTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    FemaleWidthValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the female width value.  
    
    Only valid when taper bead is false and type is :py:class:`NXOpen.Die.DrawBeadBuilderFemaleWidthTypes.Constant <NXOpen.Die.DrawBeadBuilderFemaleWidthTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``FemaleWidthValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    GenerateHeightCurve: bool = ...
    """
    Returns or sets  the indication if the height curve should be generated.  
    
    True if the height curve should be generated and kept. 
    
    <hr>
    
    Getter Method
    
    Signature ``GenerateHeightCurve`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GenerateHeightCurve`` 
    
    :param generateHeightCurve: 
    :type generateHeightCurve: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MachineOffset: bool = ...
    """
    Returns or sets  the indication if the male and female output bodies are to be built with machining.  
    
    Only valid when taper bead is true. 
    
    <hr>
    
    Getter Method
    
    Signature ``MachineOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MachineOffset`` 
    
    :param machineOffset: 
    :type machineOffset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MachiningOffsetTitleAttribute: DieAttributesBuilder = ...
    """
    Returns  the title of the real attribute to be applied to the male and female bodies.  
    
    The value of the attribute specifies the machining offset value to be applied. The value is derived during feature construction. 
    
    <hr>
    
    Getter Method
    
    Signature ``MachiningOffsetTitleAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleBeadPosition: DrawBeadBuilderMaleBeadPositionTypes = ...
    """
    Returns or sets  the casting in which to create the male bead.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleBeadPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadBuilderMaleBeadPositionTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaleBeadPosition`` 
    
    :param maleBeadPosition: 
    :type maleBeadPosition: :py:class:`NXOpen.Die.DrawBeadBuilderMaleBeadPositionTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaleFaceAttribute: DieAttributesBuilder = ...
    """
    Returns  the attribute definition to be applied to the faces of the male bead sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleFaceAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleSheetAttribute: DieAttributesBuilder = ...
    """
    Returns  the attribute definition to be applied to the male bead sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleSheetAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MetalThickness: NXOpen.Expression = ...
    """
    Returns  the expression containing the sheet metal thickness value.  
    
    <hr>
    
    Getter Method
    
    Signature ``MetalThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OrientSectionToDraw: DrawBeadBuilderOrientSectionToDrawTypes = ...
    """
    Returns or sets  the method used to orient the section dimensions.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientSectionToDraw`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadBuilderOrientSectionToDrawTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientSectionToDraw`` 
    
    :param orientSectionToDraw: 
    :type orientSectionToDraw: :py:class:`NXOpen.Die.DrawBeadBuilderOrientSectionToDrawTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Output: DrawBeadBuilderOutputTypes = ...
    """
    Returns or sets  the output to be constructed by the draw bead feature.  
    
    <hr>
    
    Getter Method
    
    Signature ``Output`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadBuilderOutputTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Output`` 
    
    :param output: 
    :type output: :py:class:`NXOpen.Die.DrawBeadBuilderOutputTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlacementFace: NXOpen.ScCollector = ...
    """
    Returns  the collector containing faces (which will sew together) that identifies the surface shape the bead is attached too.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReferenceDirection: bool = ...
    """
    Returns or sets  the indication if the "Left" direction for section orientation should be reversed from the default direction.  
    
    The default direction is determined by the cross of the centerline tangency and the draw direction. True indicates that the default calculation should be reversed. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDirection`` 
    
    :param referenceDirection: 
    :type referenceDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReverseMetalThickness: bool = ...
    """
    Returns or sets  the indication if the thickness of the sheet metal should be the same as the sewn face normals.  
    
    True indicates that the sheet will be thickened in the same direction as the sewn face normals. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseMetalThickness`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseMetalThickness`` 
    
    :param reverseMetalThickness: 
    :type reverseMetalThickness: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SegmentList: DrawBeadSegmentBuilderList = ...
    """
    Returns  the list of :py:class:`NXOpen.Die.DrawBeadSegmentBuilder` defining the bead sections along the centerline.  
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadSegmentBuilderList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SheetMetalFaceAttribute: DieAttributesBuilder = ...
    """
    Returns  the attribute definition to be applied to the faces of the sheet metal sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetalFaceAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SheetMetalSheetAttribute: DieAttributesBuilder = ...
    """
    Returns  the attribute definition to be applied to the sheet metal sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetalSheetAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartPoint: DieLocationBuilder = ...
    """
    Returns  the point location defining the start of the centerline.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLocationBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartTaper: DrawBeadTaperBuilder = ...
    """
    Returns  the taper definition at the start of the bead.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartTaper`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadTaperBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TaperBead: bool = ...
    """
    Returns or sets  the indication if the bead should allow taper to be added to the side walls.  
    
    Changing this will affect all segments and may affect the transition definition and output. 
    
    <hr>
    
    Getter Method
    
    Signature ``TaperBead`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaperBead`` 
    
    :param taperBead: 
    :type taperBead: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TransitionDefinition: DrawBeadBuilderTransitionDefinitionTypes = ...
    """
    Returns or sets  the method used to build the transition between segments.  
    
    Changing this will affect all segments. 
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadBuilderTransitionDefinitionTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransitionDefinition`` 
    
    :param transitionDefinition: 
    :type transitionDefinition: :py:class:`NXOpen.Die.DrawBeadBuilderTransitionDefinitionTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: DrawBeadBuilder = ...  # unknown typename


class SpringbackCompensation(NXOpen.Features.BodyFeature):
    """
    Represents a springback compensation feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.SpringbackCompensationBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: SpringbackCompensation = ...  # unknown typename


class DieAssistantFlangeProfileTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieAssistantFlangeProfileType():
    """
    Settings for the flange type. 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Wipe", "Wipe flange steel."
       "FormAndRestrike", "Form and restrike flange steel."
    """
    Wipe = 0  # DieAssistantFlangeProfileTypeMemberType
    FormAndRestrike = 1  # DieAssistantFlangeProfileTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UncutRegionsBuilderResultsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UncutRegionsBuilderResultsType():
    """
    Indicates which side of curve to check 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OneSide", "Find uncut regions on one side only"
       "BothSides", "Find uncut regions on both sides of curve"
    """
    OneSide = 0  # UncutRegionsBuilderResultsTypeMemberType
    BothSides = 1  # UncutRegionsBuilderResultsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UncutRegionsBuilder(NXOpen.Builder):
    """
    Calculates the uncut regions of a curve given a radius value for the cut tool.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateUncutRegionsBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class ResultsType():
        """
        Indicates which side of curve to check 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OneSide", "Find uncut regions on one side only"
           "BothSides", "Find uncut regions on both sides of curve"
        """
        OneSide = 0  # UncutRegionsBuilderResultsTypeMemberType
        BothSides = 1  # UncutRegionsBuilderResultsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ReverseSide(self) -> None:
        """
        Reverse the tool side 
        
        Signature ``ReverseSide()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    Curves: NXOpen.Section = ...
    """
    Returns  the curves to check for uncut regions.  
    
    <hr>
    
    Getter Method
    
    Signature ``Curves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Results: UncutRegionsBuilderResultsType = ...
    """
    Returns or sets  the side of the curve to show the results.  
    
    <hr>
    
    Getter Method
    
    Signature ``Results`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.UncutRegionsBuilderResultsType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Results`` 
    
    :param results: 
    :type results: :py:class:`NXOpen.Die.UncutRegionsBuilderResultsType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToolAxis: NXOpen.Direction = ...
    """
    Returns or sets  the tool axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolAxis`` 
    
    :param toolAxis: 
    :type toolAxis: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToolSize: NXOpen.Expression = ...
    """
    Returns  the expression that contains the tool radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: UncutRegionsBuilder = ...  # unknown typename


class RibParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Rib Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def CreateChild(self) -> RibChildBuilder:
        """
        Creates a child rib.  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.RibChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, dieribchild: RibChildBuilder) -> None:
        """
        Deletes a child rib.  
        
        Signature ``DeleteChild(dieribchild)`` 
        
        :param dieribchild: 
        :type dieribchild: :py:class:`NXOpen.Die.RibChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[RibChildBuilder]':
        """
        Outputs the child ribs.  
        
        Signature ``GetChildren()`` 
        
        :returns:  The child ribs.  
        :rtype: list of :py:class:`NXOpen.Die.RibChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    AdjustedThickness: float = ...
    """
    Returns or sets  the adjusted thickness of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjustedThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``AdjustedThickness`` 
    
    :param adjustedThickness: 
    :type adjustedThickness: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Angle: float = ...
    """
    Returns or sets  the angle of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BottomHorizontalOffset: float = ...
    """
    Returns or sets  the bottom horizontal offset of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomHorizontalOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BottomHorizontalOffset`` 
    
    :param bottomHorizontalOffset: 
    :type bottomHorizontalOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BottomLimitOffset: float = ...
    """
    Returns or sets  the bottom limit offset of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomLimitOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BottomLimitOffset`` 
    
    :param bottomLimitOffset: 
    :type bottomLimitOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BottomVerticalOffset: float = ...
    """
    Returns or sets  the bottom vertical offset of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomVerticalOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BottomVerticalOffset`` 
    
    :param bottomVerticalOffset: 
    :type bottomVerticalOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CenterlineXyOffset: float = ...
    """
    Returns or sets  the centerline xy offset of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineXyOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineXyOffset`` 
    
    :param centerlineXyOffset: 
    :type centerlineXyOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of die ribs, if true the ribs will be built into the model, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of die ribs, if true input data to the ribs will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Height: float = ...
    """
    Returns or sets  the height of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LccMinWidth: float = ...
    """
    Returns or sets  the lightening core mininum width of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``LccMinWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LccMinWidth`` 
    
    :param lccMinWidth: 
    :type lccMinWidth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LighteningCore: bool = ...
    """
    Returns or sets  the lightening core switch of die ribs, if true the lightening core will be built into the rib, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``LighteningCore`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LighteningCore`` 
    
    :param lighteningCore: 
    :type lighteningCore: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LighteningCoreClearance: float = ...
    """
    Returns or sets  the lightening core clearance of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``LighteningCoreClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LighteningCoreClearance`` 
    
    :param lighteningCoreClearance: 
    :type lighteningCoreClearance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Rectangular: bool = ...
    """
    Returns or sets  the rectangular switch of die ribs, if true the lightening cores will be rectangular, 
    if false they will follow the shape of the rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``Rectangular`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Rectangular`` 
    
    :param rectangular: 
    :type rectangular: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Thickness: float = ...
    """
    Returns or sets  the thickness of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Thickness`` 
    
    :param thickness: 
    :type thickness: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    TopHorizontalOffset: float = ...
    """
    Returns or sets  the top horizontal offset of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopHorizontalOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TopHorizontalOffset`` 
    
    :param topHorizontalOffset: 
    :type topHorizontalOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    TopLimitOffset: float = ...
    """
    Returns or sets  the top limit offset of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopLimitOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TopLimitOffset`` 
    
    :param topLimitOffset: 
    :type topLimitOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    TopVerticalOffset: float = ...
    """
    Returns or sets  the top vertical offset of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopVerticalOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TopVerticalOffset`` 
    
    :param topVerticalOffset: 
    :type topVerticalOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    XDistance: float = ...
    """
    Returns or sets  the x distance of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``XDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``XDistance`` 
    
    :param xDistance: 
    :type xDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    XOffset: float = ...
    """
    Returns or sets  the x offset of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``XOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``XOffset`` 
    
    :param xOffset: 
    :type xOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    YDistance: float = ...
    """
    Returns or sets  the y distance of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``YDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``YDistance`` 
    
    :param yDistance: 
    :type yDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    YOffset: float = ...
    """
    Returns or sets  the y offset of die ribs.  
    
    <hr>
    
    Getter Method
    
    Signature ``YOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``YOffset`` 
    
    :param yOffset: 
    :type yOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: RibParentBuilder = ...  # unknown typename


class DrawDiePunchBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Draw Die Punch feature builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.DrawDiePunch`
    
    .. versionadded:: NX4.0.0
    """
    
    def SetPunchProfile(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the punch profile of the draw die punch casting.  
        
        Signature ``SetPunchProfile(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPunchProfile(self) -> tuple:
        """
        Gets the punch profile of the draw die punch casting.  
        
        Signature ``GetPunchProfile()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (direction, profileEntries). direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    AlignStartOrientation: bool = ...
    """
    Returns or sets  the align start orientation switch of the draw die punch casting, if true use the alignment point to define the start of the punch profile,
    if false use the default algorithm to define the start of the punch profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlignStartOrientation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``AlignStartOrientation`` 
    
    :param alignStartOrientation: 
    :type alignStartOrientation: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseOrientation: NXOpen.ISurface = ...
    """
    Returns or sets  the base orientation of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseOrientation`` 
    
    :param baseOrientation: 
    :type baseOrientation: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BoltHoleParent: HoleParentBuilder = ...
    """
    Returns  the bolt hole parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoltHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CastReliefParent: CastReliefParentBuilder = ...
    """
    Returns  the cast relief builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``CastReliefParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.CastReliefParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ClosedStartOrientation: NXOpen.IOrientation = ...
    """
    Returns or sets  the closed start orientation of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClosedStartOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ClosedStartOrientation`` 
    
    :param closedStartOrientation: 
    :type closedStartOrientation: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CoordinatingHoleParent: HoleParentBuilder = ...
    """
    Returns  the coordinating hole parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinatingHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CorePunch: bool = ...
    """
    Returns or sets  the core punch switch of the draw die punch casting, if true the punch will be cored, if false the punch will not be cored.  
    
    <hr>
    
    Getter Method
    
    Signature ``CorePunch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CorePunch`` 
    
    :param corePunch: 
    :type corePunch: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DeckParent: DeckParentBuilder = ...
    """
    Returns  the deck builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DeckParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DieCenterlineCsys: NXOpen.CartesianCoordinateSystem = ...
    """
    Returns or sets  the die centerline csys of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieCenterlineCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CartesianCoordinateSystem` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DieCenterlineCsys`` 
    
    :param dieCenterlineCsys: 
    :type dieCenterlineCsys: :py:class:`NXOpen.CartesianCoordinateSystem` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayHoles: bool = ...
    """
    Returns or sets  the display holes switch of the draw die punch casting, if true holes will be created in the punch, if false holes will not be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayHoles`` 
    
    :param displayHoles: 
    :type displayHoles: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DowelHoleParent: HoleParentBuilder = ...
    """
    Returns  the dowel hole parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``DowelHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    HandlingCoreParent: HandlingCoreParentBuilder = ...
    """
    Returns  the handling core parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``HandlingCoreParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HandlingCoreParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    KeywayParent: KeywayParentBuilder = ...
    """
    Returns  the keyway parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeywayParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.KeywayParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PartialRibbingParent: RibParentBuilder = ...
    """
    Returns  the partial ribbing parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartialRibbingParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.RibParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PreliminaryBuild: bool = ...
    """
    Returns or sets  the preliminary build switch of the draw die punch casting, if true the fast build options will be used,
    if false accurate build options will be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``PreliminaryBuild`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PreliminaryBuild`` 
    
    :param preliminaryBuild: 
    :type preliminaryBuild: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PressureSystemParent: PressureSystemParentBuilder = ...
    """
    Returns  the pressure system parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``PressureSystemParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PressureSystemParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PressureSystemReversalParent: PointParentBuilder = ...
    """
    Returns  the pressure system reversal parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``PressureSystemReversalParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PointParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RibbingParent: RibParentBuilder = ...
    """
    Returns  the ribbing parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``RibbingParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.RibParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Section: DrawDiePunchSectionBuilder = ...
    """
    Returns  the section builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``Section`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawDiePunchSectionBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SheetMetal: NXOpen.Body = ...
    """
    Returns or sets  the sheet metal of the draw die punch casting.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SheetMetal`` 
    
    :param sheetMetal: 
    :type sheetMetal: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    StrengtheningRibbingParent: RibParentBuilder = ...
    """
    Returns  the strengthening ribbing parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``StrengtheningRibbingParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.RibParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    VentHoleParent: HoleParentBuilder = ...
    """
    Returns  the vent hole parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``VentHoleParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.HoleParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WearPlateParent: PadParentBuilder = ...
    """
    Returns  the wear plate parent builder of the draw die punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``WearPlateParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PadParentBuilder` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: DrawDiePunchBuilder = ...  # unknown typename


class AddendumSectionBuilderSectionLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddendumSectionBuilderSectionLocationType():
    """
    The settings indicating the location of the section being created. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AtPoint", "Create section at a point."
       "AtPlane", "Create section at a plane."
       "WithCurve", "Create section by approximating curves."
    """
    AtPoint = 0  # AddendumSectionBuilderSectionLocationTypeMemberType
    AtPlane = 1  # AddendumSectionBuilderSectionLocationTypeMemberType
    WithCurve = 2  # AddendumSectionBuilderSectionLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddendumSectionBuilderSectionShapeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddendumSectionBuilderSectionShapeType():
    """
    The settings to indicate the section shape. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Basic", "Section consists of all segments in a step like shape."
       "DrawBar", "Section consists of all segments in a draw bar shape."
       "Simple", "Section consists of trim ledge, punch radius, and second stretch wall segments."
       "Channel", "Section consists of all segments in a channel shape."
       "Blend", "Section consists of a single radius type segment to define the blend shape."
       "Extension", "Section consists of a plus segment only."
       "System", "Section shape determined by blending neighboring sections."
       "UserDefined", "Section shape is user defined."
       "Reuse", "Section shape is read from reuse library."
       "Blank", "No section shape."
    """
    Basic = 0  # AddendumSectionBuilderSectionShapeTypeMemberType
    DrawBar = 1  # AddendumSectionBuilderSectionShapeTypeMemberType
    Simple = 2  # AddendumSectionBuilderSectionShapeTypeMemberType
    Channel = 3  # AddendumSectionBuilderSectionShapeTypeMemberType
    Blend = 4  # AddendumSectionBuilderSectionShapeTypeMemberType
    Extension = 5  # AddendumSectionBuilderSectionShapeTypeMemberType
    System = 6  # AddendumSectionBuilderSectionShapeTypeMemberType
    UserDefined = 7  # AddendumSectionBuilderSectionShapeTypeMemberType
    Reuse = 8  # AddendumSectionBuilderSectionShapeTypeMemberType
    Blank = 9  # AddendumSectionBuilderSectionShapeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddendumSectionBuilderSectionOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddendumSectionBuilderSectionOrientationType():
    """
    The settings to indicate the section orientation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Default", "Orient perpendicular to tangency curve."
       "ThreeDPerpendicular", "Orient 3D perpendicular to tangency curve"
       "Conjugate", "Use conjugate orientation."
       "Isoparametric", "Orient along isoparametric line of closest face."
       "IncidentEdge", "Orient from incident edge."
       "Blank", "No orientation."
    """
    Default = 0  # AddendumSectionBuilderSectionOrientationTypeMemberType
    ThreeDPerpendicular = 1  # AddendumSectionBuilderSectionOrientationTypeMemberType
    Conjugate = 2  # AddendumSectionBuilderSectionOrientationTypeMemberType
    Isoparametric = 3  # AddendumSectionBuilderSectionOrientationTypeMemberType
    IncidentEdge = 4  # AddendumSectionBuilderSectionOrientationTypeMemberType
    Blank = 5  # AddendumSectionBuilderSectionOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddendumSectionBuilderSurfaceBuildTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddendumSectionBuilderSurfaceBuildType():
    """
    The settings to indicate the surface type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoSurface", "Do not create a surface."
       "Sectional", "Create sectional sweep surface."
       "CurveMesh", "Create curve mesh surface."
       "ChannelTunnelCap", "Create channel tunnel cap surface."
       "MultipleFaceBlend", "Create multiple face blend surface."
       "WallsOnly", "Create walls only surface."
       "DiskFaceBlend", "Create disc blend surface."
       "SphereFaceBlend", "Create spherical blend surface."
    """
    NoSurface = 0  # AddendumSectionBuilderSurfaceBuildTypeMemberType
    Sectional = 1  # AddendumSectionBuilderSurfaceBuildTypeMemberType
    CurveMesh = 2  # AddendumSectionBuilderSurfaceBuildTypeMemberType
    ChannelTunnelCap = 3  # AddendumSectionBuilderSurfaceBuildTypeMemberType
    MultipleFaceBlend = 4  # AddendumSectionBuilderSurfaceBuildTypeMemberType
    WallsOnly = 5  # AddendumSectionBuilderSurfaceBuildTypeMemberType
    DiskFaceBlend = 6  # AddendumSectionBuilderSurfaceBuildTypeMemberType
    SphereFaceBlend = 7  # AddendumSectionBuilderSurfaceBuildTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddendumSectionBuilderSegmentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddendumSectionBuilderSegmentType():
    """
    The settings to indicate the segment type to update. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Plus", "Update plus segment."
       "Punch", "Update punch segment."
       "FirstStretchWall", "Update first stretch wall segment."
       "Reverse", "Update reverse segment."
       "TrimLedge", "Update trim ledge segment."
       "DiePunch", "Update die punch segment."
       "SecondStretchWall", "Update second stretch wall segment."
       "DieReverse", "Update die reverse segment."
       "FlatToBead", "Update flat to bead segment."
    """
    Plus = 0  # AddendumSectionBuilderSegmentTypeMemberType
    Punch = 1  # AddendumSectionBuilderSegmentTypeMemberType
    FirstStretchWall = 2  # AddendumSectionBuilderSegmentTypeMemberType
    Reverse = 3  # AddendumSectionBuilderSegmentTypeMemberType
    TrimLedge = 4  # AddendumSectionBuilderSegmentTypeMemberType
    DiePunch = 5  # AddendumSectionBuilderSegmentTypeMemberType
    SecondStretchWall = 6  # AddendumSectionBuilderSegmentTypeMemberType
    DieReverse = 7  # AddendumSectionBuilderSegmentTypeMemberType
    FlatToBead = 8  # AddendumSectionBuilderSegmentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddendumSectionBuilderSegmentParameterTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddendumSectionBuilderSegmentParameterType():
    """
    The settings to indicate which parameter of the segment to lock. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Length", "The length parameter of a straight segment."
       "Angle", "The angle parameter of a straight segment."
       "Radius", "The radius parameter of an arc segment."
       "ArcLength", "The arc length parameter of an arc segment."
    """
    Length = 0  # AddendumSectionBuilderSegmentParameterTypeMemberType
    Angle = 1  # AddendumSectionBuilderSegmentParameterTypeMemberType
    Radius = 2  # AddendumSectionBuilderSegmentParameterTypeMemberType
    ArcLength = 3  # AddendumSectionBuilderSegmentParameterTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddendumSectionBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Die.AddendumSectionBuilder` which is used to create or edit an addendum section.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateAddendumSectionBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class SectionLocationType():
        """
        The settings indicating the location of the section being created. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AtPoint", "Create section at a point."
           "AtPlane", "Create section at a plane."
           "WithCurve", "Create section by approximating curves."
        """
        AtPoint = 0  # AddendumSectionBuilderSectionLocationTypeMemberType
        AtPlane = 1  # AddendumSectionBuilderSectionLocationTypeMemberType
        WithCurve = 2  # AddendumSectionBuilderSectionLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SectionShapeType():
        """
        The settings to indicate the section shape. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Basic", "Section consists of all segments in a step like shape."
           "DrawBar", "Section consists of all segments in a draw bar shape."
           "Simple", "Section consists of trim ledge, punch radius, and second stretch wall segments."
           "Channel", "Section consists of all segments in a channel shape."
           "Blend", "Section consists of a single radius type segment to define the blend shape."
           "Extension", "Section consists of a plus segment only."
           "System", "Section shape determined by blending neighboring sections."
           "UserDefined", "Section shape is user defined."
           "Reuse", "Section shape is read from reuse library."
           "Blank", "No section shape."
        """
        Basic = 0  # AddendumSectionBuilderSectionShapeTypeMemberType
        DrawBar = 1  # AddendumSectionBuilderSectionShapeTypeMemberType
        Simple = 2  # AddendumSectionBuilderSectionShapeTypeMemberType
        Channel = 3  # AddendumSectionBuilderSectionShapeTypeMemberType
        Blend = 4  # AddendumSectionBuilderSectionShapeTypeMemberType
        Extension = 5  # AddendumSectionBuilderSectionShapeTypeMemberType
        System = 6  # AddendumSectionBuilderSectionShapeTypeMemberType
        UserDefined = 7  # AddendumSectionBuilderSectionShapeTypeMemberType
        Reuse = 8  # AddendumSectionBuilderSectionShapeTypeMemberType
        Blank = 9  # AddendumSectionBuilderSectionShapeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SectionOrientationType():
        """
        The settings to indicate the section orientation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Default", "Orient perpendicular to tangency curve."
           "ThreeDPerpendicular", "Orient 3D perpendicular to tangency curve"
           "Conjugate", "Use conjugate orientation."
           "Isoparametric", "Orient along isoparametric line of closest face."
           "IncidentEdge", "Orient from incident edge."
           "Blank", "No orientation."
        """
        Default = 0  # AddendumSectionBuilderSectionOrientationTypeMemberType
        ThreeDPerpendicular = 1  # AddendumSectionBuilderSectionOrientationTypeMemberType
        Conjugate = 2  # AddendumSectionBuilderSectionOrientationTypeMemberType
        Isoparametric = 3  # AddendumSectionBuilderSectionOrientationTypeMemberType
        IncidentEdge = 4  # AddendumSectionBuilderSectionOrientationTypeMemberType
        Blank = 5  # AddendumSectionBuilderSectionOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SurfaceBuildType():
        """
        The settings to indicate the surface type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoSurface", "Do not create a surface."
           "Sectional", "Create sectional sweep surface."
           "CurveMesh", "Create curve mesh surface."
           "ChannelTunnelCap", "Create channel tunnel cap surface."
           "MultipleFaceBlend", "Create multiple face blend surface."
           "WallsOnly", "Create walls only surface."
           "DiskFaceBlend", "Create disc blend surface."
           "SphereFaceBlend", "Create spherical blend surface."
        """
        NoSurface = 0  # AddendumSectionBuilderSurfaceBuildTypeMemberType
        Sectional = 1  # AddendumSectionBuilderSurfaceBuildTypeMemberType
        CurveMesh = 2  # AddendumSectionBuilderSurfaceBuildTypeMemberType
        ChannelTunnelCap = 3  # AddendumSectionBuilderSurfaceBuildTypeMemberType
        MultipleFaceBlend = 4  # AddendumSectionBuilderSurfaceBuildTypeMemberType
        WallsOnly = 5  # AddendumSectionBuilderSurfaceBuildTypeMemberType
        DiskFaceBlend = 6  # AddendumSectionBuilderSurfaceBuildTypeMemberType
        SphereFaceBlend = 7  # AddendumSectionBuilderSurfaceBuildTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SegmentType():
        """
        The settings to indicate the segment type to update. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Plus", "Update plus segment."
           "Punch", "Update punch segment."
           "FirstStretchWall", "Update first stretch wall segment."
           "Reverse", "Update reverse segment."
           "TrimLedge", "Update trim ledge segment."
           "DiePunch", "Update die punch segment."
           "SecondStretchWall", "Update second stretch wall segment."
           "DieReverse", "Update die reverse segment."
           "FlatToBead", "Update flat to bead segment."
        """
        Plus = 0  # AddendumSectionBuilderSegmentTypeMemberType
        Punch = 1  # AddendumSectionBuilderSegmentTypeMemberType
        FirstStretchWall = 2  # AddendumSectionBuilderSegmentTypeMemberType
        Reverse = 3  # AddendumSectionBuilderSegmentTypeMemberType
        TrimLedge = 4  # AddendumSectionBuilderSegmentTypeMemberType
        DiePunch = 5  # AddendumSectionBuilderSegmentTypeMemberType
        SecondStretchWall = 6  # AddendumSectionBuilderSegmentTypeMemberType
        DieReverse = 7  # AddendumSectionBuilderSegmentTypeMemberType
        FlatToBead = 8  # AddendumSectionBuilderSegmentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SegmentParameterType():
        """
        The settings to indicate which parameter of the segment to lock. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Length", "The length parameter of a straight segment."
           "Angle", "The angle parameter of a straight segment."
           "Radius", "The radius parameter of an arc segment."
           "ArcLength", "The arc length parameter of an arc segment."
        """
        Length = 0  # AddendumSectionBuilderSegmentParameterTypeMemberType
        Angle = 1  # AddendumSectionBuilderSegmentParameterTypeMemberType
        Radius = 2  # AddendumSectionBuilderSegmentParameterTypeMemberType
        ArcLength = 3  # AddendumSectionBuilderSegmentParameterTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CutSection(self, section: NXOpen.Curve, copyPlaneData: bool) -> None:
        """
        Cuts section in order to be pasted at another location.  
        
        Signature ``CutSection(section, copyPlaneData)`` 
        
        :param section:  Section to cut.  
        :type section: :py:class:`NXOpen.Curve` 
        :param copyPlaneData:  Indicates whether to copy the orientation plane of the section.  
        :type copyPlaneData: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def TrimExtendConstraintCurve(self, constraintCurve: NXOpen.Section) -> None:
        """
        Trims or extends constraint curve.  
        
        Signature ``TrimExtendConstraintCurve(constraintCurve)`` 
        
        :param constraintCurve:  Constraint curve to modify  
        :type constraintCurve: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteExtendSection(self) -> NXOpen.Section:
        """
        Deletes the :py:class:`NXOpen.Section` used for extended constraint curve.  
        
        Signature ``DeleteExtendSection()`` 
        
        :returns:  :py:class:`NXOpen.Section` to delete.  
        :rtype: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CopySection(self, section: NXOpen.Curve, copyPlaneData: bool) -> None:
        """
        Copies addendum section in order to be pasted at another location.  
        
        Signature ``CopySection(section, copyPlaneData)`` 
        
        :param section:  Section to copy.  
        :type section: :py:class:`NXOpen.Curve` 
        :param copyPlaneData:  Indicates whether to copy the orientation plane of the section.  
        :type copyPlaneData: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def InitializeEditParameters(self, section: NXOpen.Curve) -> None:
        """
        Initializes environment to start editing parameters of a section.  
        
        Signature ``InitializeEditParameters(section)`` 
        
        :param section:  Section to edit.  
        :type section: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def UpdateSegment(self, temporary: bool, section: NXOpen.Curve, segment: AddendumSectionBuilderSegmentType, lengthRadius: float, angle: float) -> float:
        """
        Updates length or angle value of a segment.  
        
        Signature ``UpdateSegment(temporary, section, segment, lengthRadius, angle)`` 
        
        :param temporary:  Indicates that change to section is temporary in that :py:meth:`NXOpen.Die.AddendumSectionBuilder.ResetSection` can be called to undo changes.   
        :type temporary: bool 
        :param section:  Section to update.  
        :type section: :py:class:`NXOpen.Curve` 
        :param segment:  Segment to update.  
        :type segment: :py:class:`NXOpen.Die.AddendumSectionBuilderSegmentType` 
        :param lengthRadius:  Value for the new Length/Radius of the segment.  
        :type lengthRadius: float 
        :param angle:  Value for the angle of the segment.  
        :type angle: float 
        :returns:  Computed flange length value.  
        :rtype: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def LockSegment(self, section: NXOpen.Curve, segment: AddendumSectionBuilderSegmentType, type: AddendumSectionBuilderSegmentParameterType) -> None:
        """
        Lock a segment parameter value.  
        
        Signature ``LockSegment(section, segment, type)`` 
        
        :param section:  Section to update.  
        :type section: :py:class:`NXOpen.Curve` 
        :param segment:  Segment to update.  
        :type segment: :py:class:`NXOpen.Die.AddendumSectionBuilderSegmentType` 
        :param type:  Segment parameter to lock.  
        :type type: :py:class:`NXOpen.Die.AddendumSectionBuilderSegmentParameterType` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def UnlockSegment(self, section: NXOpen.Curve, segment: AddendumSectionBuilderSegmentType, type: AddendumSectionBuilderSegmentParameterType) -> None:
        """
        Unlock a segment parameter value.  
        
        Signature ``UnlockSegment(section, segment, type)`` 
        
        :param section:  Section to update.  
        :type section: :py:class:`NXOpen.Curve` 
        :param segment:  Segment to update.  
        :type segment: :py:class:`NXOpen.Die.AddendumSectionBuilderSegmentType` 
        :param type:  Segment parameter to unlock.  
        :type type: :py:class:`NXOpen.Die.AddendumSectionBuilderSegmentParameterType` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ResetSection(self, section: NXOpen.Curve) -> None:
        """
        Resets the section to the last saved state.  
        
        Signature ``ResetSection(section)`` 
        
        :param section:  Section to reset.  
        :type section: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def EditBlendSection(self, section: NXOpen.Curve, radius: float) -> None:
        """
        Edit radius value of blend section.  
        
        Signature ``EditBlendSection(section, radius)`` 
        
        :param section:  Blend section to edit.  
        :type section: :py:class:`NXOpen.Curve` 
        :param radius:  New radius value.  
        :type radius: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ReplaceSectionCurve(self, section: NXOpen.Curve) -> None:
        """
        Replaces the current section with the edited one.  
        
        Signature ``ReplaceSectionCurve(section)`` 
        
        :param section:  Section to edit.  
        :type section: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def TerminateEditParameters(self, section: NXOpen.Curve) -> None:
        """
        Cleans up environment after editing parameters of a section.  
        
        Signature ``TerminateEditParameters(section)`` 
        
        :param section:  Edited section.  
        :type section: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def UpdateSection(self, section: NXOpen.Curve) -> None:
        """
        Updates section after editing segments via :py:meth:`NXOpen.Die.AddendumSectionBuilder.UpdateSegment`.  
        
        This makes permanent the temporary changes so that any future calls to :py:meth:`NXOpen.Die.AddendumSectionBuilder.ResetSection`
        will reset the section to this state.
        
        Signature ``UpdateSection(section)`` 
        
        :param section:  Section being edited.  
        :type section: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateExtendSection(self) -> NXOpen.Section:
        """
        Creates a :py:class:`NXOpen.Section` object containing the extended constraint curve.  
        
        Signature ``CreateExtendSection()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ReplaceConstraintCurve(self, editedCurve: NXOpen.Curve) -> None:
        """
        Replaces the constraint curve with an edited curve.  
        
        Signature ``ReplaceConstraintCurve(editedCurve)`` 
        
        :param editedCurve:  New edited curve to replace existing constraint curve.  
        :type editedCurve: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def MoveSectionOrigin(self, section: NXOpen.Curve, newOrigin: NXOpen.Point3d, useSectionPlane: int) -> None:
        """
        Moves addendum section to a new location.  
        
        Signature ``MoveSectionOrigin(section, newOrigin, useSectionPlane)`` 
        
        :param section:  Section to move.  
        :type section: :py:class:`NXOpen.Curve` 
        :param newOrigin:  Point Coordinates of new origin.  
        :type newOrigin: :py:class:`NXOpen.Point3d` 
        :param useSectionPlane:  Non-zero value indicates that the orientation plane of the section is to be kept when the section is moved.  
        :type useSectionPlane: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ChangeSectionPlane(self, section: NXOpen.Curve, plane: NXOpen.Direction) -> None:
        """
        Changes the section orientation.  
        
        Signature ``ChangeSectionPlane(section, plane)`` 
        
        :param section:  Section to edit.  
        :type section: :py:class:`NXOpen.Curve` 
        :param plane:  New section orientation plane.  
        :type plane: :py:class:`NXOpen.Direction` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def UpdateSectionAttributes(self, section: NXOpen.Curve) -> None:
        """
        Updates the section attributes.  
        
        You must call :py:meth:`NXOpen.Die.AddendumSectionBuilder.Attributes` 
        first in order to set the attributes to be updated.
        
        Signature ``UpdateSectionAttributes(section)`` 
        
        :param section:  Section to edit.  
        :type section: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def PasteSectionFromCurve(self, curve: NXOpen.Curve) -> None:
        """
        Creates a section by reading the section parameters from the input curve and pasting at 
        the location specified by :py:meth:`NXOpen.Die.AddendumSectionBuilder.SectionPoint`
        
        Signature ``PasteSectionFromCurve(curve)`` 
        
        :param curve:  Section to edit.  
        
        :type curve: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateSectionFromReuse(self, fileName: str) -> None:
        """
        Creates a section using the information stored in the reuse library.  
        
        Signature ``CreateSectionFromReuse(fileName)`` 
        
        :param fileName:  name of reuse library containing addendum section information  
        :type fileName: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def UpdateSectionsAfterConstraintChange(self) -> None:
        """
        Called to update the section when constraint curve or constraint surface is changed.  
        
        Signature ``UpdateSectionsAfterConstraintChange()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def MirrorSections(self) -> None:
        """
        Mirror sections using plane from :py:meth:`NXOpen.Die.AddendumSectionBuilder.MirrorPlane`.  
        
        Signature ``MirrorSections()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteSections(self) -> None:
        """
        Delete addendum sections from :py:meth:`NXOpen.Die.AddendumSectionBuilder.Sections`.  
        
        Signature ``DeleteSections()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateSection(self) -> None:
        """
        Create addendum section using previously supplied parameters.  
        
        Signature ``CreateSection()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def RecreateSections(self) -> None:
        """
        Re-create all existing sections because of a change in the draw direction or product faces.  
        
        Signature ``RecreateSections()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def PasteSection(self) -> None:
        """
        Paste section.  
        
        Signature ``PasteSection()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def Reinitialize(self) -> None:
        """
        Reinitialize the environment after changes to input data such as draw vector or product faces 
        
        Signature ``Reinitialize()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DefaultDraw(self) -> None:
        """
        Create default draw vector based upon the input product faces.  
        
        Signature ``DefaultDraw()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def TranslateWall(self) -> None:
        """
        Translate the constraint curve in the direction of the last wall segment of the addendum section using the 
        distance supplied by :py:meth:`NXOpen.Die.AddendumSectionBuilder.TranslateDistance`.  
        
        Signature ``TranslateWall()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SmoothCurve(self) -> None:
        """
        Smooth the constraint curve using the radius supplied by :py:meth:`NXOpen.Die.AddendumSectionBuilder.SmoothRadius`.  
        
        Signature ``SmoothCurve()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Attributes: DieAttributesBuilder = ...
    """
    Returns  the color and string attributes of the section.  
    
    <hr>
    
    Getter Method
    
    Signature ``Attributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByCurves: NXOpen.Section = ...
    """
    Returns  the curves used to approximate an addendum section.  
    
    <hr>
    
    Getter Method
    
    Signature ``ByCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ConstraintCurve: NXOpen.ScCollector = ...
    """
    Returns  the constraint curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ConstraintCurveToEdit: NXOpen.Curve = ...
    """
    Returns  the constraint curve to edit.  
    
    This function will read the objects using :py:meth:`NXOpen.Die.AddendumSectionBuilder.ConstraintCurve`.
    and if needed create a non-associative curve to be used by the edit curve functions.  The only case where it will
    not create a curve is if there is only one non-associative spline on the selection.             
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintCurveToEdit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ConstraintFaces: NXOpen.ScCollector = ...
    """
    Returns  the constraint faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CurveToExtend: NXOpen.Curve = ...
    """
    Returns or sets  the constraint curve to extend.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurveToExtend`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveToExtend`` 
    
    :param curve: 
    :type curve: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DrawDirection: NXOpen.Direction = ...
    """
    Returns or sets  the draw direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawDirection`` 
    
    :param punchDirection: 
    :type punchDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EditedConstraintCurve: NXOpen.Curve = ...
    """
    Returns or sets  the edited constraint curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``EditedConstraintCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditedConstraintCurve`` 
    
    :param curve: 
    :type curve: :py:class:`NXOpen.Curve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ExtendData: NXOpen.GeometricUtilities.CurveLengthData = ...
    """
    Returns  the object used to extend the constraint curve which is accessed via :py:meth:`NXOpen.Die.AddendumSectionBuilder.ConstraintCurve`.  
    
    Need to call function :py:meth:`NXOpen.Die.AddendumSectionBuilder.CreateExtendSection` before calling this function.
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.CurveLengthData` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ExtendEndDistance: NXOpen.Expression = ...
    """
    Returns  the distance to extend the end of the constraint curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendEndDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ExtendStartDistance: NXOpen.Expression = ...
    """
    Returns  the distance to extend the start of the constraint curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendStartDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    FacetDensity: float = ...
    """
    Returns or sets  the facet density.  
    
    <hr>
    
    Getter Method
    
    Signature ``FacetDensity`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FacetDensity`` 
    
    :param facetDensity: 
    :type facetDensity: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Limits: DieLimitsBuilder = ...
    """
    Returns  the limits to control the span of the preview surface 
    
    <hr>
    
    Getter Method
    
    Signature ``Limits`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLimitsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LocationType: AddendumSectionBuilderSectionLocationType = ...
    """
    Returns or sets  the location where the section will be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``LocationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.AddendumSectionBuilderSectionLocationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LocationType`` 
    
    :param locationType: 
    :type locationType: :py:class:`NXOpen.Die.AddendumSectionBuilderSectionLocationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaximumPositive: NXOpen.Expression = ...
    """
    Returns  the maximum positive trim angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumPositive`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MinimumDraftAngle: NXOpen.Expression = ...
    """
    Returns  the minimum draft angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumDraftAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MinimumNegative: NXOpen.Expression = ...
    """
    Returns  the minimum negative trim angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumNegative`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MinimumRadius: NXOpen.Expression = ...
    """
    Returns  the minimum radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MinimumTrimLedge: NXOpen.Expression = ...
    """
    Returns  the minimum trim ledge.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumTrimLedge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MirrorPlane: NXOpen.Plane = ...
    """
    Returns or sets  the mirror plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorPlane`` 
    
    :param mirrorPlane: 
    :type mirrorPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NeutralCurve: NXOpen.Section = ...
    """
    Returns  the neutral curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``NeutralCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PlusLength: NXOpen.Expression = ...
    """
    Returns  the minimum plus length.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlusLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Product: NXOpen.ScCollector = ...
    """
    Returns  the product faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``Product`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SectionOrientation: AddendumSectionBuilderSectionOrientationType = ...
    """
    Returns or sets  the section orientation.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.AddendumSectionBuilderSectionOrientationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionOrientation`` 
    
    :param sectionOrientation: 
    :type sectionOrientation: :py:class:`NXOpen.Die.AddendumSectionBuilderSectionOrientationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SectionPlane: NXOpen.Plane = ...
    """
    Returns or sets  the section plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionPlane`` 
    
    :param sectionPlane: 
    :type sectionPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SectionPoint: NXOpen.Point = ...
    """
    Returns or sets  the origin point where the section will be located.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionPoint`` 
    
    :param sectionPoint: 
    :type sectionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SectionShape: AddendumSectionBuilderSectionShapeType = ...
    """
    Returns or sets  the section shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.AddendumSectionBuilderSectionShapeType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionShape`` 
    
    :param sectionShape: 
    :type sectionShape: :py:class:`NXOpen.Die.AddendumSectionBuilderSectionShapeType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Sections: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the addendum sections to edit.  
    
    <hr>
    
    Getter Method
    
    Signature ``Sections`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SmoothRadius: NXOpen.Expression = ...
    """
    Returns  the smoothing radius for the constraint curve used by :py:meth:`NXOpen.Die.AddendumSectionBuilder.SmoothCurve`.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SurfaceBuildMethod: AddendumSectionBuilderSurfaceBuildType = ...
    """
    Returns or sets  the addendum surface build method.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceBuildMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.AddendumSectionBuilderSurfaceBuildType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceBuildMethod`` 
    
    :param surfaceBuildMethod: 
    :type surfaceBuildMethod: :py:class:`NXOpen.Die.AddendumSectionBuilderSurfaceBuildType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TranslateDistance: NXOpen.Expression = ...
    """
    Returns  the translate distance used by :py:meth:`NXOpen.Die.AddendumSectionBuilder.TranslateWall`.  
    
    <hr>
    
    Getter Method
    
    Signature ``TranslateDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: AddendumSectionBuilder = ...  # unknown typename


class ClampingSlot(NXOpen.Features.BodyFeature):
    """
    Represents a clamping slot feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.ClampingSlotBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: ClampingSlot = ...  # unknown typename


class TrimFlangeDieAssistantBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Die.TrimFlangeDieAssistantBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.TrimFlangeDieAssistant`
    
    .. versionadded:: NX5.0.0
    """
    
    def NewTrimProfile(self) -> DieAssistantTrimProfile:
        """
        Creates a new trim profile item in the set  
        
        Signature ``NewTrimProfile()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DieAssistantTrimProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewFlangeProfile(self) -> DieAssistantFlangeProfile:
        """
        Creates a new flange profile item in the set  
        
        Signature ``NewFlangeProfile()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.DieAssistantFlangeProfile` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AutoGen(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``AutoGen()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def TrimSteelParms(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``TrimSteelParms()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def FlangeSteelWipeParms(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``FlangeSteelWipeParms()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def FlangeSteelRestrikeParms(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``FlangeSteelRestrikeParms()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def UpperPadParms(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``UpperPadParms()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def LowerPostParms(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``LowerPostParms()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def LowerScrapCutterParms(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``LowerScrapCutterParms()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def LowerScrapCutterBaseParms(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``LowerScrapCutterBaseParms()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    Clearance: float = ...
    """
    Returns or sets  the clearance used in the automatic generation of the lower post flange profile 
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Clearance`` 
    
    :param clearance: 
    :type clearance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    FlangeProfile: NXOpen.ScCollector = ...
    """
    Returns  the flange profile 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FlangeProfileSet: DieAssistantFlangeProfileList = ...
    """
    Returns  the flange profile set 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeProfileSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAssistantFlangeProfileList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    LowerBase: NXOpen.Plane = ...
    """
    Returns or sets  the lower base 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerBase`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerBase`` 
    
    :param lowerBase: 
    :type lowerBase: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PierceLocations: NXOpen.SelectPointList = ...
    """
    Returns  the pierce locations 
    
    <hr>
    
    Getter Method
    
    Signature ``PierceLocations`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    SheetMetal: NXOpen.SelectBody = ...
    """
    Returns  the sheet metal 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Thickness: float = ...
    """
    Returns or sets  the thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Thickness`` 
    
    :param thickness: 
    :type thickness: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    TrimProfileSet: DieAssistantTrimProfileList = ...
    """
    Returns  the trim profile set 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimProfileSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAssistantTrimProfileList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    UpperBase: NXOpen.Plane = ...
    """
    Returns or sets  the upper base 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperBase`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperBase`` 
    
    :param upperBase: 
    :type upperBase: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: TrimFlangeDieAssistantBuilder = ...  # unknown typename


class HandlingCore(NXOpen.Features.BodyFeature):
    """
    Represents a die design handling core feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.HandlingCoreBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: HandlingCore = ...  # unknown typename


class SteelInsertSegmentChildBuilderInsertTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelInsertSegmentChildBuilderInsertTypeOption():
    """
    Settings for the insert type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Trim", "trim"
       "Flange", "flange"
       "OffsetFlange", "offset_flange"
    """
    Trim = 0  # SteelInsertSegmentChildBuilderInsertTypeOptionMemberType
    Flange = 1  # SteelInsertSegmentChildBuilderInsertTypeOptionMemberType
    OffsetFlange = 2  # SteelInsertSegmentChildBuilderInsertTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelInsertSegmentChildBuilderExtensionTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SteelInsertSegmentChildBuilderExtensionTypeOption():
    """
    Settings for the extension type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "constant"
       "MaxdistPlusConst", "maximum distance + constant"
       "Law", "law"
    """
    Constant = 0  # SteelInsertSegmentChildBuilderExtensionTypeOptionMemberType
    MaxdistPlusConst = 1  # SteelInsertSegmentChildBuilderExtensionTypeOptionMemberType
    Law = 2  # SteelInsertSegmentChildBuilderExtensionTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SteelInsertSegmentChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Steel Insert Segment Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class InsertTypeOption():
        """
        Settings for the insert type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Trim", "trim"
           "Flange", "flange"
           "OffsetFlange", "offset_flange"
        """
        Trim = 0  # SteelInsertSegmentChildBuilderInsertTypeOptionMemberType
        Flange = 1  # SteelInsertSegmentChildBuilderInsertTypeOptionMemberType
        OffsetFlange = 2  # SteelInsertSegmentChildBuilderInsertTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ExtensionTypeOption():
        """
        Settings for the extension type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "constant"
           "MaxdistPlusConst", "maximum distance + constant"
           "Law", "law"
        """
        Constant = 0  # SteelInsertSegmentChildBuilderExtensionTypeOptionMemberType
        MaxdistPlusConst = 1  # SteelInsertSegmentChildBuilderExtensionTypeOptionMemberType
        Law = 2  # SteelInsertSegmentChildBuilderExtensionTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetBeltThickness(self, beltThickness: str) -> None:
        """
        Signature ``SetBeltThickness(beltThickness)`` 
        
        :param beltThickness: 
        :type beltThickness: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetReliefAngle(self, reliefAngle: str) -> None:
        """
        Signature ``SetReliefAngle(reliefAngle)`` 
        
        :param reliefAngle: 
        :type reliefAngle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetProfileRelief(self, profileRelief: str) -> None:
        """
        Signature ``SetProfileRelief(profileRelief)`` 
        
        :param profileRelief: 
        :type profileRelief: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetExtensionDistance(self, extensionDistance: str) -> None:
        """
        Signature ``SetExtensionDistance(extensionDistance)`` 
        
        :param extensionDistance: 
        :type extensionDistance: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BeltThickness: NXOpen.Expression = ...
    """
    Returns  the belt thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``BeltThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of die sisegs 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of die sisegs 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of die sisegs 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExtensionDistance: NXOpen.Expression = ...
    """
    Returns  the extension distance 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExtensionType: SteelInsertSegmentChildBuilderExtensionTypeOption = ...
    """
    Returns or sets  the extension type 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SteelInsertSegmentChildBuilderExtensionTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionType`` 
    
    :param extensionType: 
    :type extensionType: :py:class:`NXOpen.Die.SteelInsertSegmentChildBuilderExtensionTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    InsertType: SteelInsertSegmentChildBuilderInsertTypeOption = ...
    """
    Returns or sets  the insert type 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.SteelInsertSegmentChildBuilderInsertTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``InsertType`` 
    
    :param insertType: 
    :type insertType: :py:class:`NXOpen.Die.SteelInsertSegmentChildBuilderInsertTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProfileRelief: NXOpen.Expression = ...
    """
    Returns  the profile relief 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileRelief`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProfileReliefToggle: bool = ...
    """
    Returns or sets  the profile relief toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileReliefToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ProfileReliefToggle`` 
    
    :param profileReliefToggle: 
    :type profileReliefToggle: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefAngle: NXOpen.Expression = ...
    """
    Returns  the relief angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SegDirection: NXOpen.Direction = ...
    """
    Returns or sets  the steel insert seg directions 
    
    <hr>
    
    Getter Method
    
    Signature ``SegDirection`` 
    
    :returns:  seg direction  
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SegDirection`` 
    
    :param segDirection:  seg direction  
    :type segDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SegPoint: NXOpen.IOrientation = ...
    """
    Returns or sets  the steel insert seg point or plane 
    
    <hr>
    
    Getter Method
    
    Signature ``SegPoint`` 
    
    :returns:  seg end point or plane  
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SegPoint`` 
    
    :param segPoint:  seg end point or plane  
    :type segPoint: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: SteelInsertSegmentChildBuilder = ...  # unknown typename


class RotorSectionBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Rotor Section sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def SetMinimumExtensionLength(self, minimumExtensionLength: str) -> None:
        """
        Signature ``SetMinimumExtensionLength(minimumExtensionLength)`` 
        
        :param minimumExtensionLength: 
        :type minimumExtensionLength: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetMinimumCavityDepth(self, minimumCavityDepth: str) -> None:
        """
        Signature ``SetMinimumCavityDepth(minimumCavityDepth)`` 
        
        :param minimumCavityDepth: 
        :type minimumCavityDepth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetRotorAttributes(self) -> tuple:
        """
        Gets the rotor faces attributes 
        
        Signature ``GetRotorAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of rotor faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetRotorAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the rotor faces attributes 
        
        Signature ``SetRotorAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of forming faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetFormingAttributes(self) -> tuple:
        """
        Gets the forming faces attributes 
        
        Signature ``GetFormingAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of forming faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetFormingAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the forming faces attributes 
        
        Signature ``SetFormingAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of forming faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetFlangeWallAttributes(self) -> tuple:
        """
        Gets the flange wall faces attributes 
        
        Signature ``GetFlangeWallAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of flange wall faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetFlangeWallAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the flange wall faces attributes 
        
        Signature ``SetFlangeWallAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of flange wall faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetEndAttributes(self) -> tuple:
        """
        Gets the end faces attributes 
        
        Signature ``GetEndAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of end faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetEndAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the end faces attributes 
        
        Signature ``SetEndAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of end faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the die rotor casting 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the die rotor casting 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the die rotor casting 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MinimumCavityDepth: NXOpen.Expression = ...
    """
    Returns  the throat minimum cavity depth of the die rotor casting 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumCavityDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MinimumExtensionLength: NXOpen.Expression = ...
    """
    Returns  the throat minimum extension length of the die rotor casting 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumExtensionLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: RotorSectionBuilder = ...  # unknown typename


class PadChildBuilderShapeTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PadChildBuilderShapeTypeOption():
    """
    Settings for the shape type of the die pad. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangular", "Rectangular pad."
       "Circular", "Circular pad."
       "Curve", "Curve defined pad."
    """
    Rectangular = 0  # PadChildBuilderShapeTypeOptionMemberType
    Circular = 1  # PadChildBuilderShapeTypeOptionMemberType
    Curve = 2  # PadChildBuilderShapeTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PadChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Pad Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class ShapeTypeOption():
        """
        Settings for the shape type of the die pad. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangular", "Rectangular pad."
           "Circular", "Circular pad."
           "Curve", "Curve defined pad."
        """
        Rectangular = 0  # PadChildBuilderShapeTypeOptionMemberType
        Circular = 1  # PadChildBuilderShapeTypeOptionMemberType
        Curve = 2  # PadChildBuilderShapeTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetShape(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the shape profile of the die pad.  
        
        Signature ``SetShape(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetShape(self) -> tuple:
        """
        Gets the shape profile of the die pads.  
        
        Signature ``GetShape()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def TranslateLocation(self, translateDist: NXOpen.Vector3d) -> None:
        """
        Translates the location of the die pad by the specified amount.  
        
        Signature ``TranslateLocation(translateDist)`` 
        
        :param translateDist:  A scaled vector indicating the distance to translate  
        :type translateDist: :py:class:`NXOpen.Vector3d` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetHoleCenters(self, holes: 'list[NXOpen.Point]') -> None:
        """
        Sets the hole centers of the die pad.  
        
        Signature ``SetHoleCenters(holes)`` 
        
        :param holes:  The hole centers.  
        :type holes: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetHoleCenters(self) -> 'list[NXOpen.Point]':
        """
        Gets the hole centers of the die pad.  
        
        Signature ``GetHoleCenters()`` 
        
        :returns:  The hole centers.  
        :rtype: list of :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetHoleAttributes(self) -> tuple:
        """
        Gets the hole attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of hole faces. diameterTitle is a str.   Title for diameter attribute. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str) -> None:
        """
        Sets the hole attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetHoleAttributes(title, value, color, diameterTitle)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of hole faces.  
        :type color: int 
        :param diameterTitle:  Title for diameter attribute.  
        :type diameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPadAttributes(self) -> tuple:
        """
        Gets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetPadAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of pad faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPadAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetPadAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of pad faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetReliefAttributes(self) -> tuple:
        """
        Gets the relief attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetReliefAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of relief faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetReliefAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the relief attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetReliefAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of relief faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CenterHole: bool = ...
    """
    Returns or sets  the center hole switch of the die pad, if true the center hole will be created in the pad, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``CenterHole`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CenterHole`` 
    
    :param centerHole: 
    :type centerHole: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the die pad, if true the pad will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Diameter: float = ...
    """
    Returns or sets  the diameter of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Diameter`` 
    
    :param diameter: 
    :type diameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the die pad, if true input data to the pad will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Height: float = ...
    """
    Returns or sets  the height of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    HoleDiameter: float = ...
    """
    Returns or sets  the hole diameter of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``HoleDiameter`` 
    
    :param holeDiameter: 
    :type holeDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Length: float = ...
    """
    Returns or sets  the length of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Length`` 
    
    :param length: 
    :type length: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LimitingSurface: NXOpen.IOrientation = ...
    """
    Returns or sets  the limiting surface of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``LimitingSurface`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LimitingSurface`` 
    
    :param limitingSurface: 
    :type limitingSurface: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Location: NXOpen.ILocation = ...
    """
    Returns or sets  the location of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Location`` 
    
    :param location: 
    :type location: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LocationOffset: float = ...
    """
    Returns or sets  the location offset of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``LocationOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LocationOffset`` 
    
    :param locationOffset: 
    :type locationOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LocationOffsetDirection: NXOpen.IReferenceAxis = ...
    """
    Returns or sets  the location offset direction of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``LocationOffsetDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IReferenceAxis` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LocationOffsetDirection`` 
    
    :param locationOffsetDirection: 
    :type locationOffsetDirection: :py:class:`NXOpen.IReferenceAxis` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    OrientationPlane: NXOpen.IOrientation = ...
    """
    Returns or sets  the orientation plane of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationPlane`` 
    
    :param orientationPlane: 
    :type orientationPlane: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Relief: bool = ...
    """
    Returns or sets  the relief switch of the die pad, if true the relief will be built around the pad, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``Relief`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Relief`` 
    
    :param relief: 
    :type relief: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefDepth: float = ...
    """
    Returns or sets  the relief depth of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefDepth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefDepth`` 
    
    :param reliefDepth: 
    :type reliefDepth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefWidth: float = ...
    """
    Returns or sets  the relief width of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefWidth`` 
    
    :param reliefWidth: 
    :type reliefWidth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReverseOrientation: bool = ...
    """
    Returns or sets  the value to reverse the orientation of the orientation plane,
    if true the pad orientation normal will be reversed,
    if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseOrientation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseOrientation`` 
    
    :param reverseOrientation: 
    :type reverseOrientation: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ShapeType: PadChildBuilderShapeTypeOption = ...
    """
    Returns or sets  the shape type of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PadChildBuilderShapeTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ShapeType`` 
    
    :param shapeType: 
    :type shapeType: :py:class:`NXOpen.Die.PadChildBuilderShapeTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SurfaceOffset: float = ...
    """
    Returns or sets  the surface offset of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceOffset`` 
    
    :param surfaceOffset: 
    :type surfaceOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: float = ...
    """
    Returns or sets  the width of the die pad.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: PadChildBuilder = ...  # unknown typename


class DieBooleanBuilderBooleanTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBooleanBuilderBooleanType():
    """
    boolean type to apply to the selected solids 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unite", "Unite the solids to the application solid."
       "Subtract", "Subtract the solids from the application solid."
       "Intersect", "Intersect the solids with the application solid."
    """
    Unite = 0  # DieBooleanBuilderBooleanTypeMemberType
    Subtract = 1  # DieBooleanBuilderBooleanTypeMemberType
    Intersect = 2  # DieBooleanBuilderBooleanTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBooleanBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Die.DieBooleanBuilder`.  
    
    This class is a helper to other
    Die Design features that identify specific booleans in their dialogs, such as the Die Shoe
    feature. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateDieBoolean`
    
    .. versionadded:: NX6.0.0
    """
    
    class BooleanType():
        """
        boolean type to apply to the selected solids 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unite", "Unite the solids to the application solid."
           "Subtract", "Subtract the solids from the application solid."
           "Intersect", "Intersect the solids with the application solid."
        """
        Unite = 0  # DieBooleanBuilderBooleanTypeMemberType
        Subtract = 1  # DieBooleanBuilderBooleanTypeMemberType
        Intersect = 2  # DieBooleanBuilderBooleanTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BooleanOptions: DieBooleanBuilderBooleanType = ...
    """
    Returns or sets  the boolean option to apply to the list of selected solids 
    
    <hr>
    
    Getter Method
    
    Signature ``BooleanOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBooleanBuilderBooleanType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BooleanOptions`` 
    
    :param booleanOptions: 
    :type booleanOptions: :py:class:`NXOpen.Die.DieBooleanBuilderBooleanType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SelectBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the bodies to be booleaned to the main feature body 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DieBooleanBuilder = ...  # unknown typename


class MachineRelief(NXOpen.Features.BodyFeature):
    """
    Represents a die design machine relief feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.MachineReliefBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: MachineRelief = ...  # unknown typename


class CompensateRoughDataBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CompensateRoughDataBuilderTypes():
    """
    Settings for the type of data being compensated. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SheetBody", "Sheet bodies being compensated."
       "Curve", "Curves being compensated."
    """
    SheetBody = 0  # CompensateRoughDataBuilderTypesMemberType
    Curve = 1  # CompensateRoughDataBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CompensateRoughDataBuilderApproximationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CompensateRoughDataBuilderApproximationType():
    """
    Settings for the amount of approximation to perform. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Coarse", "Perform a coarse approximation."
       "Rough", "Perform a rough approximation."
       "Fine", "Perform a fine approximation."
       "Exact", "Perform no approximation."
    """
    Coarse = 0  # CompensateRoughDataBuilderApproximationTypeMemberType
    Rough = 1  # CompensateRoughDataBuilderApproximationTypeMemberType
    Fine = 2  # CompensateRoughDataBuilderApproximationTypeMemberType
    Exact = 3  # CompensateRoughDataBuilderApproximationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CompensateRoughDataBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Die.CompensateRoughDataBuilder`.  
    
    This class is used to edit
    and create a Compensate Rough Curve or Compensate Rough Sheet feature.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CompensateRoughData`
    
    Default values.
    
    ==================  ===============================================
    Property            Value
    ==================  ===============================================
    AngleTolerance      0.5 
    ------------------  -----------------------------------------------
    Approximation       Coarse 
    ------------------  -----------------------------------------------
    DistanceTolerance   0.0254 (millimeters part), 0.001 (inches part) 
    ------------------  -----------------------------------------------
    JoinOutputCurves    0 
    ------------------  -----------------------------------------------
    MaximumGap          5.0 (millimeters part), 0.2 (inches part) 
    ------------------  -----------------------------------------------
    ModifyInputSheet    0 
    ==================  ===============================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Settings for the type of data being compensated. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SheetBody", "Sheet bodies being compensated."
           "Curve", "Curves being compensated."
        """
        SheetBody = 0  # CompensateRoughDataBuilderTypesMemberType
        Curve = 1  # CompensateRoughDataBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ApproximationType():
        """
        Settings for the amount of approximation to perform. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Coarse", "Perform a coarse approximation."
           "Rough", "Perform a rough approximation."
           "Fine", "Perform a fine approximation."
           "Exact", "Perform no approximation."
        """
        Coarse = 0  # CompensateRoughDataBuilderApproximationTypeMemberType
        Rough = 1  # CompensateRoughDataBuilderApproximationTypeMemberType
        Fine = 2  # CompensateRoughDataBuilderApproximationTypeMemberType
        Exact = 3  # CompensateRoughDataBuilderApproximationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Approximation: CompensateRoughDataBuilderApproximationType = ...
    """
    Returns or sets  the approximation desired.  
    
    <hr>
    
    Getter Method
    
    Signature ``Approximation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.CompensateRoughDataBuilderApproximationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Approximation`` 
    
    :param approximation: 
    :type approximation: :py:class:`NXOpen.Die.CompensateRoughDataBuilderApproximationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    CurveCollector: NXOpen.Section = ...
    """
    Returns  the curve collector containing the curves that will be approximated.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurveCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    JoinOutputCurves: bool = ...
    """
    Returns or sets  the join output curves setting, true indicates that the output curves will be joined
    into a single curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``JoinOutputCurves`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JoinOutputCurves`` 
    
    :param joinOutputCurves: 
    :type joinOutputCurves: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    MaximumGap: float = ...
    """
    Returns or sets  the maximum gap.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumGap`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumGap`` 
    
    :param maximumGap: 
    :type maximumGap: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ModifyInputSheet: bool = ...
    """
    Returns or sets  the modify input sheet setting.  
    
    If true the input sheet will be modified, otherwise
    a new sheet will be created. 
    
    <hr>
    
    Getter Method
    
    Signature ``ModifyInputSheet`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModifyInputSheet`` 
    
    :param modifyInputSheet: 
    :type modifyInputSheet: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ProjectToFaces: NXOpen.ScCollector = ...
    """
    Returns  the faces to project the output curves onto.  
    
    If faces are selected then the output curves will be 
    projected normal to these faces. 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectToFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SheetBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the sheet bodies that will be approximated.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: CompensateRoughDataBuilderTypes = ...
    """
    Returns or sets  the type of input data being supplied.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.CompensateRoughDataBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.CompensateRoughDataBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: CompensateRoughDataBuilder = ...  # unknown typename


class DieLocationsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Die.DieLocationsBuilder`.  
    
    The Die 
    Locations is a helper to the main Die Design feature to gather the 
    location points for items such as hole center or clamping slot location.
    Note that a non-point is selected, such as a plane or coordinate system,
    the control point of the object will be used for the location.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateDieLocations`
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    List: DieLocationBuilderList = ...
    """
    Returns  the list containing the die location objects
    
    <hr>
    
    Getter Method
    
    Signature ``List`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLocationBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DieLocationsBuilder = ...  # unknown typename


class TrimLineDevelopmentBuilderOutputMethodNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimLineDevelopmentBuilderOutputMethodName():
    """
    Indicates which trim curves to output 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Geometric", "Geometric curve only"
       "Corrected", "Corrected curve only"
       "Both", "Both geometric and corrected curves"
    """
    Geometric = 0  # TrimLineDevelopmentBuilderOutputMethodNameMemberType
    Corrected = 1  # TrimLineDevelopmentBuilderOutputMethodNameMemberType
    Both = 2  # TrimLineDevelopmentBuilderOutputMethodNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimLineDevelopmentBuilderSmoothingNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimLineDevelopmentBuilderSmoothingName():
    """
    Indicates type of curve smoothing  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear (no smoothing)"
       "Cubic", "Cubic approximation"
       "Quintic", "Quintic approximation"
    """
    Linear = 0  # TrimLineDevelopmentBuilderSmoothingNameMemberType
    Cubic = 1  # TrimLineDevelopmentBuilderSmoothingNameMemberType
    Quintic = 2  # TrimLineDevelopmentBuilderSmoothingNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimLineDevelopmentBuilderMaterialTypeNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimLineDevelopmentBuilderMaterialTypeName():
    """
    Indicates type of material 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Steel", "Steel"
       "Aluminum", "Aluminum"
    """
    Steel = 0  # TrimLineDevelopmentBuilderMaterialTypeNameMemberType
    Aluminum = 1  # TrimLineDevelopmentBuilderMaterialTypeNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimLineDevelopmentBuilderMeshElementMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimLineDevelopmentBuilderMeshElement():
    """
    The 2-D mesh element type of onestep unform. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Triangle", "Generate 2D triangle mesh element"
       "Quadrate", "Generate 2D quadrate mesh element"
    """
    Triangle = 0  # TrimLineDevelopmentBuilderMeshElementMemberType
    Quadrate = 1  # TrimLineDevelopmentBuilderMeshElementMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimLineDevelopmentBuilderConvergencyMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimLineDevelopmentBuilderConvergency():
    """
    The solver convergency level of onestep unform. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Low", "Onestep solver convergency level is low"
       "Medium", "Onestep solver convergency level is medium"
       "High", "Onestep solver convergency level is high"
    """
    Low = 0  # TrimLineDevelopmentBuilderConvergencyMemberType
    Medium = 1  # TrimLineDevelopmentBuilderConvergencyMemberType
    High = 2  # TrimLineDevelopmentBuilderConvergencyMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimLineDevelopmentBuilderSurfaceMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimLineDevelopmentBuilderSurface():
    """
    The surface types of onestep unform. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inner", "Onestep solver will offset inner surface and enlarge it"
       "Middle", "Onestep solver will not offset middle surface"
       "Outer", "Onestep solver will offset outer surface and shrink it"
    """
    Inner = 0  # TrimLineDevelopmentBuilderSurfaceMemberType
    Middle = 1  # TrimLineDevelopmentBuilderSurfaceMemberType
    Outer = 2  # TrimLineDevelopmentBuilderSurfaceMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimLineDevelopmentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.TrimLineDevelopment` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateTrimLineDevelopmentBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class OutputMethodName():
        """
        Indicates which trim curves to output 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Geometric", "Geometric curve only"
           "Corrected", "Corrected curve only"
           "Both", "Both geometric and corrected curves"
        """
        Geometric = 0  # TrimLineDevelopmentBuilderOutputMethodNameMemberType
        Corrected = 1  # TrimLineDevelopmentBuilderOutputMethodNameMemberType
        Both = 2  # TrimLineDevelopmentBuilderOutputMethodNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SmoothingName():
        """
        Indicates type of curve smoothing  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear (no smoothing)"
           "Cubic", "Cubic approximation"
           "Quintic", "Quintic approximation"
        """
        Linear = 0  # TrimLineDevelopmentBuilderSmoothingNameMemberType
        Cubic = 1  # TrimLineDevelopmentBuilderSmoothingNameMemberType
        Quintic = 2  # TrimLineDevelopmentBuilderSmoothingNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MaterialTypeName():
        """
        Indicates type of material 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Steel", "Steel"
           "Aluminum", "Aluminum"
        """
        Steel = 0  # TrimLineDevelopmentBuilderMaterialTypeNameMemberType
        Aluminum = 1  # TrimLineDevelopmentBuilderMaterialTypeNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MeshElement():
        """
        The 2-D mesh element type of onestep unform. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Triangle", "Generate 2D triangle mesh element"
           "Quadrate", "Generate 2D quadrate mesh element"
        """
        Triangle = 0  # TrimLineDevelopmentBuilderMeshElementMemberType
        Quadrate = 1  # TrimLineDevelopmentBuilderMeshElementMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Convergency():
        """
        The solver convergency level of onestep unform. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Low", "Onestep solver convergency level is low"
           "Medium", "Onestep solver convergency level is medium"
           "High", "Onestep solver convergency level is high"
        """
        Low = 0  # TrimLineDevelopmentBuilderConvergencyMemberType
        Medium = 1  # TrimLineDevelopmentBuilderConvergencyMemberType
        High = 2  # TrimLineDevelopmentBuilderConvergencyMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Surface():
        """
        The surface types of onestep unform. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inner", "Onestep solver will offset inner surface and enlarge it"
           "Middle", "Onestep solver will not offset middle surface"
           "Outer", "Onestep solver will offset outer surface and shrink it"
        """
        Inner = 0  # TrimLineDevelopmentBuilderSurfaceMemberType
        Middle = 1  # TrimLineDevelopmentBuilderSurfaceMemberType
        Outer = 2  # TrimLineDevelopmentBuilderSurfaceMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DefaultDraw(self) -> None:
        """
        Creates a default draw vector by finding the least squares plane of the formed faces 
        
        Signature ``DefaultDraw()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateDefaultSpine(self) -> None:
        """
        Creates a smoothed spine curve from the forming boundary using the spine radius value 
        
        Signature ``CreateDefaultSpine()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def Mesh(self) -> None:
        """
        Create FEM 2-D meshes based on the unform region surfaces and the target region surfaces.  
        
        Signature ``Mesh()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def Calculation(self) -> None:
        """
        Starts solver to calculate.  
        
        Signature ``Calculation()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    Addendum: NXOpen.ScCollector = ...
    """
    Returns  the collection of addendum faces 
    
    <hr>
    
    Getter Method
    
    Signature ``Addendum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Associative: bool = ...
    """
    Returns or sets  the associative switch.  
    
    True indicates a feature should be output 
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendAllowance: NXOpen.Expression = ...
    """
    Returns  the bend allowance formula.  
    
    Value should be between 0 and 1 
    
    <hr>
    
    Getter Method
    
    Signature ``BendAllowance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ConstraintCurveFromTargetRegion: NXOpen.Section = ...
    """
    Returns  the collection of constraint curve from target region 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintCurveFromTargetRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ConstraintCurveFromUnformRegion: NXOpen.Section = ...
    """
    Returns  the collection of constraint curve from unform region 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstraintCurveFromUnformRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    Used for sewing sheet bodies and joining curves 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distTol: 
    :type distTol: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DrawDirection: NXOpen.Direction = ...
    """
    Returns or sets  the draw direction.  
    
    Also points in the direction of material side of metal 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawDirection`` 
    
    :param punchDirection: 
    :type punchDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Faces: NXOpen.ScCollector = ...
    """
    Returns  the collection of formed faces 
    
    <hr>
    
    Getter Method
    
    Signature ``Faces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FormingBoundary: NXOpen.ScCollector = ...
    """
    Returns  the forming boundary 
    
    <hr>
    
    Getter Method
    
    Signature ``FormingBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    InferElementSize: bool = ...
    """
    Returns or sets  the option to infer 2-D element size.  
    
    If it is true, the element size will be auto-detected. If it is false, the element size will be required as input. 
    
    <hr>
    
    Getter Method
    
    Signature ``InferElementSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InferElementSize`` 
    
    :param inforElementSize: 
    :type inforElementSize: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    InferThickness: bool = ...
    """
    Returns or sets  the option to infer thickness.  
    
    If it is true, the thickness will be auto-detected. If it is false, thickness will be required to input.
    
    <hr>
    
    Getter Method
    
    Signature ``InferThickness`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InferThickness`` 
    
    :param inferThickness: 
    :type inferThickness: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LimitPoint1: NXOpen.Point = ...
    """
    Returns or sets  the first limit point 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitPoint1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitPoint1`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LimitPoint2: NXOpen.Point = ...
    """
    Returns or sets  the last limit point 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitPoint2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitPoint2`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Limits: DieLimitsBuilder = ...
    """
    Returns  the limits to control the span of the addendum 
    
    <hr>
    
    Getter Method
    
    Signature ``Limits`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLimitsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaterialPropertyDensity: float = ...
    """
    Returns or sets  the density of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyDensity`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyDensity`` 
    
    :param materialPropertyDensity: 
    :type materialPropertyDensity: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyE: float = ...
    """
    Returns or sets  the material property elasticity(E) which enables a material to return to its original shape and dimension.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyE`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyE`` 
    
    :param materialPropertyE: 
    :type materialPropertyE: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyF: float = ...
    """
    Returns or sets  the friction of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyF`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyF`` 
    
    :param materialPropertyF: 
    :type materialPropertyF: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyInitialStrain: float = ...
    """
    Returns or sets  the material initial strain to represent in a material upon achieving the given loading conditions in a relaxation or creep test.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyInitialStrain`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyInitialStrain`` 
    
    :param materialPropertyInitialStrain: 
    :type materialPropertyInitialStrain: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyK: float = ...
    """
    Returns or sets  the K(Strength Coefficient) of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyK`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyK`` 
    
    :param materialPropertyK: 
    :type materialPropertyK: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyN: float = ...
    """
    Returns or sets  the  material n(Hardening Exponent) to represent the constant index used in calculations for stress-strain behaviour.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyN`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyN`` 
    
    :param materialPropertyN: 
    :type materialPropertyN: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyPoisson: float = ...
    """
    Returns or sets  the material Poisson's ratio between the contraction at right angles to a stress and the direct extension.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyPoisson`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyPoisson`` 
    
    :param materialPropertyPoisson: 
    :type materialPropertyPoisson: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyR0: float = ...
    """
    Returns or sets  the r0(Anisotropy Coefficient) of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyR0`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyR0`` 
    
    :param materialPropertyR0: 
    :type materialPropertyR0: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyR45: float = ...
    """
    Returns or sets  the r45(Anisotropy Coefficient) of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyR45`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyR45`` 
    
    :param materialPropertyR45: 
    :type materialPropertyR45: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyR90: float = ...
    """
    Returns or sets  the r90(Anisotropy Coefficient) of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyR90`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyR90`` 
    
    :param materialPropertyR90: 
    :type materialPropertyR90: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialPropertyYieldStress: float = ...
    """
    Returns or sets  the yield stress of material.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialPropertyYieldStress`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialPropertyYieldStress`` 
    
    :param materialPropertyYieldStress: 
    :type materialPropertyYieldStress: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialType: TrimLineDevelopmentBuilderMaterialTypeName = ...
    """
    Returns or sets  the material type - steel or aluminum 
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderMaterialTypeName` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialType`` 
    
    :param materialType: 
    :type materialType: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderMaterialTypeName` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MeshAttemptMapping: bool = ...
    """
    Returns or sets  the option to attemp mapping for mesh elements.  
    
    If it is true, mesh element nodes will be mapped to the orginal surface to ensure the accuracy. if it is false, it will not do mapping. 
    
    <hr>
    
    Getter Method
    
    Signature ``MeshAttemptMapping`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeshAttemptMapping`` 
    
    :param meshAttemptMapping: 
    :type meshAttemptMapping: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MeshElementSize: float = ...
    """
    Returns or sets  the 2-D element size for mesh.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeshElementSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeshElementSize`` 
    
    :param meshElementSize: 
    :type meshElementSize: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MeshElementType: TrimLineDevelopmentBuilderMeshElement = ...
    """
    Returns or sets  the 2-D mesh element type, either triangle or quadrate element.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeshElementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderMeshElement` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeshElementType`` 
    
    :param meshElementType: 
    :type meshElementType: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderMeshElement` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MeshMaxJacobian: float = ...
    """
    Returns or sets  the maximum Jacobian for mesh elements.  
    
    It is used to control the element shape and quality. 
    
    <hr>
    
    Getter Method
    
    Signature ``MeshMaxJacobian`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeshMaxJacobian`` 
    
    :param meshMaxJacobian: 
    :type meshMaxJacobian: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MeshMaxWarp: float = ...
    """
    Returns or sets  the maximum warp for meshing.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeshMaxWarp`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeshMaxWarp`` 
    
    :param meshMaxWarp: 
    :type meshMaxWarp: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MeshProcessFillet: bool = ...
    """
    Returns or sets  the option to process fillet for mesh element.  
    
    If it is true, the small fillet area will be specially processed when generate mesh element. If it is false, it will be not specially processed. 
    
    <hr>
    
    Getter Method
    
    Signature ``MeshProcessFillet`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeshProcessFillet`` 
    
    :param meshProcessFillet: 
    :type meshProcessFillet: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MeshSizeVariation: int = ...
    """
    Returns or sets  the variation of mesh element size.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeshSizeVariation`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeshSizeVariation`` 
    
    :param meshSizeVariation: 
    :type meshSizeVariation: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MeshSmallFeature: float = ...
    """
    Returns or sets  the value of small feature for mesh setting
    
    <hr>
    
    Getter Method
    
    Signature ``MeshSmallFeature`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeshSmallFeature`` 
    
    :param meshSmallFeature: 
    :type meshSmallFeature: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MeshSplitQuad: bool = ...
    """
    Returns or sets  the option to split quadrate element to triangle element when creating meshes.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeshSplitQuad`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeshSplitQuad`` 
    
    :param meshSplitQuad: 
    :type meshSplitQuad: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OutputMethod: TrimLineDevelopmentBuilderOutputMethodName = ...
    """
    Returns or sets  the curve output method - geometric, corrected or both 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderOutputMethodName` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutputMethod`` 
    
    :param outputMethod: 
    :type outputMethod: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderOutputMethodName` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RegionPoint: NXOpen.Point = ...
    """
    Returns or sets  the point in product region 
    
    <hr>
    
    Getter Method
    
    Signature ``RegionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RegionPoint`` 
    
    :param regionPoint: 
    :type regionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RemoveLoops: bool = ...
    """
    Returns or sets  the remove loops setting.  
    
    True indicates loops should be removed from the output curves 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveLoops`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveLoops`` 
    
    :param removeLoops: 
    :type removeLoops: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReverseSide: bool = ...
    """
    Returns or sets  the option to indicate whether or not to unform the profile to the other side on the target body.  
    
    This option is appliable only in case the following conditions are all satisfied: entire unform to seperate target body, Curve to Curve constraint on inner edges.
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseSide`` 
    
    :param reverseSide: 
    :type reverseSide: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SampleDensityIndex: int = ...
    """
    Returns or sets  the sample density index which controls the density of the sample planes.  
    
    Value should be between 1 and 9 
    
    <hr>
    
    Getter Method
    
    Signature ``SampleDensityIndex`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SampleDensityIndex`` 
    
    :param sampleDensityIndex: 
    :type sampleDensityIndex: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SheetThickness: float = ...
    """
    Returns or sets  the thickness of sheet metal model.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetThickness`` 
    
    :param thickness: 
    :type thickness: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Smoothing: TrimLineDevelopmentBuilderSmoothingName = ...
    """
    Returns or sets  the curve smoothing method - linear (none), cubic or quintic 
    
    <hr>
    
    Getter Method
    
    Signature ``Smoothing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderSmoothingName` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Smoothing`` 
    
    :param smoothing: 
    :type smoothing: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderSmoothingName` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SolverConvergencyLevel: TrimLineDevelopmentBuilderConvergency = ...
    """
    Returns or sets  the convergency level of onestep solver.  
    
    <hr>
    
    Getter Method
    
    Signature ``SolverConvergencyLevel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderConvergency` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SolverConvergencyLevel`` 
    
    :param solverConvergencyLevel: 
    :type solverConvergencyLevel: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderConvergency` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SolverJoinOutputCurves: bool = ...
    """
    Returns or sets  the option to join output curves.  
    
    If it is true, join output curves. If it is false, do not join output curves
    
    <hr>
    
    Getter Method
    
    Signature ``SolverJoinOutputCurves`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SolverJoinOutputCurves`` 
    
    :param solverJoinOutputCurves: 
    :type solverJoinOutputCurves: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SolverMaxIterationSteps: int = ...
    """
    Returns or sets the maximum number of iteration steps in onestep solver.  
    
    <hr>
    
    Getter Method
    
    Signature ``SolverMaxIterationSteps`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SolverMaxIterationSteps`` 
    
    :param solverMaxIterationSteps: 
    :type solverMaxIterationSteps: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SolverSaveAnalysisResultsIntoFeature: bool = ...
    """
    Returns or sets  the option to save analysis result into feature.  
    
    If it is true, save analysis result into feature. If it is false, do not save analysis result into feature.
    
    <hr>
    
    Getter Method
    
    Signature ``SolverSaveAnalysisResultsIntoFeature`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SolverSaveAnalysisResultsIntoFeature`` 
    
    :param solverSaveAnalysisResultsIntoFeature: 
    :type solverSaveAnalysisResultsIntoFeature: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Spine: NXOpen.ScCollector = ...
    """
    Returns  the spine string, which determines the orientation of the sample planes 
    
    <hr>
    
    Getter Method
    
    Signature ``Spine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SpineRadius: float = ...
    """
    Returns or sets  the spine radius, used by :py:meth:`NXOpen.Die.TrimLineDevelopmentBuilder.CreateDefaultSpine` 
    
    <hr>
    
    Getter Method
    
    Signature ``SpineRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpineRadius`` 
    
    :param spineRadius: 
    :type spineRadius: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SurfaceType: TrimLineDevelopmentBuilderSurface = ...
    """
    Returns or sets  the surface type used to determine offset direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderSurface` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceType`` 
    
    :param surfaceType: 
    :type surfaceType: :py:class:`NXOpen.Die.TrimLineDevelopmentBuilderSurface` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Thickness: NXOpen.Expression = ...
    """
    Returns  the material thickness.  
    
    Value should be greater than zero. 
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: TrimLineDevelopmentBuilder = ...  # unknown typename


class RibChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Rib Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def SetCenterline(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the centerline of the rib.  
        
        Signature ``SetCenterline(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetCenterline(self) -> tuple:
        """
        Gets the centerline of the rib.  
        
        Signature ``GetCenterline()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    @typing.overload
    def SetStart(self) -> None:
        """Returns or sets  the start limit geometry of the die rib."""
        ...
    
    @typing.overload
    def SetStart(self, start: NXOpen.IOrientation) -> None:
        """
        Getter Method
        
        Signature ``Start`` 
        
        :param start: 
        :type start: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def SetStart(self, start: NXOpen.IOrientation) -> None:
        """
        Setter Method
        
        Signature ``Start`` 
        
        :param start: 
        :type start: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def SetStart(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the start limit geometry of the die rib using a profile. 
        
        Signature ``SetStart(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The the profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    @typing.overload
    def GetStart(self) -> None:
        """Returns or sets  the start limit geometry of the die rib."""
        ...
    
    @typing.overload
    def GetStart(self) -> NXOpen.IOrientation:
        """
        Getter Method
        
        Signature ``Start`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def GetStart(self, start: NXOpen.IOrientation) -> None:
        """
        Setter Method
        
        Signature ``Start`` 
        
        :param start: 
        :type start: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def GetStart(self) -> tuple:
        """
        Gets the start limit geometry of the die rib as a profile.  
        
        Signature ``GetStart()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    @typing.overload
    def SetTopEnd(self) -> None:
        """Returns or sets  the top end limit geometry of the die rib."""
        ...
    
    @typing.overload
    def SetTopEnd(self, topEnd: NXOpen.IOrientation) -> None:
        """
        Getter Method
        
        Signature ``TopEnd`` 
        
        :param topEnd: 
        :type topEnd: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def SetTopEnd(self, topEnd: NXOpen.IOrientation) -> None:
        """
        Setter Method
        
        Signature ``TopEnd`` 
        
        :param topEnd: 
        :type topEnd: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def SetTopEnd(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the top end limit geometry of the die rib using a profile. 
        
        Signature ``SetTopEnd(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    @typing.overload
    def GetTopEnd(self) -> None:
        """Returns or sets  the top end limit geometry of the die rib."""
        ...
    
    @typing.overload
    def GetTopEnd(self) -> NXOpen.IOrientation:
        """
        Getter Method
        
        Signature ``TopEnd`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def GetTopEnd(self, topEnd: NXOpen.IOrientation) -> None:
        """
        Setter Method
        
        Signature ``TopEnd`` 
        
        :param topEnd: 
        :type topEnd: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def GetTopEnd(self) -> tuple:
        """
        Gets the top end limit geometry of the die rib as a profile.  
        
        Signature ``GetTopEnd()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    @typing.overload
    def SetBottomEnd(self) -> None:
        """Returns or sets  the bottom end limit geometry of the die rib."""
        ...
    
    @typing.overload
    def SetBottomEnd(self, bottomEnd: NXOpen.IOrientation) -> None:
        """
        Getter Method
        
        Signature ``BottomEnd`` 
        
        :param bottomEnd: 
        :type bottomEnd: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def SetBottomEnd(self, bottomEnd: NXOpen.IOrientation) -> None:
        """
        Setter Method
        
        Signature ``BottomEnd`` 
        
        :param bottomEnd: 
        :type bottomEnd: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def SetBottomEnd(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the bottom end limit geometry of the die rib using a profile. 
        
        Signature ``SetBottomEnd(direction, profileEntries)`` 
        
        :param direction:  Profile direction.  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  The profile entries, can be curves, edges, faces, sketches or curve features.  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    @typing.overload
    def GetBottomEnd(self) -> None:
        """Returns or sets  the bottom end limit geometry of the die rib."""
        ...
    
    @typing.overload
    def GetBottomEnd(self) -> NXOpen.IOrientation:
        """
        Getter Method
        
        Signature ``BottomEnd`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def GetBottomEnd(self, bottomEnd: NXOpen.IOrientation) -> None:
        """
        Setter Method
        
        Signature ``BottomEnd`` 
        
        :param bottomEnd: 
        :type bottomEnd: :py:class:`NXOpen.IOrientation` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    @typing.overload
    def GetBottomEnd(self) -> tuple:
        """
        Gets the bottom end limit geometry of the die rib as a profile.  
        
        Signature ``GetBottomEnd()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   The profile entries, will be curves, edges, faces, sketches or curve features. direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    AdjustedThickness: float = ...
    """
    Returns or sets  the adjusted thickness of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjustedThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``AdjustedThickness`` 
    
    :param adjustedThickness: 
    :type adjustedThickness: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Angle: float = ...
    """
    Returns or sets  the angle of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Bottom: NXOpen.IOrientation = ...
    """
    Returns or sets  the bottom limit geometry of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``Bottom`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Bottom`` 
    
    :param bottom: 
    :type bottom: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BottomEnd: NXOpen.IOrientation = ...
    """
    Returns or sets  the bottom end limit geometry of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BottomEnd`` 
    
    :param bottomEnd: 
    :type bottomEnd: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BottomHorizontalOffset: float = ...
    """
    Returns or sets  the bottom horizontal offset of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomHorizontalOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BottomHorizontalOffset`` 
    
    :param bottomHorizontalOffset: 
    :type bottomHorizontalOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BottomLimitOffset: float = ...
    """
    Returns or sets  the bottom limit offset of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomLimitOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BottomLimitOffset`` 
    
    :param bottomLimitOffset: 
    :type bottomLimitOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BottomVerticalOffset: float = ...
    """
    Returns or sets  the bottom vertical offset of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomVerticalOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BottomVerticalOffset`` 
    
    :param bottomVerticalOffset: 
    :type bottomVerticalOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CenterlineXyOffset: float = ...
    """
    Returns or sets  the centerline xy offset of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineXyOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineXyOffset`` 
    
    :param centerlineXyOffset: 
    :type centerlineXyOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the die rib, if true the rib will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the die rib, if true input data to the rib will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Height: float = ...
    """
    Returns or sets  the height of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LccMinWidth: float = ...
    """
    Returns or sets  the lightening core mininum width of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``LccMinWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LccMinWidth`` 
    
    :param lccMinWidth: 
    :type lccMinWidth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LighteningCore: bool = ...
    """
    Returns or sets  the lightening core switch of the die rib, if true the lightening core will be built into the rib, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``LighteningCore`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LighteningCore`` 
    
    :param lighteningCore: 
    :type lighteningCore: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LighteningCoreClearance: float = ...
    """
    Returns or sets  the lightening core clearance of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``LighteningCoreClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LighteningCoreClearance`` 
    
    :param lighteningCoreClearance: 
    :type lighteningCoreClearance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Rectangular: bool = ...
    """
    Returns or sets  the rectangular switch of the die rib, if true the lightening core will be rectangular, 
    if false it will follow the shape of the rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``Rectangular`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Rectangular`` 
    
    :param rectangular: 
    :type rectangular: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Start: NXOpen.IOrientation = ...
    """
    Returns or sets  the start limit geometry of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``Start`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Start`` 
    
    :param start: 
    :type start: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Thickness: float = ...
    """
    Returns or sets  the thickness of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Thickness`` 
    
    :param thickness: 
    :type thickness: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Top: NXOpen.IOrientation = ...
    """
    Returns or sets  the top limit geometry of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``Top`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Top`` 
    
    :param top: 
    :type top: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    TopEnd: NXOpen.IOrientation = ...
    """
    Returns or sets  the top end limit geometry of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TopEnd`` 
    
    :param topEnd: 
    :type topEnd: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    TopHorizontalOffset: float = ...
    """
    Returns or sets  the top horizontal offset of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopHorizontalOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TopHorizontalOffset`` 
    
    :param topHorizontalOffset: 
    :type topHorizontalOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    TopLimitOffset: float = ...
    """
    Returns or sets  the top limit offset of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopLimitOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TopLimitOffset`` 
    
    :param topLimitOffset: 
    :type topLimitOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    TopVerticalOffset: float = ...
    """
    Returns or sets  the top vertical offset of the die rib.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopVerticalOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TopVerticalOffset`` 
    
    :param topVerticalOffset: 
    :type topVerticalOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: RibChildBuilder = ...  # unknown typename


class DieLocationBuilderLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieLocationBuilderLocationType():
    """
    the options available for defining the location 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SelectLocation", "Select the point to be used."
       "NewPoint", "Define the point to be used."
       "NewCoordinateSystem", "Define a coordinate system to specify the location."
       "NewVector", "Define a vector to specify the location."
       "NewPlane", "Define a plane to specify the location."
    """
    SelectLocation = 0  # DieLocationBuilderLocationTypeMemberType
    NewPoint = 1  # DieLocationBuilderLocationTypeMemberType
    NewCoordinateSystem = 2  # DieLocationBuilderLocationTypeMemberType
    NewVector = 3  # DieLocationBuilderLocationTypeMemberType
    NewPlane = 4  # DieLocationBuilderLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieLocationBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Die.DieLocationBuilder`.  
    
    The Die 
    Location Item is a helper and identifies a single item in the
    :py:class:`NXOpen.Die.DieLocationBuilder`. The item allows the user to
    fully specify a single location point for items such as hole center
    or clamping slot location. Note that a non-point is selected,
    such as a plane or coordinate system, the control point of the object
    will be used for the location.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateDieLocation`
    
    .. versionadded:: NX6.0.0
    """
    
    class LocationType():
        """
        the options available for defining the location 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SelectLocation", "Select the point to be used."
           "NewPoint", "Define the point to be used."
           "NewCoordinateSystem", "Define a coordinate system to specify the location."
           "NewVector", "Define a vector to specify the location."
           "NewPlane", "Define a plane to specify the location."
        """
        SelectLocation = 0  # DieLocationBuilderLocationTypeMemberType
        NewPoint = 1  # DieLocationBuilderLocationTypeMemberType
        NewCoordinateSystem = 2  # DieLocationBuilderLocationTypeMemberType
        NewVector = 3  # DieLocationBuilderLocationTypeMemberType
        NewPlane = 4  # DieLocationBuilderLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CoordinateSystemMatrix: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the coordinate system matrix 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystemMatrix`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystemMatrix`` 
    
    :param coordinateSystemMatrix: 
    :type coordinateSystemMatrix: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CoordinateSystemOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the coordinate system origin 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateSystemOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateSystemOrigin`` 
    
    :param coordinateSystemOrigin: 
    :type coordinateSystemOrigin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    InputType: DieLocationBuilderLocationType = ...
    """
    Returns or sets  the type of source that defined the location 
    
    <hr>
    
    Getter Method
    
    Signature ``InputType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLocationBuilderLocationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InputType`` 
    
    :param inputType: 
    :type inputType: :py:class:`NXOpen.Die.DieLocationBuilderLocationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Location: NXOpen.SelectNXObject = ...
    """
    Returns  the selected location 
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Plane: NXOpen.Plane = ...
    """
    Returns or sets  the specified plane 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the specified point 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Vector: NXOpen.Direction = ...
    """
    Returns or sets  the specified vector 
    
    <hr>
    
    Getter Method
    
    Signature ``Vector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Vector`` 
    
    :param vector: 
    :type vector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DieLocationBuilder = ...  # unknown typename


class FlangeTaskBuilderCamTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FlangeTaskBuilderCamTypes():
    """
    Settings for the cam type of the flange task. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Direct", "Direct"
       "AerialConventional", "Aerial Cam - Conventional Fill"
       "BaseConventional", "Base Mounted Cam - Conventional Fill"
       "AerialRotary", "Aerial Cam - Rotary Fill"
       "BellCrank", "Bell Crank"
    """
    Direct = 0  # FlangeTaskBuilderCamTypesMemberType
    AerialConventional = 1  # FlangeTaskBuilderCamTypesMemberType
    BaseConventional = 2  # FlangeTaskBuilderCamTypesMemberType
    AerialRotary = 3  # FlangeTaskBuilderCamTypesMemberType
    BellCrank = 4  # FlangeTaskBuilderCamTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FlangeTaskBuilderSpringbackTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FlangeTaskBuilderSpringbackTypes():
    """
    Settings for the springback type of the flange task. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "Constant"
       "Law", "Law Controlled"
    """
    Constant = 0  # FlangeTaskBuilderSpringbackTypesMemberType
    Law = 1  # FlangeTaskBuilderSpringbackTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FlangeTaskBuilderPierceTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FlangeTaskBuilderPierceTypes():
    """
    Settings for the pierce type of the flange task. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Gage", "Use Gage tolerance."
       "Critical", "Use Critical tolerance."
       "Standard", "Use Standard tolerance."
    """
    Gage = 0  # FlangeTaskBuilderPierceTypesMemberType
    Critical = 1  # FlangeTaskBuilderPierceTypesMemberType
    Standard = 2  # FlangeTaskBuilderPierceTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FlangeTaskBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Flange Task feature builder.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class CamTypes():
        """
        Settings for the cam type of the flange task. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Direct", "Direct"
           "AerialConventional", "Aerial Cam - Conventional Fill"
           "BaseConventional", "Base Mounted Cam - Conventional Fill"
           "AerialRotary", "Aerial Cam - Rotary Fill"
           "BellCrank", "Bell Crank"
        """
        Direct = 0  # FlangeTaskBuilderCamTypesMemberType
        AerialConventional = 1  # FlangeTaskBuilderCamTypesMemberType
        BaseConventional = 2  # FlangeTaskBuilderCamTypesMemberType
        AerialRotary = 3  # FlangeTaskBuilderCamTypesMemberType
        BellCrank = 4  # FlangeTaskBuilderCamTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SpringbackTypes():
        """
        Settings for the springback type of the flange task. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "Constant"
           "Law", "Law Controlled"
        """
        Constant = 0  # FlangeTaskBuilderSpringbackTypesMemberType
        Law = 1  # FlangeTaskBuilderSpringbackTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PierceTypes():
        """
        Settings for the pierce type of the flange task. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Gage", "Use Gage tolerance."
           "Critical", "Use Critical tolerance."
           "Standard", "Use Standard tolerance."
        """
        Gage = 0  # FlangeTaskBuilderPierceTypesMemberType
        Critical = 1  # FlangeTaskBuilderPierceTypesMemberType
        Standard = 2  # FlangeTaskBuilderPierceTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetRegionBounds(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the region bounds of the flange task 
        
        Signature ``SetRegionBounds(direction, profileEntries)`` 
        
        :param direction:  Profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  Profile entries that make up the                                                                                               boundary of the flange task  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetRegionBounds(self) -> tuple:
        """
        Gets the region bounds of the flange task  
        
        Signature ``GetRegionBounds()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   Profile entries that make up the                                                                                            boundary of the flange task direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    @typing.overload
    def SetShapeDetail(self, direction: DirectionOption, profileEntries: 'list[NXOpen.IProfile]') -> None:
        """
        Sets the shape detail of the flange task for profiles 
        
        Signature ``SetShapeDetail(direction, profileEntries)`` 
        
        :param direction:  Profile direction  
        :type direction: :py:class:`NXOpen.Die.DirectionOption` 
        :param profileEntries:  Profile entries  
        :type profileEntries: list of :py:class:`NXOpen.IProfile` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    @typing.overload
    def SetShapeDetail(self, bodies: 'list[NXOpen.Body]') -> None:
        """
        Sets the shape detail of the form task for bodies 
        
        Signature ``SetShapeDetail(bodies)`` 
        
        :param bodies:  bodies  
        :type bodies: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetShapeDetailByProfile(self) -> tuple:
        """
        Gets the shape detail of the flange task for profiles  
        
        Signature ``GetShapeDetailByProfile()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (profileEntries, direction). profileEntries is a list of :py:class:`NXOpen.IProfile`.   Profile entries direction is a :py:class:`NXOpen.Die.DirectionOption`.   Profile direction 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetShapeDetail(self) -> 'list[NXOpen.Body]':
        """
        Gets the shape detail of the form task for bodies  
        
        Signature ``GetShapeDetail()`` 
        
        :returns:  bodies  
        :rtype: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetAssociativeObjects(self, objects: 'list[NXOpen.DisplayableObject]') -> None:
        """
        Sets the associative objects of the flange task 
        
        Signature ``SetAssociativeObjects(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetAssociativeObjects(self) -> 'list[NXOpen.DisplayableObject]':
        """
        Gets the associative objects of the flange task  
        
        Signature ``GetAssociativeObjects()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetCameraViews(self, objects: 'list[NXOpen.View]') -> None:
        """
        Sets the camera views of the flange task 
        
        Signature ``SetCameraViews(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetCameraViews(self) -> 'list[NXOpen.View]':
        """
        Gets the camera views of the flange task  
        
        Signature ``GetCameraViews()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.View` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetDetails(self, strings: 'list[str]') -> None:
        """
        Sets the detailed description of the flange task 
        
        Signature ``SetDetails(strings)`` 
        
        :param strings:  detail strings  
        :type strings: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetDetails(self) -> 'list[str]':
        """
        Gets the detailed description of the flange task  
        
        Signature ``GetDetails()`` 
        
        :returns:  detail strings  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetCameraLayerAndXmlp(self) -> tuple:
        """
        Gets the camera layer settings and xmlp data  
        
        Signature ``GetCameraLayerAndXmlp()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (layerSettings, xmlpData). layerSettings is a list of str.   1 layer setting string for each camera object.                                                                the string needs to be 256 characters long                                                                (one for each user layer) with either 0 for off                                                               or 1 for on. xmlpData is a list of str.   xmlp data 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetCameraLayerAndXmlp(self, layerSettings: 'list[str]', xmlpData: 'list[str]') -> None:
        """
        Sets the camera layer settings and xmlp data 
        
        Signature ``SetCameraLayerAndXmlp(layerSettings, xmlpData)`` 
        
        :param layerSettings:  1 layer setting string for each camera object.                                                                the string needs to be 256 characters long                                                                (one for each user layer) with either 0 for off                                                               or 1 for on.  
        :type layerSettings: list of str 
        :param xmlpData:  xmlp data  
        :type xmlpData: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetCameraNames(self, strings: 'list[str]') -> None:
        """
        Sets the names of the camera 
        
        Signature ``SetCameraNames(strings)`` 
        
        :param strings:  each string contains the name of a camera object  
        :type strings: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetCameraNames(self) -> 'list[str]':
        """
        Gets the names of the camera  
        
        Signature ``GetCameraNames()`` 
        
        :returns:  each string contains the name of a camera object  
        :rtype: list of str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CamDirection: NXOpen.ILocation = ...
    """
    Returns or sets  the cam direction of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``CamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CamDirection`` 
    
    :param camDirection: 
    :type camDirection: :py:class:`NXOpen.ILocation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CamType: FlangeTaskBuilderCamTypes = ...
    """
    Returns or sets  the cam type of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``CamType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.FlangeTaskBuilderCamTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CamType`` 
    
    :param camType: 
    :type camType: :py:class:`NXOpen.Die.FlangeTaskBuilderCamTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DisplayRotatedItems: bool = ...
    """
    Returns or sets  the display rotated items setting of the flange task.  
    
    True indicates that the reference point and cam direction objects should be created and displayed in the die face feature. 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayRotatedItems`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayRotatedItems`` 
    
    :param displaySetting: 
    :type displaySetting: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FinishOperation: bool = ...
    """
    Returns or sets  the finish operation of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``FinishOperation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FinishOperation`` 
    
    :param finishOperation: 
    :type finishOperation: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PierceAndExtrude: bool = ...
    """
    Returns or sets  the pierce and extrude setting of the flange task.  
    
    True indicates that the flange task is a pierce and extrude type. 
    
    <hr>
    
    Getter Method
    
    Signature ``PierceAndExtrude`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``PierceAndExtrude`` 
    
    :param pierceAndExtrude: 
    :type pierceAndExtrude: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PierceType: FlangeTaskBuilderPierceTypes = ...
    """
    Returns or sets  the pierce type of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``PierceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.FlangeTaskBuilderPierceTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``PierceType`` 
    
    :param pierceType: 
    :type pierceType: :py:class:`NXOpen.Die.FlangeTaskBuilderPierceTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PointInRegion: NXOpen.Point = ...
    """
    Returns or sets  the keep point in the region of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``PointInRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``PointInRegion`` 
    
    :param pointInRegion: 
    :type pointInRegion: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SpringbackAngle: str = ...
    """
    Returns or sets  the springback angle of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``SpringbackAngle`` 
    
    :returns:  expression string  
    :rtype: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``SpringbackAngle`` 
    
    :param springbackAngle:  expression string  
    :type springbackAngle: str 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SpringbackType: FlangeTaskBuilderSpringbackTypes = ...
    """
    Returns or sets  the springback type of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``SpringbackType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.FlangeTaskBuilderSpringbackTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``SpringbackType`` 
    
    :param springbackType: 
    :type springbackType: :py:class:`NXOpen.Die.FlangeTaskBuilderSpringbackTypes` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TippedProduct: NXOpen.Features.Feature = ...
    """
    Returns or sets  the tipped product of the flange task 
    
    <hr>
    
    Getter Method
    
    Signature ``TippedProduct`` 
    
    :returns:  The tip of the operation where the flange
    task resides.  
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TippedProduct`` 
    
    :param tippedProduct:  The tip of the operation where the flange                                                                   task resides.  
    :type tippedProduct: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: FlangeTaskBuilder = ...  # unknown typename


class ClampingSlotBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ClampingSlotBuilderTypes():
    """
    Clamping slot types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Hydraulic", " - "
       "Traveling", " - "
       "Automatic", " - "
    """
    Hydraulic = 0  # ClampingSlotBuilderTypesMemberType
    Traveling = 1  # ClampingSlotBuilderTypesMemberType
    Automatic = 2  # ClampingSlotBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ClampingSlotBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Clamping Slot feature builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.ClampingSlot`
    
    Default values.
    
    =======================  ===========================================
    Property                 Value
    =======================  ===========================================
    CenterlineLength.Value   40 (millimeters part), 1.57 (inches part) 
    -----------------------  -------------------------------------------
    FlangeThickness.Value    45 (millimeters part), 1.77 (inches part) 
    -----------------------  -------------------------------------------
    InnerWidth.Value         45 (millimeters part), 1.77 (inches part) 
    -----------------------  -------------------------------------------
    LocationOffset.Value     0 (millimeters part), 0 (inches part) 
    -----------------------  -------------------------------------------
    LocationOnFlange         false 
    -----------------------  -------------------------------------------
    NotchAngle.Value         0 (millimeters part), 0 (inches part) 
    -----------------------  -------------------------------------------
    NotchHeight.Value        0 (millimeters part), 0 (inches part) 
    -----------------------  -------------------------------------------
    NotchWidth.Value         0 (millimeters part), 0 (inches part) 
    -----------------------  -------------------------------------------
    OffsetWidth.Value        150 (millimeters part), 5.9 (inches part) 
    -----------------------  -------------------------------------------
    Overhang.Value           0 (millimeters part), 0 (inches part) 
    -----------------------  -------------------------------------------
    PadHeight.Value          63.5 (millimeters part), 2.5 (inches part) 
    -----------------------  -------------------------------------------
    PadLength.Value          80 (millimeters part), 3.15 (inches part) 
    -----------------------  -------------------------------------------
    PadOffset.Value          0 (millimeters part), 0 (inches part) 
    -----------------------  -------------------------------------------
    PadRadius.Value          25 (millimeters part), 1.0 (inches part) 
    -----------------------  -------------------------------------------
    PadWidth.Value           110 (millimeters part), 4.33 (inches part) 
    -----------------------  -------------------------------------------
    SlotLength.Value         40 (millimeters part), 1.57 (inches part) 
    -----------------------  -------------------------------------------
    SlotRadius.Value         20 (millimeters part), 0.787 (inches part) 
    -----------------------  -------------------------------------------
    SlotWidth.Value          45 (millimeters part), 1.77 (inches part) 
    -----------------------  -------------------------------------------
    TopLength.Value          60 (millimeters part), 2.36 (inches part) 
    =======================  ===========================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Clamping slot types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Hydraulic", " - "
           "Traveling", " - "
           "Automatic", " - "
        """
        Hydraulic = 0  # ClampingSlotBuilderTypesMemberType
        Traveling = 1  # ClampingSlotBuilderTypesMemberType
        Automatic = 2  # ClampingSlotBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BasePlane: DiePlaneBuilder = ...
    """
    Returns  the base plane of the clamping slot pad 
    
    <hr>
    
    Getter Method
    
    Signature ``BasePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CenterlineLength: NXOpen.Expression = ...
    """
    Returns  the length from the location to the flange 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DieCenterlineCoordinateSystem: NXOpen.SelectCartesianCoordinateSystem = ...
    """
    Returns  the die centerline coordinate system for orienting the slot 
    
    <hr>
    
    Getter Method
    
    Signature ``DieCenterlineCoordinateSystem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCartesianCoordinateSystem` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    FlangeBaseProfile: NXOpen.Section = ...
    """
    Returns  the closed profile of the flange base 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeBaseProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FlangeThickness: NXOpen.Expression = ...
    """
    Returns  the thickness of the flange 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    InnerWidth: NXOpen.Expression = ...
    """
    Returns  the width of the cutout at the back of the slot 
    
    <hr>
    
    Getter Method
    
    Signature ``InnerWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LocationOffset: NXOpen.Expression = ...
    """
    Returns  the amount to move along the location offset direction if specified 
    
    <hr>
    
    Getter Method
    
    Signature ``LocationOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LocationOffsetDirection: DieDirectionBuilder = ...
    """
    Returns  the direction to offset the clampslot locations if needed 
    
    <hr>
    
    Getter Method
    
    Signature ``LocationOffsetDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieDirectionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LocationOnFlange: bool = ...
    """
    Returns or sets  the toggle to identify if the location should be mapped to the flange before building 
    
    <hr>
    
    Getter Method
    
    Signature ``LocationOnFlange`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LocationOnFlange`` 
    
    :param locationOnFlange: 
    :type locationOnFlange: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Locations: DieLocationsBuilder = ...
    """
    Returns  the locations for the clamping slots 
    
    <hr>
    
    Getter Method
    
    Signature ``Locations`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieLocationsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NotchAngle: NXOpen.Expression = ...
    """
    Returns  the angle of the notch with respect to the base of the pad
    
    <hr>
    
    Getter Method
    
    Signature ``NotchAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NotchFacesAttributes: DieAttributesBuilder = ...
    """
    Returns  the attributes for the notch faces 
    
    <hr>
    
    Getter Method
    
    Signature ``NotchFacesAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NotchHeight: NXOpen.Expression = ...
    """
    Returns  the height of the notch on the pad from the base 
    
    <hr>
    
    Getter Method
    
    Signature ``NotchHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NotchWidth: NXOpen.Expression = ...
    """
    Returns  the width from the center of the slot to the outer edge of the notch 
    
    <hr>
    
    Getter Method
    
    Signature ``NotchWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OffsetWidth: NXOpen.Expression = ...
    """
    Returns  the width of the additional flange casting added for pad support 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OrientationPlane: DiePlaneBuilder = ...
    """
    Returns  the top orientation plane of the clamping slot pad 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Overhang: NXOpen.Expression = ...
    """
    Returns  the amount the pad will overhang from the flange 
    
    <hr>
    
    Getter Method
    
    Signature ``Overhang`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OverhangFacesAttributes: DieAttributesBuilder = ...
    """
    Returns  the attributes for the overhang faces 
    
    <hr>
    
    Getter Method
    
    Signature ``OverhangFacesAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadFacesAttributes: DieAttributesBuilder = ...
    """
    Returns  the attributes for the pad faces
    
    <hr>
    
    Getter Method
    
    Signature ``PadFacesAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadHeight: NXOpen.Expression = ...
    """
    Returns  the height of the pad 
    
    <hr>
    
    Getter Method
    
    Signature ``PadHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadLength: NXOpen.Expression = ...
    """
    Returns  the length of the pad from front to back 
    
    <hr>
    
    Getter Method
    
    Signature ``PadLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadOffset: NXOpen.Expression = ...
    """
    Returns  the amount to offset from the pad orientation to determine true top of pad 
    
    <hr>
    
    Getter Method
    
    Signature ``PadOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadRadius: NXOpen.Expression = ...
    """
    Returns  the radius of the pad at the back corners 
    
    <hr>
    
    Getter Method
    
    Signature ``PadRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PadWidth: NXOpen.Expression = ...
    """
    Returns  the width of the pad 
    
    <hr>
    
    Getter Method
    
    Signature ``PadWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SlotEndFacesAttributes: DieAttributesBuilder = ...
    """
    Returns  the attributes for the end faces of the slot
    
    <hr>
    
    Getter Method
    
    Signature ``SlotEndFacesAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SlotFacesAttributes: DieAttributesBuilder = ...
    """
    Returns  the attributes for the slot faces 
    
    <hr>
    
    Getter Method
    
    Signature ``SlotFacesAttributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SlotLength: NXOpen.Expression = ...
    """
    Returns  the length of the slot 
    
    <hr>
    
    Getter Method
    
    Signature ``SlotLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SlotRadius: NXOpen.Expression = ...
    """
    Returns  the radius of the back cutout 
    
    <hr>
    
    Getter Method
    
    Signature ``SlotRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SlotWidth: NXOpen.Expression = ...
    """
    Returns  the width of the slot 
    
    <hr>
    
    Getter Method
    
    Signature ``SlotWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Target: NXOpen.SelectNXObject = ...
    """
    Returns  the target solid the clamp slots will be united with 
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TopLength: NXOpen.Expression = ...
    """
    Returns  the distance from the front of the slot to the back cutout 
    
    <hr>
    
    Getter Method
    
    Signature ``TopLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: ClampingSlotBuilderTypes = ...
    """
    Returns or sets  the clamping slot type to build 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.ClampingSlotBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.ClampingSlotBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: ClampingSlotBuilder = ...  # unknown typename


class DieAssistantFlangeProfile(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Die.DieAssistantFlangeProfile`
    
    .. versionadded:: NX5.0.0
    """
    
    def DefineBases(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``DefineBases()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    FlangeDirection: NXOpen.Direction = ...
    """
    Returns or sets  the flange profile flange direction 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlangeDirection`` 
    
    :param flangeDirection: 
    :type flangeDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FlangeEndProfile: NXOpen.ScCollector = ...
    """
    Returns  the flange end profile 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeEndProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FlangeProfile: NXOpen.ScCollector = ...
    """
    Returns  the flange profile 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FlangeProfileDirection: DirectionOption = ...
    """
    Returns or sets  the flange profile direction 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeProfileDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DirectionOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlangeProfileDirection`` 
    
    :param flangeProfileDirection: 
    :type flangeProfileDirection: :py:class:`NXOpen.Die.DirectionOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FlangeSide: bool = ...
    """
    Returns or sets  the flange profile reverse flange side indicator 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlangeSide`` 
    
    :param flangeSide: 
    :type flangeSide: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    FlangeType: DieAssistantFlangeProfileType = ...
    """
    Returns or sets  the flange type 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAssistantFlangeProfileType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlangeType`` 
    
    :param flangeType: 
    :type flangeType: :py:class:`NXOpen.Die.DieAssistantFlangeProfileType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DieAssistantFlangeProfile = ...  # unknown typename


class PressModelRoot(NXOpen.TaggedObject):
    """
    Represents a Die Simulation - Press Model Root.  
    
    This class never built directly by the customer.
    
    .. versionadded:: NX6.0.0
    """
    
    def IsActive(self) -> bool:
        """
        Is the press model active  
        
        Signature ``IsActive()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    Null: PressModelRoot = ...  # unknown typename


class DieAttributesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Die.DieAttributesBuilder`.  
    
    The Die Attributes class is a helper to
    the main Die Design feature to gather the attribute title and value and face color to be applied.
    The attribute will be applied to a face or faces in the application of varying types, such as a
    base face.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateDieAttribute`
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AttributeColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color to be applied to the face, or faces, in the application 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeColor`` 
    
    :param attributeColor: 
    :type attributeColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AttributeTitle: str = ...
    """
    Returns or sets  the title of the attribute to be applied 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeTitle`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeTitle`` 
    
    :param attributeTitle: 
    :type attributeTitle: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AttributeValue: str = ...
    """
    Returns or sets  the value given to the attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeValue`` 
    
    :param attributeValue: 
    :type attributeValue: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DieAttributesBuilder = ...  # unknown typename


class FlangeSteelRibChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Flange Steel Rib Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    Angle: float = ...
    """
    Returns or sets  the angle of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BackDistance: float = ...
    """
    Returns or sets  the back distance of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``BackDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BackDistance`` 
    
    :param backDistance: 
    :type backDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ChamferDistance: float = ...
    """
    Returns or sets  the chamfer distance of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferDistance`` 
    
    :param chamferDistance: 
    :type chamferDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Offset: float = ...
    """
    Returns or sets  the offset of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param offset: 
    :type offset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Plane: NXOpen.ISurface = ...
    """
    Returns or sets  the plane of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SheetMetalDistance: float = ...
    """
    Returns or sets  the sheet metal distance of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetalDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SheetMetalDistance`` 
    
    :param sheetMetalDistance: 
    :type sheetMetalDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Thickness: float = ...
    """
    Returns or sets  the thickness of the Flange Steel Rib 
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Thickness`` 
    
    :param thickness: 
    :type thickness: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UseAngle: int = ...
    """
    Returns or sets  the use angle toggle of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``UseAngle`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``UseAngle`` 
    
    :param useAngle: 
    :type useAngle: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: FlangeSteelRibChildBuilder = ...  # unknown typename


class DrawBeadTaperBuilderTaperTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadTaperBuilderTaperTypes():
    """
    Taper types to define how the slope is created for the bead end. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Spherical", "Create a spherical end based on a radius."
       "Washout", "Create a slope based on the height and length desired."
       "Point", "Use the spherical method, but the radius is defined by a point location and distance to the end of the centerline."
    """
    Spherical = 0  # DrawBeadTaperBuilderTaperTypesMemberType
    Washout = 1  # DrawBeadTaperBuilderTaperTypesMemberType
    Point = 2  # DrawBeadTaperBuilderTaperTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadTaperBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Taper definition for the end of the Die Engineering Draw Bead.  
    
    The taper
    can be defined at the start, end, or both ends of the draw bead and smoothly
    transition the bead back into the sheet body. 
    
    .. versionadded:: NX7.5.0
    """
    
    class TaperTypes():
        """
        Taper types to define how the slope is created for the bead end. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Spherical", "Create a spherical end based on a radius."
           "Washout", "Create a slope based on the height and length desired."
           "Point", "Use the spherical method, but the radius is defined by a point location and distance to the end of the centerline."
        """
        Spherical = 0  # DrawBeadTaperBuilderTaperTypesMemberType
        Washout = 1  # DrawBeadTaperBuilderTaperTypesMemberType
        Point = 2  # DrawBeadTaperBuilderTaperTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    TaperPoint: NXOpen.Point = ...
    """
    Returns or sets  the point used for defining the radius value of the spherical taper.  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaperPoint`` 
    
    :param taperPoint: 
    :type taperPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TaperRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the radius value for a spherical taper.  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TaperType: DrawBeadTaperBuilderTaperTypes = ...
    """
    Returns or sets  the method to apply for defining the taper.  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadTaperBuilderTaperTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaperType`` 
    
    :param taperType: 
    :type taperType: :py:class:`NXOpen.Die.DrawBeadTaperBuilderTaperTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TaperWashoutHeight: NXOpen.Expression = ...
    """
    Returns  the expression containing the height value for a washout taper.  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperWashoutHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TaperWashoutLength: NXOpen.Expression = ...
    """
    Returns  the expression containing the length value for a washout taper.  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperWashoutLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: DrawBeadTaperBuilder = ...  # unknown typename


class DrawBeadSegmentBuilderMaleBeadWidthTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawBeadSegmentBuilderMaleBeadWidthTypes():
    """
    value for how the male width is specified. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "The male bead width is specified by a constant value."
       "Derived", "The male bead width is derived from the width specified for the female."
    """
    Constant = 0  # DrawBeadSegmentBuilderMaleBeadWidthTypesMemberType
    Derived = 1  # DrawBeadSegmentBuilderMaleBeadWidthTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawBeadSegmentBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Segment builder for Die Engineering draw bead.  
    
    The segment is
    defined along the centerline by either a single point (and then the
    next segment) or 2 end points along the segment. 
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DrawBeadBuilder.CreateDrawBeadSegment`
    
    .. versionadded:: NX7.5.0
    """
    
    class MaleBeadWidthTypes():
        """
        value for how the male width is specified. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "The male bead width is specified by a constant value."
           "Derived", "The male bead width is derived from the width specified for the female."
        """
        Constant = 0  # DrawBeadSegmentBuilderMaleBeadWidthTypesMemberType
        Derived = 1  # DrawBeadSegmentBuilderMaleBeadWidthTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndLocation: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the end location along the centerline for this segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FemaleLeftRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the female left radius value.  
    
    <hr>
    
    Getter Method
    
    Signature ``FemaleLeftRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FemaleRightRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the female right radius value.  
    
    <hr>
    
    Getter Method
    
    Signature ``FemaleRightRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Flow: bool = ...
    """
    Returns or sets  the value identifying if the segment is of flow type (the top radius is half the width).  
    
    Only allowed if the bead is symmetric. 
    
    <hr>
    
    Getter Method
    
    Signature ``Flow`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Flow`` 
    
    :param flow: 
    :type flow: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaleBeadHeight: NXOpen.Expression = ...
    """
    Returns  the expression containing the male bead height value.  
    
    The height is measured from the centerline to the top of the bead. 
    
    <hr>
    
    Getter Method
    
    Signature ``MaleBeadHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleBeadWidthType: DrawBeadSegmentBuilderMaleBeadWidthTypes = ...
    """
    Returns or sets  the male bead width type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleBeadWidthType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DrawBeadSegmentBuilderMaleBeadWidthTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaleBeadWidthType`` 
    
    :param maleBeadWidthType: 
    :type maleBeadWidthType: :py:class:`NXOpen.Die.DrawBeadSegmentBuilderMaleBeadWidthTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaleLeftSheetRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the male sheet radius value for the "Left" side.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleLeftSheetRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleLeftTopRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the male top radius value for the "Left" side.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleLeftTopRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleLeftWallAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the male wall angle value for the "Left" side.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleLeftWallAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleLeftWidth: NXOpen.Expression = ...
    """
    Returns  the expression containing the male width value for the "left" side.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleLeftWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleRightSheetRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the male sheet radius value for the "Right" side.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleRightSheetRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleRightTopRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the male top radius value for the "Right" side.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleRightTopRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleRightWallAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the male wall angle value for the "Right" side.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleRightWallAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleRightWidth: NXOpen.Expression = ...
    """
    Returns  the expression containing the male width value for the "Right" side.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaleRightWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaleTransitionLength: NXOpen.Expression = ...
    """
    Returns  the expression containing the male transition length value.  
    
    The transition length is between bead segments. 
    
    <hr>
    
    Getter Method
    
    Signature ``MaleTransitionLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartLocation: NXOpen.GeometricUtilities.OnPathDimensionBuilder = ...
    """
    Returns  the start location along the centerline for this segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.OnPathDimensionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Symmetry: bool = ...
    """
    Returns or sets  the value identifying that the male width is symmetrical about the location and reference direction.  
    
    True indictaes that it is symmetrical. 
    
    <hr>
    
    Getter Method
    
    Signature ``Symmetry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Symmetry`` 
    
    :param symmetry: 
    :type symmetry: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: DrawBeadSegmentBuilder = ...  # unknown typename


class FlangeSteelRibParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Flange Steel Rib Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def CreateChild(self) -> FlangeSteelRibChildBuilder:
        """
        Creates a child Flange Steel Rib.  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.FlangeSteelRibChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, diefsribchild: FlangeSteelRibChildBuilder) -> None:
        """
        Deletes a child Flange Steel Rib.  
        
        Signature ``DeleteChild(diefsribchild)`` 
        
        :param diefsribchild: 
        :type diefsribchild: :py:class:`NXOpen.Die.FlangeSteelRibChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[FlangeSteelRibChildBuilder]':
        """
        Outputs the Flange Steel Rib children  
        
        Signature ``GetChildren()`` 
        
        :returns:  children  
        :rtype: list of :py:class:`NXOpen.Die.FlangeSteelRibChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    Angle: float = ...
    """
    Returns or sets  the angle of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BackDistance: float = ...
    """
    Returns or sets  the back distance of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``BackDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BackDistance`` 
    
    :param backDistance: 
    :type backDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ChamferDistance: float = ...
    """
    Returns or sets  the chamfer distance of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ChamferDistance`` 
    
    :param chamferDistance: 
    :type chamferDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Offset: float = ...
    """
    Returns or sets  the offset of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param offset: 
    :type offset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SheetMetalDistance: float = ...
    """
    Returns or sets  the sheet metal distance of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetalDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SheetMetalDistance`` 
    
    :param sheetMetalDistance: 
    :type sheetMetalDistance: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Thickness: float = ...
    """
    Returns or sets  the thickness of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Thickness`` 
    
    :param thickness: 
    :type thickness: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UseAngle: int = ...
    """
    Returns or sets  the use angle toggle of the Flange Steel Ribs 
    
    <hr>
    
    Getter Method
    
    Signature ``UseAngle`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``UseAngle`` 
    
    :param useAngle: 
    :type useAngle: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: FlangeSteelRibParentBuilder = ...  # unknown typename


class DieAssistantTrimProfile(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Die.DieAssistantTrimProfile`
    
    .. versionadded:: NX5.0.0
    """
    
    def DefineBases(self) -> None:
        """
        TODO: fill in a description for this 
        
        Signature ``DefineBases()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    TrimDirection: NXOpen.Direction = ...
    """
    Returns or sets  the trim profile trim direction 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimDirection`` 
    
    :param trimDirection: 
    :type trimDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    TrimProfile: NXOpen.ScCollector = ...
    """
    Returns  the trim profile 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    TrimProfileDirection: DirectionOption = ...
    """
    Returns or sets  the trim profile direction 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimProfileDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DirectionOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimProfileDirection`` 
    
    :param trimProfileDirection: 
    :type trimProfileDirection: :py:class:`NXOpen.Die.DirectionOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    TrimSide: bool = ...
    """
    Returns or sets  the trim profile reverse trim side indicator 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimSide`` 
    
    :param trimSide: 
    :type trimSide: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: DieAssistantTrimProfile = ...  # unknown typename


class HoleParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Hole Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    def GetHoleAttributes(self) -> tuple:
        """
        Gets the hole attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle, depthTitle, counterBoreDiameterTitle). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of hole faces. diameterTitle is a str.   Title for diameter attribute. depthTitle is a str.   Title for depth attribute. counterBoreDiameterTitle is a str.   Title for counter bore diameter attribute. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str, depthTitle: str, counterBoreDiameterTitle: str) -> None:
        """
        Sets the hole attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetHoleAttributes(title, value, color, diameterTitle, depthTitle, counterBoreDiameterTitle)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of hole faces.  
        :type color: int 
        :param diameterTitle:  Title for diameter attribute.  
        :type diameterTitle: str 
        :param depthTitle:  Title for depth attribute.  
        :type depthTitle: str 
        :param counterBoreDiameterTitle:  Title for counter bore diameter attribute.  
        :type counterBoreDiameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPadAttributes(self) -> tuple:
        """
        Gets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetPadAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of pad faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPadAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetPadAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of pad faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateChild(self) -> HoleChildBuilder:
        """
        Creates a child hole.  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.HoleChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, dieholechild: HoleChildBuilder) -> None:
        """
        Deletes a child hole.  
        
        Signature ``DeleteChild(dieholechild)`` 
        
        :param dieholechild: 
        :type dieholechild: :py:class:`NXOpen.Die.HoleChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[HoleChildBuilder]':
        """
        Outputs the child holes.  
        
        Signature ``GetChildren()`` 
        
        :returns:  The child holes.  
        :rtype: list of :py:class:`NXOpen.Die.HoleChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of die holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CounterBoreDiameter: float = ...
    """
    Returns or sets  the counter bore diameter of die holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``CounterBoreDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CounterBoreDiameter`` 
    
    :param counterBoreDiameter: 
    :type counterBoreDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CreateWithPad: bool = ...
    """
    Returns or sets  the create with pad switch of die holes, if true a pad will be created around the holes, if false the pad will not be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateWithPad`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CreateWithPad`` 
    
    :param createWithPad: 
    :type createWithPad: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Depth: float = ...
    """
    Returns or sets  the depth of die holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Depth`` 
    
    :param depth: 
    :type depth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of die holes, if true the holes will be built into the model, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Diameter: float = ...
    """
    Returns or sets  the diameter of die holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Diameter`` 
    
    :param diameter: 
    :type diameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayHoles: bool = ...
    """
    Returns or sets  the display holes switch of die holes, if true the holes will be built into the model, if false they will not.  
    
    Note that this setting has the same affect as design status, unless the create with pad switch is true. 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayHoles`` 
    
    :param displayHoles: 
    :type displayHoles: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of die holes, if true input data to the holes will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DropThruDiameter: float = ...
    """
    Returns or sets  the drop thru diameter of die holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``DropThruDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DropThruDiameter`` 
    
    :param dropThruDiameter: 
    :type dropThruDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PadDiameter: float = ...
    """
    Returns or sets  the pad diameter of die holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``PadDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PadDiameter`` 
    
    :param padDiameter: 
    :type padDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PadHeight: float = ...
    """
    Returns or sets  the pad height of die holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``PadHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PadHeight`` 
    
    :param padHeight: 
    :type padHeight: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PlaneOffset: float = ...
    """
    Returns or sets  the plane offset of die holes.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneOffset`` 
    
    :param planeOffset: 
    :type planeOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: HoleParentBuilder = ...  # unknown typename


class QuickBinderWrapBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickBinderWrapBuilderTypes():
    """
    Settings for the binder wrap sheet body type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Planar", "Planar"
       "Cylindrical", "Cylidrical"
       "Conical", "Conical"
    """
    Planar = 0  # QuickBinderWrapBuilderTypesMemberType
    Cylindrical = 1  # QuickBinderWrapBuilderTypesMemberType
    Conical = 2  # QuickBinderWrapBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickBinderWrapBuilderEditSizeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickBinderWrapBuilderEditSizeType():
    """
    Settings for the edit size type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Radius", " - "
       "Scale", " - "
    """
    Radius = 0  # QuickBinderWrapBuilderEditSizeTypeMemberType
    Scale = 1  # QuickBinderWrapBuilderEditSizeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickBinderWrapBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Die.QuickBinderWrapBuilder` builder
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX5.0.0
    """
    
    class Types():
        """
        Settings for the binder wrap sheet body type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Planar", "Planar"
           "Cylindrical", "Cylidrical"
           "Conical", "Conical"
        """
        Planar = 0  # QuickBinderWrapBuilderTypesMemberType
        Cylindrical = 1  # QuickBinderWrapBuilderTypesMemberType
        Conical = 2  # QuickBinderWrapBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EditSizeType():
        """
        Settings for the edit size type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Radius", " - "
           "Scale", " - "
        """
        Radius = 0  # QuickBinderWrapBuilderEditSizeTypeMemberType
        Scale = 1  # QuickBinderWrapBuilderEditSizeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Button: NXOpen.SelectBodyList = ...
    """
    Returns  the button 
    
    <hr>
    
    Getter Method
    
    Signature ``Button`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    ChangeRadius: NXOpen.Expression = ...
    """
    Returns  the change radius value 
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    EditSizeChoice: QuickBinderWrapBuilderEditSizeType = ...
    """
    Returns or sets  the edit size choice 
    
    <hr>
    
    Getter Method
    
    Signature ``EditSizeChoice`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.QuickBinderWrapBuilderEditSizeType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditSizeChoice`` 
    
    :param sizeChoice: 
    :type sizeChoice: :py:class:`NXOpen.Die.QuickBinderWrapBuilderEditSizeType` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Matrix: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the rotation matrix 
    
    <hr>
    
    Getter Method
    
    Signature ``Matrix`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Matrix`` 
    
    :param matrix: 
    :type matrix: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Origin: NXOpen.Point3d = ...
    """
    Returns or sets  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Type: QuickBinderWrapBuilderTypes = ...
    """
    Returns or sets  the method 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.QuickBinderWrapBuilderTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.QuickBinderWrapBuilderTypes` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    UMaximum: NXOpen.Expression = ...
    """
    Returns  the maximum U value 
    
    <hr>
    
    Getter Method
    
    Signature ``UMaximum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    UMinimum: NXOpen.Expression = ...
    """
    Returns  the minumum U value 
    
    <hr>
    
    Getter Method
    
    Signature ``UMinimum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    VMaximum: NXOpen.Expression = ...
    """
    Returns  the maximum V value 
    
    <hr>
    
    Getter Method
    
    Signature ``VMaximum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    VMinimum: NXOpen.Expression = ...
    """
    Returns  the minumum V value 
    
    <hr>
    
    Getter Method
    
    Signature ``VMinimum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: QuickBinderWrapBuilder = ...  # unknown typename


class FingerClearanceNotchBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FingerClearanceNotchBuilderTypes():
    """
    Specifies what type of base geometry to build the finger clearance notch from. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Section", "Build from an open section profile."
       "Face", "Build from either a single face or a set of connected faces."
       "SheetBody", "Build from either a sheet body or a solid body."
    """
    Section = 0  # FingerClearanceNotchBuilderTypesMemberType
    Face = 1  # FingerClearanceNotchBuilderTypesMemberType
    SheetBody = 2  # FingerClearanceNotchBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FingerClearanceNotchBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a builder that is used to create or edit a :py:class:`NXOpen.Die.FingerClearanceNotch` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CreateFingerClearanceNotchBuilder`
    
    Default values.
    
    ===================  ========================================
    Property             Value
    ===================  ========================================
    Depth.Value          5 (millimeters part), 0.2 (inches part) 
    -------------------  ----------------------------------------
    ExtrudeWidth.Value   0 (millimeters part), 0 (inches part) 
    -------------------  ----------------------------------------
    Width.Value          5 (millimeters part), 0.2 (inches part) 
    ===================  ========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Specifies what type of base geometry to build the finger clearance notch from. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Section", "Build from an open section profile."
           "Face", "Build from either a single face or a set of connected faces."
           "SheetBody", "Build from either a sheet body or a solid body."
        """
        Section = 0  # FingerClearanceNotchBuilderTypesMemberType
        Face = 1  # FingerClearanceNotchBuilderTypesMemberType
        SheetBody = 2  # FingerClearanceNotchBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Attributes: DieAttributesBuilder = ...
    """
    Returns  the attribute title, value and face color to apply to the notch faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``Attributes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieAttributesBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BaseOrientation: DiePlaneBuilder = ...
    """
    Returns  the plane defining the base of the target solid.  
    
    Used to orient the extrude and clearance directions. 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ClearanceDirection: DieDirectionBuilder = ...
    """
    Returns  the direction (pointing away from the solid) in which to clear material from the target solid.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieDirectionBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Depth: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the clearance to provide into the target solid.  
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExtrudeWidth: NXOpen.Expression = ...
    """
    Returns  the expression containing the value to use to extrude the section.  
    
    The extrusion direction is specified by the cross product of the base orientation and the clearance direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Geometry: NXOpen.SelectNXObjectList = ...
    """
    Returns  the geometry to use as the definition of the notch.  
    
    A single face or multiple connected faces can be specified, or a single sheet or body may be specified. 
    Only valid when type is :py:class:`Die.FingerClearanceNotchBuilderTypes.Face <Die.FingerClearanceNotchBuilderTypes>` or :py:class:`Die.FingerClearanceNotchBuilderTypes.SheetBody <Die.FingerClearanceNotchBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the value to apply, for the purpose of reversing, to the derived clearance direction if a face or sheet body is specified.  
    
    If TRUE, then the derived direction will be flipped. 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Section: NXOpen.Section = ...
    """
    Returns  the open section constructed from curves, edges, or a sketch.  
    
    Only valid when type is :py:class:`Die.FingerClearanceNotchBuilderTypes.Section <Die.FingerClearanceNotchBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Section`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Target: NXOpen.SelectBody = ...
    """
    Returns  the target solid the finger clearance notch will be subtracted from.  
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: FingerClearanceNotchBuilderTypes = ...
    """
    Returns or sets  the indicator specifying the type of input data that defines how to build the notch.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.FingerClearanceNotchBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Die.FingerClearanceNotchBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the clearance to provide on either side of the notch.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: FingerClearanceNotchBuilder = ...  # unknown typename


class KeywayChildBuilderRunoffTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class KeywayChildBuilderRunoffTypeOption():
    """
    Settings for the runoff type of the keyway. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangular", "Rectangular runoff."
       "Circular", "Circular runoff."
    """
    Rectangular = 0  # KeywayChildBuilderRunoffTypeOptionMemberType
    Circular = 1  # KeywayChildBuilderRunoffTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class KeywayChildBuilderLocationOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class KeywayChildBuilderLocationOption():
    """
    Settings for the location of the keyway. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PositiveX", "Keyway built in positive x direction."
       "NegativeX", "Keyway built in negative x direction."
       "PositiveY", "Keyway built in positive y direction."
       "NegativeY", "Keyway built in negative y direction."
    """
    PositiveX = 0  # KeywayChildBuilderLocationOptionMemberType
    NegativeX = 1  # KeywayChildBuilderLocationOptionMemberType
    PositiveY = 2  # KeywayChildBuilderLocationOptionMemberType
    NegativeY = 3  # KeywayChildBuilderLocationOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class KeywayChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Keyway Child sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class RunoffTypeOption():
        """
        Settings for the runoff type of the keyway. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangular", "Rectangular runoff."
           "Circular", "Circular runoff."
        """
        Rectangular = 0  # KeywayChildBuilderRunoffTypeOptionMemberType
        Circular = 1  # KeywayChildBuilderRunoffTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LocationOption():
        """
        Settings for the location of the keyway. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PositiveX", "Keyway built in positive x direction."
           "NegativeX", "Keyway built in negative x direction."
           "PositiveY", "Keyway built in positive y direction."
           "NegativeY", "Keyway built in negative y direction."
        """
        PositiveX = 0  # KeywayChildBuilderLocationOptionMemberType
        NegativeX = 1  # KeywayChildBuilderLocationOptionMemberType
        PositiveY = 2  # KeywayChildBuilderLocationOptionMemberType
        NegativeY = 3  # KeywayChildBuilderLocationOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetSlotAttributes(self) -> tuple:
        """
        Gets the slot attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetSlotAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of slot faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetSlotAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the slot attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetSlotAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of slot faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPadAttributes(self) -> tuple:
        """
        Gets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetPadAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of pad faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPadAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetPadAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of pad faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Depth: float = ...
    """
    Returns or sets  the depth of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``Depth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Depth`` 
    
    :param depth: 
    :type depth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of the keyway, if true the keyway will be built into the model, if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of the keyway, if true input data to the keyway will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Length: float = ...
    """
    Returns or sets  the length of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Length`` 
    
    :param length: 
    :type length: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Location: KeywayChildBuilderLocationOption = ...
    """
    Returns or sets  the location of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.KeywayChildBuilderLocationOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Location`` 
    
    :param location: 
    :type location: :py:class:`NXOpen.Die.KeywayChildBuilderLocationOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MinimumRibHeight: float = ...
    """
    Returns or sets  the minimum rib height of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumRibHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumRibHeight`` 
    
    :param minimumRibHeight: 
    :type minimumRibHeight: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Offset: float = ...
    """
    Returns or sets  the offset of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param offset: 
    :type offset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PadHeight: float = ...
    """
    Returns or sets  the pad height of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``PadHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PadHeight`` 
    
    :param padHeight: 
    :type padHeight: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PadWidth: float = ...
    """
    Returns or sets  the pad width of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``PadWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PadWidth`` 
    
    :param padWidth: 
    :type padWidth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PlacementOffset: float = ...
    """
    Returns or sets  the placement offset of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementOffset`` 
    
    :param placementOffset: 
    :type placementOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Plane: NXOpen.IOrientation = ...
    """
    Returns or sets  the plane of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.IOrientation` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReverseOrientation: bool = ...
    """
    Returns or sets  the value to reverse the orientation of the orientation plane,
    if true the keyway orientation normal will be reversed,
    if false it will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseOrientation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseOrientation`` 
    
    :param reverseOrientation: 
    :type reverseOrientation: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffDepth: float = ...
    """
    Returns or sets  the runoff depth of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffDepth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffDepth`` 
    
    :param runoffDepth: 
    :type runoffDepth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffDiameter: float = ...
    """
    Returns or sets  the runoff diameter of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffDiameter`` 
    
    :param runoffDiameter: 
    :type runoffDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffLength: float = ...
    """
    Returns or sets  the runoff length of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffLength`` 
    
    :param runoffLength: 
    :type runoffLength: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffType: KeywayChildBuilderRunoffTypeOption = ...
    """
    Returns or sets  the runoff type of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.KeywayChildBuilderRunoffTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffType`` 
    
    :param runoffType: 
    :type runoffType: :py:class:`NXOpen.Die.KeywayChildBuilderRunoffTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RunoffWidth: float = ...
    """
    Returns or sets  the runoff width of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``RunoffWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``RunoffWidth`` 
    
    :param runoffWidth: 
    :type runoffWidth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: float = ...
    """
    Returns or sets  the width of the keyway.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: KeywayChildBuilder = ...  # unknown typename


class WearPlateLocChildBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WearPlateLocChildBuilderPositionType():
    """
    Settings for the positioning of the locator relative to the wear plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", "Position locator to the left of the wear plate."
       "Right", "Position locator to the right of the wear plate."
       "Both", "Position locator on both sides of the wear plate."
       "Neither", "No locators."
    """
    Left = 0  # WearPlateLocChildBuilderPositionTypeMemberType
    Right = 1  # WearPlateLocChildBuilderPositionTypeMemberType
    Both = 2  # WearPlateLocChildBuilderPositionTypeMemberType
    Neither = 3  # WearPlateLocChildBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WearPlateLocChildBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Wear Plate Locator sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class PositionType():
        """
        Settings for the positioning of the locator relative to the wear plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", "Position locator to the left of the wear plate."
           "Right", "Position locator to the right of the wear plate."
           "Both", "Position locator on both sides of the wear plate."
           "Neither", "No locators."
        """
        Left = 0  # WearPlateLocChildBuilderPositionTypeMemberType
        Right = 1  # WearPlateLocChildBuilderPositionTypeMemberType
        Both = 2  # WearPlateLocChildBuilderPositionTypeMemberType
        Neither = 3  # WearPlateLocChildBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetPoint(self, pointLocation: str) -> None:
        """
        Signature ``SetPoint(pointLocation)`` 
        
        :param pointLocation:  Length along centerline expression value  
        :type pointLocation: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetWearPlateWidth(self, width: str) -> None:
        """
        Signature ``SetWearPlateWidth(width)`` 
        
        :param width:  Expression Value  
        :type width: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetWearPlateLength(self, length: str) -> None:
        """
        Signature ``SetWearPlateLength(length)`` 
        
        :param length:  Expression Value  
        :type length: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetLocatorWidth(self, width: str) -> None:
        """
        Signature ``SetLocatorWidth(width)`` 
        
        :param width:  Expression Value  
        :type width: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetLocatorDepth(self, depth: str) -> None:
        """
        Signature ``SetLocatorDepth(depth)`` 
        
        :param depth:  Expression Value  
        :type depth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetRibSupportWidth(self, ribSupportWidth: str) -> None:
        """
        Signature ``SetRibSupportWidth(ribSupportWidth)`` 
        
        :param ribSupportWidth:  Expression Value  
        :type ribSupportWidth: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPadAttributes(self) -> tuple:
        """
        Gets the pad attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``GetPadAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of pad faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPadAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the pad attributes, note existance of attributes depends on usage in
        main feature 
        
        Signature ``SetPadAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of pad faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetReliefAttributes(self) -> tuple:
        """
        Gets the relief attributes 
        
        Signature ``GetReliefAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of relief faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetReliefAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the relief attributes 
        
        Signature ``SetReliefAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of relief faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetRecessAttributes(self) -> tuple:
        """
        Gets the recess attributes 
        
        Signature ``GetRecessAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   title for attribute value is a str.   value of attribute color is a int.   color of recess faces 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetRecessAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the recess attributes 
        
        Signature ``SetRecessAttributes(title, value, color)`` 
        
        :param title:  title for attribute  
        :type title: str 
        :param value:  value of attribute  
        :type value: str 
        :param color:  color of recess faces  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LocatorDepth: NXOpen.Expression = ...
    """
    Returns  the locator depth of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``LocatorDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LocatorPosition: WearPlateLocChildBuilderPositionType = ...
    """
    Returns or sets  the locator position of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``LocatorPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.WearPlateLocChildBuilderPositionType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LocatorPosition`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Die.WearPlateLocChildBuilderPositionType` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LocatorWidth: NXOpen.Expression = ...
    """
    Returns  the locator width of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``LocatorWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Orientation: NXOpen.ISurface = ...
    """
    Returns or sets  the orientation plane of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.ISurface` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Point: NXOpen.Expression = ...
    """
    Returns  the point location along the centerline of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReverseNormal: int = ...
    """
    Returns or sets  the reverse normal setting of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseNormal`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseNormal`` 
    
    :param reverseNormal: 
    :type reverseNormal: int 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    RibSupportWidth: NXOpen.Expression = ...
    """
    Returns  the wear plate rib support width of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``RibSupportWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WearPlateLength: NXOpen.Expression = ...
    """
    Returns  the wear plate length of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``WearPlateLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WearPlateWidth: NXOpen.Expression = ...
    """
    Returns  the wear plate width of die wear plate and locators 
    
    <hr>
    
    Getter Method
    
    Signature ``WearPlateWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: WearPlateLocChildBuilder = ...  # unknown typename


class PadParentBuilderShapeTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PadParentBuilderShapeTypeOption():
    """
    Settings for the shape type of the die pads. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangular", "Rectangular pad."
       "Circular", "Circular pad."
       "Curve", "Curve defined pad."
    """
    Rectangular = 0  # PadParentBuilderShapeTypeOptionMemberType
    Circular = 1  # PadParentBuilderShapeTypeOptionMemberType
    Curve = 2  # PadParentBuilderShapeTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PadParentBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Die Pad Parent sub feature.  
    
    This sub feature is created via the main feature builder.
    
    .. versionadded:: NX4.0.0
    """
    
    class ShapeTypeOption():
        """
        Settings for the shape type of the die pads. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangular", "Rectangular pad."
           "Circular", "Circular pad."
           "Curve", "Curve defined pad."
        """
        Rectangular = 0  # PadParentBuilderShapeTypeOptionMemberType
        Circular = 1  # PadParentBuilderShapeTypeOptionMemberType
        Curve = 2  # PadParentBuilderShapeTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetHoleAttributes(self) -> tuple:
        """
        Gets the hole attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetHoleAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color, diameterTitle). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of hole faces. diameterTitle is a str.   Title for diameter attribute. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetHoleAttributes(self, title: str, value: str, color: int, diameterTitle: str) -> None:
        """
        Sets the hole attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetHoleAttributes(title, value, color, diameterTitle)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of hole faces.  
        :type color: int 
        :param diameterTitle:  Title for diameter attribute.  
        :type diameterTitle: str 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetPadAttributes(self) -> tuple:
        """
        Gets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetPadAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of pad faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetPadAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the pad attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetPadAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of pad faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetReliefAttributes(self) -> tuple:
        """
        Gets the relief attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``GetReliefAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (title, value, color). title is a str.   Title for attribute. value is a str.   Value of attribute. color is a int.   Color of relief faces. 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def SetReliefAttributes(self, title: str, value: str, color: int) -> None:
        """
        Sets the relief attributes, note existance of attributes depends on usage in
        main feature.  
        
        Signature ``SetReliefAttributes(title, value, color)`` 
        
        :param title:  Title for attribute.  
        :type title: str 
        :param value:  Value of attribute.  
        :type value: str 
        :param color:  Color of relief faces.  
        :type color: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateChild(self) -> PadChildBuilder:
        """
        Creates a child pad.  
        
        Signature ``CreateChild()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Die.PadChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def DeleteChild(self, diepadchild: PadChildBuilder) -> None:
        """
        Deletes a child pad.  
        
        Signature ``DeleteChild(diepadchild)`` 
        
        :param diepadchild: 
        :type diepadchild: :py:class:`NXOpen.Die.PadChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def GetChildren(self) -> 'list[PadChildBuilder]':
        """
        Outputs the child pads.  
        
        Signature ``GetChildren()`` 
        
        :returns:  The child pads.  
        :rtype: list of :py:class:`NXOpen.Die.PadChildBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BuildStatus: DieBuildStatusOption = ...
    """
    Returns  the build status of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuildStatus`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DieBuildStatusOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CenterHole: bool = ...
    """
    Returns or sets  the center hole switch of die pads, if true the center hole will be created in the pads, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``CenterHole`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CenterHole`` 
    
    :param centerHole: 
    :type centerHole: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DesignStatus: bool = ...
    """
    Returns or sets  the design status of die pads, if true the pads will be built into the model, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DesignStatus`` 
    
    :param designStatus: 
    :type designStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Diameter: float = ...
    """
    Returns or sets  the diameter of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Diameter`` 
    
    :param diameter: 
    :type diameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DisplayStatus: bool = ...
    """
    Returns or sets  the display status of die pads, if true input data to the pads will be displayed, 
    if false the input data will not be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayStatus`` 
    
    :param displayStatus: 
    :type displayStatus: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Height: float = ...
    """
    Returns or sets  the height of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height: 
    :type height: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    HoleDiameter: float = ...
    """
    Returns or sets  the hole diameter of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``HoleDiameter`` 
    
    :param holeDiameter: 
    :type holeDiameter: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Length: float = ...
    """
    Returns or sets  the length of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Length`` 
    
    :param length: 
    :type length: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LocationOffset: float = ...
    """
    Returns or sets  the location offset of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``LocationOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LocationOffset`` 
    
    :param locationOffset: 
    :type locationOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Relief: bool = ...
    """
    Returns or sets  the relief switch of die pads, if true the relief will be built around the pads, if false they will not.  
    
    <hr>
    
    Getter Method
    
    Signature ``Relief`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Relief`` 
    
    :param relief: 
    :type relief: bool 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefDepth: float = ...
    """
    Returns or sets  the relief depth of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefDepth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefDepth`` 
    
    :param reliefDepth: 
    :type reliefDepth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefWidth: float = ...
    """
    Returns or sets  the relief width of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefWidth`` 
    
    :param reliefWidth: 
    :type reliefWidth: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ShapeType: PadParentBuilderShapeTypeOption = ...
    """
    Returns or sets  the shape type of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.PadParentBuilderShapeTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ShapeType`` 
    
    :param shapeType: 
    :type shapeType: :py:class:`NXOpen.Die.PadParentBuilderShapeTypeOption` 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SurfaceOffset: float = ...
    """
    Returns or sets  the surface offset of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceOffset`` 
    
    :param surfaceOffset: 
    :type surfaceOffset: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Width: float = ...
    """
    Returns or sets  the width of die pads.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX4.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: PadParentBuilder = ...  # unknown typename


class CastReliefBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Die.CastReliefBuilder` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Die.DieCollection.CastRelief`
    
    Default values.
    
    =====================  ===============================================
    Property               Value
    =====================  ===============================================
    AngleTolerance         0.5 
    ---------------------  -----------------------------------------------
    CreateSupportCasting   0 
    ---------------------  -----------------------------------------------
    DistanceTolerance      0.0254 (millimeters part), 0.001 (inches part) 
    ---------------------  -----------------------------------------------
    ReliefDepth.Value      5 (millimeters part), 0.2 (inches part) 
    ---------------------  -----------------------------------------------
    Thickness.Value        35 (millimeters part), 1.4 (inches part) 
    =====================  ===============================================
    
    .. versionadded:: NX6.0.0
    """
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseOrientation: DiePlaneBuilder = ...
    """
    Returns  the base orientation of the die casting used for orienting the relief construction 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Die.DiePlaneBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CreateSupportCasting: bool = ...
    """
    Returns or sets  the value (true or false) to decide if support casting should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateSupportCasting`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateSupportCasting`` 
    
    :param createSupportCasting: 
    :type createSupportCasting: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefDepth: NXOpen.Expression = ...
    """
    Returns  the depth value of the relief 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefDepth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReliefProfile: NXOpen.Section = ...
    """
    Returns  the closed profiles used for determining the relief 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReliefSheet: NXOpen.SelectNXObject = ...
    """
    Returns  the sheet to offset to specify the relief surface 
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SheetMetal: NXOpen.SelectNXObject = ...
    """
    Returns  the sheet that specifies the sheet metal surface 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Target: NXOpen.SelectNXObject = ...
    """
    Returns  the target solid the relief will be united with 
    
    <hr>
    
    Getter Method
    
    Signature ``Target`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Thickness: NXOpen.Expression = ...
    """
    Returns  the thickness value of the support casting surrounding the relief 
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: CastReliefBuilder = ...  # unknown typename


class DrawBead(NXOpen.Features.BodyFeature):
    """
    Represents a draw bead feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Die.DrawBeadBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: DrawBead = ...  # unknown typename


