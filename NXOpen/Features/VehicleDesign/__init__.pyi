# module 'NXOpen.Features.VehicleDesign'
#
# Automatically generated 2025-06-09T14:38:46.555767
#

import typing

import NXOpen
import NXOpen.Assemblies
import NXOpen.Features
import NXOpen.GeometricUtilities
import NXOpen.PDM



class VehicleCoordinateSystem(NXOpen.Features.Feature):
    """
    Represents a vehicle coordinate system feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.VehicleCoordinateSystemBuilder`
    
    .. versionadded:: NX7.0.0
    """
    Null: VehicleCoordinateSystem = ...  # unknown typename


class OilPanBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OilPanBuilderRequirementsControlType():
    """
    Represents the requirements control types to define the oil pan. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", " - "
       "UserDefined", " - "
    """
    StandardDriven = 0  # OilPanBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # OilPanBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OilPanBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OilPanBuilderPositionType():
    """
    Represents the oil pan positions. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Front", " - "
       "Rear", " - "
       "Middle", " - "
    """
    Front = 0  # OilPanBuilderPositionTypeMemberType
    Rear = 1  # OilPanBuilderPositionTypeMemberType
    Middle = 2  # OilPanBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OilPanBuilderVisualizationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OilPanBuilderVisualizationType():
    """
    Represents the visualization types of the output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", " - "
       "Surface", " - "
       "CurveandSurface", " - "
    """
    Curve = 0  # OilPanBuilderVisualizationTypeMemberType
    Surface = 1  # OilPanBuilderVisualizationTypeMemberType
    CurveandSurface = 2  # OilPanBuilderVisualizationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OilPanBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.OilPan` builder to create and edit a vehicle design oil pan.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateOilPanBuilder`
    
    Default values.
    
    ========================  ==========================================
    Property                  Value
    ========================  ==========================================
    InnerAngle.Value          35 
    ------------------------  ------------------------------------------
    InnerOffset.Value         155 (millimeters part), 6 (inches part) 
    ------------------------  ------------------------------------------
    OuterAngle.Value          4.5 
    ------------------------  ------------------------------------------
    OuterOffset.Value         182 (millimeters part), 7.2 (inches part) 
    ------------------------  ------------------------------------------
    Position                  Front 
    ------------------------  ------------------------------------------
    RequirementsControl       StandardDriven 
    ------------------------  ------------------------------------------
    ShowDistanceMeasurement   0 
    ------------------------  ------------------------------------------
    Visualization             Curve 
    ========================  ==========================================
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlType():
        """
        Represents the requirements control types to define the oil pan. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", " - "
           "UserDefined", " - "
        """
        StandardDriven = 0  # OilPanBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # OilPanBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionType():
        """
        Represents the oil pan positions. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Front", " - "
           "Rear", " - "
           "Middle", " - "
        """
        Front = 0  # OilPanBuilderPositionTypeMemberType
        Rear = 1  # OilPanBuilderPositionTypeMemberType
        Middle = 2  # OilPanBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VisualizationType():
        """
        Represents the visualization types of the output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", " - "
           "Surface", " - "
           "CurveandSurface", " - "
        """
        Curve = 0  # OilPanBuilderVisualizationTypeMemberType
        Surface = 1  # OilPanBuilderVisualizationTypeMemberType
        CurveandSurface = 2  # OilPanBuilderVisualizationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CarBodyFaces: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the car body geometry for the measurment.  
    
    <hr>
    
    Getter Method
    
    Signature ``CarBodyFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    InnerAngle: NXOpen.Expression = ...
    """
    Returns  the inner angle only when the position type isn't :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderPositionType.Middle <NXOpen.Features.VehicleDesign.OilPanBuilderPositionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``InnerAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    InnerOffset: NXOpen.Expression = ...
    """
    Returns  the inner offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``InnerOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Loading: str = ...
    """
    Returns or sets  the loading used in the oil pan.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OuterAngle: NXOpen.Expression = ...
    """
    Returns  the outer angle only when the position type isn't :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderPositionType.Middle <NXOpen.Features.VehicleDesign.OilPanBuilderPositionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``OuterAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    OuterOffset: NXOpen.Expression = ...
    """
    Returns  the outer offset only when the position type isn't :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderPositionType.Middle <NXOpen.Features.VehicleDesign.OilPanBuilderPositionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``OuterOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Position: OilPanBuilderPositionType = ...
    """
    Returns or sets  the oil pan position.  
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RequirementsControl: OilPanBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control for standard driven or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirementsControl: 
    :type requirementsControl: :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowDistanceMeasurement: bool = ...
    """
    Returns or sets  the indication if the distance measurement will be shown.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :param showDistanceMeasurement: 
    :type showDistanceMeasurement: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard used to define the oil pan.  
    
    Only used when the requirements control type is :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderRequirementsControlType.StandardDriven <NXOpen.Features.VehicleDesign.OilPanBuilderRequirementsControlType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Visualization: OilPanBuilderVisualizationType = ...
    """
    Returns or sets  the visualization type of the oil pan output.  
    
    <hr>
    
    Getter Method
    
    Signature ``Visualization`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Visualization`` 
    
    :param visualization: 
    :type visualization: :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: OilPanBuilder = ...  # unknown typename


class BaseDataSourceBuilderBaseDataSourceOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseDataSourceBuilderBaseDataSourceOption():
    """
    Represents the base data source option, you can select one component or display part which contains the
    Base Data feature group for current work part.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SelectComponent", "Component which contains Base Data feature group."
       "DisplayPart", " - "
    """
    SelectComponent = 0  # BaseDataSourceBuilderBaseDataSourceOptionMemberType
    DisplayPart = 1  # BaseDataSourceBuilderBaseDataSourceOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseDataSourceBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.BaseDataSourceBuilder` builder,
    which set the base data source for work part in assembly context.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateBaseDataSourceBuilder`
    
    .. versionadded:: NX11.0.1
    """
    
    class BaseDataSourceOption():
        """
        Represents the base data source option, you can select one component or display part which contains the
        Base Data feature group for current work part.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SelectComponent", "Component which contains Base Data feature group."
           "DisplayPart", " - "
        """
        SelectComponent = 0  # BaseDataSourceBuilderBaseDataSourceOptionMemberType
        DisplayPart = 1  # BaseDataSourceBuilderBaseDataSourceOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BaseDataSource: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the base data source for work part.  
    
    This is effective for select component method.
    
    <hr>
    
    Getter Method
    
    Signature ``BaseDataSource`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    BaseDataSourceMethod: BaseDataSourceBuilderBaseDataSourceOption = ...
    """
    Returns or sets  the base data source option, the component selected or display part should contain Base Data feature group 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseDataSourceMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataSourceBuilderBaseDataSourceOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseDataSourceMethod`` 
    
    :param baseDataSourceOption: 
    :type baseDataSourceOption: :py:class:`NXOpen.Features.VehicleDesign.BaseDataSourceBuilderBaseDataSourceOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DelayUpdate: bool = ...
    """
    Returns or sets  the method to set update delay option between assembly components.  
    
    <hr>
    
    Getter Method
    
    Signature ``DelayUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DelayUpdate`` 
    
    :param delayUpdate: 
    :type delayUpdate: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RemoveBaseDataAttr: bool = ...
    """
    Returns or sets  the method to remove Base Data attribute of work part, it is a locked attribute.  
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveBaseDataAttr`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveBaseDataAttr`` 
    
    :param removeBaseDataAttr: 
    :type removeBaseDataAttr: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RemoveBaseDataSourceAttr: bool = ...
    """
    Returns or sets  the method to remove Base Data Source attribute of work part, it is a locked attribute.  
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveBaseDataSourceAttr`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveBaseDataSourceAttr`` 
    
    :param removeBaseDataSourceAttr: 
    :type removeBaseDataSourceAttr: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: BaseDataSourceBuilder = ...  # unknown typename


class HeadImpactSideRail(NXOpen.Features.BodyFeature):
    """
    Represents a head impact side rail feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRailBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpactSideRail = ...  # unknown typename


class HeadImpactUpperRoofDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoofDetailBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateGeometry: bool = ...
    """
    Returns or sets  the create construction geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGeometry`` 
    
    :param createGeometry: 
    :type createGeometry: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    D1: NXOpen.Expression = ...
    """
    Returns  the calculated horizontal distance between plane A and plane B.  
    
    <hr>
    
    Getter Method
    
    Signature ``D1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    D2: NXOpen.Expression = ...
    """
    Returns  the calculated horizontal distance between plane C and plane D.  
    
    <hr>
    
    Getter Method
    
    Signature ``D2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PointA: NXOpen.Point = ...
    """
    Returns or sets  the point A additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointA`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointA`` 
    
    :param pointA: 
    :type pointA: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointAFlag: bool = ...
    """
    Returns or sets  the point A additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointAFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointAFlag`` 
    
    :param pointAFlag: 
    :type pointAFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointB: NXOpen.Point = ...
    """
    Returns or sets  the point B additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointB`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointB`` 
    
    :param pointB: 
    :type pointB: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointBFlag: bool = ...
    """
    Returns or sets  the point B additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointBFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointBFlag`` 
    
    :param pointBFlag: 
    :type pointBFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointC: NXOpen.Point = ...
    """
    Returns or sets  the point C additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointC`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointC`` 
    
    :param pointC: 
    :type pointC: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointCFlag: bool = ...
    """
    Returns or sets  the point C additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointCFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointCFlag`` 
    
    :param pointCFlag: 
    :type pointCFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointD: NXOpen.Point = ...
    """
    Returns or sets  the point D additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointD`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointD`` 
    
    :param pointD: 
    :type pointD: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointDFlag: bool = ...
    """
    Returns or sets  the point D additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointDFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointDFlag`` 
    
    :param pointDFlag: 
    :type pointDFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointM: NXOpen.Point = ...
    """
    Returns or sets  the point M alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointM`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointM`` 
    
    :param pointM: 
    :type pointM: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointMFlag: bool = ...
    """
    Returns or sets  the point M alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointMFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointMFlag`` 
    
    :param pointMFlag: 
    :type pointMFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReqVerticalMax: NXOpen.Expression = ...
    """
    Returns  the vertical maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMin: NXOpen.Expression = ...
    """
    Returns  the vertical minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RoofOffset: NXOpen.Expression = ...
    """
    Returns  the offset used to position point C and point D.  
    
    <hr>
    
    Getter Method
    
    Signature ``RoofOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RoofRatio: NXOpen.Expression = ...
    """
    Returns  the ratio used to locate planes E, F, G, and H.  
    
    <hr>
    
    Getter Method
    
    Signature ``RoofRatio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactUpperRoofDetailBuilder = ...  # unknown typename


class DynamicCurb(NXOpen.Features.BodyFeature):
    """
    Represents a dynamic curb feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: DynamicCurb = ...  # unknown typename


class BaseDataImportExportBuilderOperateOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseDataImportExportBuilderOperateOptions():
    """
    This enum represents the import or export operate options
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Import", " - "
       "Export", " - "
    """
    Import = 0  # BaseDataImportExportBuilderOperateOptionsMemberType
    Export = 1  # BaseDataImportExportBuilderOperateOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseDataImportExportBuilderExportOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseDataImportExportBuilderExportOptions():
    """
    This enum represents the option to indicate if the expressions are to be exported to a new item or an existing item in Teamcenter.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NewItem", " - "
       "ExistingItem", " - "
    """
    NewItem = 0  # BaseDataImportExportBuilderExportOptionsMemberType
    ExistingItem = 1  # BaseDataImportExportBuilderExportOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseDataImportExportBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.BaseDataImportExportBuilder` 
    builder used to import and export expressions from and to a spreadsheet.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateBaseDataImportExportBuilder`
    
    Default values.
    
    ============================  ========
    Property                      Value
    ============================  ========
    ExportOption                  NewItem 
    ----------------------------  --------
    OperateOption                 Import 
    ----------------------------  --------
    OverrideExistingExpressions   0 
    ============================  ========
    
    .. versionadded:: NX8.5.0
    """
    
    class OperateOptions():
        """
        This enum represents the import or export operate options
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Import", " - "
           "Export", " - "
        """
        Import = 0  # BaseDataImportExportBuilderOperateOptionsMemberType
        Export = 1  # BaseDataImportExportBuilderOperateOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ExportOptions():
        """
        This enum represents the option to indicate if the expressions are to be exported to a new item or an existing item in Teamcenter.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NewItem", " - "
           "ExistingItem", " - "
        """
        NewItem = 0  # BaseDataImportExportBuilderExportOptionsMemberType
        ExistingItem = 1  # BaseDataImportExportBuilderExportOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AssignItemNumber(self) -> tuple:
        """
        Used to assign Item number and revision in Teamcenter .  
        
        Signature ``AssignItemNumber()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (itemId, itemName, itemRevision, idSensitivity, revSensitivity). itemId is a str. itemName is a str. itemRevision is a str. idSensitivity is a bool. revSensitivity is a bool. 
        
        .. versionadded:: NX8.5.0
        
        License requirements: gateway ("UG GATEWAY")
        """
        ...
    
    
    def AssignItemRevision(self, itemId: str) -> tuple:
        """
        Used to assign Item revision in Teamcenter.  
        
        Signature ``AssignItemRevision(itemId)`` 
        
        :param itemId: 
        :type itemId: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (itemRevision, revSensitivity). itemRevision is a str. revSensitivity is a bool. 
        
        .. versionadded:: NX8.5.0
        
        License requirements: gateway ("UG GATEWAY")
        """
        ...
    
    
    def SetObjectCreateBuilder(self, objectCreateBuilder: NXOpen.PDM.ObjectCreateBuilder) -> None:
        """
        Sets :py:class:`NXOpen.PDM.ObjectCreateBuilder` 
        
        Signature ``SetObjectCreateBuilder(objectCreateBuilder)`` 
        
        :param objectCreateBuilder: 
        :type objectCreateBuilder: :py:class:`NXOpen.PDM.ObjectCreateBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: gateway ("UG GATEWAY")
        """
        ...
    
    DatasetName: str = ...
    """
    Returns or sets  the name of the Teamcenter dataset from which the spreadsheet is to be imported from or exported to.  
    
    <hr>
    
    Getter Method
    
    Signature ``DatasetName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatasetName`` 
    
    :param datasetName: 
    :type datasetName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: gateway ("UG GATEWAY")
    """
    ExportOption: BaseDataImportExportBuilderExportOptions = ...
    """
    Returns or sets  the option which indicates if the expressions are to be exported a new create item or an existing item in Teamcenter.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExportOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataImportExportBuilderExportOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExportOption`` 
    
    :param exportOption: 
    :type exportOption: :py:class:`NXOpen.Features.VehicleDesign.BaseDataImportExportBuilderExportOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: gateway ("UG GATEWAY")
    """
    OperateOption: BaseDataImportExportBuilderOperateOptions = ...
    """
    Returns or sets  the option which indicates if the spreadsheet is to be imported or exported.  
    
    <hr>
    
    Getter Method
    
    Signature ``OperateOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataImportExportBuilderOperateOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OperateOption`` 
    
    :param operateOptions: 
    :type operateOptions: :py:class:`NXOpen.Features.VehicleDesign.BaseDataImportExportBuilderOperateOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: gateway ("UG GATEWAY")
    """
    OverrideExistingExpressions: bool = ...
    """
    Returns or sets  the value which indicates whether to override existing expressions in the work part when importing.  
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideExistingExpressions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideExistingExpressions`` 
    
    :param overrideExistingExpressions: 
    :type overrideExistingExpressions: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: gateway ("UG GATEWAY")
    """
    SpreadSheetFileName: str = ...
    """
    Returns or sets  the spreadsheet name which indicates the spreadsheet to be imported or exported.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpreadSheetFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpreadSheetFileName`` 
    
    :param spreadSheetFileName: 
    :type spreadSheetFileName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: gateway ("UG GATEWAY")
    """
    SpreadsheetItemID: str = ...
    """
    Returns or sets  the item ID number which indicates the item that the spreadsheet is to be imported from or exported to.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpreadsheetItemID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpreadsheetItemID`` 
    
    :param spreadsheetItemID: 
    :type spreadsheetItemID: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: gateway ("UG GATEWAY")
    """
    SpreadsheetItemName: str = ...
    """
    Returns or sets  the item name of the spreadsheet in Teamcenter.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpreadsheetItemName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpreadsheetItemName`` 
    
    :param spreadsheetItemName: 
    :type spreadsheetItemName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: gateway ("UG GATEWAY")
    """
    SpreadsheetItemRevision: str = ...
    """
    Returns or sets  the item revision of the spreadsheet that is to be imported from or exported to.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpreadsheetItemRevision`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpreadsheetItemRevision`` 
    
    :param spreadsheetItemRevision: 
    :type spreadsheetItemRevision: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: gateway ("UG GATEWAY")
    """
    Null: BaseDataImportExportBuilder = ...  # unknown typename


class GroundClearanceBuilderRequirementControlsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GroundClearanceBuilderRequirementControls():
    """
    This enum represents the standard or user defined requirement options for ground clearance. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", " - "
       "UserDefined", " - "
    """
    StandardDriven = 0  # GroundClearanceBuilderRequirementControlsMemberType
    UserDefined = 1  # GroundClearanceBuilderRequirementControlsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GroundClearanceBuilderWheelTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GroundClearanceBuilderWheelType():
    """
    Represents the type of the wheel size option for ground clearance. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StaticRadius", " - "
       "Diameter", " - "
    """
    StaticRadius = 0  # GroundClearanceBuilderWheelTypeMemberType
    Diameter = 1  # GroundClearanceBuilderWheelTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GroundClearanceBuilderSurfaceLengthTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GroundClearanceBuilderSurfaceLengthType():
    """
    Represents the type of general surface length to create ground clearace. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FrontToRear", " - "
       "FullVehicle", " - "
    """
    FrontToRear = 0  # GroundClearanceBuilderSurfaceLengthTypeMemberType
    FullVehicle = 1  # GroundClearanceBuilderSurfaceLengthTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GroundClearanceBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GroundClearanceBuilderPositionType():
    """
    Represents the ground clearance positions. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Front", " - "
       "Rear", " - "
       "Both", " - "
    """
    Front = 0  # GroundClearanceBuilderPositionTypeMemberType
    Rear = 1  # GroundClearanceBuilderPositionTypeMemberType
    Both = 2  # GroundClearanceBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GroundClearanceBuilderSectionCurveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GroundClearanceBuilderSectionCurveType():
    """
    Represents the type of under axle section curve type to create ground clearace. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "HorizontalLine", " - "
       "CircularArc", " - "
    """
    HorizontalLine = 0  # GroundClearanceBuilderSectionCurveTypeMemberType
    CircularArc = 1  # GroundClearanceBuilderSectionCurveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GroundClearanceBuilderVisualizationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GroundClearanceBuilderVisualizationTypes():
    """
    This enum represents the output definition options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", " - "
       "Surface", " - "
       "CurveandSurface", " - "
    """
    Curve = 0  # GroundClearanceBuilderVisualizationTypesMemberType
    Surface = 1  # GroundClearanceBuilderVisualizationTypesMemberType
    CurveandSurface = 2  # GroundClearanceBuilderVisualizationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GroundClearanceBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.GroundClearance` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateGroundClearanceBuilder`
    
    Default values.
    
    ==============================  ==========================================
    Property                        Value
    ==============================  ==========================================
    DistanceToRoadGeneral.Value     200 (millimeters part), 7.9 (inches part) 
    ------------------------------  ------------------------------------------
    DistanceToRoadUnderAxle.Value   100 (millimeters part), 3.9 (inches part) 
    ------------------------------  ------------------------------------------
    ExtendSurface                   0 
    ------------------------------  ------------------------------------------
    ExtensionFactor.Value           1000 
    ------------------------------  ------------------------------------------
    Position                        Front 
    ------------------------------  ------------------------------------------
    RequirementsControl             StandardDriven 
    ------------------------------  ------------------------------------------
    SectionCurve                    HorizontalLine 
    ------------------------------  ------------------------------------------
    ShowDistanceMeasurement         1 
    ------------------------------  ------------------------------------------
    SurfaceLength                   FrontToRear 
    ------------------------------  ------------------------------------------
    UseGeneralSurface               1 
    ------------------------------  ------------------------------------------
    UseUnderAxleSurface             1 
    ------------------------------  ------------------------------------------
    Visualization                   Surface 
    ------------------------------  ------------------------------------------
    WheelSize                       StaticRadius 
    ==============================  ==========================================
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementControls():
        """
        This enum represents the standard or user defined requirement options for ground clearance. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", " - "
           "UserDefined", " - "
        """
        StandardDriven = 0  # GroundClearanceBuilderRequirementControlsMemberType
        UserDefined = 1  # GroundClearanceBuilderRequirementControlsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WheelType():
        """
        Represents the type of the wheel size option for ground clearance. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StaticRadius", " - "
           "Diameter", " - "
        """
        StaticRadius = 0  # GroundClearanceBuilderWheelTypeMemberType
        Diameter = 1  # GroundClearanceBuilderWheelTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SurfaceLengthType():
        """
        Represents the type of general surface length to create ground clearace. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FrontToRear", " - "
           "FullVehicle", " - "
        """
        FrontToRear = 0  # GroundClearanceBuilderSurfaceLengthTypeMemberType
        FullVehicle = 1  # GroundClearanceBuilderSurfaceLengthTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionType():
        """
        Represents the ground clearance positions. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Front", " - "
           "Rear", " - "
           "Both", " - "
        """
        Front = 0  # GroundClearanceBuilderPositionTypeMemberType
        Rear = 1  # GroundClearanceBuilderPositionTypeMemberType
        Both = 2  # GroundClearanceBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SectionCurveType():
        """
        Represents the type of under axle section curve type to create ground clearace. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "HorizontalLine", " - "
           "CircularArc", " - "
        """
        HorizontalLine = 0  # GroundClearanceBuilderSectionCurveTypeMemberType
        CircularArc = 1  # GroundClearanceBuilderSectionCurveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VisualizationTypes():
        """
        This enum represents the output definition options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", " - "
           "Surface", " - "
           "CurveandSurface", " - "
        """
        Curve = 0  # GroundClearanceBuilderVisualizationTypesMemberType
        Surface = 1  # GroundClearanceBuilderVisualizationTypesMemberType
        CurveandSurface = 2  # GroundClearanceBuilderVisualizationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DistanceToRoadGeneral: NXOpen.Expression = ...
    """
    Returns  the expression that contains the value which indicates the distance from general surface to road general.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceToRoadGeneral`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DistanceToRoadUnderAxle: NXOpen.Expression = ...
    """
    Returns  the expression that contains the value which indicates the distance from the under axle surface to road.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceToRoadUnderAxle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ExtendSurface: bool = ...
    """
    Returns or sets  the indication if use surface extension.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtendSurface`` 
    
    :param extendSurface: 
    :type extendSurface: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ExtensionFactor: NXOpen.Expression = ...
    """
    Returns  the expression that contains the value which indicates the extension factor.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontUnderAxleFace: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the car body geometry for measuring distance to the front under axle surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontUnderAxleFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    GeneralClearanceFace: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the car body geometry for measuring distance to the general surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralClearanceFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Loading: str = ...
    """
    Returns or sets  the loading to be applied.  
    
    Can only be modified when requirements control is :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderRequirementControls.UserDefined <NXOpen.Features.VehicleDesign.GroundClearanceBuilderRequirementControls>`.
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Position: GroundClearanceBuilderPositionType = ...
    """
    Returns or sets  the position of the under axle surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearUnderAxleFace: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the car body geometry for measuring distance to the rear under axle surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearUnderAxleFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RequirementsControl: GroundClearanceBuilderRequirementControls = ...
    """
    Returns or sets  the value to determine what type of requirement is controlling the ground clearance values.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderRequirementControls` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirementsControl: 
    :type requirementsControl: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderRequirementControls` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SectionCurve: GroundClearanceBuilderSectionCurveType = ...
    """
    Returns or sets  the section curve type of the under axle surface.  
    
    See :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderSectionCurveType` for valid values.
    
    <hr>
    
    Getter Method
    
    Signature ``SectionCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderSectionCurveType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionCurve`` 
    
    :param sectionCurveType: 
    :type sectionCurveType: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderSectionCurveType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowDistanceMeasurement: bool = ...
    """
    Returns or sets  the value indicating if the distance measurement should be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :param showDistanceMeasurement: 
    :type showDistanceMeasurement: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard to be used for this ground clearance feature.  
    
    Only valid when requirements control is :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderRequirementControls.StandardDriven <NXOpen.Features.VehicleDesign.GroundClearanceBuilderRequirementControls>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SurfaceLength: GroundClearanceBuilderSurfaceLengthType = ...
    """
    Returns or sets  the surface length type which determines the length of the general surface.  
    
    See :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderSurfaceLengthType` for valid values. 
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderSurfaceLengthType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceLength`` 
    
    :param surfaceLength: 
    :type surfaceLength: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderSurfaceLengthType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseGeneralSurface: bool = ...
    """
    Returns or sets  the indication if the general surface will be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseGeneralSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseGeneralSurface`` 
    
    :param useGeneralSurface: 
    :type useGeneralSurface: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseUnderAxleSurface: bool = ...
    """
    Returns or sets  the indication if the under axle surface will be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseUnderAxleSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseUnderAxleSurface`` 
    
    :param useUnderAxleSurface: 
    :type useUnderAxleSurface: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Visualization: GroundClearanceBuilderVisualizationTypes = ...
    """
    Returns or sets  the visualization type of the ground clearance output.  
    
    <hr>
    
    Getter Method
    
    Signature ``Visualization`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderVisualizationTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Visualization`` 
    
    :param visualization: 
    :type visualization: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderVisualizationTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WheelSize: GroundClearanceBuilderWheelType = ...
    """
    Returns or sets  the wheel size definition.  
    
    Can only be modified when requirements control is :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderRequirementControls.UserDefined <NXOpen.Features.VehicleDesign.GroundClearanceBuilderRequirementControls>`.
    
    <hr>
    
    Getter Method
    
    Signature ``WheelSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderWheelType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelSize`` 
    
    :param wheelSize: 
    :type wheelSize: :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilderWheelType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: GroundClearanceBuilder = ...  # unknown typename


class HeadImpactFrontHeader(NXOpen.Features.BodyFeature):
    """
    Represents a head impact front header feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeaderBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpactFrontHeader = ...  # unknown typename


class BaseDataPassengerBuilderSeatDirectionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseDataPassengerBuilderSeatDirectionOptions():
    """
    This enum represents the options to define the passenger's seat direction type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Frontward", "Seat position driving direction"
       "Backward", "Seat position opposite to the driving direction"
       "Left", "Seat directed towards the left side of the car."
       "Right", "Seat directed towards the right side of the car."
       "Custom", "Specify a custom value for the seat position (in deg). 1 to 179: Turning the seat rightwards; 1 to 179: Turning the seat leftwards."
    """
    Frontward = 0  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
    Backward = 1  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
    Left = 2  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
    Right = 3  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
    Custom = 4  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseDataPassengerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder`.  
    
    An instance of this class can be obtained from :py:meth:`BaseDataBuilder.CreatePassenger`
    
    .. versionadded:: NX8.5.0
    """
    
    class SeatDirectionOptions():
        """
        This enum represents the options to define the passenger's seat direction type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Frontward", "Seat position driving direction"
           "Backward", "Seat position opposite to the driving direction"
           "Left", "Seat directed towards the left side of the car."
           "Right", "Seat directed towards the right side of the car."
           "Custom", "Specify a custom value for the seat position (in deg). 1 to 179: Turning the seat rightwards; 1 to 179: Turning the seat leftwards."
        """
        Frontward = 0  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
        Backward = 1  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
        Left = 2  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
        Right = 3  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
        Custom = 4  # BaseDataPassengerBuilderSeatDirectionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Assign(self, other: BaseDataPassengerBuilder) -> None:
        """
        Assigns values from another passenger.  
        
        Signature ``Assign(other)`` 
        
        :param other: 
        :type other: :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def SetSeatAngle(self, dValue: float) -> None:
        """
        Sets the passenger's seat angle.  
        
        Signature ``SetSeatAngle(dValue)`` 
        
        :param dValue: 
        :type dValue: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder.SeatAngleExp` to query or edit it.
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetSeatAngle(self) -> float:
        """
        Returns the passenger's seat angle  
        
        Signature ``GetSeatAngle()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder.SeatAngleExp` to query or edit it.
        
        License requirements: None.
        """
        ...
    
    
    def SetBackAngle(self, dValue: float) -> None:
        """
        Sets the passenger's back angle.  
        
        Signature ``SetBackAngle(dValue)`` 
        
        :param dValue: 
        :type dValue: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder.BackAngleExp` to query or edit it.
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetBackAngle(self) -> float:
        """
        Returns the passenger's back angle.  
        
        Signature ``GetBackAngle()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder.BackAngleExp` to query or edit it.
        
        License requirements: None.
        """
        ...
    
    
    def SetHorizontalPointTravel(self, dValue: float) -> None:
        """
        Sets the passenger's horizontal adjustment in x direction.  
        
        Signature ``SetHorizontalPointTravel(dValue)`` 
        
        :param dValue: 
        :type dValue: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder.HorizontalPointTravelExp` to query or edit it.
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetHorizontalPointTravel(self) -> float:
        """
        Returns the passenger's horizontal adjustment in x direction.  
        
        Signature ``GetHorizontalPointTravel()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder.HorizontalPointTravelExp` to query or edit it.
        
        License requirements: None.
        """
        ...
    
    Active: bool = ...
    """
    Returns or sets  the status to indicate whether the passenger is active or not.  
    
    If it is true, the passenger is active. 
    
    <hr>
    
    Getter Method
    
    Signature ``Active`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Active`` 
    
    :param active: 
    :type active: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BackAngleExp: NXOpen.Expression = ...
    """
    Returns  the passenger's back angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``BackAngleExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    Description: str = ...
    """
    Returns or sets  the name or short description of the passenger.  
    
    <hr>
    
    Getter Method
    
    Signature ``Description`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Description`` 
    
    :param description: 
    :type description: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HeelReferencePoint: NXOpen.Point = ...
    """
    Returns or sets  the passenger's heel reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeelReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeelReferencePoint`` 
    
    :param refPoint: 
    :type refPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HeelReferencePointActive: bool = ...
    """
    Returns or sets  the status to indicate whether the passenger heel reference point is active or not.  
    
    If it is true, the passenger heel reference point is active. 
    
    <hr>
    
    Getter Method
    
    Signature ``HeelReferencePointActive`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeelReferencePointActive`` 
    
    :param activeStatus: 
    :type activeStatus: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HorizontalPointTravelExp: NXOpen.Expression = ...
    """
    Returns  the passenger's horizontal adjustment in x direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalPointTravelExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    SeatAngleExp: NXOpen.Expression = ...
    """
    Returns  the passenger's seat angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeatAngleExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    SeatDirection: BaseDataPassengerBuilderSeatDirectionOptions = ...
    """
    Returns or sets  the direction that this passenger is facing.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeatDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilderSeatDirectionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeatDirection`` 
    
    :param seatDirection: 
    :type seatDirection: :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilderSeatDirectionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SeatReferencePoint: NXOpen.Point = ...
    """
    Returns or sets  the passenger's seat reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeatReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeatReferencePoint`` 
    
    :param refPoint: 
    :type refPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SeatReferencePointActive: bool = ...
    """
    Returns or sets  the status to indicate whether the passenger seat reference point is active or not.  
    
    If it is true, the passenger seat reference point is active. 
    
    <hr>
    
    Getter Method
    
    Signature ``SeatReferencePointActive`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeatReferencePointActive`` 
    
    :param activeStatus: 
    :type activeStatus: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: BaseDataPassengerBuilder = ...  # unknown typename


class CloseRangeCameraListItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[CloseRangeCameraListItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: CloseRangeCameraListItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: CloseRangeCameraListItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> CloseRangeCameraListItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: CloseRangeCameraListItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: CloseRangeCameraListItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[CloseRangeCameraListItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[CloseRangeCameraListItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: CloseRangeCameraListItemBuilder, object2: CloseRangeCameraListItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: CloseRangeCameraListItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: CloseRangeCameraListItemBuilderList = ...  # unknown typename


class ReflectionData(NXOpen.Features.CurveFeature):
    """
    Represents a reflection data feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.ReflectionDataBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: ReflectionData = ...  # unknown typename


class HeadImpactRPillarBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillarBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactRpillarBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Initialize(self, parent: HeadImpactBuilder) -> None:
        """
        The R Pillar initialize method.  
        
        Signature ``Initialize(parent)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Geometry: HeadImpactRPillarWizardBuilder = ...
    """
    Returns  the Rear Pillar Geometry builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillarWizardBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillarWizardBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Parameters: HeadImpactRPillarDetailBuilder = ...
    """
    Returns  the Rear Pillar Parameters builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillarDetailBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillarDetailBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactRPillarBuilder = ...  # unknown typename


class CloseRangeVisibilityBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CloseRangeVisibilityBuilderRequirementsControlType():
    """
    This enum represents the standard or user defined requirement options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", "Standard driven type"
       "UserDefined", "User defined type"
    """
    StandardDriven = 0  # CloseRangeVisibilityBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # CloseRangeVisibilityBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CloseRangeVisibilityBuilderEyePointTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CloseRangeVisibilityBuilderEyePointTypes():
    """
    This enum represents the binocular or monocular eye position definition options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Binocular", "Binocular type"
       "Monocular", "Monocular type"
    """
    Binocular = 0  # CloseRangeVisibilityBuilderEyePointTypesMemberType
    Monocular = 1  # CloseRangeVisibilityBuilderEyePointTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CloseRangeVisibilityBuilderEyePointOffsetTypes():
    """
    This enum represents the eye position offset options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoOffset", "No offset"
       "AllOffsets", "All offsets"
       "ForwardOffset", "Forward offset"
       "SidewaysOffset", "Sideways offset"
       "UpwardOffset", "Upward offset"
    """
    NoOffset = 0  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
    AllOffsets = 1  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
    ForwardOffset = 2  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
    SidewaysOffset = 3  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
    UpwardOffset = 4  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CloseRangeVisibilityBuilderPositionPathsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CloseRangeVisibilityBuilderPositionPaths():
    """
    This enum represents the cylinder position path options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BaseData", "Base data"
       "VehicleObject", "Vehicle object"
    """
    BaseData = 0  # CloseRangeVisibilityBuilderPositionPathsMemberType
    VehicleObject = 1  # CloseRangeVisibilityBuilderPositionPathsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CloseRangeVisibilityBuilderPositionMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CloseRangeVisibilityBuilderPositionMethods():
    """
    This enum represents the cylinder position method options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TangentArea", "Tangent Area"
       "VehicleContact", "Vehicle contact"
       "FrontView", "Front view"
    """
    TangentArea = 0  # CloseRangeVisibilityBuilderPositionMethodsMemberType
    VehicleContact = 1  # CloseRangeVisibilityBuilderPositionMethodsMemberType
    FrontView = 2  # CloseRangeVisibilityBuilderPositionMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CloseRangeVisibilityBuilderPathPositionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CloseRangeVisibilityBuilderPathPositionTypes():
    """
    This enum represents the cylinder path position display options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Both", "Both top and bottom"
       "Top", "Top"
       "Bottom", "Bottom"
    """
    Both = 0  # CloseRangeVisibilityBuilderPathPositionTypesMemberType
    Top = 1  # CloseRangeVisibilityBuilderPathPositionTypesMemberType
    Bottom = 2  # CloseRangeVisibilityBuilderPathPositionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CloseRangeVisibilityBuilder(NXOpen.Features.FeatureBuilder):
    """
    The builder to create close range visibility feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateCloseRangeVisibilityBuilder`
    
    Default values.
    
    =============================  ============================================
    Property                       Value
    =============================  ============================================
    CylinderHeight.Value           1000 (millimeters part), 40 (inches part) 
    -----------------------------  --------------------------------------------
    CylinderRadius.Value           150 (millimeters part), 6 (inches part) 
    -----------------------------  --------------------------------------------
    DistanceFromVehicle.Value      2000 (millimeters part), 78.7 (inches part) 
    -----------------------------  --------------------------------------------
    DriverSideExtension.Value      700 (millimeters part), 27.5 (inches part) 
    -----------------------------  --------------------------------------------
    EyePointOffsetType             NoOffset 
    -----------------------------  --------------------------------------------
    EyePointType                   Binocular 
    -----------------------------  --------------------------------------------
    K1Coefficient.Value            0.292 
    -----------------------------  --------------------------------------------
    K2Coefficient.Value            203 (millimeters part), 7.99 (inches part) 
    -----------------------------  --------------------------------------------
    MirrorRotationYAngle.Value     0 
    -----------------------------  --------------------------------------------
    MirrorRotationZAngle.Value     0 
    -----------------------------  --------------------------------------------
    PassengerSideExtension.Value   900 (millimeters part), 35.4 (inches part) 
    -----------------------------  --------------------------------------------
    PathPositionType               Both 
    -----------------------------  --------------------------------------------
    PositionMethod                 TangentArea 
    -----------------------------  --------------------------------------------
    PositionPath                   BaseData 
    -----------------------------  --------------------------------------------
    RequirementsControl            StandardDriven 
    -----------------------------  --------------------------------------------
    RotateMirrorFace               0 
    -----------------------------  --------------------------------------------
    ShowBlindVolume                0 
    -----------------------------  --------------------------------------------
    ShowExtendedEyes               0 
    -----------------------------  --------------------------------------------
    ShowEyeLabels                  0 
    -----------------------------  --------------------------------------------
    ShowEyePoints                  0 
    -----------------------------  --------------------------------------------
    ShowPath                       0 
    -----------------------------  --------------------------------------------
    ShowPathPoints                 0 
    -----------------------------  --------------------------------------------
    ShowSightRays                  0 
    -----------------------------  --------------------------------------------
    ShowTorsoLine                  0 
    -----------------------------  --------------------------------------------
    StepValue                      0.5 
    -----------------------------  --------------------------------------------
    UseMirror                      0 
    =============================  ============================================
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlType():
        """
        This enum represents the standard or user defined requirement options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", "Standard driven type"
           "UserDefined", "User defined type"
        """
        StandardDriven = 0  # CloseRangeVisibilityBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # CloseRangeVisibilityBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EyePointTypes():
        """
        This enum represents the binocular or monocular eye position definition options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Binocular", "Binocular type"
           "Monocular", "Monocular type"
        """
        Binocular = 0  # CloseRangeVisibilityBuilderEyePointTypesMemberType
        Monocular = 1  # CloseRangeVisibilityBuilderEyePointTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EyePointOffsetTypes():
        """
        This enum represents the eye position offset options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoOffset", "No offset"
           "AllOffsets", "All offsets"
           "ForwardOffset", "Forward offset"
           "SidewaysOffset", "Sideways offset"
           "UpwardOffset", "Upward offset"
        """
        NoOffset = 0  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
        AllOffsets = 1  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
        ForwardOffset = 2  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
        SidewaysOffset = 3  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
        UpwardOffset = 4  # CloseRangeVisibilityBuilderEyePointOffsetTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionPaths():
        """
        This enum represents the cylinder position path options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BaseData", "Base data"
           "VehicleObject", "Vehicle object"
        """
        BaseData = 0  # CloseRangeVisibilityBuilderPositionPathsMemberType
        VehicleObject = 1  # CloseRangeVisibilityBuilderPositionPathsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionMethods():
        """
        This enum represents the cylinder position method options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TangentArea", "Tangent Area"
           "VehicleContact", "Vehicle contact"
           "FrontView", "Front view"
        """
        TangentArea = 0  # CloseRangeVisibilityBuilderPositionMethodsMemberType
        VehicleContact = 1  # CloseRangeVisibilityBuilderPositionMethodsMemberType
        FrontView = 2  # CloseRangeVisibilityBuilderPositionMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PathPositionTypes():
        """
        This enum represents the cylinder path position display options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Both", "Both top and bottom"
           "Top", "Top"
           "Bottom", "Bottom"
        """
        Both = 0  # CloseRangeVisibilityBuilderPathPositionTypesMemberType
        Top = 1  # CloseRangeVisibilityBuilderPathPositionTypesMemberType
        Bottom = 2  # CloseRangeVisibilityBuilderPathPositionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ValidateBlindVolumes(self) -> None:
        """
        Validate blind volume area from driver side view.  
        
        Signature ``ValidateBlindVolumes()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def CreateCameraListItemBuilder(self) -> CloseRangeCameraListItemBuilder:
        """
        Creates a :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder`  
        
        Signature ``CreateCameraListItemBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def CreateDemoCylinderListItemBuilder(self) -> CloseRangeDemoCylinderListItemBuilder:
        """
        Creates a :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder`  
        
        Signature ``CreateDemoCylinderListItemBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    CameraList: CloseRangeCameraListItemBuilderList = ...
    """
    Returns  the list of :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilder` defining the camera parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``CameraList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilderList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CylinderHeight: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the cylinder height.  
    
    <hr>
    
    Getter Method
    
    Signature ``CylinderHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CylinderRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the cylinder radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``CylinderRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DemoCylinderList: CloseRangeDemoCylinderListItemBuilderList = ...
    """
    Returns  the list of :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` defining the demo cylinder parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``DemoCylinderList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilderList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DistanceFromVehicle: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the distance from vehicle.  
    
    Only valid when position method equals to front view type. 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceFromVehicle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DriverSideExtension: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the driver side extension.  
    
    Only valid when position method equals to front view type. 
    
    <hr>
    
    Getter Method
    
    Signature ``DriverSideExtension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    EyePointOffsetType: CloseRangeVisibilityBuilderEyePointOffsetTypes = ...
    """
    Returns or sets  the eye point offset types to define the close range visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyePointOffsetType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderEyePointOffsetTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EyePointOffsetType`` 
    
    :param eyePointOffsetType: 
    :type eyePointOffsetType: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderEyePointOffsetTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    EyePointType: CloseRangeVisibilityBuilderEyePointTypes = ...
    """
    Returns or sets  the eye point types to define the close range visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyePointType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderEyePointTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EyePointType`` 
    
    :param eyePointType: 
    :type eyePointType: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderEyePointTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    K1Coefficient: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the k1 coefficient used in blind volume checking.  
    
    <hr>
    
    Getter Method
    
    Signature ``K1Coefficient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    K2Coefficient: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the k2 coefficient used in blind volume checking.  
    
    <hr>
    
    Getter Method
    
    Signature ``K2Coefficient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Loading: str = ...
    """
    Returns or sets  the loading used in the close range visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    MirrorBoundary: NXOpen.Section = ...
    """
    Returns  the curves selection used to identify the mirror boundary section.  
    
    Only valid when use mirror is checked. 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MirrorFaces: NXOpen.ScCollector = ...
    """
    Returns  the faces selection used to identify the mirror surfaces.  
    
    Only valid when use mirror is checked. 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MirrorFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the facet selection used to identify the mirror facet bodies.  
    
    Only valid when use mirror is checked. 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    MirrorRotationPoint: NXOpen.Point = ...
    """
    Returns or sets  the mirror rotation point specified.  
    
    Only valid when rotate mirror face is checked. 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorRotationPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorRotationPoint`` 
    
    :param mirrorRotationPoint: 
    :type mirrorRotationPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    MirrorRotationYAngle: NXOpen.Expression = ...
    """
    Returns  the mirror rotation angle around vehicle Y axis after Z axis.  
    
    Only valid when rotate mirror face is checked. 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorRotationYAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MirrorRotationZAngle: NXOpen.Expression = ...
    """
    Returns  the mirror rotation angle around vehicle Z axis.  
    
    Only valid when rotate mirror face is checked. 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorRotationZAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ObstructionFaces: NXOpen.ScCollector = ...
    """
    Returns  the faces selection used to identify the vehicle obstruction surfaces.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObstructionFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ObstructionFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the faces selection used to identify the vehicle obstruction facet bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObstructionFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PassengerSideExtension: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the passenger side extension.  
    
    Only valid when position method equals to front view type. 
    
    <hr>
    
    Getter Method
    
    Signature ``PassengerSideExtension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PathPositionType: CloseRangeVisibilityBuilderPathPositionTypes = ...
    """
    Returns or sets  the path position types used to define close range visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathPositionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderPathPositionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PathPositionType`` 
    
    :param pathPositionType: 
    :type pathPositionType: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderPathPositionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PositionMethod: CloseRangeVisibilityBuilderPositionMethods = ...
    """
    Returns or sets  the position method types to define the close range visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``PositionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderPositionMethods` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositionMethod`` 
    
    :param positionMethod: 
    :type positionMethod: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderPositionMethods` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PositionPath: CloseRangeVisibilityBuilderPositionPaths = ...
    """
    Returns or sets  the position path types to define the close range visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``PositionPath`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderPositionPaths` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositionPath`` 
    
    :param positionPath: 
    :type positionPath: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderPositionPaths` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RequirementsControl: CloseRangeVisibilityBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control types to define the close range visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirement: 
    :type requirement: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RotateMirrorFace: bool = ...
    """
    Returns or sets  the indication if the mirror face will be rotated.  
    
    Only valid when use mirror is checked. 
    
    <hr>
    
    Getter Method
    
    Signature ``RotateMirrorFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotateMirrorFace`` 
    
    :param rotateMirrorFace: 
    :type rotateMirrorFace: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowBlindVolume: bool = ...
    """
    Returns or sets  the indication if blind volume will be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowBlindVolume`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowBlindVolume`` 
    
    :param showBlindVolume: 
    :type showBlindVolume: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowExtendedEyes: bool = ...
    """
    Returns or sets  the indication if extended eyes will be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowExtendedEyes`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowExtendedEyes`` 
    
    :param showExtendedEyes: 
    :type showExtendedEyes: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowEyeLabels: bool = ...
    """
    Returns or sets  the indication if eye labels will be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowEyeLabels`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowEyeLabels`` 
    
    :param showEyeLabels: 
    :type showEyeLabels: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowEyePoints: bool = ...
    """
    Returns or sets  the indication if eye points will be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowEyePoints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowEyePoints`` 
    
    :param showEyePoints: 
    :type showEyePoints: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowPath: bool = ...
    """
    Returns or sets  the indication if demo cylinder path will be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowPath`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowPath`` 
    
    :param showPath: 
    :type showPath: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowPathPoints: bool = ...
    """
    Returns or sets  the indication if demo cylinder point position on path will be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowPathPoints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowPathPoints`` 
    
    :param showPathPoints: 
    :type showPathPoints: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowSightRays: bool = ...
    """
    Returns or sets  the indication if blind volume sight rays will be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSightRays`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSightRays`` 
    
    :param showSightRays: 
    :type showSightRays: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowTorsoLine: bool = ...
    """
    Returns or sets  the indication if torso line will be displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowTorsoLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowTorsoLine`` 
    
    :param showTorsoLine: 
    :type showTorsoLine: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard types to define the close range visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    StepValue: float = ...
    """
    Returns or sets  the step value to control the accurate for demo cylinder visibility and blind volume area calculation.  
    
    <hr>
    
    Getter Method
    
    Signature ``StepValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StepValue`` 
    
    :param stepValue: 
    :type stepValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseMirror: bool = ...
    """
    Returns or sets  the indication if the mirror will be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseMirror`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseMirror`` 
    
    :param useMirror: 
    :type useMirror: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VehicleBodies: NXOpen.ScCollector = ...
    """
    Returns  the bodies selection used to identify vehicle bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``VehicleBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    VehicleFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the bodies selection used to identify vehicle facet bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``VehicleFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    WindowFaces: NXOpen.ScCollector = ...
    """
    Returns  the faces selection used to identify the vehicle window surfaces.  
    
    <hr>
    
    Getter Method
    
    Signature ``WindowFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WindowFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the faces selection used to identify the vehicle window facet bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``WindowFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: CloseRangeVisibilityBuilder = ...  # unknown typename


class BaseDataBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.BaseDataBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateBaseDataBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def GetWheelbase(self) -> float:
        """
        Returns the wheelbase of the vehicle.  
        
        Wheelbase is a computed value and cannot be changed by the user. 
        The underlying formula calculates wheelbase based on the x coordinate of the rear wheel center point
        minus the x coordinate of the front wheel center point.  
        
        Signature ``GetWheelbase()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFrontOverhang(self) -> float:
        """
        Returns the front overhang of the vehicle.  
        
        The front overhang is measured from the front wheel center point in the negative x direction.  
        
        Signature ``GetFrontOverhang()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataBuilder.FrontOverhangExp` to query or edit it.
        
        License requirements: None.
        """
        ...
    
    
    def SetFrontOverhang(self, overhangFront: float) -> None:
        """
        Sets the front overhang of the vehicle.  
        
        The front overhang is measured from the front wheel center point in the negative x direction.
        
        Signature ``SetFrontOverhang(overhangFront)`` 
        
        :param overhangFront: 
        :type overhangFront: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataBuilder.FrontOverhangExp` to query or edit it.
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetRearOverhang(self) -> float:
        """
        Returns the rear overhang of the vehicle.  
        
        The rear overhang is measured from the rear wheel center point in the positive x direction.  
        
        Signature ``GetRearOverhang()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataBuilder.RearOverhangExp` to query or edit it.
        
        License requirements: None.
        """
        ...
    
    
    def SetRearOverhang(self, overhangBack: float) -> None:
        """
        Sets the rear overhang of the vehicle.  
        
        The rear overhang is measured from the rear wheel center point in the positive x direction. 
        
        Signature ``SetRearOverhang(overhangBack)`` 
        
        :param overhangBack: 
        :type overhangBack: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataBuilder.RearOverhangExp` to query or edit it.
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetVehicleLength(self) -> float:
        """
        Returns the overall vehicle length.  
        
        Vehicle length is a computed value and cannot be changed by the user. 
        The underlying formula calculates vehicle length based on wheelbase plus front and back overhang. 
        
        Signature ``GetVehicleLength()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetVehicleWidth(self) -> float:
        """
        Returns the vehicle width.  
        
        The vehicle width is calculated outgoing from the vehicle
        mid plane half of the defined value in positive y direction and as well half of the 
        defined value in negative y direction. 
        
        Signature ``GetVehicleWidth()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataBuilder.VehicleWidthExp` to query or edit it.
        
        License requirements: None.
        """
        ...
    
    
    def SetVehicleWidth(self, vehicleWidth: float) -> None:
        """
        Sets the vehicle width.  
        
        The vehicle width is calculated outgoing from the vehicle
        mid plane half of the defined value in positive y direction and as well half of the 
        defined value in negative y direction. 
        
        Signature ``SetVehicleWidth(vehicleWidth)`` 
        
        :param vehicleWidth: 
        :type vehicleWidth: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataBuilder.VehicleWidthExp` to query or edit it.
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetBodyWidth(self) -> float:
        """
        Returns the body width.  
        
        This value is used for calculating the fields of vision 
        according to US and CDN standards instead of vehicle width.  
        
        Signature ``GetBodyWidth()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    
    
    def SetBodyWidth(self, bodyWidth: float) -> None:
        """
        Sets the body width.  
        
        This value is used for calculating the fields of vision 
        according to US and CDN standards instead of vehicle width. 
        
        Signature ``SetBodyWidth(bodyWidth)`` 
        
        :param bodyWidth: 
        :type bodyWidth: float 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.1
           Obtain the expression using :py:meth:`NXOpen.Features.VehicleDesign.BaseDataBuilder.BodyWidthExp` to query or edit it.
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetNthWheel(self, nWheelIndex: int) -> BaseDataWheelBuilder:
        """
        Gets the nth wheel.  
        
        Signature ``GetNthWheel(nWheelIndex)`` 
        
        :param nWheelIndex: 
        :type nWheelIndex: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePassenger(self, pOther: BaseDataPassengerBuilder) -> BaseDataPassengerBuilder:
        """
        Creates an instance of :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder` from another instance.  
        
        If pOther is NULL, the created builder will be initialized with default value.
        If pOther is not NULL, the created builder will be iniialized with pOther's value.
        
        Signature ``CreatePassenger(pOther)`` 
        
        :param pOther:  Data to be initialized from, can be NULL  
        :type pOther: :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def AddPassenger(self, passenger: BaseDataPassengerBuilder) -> None:
        """
        Adds a passenger, which represents :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder`, to the base data.  
        
        Signature ``AddPassenger(passenger)`` 
        
        :param passenger: 
        :type passenger: :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def RemovePassenger(self, passenger: BaseDataPassengerBuilder) -> None:
        """
        Removes a passenger, which represents :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder`, from the base data.  
        
        Signature ``RemovePassenger(passenger)`` 
        
        :param passenger: 
        :type passenger: :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetPassengerCount(self) -> int:
        """
        Returns the total number of passengers in the base data.  
        
        Signature ``GetPassengerCount()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNthPassenger(self, nIndex: int) -> BaseDataPassengerBuilder:
        """
        Returns the nth passenger, which represents :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder`, from the base data.  
        
        Signature ``GetNthPassenger(nIndex)`` 
        
        :param nIndex: 
        :type nIndex: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateLoading(self, pOther: BaseDataLoadingBuilder) -> BaseDataLoadingBuilder:
        """
        Creates an instance of :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder` from another instance.  
        
        If pOther is NULL, the created builder will be initialized with default value.
        If pOther is not NULL, the created builder will be iniialized with pOther's value.
        
        Signature ``CreateLoading(pOther)`` 
        
        :param pOther:  data to be initialized from, can be NULL  
        :type pOther: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def AddLoading(self, loading: BaseDataLoadingBuilder) -> None:
        """
        Adds a loading, which represents :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder`, to the base data.  
        
        Signature ``AddLoading(loading)`` 
        
        :param loading: 
        :type loading: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def RemoveLoading(self, loading: BaseDataLoadingBuilder) -> None:
        """
        Removes a loading, which represents :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder`, from the base data.  
        
        Signature ``RemoveLoading(loading)`` 
        
        :param loading: 
        :type loading: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetLoadingCount(self) -> int:
        """
        Returns the total number of loadings in the base data.  
        
        Signature ``GetLoadingCount()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNthLoading(self, nIndex: int) -> BaseDataLoadingBuilder:
        """
        Returns the nth loading, which represents :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder`, from the base data.  
        
        Signature ``GetNthLoading(nIndex)`` 
        
        :param nIndex: 
        :type nIndex: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    BodyWidthExp: NXOpen.Expression = ...
    """
    Returns  the body width which is used for calculating the fields of vision according to US and CDN standards instead of vehicle width.  
    
    <hr>
    
    Getter Method
    
    Signature ``BodyWidthExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    Driver: BaseDataDriverBuilder = ...
    """
    Returns  the driver builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.BaseDataDriverBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Driver`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataDriverBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontOverhangExp: NXOpen.Expression = ...
    """
    Returns  the front overhang of the vehicle which is measured from the front wheel center point in the negative x direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontOverhangExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    LoadingDefinition: BaseDataLoadingBuilder = ...
    """
    Returns  the loading definition.  
    
    <hr>
    
    Getter Method
    
    Signature ``LoadingDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PassengerDefinition: BaseDataPassengerBuilder = ...
    """
    Returns  the passenger definition.  
    
    <hr>
    
    Getter Method
    
    Signature ``PassengerDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataPassengerBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearOverhangExp: NXOpen.Expression = ...
    """
    Returns  the rear overhang of the vehicle which is measured from the rear wheel center point in the positive x direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearOverhangExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    ShowSurface: bool = ...
    """
    Returns or sets  the option to indicate whether to show surface or not.  
    
    If it is true, the wheel surface is shown.
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSurface`` 
    
    :param showSurface: 
    :type showSurface: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowWireframe: bool = ...
    """
    Returns or sets  the option to indicate whether to show curve or not.  
    
    If it is true, the wheel curve is shown. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowWireframe`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowWireframe`` 
    
    :param showWireframe: 
    :type showWireframe: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VehicleCategory: str = ...
    """
    Returns or sets  the vehicle category.  
    
    <hr>
    
    Getter Method
    
    Signature ``VehicleCategory`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VehicleCategory`` 
    
    :param vehicleCategory: 
    :type vehicleCategory: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VehicleDescription: str = ...
    """
    Returns or sets  the name or short description of the vehicle.  
    
    <hr>
    
    Getter Method
    
    Signature ``VehicleDescription`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VehicleDescription`` 
    
    :param vehicleDescription: 
    :type vehicleDescription: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VehicleWidthExp: NXOpen.Expression = ...
    """
    Returns  the vehicle width which is calculated outgoing from the vehicle mid plane half of the defined value in positive y direction and as well half of the defined value in negative y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``VehicleWidthExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    """
    WheelPositionDefinition: BaseDataWheelBuilderPositionDefinitionOptions = ...
    """
    Returns or sets  the wheel position definition option of the vehicle.  
    
    <hr>
    
    Getter Method
    
    Signature ``WheelPositionDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelPositionDefinition`` 
    
    :param positionDefinition: 
    :type positionDefinition: :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: BaseDataBuilder = ...  # unknown typename


class CrashBarrier(NXOpen.Features.BodyFeature):
    """
    Represents a crash barrier feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: CrashBarrier = ...  # unknown typename


class HeadImpactAPillarDetailBuilderMeasurementMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HeadImpactAPillarDetailBuilderMeasurementMethodType():
    """
    Represents the measurement methods used to position point 1. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WrapAround", " - "
       "OnSurface", " - "
       "NotSpecified", " - "
    """
    WrapAround = 0  # HeadImpactAPillarDetailBuilderMeasurementMethodTypeMemberType
    OnSurface = 1  # HeadImpactAPillarDetailBuilderMeasurementMethodTypeMemberType
    NotSpecified = 2  # HeadImpactAPillarDetailBuilderMeasurementMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HeadImpactAPillarDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarDetailBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    class MeasurementMethodType():
        """
        Represents the measurement methods used to position point 1. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WrapAround", " - "
           "OnSurface", " - "
           "NotSpecified", " - "
        """
        WrapAround = 0  # HeadImpactAPillarDetailBuilderMeasurementMethodTypeMemberType
        OnSurface = 1  # HeadImpactAPillarDetailBuilderMeasurementMethodTypeMemberType
        NotSpecified = 2  # HeadImpactAPillarDetailBuilderMeasurementMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AP1Left: NXOpen.Point = ...
    """
    Returns or sets  the left AP1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP1Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP1Left`` 
    
    :param ap1Left: 
    :type ap1Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP1LeftFlag: bool = ...
    """
    Returns or sets  the left AP1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP1LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP1LeftFlag`` 
    
    :param ap1LeftFlag: 
    :type ap1LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP1Right: NXOpen.Point = ...
    """
    Returns or sets  the right AP1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP1Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP1Right`` 
    
    :param ap1Right: 
    :type ap1Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP1RightFlag: bool = ...
    """
    Returns or sets  the right AP1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP1RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP1RightFlag`` 
    
    :param ap1RightFlag: 
    :type ap1RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP2Left: NXOpen.Point = ...
    """
    Returns or sets  the left AP2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP2Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP2Left`` 
    
    :param ap2Left: 
    :type ap2Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP2LeftFlag: bool = ...
    """
    Returns or sets  the left AP2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP2LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP2LeftFlag`` 
    
    :param ap2LeftFlag: 
    :type ap2LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP2Offset: NXOpen.Expression = ...
    """
    Returns  the offset used to position AP2.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP2Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    AP2Right: NXOpen.Point = ...
    """
    Returns or sets  the right AP2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP2Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP2Right`` 
    
    :param ap2Right: 
    :type ap2Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP2RightFlag: bool = ...
    """
    Returns or sets  the right AP2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP2RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP2RightFlag`` 
    
    :param ap2RightFlag: 
    :type ap2RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP3Left: NXOpen.Point = ...
    """
    Returns or sets  the left AP3 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP3Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP3Left`` 
    
    :param ap3Left: 
    :type ap3Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP3LeftFlag: bool = ...
    """
    Returns or sets  the left AP3 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP3LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP3LeftFlag`` 
    
    :param ap3LeftFlag: 
    :type ap3LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP3Right: NXOpen.Point = ...
    """
    Returns or sets  the right AP3 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP3Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP3Right`` 
    
    :param ap3Right: 
    :type ap3Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AP3RightFlag: bool = ...
    """
    Returns or sets  the right AP3 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``AP3RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AP3RightFlag`` 
    
    :param ap3RightFlag: 
    :type ap3RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateGeometry: bool = ...
    """
    Returns or sets  the create construction geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGeometry`` 
    
    :param createGeometry: 
    :type createGeometry: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HorizontalLeftMax: NXOpen.Expression = ...
    """
    Returns  the left horizontal maximum required approach angle calculated value.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalLeftMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HorizontalLeftMin: NXOpen.Expression = ...
    """
    Returns  the left horizontal minimum required approach angle calculated value.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalLeftMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HorizontalRightMax: NXOpen.Expression = ...
    """
    Returns  the right horizontal maximum required approach angle calculated value.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRightMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HorizontalRightMin: NXOpen.Expression = ...
    """
    Returns  the right horizontal minimum required approach angle calculated value.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRightMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Line1Left: NXOpen.Point = ...
    """
    Returns or sets  the left Line 1 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``Line1Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Line1Left`` 
    
    :param line1Left: 
    :type line1Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Line1LeftFlag: bool = ...
    """
    Returns or sets  the left Line 1 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``Line1LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Line1LeftFlag`` 
    
    :param line1LeftFlag: 
    :type line1LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Line1Right: NXOpen.Point = ...
    """
    Returns or sets  the right Line 1 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``Line1Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Line1Right`` 
    
    :param line1Right: 
    :type line1Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Line1RightFlag: bool = ...
    """
    Returns or sets  the right Line 1 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``Line1RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Line1RightFlag`` 
    
    :param line1RightFlag: 
    :type line1RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    MeasurementMethod: HeadImpactAPillarDetailBuilderMeasurementMethodType = ...
    """
    Returns or sets  the measurement method used to position point 1.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeasurementMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarDetailBuilderMeasurementMethodType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MeasurementMethod`` 
    
    :param measurementMethod: 
    :type measurementMethod: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarDetailBuilderMeasurementMethodType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane1Left: NXOpen.Point = ...
    """
    Returns or sets  the left Plane 1 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane1Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane1Left`` 
    
    :param plane1Left: 
    :type plane1Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane1LeftFlag: bool = ...
    """
    Returns or sets  the left Plane 1 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane1LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane1LeftFlag`` 
    
    :param plane1LeftFlag: 
    :type plane1LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane1Right: NXOpen.Point = ...
    """
    Returns or sets  the right Plane 1 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane1Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane1Right`` 
    
    :param plane1Right: 
    :type plane1Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane1RightFlag: bool = ...
    """
    Returns or sets  the right Plane 1 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane1RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane1RightFlag`` 
    
    :param plane1RightFlag: 
    :type plane1RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane5Left: NXOpen.Point = ...
    """
    Returns or sets  the left Plane 5 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane5Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane5Left`` 
    
    :param plane5Left: 
    :type plane5Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane5LeftFlag: bool = ...
    """
    Returns or sets  the left Plane 5 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane5LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane5LeftFlag`` 
    
    :param plane5LeftFlag: 
    :type plane5LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane5Right: NXOpen.Point = ...
    """
    Returns or sets  the right Plane 5 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane5Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane5Right`` 
    
    :param plane5Right: 
    :type plane5Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane5RightFlag: bool = ...
    """
    Returns or sets  the right Plane 5 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane5RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane5RightFlag`` 
    
    :param plane5RightFlag: 
    :type plane5RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Point1Offset: NXOpen.Expression = ...
    """
    Returns  the offset used to position point 1.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point1Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Point2Offset: NXOpen.Expression = ...
    """
    Returns  the offset used to position point 2.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point2Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalLeftMax: NXOpen.Expression = ...
    """
    Returns  the left horizontal maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalLeftMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalLeftMin: NXOpen.Expression = ...
    """
    Returns  the left horizontal minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalLeftMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalRightMax: NXOpen.Expression = ...
    """
    Returns  the right horizontal maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalRightMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalRightMin: NXOpen.Expression = ...
    """
    Returns  the right horizontal minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalRightMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMax: NXOpen.Expression = ...
    """
    Returns  the vertical maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMin: NXOpen.Expression = ...
    """
    Returns  the vertical minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactAPillarDetailBuilder = ...  # unknown typename


class HeadImpactOtherRail(NXOpen.Features.BodyFeature):
    """
    Represents a head impact additional side rail feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOtherRailBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpactOtherRail = ...  # unknown typename


class VisionPlane(NXOpen.Features.BodyFeature):
    """
    Represents a vision plane feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.VisionPlaneBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: VisionPlane = ...  # unknown typename


class BaseDataLoadingBuilderLoadingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseDataLoadingBuilderLoadingType():
    """
    This enum represents the vehicle loading types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Standard", "Standard - Defined in the registration file, user can not delete it."
       "UserDefined", "User-Defined - user can add or delete it."
    """
    Standard = 0  # BaseDataLoadingBuilderLoadingTypeMemberType
    UserDefined = 1  # BaseDataLoadingBuilderLoadingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseDataLoadingBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder`.  
    
    An instance of this class can be obtained from :py:meth:`BaseDataBuilder.CreateLoading`
    
    .. versionadded:: NX8.5.0
    """
    
    class LoadingType():
        """
        This enum represents the vehicle loading types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Standard", "Standard - Defined in the registration file, user can not delete it."
           "UserDefined", "User-Defined - user can add or delete it."
        """
        Standard = 0  # BaseDataLoadingBuilderLoadingTypeMemberType
        UserDefined = 1  # BaseDataLoadingBuilderLoadingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Assign(self, other: BaseDataLoadingBuilder) -> None:
        """
        Assigns value from another loading.  
        
        Signature ``Assign(other)`` 
        
        :param other: 
        :type other: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def SetReferencePlane(self, referencePlane: NXOpen.DatumPlane) -> None:
        """
        Sets the reference plane to represent the loading plane.  
        
        Signature ``SetReferencePlane(referencePlane)`` 
        
        :param referencePlane: 
        :type referencePlane: :py:class:`NXOpen.DatumPlane` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def GetDescription(self) -> 'list[str]':
        """
        Gets the loading descriptions.  
        
        Signature ``GetDescription()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDescription(self, description: 'list[str]') -> None:
        """
        Sets the loading descriptions.  
        
        Signature ``SetDescription(description)`` 
        
        :param description: 
        :type description: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Active: bool = ...
    """
    Returns or sets  the status to indicate whether the loading is active or not.  
    
    If it is true, the loading is active. 
    
    <hr>
    
    Getter Method
    
    Signature ``Active`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Active`` 
    
    :param active: 
    :type active: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color of loading.  
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DataDefinition: BaseDataLoadingWheelBuilderDataDefinitionOptions = ...
    """
    Returns or sets  the Data Definition option of loading.  
    
    <hr>
    
    Getter Method
    
    Signature ``DataDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DataDefinition`` 
    
    :param dataDefinition: 
    :type dataDefinition: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontWheel: BaseDataLoadingWheelBuilder = ...
    """
    Returns  the front wheel data of this loading.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontWheel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Name: str = ...
    """
    Returns or sets  the name of loading.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearWheel: BaseDataLoadingWheelBuilder = ...
    """
    Returns  the rear wheel data of this loading.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearWheel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Type: BaseDataLoadingBuilderLoadingType = ...
    """
    Returns or sets  the vehicle loading type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilderLoadingType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param loadingType: 
    :type loadingType: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingBuilderLoadingType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: BaseDataLoadingBuilder = ...  # unknown typename


class HeadImpactRPillarWizardBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillarWizardBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    RP2Left: NXOpen.Point = ...
    """
    Returns or sets  the left rear pillar 2 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP2Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP2Left`` 
    
    :param rp2Left: 
    :type rp2Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RP2Right: NXOpen.Point = ...
    """
    Returns or sets  the right rear pillar 2 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP2Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP2Right`` 
    
    :param rp2Right: 
    :type rp2Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RPillarLeft: NXOpen.ScCollector = ...
    """
    Returns  the left rear pillar geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``RPillarLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RPillarRight: NXOpen.ScCollector = ...
    """
    Returns  the right rear pillar geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``RPillarRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UpperRoofInterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof interior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofInterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactRPillarWizardBuilder = ...  # unknown typename


class MirrorCertificationBuilderLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderLocationType():
    """
    Used to indicate the mirror location. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inside", "Represents the inside location"
       "DriverSide", "Represents the driver side location"
       "PassengerSide", " - "
    """
    Inside = 0  # MirrorCertificationBuilderLocationTypeMemberType
    DriverSide = 1  # MirrorCertificationBuilderLocationTypeMemberType
    PassengerSide = 2  # MirrorCertificationBuilderLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderInsideStandardsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderInsideStandardsType():
    """
    Used to indicate the standard for the inside mirror. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UsaCanadaFmvss111Cmvsss111", "Represents USA - Canada : FMVSS111 - CMVSSS111 standard"
       "Europe200397EcEcer4602", "Represents Europe : 2003/97/EC - ECE R46.02 standard"
       "JapanArticle44Trias29Trias39", "Represents Japan : Article 44/TRIAS 29/TRIAS 39 standard"
       "AustraliaAdr1402", "Represents Australia : ADR 14/02 standard"
       "SaudiArabiaGulfStatesSsa770771Gs421442", "Represents Saudi Arabia - Gulf States : SSA 770/771 GS 421/442 standard"
       "ChinaGb150842006", " - "
    """
    UsaCanadaFmvss111Cmvsss111 = 0  # MirrorCertificationBuilderInsideStandardsTypeMemberType
    Europe200397EcEcer4602 = 1  # MirrorCertificationBuilderInsideStandardsTypeMemberType
    JapanArticle44Trias29Trias39 = 2  # MirrorCertificationBuilderInsideStandardsTypeMemberType
    AustraliaAdr1402 = 3  # MirrorCertificationBuilderInsideStandardsTypeMemberType
    SaudiArabiaGulfStatesSsa770771Gs421442 = 4  # MirrorCertificationBuilderInsideStandardsTypeMemberType
    ChinaGb150842006 = 5  # MirrorCertificationBuilderInsideStandardsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderDriverSideStandardsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderDriverSideStandardsType():
    """
    Used to indicate the standard for the driver mirror. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UsaCanadaFmvss111Cmvsss111", "Represents USA - Canada : FMVSS111 - CMVSSS111 standard"
       "EuropeM1n1ClassiiiMirror200397EcEcer4602", "Represents Europe (M1/N1_Class III Mirror) : 2003/97/EC - ECE R46.02 standard"
       "Europe71127EuEcer4601Superceded", "Represents Europe : 71/127/EU - ECE R46.01 (Superceded ) standard"
       "JapanArticle44Trias29Trias39", "Represents Japan : Article 44/TRIAS 29/TRIAS 39 standard"
       "AustraliaAdr1402", "Represents Australia : ADR 14/02 standard"
       "SaudiArabiaGulfStatesSsa770771Gs421442", "Represents Saudi Arabia - Gulf States : SSA 770/771 GS 421/442 standard"
       "ChinaGb150842006", " - "
    """
    UsaCanadaFmvss111Cmvsss111 = 0  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
    EuropeM1n1ClassiiiMirror200397EcEcer4602 = 1  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
    Europe71127EuEcer4601Superceded = 2  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
    JapanArticle44Trias29Trias39 = 3  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
    AustraliaAdr1402 = 4  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
    SaudiArabiaGulfStatesSsa770771Gs421442 = 5  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
    ChinaGb150842006 = 6  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderPassengerSideStandardsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderPassengerSideStandardsType():
    """
    Used to indicate the standard for the passenger mirror. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UsaCanadaFmvss111Cmvsss111", "Represents USA - Canada : FMVSS111 - CMVSSS111 standard"
       "EuropeM1n1ClassiiiMirror200397EcEcer4602", "Represents Europe (M1/N1_Class III Mirror) : 2003/97/EC - ECE R46.02 standard"
       "EuropeM1n1Only71127EuEcer4601Superceded", "Represents Europe (M1/N1 only) : 71/127/EU - ECE R46.01 (Superceded ) standard"
       "EuropeNotM1n171127EuEcer4601Superceded", "Represents Europe (Not M1/N1) : 71/127/EU - ECE R46.01 : (Superceded ) standard"
       "JapanArticle44Trias29Trias39", "Represents Japan : Article 44/TRIAS 29/TRIAS 39 standard"
       "AustraliaAdr1402", "Represents Australia : ADR 14/02 standard"
       "SaudiArabiaGulfStatesSsa770771Gs421442", "Represents Saudi Arabia - Gulf States : SSA 770/771 GS 421/442 standard"
       "ChinaM1n1OnlyGb150842006", "Represents China (M1/N1 only) : GB 15084 - 2006 standard"
       "ChinaNotM1n1Gb150842006", "Represents China (Not M1/N1) : GB 15084 - 2006 standard"
    """
    UsaCanadaFmvss111Cmvsss111 = 0  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
    EuropeM1n1ClassiiiMirror200397EcEcer4602 = 1  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
    EuropeM1n1Only71127EuEcer4601Superceded = 2  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
    EuropeNotM1n171127EuEcer4601Superceded = 3  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
    JapanArticle44Trias29Trias39 = 4  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
    AustraliaAdr1402 = 5  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
    SaudiArabiaGulfStatesSsa770771Gs421442 = 6  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
    ChinaM1n1OnlyGb150842006 = 7  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
    ChinaNotM1n1Gb150842006 = 8  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderEyePointMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderEyePointMethodType():
    """
    Used to indicate the method to define the eye point. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ByEceVisionPointsFeature", "Represents using ECE Vision Point feature to get eye point"
       "ByHipPoint", "Represents using Hip Point to calculate the eye point"
    """
    ByEceVisionPointsFeature = 0  # MirrorCertificationBuilderEyePointMethodTypeMemberType
    ByHipPoint = 1  # MirrorCertificationBuilderEyePointMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderEyeFromOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderEyeFromOptionType():
    """
    Used to indicate what part the eye is from. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WorkPart", "Represents eyellipse feature is from work part"
       "RootPart", "Represents eyellipse feature is from root part"
       "OtherComponent", "Represents eyellipse feature is from the other component Part"
    """
    WorkPart = 0  # MirrorCertificationBuilderEyeFromOptionTypeMemberType
    RootPart = 1  # MirrorCertificationBuilderEyeFromOptionTypeMemberType
    OtherComponent = 2  # MirrorCertificationBuilderEyeFromOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderEyellipsePercentileTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderEyellipsePercentileType():
    """
    Used to indicate the eyellipse percentile that is used in mirror certification. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Percentile95", "Represents 95 Percentile eyellipse will be used for mirror certification"
       "Percentile99", "Represents 99 Percentile eyellipse will be used for mirror certification"
    """
    Percentile95 = 0  # MirrorCertificationBuilderEyellipsePercentileTypeMemberType
    Percentile99 = 1  # MirrorCertificationBuilderEyellipsePercentileTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderEyeMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderEyeMethodType():
    """
    Used to indicate the method to calculate the eye location based on the distance from the eyellipse to the mirror pivot. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MaximumDistance", "Represents using the maximum distance"
       "MinimumDistance", "Represents using the minimum distance"
       "MeanDistance", "Represents using the mean distance"
    """
    MaximumDistance = 0  # MirrorCertificationBuilderEyeMethodTypeMemberType
    MinimumDistance = 1  # MirrorCertificationBuilderEyeMethodTypeMemberType
    MeanDistance = 2  # MirrorCertificationBuilderEyeMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderMirrorSurfaceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderMirrorSurfaceType():
    """
    Used to indicate the mirror surface type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Planar", "Represents the planar mirror surface"
       "Spherical", "Represents the spherical mirror surface"
    """
    Planar = 0  # MirrorCertificationBuilderMirrorSurfaceTypeMemberType
    Spherical = 1  # MirrorCertificationBuilderMirrorSurfaceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderMirrorOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderMirrorOrientationType():
    """
    Used to indicate the method to rotate mirror. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AutoRotation", "Represents that the mirror will be rotated automatically"
       "InteractiveAdjustment", "Represents that the mirror will be rotated interactively"
    """
    AutoRotation = 0  # MirrorCertificationBuilderMirrorOrientationTypeMemberType
    InteractiveAdjustment = 1  # MirrorCertificationBuilderMirrorOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderInstructionFieldPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderInstructionFieldPositionType():
    """
    Used to indicate the postion where the instruction field will be. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OnTargetWall", "Represents that the instrucition field is on target wall"
       "OnRoadSurface", "Represents that the instrucition field is on road surface"
    """
    OnTargetWall = 0  # MirrorCertificationBuilderInstructionFieldPositionTypeMemberType
    OnRoadSurface = 1  # MirrorCertificationBuilderInstructionFieldPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderInstructionFieldsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderInstructionFieldsType():
    """
    Used to indicate the shape type of the instruction field. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Triangle", "Represents that the triangle Instruction field will be created"
       "Rectangle", "Represents that the rectangle Instruction field will be created"
    """
    Triangle = 0  # MirrorCertificationBuilderInstructionFieldsTypeMemberType
    Rectangle = 1  # MirrorCertificationBuilderInstructionFieldsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilderShowVisionConeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MirrorCertificationBuilderShowVisionConeType():
    """
    Used to indicate what vision cone will be shown. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Represents the vision cones aren't shown"
       "All", "Represents both of Eye-Mirror and Mirror Target vision cones are shown"
       "EyeToMirror", "Represents only Eye-Mirror vision cone is shown"
       "MirrorToTarget", "Represents only Mirror-Target vision cone is shown"
    """
    NotSet = 0  # MirrorCertificationBuilderShowVisionConeTypeMemberType
    All = 1  # MirrorCertificationBuilderShowVisionConeTypeMemberType
    EyeToMirror = 2  # MirrorCertificationBuilderShowVisionConeTypeMemberType
    MirrorToTarget = 3  # MirrorCertificationBuilderShowVisionConeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MirrorCertificationBuilder(NXOpen.Features.FeatureBuilder):
    """
    A :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilder` used to create or edit
    a vehicle design :py:class:`NXOpen.Features.VehicleDesign.MirrorCertification` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateMirrorCertificationBuilder`
    
    Default values.
    
    ==============================  ======================================
    Property                        Value
    ==============================  ======================================
    AllowHeadAndEyeRotation         1 
    ------------------------------  --------------------------------------
    ConvexRadius.Value              0 (millimeters part), 0 (inches part) 
    ------------------------------  --------------------------------------
    DeviateFromStandard             0 
    ------------------------------  --------------------------------------
    DriverSideStandard              UsaCanadaFmvss111Cmvsss111 
    ------------------------------  --------------------------------------
    EyeMethod                       MaximumDistance 
    ------------------------------  --------------------------------------
    EyePointMethod                  ByHipPoint 
    ------------------------------  --------------------------------------
    EyellipsePercentile             Percentile95 
    ------------------------------  --------------------------------------
    GenerateValidationLogFile       0 
    ------------------------------  --------------------------------------
    InfiniteDistance.Value          0 (millimeters part), 0 (inches part) 
    ------------------------------  --------------------------------------
    InsideStandard                  UsaCanadaFmvss111Cmvsss111 
    ------------------------------  --------------------------------------
    InstructionFieldPosition        OnTargetWall 
    ------------------------------  --------------------------------------
    InstructionFieldType            Triangle 
    ------------------------------  --------------------------------------
    Location                        Inside 
    ------------------------------  --------------------------------------
    MirrorOrientation               AutoRotation 
    ------------------------------  --------------------------------------
    MirrorType                      Planar 
    ------------------------------  --------------------------------------
    PassengerSideStandard           UsaCanadaFmvss111Cmvsss111 
    ------------------------------  --------------------------------------
    RotatedAngleY.Value             0 
    ------------------------------  --------------------------------------
    RotatedAngleZ.Value             0 
    ------------------------------  --------------------------------------
    ShowRays                        1 
    ------------------------------  --------------------------------------
    ShowVisionCone                  None 
    ------------------------------  --------------------------------------
    TargetDistance.Value            0 (millimeters part), 0 (inches part) 
    ------------------------------  --------------------------------------
    TargetDistanceFar.Value         0 (millimeters part), 0 (inches part) 
    ------------------------------  --------------------------------------
    TargetWidthAngular.Value        0 
    ------------------------------  --------------------------------------
    TargetWidthLength.Value         0 (millimeters part), 0 (inches part) 
    ------------------------------  --------------------------------------
    TargetWidthLengthFar.Value      0 (millimeters part), 0 (inches part) 
    ------------------------------  --------------------------------------
    UseEyeFrom                      WorkPart 
    ------------------------------  --------------------------------------
    UseLoadingSpecifiedByStandard   1 
    ------------------------------  --------------------------------------
    ViewValidationResults           0 
    ==============================  ======================================
    
    .. versionadded:: NX9.0.0
    """
    
    class LocationType():
        """
        Used to indicate the mirror location. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inside", "Represents the inside location"
           "DriverSide", "Represents the driver side location"
           "PassengerSide", " - "
        """
        Inside = 0  # MirrorCertificationBuilderLocationTypeMemberType
        DriverSide = 1  # MirrorCertificationBuilderLocationTypeMemberType
        PassengerSide = 2  # MirrorCertificationBuilderLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InsideStandardsType():
        """
        Used to indicate the standard for the inside mirror. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UsaCanadaFmvss111Cmvsss111", "Represents USA - Canada : FMVSS111 - CMVSSS111 standard"
           "Europe200397EcEcer4602", "Represents Europe : 2003/97/EC - ECE R46.02 standard"
           "JapanArticle44Trias29Trias39", "Represents Japan : Article 44/TRIAS 29/TRIAS 39 standard"
           "AustraliaAdr1402", "Represents Australia : ADR 14/02 standard"
           "SaudiArabiaGulfStatesSsa770771Gs421442", "Represents Saudi Arabia - Gulf States : SSA 770/771 GS 421/442 standard"
           "ChinaGb150842006", " - "
        """
        UsaCanadaFmvss111Cmvsss111 = 0  # MirrorCertificationBuilderInsideStandardsTypeMemberType
        Europe200397EcEcer4602 = 1  # MirrorCertificationBuilderInsideStandardsTypeMemberType
        JapanArticle44Trias29Trias39 = 2  # MirrorCertificationBuilderInsideStandardsTypeMemberType
        AustraliaAdr1402 = 3  # MirrorCertificationBuilderInsideStandardsTypeMemberType
        SaudiArabiaGulfStatesSsa770771Gs421442 = 4  # MirrorCertificationBuilderInsideStandardsTypeMemberType
        ChinaGb150842006 = 5  # MirrorCertificationBuilderInsideStandardsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DriverSideStandardsType():
        """
        Used to indicate the standard for the driver mirror. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UsaCanadaFmvss111Cmvsss111", "Represents USA - Canada : FMVSS111 - CMVSSS111 standard"
           "EuropeM1n1ClassiiiMirror200397EcEcer4602", "Represents Europe (M1/N1_Class III Mirror) : 2003/97/EC - ECE R46.02 standard"
           "Europe71127EuEcer4601Superceded", "Represents Europe : 71/127/EU - ECE R46.01 (Superceded ) standard"
           "JapanArticle44Trias29Trias39", "Represents Japan : Article 44/TRIAS 29/TRIAS 39 standard"
           "AustraliaAdr1402", "Represents Australia : ADR 14/02 standard"
           "SaudiArabiaGulfStatesSsa770771Gs421442", "Represents Saudi Arabia - Gulf States : SSA 770/771 GS 421/442 standard"
           "ChinaGb150842006", " - "
        """
        UsaCanadaFmvss111Cmvsss111 = 0  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
        EuropeM1n1ClassiiiMirror200397EcEcer4602 = 1  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
        Europe71127EuEcer4601Superceded = 2  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
        JapanArticle44Trias29Trias39 = 3  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
        AustraliaAdr1402 = 4  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
        SaudiArabiaGulfStatesSsa770771Gs421442 = 5  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
        ChinaGb150842006 = 6  # MirrorCertificationBuilderDriverSideStandardsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PassengerSideStandardsType():
        """
        Used to indicate the standard for the passenger mirror. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UsaCanadaFmvss111Cmvsss111", "Represents USA - Canada : FMVSS111 - CMVSSS111 standard"
           "EuropeM1n1ClassiiiMirror200397EcEcer4602", "Represents Europe (M1/N1_Class III Mirror) : 2003/97/EC - ECE R46.02 standard"
           "EuropeM1n1Only71127EuEcer4601Superceded", "Represents Europe (M1/N1 only) : 71/127/EU - ECE R46.01 (Superceded ) standard"
           "EuropeNotM1n171127EuEcer4601Superceded", "Represents Europe (Not M1/N1) : 71/127/EU - ECE R46.01 : (Superceded ) standard"
           "JapanArticle44Trias29Trias39", "Represents Japan : Article 44/TRIAS 29/TRIAS 39 standard"
           "AustraliaAdr1402", "Represents Australia : ADR 14/02 standard"
           "SaudiArabiaGulfStatesSsa770771Gs421442", "Represents Saudi Arabia - Gulf States : SSA 770/771 GS 421/442 standard"
           "ChinaM1n1OnlyGb150842006", "Represents China (M1/N1 only) : GB 15084 - 2006 standard"
           "ChinaNotM1n1Gb150842006", "Represents China (Not M1/N1) : GB 15084 - 2006 standard"
        """
        UsaCanadaFmvss111Cmvsss111 = 0  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
        EuropeM1n1ClassiiiMirror200397EcEcer4602 = 1  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
        EuropeM1n1Only71127EuEcer4601Superceded = 2  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
        EuropeNotM1n171127EuEcer4601Superceded = 3  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
        JapanArticle44Trias29Trias39 = 4  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
        AustraliaAdr1402 = 5  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
        SaudiArabiaGulfStatesSsa770771Gs421442 = 6  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
        ChinaM1n1OnlyGb150842006 = 7  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
        ChinaNotM1n1Gb150842006 = 8  # MirrorCertificationBuilderPassengerSideStandardsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EyePointMethodType():
        """
        Used to indicate the method to define the eye point. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ByEceVisionPointsFeature", "Represents using ECE Vision Point feature to get eye point"
           "ByHipPoint", "Represents using Hip Point to calculate the eye point"
        """
        ByEceVisionPointsFeature = 0  # MirrorCertificationBuilderEyePointMethodTypeMemberType
        ByHipPoint = 1  # MirrorCertificationBuilderEyePointMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EyeFromOptionType():
        """
        Used to indicate what part the eye is from. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WorkPart", "Represents eyellipse feature is from work part"
           "RootPart", "Represents eyellipse feature is from root part"
           "OtherComponent", "Represents eyellipse feature is from the other component Part"
        """
        WorkPart = 0  # MirrorCertificationBuilderEyeFromOptionTypeMemberType
        RootPart = 1  # MirrorCertificationBuilderEyeFromOptionTypeMemberType
        OtherComponent = 2  # MirrorCertificationBuilderEyeFromOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EyellipsePercentileType():
        """
        Used to indicate the eyellipse percentile that is used in mirror certification. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Percentile95", "Represents 95 Percentile eyellipse will be used for mirror certification"
           "Percentile99", "Represents 99 Percentile eyellipse will be used for mirror certification"
        """
        Percentile95 = 0  # MirrorCertificationBuilderEyellipsePercentileTypeMemberType
        Percentile99 = 1  # MirrorCertificationBuilderEyellipsePercentileTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EyeMethodType():
        """
        Used to indicate the method to calculate the eye location based on the distance from the eyellipse to the mirror pivot. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MaximumDistance", "Represents using the maximum distance"
           "MinimumDistance", "Represents using the minimum distance"
           "MeanDistance", "Represents using the mean distance"
        """
        MaximumDistance = 0  # MirrorCertificationBuilderEyeMethodTypeMemberType
        MinimumDistance = 1  # MirrorCertificationBuilderEyeMethodTypeMemberType
        MeanDistance = 2  # MirrorCertificationBuilderEyeMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MirrorSurfaceType():
        """
        Used to indicate the mirror surface type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Planar", "Represents the planar mirror surface"
           "Spherical", "Represents the spherical mirror surface"
        """
        Planar = 0  # MirrorCertificationBuilderMirrorSurfaceTypeMemberType
        Spherical = 1  # MirrorCertificationBuilderMirrorSurfaceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MirrorOrientationType():
        """
        Used to indicate the method to rotate mirror. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AutoRotation", "Represents that the mirror will be rotated automatically"
           "InteractiveAdjustment", "Represents that the mirror will be rotated interactively"
        """
        AutoRotation = 0  # MirrorCertificationBuilderMirrorOrientationTypeMemberType
        InteractiveAdjustment = 1  # MirrorCertificationBuilderMirrorOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InstructionFieldPositionType():
        """
        Used to indicate the postion where the instruction field will be. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OnTargetWall", "Represents that the instrucition field is on target wall"
           "OnRoadSurface", "Represents that the instrucition field is on road surface"
        """
        OnTargetWall = 0  # MirrorCertificationBuilderInstructionFieldPositionTypeMemberType
        OnRoadSurface = 1  # MirrorCertificationBuilderInstructionFieldPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InstructionFieldsType():
        """
        Used to indicate the shape type of the instruction field. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Triangle", "Represents that the triangle Instruction field will be created"
           "Rectangle", "Represents that the rectangle Instruction field will be created"
        """
        Triangle = 0  # MirrorCertificationBuilderInstructionFieldsTypeMemberType
        Rectangle = 1  # MirrorCertificationBuilderInstructionFieldsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShowVisionConeType():
        """
        Used to indicate what vision cone will be shown. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Represents the vision cones aren't shown"
           "All", "Represents both of Eye-Mirror and Mirror Target vision cones are shown"
           "EyeToMirror", "Represents only Eye-Mirror vision cone is shown"
           "MirrorToTarget", "Represents only Mirror-Target vision cone is shown"
        """
        NotSet = 0  # MirrorCertificationBuilderShowVisionConeTypeMemberType
        All = 1  # MirrorCertificationBuilderShowVisionConeTypeMemberType
        EyeToMirror = 2  # MirrorCertificationBuilderShowVisionConeTypeMemberType
        MirrorToTarget = 3  # MirrorCertificationBuilderShowVisionConeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetUserRemarks(self) -> 'list[str]':
        """
        Gets the user remarks with the feature.  
        
        Signature ``GetUserRemarks()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUserRemarks(self, userRemarks: 'list[str]') -> None:
        """
        Sets the user remarks with the feature.  
        
        Signature ``SetUserRemarks(userRemarks)`` 
        
        :param userRemarks: 
        :type userRemarks: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def CreatePointWithBaseDataSGRPExpression(self) -> NXOpen.Point:
        """
        Create a point according to Base Data SGRP expressions  
        
        Signature ``CreatePointWithBaseDataSGRPExpression()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    AllowHeadAndEyeRotation: bool = ...
    """
    Returns or sets  the indication if the head and eye rotation is allowed.  
    
    <hr>
    
    Getter Method
    
    Signature ``AllowHeadAndEyeRotation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllowHeadAndEyeRotation`` 
    
    :param allowHeadAndEyeRotation: 
    :type allowHeadAndEyeRotation: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BackliteWindshieldFace: NXOpen.ScCollector = ...
    """
    Returns  the backlite windshield face representing the rear window (backlite) day light opening (DLO).  
    
    <hr>
    
    Getter Method
    
    Signature ``BackliteWindshieldFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    BackliteWindshieldFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the backlite windshield facet body representing the rear window (backlite) day light opening (DLO).  
    
    <hr>
    
    Getter Method
    
    Signature ``BackliteWindshieldFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    BezelCurve: NXOpen.Section = ...
    """
    Returns  the bezel curve representing the inside perimeter of the closed protective cover (or shell) around a mirror and must be a closed loop of curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``BezelCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ConvexRadius: NXOpen.Expression = ...
    """
    Returns  the convex radius of the spherial mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConvexRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DeviateFromStandard: bool = ...
    """
    Returns or sets  the indication if the target values are deviated from standard.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeviateFromStandard`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeviateFromStandard`` 
    
    :param deviateFromStandard: 
    :type deviateFromStandard: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DriverSideFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the facet body that represents the mirror surface at driver side.  
    
    <hr>
    
    Getter Method
    
    Signature ``DriverSideFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    DriverSideMirrorFace: NXOpen.ScCollector = ...
    """
    Returns  the face that represents the mirror surface at driver side.  
    
    <hr>
    
    Getter Method
    
    Signature ``DriverSideMirrorFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DriverSideStandard: MirrorCertificationBuilderDriverSideStandardsType = ...
    """
    Returns or sets  the standard for the driver side mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``DriverSideStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderDriverSideStandardsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DriverSideStandard`` 
    
    :param driverSideStandard: 
    :type driverSideStandard: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderDriverSideStandardsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    EyeComponent: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the component part that contains the eye.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyeComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    EyeMethod: MirrorCertificationBuilderEyeMethodType = ...
    """
    Returns or sets  the method to calculate the eye location based on the distance from the eyellipse to the mirror pivot.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyeMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderEyeMethodType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EyeMethod`` 
    
    :param eyeMethod: 
    :type eyeMethod: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderEyeMethodType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    EyeMirrorRestrictions: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the restrictions between the eye and the mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyeMirrorRestrictions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    EyeMirrorRestrictionsFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the facet bodies representing the restrictions between the eye and the mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyeMirrorRestrictionsFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    EyePointMethod: MirrorCertificationBuilderEyePointMethodType = ...
    """
    Returns or sets  the method to define the eye point.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyePointMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderEyePointMethodType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EyePointMethod`` 
    
    :param eyePointMethod: 
    :type eyePointMethod: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderEyePointMethodType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Eyellipse: str = ...
    """
    Returns or sets  the eyellipse feature name used for mirror certification.  
    
    <hr>
    
    Getter Method
    
    Signature ``Eyellipse`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Eyellipse`` 
    
    :param eyellipse: 
    :type eyellipse: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    EyellipsePercentile: MirrorCertificationBuilderEyellipsePercentileType = ...
    """
    Returns or sets  the eyellipse percentile that will be used for mirror certification.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyellipsePercentile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderEyellipsePercentileType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EyellipsePercentile`` 
    
    :param eyellipsePercentile: 
    :type eyellipsePercentile: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderEyellipsePercentileType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GeneralColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color applied to the general output geometries.  
    
    <hr>
    
    Getter Method
    
    Signature ``GeneralColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GeneralColor`` 
    
    :param generalColor: 
    :type generalColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GenerateValidationLogFile: bool = ...
    """
    Returns or sets  the indication if the validation log file is generated.  
    
    <hr>
    
    Getter Method
    
    Signature ``GenerateValidationLogFile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GenerateValidationLogFile`` 
    
    :param generateValidationLogFile: 
    :type generateValidationLogFile: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GroundWidePoint: NXOpen.Point = ...
    """
    Returns or sets  the ground wide point representing the widest position of the vehicle body at the ground level.  
    
    <hr>
    
    Getter Method
    
    Signature ``GroundWidePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GroundWidePoint`` 
    
    :param groundWidePoint: 
    :type groundWidePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HipPoint: NXOpen.Point = ...
    """
    Returns or sets  the hip point of the driver.  
    
    <hr>
    
    Getter Method
    
    Signature ``HipPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HipPoint`` 
    
    :param hipPoint: 
    :type hipPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    InfiniteDistance: NXOpen.Expression = ...
    """
    Returns  the infinite distance to the eye behind the vehicle.  
    
    <hr>
    
    Getter Method
    
    Signature ``InfiniteDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    InsideStandard: MirrorCertificationBuilderInsideStandardsType = ...
    """
    Returns or sets  the standard for the inside mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsideStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderInsideStandardsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsideStandard`` 
    
    :param insideStandard: 
    :type insideStandard: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderInsideStandardsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    InstructionFieldPosition: MirrorCertificationBuilderInstructionFieldPositionType = ...
    """
    Returns or sets  the instruction field position, on wall or road.  
    
    <hr>
    
    Getter Method
    
    Signature ``InstructionFieldPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderInstructionFieldPositionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstructionFieldPosition`` 
    
    :param instructionFieldPosition: 
    :type instructionFieldPosition: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderInstructionFieldPositionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    InstructionFieldType: MirrorCertificationBuilderInstructionFieldsType = ...
    """
    Returns or sets  the instruction field type, triangle or rectangle.  
    
    <hr>
    
    Getter Method
    
    Signature ``InstructionFieldType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderInstructionFieldsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstructionFieldType`` 
    
    :param instructionFieldType: 
    :type instructionFieldType: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderInstructionFieldsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LeftEyeColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color applied to the left eye vision geometries for the driver or passenger side mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``LeftEyeColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeftEyeColor`` 
    
    :param leftEyeColor: 
    :type leftEyeColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LeftEyeDownColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color applied to the left eye down-vision geometries for the inside mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``LeftEyeDownColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeftEyeDownColor`` 
    
    :param leftEyeDownColor: 
    :type leftEyeDownColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LeftEyeUpColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color applied to the left eye up-vision geometries for the inside mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``LeftEyeUpColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeftEyeUpColor`` 
    
    :param leftEyeUpColor: 
    :type leftEyeUpColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Loading: str = ...
    """
    Returns or sets  the loading applied to the vehicle for mirror certification.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Location: MirrorCertificationBuilderLocationType = ...
    """
    Returns or sets  the mirror location.  
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderLocationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Location`` 
    
    :param location: 
    :type location: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderLocationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    MirrorFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the facet body that represents the closed mirror profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    MirrorOrientation: MirrorCertificationBuilderMirrorOrientationType = ...
    """
    Returns or sets  the mirror orientation method.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderMirrorOrientationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorOrientation`` 
    
    :param mirrorOrientation: 
    :type mirrorOrientation: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderMirrorOrientationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    MirrorSurface: NXOpen.ScCollector = ...
    """
    Returns  the face that represents the closed mirror profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorSurface`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MirrorTargetRestrictions: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the restrictions between the mirror and the target plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorTargetRestrictions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MirrorTargetRestrictionsFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the facet body representing the restrictions between the mirror and the target plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorTargetRestrictionsFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    MirrorType: MirrorCertificationBuilderMirrorSurfaceType = ...
    """
    Returns or sets  the mirror surface type, planar or spherical.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderMirrorSurfaceType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorType`` 
    
    :param mirrorType: 
    :type mirrorType: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderMirrorSurfaceType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PassengerSideStandard: MirrorCertificationBuilderPassengerSideStandardsType = ...
    """
    Returns or sets  the standard for passenger side mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``PassengerSideStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderPassengerSideStandardsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PassengerSideStandard`` 
    
    :param passengerSideStandard: 
    :type passengerSideStandard: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderPassengerSideStandardsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PivotPoint: NXOpen.Point = ...
    """
    Returns or sets  the pivot point about which the mirror rotates.  
    
    <hr>
    
    Getter Method
    
    Signature ``PivotPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PivotPoint`` 
    
    :param pivotPoint: 
    :type pivotPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PrimePoint: NXOpen.Point = ...
    """
    Returns or sets  the prime point representing the highest inboard point on the mirror, which defines the horizontal ray (in side view) parallel to vehicle centerline (in top view).  
    
    <hr>
    
    Getter Method
    
    Signature ``PrimePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrimePoint`` 
    
    :param primePoint: 
    :type primePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RightEyeColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color applied to the right eye vision geometries for the driver or passenger side mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``RightEyeColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RightEyeColor`` 
    
    :param rightEyeColor: 
    :type rightEyeColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RightEyeDownColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color applied to the right eye down-vision geometries for the inside mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``RightEyeDownColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RightEyeDownColor`` 
    
    :param rightEyeDownColor: 
    :type rightEyeDownColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RightEyeUpColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color applied to the right eye up-vision geometries for the inside mirror.  
    
    <hr>
    
    Getter Method
    
    Signature ``RightEyeUpColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RightEyeUpColor`` 
    
    :param rightEyeUpColor: 
    :type rightEyeUpColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RotatedAngleY: NXOpen.Expression = ...
    """
    Returns  the rotated angle about Y axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotatedAngleY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RotatedAngleZ: NXOpen.Expression = ...
    """
    Returns  the rotated angle about Z axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotatedAngleZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ShowRays: bool = ...
    """
    Returns or sets  the indication if the vision rays are created.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowRays`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowRays`` 
    
    :param showRays: 
    :type showRays: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowVisionCone: MirrorCertificationBuilderShowVisionConeType = ...
    """
    Returns or sets  the indication if the vision cone is shown.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowVisionCone`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderShowVisionConeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowVisionCone`` 
    
    :param showVisionCone: 
    :type showVisionCone: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderShowVisionConeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TargetDistance: NXOpen.Expression = ...
    """
    Returns  the target distance to the eye behind the vehicle, which is defined in the standard.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TargetDistanceFar: NXOpen.Expression = ...
    """
    Returns  the far target distance to the eye behind the vehicle, which is defined in the standard.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetDistanceFar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TargetWidthAngular: NXOpen.Expression = ...
    """
    Returns  the target vision angle, which is defined in the standard.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetWidthAngular`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TargetWidthLength: NXOpen.Expression = ...
    """
    Returns  the target width at the target distance position, which is defined in the standard.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetWidthLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TargetWidthLengthFar: NXOpen.Expression = ...
    """
    Returns  the target width at the far target distance position, which is defined in the standard.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetWidthLengthFar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UseEyeFrom: MirrorCertificationBuilderEyeFromOptionType = ...
    """
    Returns or sets  the part that the eye is from.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseEyeFrom`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderEyeFromOptionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseEyeFrom`` 
    
    :param useEyeFrom: 
    :type useEyeFrom: :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilderEyeFromOptionType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseLoadingSpecifiedByStandard: bool = ...
    """
    Returns or sets  the flag to indicate if the loading specified by the standard will be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseLoadingSpecifiedByStandard`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseLoadingSpecifiedByStandard`` 
    
    :param useLoadingSpecifiedByStandard: 
    :type useLoadingSpecifiedByStandard: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ViewValidationResults: bool = ...
    """
    Returns or sets  the indication if the packaging validation gadget is invoked to view the results.  
    
    <hr>
    
    Getter Method
    
    Signature ``ViewValidationResults`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewValidationResults`` 
    
    :param viewValidationResults: 
    :type viewValidationResults: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WheelProtrusionPoint: NXOpen.Point = ...
    """
    Returns or sets  the wheel protrusion point used to calculate close targets near the rear axle centerline.  
    
    <hr>
    
    Getter Method
    
    Signature ``WheelProtrusionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelProtrusionPoint`` 
    
    :param wheelProtrusionPoint: 
    :type wheelProtrusionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: MirrorCertificationBuilder = ...  # unknown typename


class HeadImpactBPillar(NXOpen.Features.BodyFeature):
    """
    Represents a head impact b-pillar feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillarBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpactBPillar = ...  # unknown typename


class WheelCoveringBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WheelCoveringBuilderRequirementsControlType():
    """
    Represents the requirements control types to define the wheel covering. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", "Represents the option for reading parameters from the config file"
       "UserDefined", "Represents the option for input of user defined parameters"
    """
    StandardDriven = 0  # WheelCoveringBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # WheelCoveringBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WheelCoveringBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WheelCoveringBuilderPositionType():
    """
    Represents the wheel covering positions. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Front", "Creates checking surface for front wheel only"
       "Rear", "Creates checking surface for rear wheel only"
       "Both", "Creates checking surface for both front and rear wheels"
    """
    Front = 0  # WheelCoveringBuilderPositionTypeMemberType
    Rear = 1  # WheelCoveringBuilderPositionTypeMemberType
    Both = 2  # WheelCoveringBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WheelCoveringBuilderSurfacePlaneTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WheelCoveringBuilderSurfacePlaneType():
    """
    Represents the type of the surface plane. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WheelPlane", "The checking surface is coplanar to the ourside of the wheels"
       "PerpendiculartoLoading", "The checking surface is perpendicular to the active loading plane"
    """
    WheelPlane = 0  # WheelCoveringBuilderSurfacePlaneTypeMemberType
    PerpendiculartoLoading = 1  # WheelCoveringBuilderSurfacePlaneTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WheelCoveringBuilderSurfaceSectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WheelCoveringBuilderSurfaceSectionType():
    """
    Represents the type of the surface section. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CircleSection", "The checking surface is created as circle section type"
       "Adr42", "The checking surface is created as ADR 42 type"
       "ExtrudeSection", "The checking surface is created as extrude section type"
    """
    CircleSection = 0  # WheelCoveringBuilderSurfaceSectionTypeMemberType
    Adr42 = 1  # WheelCoveringBuilderSurfaceSectionTypeMemberType
    ExtrudeSection = 2  # WheelCoveringBuilderSurfaceSectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WheelCoveringBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.WheelCovering` 
    feature builder for wheel covering surface section checking.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateWheelCoveringBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlType():
        """
        Represents the requirements control types to define the wheel covering. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", "Represents the option for reading parameters from the config file"
           "UserDefined", "Represents the option for input of user defined parameters"
        """
        StandardDriven = 0  # WheelCoveringBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # WheelCoveringBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionType():
        """
        Represents the wheel covering positions. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Front", "Creates checking surface for front wheel only"
           "Rear", "Creates checking surface for rear wheel only"
           "Both", "Creates checking surface for both front and rear wheels"
        """
        Front = 0  # WheelCoveringBuilderPositionTypeMemberType
        Rear = 1  # WheelCoveringBuilderPositionTypeMemberType
        Both = 2  # WheelCoveringBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SurfacePlaneType():
        """
        Represents the type of the surface plane. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WheelPlane", "The checking surface is coplanar to the ourside of the wheels"
           "PerpendiculartoLoading", "The checking surface is perpendicular to the active loading plane"
        """
        WheelPlane = 0  # WheelCoveringBuilderSurfacePlaneTypeMemberType
        PerpendiculartoLoading = 1  # WheelCoveringBuilderSurfacePlaneTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SurfaceSectionType():
        """
        Represents the type of the surface section. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CircleSection", "The checking surface is created as circle section type"
           "Adr42", "The checking surface is created as ADR 42 type"
           "ExtrudeSection", "The checking surface is created as extrude section type"
        """
        CircleSection = 0  # WheelCoveringBuilderSurfaceSectionTypeMemberType
        Adr42 = 1  # WheelCoveringBuilderSurfaceSectionTypeMemberType
        ExtrudeSection = 2  # WheelCoveringBuilderSurfaceSectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DisplayIntersectionCurves: bool = ...
    """
    Returns or sets  the display of the intersection curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayIntersectionCurves`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayIntersectionCurves`` 
    
    :param displayIntersectionCurves: 
    :type displayIntersectionCurves: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontBottomOffset: NXOpen.Expression = ...
    """
    Returns  the bottom offset of the front surface section
    when the front surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.Adr42 <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontBottomOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontClearance: NXOpen.Expression = ...
    """
    Returns  the clearance of the front surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontClearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontFrontAngle: NXOpen.Expression = ...
    """
    Returns  the front angle of the front surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontFrontAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontFrontOffset: NXOpen.Expression = ...
    """
    Returns  the front offset of the front surface section
    when the front surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.Adr42 <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontFrontOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontHeight: NXOpen.Expression = ...
    """
    Returns  the height of the front surface section
    when front the surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.Adr42 <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontHubcapSelection: NXOpen.ScCollector = ...
    """
    Returns  the front hub cap selection.  
    
    The collector contains the hub cap faces used to create the front surface section shape. 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontHubcapSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontObjectSelection: NXOpen.ScCollector = ...
    """
    Returns  the front object selection.  
    
    The collector contains the faces used to create the front intersection curves with the front surface section shape. 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontObjectSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontRadius: NXOpen.Expression = ...
    """
    Returns  the radius of the front surface section 
    when the front surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.CircleSection <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontRearAngle: NXOpen.Expression = ...
    """
    Returns  the rear angle of the front surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontRearAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontRearOffset: NXOpen.Expression = ...
    """
    Returns  the rear offset of the front surface section
    when the front surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.Adr42 <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontRearOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontSurfacePlane: WheelCoveringBuilderSurfacePlaneType = ...
    """
    Returns or sets  the surface plane type of the front surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontSurfacePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfacePlaneType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontSurfacePlane`` 
    
    :param frontSurfacePlane: 
    :type frontSurfacePlane: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfacePlaneType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontSurfaceSection: WheelCoveringBuilderSurfaceSectionType = ...
    """
    Returns or sets  the surface section type of the front surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontSurfaceSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontSurfaceSection`` 
    
    :param frontSurfaceSection: 
    :type frontSurfaceSection: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Loading: str = ...
    """
    Returns or sets  the loading used in the wheel covering.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Position: WheelCoveringBuilderPositionType = ...
    """
    Returns or sets  the wheel covering position.  
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearBottomOffset: NXOpen.Expression = ...
    """
    Returns  the bottom offset of the rear surface section
    when the rear surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.Adr42 <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearBottomOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearClearance: NXOpen.Expression = ...
    """
    Returns  the clearance of the rear surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearClearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearDisToWheelCenter: NXOpen.Expression = ...
    """
    Returns  the distance to the wheel center
    when rear surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.CircleSection <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearDisToWheelCenter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearFrontAngle: NXOpen.Expression = ...
    """
    Returns  the front angle of the rear surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearFrontAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearFrontOffset: NXOpen.Expression = ...
    """
    Returns  the front offset of the rear surface section
    when the rear surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.Adr42 <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearFrontOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearHeight: NXOpen.Expression = ...
    """
    Returns  the height of the rear surface section
    when the rear surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.Adr42 <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearHubcapSelection: NXOpen.ScCollector = ...
    """
    Returns  the rear hub cap selection.  
    
    The collector contains the hub cap faces used to create the rear surface section shape. 
    
    <hr>
    
    Getter Method
    
    Signature ``RearHubcapSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearObjectSelection: NXOpen.ScCollector = ...
    """
    Returns  the rear object selection.  
    
    The collector contains the faces used to create the rear intersection curves with the rear surface section shape. 
    
    <hr>
    
    Getter Method
    
    Signature ``RearObjectSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearRadius: NXOpen.Expression = ...
    """
    Returns  the radius of the rear surface section
    when the rear surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.CircleSection <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearRearAngle: NXOpen.Expression = ...
    """
    Returns  the rear angle of the rear surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearRearAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearRearOffset: NXOpen.Expression = ...
    """
    Returns  the rear offset of the rear surface section
    when the rear surface section type is :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType.Adr42 <NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearRearOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearSurfacePlane: WheelCoveringBuilderSurfacePlaneType = ...
    """
    Returns or sets  the surface plane type of the rear surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearSurfacePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfacePlaneType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearSurfacePlane`` 
    
    :param rearSurfacePlane: 
    :type rearSurfacePlane: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfacePlaneType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearSurfaceSection: WheelCoveringBuilderSurfaceSectionType = ...
    """
    Returns or sets  the surface section type of the rear surface section.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearSurfaceSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearSurfaceSection`` 
    
    :param rearSurfaceSection: 
    :type rearSurfaceSection: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderSurfaceSectionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RequirementsControl: WheelCoveringBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control for standard driven or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirement: 
    :type requirement: :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard used to define the wheel covering.  
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: WheelCoveringBuilder = ...  # unknown typename


class TireEnvelopeBuilderTireDefinitionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TireEnvelopeBuilderTireDefinitionOption():
    """
    Settings to indicate how the tire profile will be defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SolidBody", "Use a solid body."
       "ProfileCurves", "Use curves in the current work part."
       "SketchfromOtherPart", "Use curves from a sketch in another part."
       "ProfilePointFile", "Read a text file with tire profile points."
    """
    SolidBody = 0  # TireEnvelopeBuilderTireDefinitionOptionMemberType
    ProfileCurves = 1  # TireEnvelopeBuilderTireDefinitionOptionMemberType
    SketchfromOtherPart = 2  # TireEnvelopeBuilderTireDefinitionOptionMemberType
    ProfilePointFile = 3  # TireEnvelopeBuilderTireDefinitionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TireEnvelopeBuilderSpindleFileLocationOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TireEnvelopeBuilderSpindleFileLocationOption():
    """
    Settings to indicate the location to select the spindle file. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "InNative", "In Native"
       "InTeamcenter", "In Teamcenter"
    """
    InNative = 0  # TireEnvelopeBuilderSpindleFileLocationOptionMemberType
    InTeamcenter = 1  # TireEnvelopeBuilderSpindleFileLocationOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TireEnvelopeBuilderMotionMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TireEnvelopeBuilderMotionMethod():
    """
    Settings to indicate how the suspension system motion will be defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ExistingSpindleFile", "From an existing spindle file."
       "FromSpindleLines", "From lines that define the locations of the suspension components."
       "ExistingScenarioMotionModel", "From an existing scenario motion model."
       "SuspensionTemplate", "From a defined suspension template."
    """
    ExistingSpindleFile = 0  # TireEnvelopeBuilderMotionMethodMemberType
    FromSpindleLines = 1  # TireEnvelopeBuilderMotionMethodMemberType
    ExistingScenarioMotionModel = 2  # TireEnvelopeBuilderMotionMethodMemberType
    SuspensionTemplate = 3  # TireEnvelopeBuilderMotionMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TireEnvelopeBuilderSuspensionTemplateTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TireEnvelopeBuilderSuspensionTemplateType():
    """
    Settings to indicate the defined suspension template to use. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MacPhersonStrut", "Use the MacPherson Strut suspension template."
       "ShortLongArmwithSteering", "Use the Short-Long Arm with steering suspension template."
       "ShortLongArmwithoutSteering", "Use the Short-Long Arm without steering suspension template."
       "FiveLinkSolidAxlewithoutSteering", "Use the Five Link Solid Axle without steering suspension template."
    """
    MacPhersonStrut = 0  # TireEnvelopeBuilderSuspensionTemplateTypeMemberType
    ShortLongArmwithSteering = 1  # TireEnvelopeBuilderSuspensionTemplateTypeMemberType
    ShortLongArmwithoutSteering = 2  # TireEnvelopeBuilderSuspensionTemplateTypeMemberType
    FiveLinkSolidAxlewithoutSteering = 3  # TireEnvelopeBuilderSuspensionTemplateTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TireEnvelopeBuilderDriverGraphOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TireEnvelopeBuilderDriverGraphOption():
    """
    Settings to indicate the driver definition to use with the MacPherson Strut suspension template. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RectangularJounceRebound", "Use the rectangular jounce rebound definition."
       "RectangularTaperedY", "Use the rectangular definition with taper in the Y direction."
       "RectangularTaperedX", "Use the rectangular definition with taper in the X direction."
       "TaperedOneSide", "Use the rectangular definition with taper on one side."
       "BySketch", "Use a sketch to define the driver."
       "TwoDriversOneFixed", "Use a fixed definition for two drivers."
    """
    RectangularJounceRebound = 0  # TireEnvelopeBuilderDriverGraphOptionMemberType
    RectangularTaperedY = 1  # TireEnvelopeBuilderDriverGraphOptionMemberType
    RectangularTaperedX = 2  # TireEnvelopeBuilderDriverGraphOptionMemberType
    TaperedOneSide = 3  # TireEnvelopeBuilderDriverGraphOptionMemberType
    BySketch = 4  # TireEnvelopeBuilderDriverGraphOptionMemberType
    TwoDriversOneFixed = 5  # TireEnvelopeBuilderDriverGraphOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TireEnvelopeBuilderEnvelopeOffsetMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TireEnvelopeBuilderEnvelopeOffsetMethod():
    """
    Settings to indicate how the offset will be defined. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FixedSections", "Use the values in the fixed sections."
       "CustomerDefinedData", "Use the data that the user defines."
       "FromOffsetFile", "From the offset file."
    """
    FixedSections = 0  # TireEnvelopeBuilderEnvelopeOffsetMethodMemberType
    CustomerDefinedData = 1  # TireEnvelopeBuilderEnvelopeOffsetMethodMemberType
    FromOffsetFile = 2  # TireEnvelopeBuilderEnvelopeOffsetMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TireEnvelopeBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a builder that is used to edit or create a :py:class:`NXOpen.Features.VehicleDesign.TireEnvelope`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateTireEnvelopeBuilder`
    
    Default values.
    
    ============================  ==========================================
    Property                      Value
    ============================  ==========================================
    AddMasterComponentPart        0 
    ----------------------------  ------------------------------------------
    ApplyOffset                   0 
    ----------------------------  ------------------------------------------
    BushingJointAsymmetric        0 
    ----------------------------  ------------------------------------------
    ClearanceValue.Value          20 (millimeters part), 0.75 (inches part) 
    ----------------------------  ------------------------------------------
    CreateTireEnvelopeFeature     1 
    ----------------------------  ------------------------------------------
    DistanceTolerance.Value       0 (millimeters part), 0 (inches part) 
    ----------------------------  ------------------------------------------
    DownOffsetValue.Value         6 (millimeters part), 0 (inches part) 
    ----------------------------  ------------------------------------------
    DriverGraph                   RectangularJounceRebound 
    ----------------------------  ------------------------------------------
    EnvelopeConcavity             0.5 
    ----------------------------  ------------------------------------------
    FirstDriverJointLowerLimit    0 
    ----------------------------  ------------------------------------------
    FirstDriverJointSteps         0 
    ----------------------------  ------------------------------------------
    FirstDriverJointUpperLimit    0 
    ----------------------------  ------------------------------------------
    FixedLocationPercentage       40 
    ----------------------------  ------------------------------------------
    FrontOffsetValue.Value        20 (millimeters part), 0 (inches part) 
    ----------------------------  ------------------------------------------
    InboardOffsetValue.Value      10 (millimeters part), 0 (inches part) 
    ----------------------------  ------------------------------------------
    InnerJointAsymmetric          0 
    ----------------------------  ------------------------------------------
    JounceDistance                0 
    ----------------------------  ------------------------------------------
    MirrorProfile                 1 
    ----------------------------  ------------------------------------------
    Motion                        ExistingSpindleFile 
    ----------------------------  ------------------------------------------
    OutboardOffsetValue.Value     10 (millimeters part), 0 (inches part) 
    ----------------------------  ------------------------------------------
    ProfileSplineLayer            1 
    ----------------------------  ------------------------------------------
    RadialEndAngle.Value          0 
    ----------------------------  ------------------------------------------
    RadialStartAngle.Value        0 
    ----------------------------  ------------------------------------------
    RearOffsetValue.Value         15 (millimeters part), 0 (inches part) 
    ----------------------------  ------------------------------------------
    ReboundDistance               0 
    ----------------------------  ------------------------------------------
    RollAngle.Value               7 
    ----------------------------  ------------------------------------------
    RunClearanceAnalysis          1 
    ----------------------------  ------------------------------------------
    SaveScenario                  1 
    ----------------------------  ------------------------------------------
    SecondDriverJointLowerLimit   0 
    ----------------------------  ------------------------------------------
    SecondDriverJointSteps        0 
    ----------------------------  ------------------------------------------
    SecondDriverJointUpperLimit   0 
    ----------------------------  ------------------------------------------
    SectionLayer                  1 
    ----------------------------  ------------------------------------------
    SheetBodyLayer                1 
    ----------------------------  ------------------------------------------
    ShockDriverJointSteps         0 
    ----------------------------  ------------------------------------------
    SpindleFileLocation           InNative 
    ----------------------------  ------------------------------------------
    SpindleLinesLayer             1 
    ----------------------------  ------------------------------------------
    SuspensionTemplate            MacPhersonStrut 
    ----------------------------  ------------------------------------------
    TaperLocationAY               40 
    ----------------------------  ------------------------------------------
    TaperLocationBX               40 
    ----------------------------  ------------------------------------------
    TaperLocationXAxis            100 
    ----------------------------  ------------------------------------------
    TaperLocationYAxis            100 
    ----------------------------  ------------------------------------------
    TireDefinition                SolidBody 
    ----------------------------  ------------------------------------------
    TrimRadius.Value              0 (millimeters part), 0 (inches part) 
    ----------------------------  ------------------------------------------
    UpOffsetValue.Value           6 (millimeters part), 0 (inches part) 
    ----------------------------  ------------------------------------------
    UseStabilizerBar              0 
    ----------------------------  ------------------------------------------
    WheelCenterlineShift.Value    20 (millimeters part), 1 (inches part) 
    ----------------------------  ------------------------------------------
    WheelRimDiameter.Value        430 (millimeters part), 15 (inches part) 
    ============================  ==========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class TireDefinitionOption():
        """
        Settings to indicate how the tire profile will be defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SolidBody", "Use a solid body."
           "ProfileCurves", "Use curves in the current work part."
           "SketchfromOtherPart", "Use curves from a sketch in another part."
           "ProfilePointFile", "Read a text file with tire profile points."
        """
        SolidBody = 0  # TireEnvelopeBuilderTireDefinitionOptionMemberType
        ProfileCurves = 1  # TireEnvelopeBuilderTireDefinitionOptionMemberType
        SketchfromOtherPart = 2  # TireEnvelopeBuilderTireDefinitionOptionMemberType
        ProfilePointFile = 3  # TireEnvelopeBuilderTireDefinitionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SpindleFileLocationOption():
        """
        Settings to indicate the location to select the spindle file. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "InNative", "In Native"
           "InTeamcenter", "In Teamcenter"
        """
        InNative = 0  # TireEnvelopeBuilderSpindleFileLocationOptionMemberType
        InTeamcenter = 1  # TireEnvelopeBuilderSpindleFileLocationOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MotionMethod():
        """
        Settings to indicate how the suspension system motion will be defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ExistingSpindleFile", "From an existing spindle file."
           "FromSpindleLines", "From lines that define the locations of the suspension components."
           "ExistingScenarioMotionModel", "From an existing scenario motion model."
           "SuspensionTemplate", "From a defined suspension template."
        """
        ExistingSpindleFile = 0  # TireEnvelopeBuilderMotionMethodMemberType
        FromSpindleLines = 1  # TireEnvelopeBuilderMotionMethodMemberType
        ExistingScenarioMotionModel = 2  # TireEnvelopeBuilderMotionMethodMemberType
        SuspensionTemplate = 3  # TireEnvelopeBuilderMotionMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SuspensionTemplateType():
        """
        Settings to indicate the defined suspension template to use. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MacPhersonStrut", "Use the MacPherson Strut suspension template."
           "ShortLongArmwithSteering", "Use the Short-Long Arm with steering suspension template."
           "ShortLongArmwithoutSteering", "Use the Short-Long Arm without steering suspension template."
           "FiveLinkSolidAxlewithoutSteering", "Use the Five Link Solid Axle without steering suspension template."
        """
        MacPhersonStrut = 0  # TireEnvelopeBuilderSuspensionTemplateTypeMemberType
        ShortLongArmwithSteering = 1  # TireEnvelopeBuilderSuspensionTemplateTypeMemberType
        ShortLongArmwithoutSteering = 2  # TireEnvelopeBuilderSuspensionTemplateTypeMemberType
        FiveLinkSolidAxlewithoutSteering = 3  # TireEnvelopeBuilderSuspensionTemplateTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DriverGraphOption():
        """
        Settings to indicate the driver definition to use with the MacPherson Strut suspension template. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RectangularJounceRebound", "Use the rectangular jounce rebound definition."
           "RectangularTaperedY", "Use the rectangular definition with taper in the Y direction."
           "RectangularTaperedX", "Use the rectangular definition with taper in the X direction."
           "TaperedOneSide", "Use the rectangular definition with taper on one side."
           "BySketch", "Use a sketch to define the driver."
           "TwoDriversOneFixed", "Use a fixed definition for two drivers."
        """
        RectangularJounceRebound = 0  # TireEnvelopeBuilderDriverGraphOptionMemberType
        RectangularTaperedY = 1  # TireEnvelopeBuilderDriverGraphOptionMemberType
        RectangularTaperedX = 2  # TireEnvelopeBuilderDriverGraphOptionMemberType
        TaperedOneSide = 3  # TireEnvelopeBuilderDriverGraphOptionMemberType
        BySketch = 4  # TireEnvelopeBuilderDriverGraphOptionMemberType
        TwoDriversOneFixed = 5  # TireEnvelopeBuilderDriverGraphOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EnvelopeOffsetMethod():
        """
        Settings to indicate how the offset will be defined. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FixedSections", "Use the values in the fixed sections."
           "CustomerDefinedData", "Use the data that the user defines."
           "FromOffsetFile", "From the offset file."
        """
        FixedSections = 0  # TireEnvelopeBuilderEnvelopeOffsetMethodMemberType
        CustomerDefinedData = 1  # TireEnvelopeBuilderEnvelopeOffsetMethodMemberType
        FromOffsetFile = 2  # TireEnvelopeBuilderEnvelopeOffsetMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetSessionNotes(self) -> 'list[str]':
        """
        Get the notes that are to be stored with the tire envelope feature.  
        
        Signature ``GetSessionNotes()`` 
        
        :returns:  user comments 
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSessionNotes(self, sessionNotes: 'list[str]') -> None:
        """
        Set the notes that are to be stored with the tire envelope feature.  
        
        Signature ``SetSessionNotes(sessionNotes)`` 
        
        :param sessionNotes:  user comments 
        :type sessionNotes: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def SwitchDrivers(self) -> None:
        """
        Switch the order of the two drivers.  
        
        Signature ``SwitchDrivers()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def SetVehicleCoordinateSystem(self, type: int, origin: NXOpen.Point3d, matrix: NXOpen.Matrix3x3) -> None:
        """
        Set the vehicle coordinate system.  
        
        Signature ``SetVehicleCoordinateSystem(type, origin, matrix)`` 
        
        :param type:  type  
        :type type: int 
        :param origin:  CSYS origin  
        :type origin: :py:class:`NXOpen.Point3d` 
        :param matrix:  CSYS matrix  
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    @typing.overload
    def AddMasterPart(self, partName: str) -> None:
        """
        Add the master part to the work part as one component by the given part name. 
        The master part contains suspension information. 
        
        Signature ``AddMasterPart(partName)`` 
        
        :param partName:  the master part name  
        :type partName: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    @typing.overload
    def AddMasterPart(self, partObject: NXOpen.Part) -> None:
        """
        Add the master part to the work part as one component by the given part object. 
        The master part contains suspension information. 
        
        Signature ``AddMasterPart(partObject)`` 
        
        :param partObject:  the master part object  
        :type partObject: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    @typing.overload
    def SetTireProfileSketch(self, partname: str, sketchname: str) -> None:
        """
        Set the sketch containing the tire profiles by the given part name and sketch name. 
        Only used when the tire profile option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption.SketchfromOtherPart <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption>`. 
        
        Signature ``SetTireProfileSketch(partname, sketchname)`` 
        
        :param partname:  the part name of the sketch  
        :type partname: str 
        :param sketchname:  the sketch name 
        :type sketchname: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    @typing.overload
    def SetTireProfileSketch(self, sketchObject: NXOpen.Sketch) -> None:
        """
        Set the sketch containing the tire profiles by the given sketch object. 
        Only used when the tire profile option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption.SketchfromOtherPart <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption>`. 
        
        Signature ``SetTireProfileSketch(sketchObject)`` 
        
        :param sketchObject:  the sketch object from other part  
        :type sketchObject: :py:class:`NXOpen.Sketch` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def CreateLinkedProfiles(self) -> None:
        """
        Create linked curves of the profiles in the sketch from the other part.  
        
        Only used when the tire profile option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption.SketchfromOtherPart <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption>`. 
        
        Signature ``CreateLinkedProfiles()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def CalculateProfilePoints(self) -> None:
        """
        Calculate the points of the tire profile.  
        
        Signature ``CalculateProfilePoints()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def ProcessFromSpindleLines(self) -> None:
        """
        Read the spindle data and write the data into the motion file.  
        
        Only used when the motion method option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod.FromSpindleLines <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod>`. 
        
        Signature ``ProcessFromSpindleLines()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def ReadSuspensionTemplate(self, fileName: str) -> str:
        """
        Read the file containing the suspension template points.  
        
        Only used when the motion method option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod.SuspensionTemplate <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod>`.  
        
        Signature ``ReadSuspensionTemplate(fileName)`` 
        
        :param fileName:  the name of the file containing the suspension template points.  
        :type fileName: str 
        :returns:  the missing point name  
        :rtype: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def SetSuspentionTemplatePoint(self, templateType: TireEnvelopeBuilderSuspensionTemplateType, jointIndex: int, pnt: NXOpen.Point3d) -> None:
        """
        Change the location of a joint in the suspension template.  
        
        Only used when the motion method option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod.SuspensionTemplate <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod>`. 
        
        Signature ``SetSuspentionTemplatePoint(templateType, jointIndex, pnt)`` 
        
        :param templateType:  template type 
        :type templateType: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderSuspensionTemplateType` 
        :param jointIndex:  joint index 
        :type jointIndex: int 
        :param pnt:  joint point coordinate  
        :type pnt: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def SetDriverJoints(self, steerJoint: NXOpen.NXObject, jounceJoint: NXOpen.NXObject) -> None:
        """
        Set the driver steering joint and jounce joint.  
        
        Only used when the motion method option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod.ExistingScenarioMotionModel <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod>`. 
        
        Signature ``SetDriverJoints(steerJoint, jounceJoint)`` 
        
        :param steerJoint:  the steering joint 
        :type steerJoint: :py:class:`NXOpen.NXObject` 
        :param jounceJoint:  the jounce joint 
        :type jounceJoint: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def BuildMotionTemplate(self) -> None:
        """
        Open the motion simulation and build the motion template.  
        
        Only used when the motion method option is  is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod.ExistingScenarioMotionModel <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod>` 
        or :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod.ExistingScenarioMotionModel <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod>`. 
        
        Signature ``BuildMotionTemplate()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def RunMotionArticulation(self) -> None:
        """
        Run the motion articulation, output the motion file and then exit the motion simulation.  
        
        Only used when the motion method option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod.ExistingScenarioMotionModel <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod>` 
        or :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod.ExistingScenarioMotionModel <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod>`.                      
        It must be paired with a call to :py:meth:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilder.BuildMotionTemplate`.
        
        Signature ``RunMotionArticulation()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def SetOffsetSections(self, sectionAngle: 'list[float]') -> None:
        """
        Indicate the sections that should be offset.  
        
        Only used when the motion method option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod.CustomerDefinedData <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod>`. 
        
        Signature ``SetOffsetSections(sectionAngle)`` 
        
        :param sectionAngle:  The radial angle of the sections that are to have an offset applied.  
        :type sectionAngle: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def SetOffsetValues(self, sectionIndex: int, offsetValues: 'list[float]') -> None:
        """
        Set the values of the offset for the specified section.  
        
        Only used when the motion method option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod.CustomerDefinedData <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod>`. 
        
        Signature ``SetOffsetValues(sectionIndex, offsetValues)`` 
        
        :param sectionIndex:  The index of the section to apply the offset values.  
        :type sectionIndex: int 
        :param offsetValues:  The offset values to apply to the specified section.  
        :type offsetValues: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def UpdateTireBodyFeature(self) -> None:
        """
        Update the tire body feature in the tire body output part file.  
        
        The tire body part will be added to the work part assembly as the moving component used for the clearance analysis. 
        Only used when the tire profile option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption.ProfileCurves <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption>` 
        or :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption.SketchfromOtherPart <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption>`. 
        
        Signature ``UpdateTireBodyFeature()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def ReassembleTireBodyComponent(self) -> None:
        """
        Re-assemble the part containing the tire body defining tire profile to work part as the moving component
        used for the clearance analysis.  
        
        Only used when the tire profile option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption.SolidBody <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption>`. 
        
        Signature ``ReassembleTireBodyComponent()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def SetClearanceValues(self, clearanceValues: 'list[float]') -> None:
        """
        Set the clearance values for the components used in the clearance analysis.  
        
        Signature ``SetClearanceValues(clearanceValues)`` 
        
        :param clearanceValues:  offset values  
        :type clearanceValues: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def PerformClearanceAnalysis(self) -> None:
        """
        Perform clearance analysis between the tire envelope and the clearance objects.  
        
        Signature ``PerformClearanceAnalysis()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    AddMasterComponentPart: bool = ...
    """
    Returns or sets  the option to specify whether or not the master component part will be added.  
    
    true indicates the part will be added, 
    false indicates the part will not be added. 
    
    <hr>
    
    Getter Method
    
    Signature ``AddMasterComponentPart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AddMasterComponentPart`` 
    
    :param addMasterPart: 
    :type addMasterPart: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ApplyOffset: bool = ...
    """
    Returns or sets  the option to specify whether or not the offset will be applied for the envelope.  
    
    true indicates the offset will be applied, 
    false indicates the offset will not be applied. 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyOffset`` 
    
    :param applyOffset: 
    :type applyOffset: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BushingJointAsymmetric: bool = ...
    """
    Returns or sets  the option to specify whether or not the Bushing Joint is asymmetric.  
    
    true indicates the Bushing Joint is asymmetric,
    false indicates the Bushing Joint is symmetric. 
    
    <hr>
    
    Getter Method
    
    Signature ``BushingJointAsymmetric`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BushingJointAsymmetric`` 
    
    :param bushingJointAsymmetric: 
    :type bushingJointAsymmetric: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ClearanceAnalysisBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the selection list containing the solid objects used in the clearance analysis.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceAnalysisBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ClearanceAnalysisComponents: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the selection list containing the components used in the clearance analysis.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceAnalysisComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ClearanceValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the clearance value used in the clearance analysis.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CreateTireEnvelopeFeature: bool = ...
    """
    Returns or sets  the option to specify whether or not the tire envelope feature will be created.  
    
    true indicates the feature will be created, 
    false indicates the feature will not be created. 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateTireEnvelopeFeature`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateTireEnvelopeFeature`` 
    
    :param createTireEnvelopeFeature: 
    :type createTireEnvelopeFeature: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DesignPositionSpindle: NXOpen.SelectCurve = ...
    """
    Returns  the selection list containing spindle line in design position .  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignPositionSpindle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DistanceTolerance: NXOpen.Expression = ...
    """
    Returns  the distance tolerance that will be used in constructing the motion envelope.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DownOffsetValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value of the down section(at 270 degrees).  
    
    Only used when the offset method is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod.FixedSections <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DownOffsetValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DriverGraph: TireEnvelopeBuilderDriverGraphOption = ...
    """
    Returns or sets  the option to specify which driver definition is used in the suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``DriverGraph`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderDriverGraphOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DriverGraph`` 
    
    :param driverGraphOption: 
    :type driverGraphOption: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderDriverGraphOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DriverGraphSketch: NXOpen.SelectSketch = ...
    """
    Returns  the sketch defining the driver for the suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``DriverGraphSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectSketch` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EnvelopeConcavity: float = ...
    """
    Returns or sets  the concavity factor that is used in constructing the motion envelope.  
    
    The value ranges between 0.0 and 1.0. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnvelopeConcavity`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnvelopeConcavity`` 
    
    :param envelopeConcavity: 
    :type envelopeConcavity: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    EnvelopeOffset: TireEnvelopeBuilderEnvelopeOffsetMethod = ...
    """
    Returns or sets  the option to specify which offset method is used in the envelope creation.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnvelopeOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnvelopeOffset`` 
    
    :param offsetMethod: 
    :type offsetMethod: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FirstDriverJointLowerLimit: float = ...
    """
    Returns or sets  the lower limit value for the first joint of the suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstDriverJointLowerLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstDriverJointLowerLimit`` 
    
    :param firstDriverJointLowerLimit: 
    :type firstDriverJointLowerLimit: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FirstDriverJointSteps: int = ...
    """
    Returns or sets  the step number for the first joint of the suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstDriverJointSteps`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstDriverJointSteps`` 
    
    :param firstDriverJointSteps: 
    :type firstDriverJointSteps: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FirstDriverJointUpperLimit: float = ...
    """
    Returns or sets  the upper limit value for the first joint of the suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstDriverJointUpperLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstDriverJointUpperLimit`` 
    
    :param firstDriverJointUpperLimit: 
    :type firstDriverJointUpperLimit: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FixedLocationPercentage: float = ...
    """
    Returns or sets  the fixed location percentage that is used for the fixed driver definition for two drivers.  
    
    <hr>
    
    Getter Method
    
    Signature ``FixedLocationPercentage`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FixedLocationPercentage`` 
    
    :param fixedLocationPercentage: 
    :type fixedLocationPercentage: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontOffsetValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value of the front section(at 0 degrees).  
    
    Only used when the offset method is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod.FixedSections <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontOffsetValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InboardOffsetValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value of the inboard position.  
    
    Only used when the offset method is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod.FixedSections <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``InboardOffsetValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InnerJointAsymmetric: bool = ...
    """
    Returns or sets  the option to specify whether or not the Inner Joint is asymmetric.  
    
    true indicates the Inner Joint is asymmetric,
    false indicates the Inner Joint is symmetric. 
    
    <hr>
    
    Getter Method
    
    Signature ``InnerJointAsymmetric`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InnerJointAsymmetric`` 
    
    :param innerJointAsymmetric: 
    :type innerJointAsymmetric: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    JounceDistance: float = ...
    """
    Returns or sets  the jounce distance that is used for the Five Link Solid Axle without steering suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``JounceDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JounceDistance`` 
    
    :param jounceDistance: 
    :type jounceDistance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LeftStabilizerBar: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the selection list containing the left stabilizer bar definition data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LeftStabilizerBar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MirrorProfile: bool = ...
    """
    Returns or sets  the option to specify whether or not the tire profile is to be mirrored.  
    
    true indicates the tire profile will be mirrored, 
    false indicates the tire profile will not be mirrored.
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorProfile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorProfile`` 
    
    :param mirror: 
    :type mirror: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Motion: TireEnvelopeBuilderMotionMethod = ...
    """
    Returns or sets  the option to specify how the suspension system motion will be defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``Motion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Motion`` 
    
    :param motionMethod: 
    :type motionMethod: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OffsetFileName: str = ...
    """
    Returns or sets  the name of the file containing the offset data of the envelope sections.  
    
    The file must contain comma separated values. 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetFileName`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OutboardOffsetValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value of the outboard position.  
    
    Only used when the offset method is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod.FixedSections <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``OutboardOffsetValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProfileName: str = ...
    """
    Returns or sets  the name of the tire profile in the tire file.  
    
    Only used when the tire profile option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption.ProfilePointFile <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    
    <hr>
    
    Setter Method
    
    Signature ``ProfileName`` 
    
    :param profileName: 
    :type profileName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ProfilePointFile: str = ...
    """
    Returns or sets   the name of the file containing the tire profile points.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProfilePointFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProfilePointFile`` 
    
    :param profilePointFile: 
    :type profilePointFile: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ProfileSplineLayer: int = ...
    """
    Returns or sets  the layer of the tire profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProfileSplineLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProfileSplineLayer`` 
    
    :param profileSplineLayer: 
    :type profileSplineLayer: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RadialEndAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the radial angle at which the envelope body will end.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadialEndAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RadialStartAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the radial angle at which the envelope body will start.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadialStartAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RearOffsetValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value of the rear section(at 180 degrees).  
    
    Only used when the offset method is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod.FixedSections <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``RearOffsetValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReboundDistance: float = ...
    """
    Returns or sets  the rebound distance that is used for the Five Link Solid Axle without steering suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReboundDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReboundDistance`` 
    
    :param reboundDistance: 
    :type reboundDistance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RightStabilizerBar: NXOpen.SelectCurveList = ...
    """
    Returns  the selection list containing the right stabilizer bar definition data.  
    
    <hr>
    
    Getter Method
    
    Signature ``RightStabilizerBar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurveList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RollAngle: NXOpen.Expression = ...
    """
    Returns  the roll angle that is used for the Five Link Solid Axle without steering suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``RollAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RunClearanceAnalysis: bool = ...
    """
    Returns or sets  the option to specify whether or not the clearance analysis will be performed.  
    
    true indicates the analysis will be performed, 
    false indicates the analysis will not be performed. 
    
    <hr>
    
    Getter Method
    
    Signature ``RunClearanceAnalysis`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RunClearanceAnalysis`` 
    
    :param runClearanceAnalysis: 
    :type runClearanceAnalysis: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SaveMasterPart: bool = ...
    """
    Returns or sets  the option to specify whether or not the master part will be saved before entering the scenario.  
    
    true indicates the master part will be saved,
    false indicates the master part will not be saved. 
    
    <hr>
    
    Getter Method
    
    Signature ``SaveMasterPart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveMasterPart`` 
    
    :param saveMasterpart: 
    :type saveMasterpart: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SaveScenario: bool = ...
    """
    Returns or sets  the option to specify whether or not the scenario will be saved.  
    
    true indicates the scenario will be saved,
    false indicates the scenario will not be saved. 
    
    <hr>
    
    Getter Method
    
    Signature ``SaveScenario`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveScenario`` 
    
    :param saveScenario: 
    :type saveScenario: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ScenarioName: str = ...
    """
    Returns or sets  the name of the scenario model containing the suspension template.  
    
    Only used when the motion method option is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod.ExistingScenarioMotionModel <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderMotionMethod>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ScenarioName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    
    <hr>
    
    Setter Method
    
    Signature ``ScenarioName`` 
    
    :param scenarioName: 
    :type scenarioName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SecondDriverJointLowerLimit: float = ...
    """
    Returns or sets  the lower limit value for the second joint of the suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondDriverJointLowerLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondDriverJointLowerLimit`` 
    
    :param secondDriverJointLowerLimit: 
    :type secondDriverJointLowerLimit: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SecondDriverJointSteps: int = ...
    """
    Returns or sets  the step number for the second joint of the suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondDriverJointSteps`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondDriverJointSteps`` 
    
    :param secondDriverJointSteps: 
    :type secondDriverJointSteps: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SecondDriverJointUpperLimit: float = ...
    """
    Returns or sets  the upper limit value for the second joint of the suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondDriverJointUpperLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondDriverJointUpperLimit`` 
    
    :param secondDriverJointUpperLimit: 
    :type secondDriverJointUpperLimit: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SectionLayer: int = ...
    """
    Returns or sets  the layer of the tire envelope sections.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionLayer`` 
    
    :param sectionLayer: 
    :type sectionLayer: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SheetBodyLayer: int = ...
    """
    Returns or sets  the layer of the tire envelope sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetBodyLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetBodyLayer`` 
    
    :param sheetBodyLayer: 
    :type sheetBodyLayer: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShockDriverJointSteps: int = ...
    """
    Returns or sets  the step number of the shock driver joint of the Five Link Solid Axle without steering suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShockDriverJointSteps`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShockDriverJointSteps`` 
    
    :param shockDriverJointSteps: 
    :type shockDriverJointSteps: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SpindleEndPoint: NXOpen.Point = ...
    """
    Returns or sets  the end point of the spindle line, the other end point is the wheel point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpindleEndPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpindleEndPoint`` 
    
    :param spindleEndPoint: 
    :type spindleEndPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SpindleFileLocation: TireEnvelopeBuilderSpindleFileLocationOption = ...
    """
    Returns or sets  the option to specify the location of the spindle file.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpindleFileLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderSpindleFileLocationOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpindleFileLocation`` 
    
    :param spindleFileLocation: 
    :type spindleFileLocation: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderSpindleFileLocationOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SpindleFileName: str = ...
    """
    Returns or sets   the name of the file containing the spindle definition.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpindleFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpindleFileName`` 
    
    :param spindleFileName: 
    :type spindleFileName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SpindleLines: NXOpen.SelectCurveList = ...
    """
    Returns  the selection list containing the spindle lines in all positions.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpindleLines`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurveList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SpindleLinesLayer: int = ...
    """
    Returns or sets  the layer of the spindle lines.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpindleLinesLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpindleLinesLayer`` 
    
    :param spindleLinesLayer: 
    :type spindleLinesLayer: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SuspensionTemplate: TireEnvelopeBuilderSuspensionTemplateType = ...
    """
    Returns or sets  the option to specify which suspension template will be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``SuspensionTemplate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderSuspensionTemplateType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SuspensionTemplate`` 
    
    :param suspensionTemplate: 
    :type suspensionTemplate: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderSuspensionTemplateType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SuspensionTemplateFileName: str = ...
    """
    Returns or sets  the name of the file containing points defining a suspension template.  
    
    <hr>
    
    Getter Method
    
    Signature ``SuspensionTemplateFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SuspensionTemplateFileName`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TaperLocationAY: float = ...
    """
    Returns or sets  the taper location along the Y axis that is used for the rectangular driver definition with taper on one side (at A point).  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperLocationAY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaperLocationAY`` 
    
    :param taperLocationAY: 
    :type taperLocationAY: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TaperLocationBX: float = ...
    """
    Returns or sets  the taper location along the X axis that is used for the rectangular driver definition with taper on one side (at B point).  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperLocationBX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaperLocationBX`` 
    
    :param taperLocationBX: 
    :type taperLocationBX: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TaperLocationXAxis: float = ...
    """
    Returns or sets  the taper location that is used for the rectangular driver definition with taper in the X direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperLocationXAxis`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaperLocationXAxis`` 
    
    :param taperLocationXAxis: 
    :type taperLocationXAxis: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TaperLocationYAxis: float = ...
    """
    Returns or sets  the taper location that is used for the rectangular driver definition with taper in the Y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``TaperLocationYAxis`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaperLocationYAxis`` 
    
    :param taperLocationYAxis: 
    :type taperLocationYAxis: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TireBodyOutputFileName: str = ...
    """
    Returns or sets  the name of the the output part file for the tire body.  
    
    <hr>
    
    Getter Method
    
    Signature ``TireBodyOutputFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TireBodyOutputFileName`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TireDefinition: TireEnvelopeBuilderTireDefinitionOption = ...
    """
    Returns or sets  the option to specify the method of tire profile definition.  
    
    <hr>
    
    Getter Method
    
    Signature ``TireDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TireDefinition`` 
    
    :param tireDefinition: 
    :type tireDefinition: :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderTireDefinitionOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TireDefinitionBody: NXOpen.SelectBodyList = ...
    """
    Returns  the selection list for tire body.  
    
    <hr>
    
    Getter Method
    
    Signature ``TireDefinitionBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TireDefinitionProfile: NXOpen.SelectCurveList = ...
    """
    Returns  the selection list for tire profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``TireDefinitionProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurveList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TracedSpindleLine: NXOpen.SelectCurve = ...
    """
    Returns  the line that specifies the traced spindle line in the scenario model.  
    
    <hr>
    
    Getter Method
    
    Signature ``TracedSpindleLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the radius that specifies the distance from the tire section to the spindle at which the tire section will be trimmed.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UpOffsetValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the offset value of the up section(at 90 degrees).  
    
    Only used when the offset method  is :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod.FixedSections <NXOpen.Features.VehicleDesign.TireEnvelopeBuilderEnvelopeOffsetMethod>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpOffsetValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseStabilizerBar: bool = ...
    """
    Returns or sets  the option to specify whether or not the stabilizer bar is used.  
    
    true indicates a stabilizer bar is used, 
    false indicates a stabilizer bar is not used. 
    
    <hr>
    
    Getter Method
    
    Signature ``UseStabilizerBar`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseStabilizerBar`` 
    
    :param useStabilizerBar: 
    :type useStabilizerBar: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WheelCenterlineShift: NXOpen.Expression = ...
    """
    Returns  the expression containing the wheel centerline shift.  
    
    <hr>
    
    Getter Method
    
    Signature ``WheelCenterlineShift`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WheelCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coordinate system defining the orientation of the wheel.  
    
    <hr>
    
    Getter Method
    
    Signature ``WheelCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelCsys`` 
    
    :param wheelCsys: 
    :type wheelCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WheelRimDiameter: NXOpen.Expression = ...
    """
    Returns  the expression containing the diameter of the wheel rim.  
    
    <hr>
    
    Getter Method
    
    Signature ``WheelRimDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: TireEnvelopeBuilder = ...  # unknown typename


class SeatBeltAnchorageBuilderStandardTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderStandardTypes():
    """
    the standard type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "J383SeatBeltAnchorage", "j383"
       "J1369ChildRestraintTetherStraps", "j1369"
       "BothJ383AndJ1369", "both"
       "ECE14SafetyBeltAnchorage", "ECER14 Safty Belt"
       "Ece14isofix", "ECER14 ISOFIX"
    """
    J383SeatBeltAnchorage = 0  # SeatBeltAnchorageBuilderStandardTypesMemberType
    J1369ChildRestraintTetherStraps = 1  # SeatBeltAnchorageBuilderStandardTypesMemberType
    BothJ383AndJ1369 = 2  # SeatBeltAnchorageBuilderStandardTypesMemberType
    ECE14SafetyBeltAnchorage = 3  # SeatBeltAnchorageBuilderStandardTypesMemberType
    Ece14isofix = 4  # SeatBeltAnchorageBuilderStandardTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderUpperAreaTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderUpperAreaType():
    """
    the upper area type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "show upper area"
       "No", "hide upper area"
    """
    Yes = 0  # SeatBeltAnchorageBuilderUpperAreaTypeMemberType
    No = 1  # SeatBeltAnchorageBuilderUpperAreaTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderLowerAreaTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderLowerAreaType():
    """
    the lower area type  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "show lower area"
       "No", "hide lower area"
    """
    Yes = 0  # SeatBeltAnchorageBuilderLowerAreaTypeMemberType
    No = 1  # SeatBeltAnchorageBuilderLowerAreaTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderAnchorageLocationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderAnchorageLocationTypes():
    """
    the seat belt anchorage location type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "VehicleStructure", "vehicle structure"
       "SeatAssembly", "seat assembly"
    """
    VehicleStructure = 0  # SeatBeltAnchorageBuilderAnchorageLocationTypesMemberType
    SeatAssembly = 1  # SeatBeltAnchorageBuilderAnchorageLocationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderRoutingTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderRoutingTypes():
    """
    the seat belt routing type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OutsideSeatThruSeatSpring", "outside"
       "ToAnchorage", "to anchorage"
    """
    OutsideSeatThruSeatSpring = 0  # SeatBeltAnchorageBuilderRoutingTypesMemberType
    ToAnchorage = 1  # SeatBeltAnchorageBuilderRoutingTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderSeatTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderSeatTypes():
    """
    the seat type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MovableFront", "front"
       "MovableRear", "rear"
       "Fixed", "fixed"
    """
    MovableFront = 0  # SeatBeltAnchorageBuilderSeatTypesMemberType
    MovableRear = 1  # SeatBeltAnchorageBuilderSeatTypesMemberType
    Fixed = 2  # SeatBeltAnchorageBuilderSeatTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderSeatPositionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderSeatPositionTypes():
    """
    the seat position type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", "left"
       "Right", "right"
       "NotOutboard", "non-outboard"
    """
    Left = 0  # SeatBeltAnchorageBuilderSeatPositionTypesMemberType
    Right = 1  # SeatBeltAnchorageBuilderSeatPositionTypesMemberType
    NotOutboard = 2  # SeatBeltAnchorageBuilderSeatPositionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderATLTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderATLType():
    """
    the show ATL type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Yes", "show ATL area"
       "No", "hide ATL area"
    """
    Yes = 0  # SeatBeltAnchorageBuilderATLTypeMemberType
    No = 1  # SeatBeltAnchorageBuilderATLTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderLowerLimitTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderLowerLimitType():
    """
    the lower limit type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Length450", "lower limit distance of 450"
       "Length500", "lower limit distance of 500"
    """
    Length450 = 0  # SeatBeltAnchorageBuilderLowerLimitTypeMemberType
    Length500 = 1  # SeatBeltAnchorageBuilderLowerLimitTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderLOneLimitTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderLOneLimitType():
    """
    the lone limit type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Degree30And80", "L1 limit angle area between 30 degree and 80 degree"
       "Degree50And70", "L1 limit angle area between 50 degree and 70 degree"
    """
    Degree30And80 = 0  # SeatBeltAnchorageBuilderLOneLimitTypeMemberType
    Degree50And70 = 1  # SeatBeltAnchorageBuilderLOneLimitTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilderLTwoLimitTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SeatBeltAnchorageBuilderLTwoLimitType():
    """
    the ltwo limit type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Degree45And80", "L2 limit angle area between 45 degree and 80 degree"
       "Degree50And70", "L2 limit angle area between 50 degree and 70 degree"
    """
    Degree45And80 = 0  # SeatBeltAnchorageBuilderLTwoLimitTypeMemberType
    Degree50And70 = 1  # SeatBeltAnchorageBuilderLTwoLimitTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SeatBeltAnchorageBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`Features.VehicleDesign.SeatBeltAnchorage` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateSeatBeltAnchorageBuilder`
    
    Default values.
    
    =====================  ==============================================
    Property               Value
    =====================  ==============================================
    AnchorageLocation      VehicleStructure 
    ---------------------  ----------------------------------------------
    Atl                    No 
    ---------------------  ----------------------------------------------
    BackAngleDbl           22 
    ---------------------  ----------------------------------------------
    BackAngleDim.Value     22 
    ---------------------  ----------------------------------------------
    BeltRouting            OutsideSeatThruSeatSpring 
    ---------------------  ----------------------------------------------
    FloorHeightDim.Value   0 (millimeters part), 0 (inches part) 
    ---------------------  ----------------------------------------------
    LowerArea              Yes 
    ---------------------  ----------------------------------------------
    SDimension.Value       140 (millimeters part), 5.51 (inches part) 
    ---------------------  ----------------------------------------------
    SeatPosition           Left 
    ---------------------  ----------------------------------------------
    SeatType               MovableFront 
    ---------------------  ----------------------------------------------
    SgrpXvalDim.Value      1500 (millimeters part), 59.06 (inches part) 
    ---------------------  ----------------------------------------------
    SgrpYvalDim.Value      -400 (millimeters part), -15.75 (inches part) 
    ---------------------  ----------------------------------------------
    SgrpZvalDim.Value      650 (millimeters part), 25.59 (inches part) 
    ---------------------  ----------------------------------------------
    Standard               J383SeatBeltAnchorage 
    ---------------------  ----------------------------------------------
    UpArea                 Yes 
    =====================  ==============================================
    
    .. versionadded:: NX11.0.0
    """
    
    class StandardTypes():
        """
        the standard type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "J383SeatBeltAnchorage", "j383"
           "J1369ChildRestraintTetherStraps", "j1369"
           "BothJ383AndJ1369", "both"
           "ECE14SafetyBeltAnchorage", "ECER14 Safty Belt"
           "Ece14isofix", "ECER14 ISOFIX"
        """
        J383SeatBeltAnchorage = 0  # SeatBeltAnchorageBuilderStandardTypesMemberType
        J1369ChildRestraintTetherStraps = 1  # SeatBeltAnchorageBuilderStandardTypesMemberType
        BothJ383AndJ1369 = 2  # SeatBeltAnchorageBuilderStandardTypesMemberType
        ECE14SafetyBeltAnchorage = 3  # SeatBeltAnchorageBuilderStandardTypesMemberType
        Ece14isofix = 4  # SeatBeltAnchorageBuilderStandardTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class UpperAreaType():
        """
        the upper area type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "show upper area"
           "No", "hide upper area"
        """
        Yes = 0  # SeatBeltAnchorageBuilderUpperAreaTypeMemberType
        No = 1  # SeatBeltAnchorageBuilderUpperAreaTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LowerAreaType():
        """
        the lower area type  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "show lower area"
           "No", "hide lower area"
        """
        Yes = 0  # SeatBeltAnchorageBuilderLowerAreaTypeMemberType
        No = 1  # SeatBeltAnchorageBuilderLowerAreaTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AnchorageLocationTypes():
        """
        the seat belt anchorage location type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "VehicleStructure", "vehicle structure"
           "SeatAssembly", "seat assembly"
        """
        VehicleStructure = 0  # SeatBeltAnchorageBuilderAnchorageLocationTypesMemberType
        SeatAssembly = 1  # SeatBeltAnchorageBuilderAnchorageLocationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RoutingTypes():
        """
        the seat belt routing type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OutsideSeatThruSeatSpring", "outside"
           "ToAnchorage", "to anchorage"
        """
        OutsideSeatThruSeatSpring = 0  # SeatBeltAnchorageBuilderRoutingTypesMemberType
        ToAnchorage = 1  # SeatBeltAnchorageBuilderRoutingTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SeatTypes():
        """
        the seat type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MovableFront", "front"
           "MovableRear", "rear"
           "Fixed", "fixed"
        """
        MovableFront = 0  # SeatBeltAnchorageBuilderSeatTypesMemberType
        MovableRear = 1  # SeatBeltAnchorageBuilderSeatTypesMemberType
        Fixed = 2  # SeatBeltAnchorageBuilderSeatTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SeatPositionTypes():
        """
        the seat position type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", "left"
           "Right", "right"
           "NotOutboard", "non-outboard"
        """
        Left = 0  # SeatBeltAnchorageBuilderSeatPositionTypesMemberType
        Right = 1  # SeatBeltAnchorageBuilderSeatPositionTypesMemberType
        NotOutboard = 2  # SeatBeltAnchorageBuilderSeatPositionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ATLType():
        """
        the show ATL type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Yes", "show ATL area"
           "No", "hide ATL area"
        """
        Yes = 0  # SeatBeltAnchorageBuilderATLTypeMemberType
        No = 1  # SeatBeltAnchorageBuilderATLTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LowerLimitType():
        """
        the lower limit type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Length450", "lower limit distance of 450"
           "Length500", "lower limit distance of 500"
        """
        Length450 = 0  # SeatBeltAnchorageBuilderLowerLimitTypeMemberType
        Length500 = 1  # SeatBeltAnchorageBuilderLowerLimitTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LOneLimitType():
        """
        the lone limit type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Degree30And80", "L1 limit angle area between 30 degree and 80 degree"
           "Degree50And70", "L1 limit angle area between 50 degree and 70 degree"
        """
        Degree30And80 = 0  # SeatBeltAnchorageBuilderLOneLimitTypeMemberType
        Degree50And70 = 1  # SeatBeltAnchorageBuilderLOneLimitTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LTwoLimitType():
        """
        the ltwo limit type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Degree45And80", "L2 limit angle area between 45 degree and 80 degree"
           "Degree50And70", "L2 limit angle area between 50 degree and 70 degree"
        """
        Degree45And80 = 0  # SeatBeltAnchorageBuilderLTwoLimitTypeMemberType
        Degree50And70 = 1  # SeatBeltAnchorageBuilderLTwoLimitTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def J383Illu(self) -> None:
        """
        Shows an illustration picture for standard j383
        
        Signature ``J383Illu()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def J1369Illu(self) -> None:
        """
        Shows an illustration picture for standard j1369
        
        Signature ``J1369Illu()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def Ece14SafeIllu(self) -> None:
        """
        Shows an illustration picture for standard ECER14 safety belt anchorage 
        
        Signature ``Ece14SafeIllu()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def Ece14Isofix(self) -> None:
        """
        Shows an illustration picture for standard ECER14 ISOFIX 
        
        Signature ``Ece14Isofix()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def CreatePointWithBaseDataSGRPExpression(self) -> NXOpen.Point:
        """
        Create a point according to Base Data SGRP expressions  
        
        Signature ``CreatePointWithBaseDataSGRPExpression()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    AnchorageLocation: SeatBeltAnchorageBuilderAnchorageLocationTypes = ...
    """
    Returns or sets  the anchorage location type 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorageLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderAnchorageLocationTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorageLocation`` 
    
    :param anchorageLocation: 
    :type anchorageLocation: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderAnchorageLocationTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Atl: SeatBeltAnchorageBuilderATLType = ...
    """
    Returns or sets  the atl option 
    
    <hr>
    
    Getter Method
    
    Signature ``Atl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderATLType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Atl`` 
    
    :param atl: 
    :type atl: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderATLType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BackAngleDbl: float = ...
    """
    Returns or sets  the value of back angle 
    
    <hr>
    
    Getter Method
    
    Signature ``BackAngleDbl`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BackAngleDbl`` 
    
    :param backAngleDbl: 
    :type backAngleDbl: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BackAngleDim: NXOpen.Expression = ...
    """
    Returns  the dimension expression for back angle 
    
    <hr>
    
    Getter Method
    
    Signature ``BackAngleDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BeltRouting: SeatBeltAnchorageBuilderRoutingTypes = ...
    """
    Returns or sets  the belt routing type 
    
    <hr>
    
    Getter Method
    
    Signature ``BeltRouting`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderRoutingTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BeltRouting`` 
    
    :param beltRouting: 
    :type beltRouting: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderRoutingTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FloorHeightDim: NXOpen.Expression = ...
    """
    Returns  the dimension expression for floor height 
    
    <hr>
    
    Getter Method
    
    Signature ``FloorHeightDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    L1Limit: SeatBeltAnchorageBuilderLOneLimitType = ...
    """
    Returns or sets  the l1 limit option 
    
    <hr>
    
    Getter Method
    
    Signature ``L1Limit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderLOneLimitType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``L1Limit`` 
    
    :param l1Limit: 
    :type l1Limit: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderLOneLimitType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    L2Limit: SeatBeltAnchorageBuilderLTwoLimitType = ...
    """
    Returns or sets  the l2 limit option 
    
    <hr>
    
    Getter Method
    
    Signature ``L2Limit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderLTwoLimitType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``L2Limit`` 
    
    :param l2Limit: 
    :type l2Limit: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderLTwoLimitType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LowerArea: SeatBeltAnchorageBuilderLowerAreaType = ...
    """
    Returns or sets  the lower area 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerArea`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderLowerAreaType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerArea`` 
    
    :param lowerArea: 
    :type lowerArea: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderLowerAreaType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LowerLimit: SeatBeltAnchorageBuilderLowerLimitType = ...
    """
    Returns or sets  the lower limit option 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderLowerLimitType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerLimit`` 
    
    :param lowerLimit: 
    :type lowerLimit: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderLowerLimitType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SDimension: NXOpen.Expression = ...
    """
    Returns  the dimension expression for S dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``SDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SeatPosition: SeatBeltAnchorageBuilderSeatPositionTypes = ...
    """
    Returns or sets  the seat position type 
    
    <hr>
    
    Getter Method
    
    Signature ``SeatPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderSeatPositionTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeatPosition`` 
    
    :param seatPosition: 
    :type seatPosition: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderSeatPositionTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SeatType: SeatBeltAnchorageBuilderSeatTypes = ...
    """
    Returns or sets  the seat type 
    
    <hr>
    
    Getter Method
    
    Signature ``SeatType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderSeatTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeatType`` 
    
    :param seatType: 
    :type seatType: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderSeatTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SgrpPoint: NXOpen.Point = ...
    """
    Returns or sets  the SgRp point 
    
    <hr>
    
    Getter Method
    
    Signature ``SgrpPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SgrpPoint`` 
    
    :param sgrpPoint: 
    :type sgrpPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SgrpXvalDim: NXOpen.Expression = ...
    """
    Returns  the dimension expression for the X coordinate of SgRp 
    
    <hr>
    
    Getter Method
    
    Signature ``SgrpXvalDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SgrpYvalDim: NXOpen.Expression = ...
    """
    Returns  the dimension expression for the Y coordinate of SgRp 
    
    <hr>
    
    Getter Method
    
    Signature ``SgrpYvalDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SgrpZvalDim: NXOpen.Expression = ...
    """
    Returns  the dimension expression for the Z coordinate of SgRp 
    
    <hr>
    
    Getter Method
    
    Signature ``SgrpZvalDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Standard: SeatBeltAnchorageBuilderStandardTypes = ...
    """
    Returns or sets  the standard for seat belt anchorage 
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderStandardTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderStandardTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    StringLimit1: str = ...
    """
    Returns or sets  the first angle limit 
    
    <hr>
    
    Getter Method
    
    Signature ``StringLimit1`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringLimit1`` 
    
    :param stringLimit1: 
    :type stringLimit1: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    StringLimit2: str = ...
    """
    Returns or sets  the second angle limit  
    
    <hr>
    
    Getter Method
    
    Signature ``StringLimit2`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringLimit2`` 
    
    :param stringLimit2: 
    :type stringLimit2: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UpArea: SeatBeltAnchorageBuilderUpperAreaType = ...
    """
    Returns or sets  the upper area 
    
    <hr>
    
    Getter Method
    
    Signature ``UpArea`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderUpperAreaType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpArea`` 
    
    :param upArea: 
    :type upArea: :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilderUpperAreaType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: SeatBeltAnchorageBuilder = ...  # unknown typename


class HeadImpactUpperRoofBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoofBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactUpperRoofBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Initialize(self, parent: HeadImpactBuilder) -> None:
        """
        The Upper Roof initialize method.  
        
        Signature ``Initialize(parent)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Geometry: HeadImpactUpperRoofWizardBuilder = ...
    """
    Returns  the Upper Roof Geometry builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoofWizardBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoofWizardBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Parameters: HeadImpactUpperRoofDetailBuilder = ...
    """
    Returns  the Upper Roof Parameters builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoofDetailBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoofDetailBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactUpperRoofBuilder = ...  # unknown typename


class HeadImpactSideRailDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateGeometry: bool = ...
    """
    Returns or sets  the create construction geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGeometry`` 
    
    :param createGeometry: 
    :type createGeometry: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT11Left: NXOpen.Point = ...
    """
    Returns or sets  the left PT11 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT11Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT11Left`` 
    
    :param pt11Left: 
    :type pt11Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT11LeftFlag: bool = ...
    """
    Returns or sets  the left PT11 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT11LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT11LeftFlag`` 
    
    :param pt11LeftFlag: 
    :type pt11LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT11Right: NXOpen.Point = ...
    """
    Returns or sets  the right PT11 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT11Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT11Right`` 
    
    :param pt11Right: 
    :type pt11Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT11RightFlag: bool = ...
    """
    Returns or sets  the right PT11 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT11RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT11RightFlag`` 
    
    :param pt11RightFlag: 
    :type pt11RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT12Left: NXOpen.Point = ...
    """
    Returns or sets  the left PT12 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT12Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT12Left`` 
    
    :param pt12Left: 
    :type pt12Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT12LeftFlag: bool = ...
    """
    Returns or sets  the left PT12 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT12LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT12LeftFlag`` 
    
    :param pt12LeftFlag: 
    :type pt12LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT12Right: NXOpen.Point = ...
    """
    Returns or sets  the right PT12 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT12Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT12Right`` 
    
    :param pt12Right: 
    :type pt12Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT12RightFlag: bool = ...
    """
    Returns or sets  the right PT12 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT12RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT12RightFlag`` 
    
    :param pt12RightFlag: 
    :type pt12RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT14Left: NXOpen.Point = ...
    """
    Returns or sets  the left PT14 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT14Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT14Left`` 
    
    :param pt14Left: 
    :type pt14Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT14LeftFlag: bool = ...
    """
    Returns or sets  the left PT14 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT14LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT14LeftFlag`` 
    
    :param pt14LeftFlag: 
    :type pt14LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT14Right: NXOpen.Point = ...
    """
    Returns or sets  the right PT14 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT14Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT14Right`` 
    
    :param pt14Right: 
    :type pt14Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT14RightFlag: bool = ...
    """
    Returns or sets  the right PT14 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT14RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT14RightFlag`` 
    
    :param pt14RightFlag: 
    :type pt14RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReqHorizontalLeftExact: NXOpen.Expression = ...
    """
    Returns  the left horizontal required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalLeftExact`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalRightExact: NXOpen.Expression = ...
    """
    Returns  the right horizontal required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalRightExact`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMax: NXOpen.Expression = ...
    """
    Returns  the vertical maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMin: NXOpen.Expression = ...
    """
    Returns  the vertical minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SR1Left: NXOpen.Point = ...
    """
    Returns or sets  the left SR1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR1Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR1Left`` 
    
    :param sr1Left: 
    :type sr1Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR1LeftFlag: bool = ...
    """
    Returns or sets  the left SR1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR1LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR1LeftFlag`` 
    
    :param sr1LeftFlag: 
    :type sr1LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR1Offset: NXOpen.Expression = ...
    """
    Returns  the offset used to position SR1.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR1Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SR1Right: NXOpen.Point = ...
    """
    Returns or sets  the right SR1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR1Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR1Right`` 
    
    :param sr1Right: 
    :type sr1Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR1RightFlag: bool = ...
    """
    Returns or sets  the right SR1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR1RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR1RightFlag`` 
    
    :param sr1RightFlag: 
    :type sr1RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2ALeft: NXOpen.Point = ...
    """
    Returns or sets  the left SR2A alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2ALeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2ALeft`` 
    
    :param sr2aLeft: 
    :type sr2aLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2ALeftFlag: bool = ...
    """
    Returns or sets  the left SR2A alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2ALeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2ALeftFlag`` 
    
    :param sr2aLeftFlag: 
    :type sr2aLeftFlag: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2ARight: NXOpen.Point = ...
    """
    Returns or sets  the right SR2A alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2ARight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2ARight`` 
    
    :param sr2aRight: 
    :type sr2aRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2ARightFlag: bool = ...
    """
    Returns or sets  the right SR2A alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2ARightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2ARightFlag`` 
    
    :param sr2aRightFlag: 
    :type sr2aRightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2BLeft: NXOpen.Point = ...
    """
    Returns or sets  the left SR2B alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2BLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2BLeft`` 
    
    :param sr2bLeft: 
    :type sr2bLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2BLeftFlag: bool = ...
    """
    Returns or sets  the left SR2B alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2BLeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2BLeftFlag`` 
    
    :param sr2bLeftFlag: 
    :type sr2bLeftFlag: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2BRight: NXOpen.Point = ...
    """
    Returns or sets  the right SR2B alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2BRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2BRight`` 
    
    :param sr2bRight: 
    :type sr2bRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2BRightFlag: bool = ...
    """
    Returns or sets  the right SR2B alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2BRightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2BRightFlag`` 
    
    :param sr2bRightFlag: 
    :type sr2bRightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2Left: NXOpen.Point = ...
    """
    Returns or sets  the left SR2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder.SR2ALeft` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2Left`` 
    
    :param sr2Left: 
    :type sr2Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder.SR2ALeft` instead.
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2LeftFlag: bool = ...
    """
    Returns or sets  the left SR2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder.SR2ALeftFlag` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2LeftFlag`` 
    
    :param sr2LeftFlag: 
    :type sr2LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder.SR2ALeftFlag` instead.
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2Offset: NXOpen.Expression = ...
    """
    Returns  the offset used to position SR2.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SR2Right: NXOpen.Point = ...
    """
    Returns or sets  the right SR2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder.SR2ARight` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2Right`` 
    
    :param sr2Right: 
    :type sr2Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder.SR2ARight` instead.
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR2RightFlag: bool = ...
    """
    Returns or sets  the right SR2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR2RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder.SR2ARightFlag` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR2RightFlag`` 
    
    :param sr2RightFlag: 
    :type sr2RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder.SR2ARightFlag` instead.
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: HeadImpactSideRailDetailBuilder = ...  # unknown typename


class ManikinBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManikinBuilderPositionType():
    """
    the vehicle seat position type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Driver", "Driver Type"
       "Passenger", "Passenger Type"
    """
    Driver = 0  # ManikinBuilderPositionTypeMemberType
    Passenger = 1  # ManikinBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManikinBuilderClassificationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManikinBuilderClassificationType():
    """
    the vehicle classification type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ClassA", "Class A Classification Type. The type of vehicles includes passenger cars, vans, and light trucks."
       "ClassB", "Class B Classification Type. The type of vehicles includes heavy trucks, some buses and multipurpose passenger vehicles."
    """
    ClassA = 0  # ManikinBuilderClassificationTypeMemberType
    ClassB = 1  # ManikinBuilderClassificationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManikinBuilderStandardTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManikinBuilderStandardType():
    """
    the vehicle standard type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SAEJ826Jul1995", "1995 SAE j826 Standard Type"
       "Saej833", "SAE j833 Standard Type"
       "UserDefined", "User Defined Manikin Size Type"
       "SAEJ826Nov2008", "2008 SAE j826 Standard Type"
    """
    SAEJ826Jul1995 = 0  # ManikinBuilderStandardTypeMemberType
    Saej833 = 1  # ManikinBuilderStandardTypeMemberType
    UserDefined = 2  # ManikinBuilderStandardTypeMemberType
    SAEJ826Nov2008 = 3  # ManikinBuilderStandardTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManikinBuilderSAEPercentileTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ManikinBuilderSAEPercentileType():
    """
    the vehicle percentile type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "J826Type95thPercentile", "95th Percentile SAE j826 Standard Type"
       "J826Type50thPercentile", "50th Percentile SAE j826 Standard Type"
       "J826Type10thPercentile", "10th Percentile SAE j826 Standard Type"
       "J833LargeHuman95thMale", "Large Human SAE j833 Standard Type"
       "J833MediumHumanHalfwayPosition", "Medium Human SAE j833 Standard Type"
       "J833SmallHuman5thFemale", "Small Human SAE j833 Standard Type"
    """
    J826Type95thPercentile = 0  # ManikinBuilderSAEPercentileTypeMemberType
    J826Type50thPercentile = 1  # ManikinBuilderSAEPercentileTypeMemberType
    J826Type10thPercentile = 2  # ManikinBuilderSAEPercentileTypeMemberType
    J833LargeHuman95thMale = 3  # ManikinBuilderSAEPercentileTypeMemberType
    J833MediumHumanHalfwayPosition = 4  # ManikinBuilderSAEPercentileTypeMemberType
    J833SmallHuman5thFemale = 5  # ManikinBuilderSAEPercentileTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ManikinBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.Manikin` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateManikinBuilder`
    
    Default values.
    
    ============================  ===============================================
    Property                      Value
    ============================  ===============================================
    AHPHeight.Value               325 (millimeters part), 12.8 (inches part) 
    ----------------------------  -----------------------------------------------
    AHPLength.Value               698.5 (millimeters part), 27.5 (inches part) 
    ----------------------------  -----------------------------------------------
    AHPToSWCHeight.Value          620 (millimeters part), 24.41 (inches part) 
    ----------------------------  -----------------------------------------------
    AHPToSWCLength.Value          500 (millimeters part), 19.69 (inches part) 
    ----------------------------  -----------------------------------------------
    AllowPostureValueOutOfRange   1 
    ----------------------------  -----------------------------------------------
    ArmLength.Value               296.12 (millimeters part), 11.66 (inches part) 
    ----------------------------  -----------------------------------------------
    BackAngle.Value               22 
    ----------------------------  -----------------------------------------------
    Classification                ClassA 
    ----------------------------  -----------------------------------------------
    DrivingPostureCheck           1 
    ----------------------------  -----------------------------------------------
    ForearmLength.Value           268.83 (millimeters part), 10.58 (inches part) 
    ----------------------------  -----------------------------------------------
    HandGripLength.Value          120.89 (millimeters part), 4.76 (inches part) 
    ----------------------------  -----------------------------------------------
    HandLength.Value              244.09 (millimeters part), 9.61 (inches part) 
    ----------------------------  -----------------------------------------------
    JointAngleReport              1 
    ----------------------------  -----------------------------------------------
    LegLength.Value               436.82 (millimeters part), 17.20 (inches part) 
    ----------------------------  -----------------------------------------------
    PedalPlaneAngle.Value         51 
    ----------------------------  -----------------------------------------------
    Position                      Driver 
    ----------------------------  -----------------------------------------------
    SAEPercentile                 J826Type95thPercentile 
    ----------------------------  -----------------------------------------------
    SgRPHeight.Value              650 (millimeters part), 25.6 (inches part) 
    ----------------------------  -----------------------------------------------
    SgRPLength.Value              1500 (millimeters part), 59 (inches part) 
    ----------------------------  -----------------------------------------------
    SgRPWidth.Value               -400 (millimeters part), -15.75 (inches part) 
    ----------------------------  -----------------------------------------------
    ShoulderToHipLength.Value     442 (millimeters part), 17.40 (inches part) 
    ----------------------------  -----------------------------------------------
    Standard                      SAEJ826Jul1995 
    ----------------------------  -----------------------------------------------
    ThighLength.Value             469.26 (millimeters part), 18.47 (inches part) 
    ----------------------------  -----------------------------------------------
    TorsoLength.Value             563 (millimeters part), 22.17 (inches part) 
    ----------------------------  -----------------------------------------------
    WheelAngle.Value              15 
    ----------------------------  -----------------------------------------------
    WheelDiameter.Value           400 (millimeters part), 15.75 (inches part) 
    ============================  ===============================================
    
    .. versionadded:: NX7.5.0
    """
    
    class PositionType():
        """
        the vehicle seat position type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Driver", "Driver Type"
           "Passenger", "Passenger Type"
        """
        Driver = 0  # ManikinBuilderPositionTypeMemberType
        Passenger = 1  # ManikinBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ClassificationType():
        """
        the vehicle classification type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ClassA", "Class A Classification Type. The type of vehicles includes passenger cars, vans, and light trucks."
           "ClassB", "Class B Classification Type. The type of vehicles includes heavy trucks, some buses and multipurpose passenger vehicles."
        """
        ClassA = 0  # ManikinBuilderClassificationTypeMemberType
        ClassB = 1  # ManikinBuilderClassificationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StandardType():
        """
        the vehicle standard type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SAEJ826Jul1995", "1995 SAE j826 Standard Type"
           "Saej833", "SAE j833 Standard Type"
           "UserDefined", "User Defined Manikin Size Type"
           "SAEJ826Nov2008", "2008 SAE j826 Standard Type"
        """
        SAEJ826Jul1995 = 0  # ManikinBuilderStandardTypeMemberType
        Saej833 = 1  # ManikinBuilderStandardTypeMemberType
        UserDefined = 2  # ManikinBuilderStandardTypeMemberType
        SAEJ826Nov2008 = 3  # ManikinBuilderStandardTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SAEPercentileType():
        """
        the vehicle percentile type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "J826Type95thPercentile", "95th Percentile SAE j826 Standard Type"
           "J826Type50thPercentile", "50th Percentile SAE j826 Standard Type"
           "J826Type10thPercentile", "10th Percentile SAE j826 Standard Type"
           "J833LargeHuman95thMale", "Large Human SAE j833 Standard Type"
           "J833MediumHumanHalfwayPosition", "Medium Human SAE j833 Standard Type"
           "J833SmallHuman5thFemale", "Small Human SAE j833 Standard Type"
        """
        J826Type95thPercentile = 0  # ManikinBuilderSAEPercentileTypeMemberType
        J826Type50thPercentile = 1  # ManikinBuilderSAEPercentileTypeMemberType
        J826Type10thPercentile = 2  # ManikinBuilderSAEPercentileTypeMemberType
        J833LargeHuman95thMale = 3  # ManikinBuilderSAEPercentileTypeMemberType
        J833MediumHumanHalfwayPosition = 4  # ManikinBuilderSAEPercentileTypeMemberType
        J833SmallHuman5thFemale = 5  # ManikinBuilderSAEPercentileTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SaveToFile(self, filename: str) -> None:
        """
        Save the manikin size definition into a file.  
        
        It is only used when the vehicle standard type is set to 
        :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
        
        Signature ``SaveToFile(filename)`` 
        
        :param filename: 
        :type filename: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def OpenFromFile(self, filename: str) -> None:
        """
        Update the manikin size definition from a file.  
        
        It is only used when the vehicle standard type is set to 
        :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
        
        Signature ``OpenFromFile(filename)`` 
        
        :param filename: 
        :type filename: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    AHPHeight: NXOpen.Expression = ...
    """
    Returns  the AHP height 
    
    <hr>
    
    Getter Method
    
    Signature ``AHPHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AHPLength: NXOpen.Expression = ...
    """
    Returns  the AHP length 
    
    <hr>
    
    Getter Method
    
    Signature ``AHPLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AHPToSWCHeight: NXOpen.Expression = ...
    """
    Returns  the AHP to Steering Wheel Center height.  
    
    It is only used when the vehicle style type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderPositionType.Driver <NXOpen.Features.VehicleDesign.ManikinBuilderPositionType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AHPToSWCHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AHPToSWCLength: NXOpen.Expression = ...
    """
    Returns  the AHP to Steering Wheel Center length.  
    
    It is only used when the vehicle style type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderPositionType.Driver <NXOpen.Features.VehicleDesign.ManikinBuilderPositionType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AHPToSWCLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AllowPostureValueOutOfRange: bool = ...
    """
    Returns or sets  the setting to indicate if posture values can be out of the standard range or not, 
    true indicates the values can be out of range, false indicates the values cannot be out of range.  
    
    <hr>
    
    Getter Method
    
    Signature ``AllowPostureValueOutOfRange`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllowPostureValueOutOfRange`` 
    
    :param allowPostureValueOutOfRange: 
    :type allowPostureValueOutOfRange: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ArmLength: NXOpen.Expression = ...
    """
    Returns  the arm length.  
    
    It is only used when the vehicle standard type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ArmLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BackAngle: NXOpen.Expression = ...
    """
    Returns  the back angle 
    
    <hr>
    
    Getter Method
    
    Signature ``BackAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Classification: ManikinBuilderClassificationType = ...
    """
    Returns or sets  the classification of the vehicle 
    
    <hr>
    
    Getter Method
    
    Signature ``Classification`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderClassificationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Classification`` 
    
    :param classification: 
    :type classification: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderClassificationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CurrentManikinSize: str = ...
    """
    Returns or sets  the current manikin size string.  
    
    It is only used when the vehicle standard type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentManikinSize`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurrentManikinSize`` 
    
    :param currentManikinSize: 
    :type currentManikinSize: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DrivingPostureCheck: bool = ...
    """
    Returns or sets  the driving posture check.  
    
    It is only used when the vehicle style type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderPositionType.Driver <NXOpen.Features.VehicleDesign.ManikinBuilderPositionType>`
    and vehicle SAE percentile type is not small human type. 
    
    <hr>
    
    Getter Method
    
    Signature ``DrivingPostureCheck`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrivingPostureCheck`` 
    
    :param drivingPostureCheck: 
    :type drivingPostureCheck: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ForearmLength: NXOpen.Expression = ...
    """
    Returns  the forearm length.  
    
    It is only used when the vehicle standard type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ForearmLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HandGripLength: NXOpen.Expression = ...
    """
    Returns  the hand grip length.  
    
    It is only used when the vehicle standard type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``HandGripLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HandLength: NXOpen.Expression = ...
    """
    Returns  the hand length.  
    
    It is only used when the vehicle standard type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``HandLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    JointAngleReport: bool = ...
    """
    Returns or sets  the joint angle report 
    
    <hr>
    
    Getter Method
    
    Signature ``JointAngleReport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JointAngleReport`` 
    
    :param jointAngleReport: 
    :type jointAngleReport: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LegLength: NXOpen.Expression = ...
    """
    Returns  the leg length.  
    
    It is only used when the vehicle standard type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``LegLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PedalPlaneAngle: NXOpen.Expression = ...
    """
    Returns  the pedal plane angle 
    
    <hr>
    
    Getter Method
    
    Signature ``PedalPlaneAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Position: ManikinBuilderPositionType = ...
    """
    Returns or sets  the position of the manikin in the vehicle 
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderPositionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderPositionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SAEPercentile: ManikinBuilderSAEPercentileType = ...
    """
    Returns or sets  the percentile limit that the manikin represents.  
    
    If the Standard is set to :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.SAEJ826Jul1995 <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`,
    then the valid settings are: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType.J826Type95thPercentile <NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType>`,
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType.J826Type50thPercentile <NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType>` and 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType.J826Type10thPercentile <NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType>`.
    If the standard is set to :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.Saej833 <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`,
    then the valid settings are: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType.J833LargeHuman95thMale <NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType>`,
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType.J833MediumHumanHalfwayPosition <NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType>` and
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType.J833SmallHuman5thFemale <NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SAEPercentile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SAEPercentile`` 
    
    :param sAEPercentile: 
    :type sAEPercentile: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderSAEPercentileType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SgRPHeight: NXOpen.Expression = ...
    """
    Returns  the SgRP height 
    
    <hr>
    
    Getter Method
    
    Signature ``SgRPHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SgRPLength: NXOpen.Expression = ...
    """
    Returns  the SgRP length 
    
    <hr>
    
    Getter Method
    
    Signature ``SgRPLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SgRPWidth: NXOpen.Expression = ...
    """
    Returns  the SgRP width 
    
    <hr>
    
    Getter Method
    
    Signature ``SgRPWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ShoulderToHipLength: NXOpen.Expression = ...
    """
    Returns  the shoulder to hip length.  
    
    It is only used when the vehicle standard type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShoulderToHipLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Standard: ManikinBuilderStandardType = ...
    """
    Returns or sets  the standard used to define the manikin 
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ThighLength: NXOpen.Expression = ...
    """
    Returns  the thigh length.  
    
    It is only used when the vehicle standard type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ThighLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TorsoLength: NXOpen.Expression = ...
    """
    Returns  the torso length.  
    
    It is only used when the vehicle standard type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderStandardType.UserDefined <NXOpen.Features.VehicleDesign.ManikinBuilderStandardType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``TorsoLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WheelAngle: NXOpen.Expression = ...
    """
    Returns  the wheel angle.  
    
    It is only used when the vehicle style type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderPositionType.Driver <NXOpen.Features.VehicleDesign.ManikinBuilderPositionType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``WheelAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WheelDiameter: NXOpen.Expression = ...
    """
    Returns  the wheel diameter.  
    
    It is only used when the vehicle style type is set to 
    :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilderPositionType.Driver <NXOpen.Features.VehicleDesign.ManikinBuilderPositionType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``WheelDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ManikinBuilder = ...  # unknown typename


class HeadImpactFrontHeaderWizardBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeaderWizardBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    InteriorTrim: NXOpen.ScCollector = ...
    """
    Returns  the interior trim geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``InteriorTrim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SunRoof: NXOpen.ScCollector = ...
    """
    Returns  the sun roof opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``SunRoof`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UpperRoofInterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof interior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofInterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    WindshieldEdge: NXOpen.ScCollector = ...
    """
    Returns  the windshield upper edge geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``WindshieldEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeaderWizardBuilder.InteriorTrim` instead.
    
    License requirements: None.
    """
    Null: HeadImpactFrontHeaderWizardBuilder = ...  # unknown typename


class CloseRangeVisibility(NXOpen.Features.Feature):
    """
    Represents a close range visibility feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: CloseRangeVisibility = ...  # unknown typename


class StaticCurb(NXOpen.Features.BodyFeature):
    """
    Represents a static curb feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.StaticCurbBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: StaticCurb = ...  # unknown typename


class HeadImpactOtherRailWizardBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOtherRailWizardBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DaylightOpeningLeft: NXOpen.ScCollector = ...
    """
    Returns  the left forward daylight opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightOpeningLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DaylightOpeningRight: NXOpen.ScCollector = ...
    """
    Returns  the right forward daylight opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightOpeningRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorOpeningLeft: NXOpen.ScCollector = ...
    """
    Returns  the left forward door opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorOpeningLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorOpeningRight: NXOpen.ScCollector = ...
    """
    Returns  the right forward door opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorOpeningRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SR3Left: NXOpen.Point = ...
    """
    Returns or sets  the left additional Side Rail 3 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR3Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR3Left`` 
    
    :param sr3Left: 
    :type sr3Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR3Right: NXOpen.Point = ...
    """
    Returns or sets  the right additional Side Rail 3 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR3Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR3Right`` 
    
    :param sr3Right: 
    :type sr3Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UpperRoofInterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof interior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofInterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactOtherRailWizardBuilder = ...  # unknown typename


class CloseRangeDemoCylinderListItemBuilderValidateTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CloseRangeDemoCylinderListItemBuilderValidateTypes():
    """
    This enum represents the simple or detailed checking options to validate demo cylinders visibility. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Simple", "Simple type"
       "Detailed", "Detailed type"
    """
    Simple = 0  # CloseRangeDemoCylinderListItemBuilderValidateTypesMemberType
    Detailed = 1  # CloseRangeDemoCylinderListItemBuilderValidateTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CloseRangeDemoCylinderListItemBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the builder to create demo cylinder list item used for close range visibility.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilder.CreateDemoCylinderListItemBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class ValidateTypes():
        """
        This enum represents the simple or detailed checking options to validate demo cylinders visibility. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Simple", "Simple type"
           "Detailed", "Detailed type"
        """
        Simple = 0  # CloseRangeDemoCylinderListItemBuilderValidateTypesMemberType
        Detailed = 1  # CloseRangeDemoCylinderListItemBuilderValidateTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    PositionOnPath: NXOpen.Expression = ...
    """
    Returns  the percentage value of position on demo cylinder path to define the demo cylinder.  
    
    <hr>
    
    Getter Method
    
    Signature ``PositionOnPath`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ShowDemoCylinder: bool = ...
    """
    Returns or sets  the indication if demo cylinder will be shown.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowDemoCylinder`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowDemoCylinder`` 
    
    :param showDemoCylinder: 
    :type showDemoCylinder: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowDemoCylinderRay: bool = ...
    """
    Returns or sets  the indication if demo cylinder ray will be shown.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowDemoCylinderRay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowDemoCylinderRay`` 
    
    :param showDemoCylinderRay: 
    :type showDemoCylinderRay: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ValidateType: CloseRangeDemoCylinderListItemBuilderValidateTypes = ...
    """
    Returns or sets  the validate checking types to define the close range visibility for the demo cylinders.  
    
    <hr>
    
    Getter Method
    
    Signature ``ValidateType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilderValidateTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ValidateType`` 
    
    :param validateType: 
    :type validateType: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilderValidateTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: CloseRangeDemoCylinderListItemBuilder = ...  # unknown typename


class HeadImpactOtherRailBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOtherRailBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactOtherRailBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Initialize(self, parent: HeadImpactBuilder, row: int) -> None:
        """
        The Additional Side Rail initialize method.  
        
        Signature ``Initialize(parent, row)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder` 
        :param row: 
        :type row: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Geometry: HeadImpactOtherRailWizardBuilder = ...
    """
    Returns  the Additional Side Rail Geometry builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOtherRailWizardBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOtherRailWizardBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Parameters: HeadImpactOtherRailDetailBuilder = ...
    """
    Returns  the Additional Side Rail Parameters builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOtherRailDetailBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOtherRailDetailBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactOtherRailBuilder = ...  # unknown typename


class PendulumPlacementBuilderPositionMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PendulumPlacementBuilderPositionMethodType():
    """
    This enum represents the pendulum placement method options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MiddleBaseData", " - "
       "MiddleVehicle", " - "
       "RotatedBaseData", " - "
       "RotatedPlane", " - "
       "RotatedPlaneX", " - "
       "RotatedPlaneNormal", " - "
       "RotatedContact", " - "
       "ShiftedBaseData", " - "
       "ShiftedVehicle", " - "
       "ShiftedFromRotated", " - "
    """
    MiddleBaseData = 0  # PendulumPlacementBuilderPositionMethodTypeMemberType
    MiddleVehicle = 1  # PendulumPlacementBuilderPositionMethodTypeMemberType
    RotatedBaseData = 2  # PendulumPlacementBuilderPositionMethodTypeMemberType
    RotatedPlane = 3  # PendulumPlacementBuilderPositionMethodTypeMemberType
    RotatedPlaneX = 4  # PendulumPlacementBuilderPositionMethodTypeMemberType
    RotatedPlaneNormal = 5  # PendulumPlacementBuilderPositionMethodTypeMemberType
    RotatedContact = 6  # PendulumPlacementBuilderPositionMethodTypeMemberType
    ShiftedBaseData = 7  # PendulumPlacementBuilderPositionMethodTypeMemberType
    ShiftedVehicle = 8  # PendulumPlacementBuilderPositionMethodTypeMemberType
    ShiftedFromRotated = 9  # PendulumPlacementBuilderPositionMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PendulumPlacementBuilderPendulumProfileTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PendulumPlacementBuilderPendulumProfileType():
    """
    This enum represents the pendulum placement profile options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Eu", " - "
       "Us", " - "
    """
    Eu = 0  # PendulumPlacementBuilderPendulumProfileTypeMemberType
    Us = 1  # PendulumPlacementBuilderPendulumProfileTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PendulumPlacementBuilderLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PendulumPlacementBuilderLocationType():
    """
    This enum represents the pendulum placement location options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Front", " - "
       "Rear", " - "
    """
    Front = 0  # PendulumPlacementBuilderLocationTypeMemberType
    Rear = 1  # PendulumPlacementBuilderLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PendulumPlacementBuilderSideTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PendulumPlacementBuilderSideType():
    """
    This enum represents the pendulum placement side options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", " - "
       "Right", " - "
    """
    Left = 0  # PendulumPlacementBuilderSideTypeMemberType
    Right = 1  # PendulumPlacementBuilderSideTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PendulumPlacementBuilder(NXOpen.Builder):
    """
    This builder allows you to define the pendulum placement information for bumper pendulum features in vehicle design.  
    
    It represents :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilder` 
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX8.5.0
    """
    
    class PositionMethodType():
        """
        This enum represents the pendulum placement method options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MiddleBaseData", " - "
           "MiddleVehicle", " - "
           "RotatedBaseData", " - "
           "RotatedPlane", " - "
           "RotatedPlaneX", " - "
           "RotatedPlaneNormal", " - "
           "RotatedContact", " - "
           "ShiftedBaseData", " - "
           "ShiftedVehicle", " - "
           "ShiftedFromRotated", " - "
        """
        MiddleBaseData = 0  # PendulumPlacementBuilderPositionMethodTypeMemberType
        MiddleVehicle = 1  # PendulumPlacementBuilderPositionMethodTypeMemberType
        RotatedBaseData = 2  # PendulumPlacementBuilderPositionMethodTypeMemberType
        RotatedPlane = 3  # PendulumPlacementBuilderPositionMethodTypeMemberType
        RotatedPlaneX = 4  # PendulumPlacementBuilderPositionMethodTypeMemberType
        RotatedPlaneNormal = 5  # PendulumPlacementBuilderPositionMethodTypeMemberType
        RotatedContact = 6  # PendulumPlacementBuilderPositionMethodTypeMemberType
        ShiftedBaseData = 7  # PendulumPlacementBuilderPositionMethodTypeMemberType
        ShiftedVehicle = 8  # PendulumPlacementBuilderPositionMethodTypeMemberType
        ShiftedFromRotated = 9  # PendulumPlacementBuilderPositionMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PendulumProfileType():
        """
        This enum represents the pendulum placement profile options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Eu", " - "
           "Us", " - "
        """
        Eu = 0  # PendulumPlacementBuilderPendulumProfileTypeMemberType
        Us = 1  # PendulumPlacementBuilderPendulumProfileTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LocationType():
        """
        This enum represents the pendulum placement location options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Front", " - "
           "Rear", " - "
        """
        Front = 0  # PendulumPlacementBuilderLocationTypeMemberType
        Rear = 1  # PendulumPlacementBuilderLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SideType():
        """
        This enum represents the pendulum placement side options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", " - "
           "Right", " - "
        """
        Left = 0  # PendulumPlacementBuilderSideTypeMemberType
        Right = 1  # PendulumPlacementBuilderSideTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the rotation angle of this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the display color of this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Level: NXOpen.Expression = ...
    """
    Returns  the reference level of this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``Level`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Loading: str = ...
    """
    Returns or sets  the loading used with this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Location: PendulumPlacementBuilderLocationType = ...
    """
    Returns or sets  the location to use for positioning this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``Location`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilderLocationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Location`` 
    
    :param location: 
    :type location: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilderLocationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Name: str = ...
    """
    Returns or sets  the name of this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the side offset of this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PendulumProfile: PendulumPlacementBuilderPendulumProfileType = ...
    """
    Returns or sets  the pendulum profile of this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``PendulumProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilderPendulumProfileType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PendulumProfile`` 
    
    :param pendulumProfile: 
    :type pendulumProfile: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilderPendulumProfileType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PositionMethod: PendulumPlacementBuilderPositionMethodType = ...
    """
    Returns or sets  the method to use for positioning this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``PositionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilderPositionMethodType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositionMethod`` 
    
    :param positionMethod: 
    :type positionMethod: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilderPositionMethodType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Shift: NXOpen.Expression = ...
    """
    Returns  the expression containing the amount to shift the pendulum from the contact point on the car.  
    
    <hr>
    
    Getter Method
    
    Signature ``Shift`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ShowPendulum: bool = ...
    """
    Returns or sets  the value indicating if this pendulum is displayed.  
    
    A value of false will hide this pendulum. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowPendulum`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowPendulum`` 
    
    :param showPendulum: 
    :type showPendulum: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowPoint: bool = ...
    """
    Returns or sets  the value indicating if the contact point (if any) between this pendulum and the bumper is displayed.  
    
    A value of false will hide the contact point. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowPoint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowPoint`` 
    
    :param showPoint: 
    :type showPoint: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Side: PendulumPlacementBuilderSideType = ...
    """
    Returns or sets  the side to use for positioning this pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``Side`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilderSideType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Side`` 
    
    :param side: 
    :type side: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilderSideType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: PendulumPlacementBuilder = ...  # unknown typename


class CloseRangeBlindVolumeListItemBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the builder to create blind volume list item used for close range visibility.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX8.5.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndParameter: float = ...
    """
    Returns  the end parameter value on the path curve of the blind volume area.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndParameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MaximumLength: float = ...
    """
    Returns  the maximum length calculated from the rear end wheel of the cylinder located to the blind volume area.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MeasuredLength: float = ...
    """
    Returns  the measured length calculated from start parameter path curve point to end parameter path curve point.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeasuredLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    StartParameter: float = ...
    """
    Returns  the start parameter value on the path curve of the blind volume area.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartParameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Status: bool = ...
    """
    Returns  the indication if the measured length of blind volume area is acceptable or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``Status`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: CloseRangeBlindVolumeListItemBuilder = ...  # unknown typename


class HeadImpactRPillar(NXOpen.Features.BodyFeature):
    """
    Represents a head impact rear pillar feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillarBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpactRPillar = ...  # unknown typename


class DynamicCurbBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DynamicCurbBuilderRequirementsControlType():
    """
    Represents the requirements control types to define the dynamic curb. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", " - "
       "UserDefined", " - "
    """
    StandardDriven = 0  # DynamicCurbBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # DynamicCurbBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DynamicCurbBuilderWheelTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DynamicCurbBuilderWheelType():
    """
    Represents the type of the wheel size option for dynamic curb. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StaticRadius", " - "
       "Diameter", " - "
    """
    StaticRadius = 0  # DynamicCurbBuilderWheelTypeMemberType
    Diameter = 1  # DynamicCurbBuilderWheelTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DynamicCurbBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DynamicCurbBuilderPositionType():
    """
    Represents the dynamic curb positions. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Front", " - "
       "Rear", " - "
       "Both", " - "
    """
    Front = 0  # DynamicCurbBuilderPositionTypeMemberType
    Rear = 1  # DynamicCurbBuilderPositionTypeMemberType
    Both = 2  # DynamicCurbBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DynamicCurbBuilderMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DynamicCurbBuilderMethodType():
    """
    Represents the type of inner line to create dynamic curb. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Horizontal", " - "
       "VerticalTangent", " - "
       "ParallelTangent", " - "
    """
    Horizontal = 0  # DynamicCurbBuilderMethodTypeMemberType
    VerticalTangent = 1  # DynamicCurbBuilderMethodTypeMemberType
    ParallelTangent = 2  # DynamicCurbBuilderMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DynamicCurbBuilderVisualizationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DynamicCurbBuilderVisualizationType():
    """
    Represents the visualization types of the output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", " - "
       "Surface", " - "
       "CurveSurface", " - "
    """
    Curve = 0  # DynamicCurbBuilderVisualizationTypeMemberType
    Surface = 1  # DynamicCurbBuilderVisualizationTypeMemberType
    CurveSurface = 2  # DynamicCurbBuilderVisualizationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DynamicCurbBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.DynamicCurb` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateDynamicCurbBuilder`
    
    Default values.
    
    ====================  ===============
    Property              Value
    ====================  ===============
    InnerLineType         Horizontal 
    --------------------  ---------------
    Position              Front 
    --------------------  ---------------
    RequirementsControl   StandardDriven 
    --------------------  ---------------
    ShowClearance         0 
    --------------------  ---------------
    Visualization         Surface 
    --------------------  ---------------
    WheelSize             StaticRadius 
    ====================  ===============
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlType():
        """
        Represents the requirements control types to define the dynamic curb. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", " - "
           "UserDefined", " - "
        """
        StandardDriven = 0  # DynamicCurbBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # DynamicCurbBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WheelType():
        """
        Represents the type of the wheel size option for dynamic curb. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StaticRadius", " - "
           "Diameter", " - "
        """
        StaticRadius = 0  # DynamicCurbBuilderWheelTypeMemberType
        Diameter = 1  # DynamicCurbBuilderWheelTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionType():
        """
        Represents the dynamic curb positions. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Front", " - "
           "Rear", " - "
           "Both", " - "
        """
        Front = 0  # DynamicCurbBuilderPositionTypeMemberType
        Rear = 1  # DynamicCurbBuilderPositionTypeMemberType
        Both = 2  # DynamicCurbBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MethodType():
        """
        Represents the type of inner line to create dynamic curb. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Horizontal", " - "
           "VerticalTangent", " - "
           "ParallelTangent", " - "
        """
        Horizontal = 0  # DynamicCurbBuilderMethodTypeMemberType
        VerticalTangent = 1  # DynamicCurbBuilderMethodTypeMemberType
        ParallelTangent = 2  # DynamicCurbBuilderMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VisualizationType():
        """
        Represents the visualization types of the output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", " - "
           "Surface", " - "
           "CurveSurface", " - "
        """
        Curve = 0  # DynamicCurbBuilderVisualizationTypeMemberType
        Surface = 1  # DynamicCurbBuilderVisualizationTypeMemberType
        CurveSurface = 2  # DynamicCurbBuilderVisualizationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    FrontInnerLength: NXOpen.Expression = ...
    """
    Returns  the expression defining the length of the inner line in front for dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontInnerLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontInnerOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of inner offset in front for dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontInnerOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontOuterOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of outer offset in front for dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontOuterOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontSelector: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the front car body geometry for the measurement.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontSelector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    InnerLineType: DynamicCurbBuilderMethodType = ...
    """
    Returns or sets  the inner line type for dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``InnerLineType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderMethodType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InnerLineType`` 
    
    :param innerLineType: 
    :type innerLineType: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderMethodType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Loading: str = ...
    """
    Returns or sets  the loading used in the dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Position: DynamicCurbBuilderPositionType = ...
    """
    Returns or sets  the dynamic curb position.  
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearInnerLength: NXOpen.Expression = ...
    """
    Returns  the expression defining the length of the inner line in rear for dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearInnerLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearInnerOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of inner offset in rear for dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearInnerOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearOuterOffset: NXOpen.Expression = ...
    """
    Returns  the expression defining the value of outer offset in rear for dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearOuterOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearSelector: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the rear car body geometry for the measurement.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearSelector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RequirementsControl: DynamicCurbBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control for standard driven or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirementsControl: 
    :type requirementsControl: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowClearance: bool = ...
    """
    Returns or sets  the indication if the distance measurement will be shown.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowClearance`` 
    
    :param showClearance: 
    :type showClearance: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard used to define the dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Visualization: DynamicCurbBuilderVisualizationType = ...
    """
    Returns or sets  the visualization type of the dynamic curb output.  
    
    <hr>
    
    Getter Method
    
    Signature ``Visualization`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Visualization`` 
    
    :param visualization: 
    :type visualization: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WheelSize: DynamicCurbBuilderWheelType = ...
    """
    Returns or sets  the wheel size option which determines the size of the wheels in the dynamic curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``WheelSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderWheelType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelSize`` 
    
    :param wheelSize: 
    :type wheelSize: :py:class:`NXOpen.Features.VehicleDesign.DynamicCurbBuilderWheelType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: DynamicCurbBuilder = ...  # unknown typename


class VehicleCoordinateSystemBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VehicleCoordinateSystemBuilderTypes():
    """
    Vehicle Coordinate System type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LengthWidthHeight", "General-GM"
       "WidthLengthHeight", "Nissan"
       "UserDefined", "User Defined"
    """
    LengthWidthHeight = 0  # VehicleCoordinateSystemBuilderTypesMemberType
    WidthLengthHeight = 1  # VehicleCoordinateSystemBuilderTypesMemberType
    UserDefined = 2  # VehicleCoordinateSystemBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VehicleCoordinateSystemBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.VehicleCoordinateSystem` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateVehicleCoordinateSystemBuilder`
    
    .. versionadded:: NX7.0.0
    """
    
    class Types():
        """
        Vehicle Coordinate System type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LengthWidthHeight", "General-GM"
           "WidthLengthHeight", "Nissan"
           "UserDefined", "User Defined"
        """
        LengthWidthHeight = 0  # VehicleCoordinateSystemBuilderTypesMemberType
        WidthLengthHeight = 1  # VehicleCoordinateSystemBuilderTypesMemberType
        UserDefined = 2  # VehicleCoordinateSystemBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    OriginPoint: NXOpen.Point = ...
    """
    Returns or sets  the origin point.  
    
    It is only used when the type is set to :py:class:`Features.VehicleDesign.VehicleCoordinateSystemBuilderTypes.UserDefined <Features.VehicleDesign.VehicleCoordinateSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``OriginPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OriginPoint`` 
    
    :param originPoint: 
    :type originPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging") OR ug_body_design ("Body Design") OR nx_posture ("NX Jack Posture Prediction")
    """
    Type: VehicleCoordinateSystemBuilderTypes = ...
    """
    Returns or sets  the vehicle coordinate system type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.VehicleCoordinateSystemBuilderTypes` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.VehicleDesign.VehicleCoordinateSystemBuilderTypes` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging") OR ug_body_design ("Body Design") OR nx_posture ("NX Jack Posture Prediction")
    """
    XAxis: NXOpen.Direction = ...
    """
    Returns or sets  the front to rear vector.  
    
    It is only used when the type is set to :py:class:`Features.VehicleDesign.VehicleCoordinateSystemBuilderTypes.UserDefined <Features.VehicleDesign.VehicleCoordinateSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``XAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XAxis`` 
    
    :param xAxis: 
    :type xAxis: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging") OR ug_body_design ("Body Design") OR nx_posture ("NX Jack Posture Prediction")
    """
    ZAxis: NXOpen.Direction = ...
    """
    Returns or sets  the ground to roof vector.  
    
    It is only used when the type is set to :py:class:`Features.VehicleDesign.VehicleCoordinateSystemBuilderTypes.UserDefined <Features.VehicleDesign.VehicleCoordinateSystemBuilderTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``ZAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZAxis`` 
    
    :param zAxis: 
    :type zAxis: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging") OR ug_body_design ("Body Design") OR nx_posture ("NX Jack Posture Prediction")
    """
    Null: VehicleCoordinateSystemBuilder = ...  # unknown typename


class HeadImpactOPillarWizardBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOPillarWizardBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CenterlineLeft: NXOpen.ScCollector = ...
    """
    Returns  the left additional pillar centerline geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CenterlineRight: NXOpen.ScCollector = ...
    """
    Returns  the right additional pillar centerline geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DaylightBottomLeft: NXOpen.Point = ...
    """
    Returns or sets  the left daylight opening bottom point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomLeft`` 
    
    :param daylightBottomLeft: 
    :type daylightBottomLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomRight: NXOpen.Point = ...
    """
    Returns or sets  the right daylight opening bottom point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomRight`` 
    
    :param daylightBottomRight: 
    :type daylightBottomRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightOpeningLeft: NXOpen.ScCollector = ...
    """
    Returns  the left forward daylight opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightOpeningLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DaylightOpeningRight: NXOpen.ScCollector = ...
    """
    Returns  the right forward daylight opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightOpeningRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorOpeningLeft: NXOpen.ScCollector = ...
    """
    Returns  the left forward door opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorOpeningLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorOpeningRight: NXOpen.ScCollector = ...
    """
    Returns  the right forward door opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorOpeningRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorTopLeft: NXOpen.Point = ...
    """
    Returns or sets  the left door opening top point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopLeft`` 
    
    :param doorTopLeft: 
    :type doorTopLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopRight: NXOpen.Point = ...
    """
    Returns or sets  the right door opening top point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopRight`` 
    
    :param doorTopRight: 
    :type doorTopRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP1Left: NXOpen.Point = ...
    """
    Returns or sets  the left additional pillar 1 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP1Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP1Left`` 
    
    :param op1Left: 
    :type op1Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP1Right: NXOpen.Point = ...
    """
    Returns or sets  the right additional pillar 1 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP1Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP1Right`` 
    
    :param op1Right: 
    :type op1Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OPillarLeft: NXOpen.ScCollector = ...
    """
    Returns  the left additional pillar geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``OPillarLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OPillarRight: NXOpen.ScCollector = ...
    """
    Returns  the right additional pillar geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``OPillarRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UpperRoofInterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof interior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofInterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactOPillarWizardBuilder = ...  # unknown typename


class HoodVisibilityBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HoodVisibility` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHoodVisibilityBuilder`
    
    Default values.
    
    ===========  =====
    Property     Value
    ===========  =====
    AssoToggle   0 
    -----------  -----
    PitchAngle   0 
    ===========  =====
    
    .. versionadded:: NX6.0.0
    """
    AssoToggle: bool = ...
    """
    Returns or sets  the associative toggle; toggle on to create feature 
    
    <hr>
    
    Getter Method
    
    Signature ``AssoToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssoToggle`` 
    
    :param assoToggle: 
    :type assoToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    EyePoint: NXOpen.Point = ...
    """
    Returns or sets  the eye point 
    
    <hr>
    
    Getter Method
    
    Signature ``EyePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EyePoint`` 
    
    :param eyePoint: 
    :type eyePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the hood facet body 
    
    <hr>
    
    Getter Method
    
    Signature ``FacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PitchAngle: float = ...
    """
    Returns or sets  the pitch angle which determines the quantity of section planes 
    
    <hr>
    
    Getter Method
    
    Signature ``PitchAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PitchAngle`` 
    
    :param pitchAngle: 
    :type pitchAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SelectFace: NXOpen.ScCollector = ...
    """
    Returns  the hood face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: HoodVisibilityBuilder = ...  # unknown typename


class HeadImpactBPillarDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillarDetailBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BP1Left: NXOpen.Point = ...
    """
    Returns or sets  the left BP1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP1Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP1Left`` 
    
    :param bp1Left: 
    :type bp1Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP1LeftFlag: bool = ...
    """
    Returns or sets  the left BP1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP1LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP1LeftFlag`` 
    
    :param bp1LeftFlag: 
    :type bp1LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP1Right: NXOpen.Point = ...
    """
    Returns or sets  the right BP1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP1Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP1Right`` 
    
    :param bp1Right: 
    :type bp1Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP1RightFlag: bool = ...
    """
    Returns or sets  the right BP1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP1RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP1RightFlag`` 
    
    :param bp1RightFlag: 
    :type bp1RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP2Left: NXOpen.Point = ...
    """
    Returns or sets  the left BP2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP2Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP2Left`` 
    
    :param bp2Left: 
    :type bp2Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP2LeftFlag: bool = ...
    """
    Returns or sets  the left BP2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP2LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP2LeftFlag`` 
    
    :param bp2LeftFlag: 
    :type bp2LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP2Right: NXOpen.Point = ...
    """
    Returns or sets  the right BP2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP2Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP2Right`` 
    
    :param bp2Right: 
    :type bp2Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP2RightFlag: bool = ...
    """
    Returns or sets  the right BP2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP2RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP2RightFlag`` 
    
    :param bp2RightFlag: 
    :type bp2RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP3Left: NXOpen.Point = ...
    """
    Returns or sets  the left BP3 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP3Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP3Left`` 
    
    :param bp3Left: 
    :type bp3Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP3LeftFlag: bool = ...
    """
    Returns or sets  the left BP3 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP3LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP3LeftFlag`` 
    
    :param bp3LeftFlag: 
    :type bp3LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP3Right: NXOpen.Point = ...
    """
    Returns or sets  the right BP3 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP3Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP3Right`` 
    
    :param bp3Right: 
    :type bp3Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP3RightFlag: bool = ...
    """
    Returns or sets  the right BP3 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP3RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP3RightFlag`` 
    
    :param bp3RightFlag: 
    :type bp3RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP4Left: NXOpen.Point = ...
    """
    Returns or sets  the left BP4 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP4Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP4Left`` 
    
    :param bp4Left: 
    :type bp4Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP4LeftFlag: bool = ...
    """
    Returns or sets  the left BP4 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP4LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP4LeftFlag`` 
    
    :param bp4LeftFlag: 
    :type bp4LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP4Right: NXOpen.Point = ...
    """
    Returns or sets  the right BP4 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP4Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP4Right`` 
    
    :param bp4Right: 
    :type bp4Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP4RightFlag: bool = ...
    """
    Returns or sets  the right BP4 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP4RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP4RightFlag`` 
    
    :param bp4RightFlag: 
    :type bp4RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateGeometry: bool = ...
    """
    Returns or sets  the create construction geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGeometry`` 
    
    :param createGeometry: 
    :type createGeometry: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomLeft: NXOpen.Point = ...
    """
    Returns or sets  the left Daylight Bottom additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomLeft`` 
    
    :param daylightBottomLeft: 
    :type daylightBottomLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomLeftFlag: bool = ...
    """
    Returns or sets  the left Daylight Bottom additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomLeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomLeftFlag`` 
    
    :param daylightBottomLeftFlag: 
    :type daylightBottomLeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomRight: NXOpen.Point = ...
    """
    Returns or sets  the right Daylight Bottom additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomRight`` 
    
    :param daylightBottomRight: 
    :type daylightBottomRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomRightFlag: bool = ...
    """
    Returns or sets  the right Daylight Bottom additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomRightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomRightFlag`` 
    
    :param daylightBottomRightFlag: 
    :type daylightBottomRightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopLeft: NXOpen.Point = ...
    """
    Returns or sets  the left Door Top additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopLeft`` 
    
    :param doorTopLeft: 
    :type doorTopLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopLeftFlag: bool = ...
    """
    Returns or sets  the left Door Top additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopLeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopLeftFlag`` 
    
    :param doorTopLeftFlag: 
    :type doorTopLeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopRight: NXOpen.Point = ...
    """
    Returns or sets  the right Door Top additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopRight`` 
    
    :param doorTopRight: 
    :type doorTopRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopRightFlag: bool = ...
    """
    Returns or sets  the right Door Top additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopRightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopRightFlag`` 
    
    :param doorTopRightFlag: 
    :type doorTopRightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HorizontalLeftMax: NXOpen.Expression = ...
    """
    Returns  the left horizontal maximum required approach angle calculated value.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalLeftMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HorizontalLeftMin: NXOpen.Expression = ...
    """
    Returns  the left horizontal minimum required approach angle calculated value.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalLeftMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HorizontalRightMax: NXOpen.Expression = ...
    """
    Returns  the right horizontal maximum required approach angle calculated value.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRightMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HorizontalRightMin: NXOpen.Expression = ...
    """
    Returns  the right horizontal minimum required approach angle calculated value.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalRightMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PT4Left: NXOpen.Point = ...
    """
    Returns or sets  the left PT4 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT4Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT4Left`` 
    
    :param pt4Left: 
    :type pt4Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT4LeftFlag: bool = ...
    """
    Returns or sets  the left PT4 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT4LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT4LeftFlag`` 
    
    :param pt4LeftFlag: 
    :type pt4LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT4Right: NXOpen.Point = ...
    """
    Returns or sets  the right PT4 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT4Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT4Right`` 
    
    :param pt4Right: 
    :type pt4Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT4RightFlag: bool = ...
    """
    Returns or sets  the right PT4 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT4RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT4RightFlag`` 
    
    :param pt4RightFlag: 
    :type pt4RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReqHorizontalLeftMax: NXOpen.Expression = ...
    """
    Returns  the left horizontal maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalLeftMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalLeftMin: NXOpen.Expression = ...
    """
    Returns  the left horizontal minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalLeftMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalRightMax: NXOpen.Expression = ...
    """
    Returns  the right horizontal maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalRightMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalRightMin: NXOpen.Expression = ...
    """
    Returns  the right horizontal minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalRightMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMax: NXOpen.Expression = ...
    """
    Returns  the vertical maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMin: NXOpen.Expression = ...
    """
    Returns  the vertical minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactBPillarDetailBuilder = ...  # unknown typename


class WindshieldDatumBuilderEnumEyeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WindshieldDatumBuilderEnumEyeType():
    """
    Represents the eye definition type to define the Windshield Datum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EyeFeature", "eye feature"
       "V1Point", "v1 point"
       "V2Point", "v2 point"
    """
    EyeFeature = 0  # WindshieldDatumBuilderEnumEyeTypeMemberType
    V1Point = 1  # WindshieldDatumBuilderEnumEyeTypeMemberType
    V2Point = 2  # WindshieldDatumBuilderEnumEyeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WindshieldDatumBuilderCustomVisionAngleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WindshieldDatumBuilderCustomVisionAngle():
    """
    Represents the vision angle type to define the Windshield Datum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Standard", "standard"
       "Custom", "customized"
    """
    Standard = 0  # WindshieldDatumBuilderCustomVisionAngleMemberType
    Custom = 1  # WindshieldDatumBuilderCustomVisionAngleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WindshieldDatumBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.WindshieldDatum` builder used to create or edit a Windshield Datum.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateWindshieldDatumBuilder`
    
    Default values.
    
    ======================  =========================================
    Property                Value
    ======================  =========================================
    AssoToggle              1 
    ----------------------  -----------------------------------------
    BottomAngle.Value       5 
    ----------------------  -----------------------------------------
    EyeType                 EyeFeature 
    ----------------------  -----------------------------------------
    HorizontalAngle.Value   17 
    ----------------------  -----------------------------------------
    RayLength.Value         3000 (millimeters part), 0 (inches part) 
    ----------------------  -----------------------------------------
    ShowPoints              1 
    ----------------------  -----------------------------------------
    ShowRays                1 
    ----------------------  -----------------------------------------
    TopAngle.Value          7 
    ----------------------  -----------------------------------------
    UseStandardLoading      1 
    ----------------------  -----------------------------------------
    VisionType              Standard 
    ======================  =========================================
    
    .. versionadded:: NX6.0.0
    """
    
    class EnumEyeType():
        """
        Represents the eye definition type to define the Windshield Datum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EyeFeature", "eye feature"
           "V1Point", "v1 point"
           "V2Point", "v2 point"
        """
        EyeFeature = 0  # WindshieldDatumBuilderEnumEyeTypeMemberType
        V1Point = 1  # WindshieldDatumBuilderEnumEyeTypeMemberType
        V2Point = 2  # WindshieldDatumBuilderEnumEyeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CustomVisionAngle():
        """
        Represents the vision angle type to define the Windshield Datum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Standard", "standard"
           "Custom", "customized"
        """
        Standard = 0  # WindshieldDatumBuilderCustomVisionAngleMemberType
        Custom = 1  # WindshieldDatumBuilderCustomVisionAngleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AssoToggle: bool = ...
    """
    Returns or sets  the associative option that determines whether to create feature or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssoToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssoToggle`` 
    
    :param assoToggle: 
    :type assoToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BottomAngle: NXOpen.Expression = ...
    """
    Returns  the bottom inclined angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    EyeFeature: NXOpen.Features.SelectFeature = ...
    """
    Returns  the eye feature; select eec feature when eye type specified.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyeFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    EyeType: WindshieldDatumBuilderEnumEyeType = ...
    """
    Returns or sets  the eye type to determine which type of v points to be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WindshieldDatumBuilderEnumEyeType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EyeType`` 
    
    :param eyeType: 
    :type eyeType: :py:class:`NXOpen.Features.VehicleDesign.WindshieldDatumBuilderEnumEyeType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HorizontalAngle: NXOpen.Expression = ...
    """
    Returns  the horizontal inclined angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LoadingName: str = ...
    """
    Returns or sets  the name of the used loading in the Windshield Datum.  
    
    <hr>
    
    Getter Method
    
    Signature ``LoadingName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadingName`` 
    
    :param loadingName: 
    :type loadingName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointV1: NXOpen.Point = ...
    """
    Returns or sets  the point v1; select one point when eye type specified.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointV1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointV1`` 
    
    :param pointV1: 
    :type pointV1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointV2: NXOpen.Point = ...
    """
    Returns or sets  the point v2; select one point when eye type specified.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointV2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointV2`` 
    
    :param pointV2: 
    :type pointV2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RayLength: NXOpen.Expression = ...
    """
    Returns  the ray length.  
    
    <hr>
    
    Getter Method
    
    Signature ``RayLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectWindshield: NXOpen.ScCollector = ...
    """
    Returns  the windshield collector which the v points will be projected onto.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectWindshield`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ShowPoints: bool = ...
    """
    Returns or sets  the show points to determine whether to create points or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowPoints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowPoints`` 
    
    :param showPoints: 
    :type showPoints: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowRays: bool = ...
    """
    Returns or sets  the show rays to determine whether to create ray lines or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowRays`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowRays`` 
    
    :param showRays: 
    :type showRays: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TopAngle: NXOpen.Expression = ...
    """
    Returns  the top inclined angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    UseStandardLoading: bool = ...
    """
    Returns or sets  the option that determines whether to use the loading specified by standard or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseStandardLoading`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseStandardLoading`` 
    
    :param useStandardLoading: 
    :type useStandardLoading: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VisionType: WindshieldDatumBuilderCustomVisionAngle = ...
    """
    Returns or sets  the vision type; standard or customer defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WindshieldDatumBuilderCustomVisionAngle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisionType`` 
    
    :param visionType: 
    :type visionType: :py:class:`NXOpen.Features.VehicleDesign.WindshieldDatumBuilderCustomVisionAngle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: WindshieldDatumBuilder = ...  # unknown typename


class AllAroundVisionBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AllAroundVisionBuilderTypes():
    """
    Used to indicate the type of obstructing geometry to use. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Pillars", "Pillars as obstructing geometry."
       "Windows", "Windows as non-obstructing geometry."
    """
    Pillars = 0  # AllAroundVisionBuilderTypesMemberType
    Windows = 1  # AllAroundVisionBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AllAroundVisionBuilderWindowTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AllAroundVisionBuilderWindowTypes():
    """
    Used to indicate the type of geometry used to define the window. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Face", "Face Object for Windows."
       "Curve", "Curve Object for Windows."
    """
    Face = 0  # AllAroundVisionBuilderWindowTypesMemberType
    Curve = 1  # AllAroundVisionBuilderWindowTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AllAroundVisionBuilder(NXOpen.Features.FeatureBuilder):
    """
    A :py:class:`NXOpen.Features.VehicleDesign.AllAroundVisionBuilder` used to create or edit
    a vehicle design :py:class:`NXOpen.Features.VehicleDesign.AllAroundVision` feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateAllAroundVisionBuilder`
    
    Default values.
    
    ===========================  ======================================
    Property                     Value
    ===========================  ======================================
    CreateIntersectionGeometry   0 
    ---------------------------  --------------------------------------
    UseFrontHeadRests            0 
    ---------------------------  --------------------------------------
    UseRearHeadRests             0 
    ---------------------------  --------------------------------------
    UseWireFrameOnly             0 
    ---------------------------  --------------------------------------
    VisionAreaRadius.Value       0 (millimeters part), 0 (inches part) 
    ---------------------------  --------------------------------------
    WindowType                   Face 
    ===========================  ======================================
    
    .. versionadded:: NX8.5.0
    """
    
    class Types():
        """
        Used to indicate the type of obstructing geometry to use. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Pillars", "Pillars as obstructing geometry."
           "Windows", "Windows as non-obstructing geometry."
        """
        Pillars = 0  # AllAroundVisionBuilderTypesMemberType
        Windows = 1  # AllAroundVisionBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WindowTypes():
        """
        Used to indicate the type of geometry used to define the window. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Face", "Face Object for Windows."
           "Curve", "Curve Object for Windows."
        """
        Face = 0  # AllAroundVisionBuilderWindowTypesMemberType
        Curve = 1  # AllAroundVisionBuilderWindowTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreatePointWithBaseDataSGRPExpression(self) -> NXOpen.Point:
        """
        Create a point according to Base Data SGRP expressions  
        
        Signature ``CreatePointWithBaseDataSGRPExpression()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    CarGeometry: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the car geometry to use as obstructing elements.  
    
    <hr>
    
    Getter Method
    
    Signature ``CarGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CreateIntersectionGeometry: bool = ...
    """
    Returns or sets  the indication if the intersection geometry should be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateIntersectionGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateIntersectionGeometry`` 
    
    :param createIntersectionGeometry: 
    :type createIntersectionGeometry: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontHeadRestGeometry: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the front head rest geometry to use as obstructing elements.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontHeadRestGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ObstructedColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color of the obstructed area.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObstructedColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObstructedColor`` 
    
    :param obstructedColor: 
    :type obstructedColor: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearHeadRestGeometry: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the rear head rest geometry to use as obstructing elements.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearHeadRestGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SeatReferencePoint: NXOpen.Point = ...
    """
    Returns or sets  the seat reference point(SgRP).  
    
    <hr>
    
    Getter Method
    
    Signature ``SeatReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeatReferencePoint`` 
    
    :param seatReferencePoint: 
    :type seatReferencePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Translucency: int = ...
    """
    Returns or sets  the translucency of the vision area.  
    
    <hr>
    
    Getter Method
    
    Signature ``Translucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Translucency`` 
    
    :param translucency: 
    :type translucency: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Type: AllAroundVisionBuilderTypes = ...
    """
    Returns or sets  the type of obstructing geometry being supplied.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.AllAroundVisionBuilderTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.VehicleDesign.AllAroundVisionBuilderTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseFrontHeadRests: bool = ...
    """
    Returns or sets  the indication if the front head rests geometry should be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseFrontHeadRests`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseFrontHeadRests`` 
    
    :param useFrontHeadRests: 
    :type useFrontHeadRests: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseRearHeadRests: bool = ...
    """
    Returns or sets  the indication if rear head rests geometry should be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseRearHeadRests`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseRearHeadRests`` 
    
    :param useRearHeadRests: 
    :type useRearHeadRests: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseWireFrameOnly: bool = ...
    """
    Returns or sets  the indication if only wire frame should be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseWireFrameOnly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseWireFrameOnly`` 
    
    :param useWireFrameOnly: 
    :type useWireFrameOnly: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VisibleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color of the visible area.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleColor`` 
    
    :param visibleColor: 
    :type visibleColor: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VisionAreaRadius: NXOpen.Expression = ...
    """
    Returns  the radius of a circle definiing the vision area.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisionAreaRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WindowCurveGeometry: NXOpen.Section = ...
    """
    Returns  the curves representing the window geometry to use as non-obstructing elements.  
    
    <hr>
    
    Getter Method
    
    Signature ``WindowCurveGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WindowFaceGeometry: NXOpen.ScCollector = ...
    """
    Returns  the faces representing the window geometry to use as non-obstructing elements.  
    
    <hr>
    
    Getter Method
    
    Signature ``WindowFaceGeometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WindowType: AllAroundVisionBuilderWindowTypes = ...
    """
    Returns or sets  the type of geometry used to define the window.  
    
    <hr>
    
    Getter Method
    
    Signature ``WindowType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.AllAroundVisionBuilderWindowTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WindowType`` 
    
    :param windowType: 
    :type windowType: :py:class:`NXOpen.Features.VehicleDesign.AllAroundVisionBuilderWindowTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: AllAroundVisionBuilder = ...  # unknown typename


class HeadImpactRearHeaderDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeaderDetailBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateGeometry: bool = ...
    """
    Returns or sets  the create construction geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGeometry`` 
    
    :param createGeometry: 
    :type createGeometry: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RHLeft: NXOpen.Point = ...
    """
    Returns or sets  the left rear header target alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``RHLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RHLeft`` 
    
    :param rhLeft: 
    :type rhLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RHLeftFlag: bool = ...
    """
    Returns or sets  the left rear header target alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``RHLeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RHLeftFlag`` 
    
    :param rhLeftFlag: 
    :type rhLeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RHOffsetMax: NXOpen.Expression = ...
    """
    Returns  the maximum offset allowed to position the rear header target.  
    
    <hr>
    
    Getter Method
    
    Signature ``RHOffsetMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RHRight: NXOpen.Point = ...
    """
    Returns or sets  the right rear header target alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``RHRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RHRight`` 
    
    :param rhRight: 
    :type rhRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RHRightFlag: bool = ...
    """
    Returns or sets  the right rear header target alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``RHRightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RHRightFlag`` 
    
    :param rhRightFlag: 
    :type rhRightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReqHorizontalExact: NXOpen.Expression = ...
    """
    Returns  the horizontal exact required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalExact`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMax: NXOpen.Expression = ...
    """
    Returns  the vertical maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMin: NXOpen.Expression = ...
    """
    Returns  the vertical minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactRearHeaderDetailBuilder = ...  # unknown typename


class BaseDataWheelBuilderPositionDefinitionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseDataWheelBuilderPositionDefinitionOptions():
    """
    This enum represents the options to define the wheel position. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WheelCenterPoint", " - "
       "AttachmentPointRimOffset", " - "
    """
    WheelCenterPoint = 0  # BaseDataWheelBuilderPositionDefinitionOptionsMemberType
    AttachmentPointRimOffset = 1  # BaseDataWheelBuilderPositionDefinitionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseDataWheelBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder`.  
    
    This class can only be used in base data, thus cannot be created directly by user.
    
    .. versionadded:: NX8.5.0
    """
    
    class PositionDefinitionOptions():
        """
        This enum represents the options to define the wheel position. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WheelCenterPoint", " - "
           "AttachmentPointRimOffset", " - "
        """
        WheelCenterPoint = 0  # BaseDataWheelBuilderPositionDefinitionOptionsMemberType
        AttachmentPointRimOffset = 1  # BaseDataWheelBuilderPositionDefinitionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Camber: float = ...
    """
    Returns or sets  the wheel camber in degree.  
    
    <hr>
    
    Getter Method
    
    Signature ``Camber`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Camber`` 
    
    :param dValue: 
    :type dValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CoordinateX: float = ...
    """
    Returns or sets  the x coordinate of right wheel center point or attachment point.  
    
    If :py:meth:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder.PositionDefinition` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions.WheelCenterPoint <NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions>`, 
    it is center point x coordinate.
    If :py:meth:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder.PositionDefinition`` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions.AttachmentPointRimOffset <NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions>`, 
    it is attachment point x coordinate.
    The left wheel will be located symmetrical to the vehicle centerline. 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateX`` 
    
    :param dValue: 
    :type dValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CoordinateY: float = ...
    """
    Returns or sets  the y coordinate of right wheel center point or attachment point.  
    
    If :py:meth:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder.PositionDefinition`` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions.WheelCenterPoint <NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions>`, 
    it is center point y coordinate.
    If :py:meth:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder.PositionDefinition`` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions.AttachmentPointRimOffset <NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions>`, 
    it is attachment point y coordinate.
    The left wheel will be located symmetrical to the vehicle centerline. 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateY`` 
    
    :param dValue: 
    :type dValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CoordinateZ: float = ...
    """
    Returns or sets  the z coordinate of right wheel center point or attachment point.  
    
    If :py:meth:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder.PositionDefinition`` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions.WheelCenterPoint <NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions>`, 
    it is center point z coordinate.
    If :py:meth:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder.PositionDefinition`` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions.AttachmentPointRimOffset <NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions>`, 
    it is attachment point z coordinate.
    The left wheel will be located symmetrical to the vehicle centerline. 
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateZ`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateZ`` 
    
    :param dValue: 
    :type dValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Diameter: float = ...
    """
    Returns or sets  the norminal diameter of the wheel.  
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Diameter`` 
    
    :param dValue: 
    :type dValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Name: str = ...
    """
    Returns or sets  the name of the wheel.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PositionDefinition: BaseDataWheelBuilderPositionDefinitionOptions = ...
    """
    Returns or sets  the value to indicate which option is used to define the wheel position.  
    
    <hr>
    
    Getter Method
    
    Signature ``PositionDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositionDefinition`` 
    
    :param positionDefinition: 
    :type positionDefinition: :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RimOffset: float = ...
    """
    Returns or sets  the rim offset.  
    
    Rim offset is the shift between the mounting point of the wheel and the wheel center.
    It is used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder.PositionDefinition`` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions.AttachmentPointRimOffset <NXOpen.Features.VehicleDesign.BaseDataWheelBuilderPositionDefinitionOptions>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``RimOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RimOffset`` 
    
    :param dValue: 
    :type dValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowSurface: bool = ...
    """
    Returns or sets  the option to indicate whether to show surface or not.  
    
    If it is true, the wheel surface is shown. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSurface`` 
    
    :param showFace: 
    :type showFace: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowWireframe: bool = ...
    """
    Returns or sets  the option to indicate whether to show curve or not.  
    
    If it is true, the wheel curve is shown. 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowWireframe`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowWireframe`` 
    
    :param showWire: 
    :type showWire: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    StaticRadius: float = ...
    """
    Returns or sets  the static radius of the wheel.  
    
    <hr>
    
    Getter Method
    
    Signature ``StaticRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaticRadius`` 
    
    :param dValue: 
    :type dValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Toe: float = ...
    """
    Returns or sets  the wheel toe in/out in degreee.  
    
    <hr>
    
    Getter Method
    
    Signature ``Toe`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Toe`` 
    
    :param dValue: 
    :type dValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Track: float = ...
    """
    Returns  the track of the axle.  
    
    Track is a computed value - the distance between 
    the right wheel center point and the left wheel center point.
    
    <hr>
    
    Getter Method
    
    Signature ``Track`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Width: float = ...
    """
    Returns or sets  the width of the wheel.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param dValue: 
    :type dValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: BaseDataWheelBuilder = ...  # unknown typename


class HeadImpactBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HeadImpactBuilderRequirementsControlType():
    """
    Represents the requirements control types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", " - "
       "UserDefined", " - "
    """
    StandardDriven = 0  # HeadImpactBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # HeadImpactBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HeadImpactBuilderCalculationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HeadImpactBuilderCalculationType():
    """
    Represents the calculation types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BothSides", " - "
       "RightSide", " - "
       "LeftSide", " - "
    """
    BothSides = 0  # HeadImpactBuilderCalculationTypeMemberType
    RightSide = 1  # HeadImpactBuilderCalculationTypeMemberType
    LeftSide = 2  # HeadImpactBuilderCalculationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HeadImpactBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactBuilder`
    
    Default values.
    
    ======================  ======================================
    Property                Value
    ======================  ======================================
    ActiveZone              0 
    ----------------------  --------------------------------------
    COGFrontXOffset.Value   0 (millimeters part), 0 (inches part) 
    ----------------------  --------------------------------------
    COGFrontZOffset.Value   0 (millimeters part), 0 (inches part) 
    ----------------------  --------------------------------------
    COGRearXOffset.Value    0 (millimeters part), 0 (inches part) 
    ----------------------  --------------------------------------
    COGRearZOffset.Value    0 (millimeters part), 0 (inches part) 
    ----------------------  --------------------------------------
    Calculation             BothSides 
    ----------------------  --------------------------------------
    RequirementsControl     StandardDriven 
    ----------------------  --------------------------------------
    VisualizeZone           0 
    ----------------------  --------------------------------------
    ZoneDistance.Value      0 (millimeters part), 0 (inches part) 
    ======================  ======================================
    
    .. versionadded:: NX9.0.0
    """
    
    class RequirementsControlType():
        """
        Represents the requirements control types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", " - "
           "UserDefined", " - "
        """
        StandardDriven = 0  # HeadImpactBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # HeadImpactBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CalculationType():
        """
        Represents the calculation types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BothSides", " - "
           "RightSide", " - "
           "LeftSide", " - "
        """
        BothSides = 0  # HeadImpactBuilderCalculationTypeMemberType
        RightSide = 1  # HeadImpactBuilderCalculationTypeMemberType
        LeftSide = 2  # HeadImpactBuilderCalculationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddAdditionalPillarFeature(self, feature: HeadImpactOPillar) -> None:
        """
        The method to add an additional pillar feature.  
        
        Signature ``AddAdditionalPillarFeature(feature)`` 
        
        :param feature: 
        :type feature: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOPillar` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    
    def AddAdditionalRailFeature(self, feature: HeadImpactOtherRail) -> None:
        """
        The method to add an additional side rail feature.  
        
        Signature ``AddAdditionalRailFeature(feature)`` 
        
        :param feature: 
        :type feature: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOtherRail` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    APillarFeature: HeadImpactAPillar = ...
    """
    Returns or sets  the a-pillar feature for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``APillarFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillar` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``APillarFeature`` 
    
    :param feature: 
    :type feature: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillar` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ActiveZone: bool = ...
    """
    Returns or sets  the activate exclusion zone flag for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveZone`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveZone`` 
    
    :param activeZone: 
    :type activeZone: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BPillarFeature: HeadImpactBPillar = ...
    """
    Returns or sets  the b-pillar feature for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``BPillarFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillar` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BPillarFeature`` 
    
    :param feature: 
    :type feature: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillar` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    COGFrontXOffset: NXOpen.Expression = ...
    """
    Returns  the center of gravity front longitudunal offset for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``COGFrontXOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    COGFrontZOffset: NXOpen.Expression = ...
    """
    Returns  the center of gravity front vertical offset for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``COGFrontZOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    COGRearXOffset: NXOpen.Expression = ...
    """
    Returns  the center of gravity rear longitudunal offset for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``COGRearXOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    COGRearZOffset: NXOpen.Expression = ...
    """
    Returns  the center of gravity rear vertical offset for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``COGRearZOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Calculation: HeadImpactBuilderCalculationType = ...
    """
    Returns or sets  the calculation type for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``Calculation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilderCalculationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Calculation`` 
    
    :param calculation: 
    :type calculation: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilderCalculationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontHeaderFeature: HeadImpactFrontHeader = ...
    """
    Returns or sets  the front header feature for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontHeaderFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeader` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontHeaderFeature`` 
    
    :param feature: 
    :type feature: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeader` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Loading: str = ...
    """
    Returns or sets  the loading used for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RPillarFeature: HeadImpactRPillar = ...
    """
    Returns or sets  the rear pillar feature for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``RPillarFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillar` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RPillarFeature`` 
    
    :param feature: 
    :type feature: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillar` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearHeaderFeature: HeadImpactRearHeader = ...
    """
    Returns or sets  the rear header feature for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearHeaderFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeader` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearHeaderFeature`` 
    
    :param feature: 
    :type feature: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeader` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RequirementsControl: HeadImpactBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control for standard driven or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilderRequirementsControlType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirementsControl: 
    :type requirementsControl: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilderRequirementsControlType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SideRailFeature: HeadImpactSideRail = ...
    """
    Returns or sets  the side rail feature for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideRailFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRail` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideRailFeature`` 
    
    :param feature: 
    :type feature: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRail` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard used for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UpperRoofFeature: HeadImpactUpperRoof = ...
    """
    Returns or sets  the upper roof feature for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoof` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperRoofFeature`` 
    
    :param feature: 
    :type feature: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoof` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VisualizeZone: bool = ...
    """
    Returns or sets  the visualize exclusion zone flag for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisualizeZone`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisualizeZone`` 
    
    :param visualizeZone: 
    :type visualizeZone: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ZoneDistance: NXOpen.Expression = ...
    """
    Returns  the exclusion zone distance for this head impact study.  
    
    <hr>
    
    Getter Method
    
    Signature ``ZoneDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactBuilder = ...  # unknown typename


class GroundClearance(NXOpen.Features.BodyFeature):
    """
    Represents a ground clearance feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.GroundClearanceBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: GroundClearance = ...  # unknown typename


class BaseDataLoadingWheelBuilderDataDefinitionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BaseDataLoadingWheelBuilderDataDefinitionOptions():
    """
    This enum represents the options to define the wheel position. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Relative", "Relative: The wheel data of this loading will use relative values to design data."
       "Absolute", "Absolute: The wheel data of this loading will use absolute values."
    """
    Relative = 0  # BaseDataLoadingWheelBuilderDataDefinitionOptionsMemberType
    Absolute = 1  # BaseDataLoadingWheelBuilderDataDefinitionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BaseDataLoadingWheelBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder`.  
    
    This class can only be used in base data, thus cannot be created directly by user.
    
    .. versionadded:: NX8.5.0
    """
    
    class DataDefinitionOptions():
        """
        This enum represents the options to define the wheel position. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Relative", "Relative: The wheel data of this loading will use relative values to design data."
           "Absolute", "Absolute: The wheel data of this loading will use absolute values."
        """
        Relative = 0  # BaseDataLoadingWheelBuilderDataDefinitionOptionsMemberType
        Absolute = 1  # BaseDataLoadingWheelBuilderDataDefinitionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Camber: float = ...
    """
    Returns or sets  the camber of wheel in degree.  
    
    Used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Absolute <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``Camber`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Camber`` 
    
    :param camber: 
    :type camber: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CoordinateX: float = ...
    """
    Returns or sets  the x coordinate of wheel center point.  
    
    Used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Absolute <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateX`` 
    
    :param absX: 
    :type absX: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CoordinateY: float = ...
    """
    Returns or sets  the y coordinate of wheel center point.  
    
    Used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Absolute <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateY`` 
    
    :param absY: 
    :type absY: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CoordinateZ: float = ...
    """
    Returns or sets  the z coordinate of wheel center point.  
    
    Used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Absolute <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``CoordinateZ`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoordinateZ`` 
    
    :param absZ: 
    :type absZ: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DataDefinition: BaseDataLoadingWheelBuilderDataDefinitionOptions = ...
    """
    Returns or sets  the value to indicate which definition option will be used to define the loading wheel data.  
    
    <hr>
    
    Getter Method
    
    Signature ``DataDefinition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DataDefinition`` 
    
    :param dataDefinition: 
    :type dataDefinition: :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DeltaCamber: float = ...
    """
    Returns or sets  the delta camber of wheel.  
    
    It is used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` 
    is :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Relative <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaCamber`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaCamber`` 
    
    :param deltaCamber: 
    :type deltaCamber: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DeltaStaticRadius: float = ...
    """
    Returns or sets  the delta static radius of wheel.  
    
    It is used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Relative <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaStaticRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaStaticRadius`` 
    
    :param deltaStaticRadius: 
    :type deltaStaticRadius: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DeltaToe: float = ...
    """
    Returns or sets  the delta toe of wheel.  
    
    It is used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Relative <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaToe`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaToe`` 
    
    :param deltaToe: 
    :type deltaToe: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DeltaWidth: float = ...
    """
    Returns or sets  the delta width of wheel, for front or rear wheel, they have a wheel width.  
    
    For each loading, they have a delta width,
    the loading width will be sum of wheel width and delta width.
    It is used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Relative <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaWidth`` 
    
    :param deltaWidth: 
    :type deltaWidth: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DeltaX: float = ...
    """
    Returns or sets  the delta x value of wheel center point.  
    
    It is used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Relative <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaX`` 
    
    :param deltaX: 
    :type deltaX: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DeltaY: float = ...
    """
    Returns or sets  the delta y value of wheel center point.  
    
    It is used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition`
    is :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Relative <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaY`` 
    
    :param deltaY: 
    :type deltaY: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DeltaZ: float = ...
    """
    Returns or sets  the delta z value of wheel center point.  
    
    It is used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Relative <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``DeltaZ`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeltaZ`` 
    
    :param deltaZ: 
    :type deltaZ: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DesignData: BaseDataWheelBuilder = ...
    """
    Returns or sets  the design data of the wheel.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignData`` 
    
    :param wheel: 
    :type wheel: :py:class:`NXOpen.Features.VehicleDesign.BaseDataWheelBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    StaticRadius: float = ...
    """
    Returns or sets  the static radius of wheel.  
    
    Used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Absolute <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``StaticRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StaticRadius`` 
    
    :param staticRadius: 
    :type staticRadius: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Toe: float = ...
    """
    Returns or sets  the toe in/out of wheel in degree.  
    
    Used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is 
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Absolute <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``Toe`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Toe`` 
    
    :param toe: 
    :type toe: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Width: float = ...
    """
    Returns or sets  the width of front or rear width, it's value is sum of wheel width and delta width.  
    
    Used only when :py:meth:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilder.DataDefinition` is
    :py:class:`NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions.Absolute <NXOpen.Features.VehicleDesign.BaseDataLoadingWheelBuilderDataDefinitionOptions>`.
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: BaseDataLoadingWheelBuilder = ...  # unknown typename


class SlopeBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SlopeBuilderRequirementsControlType():
    """
    Represents the requirements control types to define the slope. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", " - "
       "UserDefined", " - "
    """
    StandardDriven = 0  # SlopeBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # SlopeBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SlopeBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SlopeBuilderPositionType():
    """
    Represents the slope positions. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Front", " - "
       "Rear", " - "
       "Both", " - "
    """
    Front = 0  # SlopeBuilderPositionTypeMemberType
    Rear = 1  # SlopeBuilderPositionTypeMemberType
    Both = 2  # SlopeBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SlopeBuilderWheelSizeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SlopeBuilderWheelSizeType():
    """
    Represents the wheel size types to calculate slope output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StaticRadius", " - "
       "Diameter", " - "
    """
    StaticRadius = 0  # SlopeBuilderWheelSizeTypeMemberType
    Diameter = 1  # SlopeBuilderWheelSizeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SlopeBuilderVisualizationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SlopeBuilderVisualizationType():
    """
    Represents the visualization types of the output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", " - "
       "Surface", " - "
       "CurveandSurface", " - "
    """
    Curve = 0  # SlopeBuilderVisualizationTypeMemberType
    Surface = 1  # SlopeBuilderVisualizationTypeMemberType
    CurveandSurface = 2  # SlopeBuilderVisualizationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SlopeBuilder(NXOpen.Builder):
    """
    The builder to create slope feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateSlopeBuilder`
    
    Default values.
    
    ====================  ===============
    Property              Value
    ====================  ===============
    Position              Front 
    --------------------  ---------------
    RequirementsControl   StandardDriven 
    --------------------  ---------------
    Visualization         Surface 
    ====================  ===============
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlType():
        """
        Represents the requirements control types to define the slope. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", " - "
           "UserDefined", " - "
        """
        StandardDriven = 0  # SlopeBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # SlopeBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionType():
        """
        Represents the slope positions. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Front", " - "
           "Rear", " - "
           "Both", " - "
        """
        Front = 0  # SlopeBuilderPositionTypeMemberType
        Rear = 1  # SlopeBuilderPositionTypeMemberType
        Both = 2  # SlopeBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WheelSizeType():
        """
        Represents the wheel size types to calculate slope output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StaticRadius", " - "
           "Diameter", " - "
        """
        StaticRadius = 0  # SlopeBuilderWheelSizeTypeMemberType
        Diameter = 1  # SlopeBuilderWheelSizeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VisualizationType():
        """
        Represents the visualization types of the output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", " - "
           "Surface", " - "
           "CurveandSurface", " - "
        """
        Curve = 0  # SlopeBuilderVisualizationTypeMemberType
        Surface = 1  # SlopeBuilderVisualizationTypeMemberType
        CurveandSurface = 2  # SlopeBuilderVisualizationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    FrontAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the front angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontLoading: str = ...
    """
    Returns or sets  the loading applied to the vehicle front used in the slope.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontLoading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontLoading`` 
    
    :param frontLoading: 
    :type frontLoading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontObjects: NXOpen.ScCollector = ...
    """
    Returns  the selected front faces for slope measurement.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Position: SlopeBuilderPositionType = ...
    """
    Returns or sets  the slope position.  
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the rear angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearLoading: str = ...
    """
    Returns or sets  the loading applied to the vehicle rear used in the slope.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearLoading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearLoading`` 
    
    :param rearLoading: 
    :type rearLoading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearObjects: NXOpen.ScCollector = ...
    """
    Returns  the selected rear faces for slope measurement.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RequirementsControl: SlopeBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control for standard or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirement: 
    :type requirement: :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowDistanceMeasurement: bool = ...
    """
    Returns or sets  
    the value to show distance measurement.  
    
    True will show the distance measurement. False will hide the distance measurement.
    
    <hr>
    
    Getter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :param showDistanceMeasurement: 
    :type showDistanceMeasurement: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard used to define the slope.  
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Visualization: SlopeBuilderVisualizationType = ...
    """
    Returns or sets  
    the visualization type of the slope output.  
    
    See :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilderVisualizationType` for valid values. 
    
    <hr>
    
    Getter Method
    
    Signature ``Visualization`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Visualization`` 
    
    :param visualization: 
    :type visualization: :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WheelSize: SlopeBuilderWheelSizeType = ...
    """
    Returns or sets  the wheel size used in the slope.  
    
    <hr>
    
    Getter Method
    
    Signature ``WheelSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilderWheelSizeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelSize`` 
    
    :param wheelSize: 
    :type wheelSize: :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilderWheelSizeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: SlopeBuilder = ...  # unknown typename


class HeadImpactUpperRoofWizardBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoofWizardBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    PlaneAPoint: NXOpen.Point = ...
    """
    Returns or sets  the plane A point.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneAPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneAPoint`` 
    
    :param planeAPoint: 
    :type planeAPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PlaneBPoint: NXOpen.Point = ...
    """
    Returns or sets  the plane B point.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneBPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneBPoint`` 
    
    :param planeBPoint: 
    :type planeBPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PlaneCPoint: NXOpen.Point = ...
    """
    Returns or sets  the plane C point.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneCPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneCPoint`` 
    
    :param planeCPoint: 
    :type planeCPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PlaneDPoint: NXOpen.Point = ...
    """
    Returns or sets  the plane D point.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneDPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneDPoint`` 
    
    :param planeDPoint: 
    :type planeDPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearWindowTrim: NXOpen.ScCollector = ...
    """
    Returns  the rear window trim geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearWindowTrim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UpperRoofExterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof exterior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofExterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UpperRoofInterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof interior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofInterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    WindshieldTrim: NXOpen.ScCollector = ...
    """
    Returns  the windshield trim geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``WindshieldTrim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactUpperRoofWizardBuilder = ...  # unknown typename


class HeadImpactRearHeader(NXOpen.Features.BodyFeature):
    """
    Represents a head impact rear header feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeaderBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpactRearHeader = ...  # unknown typename


class StaticCurbBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StaticCurbBuilderRequirementsControlType():
    """
    Represents the requirements control types to define the static curb. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", "Standard Driven"
       "UserDefined", "User Defined"
    """
    StandardDriven = 0  # StaticCurbBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # StaticCurbBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StaticCurbBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StaticCurbBuilderPositionType():
    """
    Represents the static curb positions. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Front", "Front"
       "Rear", "Rear"
       "Both", "Both"
    """
    Front = 0  # StaticCurbBuilderPositionTypeMemberType
    Rear = 1  # StaticCurbBuilderPositionTypeMemberType
    Both = 2  # StaticCurbBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StaticCurbBuilderVisualizationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StaticCurbBuilderVisualizationType():
    """
    Represents the visualization types of the output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", "Curve"
       "Surface", "Surface"
       "CurveandSurface", "Curves and Surface"
    """
    Curve = 0  # StaticCurbBuilderVisualizationTypeMemberType
    Surface = 1  # StaticCurbBuilderVisualizationTypeMemberType
    CurveandSurface = 2  # StaticCurbBuilderVisualizationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StaticCurbBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.StaticCurb` builder
    used to create or edit static curb feature
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateStaticCurbBuilder`
    
    Default values.
    
    ====================  ===============
    Property              Value
    ====================  ===============
    Position              Front 
    --------------------  ---------------
    RequirementsControl   StandardDriven 
    --------------------  ---------------
    Visualization         Surface 
    ====================  ===============
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlType():
        """
        Represents the requirements control types to define the static curb. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", "Standard Driven"
           "UserDefined", "User Defined"
        """
        StandardDriven = 0  # StaticCurbBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # StaticCurbBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionType():
        """
        Represents the static curb positions. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Front", "Front"
           "Rear", "Rear"
           "Both", "Both"
        """
        Front = 0  # StaticCurbBuilderPositionTypeMemberType
        Rear = 1  # StaticCurbBuilderPositionTypeMemberType
        Both = 2  # StaticCurbBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VisualizationType():
        """
        Represents the visualization types of the output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", "Curve"
           "Surface", "Surface"
           "CurveandSurface", "Curves and Surface"
        """
        Curve = 0  # StaticCurbBuilderVisualizationTypeMemberType
        Surface = 1  # StaticCurbBuilderVisualizationTypeMemberType
        CurveandSurface = 2  # StaticCurbBuilderVisualizationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    FrontAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the front angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontLoading: str = ...
    """
    Returns or sets  the loading applied to the vehicle front used in the static curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontLoading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontLoading`` 
    
    :param frontLoading: 
    :type frontLoading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontMeasuredFaces: NXOpen.ScCollector = ...
    """
    Returns  the selected front faces for measurement.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontMeasuredFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the front offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Position: StaticCurbBuilderPositionType = ...
    """
    Returns or sets  the static curb position.  
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.StaticCurbBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Features.VehicleDesign.StaticCurbBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the rear angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearLoading: str = ...
    """
    Returns or sets  the loading applied to the vehicle rear used in the static curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearLoading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearLoading`` 
    
    :param rearLoading: 
    :type rearLoading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearMeasuredFaces: NXOpen.ScCollector = ...
    """
    Returns  the selected rear faces for measurement.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearMeasuredFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearOffset: NXOpen.Expression = ...
    """
    Returns  the expression containing the rear offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RequirementsControl: StaticCurbBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control for standard driven or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.StaticCurbBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirementsControlType: 
    :type requirementsControlType: :py:class:`NXOpen.Features.VehicleDesign.StaticCurbBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowDistanceMeasurement: bool = ...
    """
    Returns or sets  
    the value to show distance measurement.  
    
    True will show the distance measurement. False will hide the distance measurement.
    
    <hr>
    
    Getter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :param showDistanceMeasurement: 
    :type showDistanceMeasurement: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard used to define the static curb.  
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Visualization: StaticCurbBuilderVisualizationType = ...
    """
    Returns or sets  
    the visualization type of the static curb output.  
    
    See :py:class:`NXOpen.Features.VehicleDesign.StaticCurbBuilderVisualizationType` for valid values. 
    
    <hr>
    
    Getter Method
    
    Signature ``Visualization`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.StaticCurbBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Visualization`` 
    
    :param visualization: 
    :type visualization: :py:class:`NXOpen.Features.VehicleDesign.StaticCurbBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: StaticCurbBuilder = ...  # unknown typename


class Slope(NXOpen.Features.BodyFeature):
    """
    Represents a Slope feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.SlopeBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: Slope = ...  # unknown typename


class Manikin(NXOpen.Features.Feature):
    """
    Represents a manikin automotive feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.ManikinBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: Manikin = ...  # unknown typename


class HeadImpactAPillarWizardBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarWizardBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    APillarLeft: NXOpen.ScCollector = ...
    """
    Returns  the left A pillar geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``APillarLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    APillarRight: NXOpen.ScCollector = ...
    """
    Returns  the right A pillar geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``APillarRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Dashboard: NXOpen.ScCollector = ...
    """
    Returns  the dashboard geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``Dashboard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Line1PointLeft: NXOpen.Point = ...
    """
    Returns or sets  the left Line 1 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Line1PointLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Line1PointLeft`` 
    
    :param line1PointLeft: 
    :type line1PointLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Line1PointRight: NXOpen.Point = ...
    """
    Returns or sets  the right Line 1 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Line1PointRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Line1PointRight`` 
    
    :param line1PointRight: 
    :type line1PointRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane1PointLeft: NXOpen.Point = ...
    """
    Returns or sets  the left Plane 1 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane1PointLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane1PointLeft`` 
    
    :param plane1PointLeft: 
    :type plane1PointLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane1PointRight: NXOpen.Point = ...
    """
    Returns or sets  the right Plane 1 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane1PointRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane1PointRight`` 
    
    :param plane1PointRight: 
    :type plane1PointRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane5PointLeft: NXOpen.Point = ...
    """
    Returns or sets  the left Plane 5 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane5PointLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane5PointLeft`` 
    
    :param plane5PointLeft: 
    :type plane5PointLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane5PointRight: NXOpen.Point = ...
    """
    Returns or sets  the right Plane 5 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Plane5PointRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane5PointRight`` 
    
    :param plane5PointRight: 
    :type plane5PointRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UpperRoofExterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof exterior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofExterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UpperRoofInterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof interior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofInterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    WindshieldTrim: NXOpen.ScCollector = ...
    """
    Returns  the windshield trim geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``WindshieldTrim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactAPillarWizardBuilder = ...  # unknown typename


class HeadImpactFrontHeaderBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeaderBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactFrontHeaderBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Initialize(self, parent: HeadImpactBuilder) -> None:
        """
        The Front Header initialize method.  
        
        Signature ``Initialize(parent)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Geometry: HeadImpactFrontHeaderWizardBuilder = ...
    """
    Returns  the Front Header Geometry builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeaderWizardBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeaderWizardBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Parameters: HeadImpactFrontHeaderDetailBuilder = ...
    """
    Returns  the Front Header Parameters builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeaderDetailBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeaderDetailBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactFrontHeaderBuilder = ...  # unknown typename


class InnerAngle(NXOpen.Features.BodyFeature):
    """
    Represents an inner angle feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: InnerAngle = ...  # unknown typename


class WheelFixingBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WheelFixingBuilderRequirementsControlType():
    """
    Represents the requirements control types to define the wheel fixing.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", " - "
       "UserDefined", " - "
    """
    StandardDriven = 0  # WheelFixingBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # WheelFixingBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WheelFixingBuilderPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WheelFixingBuilderPositionType():
    """
    Represents the wheel fixing positions.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Front", " - "
       "Rear", " - "
       "Both", " - "
    """
    Front = 0  # WheelFixingBuilderPositionTypeMemberType
    Rear = 1  # WheelFixingBuilderPositionTypeMemberType
    Both = 2  # WheelFixingBuilderPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WheelFixingBuilderWheelSizeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WheelFixingBuilderWheelSizeType():
    """
    Represents the wheel size used to indicate if the wheel fixing is based on static radius or the diameter of the wheels.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StaticRadius", " - "
       "Diameter", " - "
    """
    StaticRadius = 0  # WheelFixingBuilderWheelSizeTypeMemberType
    Diameter = 1  # WheelFixingBuilderWheelSizeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WheelFixingBuilderShapeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WheelFixingBuilderShapeType():
    """
    Represents the shape used to indicate if the wheel fixing is a block or a circle segment.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Block", " - "
       "CircleSegment", " - "
    """
    Block = 0  # WheelFixingBuilderShapeTypeMemberType
    CircleSegment = 1  # WheelFixingBuilderShapeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WheelFixingBuilderObjectPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WheelFixingBuilderObjectPositionType():
    """
    Represents the object position used to indicate if the wheel fixing is positioned at the theoretically
    widest dimension of the wheel (diameter) or exactly at the wheel geometry of the base data.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WheelExtents", " - "
       "WheelContact", " - "
    """
    WheelExtents = 0  # WheelFixingBuilderObjectPositionTypeMemberType
    WheelContact = 1  # WheelFixingBuilderObjectPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WheelFixingBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.WheelFixing` builder used to
    create or edit a vehicle design wheel fixing.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateWheelFixingBuilder`
    
    Default values.
    
    ====================  ===============
    Property              Value
    ====================  ===============
    HeightZ.Value         0 
    --------------------  ---------------
    LengthX.Value         0 
    --------------------  ---------------
    LevelZ.Value          0 
    --------------------  ---------------
    ObjectPosition        WheelExtents 
    --------------------  ---------------
    Position              Front 
    --------------------  ---------------
    Radius.Value          0 
    --------------------  ---------------
    RequirementsControl   StandardDriven 
    --------------------  ---------------
    Shape                 Block 
    --------------------  ---------------
    WheelSize             StaticRadius 
    --------------------  ---------------
    WidthY.Value          0 
    ====================  ===============
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlType():
        """
        Represents the requirements control types to define the wheel fixing.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", " - "
           "UserDefined", " - "
        """
        StandardDriven = 0  # WheelFixingBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # WheelFixingBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionType():
        """
        Represents the wheel fixing positions.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Front", " - "
           "Rear", " - "
           "Both", " - "
        """
        Front = 0  # WheelFixingBuilderPositionTypeMemberType
        Rear = 1  # WheelFixingBuilderPositionTypeMemberType
        Both = 2  # WheelFixingBuilderPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WheelSizeType():
        """
        Represents the wheel size used to indicate if the wheel fixing is based on static radius or the diameter of the wheels.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StaticRadius", " - "
           "Diameter", " - "
        """
        StaticRadius = 0  # WheelFixingBuilderWheelSizeTypeMemberType
        Diameter = 1  # WheelFixingBuilderWheelSizeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShapeType():
        """
        Represents the shape used to indicate if the wheel fixing is a block or a circle segment.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Block", " - "
           "CircleSegment", " - "
        """
        Block = 0  # WheelFixingBuilderShapeTypeMemberType
        CircleSegment = 1  # WheelFixingBuilderShapeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ObjectPositionType():
        """
        Represents the object position used to indicate if the wheel fixing is positioned at the theoretically
        widest dimension of the wheel (diameter) or exactly at the wheel geometry of the base data.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WheelExtents", " - "
           "WheelContact", " - "
        """
        WheelExtents = 0  # WheelFixingBuilderObjectPositionTypeMemberType
        WheelContact = 1  # WheelFixingBuilderObjectPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    HeightZ: NXOpen.Expression = ...
    """
    Returns  the expression that contains the value which indicates the height Z of the wheel fixing when the shape is block.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeightZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    LengthX: NXOpen.Expression = ...
    """
    Returns  the expression that contains the value which indicates the Length X of the wheel fixing when the shape is block.  
    
    <hr>
    
    Getter Method
    
    Signature ``LengthX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    LevelZ: NXOpen.Expression = ...
    """
    Returns  the expression that contains the value which indicates the level Z of the wheel fixing when the shape is circle segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``LevelZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Loading: str = ...
    """
    Returns or sets  the loading used in the wheel fixing.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ObjectPosition: WheelFixingBuilderObjectPositionType = ...
    """
    Returns or sets  the wheel fixing object position.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderObjectPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectPosition`` 
    
    :param objectPosition: 
    :type objectPosition: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderObjectPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Position: WheelFixingBuilderPositionType = ...
    """
    Returns or sets  the wheel fixing position.  
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the expression that contains the value which indicates the radius of the wheel fixing when the shape is circle segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RequirementsControl: WheelFixingBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control for standard driven or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirementsControl: 
    :type requirementsControl: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Shape: WheelFixingBuilderShapeType = ...
    """
    Returns or sets  the wheel fixing shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``Shape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderShapeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Shape`` 
    
    :param shape: 
    :type shape: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderShapeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard used to define the wheel fixing.  
    
    Only used when the requirements control type is :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderRequirementsControlType.StandardDriven <NXOpen.Features.VehicleDesign.WheelFixingBuilderRequirementsControlType>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WheelSize: WheelFixingBuilderWheelSizeType = ...
    """
    Returns or sets  the wheel size of the wheel fixing.  
    
    <hr>
    
    Getter Method
    
    Signature ``WheelSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderWheelSizeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelSize`` 
    
    :param wheelSize: 
    :type wheelSize: :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilderWheelSizeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WidthY: NXOpen.Expression = ...
    """
    Returns  the expression that contains the value which indicates the Width Y of the wheel fixing when the shape is block.  
    
    <hr>
    
    Getter Method
    
    Signature ``WidthY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: WheelFixingBuilder = ...  # unknown typename


class BumperPendulumBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BumperPendulumBuilderRequirementsControlType():
    """
    Represents the requirements control types to define the bumper pendulum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", " - "
       "UserDefined", " - "
    """
    StandardDriven = 0  # BumperPendulumBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # BumperPendulumBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BumperPendulumBuilderVisualizationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BumperPendulumBuilderVisualizationType():
    """
    Represents the visualization types of the output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", " - "
       "Surface", " - "
       "CurveandSurface", " - "
    """
    Curve = 0  # BumperPendulumBuilderVisualizationTypeMemberType
    Surface = 1  # BumperPendulumBuilderVisualizationTypeMemberType
    CurveandSurface = 2  # BumperPendulumBuilderVisualizationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BumperPendulumBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.BumperPendulum` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateBumperPendulumBuilder`
    
    Default values.
    
    ====================  ===============
    Property              Value
    ====================  ===============
    RequirementsControl   StandardDriven 
    --------------------  ---------------
    Visualization         Surface 
    ====================  ===============
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlType():
        """
        Represents the requirements control types to define the bumper pendulum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", " - "
           "UserDefined", " - "
        """
        StandardDriven = 0  # BumperPendulumBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # BumperPendulumBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VisualizationType():
        """
        Represents the visualization types of the output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", " - "
           "Surface", " - "
           "CurveandSurface", " - "
        """
        Curve = 0  # BumperPendulumBuilderVisualizationTypeMemberType
        Surface = 1  # BumperPendulumBuilderVisualizationTypeMemberType
        CurveandSurface = 2  # BumperPendulumBuilderVisualizationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    @typing.overload
    def GetPendulum(self, index: int) -> PendulumPlacementBuilder:
        """
        Get the selected pendulum.  
        
        Signature ``GetPendulum(index)`` 
        
        :param index: 
        :type index: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    @typing.overload
    def GetPendulum(self, description: str) -> PendulumPlacementBuilder:
        """
        Get the selected pendulum.  
        
        Signature ``GetPendulum(description)`` 
        
        :param description: 
        :type description: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.PendulumPlacementBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    FrontCollector: NXOpen.ScCollector = ...
    """
    Returns  the selected front body.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected front facet body 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    RearCollector: NXOpen.ScCollector = ...
    """
    Returns  the selected rear body.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected rear facet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    RequirementsControl: BumperPendulumBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control for standard driven or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BumperPendulumBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirement: 
    :type requirement: :py:class:`NXOpen.Features.VehicleDesign.BumperPendulumBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard used to define the bumper pendulum.  
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Visualization: BumperPendulumBuilderVisualizationType = ...
    """
    Returns or sets  the visualization type of the bumper pendulum output.  
    
    <hr>
    
    Getter Method
    
    Signature ``Visualization`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.BumperPendulumBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Visualization`` 
    
    :param visualization: 
    :type visualization: :py:class:`NXOpen.Features.VehicleDesign.BumperPendulumBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: BumperPendulumBuilder = ...  # unknown typename


class PedestrianProtectionBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PedestrianProtectionBuilderTypes():
    """
    Settings for the type of pedestrian protection impact study 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "HeadAndLegImpact", "Head and leg impact study"
       "HeadImpact", "Head impact study only"
       "LegImpact", "Leg impact study only"
    """
    HeadAndLegImpact = 0  # PedestrianProtectionBuilderTypesMemberType
    HeadImpact = 1  # PedestrianProtectionBuilderTypesMemberType
    LegImpact = 2  # PedestrianProtectionBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PedestrianProtectionBuilderStandardTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PedestrianProtectionBuilderStandardType():
    """
    Settings for the type of pedestrian protection standard to use in the study 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NorthAmerican", "North american standard"
       "European", "European standard"
       "Japanese", "Japanese standard"
       "Korean", "Korean standard"
       "Chinese", "Chinese standard"
    """
    NorthAmerican = 0  # PedestrianProtectionBuilderStandardTypeMemberType
    European = 1  # PedestrianProtectionBuilderStandardTypeMemberType
    Japanese = 2  # PedestrianProtectionBuilderStandardTypeMemberType
    Korean = 3  # PedestrianProtectionBuilderStandardTypeMemberType
    Chinese = 4  # PedestrianProtectionBuilderStandardTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PedestrianProtectionBuilderInternalBumperTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PedestrianProtectionBuilderInternalBumperType():
    """
    Settings for the type of pedestrian protection internal bumper line method to use in the study 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BumperTopPlane", "bumper top plane method"
       "BumperBeamFaces", "bumper beam faces method"
    """
    BumperTopPlane = 0  # PedestrianProtectionBuilderInternalBumperTypeMemberType
    BumperBeamFaces = 1  # PedestrianProtectionBuilderInternalBumperTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PedestrianProtectionBuilderWadMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PedestrianProtectionBuilderWad():
    """
    Settings for the start, end and boundary wrap around distance line to create 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "First", "First wrap around distance line"
       "Second", "Second wrap around distance line"
       "Third", "Third wrap around distance line"
       "Fourth", "Fourth wrap around distance line"
       "Fifth", "Fifth wrap around distance line"
       "Sixth", "Sixth wrap around distance line. Not valid for boundary"
    """
    First = 0  # PedestrianProtectionBuilderWadMemberType
    Second = 1  # PedestrianProtectionBuilderWadMemberType
    Third = 2  # PedestrianProtectionBuilderWadMemberType
    Fourth = 3  # PedestrianProtectionBuilderWadMemberType
    Fifth = 4  # PedestrianProtectionBuilderWadMemberType
    Sixth = 5  # PedestrianProtectionBuilderWadMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PedestrianProtectionBuilderFontMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PedestrianProtectionBuilderFont():
    """
    Settings for font to create the various output with 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Default", "Default Font"
       "Solid", "Solid Font"
       "Dashed", "Dashed Font"
       "Phantom", "Phantom Font"
       "Centerline", "Centerline Font"
       "Dotted", "Dotted Font"
       "LongDashed", "LongDashed Font"
       "DottedDashed", "DottedDashed Font"
    """
    Default = 0  # PedestrianProtectionBuilderFontMemberType
    Solid = 1  # PedestrianProtectionBuilderFontMemberType
    Dashed = 2  # PedestrianProtectionBuilderFontMemberType
    Phantom = 3  # PedestrianProtectionBuilderFontMemberType
    Centerline = 4  # PedestrianProtectionBuilderFontMemberType
    Dotted = 5  # PedestrianProtectionBuilderFontMemberType
    LongDashed = 6  # PedestrianProtectionBuilderFontMemberType
    DottedDashed = 7  # PedestrianProtectionBuilderFontMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PedestrianProtectionBuilderWidthMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PedestrianProtectionBuilderWidth():
    """
    Settings for width to create the various output with 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Default", "Default Width"
       "Normal", "normal Width"
       "Thick", "Thick width"
       "Thin", "Thin width"
       "One", " - "
       "Two", " - "
       "Three", " - "
       "Four", " - "
       "Five", " - "
       "Six", " - "
       "Seven", " - "
       "Eight", " - "
       "Nine", " - "
    """
    Default = -1  # PedestrianProtectionBuilderWidthMemberType
    Normal = 0  # PedestrianProtectionBuilderWidthMemberType
    Thick = 1  # PedestrianProtectionBuilderWidthMemberType
    Thin = 2  # PedestrianProtectionBuilderWidthMemberType
    One = 5  # PedestrianProtectionBuilderWidthMemberType
    Two = 6  # PedestrianProtectionBuilderWidthMemberType
    Three = 7  # PedestrianProtectionBuilderWidthMemberType
    Four = 8  # PedestrianProtectionBuilderWidthMemberType
    Five = 9  # PedestrianProtectionBuilderWidthMemberType
    Six = 10  # PedestrianProtectionBuilderWidthMemberType
    Seven = 11  # PedestrianProtectionBuilderWidthMemberType
    Eight = 12  # PedestrianProtectionBuilderWidthMemberType
    Nine = 13  # PedestrianProtectionBuilderWidthMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PedestrianProtectionBuilderTransformMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PedestrianProtectionBuilderTransformMethods():
    """
    Settings for the transform method of pedestrian protection active hood system 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Translation", "Translation method"
       "Rotation", "Rotation method"
    """
    Translation = 0  # PedestrianProtectionBuilderTransformMethodsMemberType
    Rotation = 1  # PedestrianProtectionBuilderTransformMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PedestrianProtectionBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtection` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreatePedestrianProtectionBuilder`
    
    Default values.
    
    ======================================  ==========================================
    Property                                Value
    ======================================  ==========================================
    AdultHic1000Angle.Value                 50 
    --------------------------------------  ------------------------------------------
    AdultHic1000Offset.Value (deprecated)   95 (millimeters part), 3.7 (inches part) 
    --------------------------------------  ------------------------------------------
    AdultHic1000OutputFont                  Solid 
    --------------------------------------  ------------------------------------------
    AdultHic1000OutputLayer                 0 
    --------------------------------------  ------------------------------------------
    AdultHic1000OutputWidth                 Two 
    --------------------------------------  ------------------------------------------
    AdultHic1700Angle.Value                 50 
    --------------------------------------  ------------------------------------------
    AdultHic1700Offset.Value (deprecated)   74 (millimeters part), 2.9 (inches part) 
    --------------------------------------  ------------------------------------------
    AdultHic1700OutputFont                  Solid 
    --------------------------------------  ------------------------------------------
    AdultHic1700OutputLayer                 0 
    --------------------------------------  ------------------------------------------
    AdultHic1700OutputWidth                 Two 
    --------------------------------------  ------------------------------------------
    ChildHic1000Angle.Value                 65 
    --------------------------------------  ------------------------------------------
    ChildHic1000Offset.Value (deprecated)   85 (millimeters part), 3.3 (inches part) 
    --------------------------------------  ------------------------------------------
    ChildHic1000OutputFont                  Solid 
    --------------------------------------  ------------------------------------------
    ChildHic1000OutputLayer                 0 
    --------------------------------------  ------------------------------------------
    ChildHic1000OutputWidth                 Two 
    --------------------------------------  ------------------------------------------
    ChildHic1700Angle.Value                 65 
    --------------------------------------  ------------------------------------------
    ChildHic1700Offset.Value (deprecated)   68 (millimeters part), 2.7 (inches part) 
    --------------------------------------  ------------------------------------------
    ChildHic1700OutputFont                  Solid 
    --------------------------------------  ------------------------------------------
    ChildHic1700OutputLayer                 0 
    --------------------------------------  ------------------------------------------
    ChildHic1700OutputWidth                 Two 
    --------------------------------------  ------------------------------------------
    ConstructGeometryFont                   Solid 
    --------------------------------------  ------------------------------------------
    ConstructGeometryLayer                  0 
    --------------------------------------  ------------------------------------------
    ConstructGeometryWidth                  Two 
    --------------------------------------  ------------------------------------------
    CornerBumperAngle.Value                 30 
    --------------------------------------  ------------------------------------------
    CornerBumperAngleMarginal.Value         32 
    --------------------------------------  ------------------------------------------
    CreateBasins                            1 
    --------------------------------------  ------------------------------------------
    CreateHeadImpactZones                   1 
    --------------------------------------  ------------------------------------------
    CreateImpactGrid                        1 
    --------------------------------------  ------------------------------------------
    CreateLegImpact                         1 
    --------------------------------------  ------------------------------------------
    CreateNcapCircles                       1 
    --------------------------------------  ------------------------------------------
    CreateNcapSheets                        1 
    --------------------------------------  ------------------------------------------
    CreateOffsetData                        1 
    --------------------------------------  ------------------------------------------
    CreateReferenceLines                    1 
    --------------------------------------  ------------------------------------------
    CreateWrapAroundDistanceLines           1 
    --------------------------------------  ------------------------------------------
    DisplayConstructionGeometry             0 
    --------------------------------------  ------------------------------------------
    DisplayDeletedGridPoints                0 
    --------------------------------------  ------------------------------------------
    DisplayInterferenceResult               0 
    --------------------------------------  ------------------------------------------
    FrontRefAngle.Value                     40 
    --------------------------------------  ------------------------------------------
    FrontRefAngleMarginal.Value             38 
    --------------------------------------  ------------------------------------------
    FrontRefAngleNcap.Value                 50 
    --------------------------------------  ------------------------------------------
    GridAdultFullOutputLayer                0 
    --------------------------------------  ------------------------------------------
    GridAdultPartialOutputLayer             0 
    --------------------------------------  ------------------------------------------
    GridChildFullOutputLayer                0 
    --------------------------------------  ------------------------------------------
    GridChildPartialOutputLayer             0 
    --------------------------------------  ------------------------------------------
    GridNCAP1000OutputLayer                 0 
    --------------------------------------  ------------------------------------------
    GridNCAP1350OutputLayer                 0 
    --------------------------------------  ------------------------------------------
    GridNCAP1700OutputLayer                 0 
    --------------------------------------  ------------------------------------------
    GridNCAP650OutputLayer                  0 
    --------------------------------------  ------------------------------------------
    GridOutputFont                          Solid 
    --------------------------------------  ------------------------------------------
    GridOutputWidth                         Two 
    --------------------------------------  ------------------------------------------
    HeadDiameter.Value                      165 (millimeters part), 6.5 (inches part) 
    --------------------------------------  ------------------------------------------
    HeadDiameterMarginal.Value              145 (millimeters part), 5.7 (inches part) 
    --------------------------------------  ------------------------------------------
    HingeDistance.Value                     0 (millimeters part), 0 (inches part) 
    --------------------------------------  ------------------------------------------
    InterferenceFont                        Solid 
    --------------------------------------  ------------------------------------------
    InterferenceLayer                       0 
    --------------------------------------  ------------------------------------------
    InterferenceWidth                       Two 
    --------------------------------------  ------------------------------------------
    LegZonesOutputFont                      Solid 
    --------------------------------------  ------------------------------------------
    LegZonesOutputLayer                     0 
    --------------------------------------  ------------------------------------------
    LegZonesOutputWidth                     Two 
    --------------------------------------  ------------------------------------------
    LowerBumperAngle.Value                  20 
    --------------------------------------  ------------------------------------------
    MirrorFaces (deprecated)                0 
    --------------------------------------  ------------------------------------------
    PopupDistance.Value                     120 (millimeters part), 4.7 (inches part) 
    --------------------------------------  ------------------------------------------
    ProcessActiveHood                       0 
    --------------------------------------  ------------------------------------------
    ReferenceOutputFont                     Solid 
    --------------------------------------  ------------------------------------------
    ReferenceOutputLayer                    0 
    --------------------------------------  ------------------------------------------
    ReferenceOutputWidth                    Two 
    --------------------------------------  ------------------------------------------
    RodDiameter.Value                       50 (millimeters part), 2 (inches part) 
    --------------------------------------  ------------------------------------------
    SideRefAngle.Value                      45 
    --------------------------------------  ------------------------------------------
    SideRefAngleMarginal.Value              47 
    --------------------------------------  ------------------------------------------
    SideRefAngleNcap.Value                  45 
    --------------------------------------  ------------------------------------------
    Standard                                NorthAmerican 
    --------------------------------------  ------------------------------------------
    StepDistance.Value                      50 (millimeters part), 2 (inches part) 
    --------------------------------------  ------------------------------------------
    TransformMethod                         Translation 
    --------------------------------------  ------------------------------------------
    UpperBumperAngle.Value                  25 
    --------------------------------------  ------------------------------------------
    UseMarginal                             0 
    --------------------------------------  ------------------------------------------
    WadBoundaryValue                        Fourth 
    --------------------------------------  ------------------------------------------
    WadEndValue                             Sixth 
    --------------------------------------  ------------------------------------------
    WadOutputFont                           Solid 
    --------------------------------------  ------------------------------------------
    WadOutputLayer                          0 
    --------------------------------------  ------------------------------------------
    WadOutputWidth                          Two 
    --------------------------------------  ------------------------------------------
    WadStartValue                           First 
    ======================================  ==========================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Settings for the type of pedestrian protection impact study 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "HeadAndLegImpact", "Head and leg impact study"
           "HeadImpact", "Head impact study only"
           "LegImpact", "Leg impact study only"
        """
        HeadAndLegImpact = 0  # PedestrianProtectionBuilderTypesMemberType
        HeadImpact = 1  # PedestrianProtectionBuilderTypesMemberType
        LegImpact = 2  # PedestrianProtectionBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StandardType():
        """
        Settings for the type of pedestrian protection standard to use in the study 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NorthAmerican", "North american standard"
           "European", "European standard"
           "Japanese", "Japanese standard"
           "Korean", "Korean standard"
           "Chinese", "Chinese standard"
        """
        NorthAmerican = 0  # PedestrianProtectionBuilderStandardTypeMemberType
        European = 1  # PedestrianProtectionBuilderStandardTypeMemberType
        Japanese = 2  # PedestrianProtectionBuilderStandardTypeMemberType
        Korean = 3  # PedestrianProtectionBuilderStandardTypeMemberType
        Chinese = 4  # PedestrianProtectionBuilderStandardTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InternalBumperType():
        """
        Settings for the type of pedestrian protection internal bumper line method to use in the study 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BumperTopPlane", "bumper top plane method"
           "BumperBeamFaces", "bumper beam faces method"
        """
        BumperTopPlane = 0  # PedestrianProtectionBuilderInternalBumperTypeMemberType
        BumperBeamFaces = 1  # PedestrianProtectionBuilderInternalBumperTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Wad():
        """
        Settings for the start, end and boundary wrap around distance line to create 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "First", "First wrap around distance line"
           "Second", "Second wrap around distance line"
           "Third", "Third wrap around distance line"
           "Fourth", "Fourth wrap around distance line"
           "Fifth", "Fifth wrap around distance line"
           "Sixth", "Sixth wrap around distance line. Not valid for boundary"
        """
        First = 0  # PedestrianProtectionBuilderWadMemberType
        Second = 1  # PedestrianProtectionBuilderWadMemberType
        Third = 2  # PedestrianProtectionBuilderWadMemberType
        Fourth = 3  # PedestrianProtectionBuilderWadMemberType
        Fifth = 4  # PedestrianProtectionBuilderWadMemberType
        Sixth = 5  # PedestrianProtectionBuilderWadMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Font():
        """
        Settings for font to create the various output with 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Default", "Default Font"
           "Solid", "Solid Font"
           "Dashed", "Dashed Font"
           "Phantom", "Phantom Font"
           "Centerline", "Centerline Font"
           "Dotted", "Dotted Font"
           "LongDashed", "LongDashed Font"
           "DottedDashed", "DottedDashed Font"
        """
        Default = 0  # PedestrianProtectionBuilderFontMemberType
        Solid = 1  # PedestrianProtectionBuilderFontMemberType
        Dashed = 2  # PedestrianProtectionBuilderFontMemberType
        Phantom = 3  # PedestrianProtectionBuilderFontMemberType
        Centerline = 4  # PedestrianProtectionBuilderFontMemberType
        Dotted = 5  # PedestrianProtectionBuilderFontMemberType
        LongDashed = 6  # PedestrianProtectionBuilderFontMemberType
        DottedDashed = 7  # PedestrianProtectionBuilderFontMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Width():
        """
        Settings for width to create the various output with 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Default", "Default Width"
           "Normal", "normal Width"
           "Thick", "Thick width"
           "Thin", "Thin width"
           "One", " - "
           "Two", " - "
           "Three", " - "
           "Four", " - "
           "Five", " - "
           "Six", " - "
           "Seven", " - "
           "Eight", " - "
           "Nine", " - "
        """
        Default = -1  # PedestrianProtectionBuilderWidthMemberType
        Normal = 0  # PedestrianProtectionBuilderWidthMemberType
        Thick = 1  # PedestrianProtectionBuilderWidthMemberType
        Thin = 2  # PedestrianProtectionBuilderWidthMemberType
        One = 5  # PedestrianProtectionBuilderWidthMemberType
        Two = 6  # PedestrianProtectionBuilderWidthMemberType
        Three = 7  # PedestrianProtectionBuilderWidthMemberType
        Four = 8  # PedestrianProtectionBuilderWidthMemberType
        Five = 9  # PedestrianProtectionBuilderWidthMemberType
        Six = 10  # PedestrianProtectionBuilderWidthMemberType
        Seven = 11  # PedestrianProtectionBuilderWidthMemberType
        Eight = 12  # PedestrianProtectionBuilderWidthMemberType
        Nine = 13  # PedestrianProtectionBuilderWidthMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TransformMethods():
        """
        Settings for the transform method of pedestrian protection active hood system 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Translation", "Translation method"
           "Rotation", "Rotation method"
        """
        Translation = 0  # PedestrianProtectionBuilderTransformMethodsMemberType
        Rotation = 1  # PedestrianProtectionBuilderTransformMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    APillar: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the collector containing the faces and facetted bodies of the A-Pillar 
    
    <hr>
    
    Getter Method
    
    Signature ``APillar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    AdultHic1000Angle: NXOpen.Expression = ...
    """
    Returns  the angle to translate the adult HIC (Head Injury Criterion) 1000 impact sheet and grid 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1000Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AdultHic1000Offset: NXOpen.Expression = ...
    """
    Returns  the distance to translate the adult HIC (Head Injury Criterion) 1000 impact sheet and grid 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1000Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       The offset value will be retrieved from the physical material property.
    
    License requirements: None.
    """
    AdultHic1000OutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the adult HIC (Head Injury Criterion) 1000 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1000OutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdultHic1000OutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AdultHic1000OutputFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the adult HIC (Head Injury Criterion) 1000 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1000OutputFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdultHic1000OutputFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AdultHic1000OutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the adult HIC (Head Injury Criterion) 1000 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1000OutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdultHic1000OutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AdultHic1000OutputWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the adult HIC (Head Injury Criterion) 1000 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1000OutputWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdultHic1000OutputWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AdultHic1700Angle: NXOpen.Expression = ...
    """
    Returns  the angle to translate the adult HIC (Head Injury Criterion) 1700 impact sheet and grid 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1700Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AdultHic1700Offset: NXOpen.Expression = ...
    """
    Returns  the distance to translate the adult HIC (Head Injury Criterion) 1700 impact sheet and grid 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1700Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       The offset value will be retrieved from the physical material property.
    
    License requirements: None.
    """
    AdultHic1700OutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the adult HIC (Head Injury Criterion) 1700 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1700OutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdultHic1700OutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AdultHic1700OutputFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the adult HIC (Head Injury Criterion) 1700 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1700OutputFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdultHic1700OutputFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AdultHic1700OutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the adult HIC (Head Injury Criterion) 1700 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1700OutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdultHic1700OutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    AdultHic1700OutputWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the adult HIC (Head Injury Criterion) 1700 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``AdultHic1700OutputWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdultHic1700OutputWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BlackoutPointsColor: NXOpen.NXColor = ...
    """
    Returns or sets  the headform blackout zone points color of the European NCAP (New Car Assessment Program) grid 
    
    <hr>
    
    Getter Method
    
    Signature ``BlackoutPointsColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlackoutPointsColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BlackoutZone: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the collector containing the edge of the windshield blackout zone 
    
    <hr>
    
    Getter Method
    
    Signature ``BlackoutZone`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    BonnetTop: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the collector containing the faces of the bonnet 
    
    <hr>
    
    Getter Method
    
    Signature ``BonnetTop`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BonnetTopNotMirrored: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the collector containing the faces of the bonnet that are not to be mirrored 
    
    <hr>
    
    Getter Method
    
    Signature ``BonnetTopNotMirrored`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BumperBeam: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the faces and facetted bodies of the bumper beam 
    
    <hr>
    
    Getter Method
    
    Signature ``BumperBeam`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    BumperPlane: NXOpen.Plane = ...
    """
    Returns or sets  the bumper plane 
    
    <hr>
    
    Getter Method
    
    Signature ``BumperPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BumperPlane`` 
    
    :param bumperPlane: 
    :type bumperPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ChildHic1000Angle: NXOpen.Expression = ...
    """
    Returns  the angle to translate the child HIC (Head Injury Criterion) 1000 impact sheet and grid 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1000Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ChildHic1000Offset: NXOpen.Expression = ...
    """
    Returns  the distance to translate the child HIC (Head Injury Criterion) 1000 impact sheet and grid 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1000Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       The offset value will be retrieved from the physical material property.
    
    License requirements: None.
    """
    ChildHic1000OutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the child HIC (Head Injury Criterion) 1000 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1000OutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChildHic1000OutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ChildHic1000OutputFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the child HIC (Head Injury Criterion) 1000 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1000OutputFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChildHic1000OutputFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ChildHic1000OutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the child HIC (Head Injury Criterion) 1000 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1000OutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChildHic1000OutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ChildHic1000OutputWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the child HIC (Head Injury Criterion) 1000 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1000OutputWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChildHic1000OutputWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ChildHic1700Angle: NXOpen.Expression = ...
    """
    Returns  the angle to translate the child HIC (Head Injury Criterion) 1700 impact sheet and grid 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1700Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ChildHic1700Offset: NXOpen.Expression = ...
    """
    Returns  the distance to translate the child HIC (Head Injury Criterion) 1700 impact sheet and grid 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1700Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       The offset value will be retrieved from the physical material property.
    
    License requirements: None.
    """
    ChildHic1700OutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the child HIC (Head Injury Criterion) 1700 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1700OutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChildHic1700OutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ChildHic1700OutputFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the child HIC (Head Injury Criterion) 1700 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1700OutputFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChildHic1700OutputFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ChildHic1700OutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the child HIC (Head Injury Criterion) 1700 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1700OutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChildHic1700OutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ChildHic1700OutputWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the child HIC (Head Injury Criterion) 1700 impact sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ChildHic1700OutputWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChildHic1700OutputWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Component: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the list of the components to check interference with the impact sheets 
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ConstructGeometryColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the various construction curves 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstructGeometryColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConstructGeometryColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ConstructGeometryFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the various construction curves 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstructGeometryFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConstructGeometryFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ConstructGeometryLayer: int = ...
    """
    Returns or sets  the layer that will be used for the various construction curves 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstructGeometryLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConstructGeometryLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ConstructGeometryWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the various construction curves 
    
    <hr>
    
    Getter Method
    
    Signature ``ConstructGeometryWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConstructGeometryWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CornerBumperAngle: NXOpen.Expression = ...
    """
    Returns  the angle that is used to determine the corner of the bumper 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerBumperAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CornerBumperAngleMarginal: NXOpen.Expression = ...
    """
    Returns  the marginal angle that is used to determine the corner of the bumper 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerBumperAngleMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CornerBumperAngleSecondMarginal: NXOpen.Expression = ...
    """
    Returns  the second marginal angle that is used to determine the corner of the bumper 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerBumperAngleSecondMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    CreateBasins: bool = ...
    """
    Returns or sets  the setting to indicate if the basin curves should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateBasins`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateBasins`` 
    
    :param createBasins: 
    :type createBasins: bool 
    
    .. versionadded:: NX10.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateHeadImpactZones: bool = ...
    """
    Returns or sets  the setting to indicate if the adult and child head impact sheets should be created, 
    true they will be created, false they will not be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateHeadImpactZones`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateHeadImpactZones`` 
    
    :param headImpactZones: 
    :type headImpactZones: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateImpactGrid: bool = ...
    """
    Returns or sets  the setting to indicate if the impact grid should be created, 
    true it will be created, false it will not be created 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateImpactGrid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateImpactGrid`` 
    
    :param createImpactGrid: 
    :type createImpactGrid: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateLegImpact: bool = ...
    """
    Returns or sets  the setting to indicate if the leg impact curves should be created, 
    true they will be created, false they will not be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateLegImpact`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateLegImpact`` 
    
    :param legImpact: 
    :type legImpact: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateNcapCircles: bool = ...
    """
    Returns or sets  the setting to indicate if the ncap circles should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateNcapCircles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateNcapCircles`` 
    
    :param createNcapCircles: 
    :type createNcapCircles: bool 
    
    .. versionadded:: NX10.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateNcapSheets: bool = ...
    """
    Returns or sets  the setting to indicate if the ncap sheets should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateNcapSheets`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateNcapSheets`` 
    
    :param createNcapSheets: 
    :type createNcapSheets: bool 
    
    .. versionadded:: NX10.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateOffsetData: bool = ...
    """
    Returns or sets  the setting to indicate if the offset data should be created 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateOffsetData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateOffsetData`` 
    
    :param createOffsetData: 
    :type createOffsetData: bool 
    
    .. versionadded:: NX10.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateReferenceLines: bool = ...
    """
    Returns or sets  the setting to indicate if the reference lines should be created, 
    true they will be created, false they will not be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateReferenceLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateReferenceLines`` 
    
    :param referenceLines: 
    :type referenceLines: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CreateWrapAroundDistanceLines: bool = ...
    """
    Returns or sets  the setting to indicate if the wrap around distance lines should be created, 
    true they will be created, false they will not be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateWrapAroundDistanceLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateWrapAroundDistanceLines`` 
    
    :param wad: 
    :type wad: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DeletedPointsColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the headform deleted points of the European NCAP (New Car Assessment Program) grid 
    
    <hr>
    
    Getter Method
    
    Signature ``DeletedPointsColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeletedPointsColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DisplayConstructionGeometry: bool = ...
    """
    Returns or sets  the setting to indicate if the construction geometry should be created, 
    true they will be created, false they will not be created 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayConstructionGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayConstructionGeometry`` 
    
    :param displayConstructionGeometry: 
    :type displayConstructionGeometry: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DisplayDeletedGridPoints: bool = ...
    """
    Returns or sets  the setting to indicate if the deleted grid points should be displayed, 
    true they will be displayed, false they will not be displayed 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayDeletedGridPoints`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayDeletedGridPoints`` 
    
    :param displayDeletedGridPoints: 
    :type displayDeletedGridPoints: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DisplayInterferenceResult: bool = ...
    """
    Returns or sets  the setting to indicate if the interference curves should be created, 
    true they will be created, false they will not be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayInterferenceResult`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayInterferenceResult`` 
    
    :param displayInterferenceResult: 
    :type displayInterferenceResult: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontRefAngle: NXOpen.Expression = ...
    """
    Returns  the angle that is used to determine the front reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontRefAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FrontRefAngleMarginal: NXOpen.Expression = ...
    """
    Returns  the marginal angle that is used to determine the front reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontRefAngleMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FrontRefAngleNcap: NXOpen.Expression = ...
    """
    Returns  the European NCAP (New Car Assessment Program) angle that is used to determine the front reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontRefAngleNcap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FrontRefAngleNcapMarginal: NXOpen.Expression = ...
    """
    Returns  the European NCAP (New Car Assessment Program) marginal angle that is used to determine the front reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontRefAngleNcapMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FrontReferenceAngleNcapSecondMarginal: NXOpen.Expression = ...
    """
    Returns  the European NCAP (New Car Assessment Program) second marginal angle that is used to determine the front reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontReferenceAngleNcapSecondMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    FrontReferenceAngleSecondMarginal: NXOpen.Expression = ...
    """
    Returns  the second marginal angle that is used to determine the front reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontReferenceAngleSecondMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    GridAdultFullOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the NCAP (New Car Assessment Program) adult full grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridAdultFullOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridAdultFullOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridAdultPartialOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the NCAP (New Car Assessment Program) adult partial grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridAdultPartialOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridAdultPartialOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridChildFullOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the NCAP (New Car Assessment Program) child full grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridChildFullOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridChildFullOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridChildPartialOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the NCAP (New Car Assessment Program) child partial grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridChildPartialOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridChildPartialOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridFailColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the failing areas of the NCAP (New Car Assessment Program) grid 
    
    <hr>
    
    Getter Method
    
    Signature ``GridFailColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridFailColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNCAP1000OutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the European NCAP (New Car Assessment Program) 1000 offset grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNCAP1000OutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridNCAP1000OutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNCAP1000OutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the European NCAP (New Car Assessment Program) 1000 offset grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNCAP1000OutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridNCAP1000OutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNCAP1350OutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the European NCAP (New Car Assessment Program) 1350 offset grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNCAP1350OutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridNCAP1350OutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNCAP1350OutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the European NCAP (New Car Assessment Program) 1350 offset grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNCAP1350OutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridNCAP1350OutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNCAP1700OutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the European NCAP (New Car Assessment Program) 1700 offset grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNCAP1700OutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridNCAP1700OutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNCAP1700OutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the European NCAP (New Car Assessment Program) 1700 offset grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNCAP1700OutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridNCAP1700OutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNCAP650OutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the European NCAP (New Car Assessment Program) 650 offset grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNCAP650OutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridNCAP650OutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNCAP650OutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the European NCAP (New Car Assessment Program) 650 offset grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNCAP650OutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridNCAP650OutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNCAPUntranslatedOutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the European NCAP (New Car Assessment Program) untranslated grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNCAPUntranslatedOutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridNCAPUntranslatedOutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridNcap1000OffsetScore: float = ...
    """
    Returns  the score value is used to check NCAP 1000 offset interference 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNcap1000OffsetScore`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    GridNcap1350OffsetScore: float = ...
    """
    Returns  the score value is used to check NCAP 1350 offset interference 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNcap1350OffsetScore`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    GridNcap1700OffsetScore: float = ...
    """
    Returns  the score value is used to check NCAP 1700 offset interference 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNcap1700OffsetScore`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    GridNcap650OffsetScore: float = ...
    """
    Returns  the score value is used to check NCAP 650 offset interference 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNcap650OffsetScore`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    GridNcapUntranslatedScore: float = ...
    """
    Returns  the score value is used to check NCAP untranslated interference 
    
    <hr>
    
    Getter Method
    
    Signature ``GridNcapUntranslatedScore`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    GridOutputFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the European NCAP (New Car Assessment Program) grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridOutputFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridOutputFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridOutputWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the NCAP (New Car Assessment Program) grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridOutputWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridOutputWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridPassColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the passing areas of the NCAP (New Car Assessment Program) grid 
    
    <hr>
    
    Getter Method
    
    Signature ``GridPassColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridPassColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridPointsColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the headform grid points of the European NCAP (New Car Assessment Program) grid 
    
    <hr>
    
    Getter Method
    
    Signature ``GridPointsColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridPointsColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridUntranslatedOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the NCAP (New Car Assessment Program) untranslated grid sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``GridUntranslatedOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridUntranslatedOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    GridWarningColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the warning areas of the NCAP (New Car Assessment Program) grid 
    
    <hr>
    
    Getter Method
    
    Signature ``GridWarningColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridWarningColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HeadDiameter: NXOpen.Expression = ...
    """
    Returns  the diameter of the headform 
    
    <hr>
    
    Getter Method
    
    Signature ``HeadDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    HeadDiameterMarginal: NXOpen.Expression = ...
    """
    Returns  the marginal diameter of the headform 
    
    <hr>
    
    Getter Method
    
    Signature ``HeadDiameterMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    HingeDistance: NXOpen.Expression = ...
    """
    Returns  the distance to move the reference point of the active hood 
    
    <hr>
    
    Getter Method
    
    Signature ``HingeDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HingePoint: NXOpen.Point = ...
    """
    Returns or sets  the point about which to rotate the active hood 
    
    <hr>
    
    Getter Method
    
    Signature ``HingePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HingePoint`` 
    
    :param hingePoint: 
    :type hingePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Hood: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the collector containing the faces of the active hood 
    
    <hr>
    
    Getter Method
    
    Signature ``Hood`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    InterferenceColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the interference curves 
    
    <hr>
    
    Getter Method
    
    Signature ``InterferenceColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferenceColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    InterferenceFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the interference curves 
    
    <hr>
    
    Getter Method
    
    Signature ``InterferenceFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferenceFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    InterferenceLayer: int = ...
    """
    Returns or sets  the layer that will be used for the interference curves 
    
    <hr>
    
    Getter Method
    
    Signature ``InterferenceLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferenceLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    InterferenceWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the interference curves 
    
    <hr>
    
    Getter Method
    
    Signature ``InterferenceWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferenceWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    InternalBumperLineMethod: PedestrianProtectionBuilderInternalBumperType = ...
    """
    Returns or sets  the method that should be used to create the internal bumper reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``InternalBumperLineMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderInternalBumperType` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InternalBumperLineMethod`` 
    
    :param bumperMethod: 
    :type bumperMethod: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderInternalBumperType` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    IpFaces: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the collector containing the faces of the Instrument Panel 
    
    <hr>
    
    Getter Method
    
    Signature ``IpFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    LegImpactCurveOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the leg impact curve 
    
    <hr>
    
    Getter Method
    
    Signature ``LegImpactCurveOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LegImpactCurveOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LegSpreadsheet: str = ...
    """
    Returns or sets  the leg impact spreadsheet file 
    
    <hr>
    
    Getter Method
    
    Signature ``LegSpreadsheet`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LegSpreadsheet`` 
    
    :param legSpreadsheet: 
    :type legSpreadsheet: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LegZonesOutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the leg impact zone lines 
    
    <hr>
    
    Getter Method
    
    Signature ``LegZonesOutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LegZonesOutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LegZonesOutputFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the leg impact zone lines 
    
    <hr>
    
    Getter Method
    
    Signature ``LegZonesOutputFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LegZonesOutputFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LegZonesOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the leg impact zone lines 
    
    <hr>
    
    Getter Method
    
    Signature ``LegZonesOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LegZonesOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LegZonesOutputWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the leg impact zone lines 
    
    <hr>
    
    Getter Method
    
    Signature ``LegZonesOutputWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LegZonesOutputWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Loading: str = ...
    """
    Returns or sets  the loading name from base data 
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LowerBumperAngle: NXOpen.Expression = ...
    """
    Returns  the angle that is used to determine the lower limit of the bumper 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerBumperAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MirrorFaces: bool = ...
    """
    Returns or sets  the setting to indicate if the bonnet, windshield and hood faces should be mirrored
    before performing the analysis,
    true they will be mirrored, false they will not be mirrored.  
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorFaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       This API is no longer used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MirrorFaces`` 
    
    :param mirrorFaces: 
    :type mirrorFaces: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX9.0.0
       This API is no longer used.
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Plane: NXOpen.Plane = ...
    """
    Returns or sets  the ground plane 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PopupDistance: NXOpen.Expression = ...
    """
    Returns  the distance to move the reference point of the active hood 
    
    <hr>
    
    Getter Method
    
    Signature ``PopupDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PopupPoint: NXOpen.Point = ...
    """
    Returns or sets  the reference point of the active hood.  
    
    At this point the active hood will be rotated
    about the hinge point so that this point is moved the popup distance in the +Z direction 
    
    <hr>
    
    Getter Method
    
    Signature ``PopupPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PopupPoint`` 
    
    :param popupPoint: 
    :type popupPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ProcessActiveHood: bool = ...
    """
    Returns or sets  the setting to indicate if the active hood should be analyzed, 
    true it will be used, false it will not be used 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessActiveHood`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessActiveHood`` 
    
    :param processActiveHood: 
    :type processActiveHood: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearReferenceStepDistance: NXOpen.Expression = ...
    """
    Returns  the distance between rear reference sections used in the analysis 
    
    <hr>
    
    Getter Method
    
    Signature ``RearReferenceStepDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ReferenceOutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the reference lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceOutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReferenceOutputFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the reference lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOutputFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceOutputFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReferenceOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the reference lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReferenceOutputWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the reference lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceOutputWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceOutputWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RodDiameter: NXOpen.Expression = ...
    """
    Returns  the testing rod diameter of the leg impact 
    
    <hr>
    
    Getter Method
    
    Signature ``RodDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SideRefAngle: NXOpen.Expression = ...
    """
    Returns  the angle that is used to determine the side reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``SideRefAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SideRefAngleMarginal: NXOpen.Expression = ...
    """
    Returns  the marginal angle that is used to determine the side reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``SideRefAngleMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SideRefAngleNcap: NXOpen.Expression = ...
    """
    Returns  the European NCAP (New Car Assessment Program) angle that is used to determine the side reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``SideRefAngleNcap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SideRefAngleNcapMarginal: NXOpen.Expression = ...
    """
    Returns  the European NCAP (New Car Assessment Program) marginal angle that is used to determine the side reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``SideRefAngleNcapMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SideReferenceAngleNcapSecondMarginal: NXOpen.Expression = ...
    """
    Returns  the European NCAP (New Car Assessment Program) second marginal angle that is used to determine the side reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``SideReferenceAngleNcapSecondMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SideReferenceAngleSecondMarginal: NXOpen.Expression = ...
    """
    Returns  the second marginal angle that is used to determine the side reference line 
    
    <hr>
    
    Getter Method
    
    Signature ``SideReferenceAngleSecondMarginal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Standard: PedestrianProtectionBuilderStandardType = ...
    """
    Returns or sets  the standard that should be used in the analysis 
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderStandardType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param setStandard: 
    :type setStandard: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderStandardType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    StepDistance: NXOpen.Expression = ...
    """
    Returns  the distance between sections used in the analysis 
    
    <hr>
    
    Getter Method
    
    Signature ``StepDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TransformMethod: PedestrianProtectionBuilderTransformMethods = ...
    """
    Returns or sets  the transform method that should be used in active hood system 
    
    <hr>
    
    Getter Method
    
    Signature ``TransformMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderTransformMethods` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransformMethod`` 
    
    :param transformMethod: 
    :type transformMethod: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderTransformMethods` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Type: PedestrianProtectionBuilderTypes = ...
    """
    Returns or sets  the type of impact study to perform 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UpperBumperAngle: NXOpen.Expression = ...
    """
    Returns  the angle that is used to determine the upper limit of the bumper 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperBumperAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    UpperLegPositions: NXOpen.Section = ...
    """
    Returns  the upper leg impact locations.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLegPositions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UpperLegZonesOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the upper leg impact zone 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLegZonesOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperLegZonesOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseLoadingSpecifiedByStandard: bool = ...
    """
    Returns or sets  the setting to indicate whether the loading is specified by standard 
    
    <hr>
    
    Getter Method
    
    Signature ``UseLoadingSpecifiedByStandard`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseLoadingSpecifiedByStandard`` 
    
    :param useLoadingSpecifiedByStandard: 
    :type useLoadingSpecifiedByStandard: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseMarginal: bool = ...
    """
    Returns or sets  the setting to indicate if the marginal values should be used when creating the impact zone, 
    true they will be used, false they will not be used 
    
    <hr>
    
    Getter Method
    
    Signature ``UseMarginal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseMarginal`` 
    
    :param useMarginal: 
    :type useMarginal: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseWindshieldEdge: bool = ...
    """
    Returns or sets  the setting to indicate the blackout zone edge is the windshield edge 
    
    <hr>
    
    Getter Method
    
    Signature ``UseWindshieldEdge`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseWindshieldEdge`` 
    
    :param useWindshieldEdge: 
    :type useWindshieldEdge: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WadBoundaryValue: PedestrianProtectionBuilderWad = ...
    """
    Returns or sets  the wrap around distance line to use as the boundary between the adult and child zones 
    
    <hr>
    
    Getter Method
    
    Signature ``WadBoundaryValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWad` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WadBoundaryValue`` 
    
    :param wadboundaryenum: 
    :type wadboundaryenum: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWad` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WadEndValue: PedestrianProtectionBuilderWad = ...
    """
    Returns or sets  the last wrap around distance line to create 
    
    <hr>
    
    Getter Method
    
    Signature ``WadEndValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWad` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WadEndValue`` 
    
    :param wadendenum: 
    :type wadendenum: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWad` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WadOutputColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color that will be used for the wrap around distance lines 
    
    <hr>
    
    Getter Method
    
    Signature ``WadOutputColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WadOutputColor`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WadOutputFont: PedestrianProtectionBuilderFont = ...
    """
    Returns or sets  the font that will be used for the wrap around distance lines 
    
    <hr>
    
    Getter Method
    
    Signature ``WadOutputFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WadOutputFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderFont` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WadOutputLayer: int = ...
    """
    Returns or sets  the layer that will be used for the wrap around distance lines 
    
    <hr>
    
    Getter Method
    
    Signature ``WadOutputLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WadOutputLayer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WadOutputWidth: PedestrianProtectionBuilderWidth = ...
    """
    Returns or sets  the line width that will be used for the wrap around distance lines 
    
    <hr>
    
    Getter Method
    
    Signature ``WadOutputWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WadOutputWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWidth` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WadStartValue: PedestrianProtectionBuilderWad = ...
    """
    Returns or sets  the first wrap around distance line to create 
    
    <hr>
    
    Getter Method
    
    Signature ``WadStartValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWad` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WadStartValue`` 
    
    :param wadstartenum: 
    :type wadstartenum: :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilderWad` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Windshield: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the collector containing the faces of the windshield 
    
    <hr>
    
    Getter Method
    
    Signature ``Windshield`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PedestrianProtectionBuilder = ...  # unknown typename


class HeadImpactOPillar(NXOpen.Features.BodyFeature):
    """
    Represents a head impact side rail feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOPillarBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpactOPillar = ...  # unknown typename


class HeadImpactAPillarBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactApillarBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Initialize(self, parent: HeadImpactBuilder) -> None:
        """
        The A Pillar initialize method.  
        
        Signature ``Initialize(parent)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Geometry: HeadImpactAPillarWizardBuilder = ...
    """
    Returns  the A Pillar Geometry builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarWizardBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarWizardBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Parameters: HeadImpactAPillarDetailBuilder = ...
    """
    Returns  the A Pillar Parameters builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarDetailBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarDetailBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactAPillarBuilder = ...  # unknown typename


class HeadImpactUpperRoof(NXOpen.Features.BodyFeature):
    """
    Represents a head impact upper roof feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactUpperRoofBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpactUpperRoof = ...  # unknown typename


class HeadImpactAPillar(NXOpen.Features.BodyFeature):
    """
    Represents a head impact a-pillar feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactAPillarBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpactAPillar = ...  # unknown typename


class InnerAngleBuilderRequirementsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InnerAngleBuilderRequirementsControlType():
    """
    Represents the requirements control types to define the inner angle. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", " - "
       "UserDefined", " - "
    """
    StandardDriven = 0  # InnerAngleBuilderRequirementsControlTypeMemberType
    UserDefined = 1  # InnerAngleBuilderRequirementsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InnerAngleBuilderWheelSizeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InnerAngleBuilderWheelSizeType():
    """
    Represents the wheel size types to calculate inner angle output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StaticRadius", " - "
       "Diameter", " - "
    """
    StaticRadius = 0  # InnerAngleBuilderWheelSizeTypeMemberType
    Diameter = 1  # InnerAngleBuilderWheelSizeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InnerAngleBuilderCalculationMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InnerAngleBuilderCalculationMethodType():
    """
    Represents the calculation method types to calculate inner angle output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circular", " - "
       "Interpolated", " - "
    """
    Circular = 0  # InnerAngleBuilderCalculationMethodTypeMemberType
    Interpolated = 1  # InnerAngleBuilderCalculationMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InnerAngleBuilderVisualizationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InnerAngleBuilderVisualizationType():
    """
    Represents the visualization types of the output. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", " - "
       "Surface", " - "
       "CurveandSurface", " - "
    """
    Curve = 0  # InnerAngleBuilderVisualizationTypeMemberType
    Surface = 1  # InnerAngleBuilderVisualizationTypeMemberType
    CurveandSurface = 2  # InnerAngleBuilderVisualizationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InnerAngleBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.InnerAngle` builder,    
    used to create or edit inner angle feature.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateInnerAngleBuilder`
    
    Default values.
    
    ========================  ===============
    Property                  Value
    ========================  ===============
    CalculationMethod         Circular 
    ------------------------  ---------------
    InnerAngle.Value          14 
    ------------------------  ---------------
    RequirementsControl       StandardDriven 
    ------------------------  ---------------
    ShowDistanceMeasurement   0 
    ------------------------  ---------------
    Visualization             Curve 
    ------------------------  ---------------
    WheelSize                 StaticRadius 
    ========================  ===============
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlType():
        """
        Represents the requirements control types to define the inner angle. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", " - "
           "UserDefined", " - "
        """
        StandardDriven = 0  # InnerAngleBuilderRequirementsControlTypeMemberType
        UserDefined = 1  # InnerAngleBuilderRequirementsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WheelSizeType():
        """
        Represents the wheel size types to calculate inner angle output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StaticRadius", " - "
           "Diameter", " - "
        """
        StaticRadius = 0  # InnerAngleBuilderWheelSizeTypeMemberType
        Diameter = 1  # InnerAngleBuilderWheelSizeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CalculationMethodType():
        """
        Represents the calculation method types to calculate inner angle output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circular", " - "
           "Interpolated", " - "
        """
        Circular = 0  # InnerAngleBuilderCalculationMethodTypeMemberType
        Interpolated = 1  # InnerAngleBuilderCalculationMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VisualizationType():
        """
        Represents the visualization types of the output. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", " - "
           "Surface", " - "
           "CurveandSurface", " - "
        """
        Curve = 0  # InnerAngleBuilderVisualizationTypeMemberType
        Surface = 1  # InnerAngleBuilderVisualizationTypeMemberType
        CurveandSurface = 2  # InnerAngleBuilderVisualizationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CalculationMethod: InnerAngleBuilderCalculationMethodType = ...
    """
    Returns or sets  the calculation method type which determines the calculation method in the inner angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilderCalculationMethodType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationMethod`` 
    
    :param calculationMethod: 
    :type calculationMethod: :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilderCalculationMethodType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CarBodyFaces: NXOpen.ScCollector = ...
    """
    Returns  the selected car body faces for measurement.  
    
    <hr>
    
    Getter Method
    
    Signature ``CarBodyFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    InnerAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the inner angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``InnerAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Loading: str = ...
    """
    Returns or sets  the loading used in the inner angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Loading`` 
    
    :param loading: 
    :type loading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RequirementsControl: InnerAngleBuilderRequirementsControlType = ...
    """
    Returns or sets  the requirements control for standard driven or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirementsControl: 
    :type requirementsControl: :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilderRequirementsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ShowDistanceMeasurement: bool = ...
    """
    Returns or sets  
    the value to show distance measurement.  
    
    True will show the distance measurement. False will hide the distance measurement.
    
    <hr>
    
    Getter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowDistanceMeasurement`` 
    
    :param showDistanceMeasurement: 
    :type showDistanceMeasurement: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Standard: str = ...
    """
    Returns or sets  the standard used to define the inner angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Visualization: InnerAngleBuilderVisualizationType = ...
    """
    Returns or sets  
    the visualization type of the inner angle output.  
    
    See :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilderVisualizationType` for valid values. 
    
    <hr>
    
    Getter Method
    
    Signature ``Visualization`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Visualization`` 
    
    :param visualization: 
    :type visualization: :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilderVisualizationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    WheelSize: InnerAngleBuilderWheelSizeType = ...
    """
    Returns or sets  the wheel size type which determines the size of the wheels in the inner angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``WheelSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilderWheelSizeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WheelSize`` 
    
    :param wheelSize: 
    :type wheelSize: :py:class:`NXOpen.Features.VehicleDesign.InnerAngleBuilderWheelSizeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: InnerAngleBuilder = ...  # unknown typename


class CloseRangeDemoCylinderListItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[CloseRangeDemoCylinderListItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: CloseRangeDemoCylinderListItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: CloseRangeDemoCylinderListItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> CloseRangeDemoCylinderListItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: CloseRangeDemoCylinderListItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: CloseRangeDemoCylinderListItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[CloseRangeDemoCylinderListItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[CloseRangeDemoCylinderListItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: CloseRangeDemoCylinderListItemBuilder, object2: CloseRangeDemoCylinderListItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: CloseRangeDemoCylinderListItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeDemoCylinderListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: CloseRangeDemoCylinderListItemBuilderList = ...  # unknown typename


class HeadImpactRearHeaderBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeaderBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactRearHeaderBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Initialize(self, parent: HeadImpactBuilder) -> None:
        """
        The Rear Header initialize method.  
        
        Signature ``Initialize(parent)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Geometry: HeadImpactRearHeaderWizardBuilder = ...
    """
    Returns  the Rear Header Geometry builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeaderWizardBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeaderWizardBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Parameters: HeadImpactRearHeaderDetailBuilder = ...
    """
    Returns  the Rear Header Parameters builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeaderDetailBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeaderDetailBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactRearHeaderBuilder = ...  # unknown typename


class HeadImpactSideRailWizardBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRailWizardBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DaylightOpeningLeft: NXOpen.ScCollector = ...
    """
    Returns  the left forward daylight opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightOpeningLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DaylightOpeningRight: NXOpen.ScCollector = ...
    """
    Returns  the right forward daylight opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightOpeningRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorOpeningLeft: NXOpen.ScCollector = ...
    """
    Returns  the left forward door opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorOpeningLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorOpeningRight: NXOpen.ScCollector = ...
    """
    Returns  the right forward door opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorOpeningRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UpperRoofInterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof interior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofInterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactSideRailWizardBuilder = ...  # unknown typename


class PedestrianProtection(NXOpen.Features.BodyFeature):
    """
    Represents a pedestrian protection feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.PedestrianProtectionBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PedestrianProtection = ...  # unknown typename


class HeadImpact(NXOpen.Features.BodyFeature):
    """
    Represents a head impact feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: HeadImpact = ...  # unknown typename


class WheelCovering(NXOpen.Features.BodyFeature):
    """
    Represents a wheel covering feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.WheelCoveringBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: WheelCovering = ...  # unknown typename


class TireEnvelope(NXOpen.Features.BodyFeature):
    """
    Represents a tire envelope feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.TireEnvelopeBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Null: TireEnvelope = ...  # unknown typename


class SeatBeltAnchorage(NXOpen.Features.Feature):
    """
    Represents a seat belt anchorage feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.SeatBeltAnchorageBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: SeatBeltAnchorage = ...  # unknown typename


class HeadImpactBPillarBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillarBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactBpillarBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Initialize(self, parent: HeadImpactBuilder) -> None:
        """
        The B Pillar initialize method.  
        
        Signature ``Initialize(parent)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Geometry: HeadImpactBPillarWizardBuilder = ...
    """
    Returns  the B Pillar Geometry builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillarWizardBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillarWizardBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Parameters: HeadImpactBPillarDetailBuilder = ...
    """
    Returns  the B Pillar Parameters builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillarDetailBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillarDetailBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactBPillarBuilder = ...  # unknown typename


class BumperPendulum(NXOpen.Features.BodyFeature):
    """
    Represents a bumper pendulum feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.BumperPendulumBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: BumperPendulum = ...  # unknown typename


class ReflectionDataBuilderResolutionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReflectionDataBuilderResolutionType():
    """
    the resolution type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Low", "low"
       "Medium", "medium"
       "High", "high"
       "Customized", "user defined"
    """
    Low = 0  # ReflectionDataBuilderResolutionTypeMemberType
    Medium = 1  # ReflectionDataBuilderResolutionTypeMemberType
    High = 2  # ReflectionDataBuilderResolutionTypeMemberType
    Customized = 3  # ReflectionDataBuilderResolutionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReflectionDataBuilderReflectMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReflectionDataBuilderReflectMethodType():
    """
    the reflection data option type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DirectReflect", "direct reflect"
       "ReverseReflection", "reverse reflection"
    """
    DirectReflect = 0  # ReflectionDataBuilderReflectMethodTypeMemberType
    ReverseReflection = 1  # ReflectionDataBuilderReflectMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReflectionDataBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.ReflectionData` builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateReflectionDataBuilder`
    
    Default values.
    
    ====================  ==============
    Property              Value
    ====================  ==============
    IsReflectData         1 
    --------------------  --------------
    IsReflectTraceCurve   0 
    --------------------  --------------
    IsRefractData         0 
    --------------------  --------------
    IsRefractTraceCurve   0 
    --------------------  --------------
    ReflectAccuracy       20 
    --------------------  --------------
    ReflectMethod         DirectReflect 
    --------------------  --------------
    RefractionIndex       1.5 
    --------------------  --------------
    Resolution            Medium 
    --------------------  --------------
    Thickness             5 
    ====================  ==============
    
    .. versionadded:: NX6.0.0
    """
    
    class ResolutionType():
        """
        the resolution type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Low", "low"
           "Medium", "medium"
           "High", "high"
           "Customized", "user defined"
        """
        Low = 0  # ReflectionDataBuilderResolutionTypeMemberType
        Medium = 1  # ReflectionDataBuilderResolutionTypeMemberType
        High = 2  # ReflectionDataBuilderResolutionTypeMemberType
        Customized = 3  # ReflectionDataBuilderResolutionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ReflectMethodType():
        """
        the reflection data option type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DirectReflect", "direct reflect"
           "ReverseReflection", "reverse reflection"
        """
        DirectReflect = 0  # ReflectionDataBuilderReflectMethodTypeMemberType
        ReverseReflection = 1  # ReflectionDataBuilderReflectMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DashSurface: NXOpen.ScCollector = ...
    """
    Returns  the reflected object is in the dash surface 
    
    <hr>
    
    Getter Method
    
    Signature ``DashSurface`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    EyePoint: NXOpen.Point = ...
    """
    Returns or sets  the eye point 
    
    <hr>
    
    Getter Method
    
    Signature ``EyePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EyePoint`` 
    
    :param eyePoint: 
    :type eyePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    IsReflectData: bool = ...
    """
    Returns or sets  whether to create reflection data as output or not  
    
    <hr>
    
    Getter Method
    
    Signature ``IsReflectData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsReflectData`` 
    
    :param isReflectData: 
    :type isReflectData: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    IsReflectTraceCurve: bool = ...
    """
    Returns or sets  whether to create reflection trace curves as output or not 
    
    <hr>
    
    Getter Method
    
    Signature ``IsReflectTraceCurve`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsReflectTraceCurve`` 
    
    :param isReflectTraceCurve: 
    :type isReflectTraceCurve: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    IsRefractData: bool = ...
    """
    Returns or sets  whether to create refraction data as output or not  
    
    <hr>
    
    Getter Method
    
    Signature ``IsRefractData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsRefractData`` 
    
    :param isRefractData: 
    :type isRefractData: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    IsRefractTraceCurve: bool = ...
    """
    Returns or sets  whether to create refraction trace curves as output or not  
    
    <hr>
    
    Getter Method
    
    Signature ``IsRefractTraceCurve`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsRefractTraceCurve`` 
    
    :param isRefractTraceCurve: 
    :type isRefractTraceCurve: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    IsReverseReflectData: bool = ...
    """
    Returns or sets  whether to create reverse reflection data as output or not  
    
    <hr>
    
    Getter Method
    
    Signature ``IsReverseReflectData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsReverseReflectData`` 
    
    :param isReverseReflectData: 
    :type isReverseReflectData: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    IsReverseReflectTraceCurve: bool = ...
    """
    Returns or sets  whether to create reverse reflection trace curves as output or not 
    
    <hr>
    
    Getter Method
    
    Signature ``IsReverseReflectTraceCurve`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsReverseReflectTraceCurve`` 
    
    :param isReverseReflectTraceCurve: 
    :type isReverseReflectTraceCurve: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReflectAccuracy: int = ...
    """
    Returns or sets  the customized reflection accuracy, which is the number of dispersed points for the input target objects 
    
    <hr>
    
    Getter Method
    
    Signature ``ReflectAccuracy`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReflectAccuracy`` 
    
    :param reflectAccuracy: 
    :type reflectAccuracy: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReflectMethod: ReflectionDataBuilderReflectMethodType = ...
    """
    Returns or sets  the reflection data option type  
    
    <hr>
    
    Getter Method
    
    Signature ``ReflectMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.ReflectionDataBuilderReflectMethodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReflectMethod`` 
    
    :param reflectionMethod: 
    :type reflectionMethod: :py:class:`NXOpen.Features.VehicleDesign.ReflectionDataBuilderReflectMethodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReflectionObject: NXOpen.ScCollector = ...
    """
    Returns  the reflection object to reflect the input target objects 
    
    <hr>
    
    Getter Method
    
    Signature ``ReflectionObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RefractionIndex: float = ...
    """
    Returns or sets  the refraction index 
    
    <hr>
    
    Getter Method
    
    Signature ``RefractionIndex`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RefractionIndex`` 
    
    :param refractionIndex: 
    :type refractionIndex: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Resolution: ReflectionDataBuilderResolutionType = ...
    """
    Returns or sets  the resolution type  
    
    <hr>
    
    Getter Method
    
    Signature ``Resolution`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.ReflectionDataBuilderResolutionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Resolution`` 
    
    :param resolution: 
    :type resolution: :py:class:`NXOpen.Features.VehicleDesign.ReflectionDataBuilderResolutionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReverseDir: bool = ...
    """
    Returns or sets  whether the direction of reflection objects is reversed to determine their thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDir`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDir`` 
    
    :param reverseDir: 
    :type reverseDir: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    TargetObject: NXOpen.Section = ...
    """
    Returns  the target object to be reflected on the faces and/or planes 
    the target object 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Thickness: float = ...
    """
    Returns or sets  the thickness of the reflection objects 
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Thickness`` 
    
    :param thickness: 
    :type thickness: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: ReflectionDataBuilder = ...  # unknown typename


class MirrorCertification(NXOpen.Features.BodyFeature):
    """
    Represents a mirror certification feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.MirrorCertificationBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: MirrorCertification = ...  # unknown typename


class WheelFixing(NXOpen.Features.BodyFeature):
    """
    Represents a wheel fixing feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.WheelFixingBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: WheelFixing = ...  # unknown typename


class CloseRangeCameraListItemBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CloseRangeCameraListItemBuilderTypes():
    """
    This enum represents the camera definition options to define the close range visibility. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Round", "Round type"
       "Rectangle", "Rectangle type"
       "Face", "Face type"
    """
    Round = 0  # CloseRangeCameraListItemBuilderTypesMemberType
    Rectangle = 1  # CloseRangeCameraListItemBuilderTypesMemberType
    Face = 2  # CloseRangeCameraListItemBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CloseRangeCameraListItemBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the builder to create camera list item used for close range visibility.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesign.CloseRangeVisibilityBuilder.CreateCameraListItemBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class Types():
        """
        This enum represents the camera definition options to define the close range visibility. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Round", "Round type"
           "Rectangle", "Rectangle type"
           "Face", "Face type"
        """
        Round = 0  # CloseRangeCameraListItemBuilderTypesMemberType
        Rectangle = 1  # CloseRangeCameraListItemBuilderTypesMemberType
        Face = 2  # CloseRangeCameraListItemBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CameraAxis: NXOpen.Axis = ...
    """
    Returns or sets  the selected axis defining the camera direction.  
    
    Only valid when the camera type is round. 
    
    <hr>
    
    Getter Method
    
    Signature ``CameraAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CameraAxis`` 
    
    :param cameraAxis: 
    :type cameraAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CameraCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the coordinate system specifying the camera position.  
    
    Only valid when the camera type is rectangle. 
    
    <hr>
    
    Getter Method
    
    Signature ``CameraCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CameraCsys`` 
    
    :param cameraCsys: 
    :type cameraCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    CameraFace: NXOpen.ScCollector = ...
    """
    Returns  the face selections used to identify the camera surface.  
    
    Only valid when the camera type is face. 
    
    <hr>
    
    Getter Method
    
    Signature ``CameraFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    CameraFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the facet selections used to identify the camera facet bod.  
    
    Only valid when the camera type is facet body. 
    
    <hr>
    
    Getter Method
    
    Signature ``CameraFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    CameraType: CloseRangeCameraListItemBuilderTypes = ...
    """
    Returns or sets  the camera definition type used by the close range visibility.  
    
    <hr>
    
    Getter Method
    
    Signature ``CameraType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilderTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CameraType`` 
    
    :param cameraType: 
    :type cameraType: :py:class:`NXOpen.Features.VehicleDesign.CloseRangeCameraListItemBuilderTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FaceReverse: bool = ...
    """
    Returns or sets  the indication if the selected camera face surface should be reversed.  
    
    Only valid when the camera type is face. 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceReverse`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceReverse`` 
    
    :param faceReverse: 
    :type faceReverse: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HorizontalLength: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the horizontal legth.  
    
    Only valid when the camera type is rectangle. 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    InitialRadius: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the initial radius.  
    
    Only valid when the camera type is round. 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    UseCamera: bool = ...
    """
    Returns or sets  the indication if the defined camera will be used for visibility compute.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseCamera`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseCamera`` 
    
    :param useCamera: 
    :type useCamera: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VerticalLength: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the vertical legth.  
    
    Only valid when the camera type is rectangle. 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ViewAngle: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the view angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ViewAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: CloseRangeCameraListItemBuilder = ...  # unknown typename


class HeadImpactSideRailBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRailBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactSideRailBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Initialize(self, parent: HeadImpactBuilder) -> None:
        """
        The Side Rail initialize method.  
        
        Signature ``Initialize(parent)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Geometry: HeadImpactSideRailWizardBuilder = ...
    """
    Returns  the Side Rail Geometry builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRailWizardBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRailWizardBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Parameters: HeadImpactSideRailDetailBuilder = ...
    """
    Returns  the Side Rail Parameters builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactSideRailDetailBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactSideRailBuilder = ...  # unknown typename


class OilPan(NXOpen.Features.BodyFeature):
    """
    Represents a oil pan feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.OilPanBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: OilPan = ...  # unknown typename


class WindshieldDatum(NXOpen.Features.Feature):
    """
    Represents a windshield datum feature.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.WindshieldDatumBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: WindshieldDatum = ...  # unknown typename


class AllAroundVision(NXOpen.Features.BodyFeature):
    """
    Represents an all-around vision feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.AllAroundVisionBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: AllAroundVision = ...  # unknown typename


class HeadImpactRPillarDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRPillarDetailBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateGeometry: bool = ...
    """
    Returns or sets  the create construction geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGeometry`` 
    
    :param createGeometry: 
    :type createGeometry: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT7Left: NXOpen.Point = ...
    """
    Returns or sets  the left PT7 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT7Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT7Left`` 
    
    :param pt7Left: 
    :type pt7Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT7LeftFlag: bool = ...
    """
    Returns or sets  the left PT7 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT7LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT7LeftFlag`` 
    
    :param pt7LeftFlag: 
    :type pt7LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT7Right: NXOpen.Point = ...
    """
    Returns or sets  the right PT7 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT7Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT7Right`` 
    
    :param pt7Right: 
    :type pt7Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT7RightFlag: bool = ...
    """
    Returns or sets  the right PT7 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT7RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT7RightFlag`` 
    
    :param pt7RightFlag: 
    :type pt7RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RP1Left: NXOpen.Point = ...
    """
    Returns or sets  the left RP1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP1Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP1Left`` 
    
    :param rp1Left: 
    :type rp1Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RP1LeftFlag: bool = ...
    """
    Returns or sets  the left RP1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP1LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP1LeftFlag`` 
    
    :param rp1LeftFlag: 
    :type rp1LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RP1Ratio: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the ratio used to position RP1.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP1Ratio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RP1Right: NXOpen.Point = ...
    """
    Returns or sets  the right RP1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP1Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP1Right`` 
    
    :param rp1Right: 
    :type rp1Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RP1RightFlag: bool = ...
    """
    Returns or sets  the right RP1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP1RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP1RightFlag`` 
    
    :param rp1RightFlag: 
    :type rp1RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RP2Left: NXOpen.Point = ...
    """
    Returns or sets  the left RP2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP2Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP2Left`` 
    
    :param rp2Left: 
    :type rp2Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RP2LeftFlag: bool = ...
    """
    Returns or sets  the left RP2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP2LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP2LeftFlag`` 
    
    :param rp2LeftFlag: 
    :type rp2LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RP2Offset: NXOpen.Expression = ...
    """
    Returns  the expression containing the value for the offset used to position RP2.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP2Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RP2Right: NXOpen.Point = ...
    """
    Returns or sets  the right RP2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP2Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP2Right`` 
    
    :param rp2Right: 
    :type rp2Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RP2RightFlag: bool = ...
    """
    Returns or sets  the right RP2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``RP2RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RP2RightFlag`` 
    
    :param rp2RightFlag: 
    :type rp2RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReqHorizontalLeftMax: NXOpen.Expression = ...
    """
    Returns  the left horizontal maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalLeftMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalLeftMin: NXOpen.Expression = ...
    """
    Returns  the left horizontal minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalLeftMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalRightMax: NXOpen.Expression = ...
    """
    Returns  the right horizontal maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalRightMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalRightMin: NXOpen.Expression = ...
    """
    Returns  the right horizontal minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalRightMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMax: NXOpen.Expression = ...
    """
    Returns  the vertical maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMin: NXOpen.Expression = ...
    """
    Returns  the vertical minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactRPillarDetailBuilder = ...  # unknown typename


class BaseDataDriverBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.BaseDataDriverBuilder`.  
    
    This class can only be used in base data, thus cannot be created directly by user.
    
    .. versionadded:: NX8.5.0
    """
    BackAngle: NXOpen.Expression = ...
    """
    Returns  the inclination angle of the backrest.  
    
    <hr>
    
    Getter Method
    
    Signature ``BackAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    BackAngleFixed: bool = ...
    """
    Returns or sets  the option to indicate whether the Back Angle is fixed for not.  
    
    If it is true, the back angle is not adjustable. 
    
    <hr>
    
    Getter Method
    
    Signature ``BackAngleFixed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BackAngleFixed`` 
    
    :param driverBackAngleFixed: 
    :type driverBackAngleFixed: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DriverSide: str = ...
    """
    Returns  the Driver side.  
    
    This value indicates either it is a left driven or right driven vehicle. 
    This value is calculated from the driver's seat reference point coordinates and can not be edited by the user.
    
    <hr>
    
    Getter Method
    
    Signature ``DriverSide`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontShoulderRoom: NXOpen.Expression = ...
    """
    Returns  the front shoulder room.  
    
    This information is needed in the calculation for eye ellipses and the head position contour.
    
    <hr>
    
    Getter Method
    
    Signature ``FrontShoulderRoom`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    HeelReferencePoint: NXOpen.Point = ...
    """
    Returns or sets  the driver heel reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeelReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeelReferencePoint`` 
    
    :param refPoint: 
    :type refPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HeelReferencePointActive: bool = ...
    """
    Returns or sets  the status to indicate whether the driver heel reference point is active or not.  
    
    If it is true, the driver heel reference point is active. 
    
    <hr>
    
    Getter Method
    
    Signature ``HeelReferencePointActive`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeelReferencePointActive`` 
    
    :param activeStatus: 
    :type activeStatus: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    HorizontalPointTravel: NXOpen.Expression = ...
    """
    Returns  the horizontal seat adjustment in the direction of the x axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalPointTravel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PedalReferencePoint: NXOpen.Point = ...
    """
    Returns or sets  the driver pedal reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``PedalReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PedalReferencePoint`` 
    
    :param refPoint: 
    :type refPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PedalReferencePointActive: bool = ...
    """
    Returns or sets  the driver pedal reference point's activeness.  
    
    If true, the driver pedal reference point is active. 
    
    <hr>
    
    Getter Method
    
    Signature ``PedalReferencePointActive`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PedalReferencePointActive`` 
    
    :param activeStatus: 
    :type activeStatus: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearShoulderRoom: NXOpen.Expression = ...
    """
    Returns  the rear shoulder room.  
    
    This information is needed in the calculation for head position contour.
    
    <hr>
    
    Getter Method
    
    Signature ``RearShoulderRoom`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SeatReferencePoint: NXOpen.Point = ...
    """
    Returns or sets  the driver seat reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeatReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeatReferencePoint`` 
    
    :param refPoint: 
    :type refPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SeatReferencePointActive: bool = ...
    """
    Returns or sets  the status to indicate whether the driver seat reference point is active or not.  
    
    If it is true, the driver seat reference point is active. 
    
    <hr>
    
    Getter Method
    
    Signature ``SeatReferencePointActive`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeatReferencePointActive`` 
    
    :param activeStatus: 
    :type activeStatus: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SteeringWheelCenterPoint: NXOpen.Point = ...
    """
    Returns or sets  the center point of the driver steering wheel.  
    
    <hr>
    
    Getter Method
    
    Signature ``SteeringWheelCenterPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SteeringWheelCenterPoint`` 
    
    :param refPoint: 
    :type refPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SteeringWheelCenterPointActive: bool = ...
    """
    Returns or sets  the status to indicate whether the steering wheel center point is active or not.  
    
    If it is true, the steering wheel center point is active. 
    
    <hr>
    
    Getter Method
    
    Signature ``SteeringWheelCenterPointActive`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SteeringWheelCenterPointActive`` 
    
    :param activeStatus: 
    :type activeStatus: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Transmission: str = ...
    """
    Returns or sets  the vehicle transmission type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Transmission`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Transmission`` 
    
    :param transmission: 
    :type transmission: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: BaseDataDriverBuilder = ...  # unknown typename


class HeadImpactBPillarWizardBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBPillarWizardBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BP2Left: NXOpen.Point = ...
    """
    Returns or sets  the left B-pillar 2 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP2Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP2Left`` 
    
    :param bp2Left: 
    :type bp2Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BP2Right: NXOpen.Point = ...
    """
    Returns or sets  the right B-pillar 2 point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BP2Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BP2Right`` 
    
    :param bp2Right: 
    :type bp2Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BPillarLeft: NXOpen.ScCollector = ...
    """
    Returns  the left B pillar geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``BPillarLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    BPillarRight: NXOpen.ScCollector = ...
    """
    Returns  the right B pillar geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``BPillarRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CenterlineLeft: NXOpen.ScCollector = ...
    """
    Returns  the left B Pillar centerline geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CenterlineRight: NXOpen.ScCollector = ...
    """
    Returns  the right B Pillar centerline geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DaylightBottomLeft: NXOpen.Point = ...
    """
    Returns or sets  the left daylight opening bottom point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomLeft`` 
    
    :param daylightBottomLeft: 
    :type daylightBottomLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomRight: NXOpen.Point = ...
    """
    Returns or sets  the right daylight opening bottom point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomRight`` 
    
    :param daylightBottomRight: 
    :type daylightBottomRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightOpeningLeft: NXOpen.ScCollector = ...
    """
    Returns  the left forward daylight opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightOpeningLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DaylightOpeningRight: NXOpen.ScCollector = ...
    """
    Returns  the right forward daylight opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightOpeningRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorOpeningLeft: NXOpen.ScCollector = ...
    """
    Returns  the left forward door opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorOpeningLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorOpeningRight: NXOpen.ScCollector = ...
    """
    Returns  the right forward door opening geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorOpeningRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DoorTopLeft: NXOpen.Point = ...
    """
    Returns or sets  the left door opening top point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopLeft`` 
    
    :param doorTopLeft: 
    :type doorTopLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopRight: NXOpen.Point = ...
    """
    Returns or sets  the right door opening top point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopRight`` 
    
    :param doorTopRight: 
    :type doorTopRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UpperRoofInterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof interior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofInterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactBPillarWizardBuilder = ...  # unknown typename


class HeadImpactRearHeaderWizardBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactRearHeaderWizardBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    RearshieldEdge: NXOpen.ScCollector = ...
    """
    Returns  the rear door or daylight opening upper edge geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearshieldEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UpperRoofInterior: NXOpen.ScCollector = ...
    """
    Returns  the upper roof interior geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperRoofInterior`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactRearHeaderWizardBuilder = ...  # unknown typename


class HeadImpactOPillarBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOPillarBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateHeadImpactOpillarBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Initialize(self, parent: HeadImpactBuilder, row: int) -> None:
        """
        The Additional Pillar initialize method.  
        
        Signature ``Initialize(parent, row)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactBuilder` 
        :param row: 
        :type row: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_general_packaging ("NX General Packaging")
        """
        ...
    
    Geometry: HeadImpactOPillarWizardBuilder = ...
    """
    Returns  the Additional Pillar Geometry builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOPillarWizardBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOPillarWizardBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Parameters: HeadImpactOPillarDetailBuilder = ...
    """
    Returns  the Additional Pillar Parameters builder, which represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOPillarDetailBuilder`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOPillarDetailBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactOPillarBuilder = ...  # unknown typename


class HoodVisibility(NXOpen.Features.CurveFeature):
    """
    Represents a hood visibility spline feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Features.VehicleDesign.HoodVisibilityBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: HoodVisibility = ...  # unknown typename


class HeadImpactFrontHeaderDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactFrontHeaderDetailBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateGeometry: bool = ...
    """
    Returns or sets  the create construction geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGeometry`` 
    
    :param createGeometry: 
    :type createGeometry: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FH1Left: NXOpen.Point = ...
    """
    Returns or sets  the left FH1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH1Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FH1Left`` 
    
    :param fh1Left: 
    :type fh1Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FH1LeftFlag: bool = ...
    """
    Returns or sets  the left FH1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH1LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FH1LeftFlag`` 
    
    :param fh1LeftFlag: 
    :type fh1LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FH1Offset: NXOpen.Expression = ...
    """
    Returns  the offset used to position FH1.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH1Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FH1Right: NXOpen.Point = ...
    """
    Returns or sets  the right FH1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH1Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FH1Right`` 
    
    :param fh1Right: 
    :type fh1Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FH1RightFlag: bool = ...
    """
    Returns or sets  the right FH1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH1RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FH1RightFlag`` 
    
    :param fh1RightFlag: 
    :type fh1RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FH2Left: NXOpen.Point = ...
    """
    Returns or sets  the left FH2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH2Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FH2Left`` 
    
    :param rp2Left: 
    :type rp2Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FH2LeftFlag: bool = ...
    """
    Returns or sets  the left FH2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH2LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FH2LeftFlag`` 
    
    :param rp2LeftFlag: 
    :type rp2LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FH2Offset: NXOpen.Expression = ...
    """
    Returns  the offset used to position FH2.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH2Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    FH2Right: NXOpen.Point = ...
    """
    Returns or sets  the right FH2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH2Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FH2Right`` 
    
    :param rp2Right: 
    :type rp2Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FH2RightFlag: bool = ...
    """
    Returns or sets  the right FH2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``FH2RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FH2RightFlag`` 
    
    :param rp2RightFlag: 
    :type rp2RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReqHorizontalExact: NXOpen.Expression = ...
    """
    Returns  the horizontal exact required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalExact`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMax: NXOpen.Expression = ...
    """
    Returns  the vertical maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMin: NXOpen.Expression = ...
    """
    Returns  the vertical minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactFrontHeaderDetailBuilder = ...  # unknown typename


class HeadImpactOtherRailDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOtherRailDetailBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateGeometry: bool = ...
    """
    Returns or sets  the create construction geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGeometry`` 
    
    :param createGeometry: 
    :type createGeometry: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT15Left: NXOpen.Point = ...
    """
    Returns or sets  the left PT15 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT15Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT15Left`` 
    
    :param pt15Left: 
    :type pt15Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT15LeftFlag: bool = ...
    """
    Returns or sets  the left PT15 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT15LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT15LeftFlag`` 
    
    :param pt15LeftFlag: 
    :type pt15LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT15Right: NXOpen.Point = ...
    """
    Returns or sets  the right PT15 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT15Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT15Right`` 
    
    :param pt15Right: 
    :type pt15Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT15RightFlag: bool = ...
    """
    Returns or sets  the right PT15 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT15RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT15RightFlag`` 
    
    :param pt15RightFlag: 
    :type pt15RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT16Left: NXOpen.Point = ...
    """
    Returns or sets  the left PT16 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT16Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT16Left`` 
    
    :param pt16Left: 
    :type pt16Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT16LeftFlag: bool = ...
    """
    Returns or sets  the left PT16 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT16LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT16LeftFlag`` 
    
    :param pt16LeftFlag: 
    :type pt16LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT16Right: NXOpen.Point = ...
    """
    Returns or sets  the right PT16 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT16Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT16Right`` 
    
    :param pt16Right: 
    :type pt16Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT16RightFlag: bool = ...
    """
    Returns or sets  the right PT16 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT16RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT16RightFlag`` 
    
    :param pt16RightFlag: 
    :type pt16RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReqHorizontalLeftExact: NXOpen.Expression = ...
    """
    Returns  the left horizontal required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalLeftExact`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalRightExact: NXOpen.Expression = ...
    """
    Returns  the right horizontal required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalRightExact`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMax: NXOpen.Expression = ...
    """
    Returns  the vertical maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMin: NXOpen.Expression = ...
    """
    Returns  the vertical minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SR3Left: NXOpen.Point = ...
    """
    Returns or sets  the left SR3 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR3Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR3Left`` 
    
    :param sr3Left: 
    :type sr3Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR3LeftFlag: bool = ...
    """
    Returns or sets  the left SR3 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR3LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR3LeftFlag`` 
    
    :param sr3LeftFlag: 
    :type sr3LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR3Offset: NXOpen.Expression = ...
    """
    Returns  the offset used to position SR3.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR3Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SR3Right: NXOpen.Point = ...
    """
    Returns or sets  the right SR3 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR3Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR3Right`` 
    
    :param sr3Right: 
    :type sr3Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SR3RightFlag: bool = ...
    """
    Returns or sets  the right SR3 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``SR3RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SR3RightFlag`` 
    
    :param sr3RightFlag: 
    :type sr3RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: HeadImpactOtherRailDetailBuilder = ...  # unknown typename


class VisionPlaneBuilderEnumEyeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VisionPlaneBuilderEnumEyeType():
    """
    Represents the eye definition type to define the Vision Plane. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EyeFeature", "eye feature"
       "V1Point", "v1 point"
       "V2Point", "v2 point"
    """
    EyeFeature = 0  # VisionPlaneBuilderEnumEyeTypeMemberType
    V1Point = 1  # VisionPlaneBuilderEnumEyeTypeMemberType
    V2Point = 2  # VisionPlaneBuilderEnumEyeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VisionPlaneBuilderCustomVisionAngleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VisionPlaneBuilderCustomVisionAngle():
    """
    Represents the vision angle type to define the Vision Plane. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Standard", "standard"
       "Custom", "customized"
    """
    Standard = 0  # VisionPlaneBuilderCustomVisionAngleMemberType
    Custom = 1  # VisionPlaneBuilderCustomVisionAngleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VisionPlaneBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.VisionPlane` builder used to create or edit a Vision Plane.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateVisionPlaneBuilder`
    
    Default values.
    
    =====================  =========================================
    Property               Value
    =====================  =========================================
    AssoToggle             1 
    ---------------------  -----------------------------------------
    BaseDim.Value          2000 (millimeters part), 0 (inches part) 
    ---------------------  -----------------------------------------
    DriverPlane.Value      4 
    ---------------------  -----------------------------------------
    EyeType                EyeFeature 
    ---------------------  -----------------------------------------
    FrontDim.Value         1000 (millimeters part), 0 (inches part) 
    ---------------------  -----------------------------------------
    FrontPlane.Value       4 
    ---------------------  -----------------------------------------
    LowerPlane             1 
    ---------------------  -----------------------------------------
    MidPlane.Value         1 
    ---------------------  -----------------------------------------
    MiddlePlane            1 
    ---------------------  -----------------------------------------
    PassengerPlane.Value   4 
    ---------------------  -----------------------------------------
    UpperPlane             1 
    ---------------------  -----------------------------------------
    UseStandardLoading     1 
    ---------------------  -----------------------------------------
    VisionType             Standard 
    =====================  =========================================
    
    .. versionadded:: NX6.0.0
    """
    
    class EnumEyeType():
        """
        Represents the eye definition type to define the Vision Plane. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EyeFeature", "eye feature"
           "V1Point", "v1 point"
           "V2Point", "v2 point"
        """
        EyeFeature = 0  # VisionPlaneBuilderEnumEyeTypeMemberType
        V1Point = 1  # VisionPlaneBuilderEnumEyeTypeMemberType
        V2Point = 2  # VisionPlaneBuilderEnumEyeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CustomVisionAngle():
        """
        Represents the vision angle type to define the Vision Plane. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Standard", "standard"
           "Custom", "customized"
        """
        Standard = 0  # VisionPlaneBuilderCustomVisionAngleMemberType
        Custom = 1  # VisionPlaneBuilderCustomVisionAngleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AssoToggle: bool = ...
    """
    Returns or sets  the associative option that determines whether to create feature or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssoToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssoToggle`` 
    
    :param assoToggle: 
    :type assoToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    BaseDim: NXOpen.Expression = ...
    """
    Returns  the base dim; dimension from left to right.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DriverPlane: NXOpen.Expression = ...
    """
    Returns  the driver side plane inclined angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``DriverPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    EyeFeature: NXOpen.Features.SelectFeature = ...
    """
    Returns  the eye feature; select eec feature when eye type specified.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyeFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    EyeType: VisionPlaneBuilderEnumEyeType = ...
    """
    Returns or sets  the eye type to determine which type of v points to be used.  
    
    <hr>
    
    Getter Method
    
    Signature ``EyeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.VisionPlaneBuilderEnumEyeType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EyeType`` 
    
    :param eyeType: 
    :type eyeType: :py:class:`NXOpen.Features.VehicleDesign.VisionPlaneBuilderEnumEyeType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontDim: NXOpen.Expression = ...
    """
    Returns  the front dim; dimension here to front.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontDim`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FrontPlane: NXOpen.Expression = ...
    """
    Returns  the front plane inclined angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LoadingName: str = ...
    """
    Returns or sets  the name of the used loading in the Vision Plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``LoadingName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadingName`` 
    
    :param loadingName: 
    :type loadingName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    LowerPlane: bool = ...
    """
    Returns or sets  the lower plane option that determines whether to create lower plane or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LowerPlane`` 
    
    :param lowerPlane: 
    :type lowerPlane: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    MidPlane: NXOpen.Expression = ...
    """
    Returns  the middle plane inclined angle; means front side,passenger side and driver side are the same.  
    
    <hr>
    
    Getter Method
    
    Signature ``MidPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MiddlePlane: bool = ...
    """
    Returns or sets  the middle plane option that determines whether to create middle plane or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``MiddlePlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MiddlePlane`` 
    
    :param middlePlane: 
    :type middlePlane: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PassengerPlane: NXOpen.Expression = ...
    """
    Returns  the passenger side plane inclined angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``PassengerPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PointV1: NXOpen.Point = ...
    """
    Returns or sets  the point v1; select one point when eye type specified.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointV1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointV1`` 
    
    :param pointV1: 
    :type pointV1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PointV2: NXOpen.Point = ...
    """
    Returns or sets  the point v2; select one point when eye type specified.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointV2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointV2`` 
    
    :param pointV2: 
    :type pointV2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UpperPlane: bool = ...
    """
    Returns or sets  the upper plane option that determines whether to create upper plane or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperPlane`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpperPlane`` 
    
    :param upperPlane: 
    :type upperPlane: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    UseStandardLoading: bool = ...
    """
    Returns or sets  the option that determines whether to use the loading specified by standard or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseStandardLoading`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseStandardLoading`` 
    
    :param useStandardLoading: 
    :type useStandardLoading: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    VisionType: VisionPlaneBuilderCustomVisionAngle = ...
    """
    Returns or sets  the vision type; standard or customer defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.VisionPlaneBuilderCustomVisionAngle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisionType`` 
    
    :param visionType: 
    :type visionType: :py:class:`NXOpen.Features.VehicleDesign.VisionPlaneBuilderCustomVisionAngle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: VisionPlaneBuilder = ...  # unknown typename


class CrashBarrierBuilderRequirementsControlsControlTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CrashBarrierBuilderRequirementsControlsControlType():
    """
    Represents the requirements control types to define the crash barrier. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDriven", " - "
       "UserDefined", " - "
    """
    StandardDriven = 0  # CrashBarrierBuilderRequirementsControlsControlTypeMemberType
    UserDefined = 1  # CrashBarrierBuilderRequirementsControlsControlTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CrashBarrierBuilderShapeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CrashBarrierBuilderShapeType():
    """
    Represents the shape types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RCAR2004Front", " - "
       "RCAR2004Rear", " - "
       "Rcar2006", " - "
       "Iihs2009", " - "
       "IIHS2009MultiDomain", " - "
       "RCAR2006MultiDomain", " - "
    """
    RCAR2004Front = 0  # CrashBarrierBuilderShapeTypeMemberType
    RCAR2004Rear = 1  # CrashBarrierBuilderShapeTypeMemberType
    Rcar2006 = 2  # CrashBarrierBuilderShapeTypeMemberType
    Iihs2009 = 3  # CrashBarrierBuilderShapeTypeMemberType
    IIHS2009MultiDomain = 4  # CrashBarrierBuilderShapeTypeMemberType
    RCAR2006MultiDomain = 5  # CrashBarrierBuilderShapeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CrashBarrierBuilderCrossPositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CrashBarrierBuilderCrossPositionType():
    """
    Represents the cross position types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Centered", " - "
       "Overlap", " - "
    """
    Centered = 0  # CrashBarrierBuilderCrossPositionTypeMemberType
    Overlap = 1  # CrashBarrierBuilderCrossPositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CrashBarrierBuilderOverlapSideTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CrashBarrierBuilderOverlapSideType():
    """
    Represents the overlap side types for the front and rear barriers. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Right", " - "
       "Left", " - "
    """
    Right = 0  # CrashBarrierBuilderOverlapSideTypeMemberType
    Left = 1  # CrashBarrierBuilderOverlapSideTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CrashBarrierBuilderPositionObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CrashBarrierBuilderPositionObjectType():
    """
    Represents the position object types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BaseData", " - "
       "VehicleObject", " - "
    """
    BaseData = 0  # CrashBarrierBuilderPositionObjectTypeMemberType
    VehicleObject = 1  # CrashBarrierBuilderPositionObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CrashBarrierBuilderSidePositionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CrashBarrierBuilderSidePositionType():
    """
    Represents the position types for side barrier. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", " - "
       "Right", " - "
       "Both", " - "
    """
    Left = 0  # CrashBarrierBuilderSidePositionTypeMemberType
    Right = 1  # CrashBarrierBuilderSidePositionTypeMemberType
    Both = 2  # CrashBarrierBuilderSidePositionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CrashBarrierBuilderSideOverlapSideTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CrashBarrierBuilderSideOverlapSideType():
    """
    Represents the overlap side types for side barrier. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Front", " - "
       "Rear", " - "
    """
    Front = 0  # CrashBarrierBuilderSideOverlapSideTypeMemberType
    Rear = 1  # CrashBarrierBuilderSideOverlapSideTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CrashBarrierBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.CrashBarrier` builder
    to create and edit a vehicle design crash barrier.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.VehicleDesignCollection.CreateCrashBarrierBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class RequirementsControlsControlType():
        """
        Represents the requirements control types to define the crash barrier. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDriven", " - "
           "UserDefined", " - "
        """
        StandardDriven = 0  # CrashBarrierBuilderRequirementsControlsControlTypeMemberType
        UserDefined = 1  # CrashBarrierBuilderRequirementsControlsControlTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShapeType():
        """
        Represents the shape types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RCAR2004Front", " - "
           "RCAR2004Rear", " - "
           "Rcar2006", " - "
           "Iihs2009", " - "
           "IIHS2009MultiDomain", " - "
           "RCAR2006MultiDomain", " - "
        """
        RCAR2004Front = 0  # CrashBarrierBuilderShapeTypeMemberType
        RCAR2004Rear = 1  # CrashBarrierBuilderShapeTypeMemberType
        Rcar2006 = 2  # CrashBarrierBuilderShapeTypeMemberType
        Iihs2009 = 3  # CrashBarrierBuilderShapeTypeMemberType
        IIHS2009MultiDomain = 4  # CrashBarrierBuilderShapeTypeMemberType
        RCAR2006MultiDomain = 5  # CrashBarrierBuilderShapeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CrossPositionType():
        """
        Represents the cross position types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Centered", " - "
           "Overlap", " - "
        """
        Centered = 0  # CrashBarrierBuilderCrossPositionTypeMemberType
        Overlap = 1  # CrashBarrierBuilderCrossPositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OverlapSideType():
        """
        Represents the overlap side types for the front and rear barriers. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Right", " - "
           "Left", " - "
        """
        Right = 0  # CrashBarrierBuilderOverlapSideTypeMemberType
        Left = 1  # CrashBarrierBuilderOverlapSideTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PositionObjectType():
        """
        Represents the position object types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BaseData", " - "
           "VehicleObject", " - "
        """
        BaseData = 0  # CrashBarrierBuilderPositionObjectTypeMemberType
        VehicleObject = 1  # CrashBarrierBuilderPositionObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SidePositionType():
        """
        Represents the position types for side barrier. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", " - "
           "Right", " - "
           "Both", " - "
        """
        Left = 0  # CrashBarrierBuilderSidePositionTypeMemberType
        Right = 1  # CrashBarrierBuilderSidePositionTypeMemberType
        Both = 2  # CrashBarrierBuilderSidePositionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SideOverlapSideType():
        """
        Represents the overlap side types for side barrier. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Front", " - "
           "Rear", " - "
        """
        Front = 0  # CrashBarrierBuilderSideOverlapSideTypeMemberType
        Rear = 1  # CrashBarrierBuilderSideOverlapSideTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActiveFront: bool = ...
    """
    Returns or sets  the value indicating if the front barrier is displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveFront`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveFront`` 
    
    :param activeFront: 
    :type activeFront: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ActiveRear: bool = ...
    """
    Returns or sets  the value indicating if the rear barrier is displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveRear`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveRear`` 
    
    :param activeRear: 
    :type activeRear: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ActiveSide: bool = ...
    """
    Returns or sets  the value indicating if the side barrier is displayed.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveSide`` 
    
    :param activeSide: 
    :type activeSide: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontCrossPosition: CrashBarrierBuilderCrossPositionType = ...
    """
    Returns or sets  the cross position type of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontCrossPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderCrossPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontCrossPosition`` 
    
    :param frontCrossPosition: 
    :type frontCrossPosition: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderCrossPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontHeightAboveRoad: NXOpen.Expression = ...
    """
    Returns  the expression containing the height above road value of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontHeightAboveRoad`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontLoading: str = ...
    """
    Returns or sets  the loading applied to the vehicle front used in the crash barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontLoading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontLoading`` 
    
    :param frontLoading: 
    :type frontLoading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontOverlapPercentage: NXOpen.Expression = ...
    """
    Returns  the expression containing the overlap percentage of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontOverlapPercentage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontOverlapSide: CrashBarrierBuilderOverlapSideType = ...
    """
    Returns or sets  the overlap side type of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontOverlapSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderOverlapSideType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontOverlapSide`` 
    
    :param frontOverlapSide: 
    :type frontOverlapSide: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderOverlapSideType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontPositionObject: CrashBarrierBuilderPositionObjectType = ...
    """
    Returns or sets  the positioing object type of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontPositionObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderPositionObjectType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontPositionObject`` 
    
    :param frontPositionObject: 
    :type frontPositionObject: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderPositionObjectType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontSelectPositioningFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the positioing facet objects of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontSelectPositioningFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    FrontSelectPositioningObject: NXOpen.ScCollector = ...
    """
    Returns  the positioing objects of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontSelectPositioningObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontShape: CrashBarrierBuilderShapeType = ...
    """
    Returns or sets  the shape type of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderShapeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontShape`` 
    
    :param frontShap: 
    :type frontShap: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderShapeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontShift: NXOpen.Expression = ...
    """
    Returns  the expression containing the shift value of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontShift`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FrontUserDefineWidth: bool = ...
    """
    Returns or sets  the user defined width type of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontUserDefineWidth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontUserDefineWidth`` 
    
    :param frontUserDefineWidth: 
    :type frontUserDefineWidth: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    FrontUserDefineWidthValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the user defined width value of front barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrontUserDefineWidthValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    LeftSideSelectPositioningFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the left side position facet objects of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``LeftSideSelectPositioningFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    LeftSideSelectPositioningObject: NXOpen.ScCollector = ...
    """
    Returns  the left side position objects of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``LeftSideSelectPositioningObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearCrossPosition: CrashBarrierBuilderCrossPositionType = ...
    """
    Returns or sets  the cross position type of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearCrossPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderCrossPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearCrossPosition`` 
    
    :param rearCrossPosition: 
    :type rearCrossPosition: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderCrossPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearHeightAboveRoad: NXOpen.Expression = ...
    """
    Returns  the expression containing the height above road value of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearHeightAboveRoad`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearLoading: str = ...
    """
    Returns or sets  the loading applied to the vehicle rear used in the crash barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearLoading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearLoading`` 
    
    :param rearLoading: 
    :type rearLoading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearOverlapPercentage: NXOpen.Expression = ...
    """
    Returns  the expression containing the user defined width value of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearOverlapPercentage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearOverlapSide: CrashBarrierBuilderOverlapSideType = ...
    """
    Returns or sets  the overlap side type of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearOverlapSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderOverlapSideType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearOverlapSide`` 
    
    :param rearOverlapSide: 
    :type rearOverlapSide: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderOverlapSideType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearPositionObject: CrashBarrierBuilderPositionObjectType = ...
    """
    Returns or sets  the user defined position object type of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearPositionObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderPositionObjectType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearPositionObject`` 
    
    :param rearPositionObject: 
    :type rearPositionObject: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderPositionObjectType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearSelectPositioningFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the user defined position facet objects of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearSelectPositioningFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    RearSelectPositioningObject: NXOpen.ScCollector = ...
    """
    Returns  the user defined position objects of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearSelectPositioningObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearShape: CrashBarrierBuilderShapeType = ...
    """
    Returns or sets  the shape type of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderShapeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearShape`` 
    
    :param rearShape: 
    :type rearShape: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderShapeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearShift: NXOpen.Expression = ...
    """
    Returns  the expression containing the shift value of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearShift`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RearUserDefineWidth: bool = ...
    """
    Returns or sets  the user defined width type of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearUserDefineWidth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RearUserDefineWidth`` 
    
    :param rearUserDefineWidth: 
    :type rearUserDefineWidth: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RearUserDefineWidthValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the user defined width value of rear barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RearUserDefineWidthValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RequirementsControl: CrashBarrierBuilderRequirementsControlsControlType = ...
    """
    Returns or sets  the requirements control for standard driven or user defined.  
    
    <hr>
    
    Getter Method
    
    Signature ``RequirementsControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderRequirementsControlsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RequirementsControl`` 
    
    :param requirement: 
    :type requirement: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderRequirementsControlsControlType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    RightSideSelectPositioningFacetBodies: NXOpen.SelectNXObjectList = ...
    """
    Returns  the right side position facet objects of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RightSideSelectPositioningFacetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    RightSideSelectPositioningObject: NXOpen.ScCollector = ...
    """
    Returns  the right side position objects of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``RightSideSelectPositioningObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SideCrossPosition: CrashBarrierBuilderCrossPositionType = ...
    """
    Returns or sets  the cross position type of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideCrossPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderCrossPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideCrossPosition`` 
    
    :param sideCrossPosition: 
    :type sideCrossPosition: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderCrossPositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SideHeightAboveRoad: NXOpen.Expression = ...
    """
    Returns  the expression containing the height above road value of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideHeightAboveRoad`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SideLoading: str = ...
    """
    Returns or sets  the loading applied to the vehicle side used in the crash barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideLoading`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideLoading`` 
    
    :param sideLoading: 
    :type sideLoading: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SideOverlapPercentage: NXOpen.Expression = ...
    """
    Returns  the expression containing the overlap percentage of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideOverlapPercentage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SideOverlapSide: CrashBarrierBuilderSideOverlapSideType = ...
    """
    Returns or sets  the overlap side type of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideOverlapSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderSideOverlapSideType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideOverlapSide`` 
    
    :param sideOverlapSide: 
    :type sideOverlapSide: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderSideOverlapSideType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SidePosition: CrashBarrierBuilderSidePositionType = ...
    """
    Returns or sets  the position type of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SidePosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderSidePositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SidePosition`` 
    
    :param sidePosition: 
    :type sidePosition: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderSidePositionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SidePositionObject: CrashBarrierBuilderPositionObjectType = ...
    """
    Returns or sets  the side position object type of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SidePositionObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderPositionObjectType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SidePositionObject`` 
    
    :param sidePositionObject: 
    :type sidePositionObject: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderPositionObjectType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SideShape: CrashBarrierBuilderShapeType = ...
    """
    Returns or sets  the shape type of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderShapeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideShape`` 
    
    :param sideShape: 
    :type sideShape: :py:class:`NXOpen.Features.VehicleDesign.CrashBarrierBuilderShapeType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SideShift: NXOpen.Expression = ...
    """
    Returns  the expression containing the shift value of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideShift`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SideUserDefineLength: bool = ...
    """
    Returns or sets  the user defined width type of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideUserDefineLength`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideUserDefineLength`` 
    
    :param sideUserDefineLength: 
    :type sideUserDefineLength: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    SideUserDefineLengthValue: NXOpen.Expression = ...
    """
    Returns  the expression containing the user defined width value of side barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideUserDefineLengthValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Standard: str = ...
    """
    Returns or sets  the standard used to define the crash barrier.  
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    Null: CrashBarrierBuilder = ...  # unknown typename


class HeadImpactOPillarDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Features.VehicleDesign.HeadImpactOPillarDetailBuilder`.  
    
    This is an abstract class and cannot be instantiated.
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateGeometry: bool = ...
    """
    Returns or sets  the create construction geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGeometry`` 
    
    :param createGeometry: 
    :type createGeometry: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomLeft: NXOpen.Point = ...
    """
    Returns or sets  the left Daylight Bottom additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomLeft`` 
    
    :param daylightBottomLeft: 
    :type daylightBottomLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomLeftFlag: bool = ...
    """
    Returns or sets  the left Daylight Bottom additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomLeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomLeftFlag`` 
    
    :param daylightBottomLeftFlag: 
    :type daylightBottomLeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomRight: NXOpen.Point = ...
    """
    Returns or sets  the right Daylight Bottom additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomRight`` 
    
    :param daylightBottomRight: 
    :type daylightBottomRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DaylightBottomRightFlag: bool = ...
    """
    Returns or sets  the right Daylight Bottom additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``DaylightBottomRightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DaylightBottomRightFlag`` 
    
    :param daylightBottomRightFlag: 
    :type daylightBottomRightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopLeft: NXOpen.Point = ...
    """
    Returns or sets  the left Door Top additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopLeft`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopLeft`` 
    
    :param doorTopLeft: 
    :type doorTopLeft: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopLeftFlag: bool = ...
    """
    Returns or sets  the left Door Top additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopLeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopLeftFlag`` 
    
    :param doorTopLeftFlag: 
    :type doorTopLeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopRight: NXOpen.Point = ...
    """
    Returns or sets  the right Door Top additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopRight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopRight`` 
    
    :param doorTopRight: 
    :type doorTopRight: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    DoorTopRightFlag: bool = ...
    """
    Returns or sets  the right Door Top additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``DoorTopRightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoorTopRightFlag`` 
    
    :param doorTopRightFlag: 
    :type doorTopRightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP1Left: NXOpen.Point = ...
    """
    Returns or sets  the left OP1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP1Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP1Left`` 
    
    :param op1Left: 
    :type op1Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP1LeftFlag: bool = ...
    """
    Returns or sets  the left OP1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP1LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP1LeftFlag`` 
    
    :param op1LeftFlag: 
    :type op1LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP1Right: NXOpen.Point = ...
    """
    Returns or sets  the right OP1 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP1Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP1Right`` 
    
    :param op1Right: 
    :type op1Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP1RightFlag: bool = ...
    """
    Returns or sets  the right OP1 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP1RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP1RightFlag`` 
    
    :param op1RightFlag: 
    :type op1RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP2Left: NXOpen.Point = ...
    """
    Returns or sets  the left OP2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP2Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP2Left`` 
    
    :param op2Left: 
    :type op2Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP2LeftFlag: bool = ...
    """
    Returns or sets  the left OP2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP2LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP2LeftFlag`` 
    
    :param op2LeftFlag: 
    :type op2LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP2Right: NXOpen.Point = ...
    """
    Returns or sets  the right OP2 alternative point.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP2Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP2Right`` 
    
    :param op2Right: 
    :type op2Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    OP2RightFlag: bool = ...
    """
    Returns or sets  the right OP2 alternative point flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``OP2RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OP2RightFlag`` 
    
    :param op2RightFlag: 
    :type op2RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT6Left: NXOpen.Point = ...
    """
    Returns or sets  the left PT6 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT6Left`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT6Left`` 
    
    :param pt6Left: 
    :type pt6Left: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT6LeftFlag: bool = ...
    """
    Returns or sets  the left PT6 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT6LeftFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT6LeftFlag`` 
    
    :param pt6LeftFlag: 
    :type pt6LeftFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT6Right: NXOpen.Point = ...
    """
    Returns or sets  the right PT6 additional geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT6Right`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT6Right`` 
    
    :param pt6Right: 
    :type pt6Right: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    PT6RightFlag: bool = ...
    """
    Returns or sets  the right PT6 additional geometry flag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PT6RightFlag`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PT6RightFlag`` 
    
    :param pt6RightFlag: 
    :type pt6RightFlag: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_general_packaging ("NX General Packaging")
    """
    ReqHorizontalLeftExact: NXOpen.Expression = ...
    """
    Returns  the left horizontal required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalLeftExact`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqHorizontalRightExact: NXOpen.Expression = ...
    """
    Returns  the right horizontal required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqHorizontalRightExact`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMax: NXOpen.Expression = ...
    """
    Returns  the vertical maximum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMax`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReqVerticalMin: NXOpen.Expression = ...
    """
    Returns  the vertical minimum required approach angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReqVerticalMin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: HeadImpactOPillarDetailBuilder = ...  # unknown typename


