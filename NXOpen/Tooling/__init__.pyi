# module 'NXOpen.Tooling'
#
# Automatically generated 2025-06-09T14:38:47.488405
#
"""Default documentation for NXOpen.Tooling."""

import typing

import NXOpen
import NXOpen.Annotations
import NXOpen.Assemblies
import NXOpen.CAE
import NXOpen.Drawings
import NXOpen.Features
import NXOpen.GeometricAnalysis
import NXOpen.GeometricUtilities
import NXOpen.Mechatronics
import NXOpen.Motion
import NXOpen.UserDefinedObjects



def _handle_import() -> None:
    """internal method to handle importing an NXOpen Python module"""
    ...


class EnlargeSurfaceBuilderKeepDiscardOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EnlargeSurfaceBuilderKeepDiscardOption():
    """
    represents the keep discard options for selected region. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Keep", "selected region will be kept."
       "Discard", "selected region will be discarded."
    """
    Keep = 0  # EnlargeSurfaceBuilderKeepDiscardOptionMemberType
    Discard = 1  # EnlargeSurfaceBuilderKeepDiscardOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EnlargeSurfaceBuilder(NXOpen.Builder):
    """
    Mold Wizard enlarge surface management builder, trims a enlarged surface to a boundary of edges,
    curves, datum planes or faces.  
    
    Optionally creates output trimmed sheet body as a patch surface. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.EnlargeSurfaceCollection.CreateEnlargeSurfaceBuilder`
    
    Default values.
    
    ============================  ========
    Property                      Value
    ============================  ========
    AsPatchSurface                1 
    ----------------------------  --------
    ChangeAllSizes                1 
    ----------------------------  --------
    CutToBoundary                 1 
    ----------------------------  --------
    RegionOption                  Keep 
    ----------------------------  --------
    SurfaceRange.AnchorPosition   Vertex1 
    ============================  ========
    
    .. versionadded:: NX7.5.0
    """
    
    class KeepDiscardOption():
        """
        represents the keep discard options for selected region. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Keep", "selected region will be kept."
           "Discard", "selected region will be discarded."
        """
        Keep = 0  # EnlargeSurfaceBuilderKeepDiscardOptionMemberType
        Discard = 1  # EnlargeSurfaceBuilderKeepDiscardOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetColorValue(self) -> tuple:
        """
        Returns the value of patch surface color.  
        
        Signature ``GetColorValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (redValue, greenValue, blueValue). redValue is a float.   red value between 0 and 1 greenValue is a float.   green value between 0 and 1 blueValue is a float.   blue value between 0 and 1 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetColorValue(self, redValue: float, greenValue: float, blueValue: float) -> None:
        """
        Sets the value of patch surface color.  
        
        Signature ``SetColorValue(redValue, greenValue, blueValue)`` 
        
        :param redValue:  red value between 0 and 1  
        :type redValue: float 
        :param greenValue:  green value between 0 and 1  
        :type greenValue: float 
        :param blueValue:  blue value between 0 and 1  
        :type blueValue: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTargetFace(self, targetFace: NXOpen.Face) -> None:
        """
        Sets the target face to target surface data.  
        
        Signature ``SetTargetFace(targetFace)`` 
        
        :param targetFace:  target face  
        :type targetFace: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRangeValue(self, rangeFace: NXOpen.Face, rangeValue: 'list[float]') -> None:
        """
        Sets the value of surface range to buider data according to range face.  
        
        Signature ``SetRangeValue(rangeFace, rangeValue)`` 
        
        :param rangeFace:  range face  
        :type rangeFace: :py:class:`NXOpen.Face` 
        :param rangeValue:  array of u and v range value  
        :type rangeValue: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AddSurfaceData(self, addFace: NXOpen.Face) -> None:
        """
        Initializes the surface data with face, and adds the data to builder.  
        
        Signature ``AddSurfaceData(addFace)`` 
        
        :param addFace:  face to add to surface data  
        :type addFace: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def EraseSurfaceData(self, eraseFace: NXOpen.Face) -> None:
        """
        Erases the surface data from builder according to face.  
        
        Signature ``EraseSurfaceData(eraseFace)`` 
        
        :param eraseFace:  face to get surface data  
        :type eraseFace: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AddPlanarFaceData(self, planarFace: NXOpen.Face) -> None:
        """
        Initializes the planar face data with face, and adds the data to builder.  
        
        Signature ``AddPlanarFaceData(planarFace)`` 
        
        :param planarFace:  face to add to planar face data  
        :type planarFace: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ErasePlanarFaceData(self, planarFace: NXOpen.Face) -> None:
        """
        Erases the planar face data from builder according to face.  
        
        Signature ``ErasePlanarFaceData(planarFace)`` 
        
        :param planarFace:  face to get planar face data  
        :type planarFace: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePreviewSurface(self) -> None:
        """
        Create preview surface data from builder.  
        
        Signature ``CreatePreviewSurface()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    AsPatchSurface: bool = ...
    """
    Returns or sets  the value of option, which specifies whether to set the result region as patch surface or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``AsPatchSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AsPatchSurface`` 
    
    :param asPatchSurface: 
    :type asPatchSurface: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BodyColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color value of patch surface body.  
    
    <hr>
    
    Getter Method
    
    Signature ``BodyColor`` 
    
    :returns: the color index 
    :rtype: Id 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BodyColor`` 
    
    :param patchColor: the color index 
    :type patchColor: Id 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """
    BoundarySelection: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selection of boundary to trim the target surface, it could be face, datum plane, edge and curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundarySelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ChangeAllSizes: bool = ...
    """
    Returns or sets  the value of option, which specifies when enlarging surface, whether to change all the sizes at the same time or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeAllSizes`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChangeAllSizes`` 
    
    :param changeAllSizes: 
    :type changeAllSizes: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CutToBoundary: bool = ...
    """
    Returns or sets  the value of option, which specifies whether to cut the target to boundary objects or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``CutToBoundary`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutToBoundary`` 
    
    :param cutToBoundary: 
    :type cutToBoundary: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DragData: bool = ...
    """
    Returns or sets  the drag preview body data from builder according to face.  
    
    <hr>
    
    Getter Method
    
    Signature ``DragData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DragData`` 
    
    :param setDragData: 
    :type setDragData: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RegionOption: EnlargeSurfaceBuilderKeepDiscardOption = ...
    """
    Returns or sets  the value of the option, which specifies to keep or discard the selected region.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EnlargeSurfaceBuilderKeepDiscardOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RegionOption`` 
    
    :param regionOption: 
    :type regionOption: :py:class:`NXOpen.Tooling.EnlargeSurfaceBuilderKeepDiscardOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RegionSelection: NXOpen.RegionPointList = ...
    """
    Returns  the selection of region, which will be kept or discarded as the result of enlarged surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.RegionPointList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReselTargetData: bool = ...
    """
    Returns or sets  the reselect target face data from builder.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReselTargetData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReselTargetData`` 
    
    :param setReselTargetData: 
    :type setReselTargetData: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SurfaceRange: NXOpen.GeometricUtilities.SurfaceRangeBuilder = ...
    """
    Returns  the surface range data, which controls the enlarged parameters of surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SurfaceRangeBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TargetSelection: NXOpen.ScCollector = ...
    """
    Returns  the selection of target to create enlarge surface, body face only.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: EnlargeSurfaceBuilder = ...  # unknown typename


class StandardPartPositionBuilder(NXOpen.Builder):
    """
    Represents a StandardPartPositionBuilder to add or edit a standard part in the selected plane with specified position.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.StandardPartPositionCollection.CreateStandardPartPositionBuilder`
    
    Default values.
    
    =======================  ==========================================
    Property                 Value
    =======================  ==========================================
    AssociativePosition      1 
    -----------------------  ------------------------------------------
    DxIncrement              1.0 
    -----------------------  ------------------------------------------
    DyIncrement              1.0 
    -----------------------  ------------------------------------------
    OffsetPositionDx.Value   0.0 (millimeters part), 0.0 (inches part) 
    -----------------------  ------------------------------------------
    OffsetPositionDy.Value   0.0 (millimeters part), 0.0 (inches part) 
    =======================  ==========================================
    
    .. versionadded:: NX8.5.0
    """
    
    def SetOffsetPosition(self, position: NXOpen.Point3d) -> None:
        """
        The offset point position.  
        
        Signature ``SetOffsetPosition(position)`` 
        
        :param position: 
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetFaceCenter(self) -> None:
        """
        Sets the reference point to the selected face center.  
        
        Signature ``SetFaceCenter()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def PlaneView(self) -> None:
        """
        Sets the view to the selected face plane or X-Y plane of WCS.  
        
        Signature ``PlaneView()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AssociativePosition: bool = ...
    """
    Returns or sets  the associative status between standardpart and the offset point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativePosition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``AssociativePosition`` 
    
    :param associativePosition: 
    :type associativePosition: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DxIncrement: float = ...
    """
    Returns or sets  the increment in X direction when a standard part is dragged.  
    
    <hr>
    
    Getter Method
    
    Signature ``DxIncrement`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``DxIncrement`` 
    
    :param dxIncrement: 
    :type dxIncrement: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DyIncrement: float = ...
    """
    Returns or sets  the increment in Y direction when a standard part is dragged.  
    
    <hr>
    
    Getter Method
    
    Signature ``DyIncrement`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``DyIncrement`` 
    
    :param dyIncrement: 
    :type dyIncrement: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetPositionDx: NXOpen.Expression = ...
    """
    Returns  the dimension in X direction from reference point to offset point.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPositionDx`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetPositionDy: NXOpen.Expression = ...
    """
    Returns  the dimension in Y direction from reference point to offset point.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPositionDy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReferencePosition: NXOpen.Point = ...
    """
    Returns or sets  the reference point position.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePosition`` 
    
    :param refPos: 
    :type refPos: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: StandardPartPositionBuilder = ...  # unknown typename


class TrimSolidCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Trim Solid   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTrimSolidBuilder(self) -> TrimSolidBuilder:
        """
        Creates a Trim Solid builder  
        
        Signature ``CreateTrimSolidBuilder()`` 
        
        :returns: :py:class:`TrimSolidBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.TrimSolidBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class StockSizeCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of StockSize   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateStocksizeBuilder(self) -> StockSizeBuilder:
        """
        Creates a StockSize builder  
        
        Signature ``CreateStocksizeBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.StockSizeBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class FaceSplitBuilderFaceSplitTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FaceSplitBuilderFaceSplitType():
    """
    the type for Split Face
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CurvesEdges", "using curve or edge for Split Face"
       "Plane", "using plane for Split Face"
       "Intersection", "using intersection curve of two body for Split Face"
       "Isocline", "using Isocline for Split Face"
    """
    CurvesEdges = 0  # FaceSplitBuilderFaceSplitTypeMemberType
    Plane = 1  # FaceSplitBuilderFaceSplitTypeMemberType
    Intersection = 2  # FaceSplitBuilderFaceSplitTypeMemberType
    Isocline = 3  # FaceSplitBuilderFaceSplitTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FaceSplitBuilder(NXOpen.Builder):
    """
    Represents a face split operation  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.FaceSplitCollection.CreateFaceSplitBuilder`
    
    Default values.
    
    ==========  ======
    Property    Value
    ==========  ======
    Tolerance   0.025 
    ==========  ======
    
    .. versionadded:: NX7.5.0
    """
    
    class FaceSplitType():
        """
        the type for Split Face
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CurvesEdges", "using curve or edge for Split Face"
           "Plane", "using plane for Split Face"
           "Intersection", "using intersection curve of two body for Split Face"
           "Isocline", "using Isocline for Split Face"
        """
        CurvesEdges = 0  # FaceSplitBuilderFaceSplitTypeMemberType
        Plane = 1  # FaceSplitBuilderFaceSplitTypeMemberType
        Intersection = 2  # FaceSplitBuilderFaceSplitTypeMemberType
        Isocline = 3  # FaceSplitBuilderFaceSplitTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateIsoclines(self, pFacesToDivide: 'list[NXOpen.Face]') -> 'list[NXOpen.Curve]':
        """
        Create isocline
        
        Signature ``CreateIsoclines(pFacesToDivide)`` 
        
        :param pFacesToDivide:  faces to be divided with isoclines 
        :type pFacesToDivide: list of :py:class:`NXOpen.Face` 
        :returns:  isoclines on selected faces 
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FindMoldUnsplitFace(self) -> None:
        """
        Set the reference point to the selected face center.  
        
        Signature ``FindMoldUnsplitFace()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    DivObjects: NXOpen.ScCollector = ...
    """
    Returns  the dividing objects which will be different according to the split type 
    
    <hr>
    
    Getter Method
    
    Signature ``DivObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FaceToDivide: NXOpen.ScCollector = ...
    """
    Returns  the faces to be divided 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceToDivide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance is used to do dividing face operation
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: FaceSplitBuilderFaceSplitType = ...
    """
    Returns or sets  the split face type which splits a face by using curves, edges, plane, face, isolines or 
    intersected curves with another body
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FaceSplitBuilderFaceSplitType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param splitType: 
    :type splitType: :py:class:`NXOpen.Tooling.FaceSplitBuilderFaceSplitType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: FaceSplitBuilder = ...  # unknown typename


class ForceCalculationCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.ForceCalculationBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateForceCalculationBuilder(self) -> ForceCalculationBuilder:
        """
        Creates force calculation  builder 
        
        Signature ``CreateForceCalculationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ForceCalculationBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class FormingInsertBuilderParentTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FormingInsertBuilderParentTypes():
    """
    Specifies the parent part type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Control", "use PDW project's control part as parent part"
       "DieBase", "use PDW project's die base part as parent part"
       "SubDie", "use PDW project's sub-die base as parent part"
       "Die", "use PDW project's die part as parent part"
    """
    Control = 0  # FormingInsertBuilderParentTypesMemberType
    DieBase = 1  # FormingInsertBuilderParentTypesMemberType
    SubDie = 2  # FormingInsertBuilderParentTypesMemberType
    Die = 3  # FormingInsertBuilderParentTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FormingInsertBuilderBlankTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FormingInsertBuilderBlankTypes():
    """
    Specifies the blank type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Standard", "standard blank."
       "UserDefined", "user Defined blank."
    """
    Standard = 0  # FormingInsertBuilderBlankTypesMemberType
    UserDefined = 1  # FormingInsertBuilderBlankTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FormingInsertBuilderBlankPositionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FormingInsertBuilderBlankPositions():
    """
    Specifies the blank position. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PunchPlate", "the blank is on the punch plate"
       "StripperPlate", "the blank is on the stripper plate"
       "DiePlate", "the blank is on the die plate"
    """
    PunchPlate = 0  # FormingInsertBuilderBlankPositionsMemberType
    StripperPlate = 1  # FormingInsertBuilderBlankPositionsMemberType
    DiePlate = 2  # FormingInsertBuilderBlankPositionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FormingInsertBuilderDesignOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FormingInsertBuilderDesignOptions():
    """
    Specifies the design type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FormingPunch", "design the forming punch"
       "FormingDie", "design the forming die"
    """
    FormingPunch = 0  # FormingInsertBuilderDesignOptionsMemberType
    FormingDie = 1  # FormingInsertBuilderDesignOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FormingInsertBuilder(NXOpen.Builder):
    """
    Progressive Die Wizard  builder to design forming punch and die insert   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.FormingInsertCollection.CreateFormingInsertBuilder`
    
    Default values.
    
    ==========================  ======================================
    Property                    Value
    ==========================  ======================================
    AngleToleranceValue         45 
    --------------------------  --------------------------------------
    BlankPosition               PunchPlate 
    --------------------------  --------------------------------------
    BlankType                   Standard 
    --------------------------  --------------------------------------
    BottomPlateClearance        0 
    --------------------------  --------------------------------------
    DesignOption                FormingPunch 
    --------------------------  --------------------------------------
    DiePlateClearance           0 
    --------------------------  --------------------------------------
    HeightValue.Value           0 (millimeters part), 0 (inches part) 
    --------------------------  --------------------------------------
    ParentPart                  DieBase 
    --------------------------  --------------------------------------
    PunchPlateClearance         0 
    --------------------------  --------------------------------------
    SameWithPlate               0 
    --------------------------  --------------------------------------
    StripperPlateClearance      0 
    --------------------------  --------------------------------------
    TangentEdgeAngle            0 
    --------------------------  --------------------------------------
    TraverseInteriorEdges       0 
    --------------------------  --------------------------------------
    UseBottomPlateClearance     0 
    --------------------------  --------------------------------------
    UseDiePlateClearance        0 
    --------------------------  --------------------------------------
    UsePunchPlateClearance      0 
    --------------------------  --------------------------------------
    UseStripperPlateClearance   0 
    ==========================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    
    class ParentTypes():
        """
        Specifies the parent part type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Control", "use PDW project's control part as parent part"
           "DieBase", "use PDW project's die base part as parent part"
           "SubDie", "use PDW project's sub-die base as parent part"
           "Die", "use PDW project's die part as parent part"
        """
        Control = 0  # FormingInsertBuilderParentTypesMemberType
        DieBase = 1  # FormingInsertBuilderParentTypesMemberType
        SubDie = 2  # FormingInsertBuilderParentTypesMemberType
        Die = 3  # FormingInsertBuilderParentTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BlankTypes():
        """
        Specifies the blank type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Standard", "standard blank."
           "UserDefined", "user Defined blank."
        """
        Standard = 0  # FormingInsertBuilderBlankTypesMemberType
        UserDefined = 1  # FormingInsertBuilderBlankTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BlankPositions():
        """
        Specifies the blank position. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PunchPlate", "the blank is on the punch plate"
           "StripperPlate", "the blank is on the stripper plate"
           "DiePlate", "the blank is on the die plate"
        """
        PunchPlate = 0  # FormingInsertBuilderBlankPositionsMemberType
        StripperPlate = 1  # FormingInsertBuilderBlankPositionsMemberType
        DiePlate = 2  # FormingInsertBuilderBlankPositionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DesignOptions():
        """
        Specifies the design type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FormingPunch", "design the forming punch"
           "FormingDie", "design the forming die"
        """
        FormingPunch = 0  # FormingInsertBuilderDesignOptionsMemberType
        FormingDie = 1  # FormingInsertBuilderDesignOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateNewComponent(self, parentTag: NXOpen.TaggedObject, origin: NXOpen.Point3d) -> NXOpen.TaggedObject:
        """
        Create new component.  
        
        Signature ``CreateNewComponent(parentTag, origin)`` 
        
        :param parentTag:  the parent part  
        :type parentTag: :py:class:`NXOpen.TaggedObject` 
        :param origin:  the origin point to add  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  the new part instance  
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ReverseTrimDirection(self) -> None:
        """
        Reverse trim direction.  
        
        Signature ``ReverseTrimDirection()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ExtractFormingRegion(self) -> None:
        """
        Extract forming region.  
        
        Signature ``ExtractFormingRegion()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeletePunchOrDieComponent(self) -> None:
        """
        The action to delete the selected punch or die component 
        
        Signature ``DeletePunchOrDieComponent()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    AngleToleranceValue: float = ...
    """
    Returns or sets  the tangent edge angle tolerance value of forming region.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleToleranceValue`` 
    
    :param angleToleranceValue: 
    :type angleToleranceValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BlankPosition: FormingInsertBuilderBlankPositions = ...
    """
    Returns or sets  the blank position in punch plate or stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FormingInsertBuilderBlankPositions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankPosition`` 
    
    :param blankPosition: 
    :type blankPosition: :py:class:`NXOpen.Tooling.FormingInsertBuilderBlankPositions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BlankProfile: NXOpen.Section = ...
    """
    Returns  the blank profile to extrude the punch or die.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BlankType: FormingInsertBuilderBlankTypes = ...
    """
    Returns or sets  the blank type for punch or die.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FormingInsertBuilderBlankTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankType`` 
    
    :param blankType: 
    :type blankType: :py:class:`NXOpen.Tooling.FormingInsertBuilderBlankTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BottomPlateClearance: float = ...
    """
    Returns or sets  the clearance value of bottom backing plate .  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomPlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BottomPlateClearance`` 
    
    :param bottomPlateClr: 
    :type bottomPlateClr: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BoundaryFaces: NXOpen.ScCollector = ...
    """
    Returns  the boundary faces of forming region.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DesignOption: FormingInsertBuilderDesignOptions = ...
    """
    Returns or sets  the design option to design punch or die.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FormingInsertBuilderDesignOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignOption`` 
    
    :param designOption: 
    :type designOption: :py:class:`NXOpen.Tooling.FormingInsertBuilderDesignOptions` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DiePlateClearance: float = ...
    """
    Returns or sets  the clearance value of die plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``DiePlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiePlateClearance`` 
    
    :param diePlateClr: 
    :type diePlateClr: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HeightValue: NXOpen.Expression = ...
    """
    Returns  the height value of blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeightValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LowerValue: NXOpen.Expression = ...
    """
    Returns  the lower value of blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ParentPart: FormingInsertBuilderParentTypes = ...
    """
    Returns or sets  the parent part to create blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FormingInsertBuilderParentTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPart`` 
    
    :param parentPart: 
    :type parentPart: :py:class:`NXOpen.Tooling.FormingInsertBuilderParentTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name to create blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns:  Retruns parent part name  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPart:  Specifies the parent part name  
    :type parentPart: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchOrDieToEdit: NXOpen.SelectBody = ...
    """
    Returns  the punch or die to edit 
    
    <hr>
    
    Getter Method
    
    Signature ``PunchOrDieToEdit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPlateClearance: float = ...
    """
    Returns or sets  the clearance value of punch plate .  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPlateClearance`` 
    
    :param punchPlateClr: 
    :type punchPlateClr: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RenameComponent: bool = ...
    """
    Returns or sets  the option whether rename component.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponent`` 
    
    :param renameComponent: 
    :type renameComponent: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the option to reverse trim direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SameWithPlate: bool = ...
    """
    Returns or sets  the punch same with plate 
    
    <hr>
    
    Getter Method
    
    Signature ``SameWithPlate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SameWithPlate`` 
    
    :param sameWithPlate: 
    :type sameWithPlate: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SeedFace: NXOpen.ScCollector = ...
    """
    Returns  the seed face of forming region.  
    
    <hr>
    
    Getter Method
    
    Signature ``SeedFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectFormingFaces: NXOpen.ScCollector = ...
    """
    Returns  the forming faces of forming region.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFormingFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StripperPlateClearance: float = ...
    """
    Returns or sets  the option to use the stripper plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``StripperPlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StripperPlateClearance`` 
    
    :param stripperPlateClr: 
    :type stripperPlateClr: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TangentEdgeAngle: bool = ...
    """
    Returns or sets  the tangent edge angle of forming region.  
    
    <hr>
    
    Getter Method
    
    Signature ``TangentEdgeAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TangentEdgeAngle`` 
    
    :param tangentEdgeAngle: 
    :type tangentEdgeAngle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TraverseInteriorEdges: bool = ...
    """
    Returns or sets  the indication to traverse interior edges of forming region.  
    
    <hr>
    
    Getter Method
    
    Signature ``TraverseInteriorEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TraverseInteriorEdges`` 
    
    :param traverseInteriorEdges: 
    :type traverseInteriorEdges: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseBottomPlateClearance: bool = ...
    """
    Returns or sets  the option to use bottom backing plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseBottomPlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseBottomPlateClearance`` 
    
    :param useBPClearance: 
    :type useBPClearance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseDiePlateClearance: bool = ...
    """
    Returns or sets  the option to use die plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseDiePlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseDiePlateClearance`` 
    
    :param useDPClearance: 
    :type useDPClearance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UsePunchPlateClearance: bool = ...
    """
    Returns or sets  the option to use punch plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePunchPlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePunchPlateClearance`` 
    
    :param usePPClearance: 
    :type usePPClearance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseStripperPlateClearance: bool = ...
    """
    Returns or sets  the option to use stripper plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseStripperPlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseStripperPlateClearance`` 
    
    :param useSPClearance: 
    :type useSPClearance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: FormingInsertBuilder = ...  # unknown typename


class CreateBoxCollection(NXOpen.TaggedObjectCollection):
    """
    Creates CreateBoxBuilder collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBoxBuilder(self, boxFrec: NXOpen.NXObject) -> CreateBoxBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.CreateBoxBuilder`  
        
        Signature ``CreateBoxBuilder(boxFrec)`` 
        
        :param boxFrec:  bounding box feature object  
        :type boxFrec: :py:class:`NXOpen.NXObject` 
        :returns: :py:class:`NXOpen.Tooling.CreateBoxBuilder` object  
        :rtype: :py:class:`NXOpen.Tooling.CreateBoxBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR studio_free_form ("STUDIO FREE FORM") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    


class CalculateAreaBuilderSheetMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CalculateAreaBuilderSheetMethodType():
    """
    Represents the methods to create the projected sheet body. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", "Using projected curve method to create the sheet body."
       "Mesh", "Using mesh method to create the sheet body."
    """
    Curve = 0  # CalculateAreaBuilderSheetMethodTypeMemberType
    Mesh = 1  # CalculateAreaBuilderSheetMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CalculateAreaBuilder(NXOpen.Builder):
    """
    The CalculateArea builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.CalculateAreaCollection.CreateBuilder`
    
    Default values.
    
    =============================  =============================================
    Property                       Value
    =============================  =============================================
    AngularAccuracy.Value          1.0 
    -----------------------------  ---------------------------------------------
    ApproximationTolerance.Value   0.1 (millimeters part), 0.004 (inches part) 
    -----------------------------  ---------------------------------------------
    CreateSheet                    0 
    -----------------------------  ---------------------------------------------
    DimTolerance.Value             0.01 (millimeters part), 0.001 (inches part) 
    -----------------------------  ---------------------------------------------
    SheetMethod                    Curve 
    -----------------------------  ---------------------------------------------
    ToggleSideArea                 0 
    =============================  =============================================
    
    .. versionadded:: NX7.0.0
    """
    
    class SheetMethodType():
        """
        Represents the methods to create the projected sheet body. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", "Using projected curve method to create the sheet body."
           "Mesh", "Using mesh method to create the sheet body."
        """
        Curve = 0  # CalculateAreaBuilderSheetMethodTypeMemberType
        Mesh = 1  # CalculateAreaBuilderSheetMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngularAccuracy: NXOpen.Expression = ...
    """
    Returns  the angular accuracy used as the minimum angle between two reference planes.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularAccuracy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ApproximationTolerance: NXOpen.Expression = ...
    """
    Returns  the area calculation approximation tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``ApproximationTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    CreateSheet: bool = ...
    """
    Returns or sets  the option to indicate creating projected sheet or not 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateSheet`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateSheet`` 
    
    :param createSheet: 
    :type createSheet: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    DimTolerance: NXOpen.Expression = ...
    """
    Returns  the dim tolerance used as the area calculation tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DimTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PlaneDefine: NXOpen.NXObject = ...
    """
    Returns or sets  the plane defined as the reference plane to calculate area, the type could be planar face, datum plane and plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneDefine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneDefine`` 
    
    :param planeDefine: 
    :type planeDefine: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectionTarget: NXOpen.SelectBodyList = ...
    """
    Returns  the target body to calculate area.  
    
    It can be a single solid/sheet body, or multiple solid/sheet bodies.
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionTarget`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SheetMethod: CalculateAreaBuilderSheetMethodType = ...
    """
    Returns or sets  the method used to create the projected sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CalculateAreaBuilderSheetMethodType` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetMethod`` 
    
    :param sheetMethod: 
    :type sheetMethod: :py:class:`NXOpen.Tooling.CalculateAreaBuilderSheetMethodType` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    ToggleSideArea: bool = ...
    """
    Returns or sets  the toggle side area to indicate calculate side area or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleSideArea`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleSideArea`` 
    
    :param toggleSideArea: 
    :type toggleSideArea: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: CalculateAreaBuilder = ...  # unknown typename


class BlankGeneratorBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlankGeneratorBuilderTypes():
    """
    Specifies the option of blank generator operation type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CreateBlank", "Create a blank."
       "EditBlank", "Edit a blank."
    """
    CreateBlank = 0  # BlankGeneratorBuilderTypesMemberType
    EditBlank = 1  # BlankGeneratorBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlankGeneratorBuilderEditBlankTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlankGeneratorBuilderEditBlankType():
    """
    Specify the edit method.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Update", "Update the blank"
       "Remove", "Remove the blank"
    """
    Update = 0  # BlankGeneratorBuilderEditBlankTypeMemberType
    Remove = 1  # BlankGeneratorBuilderEditBlankTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlankGeneratorBuilderCreateBlankTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlankGeneratorBuilderCreateBlankType():
    """
    Specify the creation method.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Import", "Import blank"
       "Select", "Select blank"
       "Unform", "Unform blank"
    """
    Import = 0  # BlankGeneratorBuilderCreateBlankTypeMemberType
    Select = 1  # BlankGeneratorBuilderCreateBlankTypeMemberType
    Unform = 2  # BlankGeneratorBuilderCreateBlankTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlankGeneratorBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.BlankGeneratorBuilder`
    This class is for Blank Generator Design UI
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.BlankGeneratorCollection.CreateBlankGeneratorBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Specifies the option of blank generator operation type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CreateBlank", "Create a blank."
           "EditBlank", "Edit a blank."
        """
        CreateBlank = 0  # BlankGeneratorBuilderTypesMemberType
        EditBlank = 1  # BlankGeneratorBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EditBlankType():
        """
        Specify the edit method.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Update", "Update the blank"
           "Remove", "Remove the blank"
        """
        Update = 0  # BlankGeneratorBuilderEditBlankTypeMemberType
        Remove = 1  # BlankGeneratorBuilderEditBlankTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CreateBlankType():
        """
        Specify the creation method.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Import", "Import blank"
           "Select", "Select blank"
           "Unform", "Unform blank"
        """
        Import = 0  # BlankGeneratorBuilderCreateBlankTypeMemberType
        Select = 1  # BlankGeneratorBuilderCreateBlankTypeMemberType
        Unform = 2  # BlankGeneratorBuilderCreateBlankTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ImportBlank(self) -> None:
        """
        Create a blank by importing a blank.  
        
        Signature ``ImportBlank()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SelectBlank(self) -> None:
        """
        Create a blank by selecting a blank.  
        
        Signature ``SelectBlank()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UnformSheet(self) -> None:
        """
        Create a blank by unforming a sheet metal part.  
        
        Signature ``UnformSheet()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateBlank(self) -> None:
        """
        Update a blank.  
        
        Signature ``UpdateBlank()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveBlank(self) -> None:
        """
        Remove a blank.  
        
        Signature ``RemoveBlank()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    BlankNumber: str = ...
    """
    Returns or sets  the blank number.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankNumber`` 
    
    :returns:  Returns blank number 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankNumber`` 
    
    :param blankNumber:  Sets blank number  
    :type blankNumber: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BlankPart: NXOpen.TaggedObject = ...
    """
    Returns or sets  the part containing a blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankPart`` 
    
    :returns: Returns the blank tag 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankPart`` 
    
    :param blankTag: Sets the blank tag 
    :type blankTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CreateBlankOption: BlankGeneratorBuilderCreateBlankType = ...
    """
    Returns or sets  the method used to create a blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateBlankOption`` 
    
    :returns: Returns the create blank method 
    :rtype: :py:class:`NXOpen.Tooling.BlankGeneratorBuilderCreateBlankType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateBlankOption`` 
    
    :param createBlankOption:  Sets the create blank method 
    :type createBlankOption: :py:class:`NXOpen.Tooling.BlankGeneratorBuilderCreateBlankType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CreatedByInsert: bool = ...
    """
    Returns or sets  the indication that the blank to be updated was created by insert method.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreatedByInsert`` 
    
    :returns: Returns the insert blank flag 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreatedByInsert`` 
    
    :param insertBlankFlag: Sets the insert blank flag 
    :type insertBlankFlag: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DatumFace: NXOpen.SelectFace = ...
    """
    Returns  the face used to update a blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``DatumFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DisplayPartImport: NXOpen.TaggedObject = ...
    """
    Returns or sets  the display part needed while importing blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayPartImport`` 
    
    :returns: Returns the display part tag 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayPartImport`` 
    
    :param displayPartTag: Sets the display part tag 
    :type displayPartTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DisplayPartSelect: NXOpen.TaggedObject = ...
    """
    Returns or sets  the display part needed while selecting a blank .  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayPartSelect`` 
    
    :returns: Returns the display part tag 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayPartSelect`` 
    
    :param displayPartTag: Sets the display part tag 
    :type displayPartTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EditBlankOption: BlankGeneratorBuilderEditBlankType = ...
    """
    Returns or sets  the method used to edit a blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``EditBlankOption`` 
    
    :returns: Returns the edit blank method 
    :rtype: :py:class:`NXOpen.Tooling.BlankGeneratorBuilderEditBlankType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditBlankOption`` 
    
    :param editBlankOption:  Sets the edit blank method 
    :type editBlankOption: :py:class:`NXOpen.Tooling.BlankGeneratorBuilderEditBlankType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InsertNewBlank: NXOpen.TaggedObject = ...
    """
    Returns or sets  the new inserted blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsertNewBlank`` 
    
    :returns: Returns the insert new blank tag 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsertNewBlank`` 
    
    :param blankTag: Sets the insert new blank tag 
    :type blankTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SheetMetalPartName: str = ...
    """
    Returns or sets  the sheet metal part name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetalPartName`` 
    
    :returns:  Returns sheet part name  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetMetalPartName`` 
    
    :param sheetMetalPartName:  Sets sheet part name  
    :type sheetMetalPartName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StationaryFace: NXOpen.SelectFace = ...
    """
    Returns  the face used to create a blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``StationaryFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: BlankGeneratorBuilderTypes = ...
    """
    Returns or sets  the type of operation to perform - create or edit a blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:  Returns the type 
    :rtype: :py:class:`NXOpen.Tooling.BlankGeneratorBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type:  Sets the type 
    :type type: :py:class:`NXOpen.Tooling.BlankGeneratorBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    WorkPart: NXOpen.TaggedObject = ...
    """
    Returns or sets  the work part needed while creating blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkPart`` 
    
    :returns: Returns the work part tag 
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkPart`` 
    
    :param workPart: Sets the work part tag 
    :type workPart: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: BlankGeneratorBuilder = ...  # unknown typename


class Runner(NXOpen.Features.BodyFeature):
    """
    Represents a runner feature   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Tooling.RunnerBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: Runner = ...  # unknown typename


class GuidedExtensionManager():
    """
    Represents the manager of the GuidedExtension builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    """
    
    def CreateBuilder(self) -> GuidedExtensionBuilder:
        """
        Creates a GuidedExtension builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`GuidedExtensionBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.GuidedExtensionBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class EWDraftingBuilderModeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EWDraftingBuilderModeOption():
    """
    the drafting mode option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "create drawing"
       "Add", "add drawing"
       "Edit", "edit drawing"
    """
    Create = 0  # EWDraftingBuilderModeOptionMemberType
    Add = 1  # EWDraftingBuilderModeOptionMemberType
    Edit = 2  # EWDraftingBuilderModeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EWDraftingBuilderNameOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EWDraftingBuilderNameOption():
    """
    the drawing sheet name option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sh1", "sh1 sheet name"
       "Sh2", "sh2 sheet name"
    """
    Sh1 = 0  # EWDraftingBuilderNameOptionMemberType
    Sh2 = 1  # EWDraftingBuilderNameOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EWDraftingBuilderEDMTemplateOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EWDraftingBuilderEDMTemplateOption():
    """
    the template option of edm sheet type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "EdmTemplate1", "template1"
       "EdmTemplate2", "template2"
    """
    EdmTemplate1 = 0  # EWDraftingBuilderEDMTemplateOptionMemberType
    EdmTemplate2 = 1  # EWDraftingBuilderEDMTemplateOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EWDraftingBuilderCNCTemplateOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EWDraftingBuilderCNCTemplateOption():
    """
    the template option of cnc sheet type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CncTemplate1", "template1"
       "CncTemplate2", "template2"
    """
    CncTemplate1 = 0  # EWDraftingBuilderCNCTemplateOptionMemberType
    CncTemplate2 = 1  # EWDraftingBuilderCNCTemplateOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EWDraftingBuilderDrawingOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EWDraftingBuilderDrawingOption():
    """
    the drawing type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MasterModel", "master model"
       "SelfContained", "self contained"
    """
    MasterModel = 0  # EWDraftingBuilderDrawingOptionMemberType
    SelfContained = 1  # EWDraftingBuilderDrawingOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EWDraftingBuilder(NXOpen.Builder):
    """
    Represents the drafting builder which is used to create electrode drafting.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ElectrodeDesignCollection.CreateEwdraftingBuilder`
    
    Default values.
    
    ==================  =============
    Property            Value
    ==================  =============
    CncOption           0 
    ------------------  -------------
    CncTemplate         CncTemplate1 
    ------------------  -------------
    DraftingMode        Create 
    ------------------  -------------
    DrawingType         MasterModel 
    ------------------  -------------
    EdmOption           1 
    ------------------  -------------
    EdmTemplate         EdmTemplate1 
    ------------------  -------------
    IncludeOption       1 
    ------------------  -------------
    OrdinateDimension   0 
    ------------------  -------------
    OutputPDF           0 
    ------------------  -------------
    OutputSameSheet     0 
    ------------------  -------------
    RenameComponent     0 
    ------------------  -------------
    SheetName           Sh1 
    ------------------  -------------
    UseInstance         0 
    ==================  =============
    
    .. versionadded:: NX8.0.0
    """
    
    class ModeOption():
        """
        the drafting mode option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "create drawing"
           "Add", "add drawing"
           "Edit", "edit drawing"
        """
        Create = 0  # EWDraftingBuilderModeOptionMemberType
        Add = 1  # EWDraftingBuilderModeOptionMemberType
        Edit = 2  # EWDraftingBuilderModeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NameOption():
        """
        the drawing sheet name option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sh1", "sh1 sheet name"
           "Sh2", "sh2 sheet name"
        """
        Sh1 = 0  # EWDraftingBuilderNameOptionMemberType
        Sh2 = 1  # EWDraftingBuilderNameOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EDMTemplateOption():
        """
        the template option of edm sheet type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "EdmTemplate1", "template1"
           "EdmTemplate2", "template2"
        """
        EdmTemplate1 = 0  # EWDraftingBuilderEDMTemplateOptionMemberType
        EdmTemplate2 = 1  # EWDraftingBuilderEDMTemplateOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CNCTemplateOption():
        """
        the template option of cnc sheet type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CncTemplate1", "template1"
           "CncTemplate2", "template2"
        """
        CncTemplate1 = 0  # EWDraftingBuilderCNCTemplateOptionMemberType
        CncTemplate2 = 1  # EWDraftingBuilderCNCTemplateOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DrawingOption():
        """
        the drawing type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MasterModel", "master model"
           "SelfContained", "self contained"
        """
        MasterModel = 0  # EWDraftingBuilderDrawingOptionMemberType
        SelfContained = 1  # EWDraftingBuilderDrawingOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetEdmTemplateName(self, edmTemplateName: str) -> None:
        """
        The template name of edm sheet type to create drafting.  
        
        Signature ``SetEdmTemplateName(edmTemplateName)`` 
        
        :param edmTemplateName: 
        :type edmTemplateName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def SetCncTemplateName(self, cncTemplateName: str) -> None:
        """
        The template name of cnc sheet type to create drafting.  
        
        Signature ``SetCncTemplateName(cncTemplateName)`` 
        
        :param cncTemplateName: 
        :type cncTemplateName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    BlankComps: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the blank components used to create drafting.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankComps`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    CncOption: bool = ...
    """
    Returns or sets  the option to create cnc sheet type drafting or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``CncOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``CncOption`` 
    
    :param cncOption: 
    :type cncOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    CncTemplate: EWDraftingBuilderCNCTemplateOption = ...
    """
    Returns or sets  the template of cnc sheet type to create drafting.  
    
    <hr>
    
    Getter Method
    
    Signature ``CncTemplate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EWDraftingBuilderCNCTemplateOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``CncTemplate`` 
    
    :param cncTemplate: 
    :type cncTemplate: :py:class:`NXOpen.Tooling.EWDraftingBuilderCNCTemplateOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    DraftingMode: EWDraftingBuilderModeOption = ...
    """
    Returns or sets  the drafting mode: create, add or edit.  
    
    <hr>
    
    Getter Method
    
    Signature ``DraftingMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EWDraftingBuilderModeOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``DraftingMode`` 
    
    :param draftingMode: 
    :type draftingMode: :py:class:`NXOpen.Tooling.EWDraftingBuilderModeOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    DrawingType: EWDraftingBuilderDrawingOption = ...
    """
    Returns or sets  the drawing type used to create drafting.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EWDraftingBuilderDrawingOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingType`` 
    
    :param drawingType: 
    :type drawingType: :py:class:`NXOpen.Tooling.EWDraftingBuilderDrawingOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    EdmOption: bool = ...
    """
    Returns or sets  the option to create edm sheet type drafting or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``EdmOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``EdmOption`` 
    
    :param edmOption: 
    :type edmOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    EdmTemplate: EWDraftingBuilderEDMTemplateOption = ...
    """
    Returns or sets  the template of edm sheet type to create drafting.  
    
    <hr>
    
    Getter Method
    
    Signature ``EdmTemplate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EWDraftingBuilderEDMTemplateOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``EdmTemplate`` 
    
    :param edmTemplate: 
    :type edmTemplate: :py:class:`NXOpen.Tooling.EWDraftingBuilderEDMTemplateOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    HideCsys: bool = ...
    """
    Returns or sets  the option to hide the datum CSYS in the drawing sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``HideCsys`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``HideCsys`` 
    
    :param hideCsys: 
    :type hideCsys: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    IncludeFixture: bool = ...
    """
    Returns or sets  the option used to include fixture when creating drafting.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeFixture`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeFixture`` 
    
    :param includeFixture: 
    :type includeFixture: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    IncludeOption: bool = ...
    """
    Returns or sets  the option used to include the working component when creating drafting.  
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeOption`` 
    
    :param includeOption: 
    :type includeOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    MasterModelCncPartName: str = ...
    """
    Returns or sets  the name to create a master model part for CNC drawing.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterModelCncPartName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MasterModelCncPartName`` 
    
    :param masterModelPartName: 
    :type masterModelPartName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    MasterModelEdmPartName: str = ...
    """
    Returns or sets  the name to create a master model part for EDM drawing.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterModelEdmPartName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MasterModelEdmPartName`` 
    
    :param masterModelPartName: 
    :type masterModelPartName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    NameRule: str = ...
    """
    Returns or sets  the name rule used to create drafting part.  
    
    <hr>
    
    Getter Method
    
    Signature ``NameRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``NameRule`` 
    
    :param nameRule: 
    :type nameRule: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    OrdinateDimension: bool = ...
    """
    Returns or sets  the option used to set ordinate dimension.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrdinateDimension`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``OrdinateDimension`` 
    
    :param ordinateDimension: 
    :type ordinateDimension: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    OutputPDF: bool = ...
    """
    Returns or sets  the option used to output pdf file when creating drafting.  
    
    <hr>
    
    Getter Method
    
    Signature ``OutputPDF`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``OutputPDF`` 
    
    :param outputPDF: 
    :type outputPDF: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    OutputSameSheet: bool = ...
    """
    Returns or sets  the option used to output all the blanks in the same sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``OutputSameSheet`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``OutputSameSheet`` 
    
    :param outputSameSheet: 
    :type outputSameSheet: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    RenameComponent: bool = ...
    """
    Returns or sets  the option used to rename the part which is created.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponent`` 
    
    :param renameComponent: 
    :type renameComponent: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    SheetName: EWDraftingBuilderNameOption = ...
    """
    Returns or sets  the sheet name option used to edit drafting.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetName`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EWDraftingBuilderNameOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``SheetName`` 
    
    :param sheetName: 
    :type sheetName: :py:class:`NXOpen.Tooling.EWDraftingBuilderNameOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    UseInstance: bool = ...
    """
    Returns or sets  the option used to display and use instance of electrode to create drawing.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseInstance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``UseInstance`` 
    
    :param useInstance: 
    :type useInstance: bool 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Null: EWDraftingBuilder = ...  # unknown typename


class MoldFillingBuilderMoveOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MoldFillingBuilderMoveOption():
    """
    The modification options of the selected fill component.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Move", "Modifying current component"
       "CopyInstance", "Copying instance and Modifying"
       "CopyPart", "Copying new part and Modifying"
    """
    Move = 0  # MoldFillingBuilderMoveOptionMemberType
    CopyInstance = 1  # MoldFillingBuilderMoveOptionMemberType
    CopyPart = 2  # MoldFillingBuilderMoveOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MoldFillingBuilderInstallOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MoldFillingBuilderInstallOption():
    """
    The installation type of the fill component. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AddInstance", "Instance"
       "NewComponent", "New part"
    """
    AddInstance = 0  # MoldFillingBuilderInstallOptionMemberType
    NewComponent = 1  # MoldFillingBuilderInstallOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MoldFillingBuilder(NXOpen.Builder):
    """
    Builder used to add a gate/runner standard part from fill library, it returns None. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateMoldFillingBuilder`
    
    Default values.
    
    ===============  ============
    Property         Value
    ===============  ============
    Constraint       0 
    ---------------  ------------
    InstallOptions   AddInstance 
    ---------------  ------------
    IsBalanced       0 
    ---------------  ------------
    MoveAllGates     1 
    ---------------  ------------
    MoveOptions      Move 
    ---------------  ------------
    Rename           0 
    ===============  ============
    
    .. versionadded:: NX11.0.0
    """
    
    class MoveOption():
        """
        The modification options of the selected fill component.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Move", "Modifying current component"
           "CopyInstance", "Copying instance and Modifying"
           "CopyPart", "Copying new part and Modifying"
        """
        Move = 0  # MoldFillingBuilderMoveOptionMemberType
        CopyInstance = 1  # MoldFillingBuilderMoveOptionMemberType
        CopyPart = 2  # MoldFillingBuilderMoveOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InstallOption():
        """
        The installation type of the fill component. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AddInstance", "Instance"
           "NewComponent", "New part"
        """
        AddInstance = 0  # MoldFillingBuilderInstallOptionMemberType
        NewComponent = 1  # MoldFillingBuilderInstallOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DeleteFill(self) -> None:
        """
        Deletes selected fill component.  
        
        Signature ``DeleteFill()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def SetManipulatorPosition(self, matrix: NXOpen.Matrix3x3, position: NXOpen.Point3d) -> None:
        """
        Sets manipulator position.  
        
        Signature ``SetManipulatorPosition(matrix, position)`` 
        
        :param matrix:  Matrix of the specified coordinates  
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        :param position:  Origin point of the specified coordinates  
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def SaveEditingFillComponentPosition(self, matrix: NXOpen.Matrix3x3, position: NXOpen.Point3d) -> None:
        """
        Saves the position of fill component to be edit.  
        
        Signature ``SaveEditingFillComponentPosition(matrix, position)`` 
        
        :param matrix:  Transform matrix of the editing component  
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        :param position:  Transform origin point of the editing component  
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def SetParameterTreeData(self, sheetData: SpreadsheetData) -> None:
        """
        Sets spreadsheet data.  
        
        Signature ``SetParameterTreeData(sheetData)`` 
        
        :param sheetData:  Spreadsheet data  
        :type sheetData: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def SetFillClientData(self, clientData: StandardPartData) -> None:
        """
        Sets standard part client data.  
        
        Signature ``SetFillClientData(clientData)`` 
        
        :param clientData:  Standard part client data  
        :type clientData: :py:class:`NXOpen.Tooling.StandardPartData` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def EditComponentDimensions(self, addedPartOcc: NXOpen.Assemblies.Component) -> None:
        """
        Edits standard part dimensions.  
        
        Signature ``EditComponentDimensions(addedPartOcc)`` 
        
        :param addedPartOcc:  The component to be edit  
        :type addedPartOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def AddFillingComponents(self) -> None:
        """
        Adds gate or runner component.  
        
        Signature ``AddFillingComponents()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def SetActiveFillComponent(self, activePartOcc: NXOpen.Assemblies.Component) -> None:
        """
        Sets the specified component as the active component.  
        
        Signature ``SetActiveFillComponent(activePartOcc)`` 
        
        :param activePartOcc:  The component to be set as the active component 
        :type activePartOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def GetDataFromSelectedFillComponent(self, sheetData: SpreadsheetData) -> None:
        """
        Gets spreadsheet data from specified fill component.  
        
        Signature ``GetDataFromSelectedFillComponent(sheetData)`` 
        
        :param sheetData:  Spreadsheet data  
        :type sheetData: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def RemoveAddedComponents(self) -> None:
        """
        Removes added fill components.  
        
        Signature ``RemoveAddedComponents()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def GateLayoutAction(self) -> None:
        """
        Places the gate as product layout.  
        
        Signature ``GateLayoutAction()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateCloneObject(self) -> None:
        """
        Creates clone object.  
        
        Signature ``CreateCloneObject()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def PreviewSelectedFillComponent(self) -> None:
        """
        Preview selected fill component.  
        
        Signature ``PreviewSelectedFillComponent()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def AskFillLibraryData(self, isFromMemberView: bool, libName: str, libPath: str) -> None:
        """
        Gets fill standard part library data.  
        
        Signature ``AskFillLibraryData(isFromMemberView, libName, libPath)`` 
        
        :param isFromMemberView:  True if user drags an fill item from reuse library  
        :type isFromMemberView: bool 
        :param libName:  Name of the fill library  
        :type libName: str 
        :param libPath:  Path of the fill library  
        :type libPath: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def SetClientDataWithSelectedItem(self, catalogName: str, descriptiveName: str) -> None:
        """
        Gets selected part data, and assign it to standard part client data.  
        
        Signature ``SetClientDataWithSelectedItem(catalogName, descriptiveName)`` 
        
        :param catalogName:  Catalog name of the fill component  
        :type catalogName: str 
        :param descriptiveName:  Descriptive name of the fill component  
        :type descriptiveName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def GetCloneObject(self) -> CloneObject:
        """
        Gets clone client data.  
        
        Signature ``GetCloneObject()`` 
        
        :returns:  A :py:class:`NXOpen.Tooling.CloneObject` instance  
        :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def SetCloneObject(self, cloneObject: CloneObject) -> None:
        """
        Sets clone client data.  
        
        Signature ``SetCloneObject(cloneObject)`` 
        
        :param cloneObject:  A :py:class:`NXOpen.Tooling.CloneObject` instance  
        :type cloneObject: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    AddedGatesByRunner: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the gates added by selecting a runner body.  
    
    <hr>
    
    Getter Method
    
    Signature ``AddedGatesByRunner`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Constraint: bool = ...
    """
    Returns or sets  a value that indicates whether adding a constraint when placing a fill component.  
    
    <hr>
    
    Getter Method
    
    Signature ``Constraint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Constraint`` 
    
    :param constraint: 
    :type constraint: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    FillComponent: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the fill component to be edit.  
    
    <hr>
    
    Getter Method
    
    Signature ``FillComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    InstallOptions: MoldFillingBuilderInstallOption = ...
    """
    Returns or sets  the installation option when adding multiple gates one time.  
    
    <hr>
    
    Getter Method
    
    Signature ``InstallOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MoldFillingBuilderInstallOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstallOptions`` 
    
    :param installOptions: 
    :type installOptions: :py:class:`NXOpen.Tooling.MoldFillingBuilderInstallOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    IsBalanced: bool = ...
    """
    Returns or sets  a value that indicates whether placing gates as product layout.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsBalanced`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsBalanced`` 
    
    :param isBalanced: 
    :type isBalanced: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    MoveAllGates: bool = ...
    """
    Returns or sets  a value that indicates whether to move all gates or not when moving the active gate.  
    
    <hr>
    
    Getter Method
    
    Signature ``MoveAllGates`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoveAllGates`` 
    
    :param moveAllGates: 
    :type moveAllGates: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    MoveOptions: MoldFillingBuilderMoveOption = ...
    """
    Returns or sets  the modification option.  
    
    <hr>
    
    Getter Method
    
    Signature ``MoveOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MoldFillingBuilderMoveOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoveOptions`` 
    
    :param movecopy: 
    :type movecopy: :py:class:`NXOpen.Tooling.MoldFillingBuilderMoveOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    PositionObject: NXOpen.SelectNXObject = ...
    """
    Returns  the position object(point or runner body) used to place a gate component.  
    
    <hr>
    
    Getter Method
    
    Signature ``PositionObject`` 
    
    :returns:  The position object can be a point or a solid body  
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PositionPoint: NXOpen.Point = ...
    """
    Returns or sets  the point used to place a runner component.  
    
    <hr>
    
    Getter Method
    
    Signature ``PositionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositionPoint`` 
    
    :param positionPoint: 
    :type positionPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Rename: bool = ...
    """
    Returns or sets  a value that indicates whether the rename dialog should be activated when adding a fill component.  
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Null: MoldFillingBuilder = ...  # unknown typename


class StripLayoutStationInformationBuilderStationItemMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StripLayoutStationInformationBuilderStationItem():
    """
    Specifies the station items 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "One", "Define station number -- 01"
       "Two", "Define station number -- 02"
       "Three", "Define station number -- 03"
    """
    One = 0  # StripLayoutStationInformationBuilderStationItemMemberType
    Two = 1  # StripLayoutStationInformationBuilderStationItemMemberType
    Three = 2  # StripLayoutStationInformationBuilderStationItemMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StripLayoutStationInformationBuilder(NXOpen.Builder):
    """
    Strip Layout Process Description Builder of Tooling.  
    
    This builder's Commit doesn't produce any objects 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.StripLayoutCollection.CreateStripLayoutStationInformationBuilder`
    
    Default values.
    
    ==============  =====
    Property        Value
    ==============  =====
    ColorPicker     103 
    --------------  -----
    ScaleFactor     1.0 
    --------------  -----
    StationNumber   One 
    ==============  =====
    
    .. versionadded:: NX10.0.0
    """
    
    class StationItem():
        """
        Specifies the station items 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "One", "Define station number -- 01"
           "Two", "Define station number -- 02"
           "Three", "Define station number -- 03"
        """
        One = 0  # StripLayoutStationInformationBuilderStationItemMemberType
        Two = 1  # StripLayoutStationInformationBuilderStationItemMemberType
        Three = 2  # StripLayoutStationInformationBuilderStationItemMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ColorPicker: NXOpen.NXColor = ...
    """
    Returns or sets  the color picker 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorPicker`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColorPicker`` 
    
    :param colorPicker: 
    :type colorPicker: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ScaleFactor: float = ...
    """
    Returns or sets  the text scale size 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleFactor`` 
    
    :param scaleFactor: 
    :type scaleFactor: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StationInformation: str = ...
    """
    Returns or sets  the station information which will be added into specified strip 
    
    <hr>
    
    Getter Method
    
    Signature ``StationInformation`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StationInformation`` 
    
    :param stationInformation: 
    :type stationInformation: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StationNumber: StripLayoutStationInformationBuilderStationItem = ...
    """
    Returns or sets  the station number to define information 
    
    <hr>
    
    Getter Method
    
    Signature ``StationNumber`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StripLayoutStationInformationBuilderStationItem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StationNumber`` 
    
    :param stationNumber: 
    :type stationNumber: :py:class:`NXOpen.Tooling.StripLayoutStationInformationBuilderStationItem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: StripLayoutStationInformationBuilder = ...  # unknown typename


class TraverseLoopCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of TraverseLoopbuilder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> TraverseLoopBuilder:
        """
        Creates a TraverseLoop builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`TraverseLoopBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.TraverseLoopBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class AddReusableFeatureBuilderLayerOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddReusableFeatureBuilderLayerOptionType():
    """
    Represents the layer option type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Work", "Work Layer"
       "Original", "Original Layer"
       "AsSpecified", "As Specified Layer"
    """
    Work = 0  # AddReusableFeatureBuilderLayerOptionTypeMemberType
    Original = 1  # AddReusableFeatureBuilderLayerOptionTypeMemberType
    AsSpecified = 2  # AddReusableFeatureBuilderLayerOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddReusableFeatureBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.AddReusableFeatureBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AddReusableFeatureCollection.CreateBuilder`
    
    Default values.
    
    ===============  =====
    Property         Value
    ===============  =====
    LayerOption      Work 
    ---------------  -----
    SpecifiedLayer   1 
    ===============  =====
    
    .. versionadded:: NX7.5.0
    """
    
    class LayerOptionType():
        """
        Represents the layer option type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Work", "Work Layer"
           "Original", "Original Layer"
           "AsSpecified", "As Specified Layer"
        """
        Work = 0  # AddReusableFeatureBuilderLayerOptionTypeMemberType
        Original = 1  # AddReusableFeatureBuilderLayerOptionTypeMemberType
        AsSpecified = 2  # AddReusableFeatureBuilderLayerOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetCopyPasteBuilder(self) -> NXOpen.Features.CopyPasteBuilder:
        """
        Returns the copy paste builder 
        
        Signature ``GetCopyPasteBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.CopyPasteBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetUserExpressions(self) -> tuple:
        """
        Gets the user expressions value 
        
        Signature ``GetUserExpressions()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (userExpressionsName, userExpressionsValue). userExpressionsName is a list of str.   User expressions Name userExpressionsValue is a list of str.   User expressions Value 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUserExpressions(self, userExpressionsName: 'list[str]', userExpressionsValue: 'list[str]') -> None:
        """
        Sets the user expressions value 
        
        Signature ``SetUserExpressions(userExpressionsName, userExpressionsValue)`` 
        
        :param userExpressionsName:  User expressions Name  
        :type userExpressionsName: list of str 
        :param userExpressionsValue:  User expressions Value  
        :type userExpressionsValue: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    LayerOption: AddReusableFeatureBuilderLayerOptionType = ...
    """
    Returns or sets  the layer option 
    
    <hr>
    
    Getter Method
    
    Signature ``LayerOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AddReusableFeatureBuilderLayerOptionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LayerOption`` 
    
    :param layerOption: 
    :type layerOption: :py:class:`NXOpen.Tooling.AddReusableFeatureBuilderLayerOptionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: assemblies ("ASSEMBLIES MODULE")
    """
    SpecifiedLayer: int = ...
    """
    Returns or sets  the specified layer 
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifiedLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifiedLayer`` 
    
    :param specifiedLayer: 
    :type specifiedLayer: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: assemblies ("ASSEMBLIES MODULE")
    """
    Null: AddReusableFeatureBuilder = ...  # unknown typename


class ManufacturingGeometryCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Manufacturing Geometry builder.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> ManufacturingGeometryBuilder:
        """
        Creates a ManufacturingGeometry builder.  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`ManufacturingGeometryBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ManufacturingGeometryBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
        """
        ...
    
    
    def CreateFaceAttributeBuilder(self) -> FaceAttributeBuilder:
        """
        Creates a FaceAttribute builder.  
        
        Signature ``CreateFaceAttributeBuilder()`` 
        
        :returns: :py:class:`FaceAttributeBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.FaceAttributeBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
        """
        ...
    


class FastenerAssyCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of FastenerAssy   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> FastenerAssy:
        """
        Creates a FastenerAssy builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`FastenerAssy` object object  
        :rtype: :py:class:`NXOpen.Tooling.FastenerAssy` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    


class CornerDesignBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CornerDesignBuilderTypes():
    """
    The corner design type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "Create operation"
       "Edit", "Edit operation"
       "Delete", "Delete operation"
    """
    Create = 0  # CornerDesignBuilderTypesMemberType
    Edit = 1  # CornerDesignBuilderTypesMemberType
    Delete = 2  # CornerDesignBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CornerDesignBuilderCornerTypeOptMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CornerDesignBuilderCornerTypeOpt():
    """
    the corner types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Chamfer", "chamfer"
       "Fillet", "fillet"
       "Mickey", "mickey"
       "BunnyEar", " - "
    """
    Chamfer = 0  # CornerDesignBuilderCornerTypeOptMemberType
    Fillet = 1  # CornerDesignBuilderCornerTypeOptMemberType
    Mickey = 2  # CornerDesignBuilderCornerTypeOptMemberType
    BunnyEar = 3  # CornerDesignBuilderCornerTypeOptMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CornerDesignBuilderSelectFromOptMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CornerDesignBuilderSelectFromOpt():
    """
    the object selection options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Both", "both part body and pocket body"
       "PartBody", "part body only"
       "PocketBody", "pocket body only"
    """
    Both = 0  # CornerDesignBuilderSelectFromOptMemberType
    PartBody = 1  # CornerDesignBuilderSelectFromOptMemberType
    PocketBody = 2  # CornerDesignBuilderSelectFromOptMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CornerDesignBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.CornerDesignBuilder`,
    Corner Design is to provide tools to make corner.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.CornerDesignCollection.CreateCornerDesignBuilder`
    
    Default values.
    
    ===================  ========================================
    Property             Value
    ===================  ========================================
    ChamferAngle.Value   45 
    -------------------  ----------------------------------------
    CornerType           Chamfer 
    -------------------  ----------------------------------------
    Offset.Value         1 (millimeters part), 0.1 (inches part) 
    -------------------  ----------------------------------------
    RadiusDia.Value      5 (millimeters part), 0.5 (inches part) 
    -------------------  ----------------------------------------
    SelectFrom           Both 
    ===================  ========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        The corner design type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "Create operation"
           "Edit", "Edit operation"
           "Delete", "Delete operation"
        """
        Create = 0  # CornerDesignBuilderTypesMemberType
        Edit = 1  # CornerDesignBuilderTypesMemberType
        Delete = 2  # CornerDesignBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CornerTypeOpt():
        """
        the corner types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Chamfer", "chamfer"
           "Fillet", "fillet"
           "Mickey", "mickey"
           "BunnyEar", " - "
        """
        Chamfer = 0  # CornerDesignBuilderCornerTypeOptMemberType
        Fillet = 1  # CornerDesignBuilderCornerTypeOptMemberType
        Mickey = 2  # CornerDesignBuilderCornerTypeOptMemberType
        BunnyEar = 3  # CornerDesignBuilderCornerTypeOptMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SelectFromOpt():
        """
        the object selection options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Both", "both part body and pocket body"
           "PartBody", "part body only"
           "PocketBody", "pocket body only"
        """
        Both = 0  # CornerDesignBuilderSelectFromOptMemberType
        PartBody = 1  # CornerDesignBuilderSelectFromOptMemberType
        PocketBody = 2  # CornerDesignBuilderSelectFromOptMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ChamferAngle: NXOpen.Expression = ...
    """
    Returns  the chamfer angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ChamferAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CornerType: CornerDesignBuilderCornerTypeOpt = ...
    """
    Returns or sets  the corner type 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CornerDesignBuilderCornerTypeOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CornerType`` 
    
    :param cornerType: 
    :type cornerType: :py:class:`NXOpen.Tooling.CornerDesignBuilderCornerTypeOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    FirstVectorForBunnyEar: NXOpen.Direction = ...
    """
    Returns or sets  the first vector for bunny ear 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstVectorForBunnyEar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstVectorForBunnyEar`` 
    
    :param firstVectorForBunnyEar: 
    :type firstVectorForBunnyEar: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RadiusDia: NXOpen.Expression = ...
    """
    Returns  the corner radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusDia`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SecondVectorForBunnyEar: NXOpen.Direction = ...
    """
    Returns or sets  the second vector for bunny ear 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondVectorForBunnyEar`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondVectorForBunnyEar`` 
    
    :param secondVectorForBunnyEar: 
    :type secondVectorForBunnyEar: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectCorner: NXOpen.Features.SelectFeatureList = ...
    """
    Returns  the selected corner.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCorner`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeatureList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectEdge: NXOpen.SelectEdgeList = ...
    """
    Returns  the selected edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectFrom: CornerDesignBuilderSelectFromOpt = ...
    """
    Returns or sets  the selection options.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFrom`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CornerDesignBuilderSelectFromOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectFrom`` 
    
    :param selectFrom: 
    :type selectFrom: :py:class:`NXOpen.Tooling.CornerDesignBuilderSelectFromOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: CornerDesignBuilderTypes = ...
    """
    Returns or sets  the operation type of corner design.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CornerDesignBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.CornerDesignBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: CornerDesignBuilder = ...  # unknown typename


class TraverseLoopBuilder(NXOpen.Builder):
    """
    The builder class for Traverse Loop component which assists you 
    to select or traverse a string of adjacent curves or edges.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.TraverseLoopCollection.CreateBuilder`
    
    Default values.
    
    ===========  =======
    Property     Value
    ===========  =======
    BridgeGap    0 
    -----------  -------
    ByColor      0 
    -----------  -------
    EndEdge      0 
    -----------  -------
    TolSetting   0.0254 
    ===========  =======
    
    .. versionadded:: NX7.5.0
    """
    
    def ActBack(self) -> None:
        """
        Traverse back action.  
        
        Signature ``ActBack()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ActAccept(self) -> None:
        """
        Accept current path.  
        
        Signature ``ActAccept()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ActCycle(self) -> None:
        """
        Cycle candidate path.  
        
        Signature ``ActCycle()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ActClose(self) -> None:
        """
        Close current loop.  
        
        Signature ``ActClose()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ActExit(self) -> None:
        """
        Exit current loop.  
        
        Signature ``ActExit()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ActEdgeSelection(self, pTolSelObject: 'list[NXOpen.NXObject]', selections: 'list[NXOpen.NXObject]', deselections: 'list[NXOpen.NXObject]', cpoint: NXOpen.Point3d, selectEndEdge: bool) -> None:
        """
        Start traverse after selecting edges or curve.  
        
        Signature ``ActEdgeSelection(pTolSelObject, selections, deselections, cpoint, selectEndEdge)`` 
        
        :param pTolSelObject:  Total selected objects. 
        :type pTolSelObject: list of :py:class:`NXOpen.NXObject` 
        :param selections:  Last selected objects.  
        :type selections: list of :py:class:`NXOpen.NXObject` 
        :param deselections:  Last deselected objects.  
        :type deselections: list of :py:class:`NXOpen.NXObject` 
        :param cpoint:  Cursor point position when selecting one edge first time. 
        :type cpoint: :py:class:`NXOpen.Point3d` 
        :param selectEndEdge:  Whether last selected object is the end edge.  
        :type selectEndEdge: bool 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ResetTraverseData(self) -> None:
        """
        Reset traverse data after one loop closed.  
        
        Signature ``ResetTraverseData()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveCurves(self, pPartingLines: 'list[NXOpen.NXObject]') -> None:
        """
        Move extract curves that are not parting lines to the invisible layer.  
        
        Signature ``MoveCurves(pPartingLines)`` 
        
        :param pPartingLines:  parting lines obtained by Traverse Loop which can be edges or curves.  
        :type pPartingLines: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SwitchToPartinglineLayer(self) -> None:
        """
        Make parting layer as the work layer.  
        
        Signature ``SwitchToPartinglineLayer()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTraverseStartEndPoint(self, candidate: NXOpen.NXObject, pointCloseCursor: NXOpen.Point3d, selections: 'list[NXOpen.NXObject]') -> None:
        """
        Set start and end points for traversal.  
        
        Signature ``SetTraverseStartEndPoint(candidate, pointCloseCursor, selections)`` 
        
        :param candidate:  First selected object.  
        :type candidate: :py:class:`NXOpen.NXObject` 
        :param pointCloseCursor:  End point of selected object used to start traverse.  
        :type pointCloseCursor: :py:class:`NXOpen.Point3d` 
        :param selections:  All selected objects to traverse.  
        :type selections: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CheckGap(self, selections: 'list[NXOpen.NXObject]') -> tuple:
        """
        Calculate the gap between last selected objects and existing loop string, and find out the nearest end point.  
        
        Signature ``CheckGap(selections)`` 
        
        :param selections:  Last selected objects.  
        :type selections: list of :py:class:`NXOpen.NXObject` 
        :returns: a tuple 
        :rtype: A tuple consisting of (gap, nearPoint). gap is a float.   The gap between nearPoint and end point of existing loop string. nearPoint is a :py:class:`NXOpen.Point3d`.   End point of  last selected object near to end point of existing loop string. 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    BridgeGap: bool = ...
    """
    Returns or sets  the option to bridge gap or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``BridgeGap`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BridgeGap`` 
    
    :param bridgeGap: 
    :type bridgeGap: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ByColor: bool = ...
    """
    Returns or sets   a Traverse loop by following face color or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ByColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ByColor`` 
    
    :param byColor: 
    :type byColor: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EndEdge: bool = ...
    """
    Returns or sets  a Traverse loop by using start edge/end edge or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndEdge`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndEdge`` 
    
    :param endEdge: 
    :type endEdge: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ExitLoop: bool = ...
    """
    Returns or sets  the option to exit the current loop.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExitLoop`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExitLoop`` 
    
    :param isExitLoop: 
    :type isExitLoop: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectEdge: NXOpen.ScCollector = ...
    """
    Returns  the selected edges and curves which will form the loop.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TolSetting: float = ...
    """
    Returns or sets  the chaining tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``TolSetting`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TolSetting`` 
    
    :param tolSetting: 
    :type tolSetting: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: TraverseLoopBuilder = ...  # unknown typename


class InitProjBuilderProjTempOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InitProjBuilderProjTempOption():
    """
    Represents the project template option of InitProj, 
    defines the pre-defined project template. this template will be used as the basic assembly structure for this new project 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Default", "Indicates that the project template is 'Default'. The members of enum are changed in opening dialog"
    """
    Default = 0  # InitProjBuilderProjTempOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InitProjBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.InitProjBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.InitProjCollection.CreateInitProjBuilder`
    
    Default values.
    
    ===============  ========
    Property         Value
    ===============  ========
    InsertStripTog   0 
    ---------------  --------
    PartThickReal    0 
    ---------------  --------
    ProjTempOpt      Default 
    ---------------  --------
    RenameDiaTog     0 
    ---------------  --------
    UseSmfeatTog     0 
    ===============  ========
    
    .. versionadded:: NX6.0.0
    """
    
    class ProjTempOption():
        """
        Represents the project template option of InitProj, 
        defines the pre-defined project template. this template will be used as the basic assembly structure for this new project 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Default", "Indicates that the project template is 'Default'. The members of enum are changed in opening dialog"
        """
        Default = 0  # InitProjBuilderProjTempOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ProjPathButton(self) -> None:
        """
        Pop up File Selection dialog box to define the project path 
        
        Signature ``ProjPathButton()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MatLibButton(self) -> None:
        """
        Pop up material library speadsheet file 
        
        Signature ``MatLibButton()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ProjTempBut(self) -> None:
        """
        Pop up project template configuration spreadsheet 
        
        Signature ``ProjTempBut()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    InsertStripTog: bool = ...
    """
    Returns or sets  the option to insert strip in project 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertStripTog`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsertStripTog`` 
    
    :param insertStripTog: 
    :type insertStripTog: bool 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    PartMatStr: str = ...
    """
    Returns or sets  the material type of sheet metal part 
    
    <hr>
    
    Getter Method
    
    Signature ``PartMatStr`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartMatStr`` 
    
    :param partMatStr: 
    :type partMatStr: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PartThickReal: float = ...
    """
    Returns or sets  the sheet metal part thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``PartThickReal`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartThickReal`` 
    
    :param partThickReal: 
    :type partThickReal: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PartUnitStr: str = ...
    """
    Returns or sets  the units of the sheet metal part 
    
    <hr>
    
    Getter Method
    
    Signature ``PartUnitStr`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartUnitStr`` 
    
    :param partUnitStr: 
    :type partUnitStr: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ProjPathStr: str = ...
    """
    Returns or sets  the project path for a new project 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjPathStr`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjPathStr`` 
    
    :param projPathStr: 
    :type projPathStr: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ProjTempOpt: InitProjBuilderProjTempOption = ...
    """
    Returns or sets  the project template option 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjTempOpt`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InitProjBuilderProjTempOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjTempOpt`` 
    
    :param projTempOpt: 
    :type projTempOpt: :py:class:`NXOpen.Tooling.InitProjBuilderProjTempOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RenameDiaTog: bool = ...
    """
    Returns or sets  the option to rename parts in project 
    
    <hr>
    
    Getter Method
    
    Signature ``RenameDiaTog`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameDiaTog`` 
    
    :param renameDiaTog: 
    :type renameDiaTog: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StationaryFace: NXOpen.ScCollector = ...
    """
    Returns  the planar faces assigned as stationary face of strip 
    
    <hr>
    
    Getter Method
    
    Signature ``StationaryFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    UseSmfeatTog: bool = ...
    """
    Returns or sets  the option to use SMD features 
    
    <hr>
    
    Getter Method
    
    Signature ``UseSmfeatTog`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseSmfeatTog`` 
    
    :param useSmfeatTog: 
    :type useSmfeatTog: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: InitProjBuilder = ...  # unknown typename


class AddReusablePartPositionMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddReusablePartPositionMethod():
    """
    Represents the position method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Invalid", " - "
       "Absolute", " - "
       "Mate", " - "
       "Reposition", " - "
       "Wcs", " - "
       "Position", " - "
       "Point", "Position by point"
       "InferredOny", " - "
       "Routing", "Position using Routing"
    """
    Invalid = -1  # AddReusablePartPositionMethodMemberType
    Absolute = 0  # AddReusablePartPositionMethodMemberType
    Mate = 1  # AddReusablePartPositionMethodMemberType
    Reposition = 2  # AddReusablePartPositionMethodMemberType
    Wcs = 3  # AddReusablePartPositionMethodMemberType
    Position = 4  # AddReusablePartPositionMethodMemberType
    Point = 15  # AddReusablePartPositionMethodMemberType
    InferredOny = 16  # AddReusablePartPositionMethodMemberType
    Routing = 17  # AddReusablePartPositionMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddReusablePartModeMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddReusablePartModeMethod():
    """
    Represents adding or editing a reusable component mode method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Add", "Add reusable component"
       "Edit", "Edit reusable component"
    """
    Add = 1  # AddReusablePartModeMethodMemberType
    Edit = 2  # AddReusablePartModeMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddReusablePartComponentModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddReusablePartComponentMode():
    """
    Represents the component type of the added part 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", "normal reusable component"
       "Cadenas", "cadenas part component"
    """
    Normal = 1  # AddReusablePartComponentModeMemberType
    Cadenas = 3  # AddReusablePartComponentModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddReusablePartPocketBodyMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddReusablePartPocketBodyMethod():
    """
    Represents save pocket body information, updating or deleting a pocket body size mode method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Save pocket body information into attatched component"
       "Update", "Update the existed pocket body size"
       "Delete", "Delete pocket body"
    """
    NotSet = 1  # AddReusablePartPocketBodyMethodMemberType
    Update = 2  # AddReusablePartPocketBodyMethodMemberType
    Delete = 3  # AddReusablePartPocketBodyMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddReusablePart(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.AddReusablePart`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AddReusablePartCollection.CreateBuilder`
    
    Default values.
    
    =============================================================================================  ==========================================
    Property                                                                                       Value
    =============================================================================================  ==========================================
    ComponentPatternBuilder.PatternService.AlongPathDefinition.XOnPathSpacing.NCopies.Value        2 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.XOnPathSpacing.SpaceType            Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.XPathOption                         Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YDirectionOption                    Section 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YOnPathSpacing.NCopies.Value        1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YPathOption                         Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.NCopies.Value              1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.PitchDistance.Value        10 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.SpaceType                  Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.SpanDistance.Value         100 (millimeters part), 10 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.NCopies.Value         12 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.PitchAngle.Value      30 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.PitchDistance.Value   10 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.SpaceType             Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.SpanAngle.Value       360 (millimeters part), 360 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.UsePitchOption        Angle 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.CreateLastStaggered                  true 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.HorizontalRef.RotationAngle.Value    0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.IncludeSeedToggle                    true 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.RadialSpacing.NCopies.Value          1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.StaggerType                          None 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.AnglePitch.Value                        30 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.CountOfInstances.Value                  6 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.DirectionType                           Righthand 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.DistancePitch.Value                     10 (millimeters part), 0.4 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.HelixPitch.Value                        50 (millimeters part), 2 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.HelixSpan.Value                         100 (millimeters part), 4 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.NumberOfTurns.Value                     2 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.SizeOption                              CountAngleDistance 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternFill.FillMargin.Value                            0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternFill.FillOptions                                 None 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternFill.SimplifiedBoundaryToggle                    False 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.AlongOrientationOption               NormalToPath 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.CircularOrientationOption            FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.FollowFaceProjDirOption              PatternPlaneNormal 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.GeneralOrientationOption             Fixed 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.HelixOrientationOption               FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.LinearOrientationOption              Fixed 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.MirrorOrientationOption              FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.OrientationOption                    Fixed 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.PolygonOrientationOption             FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.SpiralOrientationOption              FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternType                                             Linear 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.NumberOfSides.Value                   6 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSizeOption                     Inscribed 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.NCopies.Value          4 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.PitchDistance.Value    25 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.SpaceType              Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.SpanAngle.Value        360 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.NCopies.Value           1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.PitchDistance.Value     25 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.SpanDistance.Value      100 (millimeters part), 4 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.CreateLastStaggered               true 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.SimplifiedLayoutType              Square 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.StaggerType                       None 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.XSpacing.NCopies.Value            2 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.YSpacing.NCopies.Value            1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.DirectionType                          Lefthand 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.NumberOfTurns.Value                    1 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.RadialPitch.Value                      50 (millimeters part), 2 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.SizeSpiralType                         NumberOfTurns 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.TotalAngle.Value                       360 (millimeters part), 360 (inches part) 
    =============================================================================================  ==========================================
    
    .. versionadded:: NX5.0.0
    """
    
    class PositionMethod():
        """
        Represents the position method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Invalid", " - "
           "Absolute", " - "
           "Mate", " - "
           "Reposition", " - "
           "Wcs", " - "
           "Position", " - "
           "Point", "Position by point"
           "InferredOny", " - "
           "Routing", "Position using Routing"
        """
        Invalid = -1  # AddReusablePartPositionMethodMemberType
        Absolute = 0  # AddReusablePartPositionMethodMemberType
        Mate = 1  # AddReusablePartPositionMethodMemberType
        Reposition = 2  # AddReusablePartPositionMethodMemberType
        Wcs = 3  # AddReusablePartPositionMethodMemberType
        Position = 4  # AddReusablePartPositionMethodMemberType
        Point = 15  # AddReusablePartPositionMethodMemberType
        InferredOny = 16  # AddReusablePartPositionMethodMemberType
        Routing = 17  # AddReusablePartPositionMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ModeMethod():
        """
        Represents adding or editing a reusable component mode method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Add", "Add reusable component"
           "Edit", "Edit reusable component"
        """
        Add = 1  # AddReusablePartModeMethodMemberType
        Edit = 2  # AddReusablePartModeMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ComponentMode():
        """
        Represents the component type of the added part 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Normal", "normal reusable component"
           "Cadenas", "cadenas part component"
        """
        Normal = 1  # AddReusablePartComponentModeMemberType
        Cadenas = 3  # AddReusablePartComponentModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PocketBodyMethod():
        """
        Represents save pocket body information, updating or deleting a pocket body size mode method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Save pocket body information into attatched component"
           "Update", "Update the existed pocket body size"
           "Delete", "Delete pocket body"
        """
        NotSet = 1  # AddReusablePartPocketBodyMethodMemberType
        Update = 2  # AddReusablePartPocketBodyMethodMemberType
        Delete = 3  # AddReusablePartPocketBodyMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateCloneObject(self, applicationType: ToolingApplication, assemName: str) -> CloneObject:
        """
        Creates the clone operation object  
        
        Signature ``CreateCloneObject(applicationType, assemName)`` 
        
        :param applicationType:  Wizard type  
        :type applicationType: :py:class:`NXOpen.Tooling.ToolingApplication` 
        :param assemName:  Project assembly name  
        :type assemName: str 
        :returns:  the new :py:class:`NXOpen.Tooling.CloneObject` instance  
        :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetInitialPosition(self) -> NXOpen.Point3d:
        """
        Gets the initial location, this is mainly used to get default add location of a reusable component  
        
        Signature ``GetInitialPosition()`` 
        
        :returns:  Drop location to initial parameter  
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetInitialPosition(self, dropLocation: NXOpen.Point3d) -> None:
        """
        Sets the initial location, this is mainly used to set default add location of a reusable component 
        
        Signature ``SetInitialPosition(dropLocation)`` 
        
        :param dropLocation:  Drop location to initial parameter  
        :type dropLocation: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSpreadsheetData(self) -> SpreadsheetData:
        """
        Gets the spreadsheet data, this is mainly used to get the attributes of a reusable component 
        
        Signature ``GetSpreadsheetData()`` 
        
        :returns:  Spreadsheet data  
        :rtype: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSpreadsheetData(self, spreadsheetData: SpreadsheetData) -> None:
        """
        Sets the spreadsheet data, this is mainly used to set the attributes of a reusable component
        
        Signature ``SetSpreadsheetData(spreadsheetData)`` 
        
        :param spreadsheetData:  Spreadsheet data  
        :type spreadsheetData: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetParentPart(self) -> NXOpen.Part:
        """
        Gets the parent part, this is mainly used to get context work part of a reusable component  
        
        Signature ``GetParentPart()`` 
        
        :returns:  The parent part to place the component  
        :rtype: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetParentPart(self, part: NXOpen.Part) -> None:
        """
        Sets the parent part, this is mainly used to set context work part of a reusable component
        
        Signature ``SetParentPart(part)`` 
        
        :param part:  The parent part to place the component  
        :type part: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAttachedGeometry(self) -> NXOpen.NXObject:
        """
        Gets the attached geometry, this is mainly used to get the initial parameter  
        
        Signature ``GetAttachedGeometry()`` 
        
        :returns:  Geometry to calculate the initial parameter  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAttachedGeometry(self, part: NXOpen.NXObject) -> None:
        """
        Sets the attached geometry, this is mainly used to set the initial parameter
        
        Signature ``SetAttachedGeometry(part)`` 
        
        :param part:  Geometry to calculate the initial parameter  
        :type part: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SaveLibraryPath(self, libName: str, libpath: str) -> None:
        """
        Saves the library name and path of the reusable component 
        
        Signature ``SaveLibraryPath(libName, libpath)`` 
        
        :param libName:  Library name  
        :type libName: str 
        :param libpath:  The path in the library  
        :type libpath: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def LoadReusableComponent(self, krxFile: str) -> None:
        """
        Loads the reusable component 
        
        Signature ``LoadReusableComponent(krxFile)`` 
        
        :param krxFile:  The KRX file  
        :type krxFile: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetComponentProperties(self, referenceSetName: str, componentName: str, layer: int) -> None:
        """
        Sets the reusable component properties 
        
        Signature ``SetComponentProperties(referenceSetName, componentName, layer)`` 
        
        :param referenceSetName:  The name of the reference set used to represent the new component  
        :type referenceSetName: str 
        :param componentName:  The name of the new component  
        :type componentName: str 
        :param layer:  The layer to place the new component on  
        :type layer: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateReusableComponent(self) -> None:
        """
        Updates the part data for a reusable component, this is mainly used to update parameter for a reusable component
        
        Signature ``UpdateReusableComponent()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdatePartData(self) -> None:
        """
        Updates the part data of a reusable component
        
        Signature ``UpdatePartData()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ConstructParametersData(self) -> None:
        """
        Constructs the parameters data, reads data from part family or spreadsheet and updates the parameter data in the part
        
        Signature ``ConstructParametersData()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AffirmReusableComponent(self) -> None:
        """
        Affirms insertion of the reusable component
        
        Signature ``AffirmReusableComponent()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateReusableConstraints(self, index: int) -> None:
        """
        Creates constraints for the reusable component
        
        Signature ``CreateReusableConstraints(index)`` 
        
        :param index:   The index part is to create constraints  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteReusableConstraints(self) -> None:
        """
        Deletes constraints for the reusable component
        
        Signature ``DeleteReusableConstraints()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ReverseComponentDirection(self, inputPosition: NXOpen.Point3d, inputDirection: NXOpen.Point3d, length: float, outputPosition: NXOpen.Point3d, outputDirection: NXOpen.Point3d) -> NXOpen.NXObject:
        """
        Reverses the direction of the reusable component if the reusable component is placed on a face.  
        
        Signature ``ReverseComponentDirection(inputPosition, inputDirection, length, outputPosition, outputDirection)`` 
        
        :param inputPosition:  The input position of componnent  
        :type inputPosition: :py:class:`NXOpen.Point3d` 
        :param inputDirection:  The input direction of componnent 
        :type inputDirection: :py:class:`NXOpen.Point3d` 
        :param length:  The input length of componnent 
        :type length: float 
        :param outputPosition:  The output position of componnent  
        :type outputPosition: :py:class:`NXOpen.Point3d` 
        :param outputDirection:  The output position of componnent  
        :type outputDirection: :py:class:`NXOpen.Point3d` 
        :returns:  The output face of the componnent on  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateReusablePocket(self, commit: bool) -> None:
        """
        Creates pocket for a reusable component
        
        Signature ``CreateReusablePocket(commit)`` 
        
        :param commit:  if the variable is true, the component needs pocket  
        :type commit: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteReusablePocket(self) -> None:
        """
        Deletes pocket for a reusable component
        
        Signature ``DeleteReusablePocket()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateComponents(self, count: int, selobj: NXOpen.NXObject) -> None:
        """
        Creates an array instance of a component
        
        Signature ``CreateComponents(count, selobj)`` 
        
        :param count:  The count is array instance number  
        :type count: int 
        :param selobj:  The selected object is FACE type, the reusable component place on the face  
        :type selobj: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteComponents(self, count: int) -> None:
        """
        Deletes an array instance of a component
        
        Signature ``DeleteComponents(count)`` 
        
        :param count:  The count is array instance number  
        :type count: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddHoleInstance(self, inputDirection: NXOpen.Point3d, inputPostion: NXOpen.Point3d) -> None:
        """
        Adds series of reusable components in holes 
        
        Signature ``AddHoleInstance(inputDirection, inputPostion)`` 
        
        :param inputDirection:  The input direction of component 
        :type inputDirection: :py:class:`NXOpen.Point3d` 
        :param inputPostion:  The input position of componnent  
        :type inputPostion: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddHoleInstanceForCsys(self, inputDirection: NXOpen.Point3d, inputPostion: NXOpen.Point3d, selCsys: NXOpen.NXObject) -> None:
        """
        Adds series of reusable components in csys 
        
        Signature ``AddHoleInstanceForCsys(inputDirection, inputPostion, selCsys)`` 
        
        :param inputDirection:  The input direction of component 
        :type inputDirection: :py:class:`NXOpen.Point3d` 
        :param inputPostion:  The input position of componnent  
        :type inputPostion: :py:class:`NXOpen.Point3d` 
        :param selCsys:  The input csys of component  
        :type selCsys: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def ReversePreviewComponent(self, rememberDir: NXOpen.Point3d) -> None:
        """
        Reverses the direction of the reusable component if the reusable component is not placed on a face.  
        
        Signature ``ReversePreviewComponent(rememberDir)`` 
        
        :param rememberDir:  The original position of component  
        :type rememberDir: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveOldInstance(self, index: int) -> None:
        """
        Removes the instance from the part data
        
        Signature ``RemoveOldInstance(index)`` 
        
        :param index:  The index of component instance  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddNewInstance(self, partOcc: NXOpen.Assemblies.Component, index: int) -> None:
        """
        Adds a new instance
        
        Signature ``AddNewInstance(partOcc, index)`` 
        
        :param partOcc:  Add the new occurance into the part data 
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param index:  The index of component instance  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditReusableComponent(self, partOcc: NXOpen.Assemblies.Component) -> None:
        """
        Edits a reusable component
        
        Signature ``EditReusableComponent(partOcc)`` 
        
        :param partOcc:  The component occurance to edit in the part data 
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddPartOccurance(self, partOcc: NXOpen.Assemblies.Component) -> None:
        """
        Adds occurance into the part data
        
        Signature ``AddPartOccurance(partOcc)`` 
        
        :param partOcc:  The component occurance to add in the part data 
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddComponentProperty(self, compName: str, refsetName: str, layer: int) -> None:
        """
        Adds Component Properties
        
        Signature ``AddComponentProperty(compName, refsetName, layer)`` 
        
        :param compName:  The name of the reference set used to represent the new component  
        :type compName: str 
        :param refsetName:   The layer to place the new component on  
        :type refsetName: str 
        :param layer: 
        :type layer: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def InsertReusableComponent(self, instIndex: int, needTransform: bool) -> None:
        """
        Inserts the component into the part data
        
        Signature ``InsertReusableComponent(instIndex, needTransform)`` 
        
        :param instIndex:  The index of the new component being added in the part data 
        :type instIndex: int 
        :param needTransform:  Whether the component needs to be transformed in the fastener assembly  
        :type needTransform: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddComponentMode(self, modeMethod: AddReusablePartModeMethod) -> None:
        """
        Adds mode for a reusable component
        
        Signature ``AddComponentMode(modeMethod)`` 
        
        :param modeMethod: 
        :type modeMethod: :py:class:`NXOpen.Tooling.AddReusablePartModeMethod` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCloneObject(self, cloneObject: CloneObject) -> None:
        """
        Sets the clone operation object 
        
        Signature ``SetCloneObject(cloneObject)`` 
        
        :param cloneObject:  A :py:class:`NXOpen.Tooling.CloneObject` instance  
        :type cloneObject: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetCloneObject(self) -> CloneObject:
        """
        Gets the clone operation object  
        
        Signature ``GetCloneObject()`` 
        
        :returns:  A :py:class:`NXOpen.Tooling.CloneObject` instance  
        :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddClonePartName(self, clonedpartname: str) -> None:
        """
        Adds clone part name
        
        Signature ``AddClonePartName(clonedpartname)`` 
        
        :param clonedpartname:  The new clone part name 
        :type clonedpartname: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SubtituteReusableComponent(self, substituteInstance: bool) -> None:
        """
        Subtitutes a reusable part
        
        Signature ``SubtituteReusableComponent(substituteInstance)`` 
        
        :param substituteInstance:  Whether the resuable component needs to be substituted  
        :type substituteInstance: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveDesignElement(self) -> None:
        """
        Removes design element component
        
        Signature ``RemoveDesignElement()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveReusableComponent(self, translation: NXOpen.Vector3d, rotation: NXOpen.Matrix3x3, index: int) -> None:
        """
        Moves a reusable component to a selected position
        
        Signature ``MoveReusableComponent(translation, rotation, index)`` 
        
        :param translation:  The translation data  
        :type translation: :py:class:`NXOpen.Vector3d` 
        :param rotation:  The rotation data  
        :type rotation: :py:class:`NXOpen.Matrix3x3` 
        :param index:  The reusable component index in the part data   
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveReusableComponent(self, index: int) -> None:
        """
        Removes a reusable component
        
        Signature ``RemoveReusableComponent(index)`` 
        
        :param index:  The reusable component index in the part data 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSearchGeometry(self, isTrunOn: bool) -> None:
        """
        Sets the search geometry for a reusable component
        
        Signature ``SetSearchGeometry(isTrunOn)`` 
        
        :param isTrunOn:  Whehter the search geometry toggle is turned on, which is on the add reusable component dialog 
        :type isTrunOn: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DestroyReusableBuilder(self) -> None:
        """
        Destroys reusable builder data
        
        Signature ``DestroyReusableBuilder()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RecordReusableComponent(self, fileName: str) -> None:
        """
        Records the existing reusable component with the same name
        
        Signature ``RecordReusableComponent(fileName)`` 
        
        :param fileName: The reusable component name  
        :type fileName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateReusablePocket(self) -> None:
        """
        Updates the pocket for a reusable component
        
        Signature ``UpdateReusablePocket()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDesignElement(self) -> 'list[NXOpen.Assemblies.Component]':
        """
        Gets an array of design elements 
        
        Signature ``GetDesignElement()`` 
        
        :returns:  The design elements 
        :rtype: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetReusablePocketBuilder(self, pocketTag: ReusablePocketBuilder) -> None:
        """
        Sets the reusable pocket builder
        
        Signature ``SetReusablePocketBuilder(pocketTag)`` 
        
        :param pocketTag:  The reusable component pocket builder 
        :type pocketTag: :py:class:`NXOpen.Tooling.ReusablePocketBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetReusablePocketBuilder(self) -> ReusablePocketBuilder:
        """
        Gets the reusable pocket builder 
        
        Signature ``GetReusablePocketBuilder()`` 
        
        :returns:  The reusable component pocket builder 
        :rtype: :py:class:`NXOpen.Tooling.ReusablePocketBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetEnablePreview(self, isTrunOn: bool) -> None:
        """
        Sets the toggle of the Preview widget
        
        Signature ``SetEnablePreview(isTrunOn)`` 
        
        :param isTrunOn:  Whehter preview toggle is turned on, which is on the add reusable component dialog 
        :type isTrunOn: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetReplaceTemplate(self, replaceTemplate: NXOpen.Part) -> None:
        """
        Sets the replace template part
        
        Signature ``SetReplaceTemplate(replaceTemplate)`` 
        
        :param replaceTemplate:  The replace template part 
        :type replaceTemplate: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetComponentToReplace(self, index: int, replaceComponent: NXOpen.Assemblies.Component) -> None:
        """
        Sets the selected component to replace
        
        Signature ``SetComponentToReplace(index, replaceComponent)`` 
        
        :param index:  The index for component to replace  
        :type index: int 
        :param replaceComponent:  The component to replace 
        :type replaceComponent: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ReplaceReusableComponent(self) -> None:
        """
        Replace reusable component
        
        Signature ``ReplaceReusableComponent()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveFamilyInstance(self, part: NXOpen.Part) -> None:
        """
        Removes an instance of a part family member 
        
        Signature ``RemoveFamilyInstance(part)`` 
        
        :param part: 
        :type part: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePatternComponent(self, createPattern: bool) -> None:
        """
        Create the pattern component when the positioining pattern sketch feature is not exsit; edit pattern component when the positioining pattern feature is exsit
        
        Signature ``CreatePatternComponent(createPattern)`` 
        
        :param createPattern:  Flag to decide whether to create pattern component or edit, set flag as true to create and set flag false to edit  
        :type createPattern: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindPositioningFeatureSet(self) -> NXOpen.Features.Feature:
        """
        Find the positioning feature set by pattern sketch  
        
        Signature ``FindPositioningFeatureSet()`` 
        
        :returns:  Positioning feature set  
        :rtype: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetComponentHandleToPoint(self) -> None:
        """
        Keep the reusable component handle information into its associated pattern point
        
        Signature ``SetComponentHandleToPoint()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateCadenasParameter(self, paraName: str, paraValue: str) -> None:
        """
        Updates the CADENAS component by given parameter name and value, 
        the name can also be retrieved by calling the following methods.  
        
        :py:meth:`NXOpen.Tooling.AddReusablePart.GetSpreadsheetData`,
        :py:meth:`NXOpen.Tooling.SpreadsheetData.GetParameterValue`,
        :py:meth:`NXOpen.Tooling.SpreadsheetDataParameter.ParameterName``
        
        Signature ``UpdateCadenasParameter(paraName, paraValue)`` 
        
        :param paraName:  The parameter name  
        :type paraName: str 
        :param paraValue:  The parameter value  
        :type paraValue: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ModifyParametersByRow(self, index: int) -> None:
        """
        Modify parameters according to row index.  
        
        The number of the row is defined by the template data file. 
        
        Signature ``ModifyParametersByRow(index)`` 
        
        :param index:  The index is the row of the template data file  
        :type index: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddCriteriaToInstance(self, hasCriteria: bool, expStr: str, addValue: str) -> None:
        """
        Sets criteria into instance 
        
        Signature ``AddCriteriaToInstance(hasCriteria, expStr, addValue)`` 
        
        :param hasCriteria: 
        :type hasCriteria: bool 
        :param expStr: 
        :type expStr: str 
        :param addValue: 
        :type addValue: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdatePocketBody(self, createPattern: bool, updatePocketBody: AddReusablePartPocketBodyMethod) -> None:
        """
        Update pocket body for mw library reusable component 
        
        Signature ``UpdatePocketBody(createPattern, updatePocketBody)`` 
        
        :param createPattern:  Flag to decide whether to create pocket body pattern or not 
        :type createPattern: bool 
        :param updatePocketBody:  Flag to decide whether to create pocket body, delete or update 0: add; 1: delete; 2:update  
        :type updatePocketBody: :py:class:`NXOpen.Tooling.AddReusablePartPocketBodyMethod` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePositioningFeatureOnPoint(self, selobj: NXOpen.NXObject, inputPosition: NXOpen.Point3d, centerFace: bool) -> None:
        """
        Create positioning feature on the given position
        
        Signature ``CreatePositioningFeatureOnPoint(selobj, inputPosition, centerFace)`` 
        
        :param selobj:  The selected object is FACE type, the reusable component place on the face  
        :type selobj: :py:class:`NXOpen.NXObject` 
        :param inputPosition:  The input position 
        :type inputPosition: :py:class:`NXOpen.Point3d` 
        :param centerFace:  whether to use face center as location 
        :type centerFace: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SavePositioningOriginPlacement(self, positionOffSet: str, placementOriginIndex: int) -> None:
        """
        Keep positioning offset and placement index
        
        Signature ``SavePositioningOriginPlacement(positionOffSet, placementOriginIndex)`` 
        
        :param positionOffSet:  The positionging offset value that defined in the krx file 
        :type positionOffSet: str 
        :param placementOriginIndex:  The positioning placement origin index that defined in the krx file 
        :type placementOriginIndex: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdatePositioningOffset(self, positionOffSet: str) -> None:
        """
        Update positioning offset
        
        Signature ``UpdatePositioningOffset(positionOffSet)`` 
        
        :param positionOffSet:  The positionging offset value that defined in the krx file 
        :type positionOffSet: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUpdateComponentName(self, updateComponentName: bool) -> None:
        """
        Sets the update component name for a reusable component
        
        Signature ``SetUpdateComponentName(updateComponentName)`` 
        
        :param updateComponentName:  Whehter the component name will be updated or not for copied part 
        :type updateComponentName: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    ComponentPatternBuilder: NXOpen.Assemblies.ComponentPatternBuilder = ...
    """
    Returns or sets  the current component pattern builder
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentPatternBuilder`` 
    
    :returns:  The reusable component pattern builder 
    :rtype: :py:class:`NXOpen.Assemblies.ComponentPatternBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ComponentPatternBuilder`` 
    
    :param patternComponentBuilderTag:  The reusable component pattern builder 
    :type patternComponentBuilderTag: :py:class:`NXOpen.Assemblies.ComponentPatternBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ComponentType: AddReusablePartComponentMode = ...
    """
    Returns or sets  the current component type
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AddReusablePartComponentMode` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ComponentType`` 
    
    :param partType: 
    :type partType: :py:class:`NXOpen.Tooling.AddReusablePartComponentMode` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PositionMode: AddReusablePartPositionMethod = ...
    """
    Returns or sets   the current position method
    
    <hr>
    
    Getter Method
    
    Signature ``PositionMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AddReusablePartPositionMethod` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositionMode`` 
    
    :param positionMode: 
    :type positionMode: :py:class:`NXOpen.Tooling.AddReusablePartPositionMethod` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    PositioningFeature: NXOpen.Sketch = ...
    """
    Returns or sets  the positioning feature that needed for reusable component 
    
    <hr>
    
    Getter Method
    
    Signature ``PositioningFeature`` 
    
    :returns:  Positioning feature  
    :rtype: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositioningFeature`` 
    
    :param sketch:  Positioning feature  
    :type sketch: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: AddReusablePart = ...  # unknown typename


class InitProjectCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of InitProject builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> InitProjectBuilder:
        """
        Creates a InitProject builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`InitProjectBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.InitProjectBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class ReferenceBlendCollection(NXOpen.TaggedObjectCollection):
    """
    Creates reference blend collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateReferenceBlendBuilder(self) -> ReferenceBlendBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.ReferenceBlendBuilder`  
        
        Signature ``CreateReferenceBlendBuilder()`` 
        
        :returns: :py:class:`NXOpen.Tooling.ReferenceBlendBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ReferenceBlendBuilder` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: None.
        """
        ...
    


class ScrapDesignCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ScrapDesign   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateScrapDesignBuilder(self) -> ScrapDesignBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.ScrapDesignBuilder`  
        
        Signature ``CreateScrapDesignBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class ObjectAttributeManagementCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateObjectAttributeManagementBuilder(self) -> ObjectAttributeManagementBuilder:
        """
        Creates object attribute management builder.  
        
        Signature ``CreateObjectAttributeManagementBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    


class BackingPadBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BackingPadBuilderTypes():
    """
    types of backing pad design 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "KfBoundBox", " - "
       "UserDefined", " - "
       "DeletePad", " - "
    """
    KfBoundBox = 0  # BackingPadBuilderTypesMemberType
    UserDefined = 1  # BackingPadBuilderTypesMemberType
    DeletePad = 2  # BackingPadBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BackingPadBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.BackingPadBuilder` which is used to create or delete the Backing Pad.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateBackingPadBuilder`
    
    Default values.
    
    ==========================================  ========================================
    Property                                    Value
    ==========================================  ========================================
    OffsetValueLinearDimension.Value            5 (millimeters part), 0.2 (inches part) 
    ------------------------------------------  ----------------------------------------
    OffsetValueLinearDimensionNegativeX.Value   5 (millimeters part), 0.2 (inches part) 
    ------------------------------------------  ----------------------------------------
    OffsetValueLinearDimensionNegativeY.Value   5 (millimeters part), 0.2 (inches part) 
    ------------------------------------------  ----------------------------------------
    OffsetValueLinearDimensionPositiveX.Value   5 (millimeters part), 0.2 (inches part) 
    ------------------------------------------  ----------------------------------------
    OffsetValueLinearDimensionPositiveY.Value   5 (millimeters part), 0.2 (inches part) 
    ------------------------------------------  ----------------------------------------
    PadHeightLinearDimension.Value              50 (millimeters part), 2 (inches part) 
    ==========================================  ========================================
    
    .. versionadded:: NX10.0.0
    """
    
    class Types():
        """
        types of backing pad design 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "KfBoundBox", " - "
           "UserDefined", " - "
           "DeletePad", " - "
        """
        KfBoundBox = 0  # BackingPadBuilderTypesMemberType
        UserDefined = 1  # BackingPadBuilderTypesMemberType
        DeletePad = 2  # BackingPadBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def WaveFaces(self) -> None:
        """
        Wave selected faces to support journamation 
        
        Signature ``WaveFaces()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteWavedFaces(self) -> None:
        """
        Delete waved faces to support journamation 
        
        Signature ``DeleteWavedFaces()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    OffsetValueLinearDimension: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeX: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative x 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeY: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative y 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveX: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive x 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveY: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive y 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PadBoolean: NXOpen.GeometricUtilities.BooleanOperation = ...
    """
    Returns  the pad boolean 
    
    <hr>
    
    Getter Method
    
    Signature ``PadBoolean`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanOperation` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PadHeightLinearDimension: NXOpen.Expression = ...
    """
    Returns  the pad height linear dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``PadHeightLinearDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PreviousWorkPart: NXOpen.Part = ...
    """
    Returns or sets  the previous work part 
    
    <hr>
    
    Getter Method
    
    Signature ``PreviousWorkPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreviousWorkPart`` 
    
    :param previousWorkPart: 
    :type previousWorkPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectComponent: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the select target component in which to design backing pad 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SelectCurve: NXOpen.Section = ...
    """
    Returns  the select curve 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SelectFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the select faces 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SelectPad: NXOpen.Features.SelectFeatureList = ...
    """
    Returns  the select backing pad feature to delete 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPad`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeatureList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Type: BackingPadBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BackingPadBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.BackingPadBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: BackingPadBuilder = ...  # unknown typename


class DieDesPierceInsertBuilderDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieDesPierceInsertBuilderDirection():
    """
    Represents the thickness direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Upper", " - "
       "Lower", " - "
    """
    Upper = 0  # DieDesPierceInsertBuilderDirectionMemberType
    Lower = 1  # DieDesPierceInsertBuilderDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieDesPierceInsertBuilderHoleShapeTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieDesPierceInsertBuilderHoleShapeTypes():
    """
    Represents the hole shape type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circular", " - "
       "Oblong", " - "
       "Square", " - "
       "Rectangular", " - "
       "RoundedRectangular", " - "
       "ChordRectangular", " - "
       "Hexagonal", " - "
       "Other", " - "
    """
    Circular = 0  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
    Oblong = 1  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
    Square = 2  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
    Rectangular = 3  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
    RoundedRectangular = 4  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
    ChordRectangular = 5  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
    Hexagonal = 6  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
    Other = 7  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieDesPierceInsertBuilder(NXOpen.Builder):
    """
    Represents Die Design Pierce Insert builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieDesPierceInsertBuilder`
    
    Default values.
    
    =========================  ======
    Property                   Value
    =========================  ======
    ThicknessDirectionOption   Upper 
    -------------------------  ------
    ThicknessValue             0.8 
    =========================  ======
    
    .. versionadded:: NX8.0.0
    """
    
    class Direction():
        """
        Represents the thickness direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Upper", " - "
           "Lower", " - "
        """
        Upper = 0  # DieDesPierceInsertBuilderDirectionMemberType
        Lower = 1  # DieDesPierceInsertBuilderDirectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HoleShapeTypes():
        """
        Represents the hole shape type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circular", " - "
           "Oblong", " - "
           "Square", " - "
           "Rectangular", " - "
           "RoundedRectangular", " - "
           "ChordRectangular", " - "
           "Hexagonal", " - "
           "Other", " - "
        """
        Circular = 0  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
        Oblong = 1  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
        Square = 2  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
        Rectangular = 3  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
        RoundedRectangular = 4  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
        ChordRectangular = 5  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
        Hexagonal = 6  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
        Other = 7  # DieDesPierceInsertBuilderHoleShapeTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BoudaryCurveSelection: NXOpen.ScCollector = ...
    """
    Returns  the boundary curve selection.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoudaryCurveSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ClearanceCoefficient: float = ...
    """
    Returns or sets  the clearance coefficient value.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceCoefficient`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClearanceCoefficient`` 
    
    :param clearanceCoefficient: 
    :type clearanceCoefficient: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DiePenetration: float = ...
    """
    Returns or sets  the die penetration value.  
    
    <hr>
    
    Getter Method
    
    Signature ``DiePenetration`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiePenetration`` 
    
    :param diePenetration: 
    :type diePenetration: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DownToleranceForLength: float = ...
    """
    Returns or sets  the down tolerance value for length.  
    
    <hr>
    
    Getter Method
    
    Signature ``DownToleranceForLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DownToleranceForLength`` 
    
    :param downToleranceForLength: 
    :type downToleranceForLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DownToleranceForWidth: float = ...
    """
    Returns or sets  the down tolerance value for width.  
    
    <hr>
    
    Getter Method
    
    Signature ``DownToleranceForWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DownToleranceForWidth`` 
    
    :param downToleranceForWidth: 
    :type downToleranceForWidth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PunchPenetration: float = ...
    """
    Returns or sets  the punch penetration value.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPenetration`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPenetration`` 
    
    :param punchPenetration: 
    :type punchPenetration: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ThicknessDirectionOption: DieDesPierceInsertBuilderDirection = ...
    """
    Returns or sets  the thickness direction option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessDirectionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieDesPierceInsertBuilderDirection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessDirectionOption`` 
    
    :param thicknessDirectionOption: 
    :type thicknessDirectionOption: :py:class:`NXOpen.Tooling.DieDesPierceInsertBuilderDirection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ThicknessValue: float = ...
    """
    Returns or sets  the thickness value.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessValue`` 
    
    :param thicknessValue: 
    :type thicknessValue: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ToleranceCoefficient: float = ...
    """
    Returns or sets  the tolerance coefficient value.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceCoefficient`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceCoefficient`` 
    
    :param toleranceCoefficient: 
    :type toleranceCoefficient: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UpToleranceForLength: float = ...
    """
    Returns or sets  the up tolerance value for length.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpToleranceForLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpToleranceForLength`` 
    
    :param upToleranceForLength: 
    :type upToleranceForLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UpToleranceForWidth: float = ...
    """
    Returns or sets  the up tolerance value for width.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpToleranceForWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpToleranceForWidth`` 
    
    :param upToleranceForWidth: 
    :type upToleranceForWidth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: DieDesPierceInsertBuilder = ...  # unknown typename


class WorkpieceCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a Workpiece Collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateWorkpieceBuilder(self) -> WorkpieceBuilder:
        """
        Creates Workpiece builder  
        
        Signature ``CreateWorkpieceBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.WorkpieceBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class ProfileSplitCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ProfileSplit builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateProfileSplitBuilder(self) -> ProfileSplitBuilder:
        """
        Creates profile split builder  
        
        Signature ``CreateProfileSplitBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ProfileSplitBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class QuickQuotationCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.QuickQuotationBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateQuickQuotationBuilder(self) -> QuickQuotationBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.QuickQuotationBuilder`  
        
        Signature ``CreateQuickQuotationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.QuickQuotationBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class SIZERExportBuilderMCDMechanicalData_Struct():
    """
    Defines the mechanical data in MCD mode.  
    
    .
    Constructor: 
    NXOpen.Tooling.SIZERExportBuilder.MCDMechanicalData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Id: int = ...
    """
    Unique ID                    
    <hr>
    
    Field Value
    Type:int
    """
    Name: str = ...
    """
    Mechanical Name              
    <hr>
    
    Field Value
    Type:str
    """
    AxisControl: NXOpen.Mechatronics.PhysicsConstraint = ...
    """
    Axis Control                 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.PhysicsConstraint`
    """
    ReferenceDesignator: str = ...
    """
    Logical Reference Designator 
    <hr>
    
    Field Value
    Type:str
    """
    FrictionTorque: float = ...
    """
    Friction Torque value        
    <hr>
    
    Field Value
    Type:float
    """
    SystemEfficiency: float = ...
    """
    System Efficiency value      
    <hr>
    
    Field Value
    Type:float
    """
    LoadInertia: float = ...
    """
    Load Inertia value           
    <hr>
    
    Field Value
    Type:float
    """
    AdditionalInertia: float = ...
    """
    Additional Inertia value     
    <hr>
    
    Field Value
    Type:float
    """


class MWCopySheetsBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWCopySheetsBuilderTypes():
    """
    This enum represents the type of sheets to be copied 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PartingSurfaces", "Sheet type - parting sheets"
       "PatchedSurfaces", "Sheet type - patched sheets"
       "Both", "Sheet type - Both parting and patched sheets"
    """
    PartingSurfaces = 0  # MWCopySheetsBuilderTypesMemberType
    PatchedSurfaces = 1  # MWCopySheetsBuilderTypesMemberType
    Both = 2  # MWCopySheetsBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWCopySheetsBuilder(NXOpen.Builder):
    """
    Builder for copying sheets in the Mold Wizard application   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWCopySheetsCollection.CreateBuilder`
    
    Default values.
    
    ====================  =====
    Property              Value
    ====================  =====
    CopyAllSheetsToggle   0 
    --------------------  -----
    Layer                 1 
    ====================  =====
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        This enum represents the type of sheets to be copied 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PartingSurfaces", "Sheet type - parting sheets"
           "PatchedSurfaces", "Sheet type - patched sheets"
           "Both", "Sheet type - Both parting and patched sheets"
        """
        PartingSurfaces = 0  # MWCopySheetsBuilderTypesMemberType
        PatchedSurfaces = 1  # MWCopySheetsBuilderTypesMemberType
        Both = 2  # MWCopySheetsBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ColorPicker: NXOpen.NXColor = ...
    """
    Returns or sets  the color picker for selecting the color to be assigned to the new copied sheets 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorPicker`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColorPicker`` 
    
    :param colorPicker: 
    :type colorPicker: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CopyAllSheetsToggle: bool = ...
    """
    Returns or sets  the indicator for copying all the parting and/or patched sheets in the parting part 
    
    <hr>
    
    Getter Method
    
    Signature ``CopyAllSheetsToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CopyAllSheetsToggle`` 
    
    :param copyAllSheetsToggle: 
    :type copyAllSheetsToggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Layer: int = ...
    """
    Returns or sets  the layer to be assigned to the new copied sheets 
    
    <hr>
    
    Getter Method
    
    Signature ``Layer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Layer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SheetsSelection: NXOpen.SelectBodyList = ...
    """
    Returns  the sheets selection for selecting the parting and/or patched sheets to be copied 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetsSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: MWCopySheetsBuilderTypes = ...
    """
    Returns or sets  the type of sheets, parting sheets, patched sheets, or both to be copied 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWCopySheetsBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.MWCopySheetsBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: MWCopySheetsBuilder = ...  # unknown typename


class MWMoldedPartValidationManager():
    """
    Represents a manager of the MWMoldedPartValidation builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def CreateMWMoldedPartValidationBuilder(self) -> MWMoldedPartValidationBuilder:
        """
        Creates a MWMoldedPartValidation builder  
        
        Signature ``CreateMWMoldedPartValidationBuilder()`` 
        
        :returns: :py:class:`MWMoldedPartValidationBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.MWMoldedPartValidationBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    


class ToolingSession():
    """
    Represents Tooling session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Session`
    
    .. versionadded:: NX8.0.0
    """
    
    def CreateSpreadsheetData(self) -> SpreadsheetData:
        """
        Creates an instance of class :py:class:`NXOpen.Tooling.SpreadsheetData`.  
        
        Please note this method will only create an empty class :py:class:`NXOpen.Tooling.SpreadsheetData` object,
        it needs to call other method :py:meth:`NXOpen.Tooling.SpreadsheetData.ReadData` to retrieve the data.
        
        Signature ``CreateSpreadsheetData()`` 
        
        :returns:  the new :py:class:`NXOpen.Tooling.SpreadsheetData` instance  
        :rtype: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCloneObject(self, applicationType: ToolingApplication, cloneActionType: ToolingCloneaction) -> CloneObject:
        """
        Creates the clone operation object  
        
        Signature ``CreateCloneObject(applicationType, cloneActionType)`` 
        
        :param applicationType:  Application type to determine the clone settings  
        :type applicationType: :py:class:`NXOpen.Tooling.ToolingApplication` 
        :param cloneActionType:  Clone action type  
        :type cloneActionType: :py:class:`NXOpen.Tooling.ToolingCloneaction` 
        :returns:  the new :py:class:`NXOpen.Tooling.CloneObject` instance  
        :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetReusableComponent(self) -> 'list[NXOpen.Assemblies.Component]':
        """
        Gets the reusable component  
        
        Signature ``GetReusableComponent()`` 
        
        :returns:  The array of reuseable components  
        :rtype: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetReusableObjects(self, part: NXOpen.NXObject) -> 'list[NXOpen.NXObject]':
        """
        Gets the last added reusable object 
        
        Signature ``GetReusableObjects(part)`` 
        
        :param part:  Tag of the part that contains reusable objects  
        :type part: :py:class:`NXOpen.NXObject` 
        :returns:  Objects, mainly bodies, from the input part  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def LoadReusablePart(self, filename: str, isNativePart: bool) -> NXOpen.BasePart:
        """
        Opens an existing part, but does not set it to be the displayed part.  
        
        Signature ``LoadReusablePart(filename, isNativePart)`` 
        
        :param filename:  Name of part file  
        :type filename: str 
        :param isNativePart:  Is the file from native or TC  
        :type isNativePart: bool 
        :returns:  Part Tag 
        :rtype: :py:class:`NXOpen.BasePart` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    
    
    def ClosePart(self, part: NXOpen.NXObject, wholeTree: NXOpen.BasePartCloseWholeTree, closeModified: NXOpen.BasePartCloseModified) -> None:
        """
        Close an existing part 
        
        Signature ``ClosePart(part, wholeTree, closeModified)`` 
        
        :param part:  Tag of the part that will be closed  
        :type part: :py:class:`NXOpen.NXObject` 
        :param wholeTree:  If true, unloads all components of the part.                If false, unloads only the top-level part  
        :type wholeTree: :py:class:`NXOpen.BasePartCloseWholeTree` 
        :param closeModified:  Behavior of close if component                parts are modified.  
        :type closeModified: :py:class:`NXOpen.BasePartCloseModified` 
        
        .. versionadded:: NX9.0.2
        
        License requirements: None.
        """
        ...
    
    
    def CreateComponentPattern(self, component: NXOpen.NXObject, targetEntity: NXOpen.NXObject) -> None:
        """
        Create component pattern 
        
        Signature ``CreateComponentPattern(component, targetEntity)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.NXObject` 
        :param targetEntity: 
        :type targetEntity: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    
    def SetWizardType(self, type: int) -> None:
        """
        Sets the wizard type of tooling application.  
        
        Signature ``SetWizardType(type)`` 
        
        :param type:  wizard type of current tooling application  
        :type type: int 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    


class MoldDesign(NXOpen.Builder):
    """
    Represents an Mold Design.  
    
    This is an abstract class and cannot be instantiated
    
    .. versionadded:: NX8.5.0
    """
    Null: MoldDesign = ...  # unknown typename


class ElectrodeDesignCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Electrode Design.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateProjectBuilder(self) -> ElectrodeInitializationBuilder:
        """
        Creates electrode initialization builder  
        
        Signature ``CreateProjectBuilder()`` 
        
        :returns: :py:class:`Tooling.ElectrodeInitializationBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ElectrodeInitializationBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateComponentBuilder(self) -> ElectrodeComponentBuilder:
        """
        Creates EW component builder  
        
        Signature ``CreateComponentBuilder()`` 
        
        :returns: :py:class:`Tooling.ElectrodeComponentBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ElectrodeComponentBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateBlankBuilder(self) -> ElectrodeBlankBuilder:
        """
        Creates Design Blank builder  
        
        Signature ``CreateBlankBuilder()`` 
        
        :returns: :py:class:`Tooling.ElectrodeBlankBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ElectrodeBlankBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateDeleteComponentBuilder(self) -> ElectrodeDeleteBuilder:
        """
        Creates electrode delete component builder  
        
        Signature ``CreateDeleteComponentBuilder()`` 
        
        :returns: :py:class:`Tooling.ElectrodeDeleteBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ElectrodeDeleteBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateCheckingBuilder(self) -> ElectrodeCheckingBuilder:
        """
        Creates electrode checking builder  
        
        Signature ``CreateCheckingBuilder()`` 
        
        :returns: :py:class:`Tooling.ElectrodeCheckingBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ElectrodeCheckingBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateEwdraftingBuilder(self) -> EWDraftingBuilder:
        """
        Creates Electrode Drafting builder  
        
        Signature ``CreateEwdraftingBuilder()`` 
        
        :returns: :py:class:`Tooling.EWDraftingBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.EWDraftingBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    


class EdgePatchCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of EdgePatch builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> EdgePatchBuilder:
        """
        Creates a EdgePatch builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`AssignPatchBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.EdgePatchBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class FastenerAssyCustomizationBuilder(NXOpen.Builder):
    """
    Fastener assembly customization builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.FastenerAssyCustomizationCollection.CreateBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: FastenerAssyCustomizationBuilder = ...  # unknown typename


class ElectrodeInitializationBuilderMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ElectrodeInitializationBuilderMethod():
    """
    The initialize type: Original, No Working Part, No Machine Set Part and No Template. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Original", " - "
       "NoWorkingPart", " - "
       "NoMsetPart", " - "
       "NoTemplate", " - "
    """
    Original = 0  # ElectrodeInitializationBuilderMethodMemberType
    NoWorkingPart = 1  # ElectrodeInitializationBuilderMethodMemberType
    NoMsetPart = 2  # ElectrodeInitializationBuilderMethodMemberType
    NoTemplate = 3  # ElectrodeInitializationBuilderMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ElectrodeInitializationBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ElectrodeInitializationBuilderType():
    """
    Clone a member of an electrode assembly, such as top part, machine set part, and working part. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CloneTopPart", " - "
       "CloneMsetPart", " - "
       "CloneWorkingPart", " - "
    """
    CloneTopPart = 0  # ElectrodeInitializationBuilderTypeMemberType
    CloneMsetPart = 1  # ElectrodeInitializationBuilderTypeMemberType
    CloneWorkingPart = 2  # ElectrodeInitializationBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ElectrodeInitializationBuilder(NXOpen.Builder):
    """
    Electrode initialize project builder to creates an electrode design assembly.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ElectrodeDesignCollection.CreateProjectBuilder`
    
    Default values.
    
    ===========  =========
    Property     Value
    ===========  =========
    ActionType   Original 
    -----------  ---------
    Rename       0 
    ===========  =========
    
    .. versionadded:: NX8.0.0
    """
    
    class Method():
        """
        The initialize type: Original, No Working Part, No Machine Set Part and No Template. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Original", " - "
           "NoWorkingPart", " - "
           "NoMsetPart", " - "
           "NoTemplate", " - "
        """
        Original = 0  # ElectrodeInitializationBuilderMethodMemberType
        NoWorkingPart = 1  # ElectrodeInitializationBuilderMethodMemberType
        NoMsetPart = 2  # ElectrodeInitializationBuilderMethodMemberType
        NoTemplate = 3  # ElectrodeInitializationBuilderMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Type():
        """
        Clone a member of an electrode assembly, such as top part, machine set part, and working part. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CloneTopPart", " - "
           "CloneMsetPart", " - "
           "CloneWorkingPart", " - "
        """
        CloneTopPart = 0  # ElectrodeInitializationBuilderTypeMemberType
        CloneMsetPart = 1  # ElectrodeInitializationBuilderTypeMemberType
        CloneWorkingPart = 2  # ElectrodeInitializationBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetConfigurationData(self, configName: str, topPartName: str, msetPartName: str, workingPartName: str, subdir: str, cloneMethod: int) -> None:
        """
        Sets details of the configuration data.  
        
        Signature ``SetConfigurationData(configName, topPartName, msetPartName, workingPartName, subdir, cloneMethod)`` 
        
        :param configName:  configuration name  
        :type configName: str 
        :param topPartName:  top part name  
        :type topPartName: str 
        :param msetPartName:  machine set part name  
        :type msetPartName: str 
        :param workingPartName:  working part name  
        :type workingPartName: str 
        :param subdir:  sub direction  
        :type subdir: str 
        :param cloneMethod:  cloning method  
        :type cloneMethod: int 
        
        .. versionadded:: NX11.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def SetMsetCsysMatrixOrigin(self, matrix: NXOpen.Matrix3x3, origin: NXOpen.Point3d) -> None:
        """
        Sets csys matrix and origin.  
        
        Signature ``SetMsetCsysMatrixOrigin(matrix, origin)`` 
        
        :param matrix:  csys matrix  
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        :param origin:  csys origin  
        :type origin: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def SetMsetCsysOriginToFaceCenter(self) -> None:
        """
        Sets MSET CSYS origin to center of the selected faces.  
        
        Signature ``SetMsetCsysOriginToFaceCenter()`` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateCloneObjectOfTopPart(self) -> CloneObject:
        """
        Creates clone object of top part.  
        
        Signature ``CreateCloneObjectOfTopPart()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateCloneObjectOfMsetPart(self) -> CloneObject:
        """
        Creates clone object of machine set part.  
        
        Signature ``CreateCloneObjectOfMsetPart()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateCloneObjectOfWorkingPart(self) -> CloneObject:
        """
        Creates clone object of working part.  
        
        Signature ``CreateCloneObjectOfWorkingPart()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateProject(self, cloneObject: CloneObject) -> None:
        """
        Creates the assembly structure of Electrode Wizard project.  
        
        Signature ``CreateProject(cloneObject)`` 
        
        :param cloneObject: 
        :type cloneObject: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateMsetPart(self, cloneObject: CloneObject) -> NXOpen.TaggedObject:
        """
        Creates the mset part.  
        
        Signature ``CreateMsetPart(cloneObject)`` 
        
        :param cloneObject: 
        :type cloneObject: :py:class:`NXOpen.Tooling.CloneObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateWorkingPart(self, cloneObject: CloneObject, msetPartTag: NXOpen.TaggedObject) -> NXOpen.TaggedObject:
        """
        Creates the working part.  
        
        Signature ``CreateWorkingPart(cloneObject, msetPartTag)`` 
        
        :param cloneObject: 
        :type cloneObject: :py:class:`NXOpen.Tooling.CloneObject` 
        :param msetPartTag: 
        :type msetPartTag: :py:class:`NXOpen.TaggedObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def DisposeCloneObject(self, cloneObject: CloneObject) -> None:
        """
        Disposes the clone object.  
        
        Signature ``DisposeCloneObject(cloneObject)`` 
        
        :param cloneObject: 
        :type cloneObject: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def InitLinkObjects(self, workingPartTag: NXOpen.TaggedObject) -> None:
        """
        Links the selected objects to the working component of Electrode assembly.  
        
        Signature ``InitLinkObjects(workingPartTag)`` 
        
        :param workingPartTag: 
        :type workingPartTag: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def GetWorkingPart(self, msetPartTag: NXOpen.TaggedObject) -> NXOpen.TaggedObject:
        """
        Gets the working part in mset.  
        
        Signature ``GetWorkingPart(msetPartTag)`` 
        
        :param msetPartTag: 
        :type msetPartTag: :py:class:`NXOpen.TaggedObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def InitalizeProjectParameter(self, rootPartTag: NXOpen.NXObject) -> None:
        """
        Initialize the parameters of the project that need no machine set part.  
        
        Signature ``InitalizeProjectParameter(rootPartTag)`` 
        
        :param rootPartTag:  root part object  
        :type rootPartTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def BuildMemberPartName(self, type: ElectrodeInitializationBuilderType) -> str:
        """
        Builds the name of a part which is a member of an electrode assembly.  
        
        Signature ``BuildMemberPartName(type)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.Tooling.ElectrodeInitializationBuilderType` 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX11.0.2
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def SetCloneMethod(self, cloneMethod: int) -> None:
        """
        Set clone method.  
        
        Signature ``SetCloneMethod(cloneMethod)`` 
        
        :param cloneMethod:  clone method  
        :type cloneMethod: int 
        
        .. versionadded:: NX11.0.2
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def GetMsetPart(self, listIndex: int) -> NXOpen.TaggedObject:
        """
        Gets the machine set part in machine set tree list.  
        
        Signature ``GetMsetPart(listIndex)`` 
        
        :param listIndex:  index of machine set node in machine set tree list  
        :type listIndex: int 
        :returns: 
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def RemoveSelectedMsetNode(self, msetPartTag: NXOpen.TaggedObject) -> None:
        """
        Remove a selected machine set node.  
        
        Signature ``RemoveSelectedMsetNode(msetPartTag)`` 
        
        :param msetPartTag: 
        :type msetPartTag: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    ActionType: ElectrodeInitializationBuilderMethod = ...
    """
    Returns or sets  the initialize method of initialize electrode project.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ElectrodeInitializationBuilderMethod` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionType`` 
    
    :param actionType: 
    :type actionType: :py:class:`NXOpen.Tooling.ElectrodeInitializationBuilderMethod` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    CurrentMset: NXOpen.TaggedObject = ...
    """
    Returns or sets  the machine set part which is the working part.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentMset`` 
    
    :returns:  machine set part  
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``CurrentMset`` 
    
    :param mset:  machine set part  
    :type mset: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Face: NXOpen.SelectFace = ...
    """
    Returns  the face whose center will be the origin of the machine set csys.  
    
    <hr>
    
    Getter Method
    
    Signature ``Face`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.0
       This functionality is no longer supported.
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceList: NXOpen.SelectFaceList = ...
    """
    Returns  the face list whose center will be the origin of the machine set csys.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    InputName: str = ...
    """
    Returns or sets  the input name as project name.  
    
    <hr>
    
    Getter Method
    
    Signature ``InputName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InputName`` 
    
    :param inputName: 
    :type inputName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    PathBrowser: str = ...
    """
    Returns or sets  the path browser.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``PathBrowser`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Rename: bool = ...
    """
    Returns or sets  the component name can be defined in the part name management.  
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Workpiece: NXOpen.SelectBody = ...
    """
    Returns  the utility to get the workpiece to create an electrode design project.  
    
    <hr>
    
    Getter Method
    
    Signature ``Workpiece`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    WorkpieceList: NXOpen.SelectBodyList = ...
    """
    Returns  the utility to get the workpiece list to create an electrode design project.  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkpieceList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.5.3
    
    License requirements: None.
    """
    Null: ElectrodeInitializationBuilder = ...  # unknown typename


class DieEngDieTipBuilderMaterialThicknessTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngDieTipBuilderMaterialThicknessType():
    """
    the material thickness type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Uniform", " - "
       "Variable", " - "
    """
    Uniform = 0  # DieEngDieTipBuilderMaterialThicknessTypeMemberType
    Variable = 1  # DieEngDieTipBuilderMaterialThicknessTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngDieTipBuilder(NXOpen.Features.FeatureBuilder):
    """
    Die Engineer die tip management builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieEngDieTipBuilder`
    
    Default values.
    
    ======================  ========
    Property                Value
    ======================  ========
    ChangeTipOrientations   1 
    ----------------------  --------
    ChangeTipOrigin         1 
    ----------------------  --------
    GenerateOutline         1 
    ----------------------  --------
    InheritTip              1 
    ----------------------  --------
    Thickness               0 
    ----------------------  --------
    ThicknessType           Uniform 
    ----------------------  --------
    WithoutWorkflow         0 
    ======================  ========
    
    .. versionadded:: NX11.0.0
    """
    
    class MaterialThicknessType():
        """
        the material thickness type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Uniform", " - "
           "Variable", " - "
        """
        Uniform = 0  # DieEngDieTipBuilderMaterialThicknessTypeMemberType
        Variable = 1  # DieEngDieTipBuilderMaterialThicknessTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ObjectProperties(self) -> None:
        """
        Callback of object properties button 
        
        Signature ``ObjectProperties()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def MoreDetails(self) -> None:
        """
        Callback of button more details 
        
        Signature ``MoreDetails()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    ChangeTipOrientations: bool = ...
    """
    Returns or sets  the change tip orientations toggle option 
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeTipOrientations`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ChangeTipOrientations`` 
    
    :param changeTipOrientations: 
    :type changeTipOrientations: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ChangeTipOrigin: bool = ...
    """
    Returns or sets  the change tip origin 
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeTipOrigin`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ChangeTipOrigin`` 
    
    :param changeTipOrigin: 
    :type changeTipOrigin: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    GenerateOutline: bool = ...
    """
    Returns or sets  the generate outline toggle option 
    
    <hr>
    
    Getter Method
    
    Signature ``GenerateOutline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``GenerateOutline`` 
    
    :param generateOutline: 
    :type generateOutline: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    InheritTip: bool = ...
    """
    Returns or sets  the inherit tip toggle option 
    
    <hr>
    
    Getter Method
    
    Signature ``InheritTip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``InheritTip`` 
    
    :param inheritTip: 
    :type inheritTip: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Origin: NXOpen.Point = ...
    """
    Returns or sets  the origin point
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Product: NXOpen.SelectBody = ...
    """
    Returns  the die tip product sheet body 
    
    <hr>
    
    Getter Method
    
    Signature ``Product`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ReferenceData: NXOpen.SelectNXObjectList = ...
    """
    Returns  the reference data 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    StampingOperation: NXOpen.SelectNXObject = ...
    """
    Returns  the stamping operation 
    
    <hr>
    
    Getter Method
    
    Signature ``StampingOperation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SyncOrigin: int = ...
    """
    Returns or sets  the synchroous origin toggle option 
    
    <hr>
    
    Getter Method
    
    Signature ``SyncOrigin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``SyncOrigin`` 
    
    :param syncOrigin: 
    :type syncOrigin: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Thickness: float = ...
    """
    Returns or sets  the material thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``Thickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``Thickness`` 
    
    :param thickness: 
    :type thickness: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ThicknessType: DieEngDieTipBuilderMaterialThicknessType = ...
    """
    Returns or sets  the thickness type 
    
    <hr>
    
    Getter Method
    
    Signature ``ThicknessType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieEngDieTipBuilderMaterialThicknessType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ThicknessType`` 
    
    :param thicknessType: 
    :type thicknessType: :py:class:`NXOpen.Tooling.DieEngDieTipBuilderMaterialThicknessType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    WithoutWorkflow: bool = ...
    """
    Returns or sets  the without workflow toggle option 
    
    <hr>
    
    Getter Method
    
    Signature ``WithoutWorkflow`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``WithoutWorkflow`` 
    
    :param withoutWorkflow: 
    :type withoutWorkflow: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: DieEngDieTipBuilder = ...  # unknown typename


class ValidCheckBuilderSelModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ValidCheckBuilderSelMode():
    """
    the selection type, including component and solid body 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Component", "Selection type will be set to component"
       "Body", "Selection type will be set to body"
    """
    Component = 0  # ValidCheckBuilderSelModeMemberType
    Body = 1  # ValidCheckBuilderSelModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ValidCheckBuilderAnalysisModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ValidCheckBuilderAnalysisMode():
    """
    the analysis mode, including solid-based mode and facet-based mode 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SolidBased", "Solid body will be used to do checking"
       "FacetBased", "Facet body will be used to do checking"
    """
    SolidBased = 0  # ValidCheckBuilderAnalysisModeMemberType
    FacetBased = 1  # ValidCheckBuilderAnalysisModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ValidCheckBuilderCheckingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ValidCheckBuilderCheckingType():
    """
    the checking type, including true body, false body or both 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TrueBody", "True body will be used to do checking"
       "FalseBody", "False body will be used to do checking"
       "Both", "Both types of body will be used to do checking"
    """
    TrueBody = 0  # ValidCheckBuilderCheckingTypeMemberType
    FalseBody = 1  # ValidCheckBuilderCheckingTypeMemberType
    Both = 2  # ValidCheckBuilderCheckingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ValidCheckBuilder(NXOpen.Builder):
    """
    This is the JA builder for static interference check   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ValidCheckCollection.CreateValidCheckBuilder`
    
    Default values.
    
    ==============  ===========
    Property        Value
    ==============  ===========
    AnalyMode       SolidBased 
    --------------  -----------
    BlankBody       0 
    --------------  -----------
    CheckType       TrueBody 
    --------------  -----------
    ClrZone         0 
    --------------  -----------
    ObjSelectType   Component 
    --------------  -----------
    ScrewCheck      0 
    --------------  -----------
    SubAssembly     0 
    ==============  ===========
    
    .. versionadded:: NX6.0.0
    """
    
    class SelMode():
        """
        the selection type, including component and solid body 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Component", "Selection type will be set to component"
           "Body", "Selection type will be set to body"
        """
        Component = 0  # ValidCheckBuilderSelModeMemberType
        Body = 1  # ValidCheckBuilderSelModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AnalysisMode():
        """
        the analysis mode, including solid-based mode and facet-based mode 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SolidBased", "Solid body will be used to do checking"
           "FacetBased", "Facet body will be used to do checking"
        """
        SolidBased = 0  # ValidCheckBuilderAnalysisModeMemberType
        FacetBased = 1  # ValidCheckBuilderAnalysisModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CheckingType():
        """
        the checking type, including true body, false body or both 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TrueBody", "True body will be used to do checking"
           "FalseBody", "False body will be used to do checking"
           "Both", "Both types of body will be used to do checking"
        """
        TrueBody = 0  # ValidCheckBuilderCheckingTypeMemberType
        FalseBody = 1  # ValidCheckBuilderCheckingTypeMemberType
        Both = 2  # ValidCheckBuilderCheckingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def StdAddUserSets(self) -> None:
        """
        Adds standard part into user defined set 
        
        Signature ``StdAddUserSets()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def StdLoadFile(self) -> None:
        """
        Loads standard attribute list 
        
        Signature ``StdLoadFile()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def RemoveDataSet(self, dataSetName: str) -> None:
        """
        The action to delete a data set 
        
        Signature ``RemoveDataSet(dataSetName)`` 
        
        :param dataSetName: 
        :type dataSetName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AnalyMode: ValidCheckBuilderAnalysisMode = ...
    """
    Returns or sets  the analysis mode 
    
    <hr>
    
    Getter Method
    
    Signature ``AnalyMode`` 
    
    :returns:  Retruns analysis mode to do checking  
    :rtype: :py:class:`NXOpen.Tooling.ValidCheckBuilderAnalysisMode` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnalyMode`` 
    
    :param analyMode:  Indicates analysis mode to do checking  
    :type analyMode: :py:class:`NXOpen.Tooling.ValidCheckBuilderAnalysisMode` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    BlankBody: bool = ...
    """
    Returns or sets  the blank body, to specify if blanked bodies in a component needs to be searched 
    
    <hr>
    
    Getter Method
    
    Signature ``BlankBody`` 
    
    :returns:  Get if blanked body is included while doing checking  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankBody`` 
    
    :param blankBody:  Indicates if blanked body is included while doing checking  
    :type blankBody: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    CheckType: ValidCheckBuilderCheckingType = ...
    """
    Returns or sets  the check type 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckType`` 
    
    :returns:  Retruns checking type  
    :rtype: :py:class:`NXOpen.Tooling.ValidCheckBuilderCheckingType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CheckType`` 
    
    :param checkType:  Indicates checking type  
    :type checkType: :py:class:`NXOpen.Tooling.ValidCheckBuilderCheckingType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ClrSetName: str = ...
    """
    Returns or sets  the clearance set name 
    
    <hr>
    
    Getter Method
    
    Signature ``ClrSetName`` 
    
    :returns:  Retruns clearance set name  
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClrSetName`` 
    
    :param clrSetName:  Specifies a user defined clearance set name  
    :type clrSetName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ClrZone: float = ...
    """
    Returns or sets  the clearance zone 
    
    <hr>
    
    Getter Method
    
    Signature ``ClrZone`` 
    
    :returns:  Retruns clearance zone value  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClrZone`` 
    
    :param clrZone:  Specifies clearance zone value  
    :type clrZone: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ObjSelectTarget: NXOpen.SelectNXObjectList = ...
    """
    Returns  the target object selection list 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjSelectTarget`` 
    
    :returns:  Retruns target objects list to do checking  
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ObjSelectTool: NXOpen.SelectNXObjectList = ...
    """
    Returns  the tool object selection list 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjSelectTool`` 
    
    :returns:  Retruns tool objects list to do checking  
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ObjSelectType: ValidCheckBuilderSelMode = ...
    """
    Returns or sets  the object selection type 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjSelectType`` 
    
    :returns:  Retruns selection type  
    :rtype: :py:class:`NXOpen.Tooling.ValidCheckBuilderSelMode` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjSelectType`` 
    
    :param objSelectType:  Indicates selection type  
    :type objSelectType: :py:class:`NXOpen.Tooling.ValidCheckBuilderSelMode` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrewCheck: bool = ...
    """
    Returns or sets  the screw check, to specify if screw check algorithm needs to be used 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrewCheck`` 
    
    :returns:  Retruns the flag if screw checking algorithm is used while doing checking  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrewCheck`` 
    
    :param screwCheck:  Indicates if screw checking algorithm is used while doing checking  
    :type screwCheck: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SelectDatasetsName: str = ...
    """
    Returns or sets  the box list selected sets name 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectDatasetsName`` 
    
    :returns:  Retruns selected data set name  
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectDatasetsName`` 
    
    :param selDataSetName:  Specifies a user selected data set name  
    :type selDataSetName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SelectStandardSetsSpreadsheet: str = ...
    """
    Returns or sets  the standard sets spreadsheet 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectStandardSetsSpreadsheet`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectStandardSetsSpreadsheet`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SubAssembly: bool = ...
    """
    Returns or sets  the sub-assembly, to specify if sub-assembly needs to be searched 
    
    <hr>
    
    Getter Method
    
    Signature ``SubAssembly`` 
    
    :returns:  Retruns the flag if sub-assembly is included while doing checking  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SubAssembly`` 
    
    :param subAssembly:  Indicates if sub-assembly is included while doing checking  
    :type subAssembly: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    Null: ValidCheckBuilder = ...  # unknown typename


class DieCavityAndSlugHoleBuilderInsertPositionItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieCavityAndSlugHoleBuilderInsertPositionItems():
    """
    Specifies the position of piercing inserts, for EDW only 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "The position is top side"
       "Bottom", "The position is bottom side"
    """
    Top = 0  # DieCavityAndSlugHoleBuilderInsertPositionItemsMemberType
    Bottom = 1  # DieCavityAndSlugHoleBuilderInsertPositionItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieCavityAndSlugHoleBuilderCavityTypeItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieCavityAndSlugHoleBuilderCavityTypeItems():
    """
    Specifies the type of cavity. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TaperAngle", "the taper angle type"
       "Step", "the step type"
       "RoundStep1", "the round step1 type"
       "RoundStep2", "the round step2 type"
    """
    TaperAngle = 0  # DieCavityAndSlugHoleBuilderCavityTypeItemsMemberType
    Step = 1  # DieCavityAndSlugHoleBuilderCavityTypeItemsMemberType
    RoundStep1 = 2  # DieCavityAndSlugHoleBuilderCavityTypeItemsMemberType
    RoundStep2 = 3  # DieCavityAndSlugHoleBuilderCavityTypeItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieCavityAndSlugHoleBuilderDieInsertStackTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieCavityAndSlugHoleBuilderDieInsertStackType():
    """
    die insert stack type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "One", " - "
       "Two", " - "
       "Three", " - "
    """
    One = 0  # DieCavityAndSlugHoleBuilderDieInsertStackTypeMemberType
    Two = 1  # DieCavityAndSlugHoleBuilderDieInsertStackTypeMemberType
    Three = 2  # DieCavityAndSlugHoleBuilderDieInsertStackTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieCavityAndSlugHoleBuilderDiePlateTwoSlugType():
    """
    die plate two slug type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fillet", " - "
       "Rectangle", " - "
       "Circle", " - "
       "Mickey", " - "
       "Clearance", " - "
       "Slotver", " - "
       "Slothor", " - "
       "NotSet", " - "
    """
    Fillet = 0  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
    Rectangle = 1  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
    Circle = 2  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
    Mickey = 3  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
    Clearance = 4  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
    Slotver = 5  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
    Slothor = 6  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
    NotSet = 7  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieCavityAndSlugHoleBuilderDiePlateThreeSlugType():
    """
    die plate three slug type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fillet", " - "
       "Rectangle", " - "
       "Circle", " - "
       "Mickey", " - "
       "Cleanrance", " - "
       "Slotver", " - "
       "Slothor", " - "
       "NotSet", " - "
    """
    Fillet = 0  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
    Rectangle = 1  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
    Circle = 2  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
    Mickey = 3  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
    Cleanrance = 4  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
    Slotver = 5  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
    Slothor = 6  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
    NotSet = 7  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieCavityAndSlugHoleBuilderBottomPlateSlugItems():
    """
    Specifies the type of bottom plate slug. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fillet", "Bottom plate slug type is fillet"
       "Rectangle", "Bottom plate slug type is rectangle"
       "Circle", "Bottom plate slug type is circle"
       "Mickey", "Bottom plate slug type is mickey"
       "Clearance", "Bottom plate slug type is clearance"
       "SlotVer", "Bottom plate slug type is slot vertical"
       "SlotHor", "Bottom plate slug type is slot horizontal"
       "NotSet", "Bottom plate slug type is none"
    """
    Fillet = 0  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
    Rectangle = 1  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
    Circle = 2  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
    Mickey = 3  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
    Clearance = 4  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
    SlotVer = 5  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
    SlotHor = 6  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
    NotSet = 7  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieCavityAndSlugHoleBuilderDieShoeSlugTypeItems():
    """
    Specifies the type of die shoe slug. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fillet", "Die shoe slug type is fillet"
       "Rectangle", "Die shoe slug type is rectangle"
       "Circle", "Die shoe slug type is circle"
       "Mickey", "Die shoe slug type is mickey"
       "Clearance", "Die shoe slug type is clearance"
       "SlotVer", "Die shoe slug type is slot vertical"
       "SlotHor", "Die shoe slug type is slot horizontal"
       "NotSet", "Die shoe slug type is none"
    """
    Fillet = 0  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
    Rectangle = 1  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
    Circle = 2  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
    Mickey = 3  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
    Clearance = 4  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
    SlotVer = 5  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
    SlotHor = 6  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
    NotSet = 7  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieCavityAndSlugHoleBuilderClearanceOptionItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieCavityAndSlugHoleBuilderClearanceOptionItems():
    """
    Specifies the design option of piercing insert. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "The design option is normal"
       "Variable", "The design option is fineblanking"
    """
    Constant = 0  # DieCavityAndSlugHoleBuilderClearanceOptionItemsMemberType
    Variable = 1  # DieCavityAndSlugHoleBuilderClearanceOptionItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieCavityAndSlugHoleBuilderOffsetSideOptionItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieCavityAndSlugHoleBuilderOffsetSideOptionItems():
    """
    Specifies the offset side of normal pierce insert design. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DieSide", "The offset side is die"
       "PunchSide", "The offset side is punch"
    """
    DieSide = 0  # DieCavityAndSlugHoleBuilderOffsetSideOptionItemsMemberType
    PunchSide = 1  # DieCavityAndSlugHoleBuilderOffsetSideOptionItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieCavityAndSlugHoleBuilder(NXOpen.Builder):
    """
    Represents die cavity and slug hole builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateDieCavityAndSlugHoleBuilder`
    
    Default values.
    
    ====================================  =========================================
    Property                              Value
    ====================================  =========================================
    AngleDiePlateTwo                      -0.25 
    ------------------------------------  -----------------------------------------
    DieInsertStack                        One 
    ------------------------------------  -----------------------------------------
    DieOffsetValue                        0 
    ------------------------------------  -----------------------------------------
    DiePlateThree                         2 
    ------------------------------------  -----------------------------------------
    DiePlateTwo                           1 
    ------------------------------------  -----------------------------------------
    DieSameOffsetValue                    0 
    ------------------------------------  -----------------------------------------
    ForEachScrapDiePlateThree             1 
    ------------------------------------  -----------------------------------------
    ForEachScrapDiePlateTwo               1 
    ------------------------------------  -----------------------------------------
    NormalBottomBackPlateSlug             Fillet 
    ------------------------------------  -----------------------------------------
    NormalCavity                          TaperAngle 
    ------------------------------------  -----------------------------------------
    NormalClearance                       0.05 
    ------------------------------------  -----------------------------------------
    NormalClearanceOption                 Constant 
    ------------------------------------  -----------------------------------------
    NormalDieShoeSlug                     Fillet 
    ------------------------------------  -----------------------------------------
    NormalForEachScrap1                   0 
    ------------------------------------  -----------------------------------------
    NormalForEachScrap2                   0 
    ------------------------------------  -----------------------------------------
    NormalOffsetSide                      DieSide 
    ------------------------------------  -----------------------------------------
    NormalRenameDialog                    0 
    ------------------------------------  -----------------------------------------
    NormalSlugInDiePlateThree             Fillet 
    ------------------------------------  -----------------------------------------
    NormalSlugInDiePlateTwo               Fillet 
    ------------------------------------  -----------------------------------------
    NormalSlugParameter1                  3 
    ------------------------------------  -----------------------------------------
    NormalSlugParameter2                  -3 
    ------------------------------------  -----------------------------------------
    NormalSlugParameter3                  2 
    ------------------------------------  -----------------------------------------
    NormalSlugParameter4                  3 
    ------------------------------------  -----------------------------------------
    OffsetLinearDimension.Value           3 (millimeters part), 0.12 (inches part) 
    ------------------------------------  -----------------------------------------
    Position                              Bottom 
    ------------------------------------  -----------------------------------------
    ShimHeight                            0 
    ------------------------------------  -----------------------------------------
    ShimOffset                            0 
    ------------------------------------  -----------------------------------------
    SlugHoleHeightLinearDimension.Value   100 (millimeters part), 4 (inches part) 
    ------------------------------------  -----------------------------------------
    SpacerAngle                           0 
    ------------------------------------  -----------------------------------------
    SpacerOffset                          0 
    ------------------------------------  -----------------------------------------
    WaferHeight                           0 
    ====================================  =========================================
    
    .. versionadded:: NX11.0.0
    """
    
    class InsertPositionItems():
        """
        Specifies the position of piercing inserts, for EDW only 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "The position is top side"
           "Bottom", "The position is bottom side"
        """
        Top = 0  # DieCavityAndSlugHoleBuilderInsertPositionItemsMemberType
        Bottom = 1  # DieCavityAndSlugHoleBuilderInsertPositionItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CavityTypeItems():
        """
        Specifies the type of cavity. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TaperAngle", "the taper angle type"
           "Step", "the step type"
           "RoundStep1", "the round step1 type"
           "RoundStep2", "the round step2 type"
        """
        TaperAngle = 0  # DieCavityAndSlugHoleBuilderCavityTypeItemsMemberType
        Step = 1  # DieCavityAndSlugHoleBuilderCavityTypeItemsMemberType
        RoundStep1 = 2  # DieCavityAndSlugHoleBuilderCavityTypeItemsMemberType
        RoundStep2 = 3  # DieCavityAndSlugHoleBuilderCavityTypeItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DieInsertStackType():
        """
        die insert stack type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "One", " - "
           "Two", " - "
           "Three", " - "
        """
        One = 0  # DieCavityAndSlugHoleBuilderDieInsertStackTypeMemberType
        Two = 1  # DieCavityAndSlugHoleBuilderDieInsertStackTypeMemberType
        Three = 2  # DieCavityAndSlugHoleBuilderDieInsertStackTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DiePlateTwoSlugType():
        """
        die plate two slug type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fillet", " - "
           "Rectangle", " - "
           "Circle", " - "
           "Mickey", " - "
           "Clearance", " - "
           "Slotver", " - "
           "Slothor", " - "
           "NotSet", " - "
        """
        Fillet = 0  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
        Rectangle = 1  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
        Circle = 2  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
        Mickey = 3  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
        Clearance = 4  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
        Slotver = 5  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
        Slothor = 6  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
        NotSet = 7  # DieCavityAndSlugHoleBuilderDiePlateTwoSlugTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DiePlateThreeSlugType():
        """
        die plate three slug type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fillet", " - "
           "Rectangle", " - "
           "Circle", " - "
           "Mickey", " - "
           "Cleanrance", " - "
           "Slotver", " - "
           "Slothor", " - "
           "NotSet", " - "
        """
        Fillet = 0  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
        Rectangle = 1  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
        Circle = 2  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
        Mickey = 3  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
        Cleanrance = 4  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
        Slotver = 5  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
        Slothor = 6  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
        NotSet = 7  # DieCavityAndSlugHoleBuilderDiePlateThreeSlugTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BottomPlateSlugItems():
        """
        Specifies the type of bottom plate slug. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fillet", "Bottom plate slug type is fillet"
           "Rectangle", "Bottom plate slug type is rectangle"
           "Circle", "Bottom plate slug type is circle"
           "Mickey", "Bottom plate slug type is mickey"
           "Clearance", "Bottom plate slug type is clearance"
           "SlotVer", "Bottom plate slug type is slot vertical"
           "SlotHor", "Bottom plate slug type is slot horizontal"
           "NotSet", "Bottom plate slug type is none"
        """
        Fillet = 0  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
        Rectangle = 1  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
        Circle = 2  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
        Mickey = 3  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
        Clearance = 4  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
        SlotVer = 5  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
        SlotHor = 6  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
        NotSet = 7  # DieCavityAndSlugHoleBuilderBottomPlateSlugItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DieShoeSlugTypeItems():
        """
        Specifies the type of die shoe slug. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fillet", "Die shoe slug type is fillet"
           "Rectangle", "Die shoe slug type is rectangle"
           "Circle", "Die shoe slug type is circle"
           "Mickey", "Die shoe slug type is mickey"
           "Clearance", "Die shoe slug type is clearance"
           "SlotVer", "Die shoe slug type is slot vertical"
           "SlotHor", "Die shoe slug type is slot horizontal"
           "NotSet", "Die shoe slug type is none"
        """
        Fillet = 0  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
        Rectangle = 1  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
        Circle = 2  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
        Mickey = 3  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
        Clearance = 4  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
        SlotVer = 5  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
        SlotHor = 6  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
        NotSet = 7  # DieCavityAndSlugHoleBuilderDieShoeSlugTypeItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ClearanceOptionItems():
        """
        Specifies the design option of piercing insert. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "The design option is normal"
           "Variable", "The design option is fineblanking"
        """
        Constant = 0  # DieCavityAndSlugHoleBuilderClearanceOptionItemsMemberType
        Variable = 1  # DieCavityAndSlugHoleBuilderClearanceOptionItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OffsetSideOptionItems():
        """
        Specifies the offset side of normal pierce insert design. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DieSide", "The offset side is die"
           "PunchSide", "The offset side is punch"
        """
        DieSide = 0  # DieCavityAndSlugHoleBuilderOffsetSideOptionItemsMemberType
        PunchSide = 1  # DieCavityAndSlugHoleBuilderOffsetSideOptionItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DieEditOffsetValueTable(self) -> None:
        """
        Edit offset value table for die 
        
        Signature ``DieEditOffsetValueTable()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def NormalCreateCavityAndSlug(self) -> None:
        """
        Create normal cavity and slug 
        
        Signature ``NormalCreateCavityAndSlug()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AngleDiePlateTwo: float = ...
    """
    Returns or sets  the angle of the die plate two 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleDiePlateTwo`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleDiePlateTwo`` 
    
    :param angleDiePlateTwo: 
    :type angleDiePlateTwo: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DieInsertStack: DieCavityAndSlugHoleBuilderDieInsertStackType = ...
    """
    Returns or sets  the die insert stack 
    
    <hr>
    
    Getter Method
    
    Signature ``DieInsertStack`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderDieInsertStackType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DieInsertStack`` 
    
    :param dieInsertStack: 
    :type dieInsertStack: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderDieInsertStackType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DieOffsetValue: float = ...
    """
    Returns or sets  the die offset value 
    
    <hr>
    
    Getter Method
    
    Signature ``DieOffsetValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DieOffsetValue`` 
    
    :param dieOffsetValue: 
    :type dieOffsetValue: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DiePlateThree: float = ...
    """
    Returns or sets  the die plate three 
    
    <hr>
    
    Getter Method
    
    Signature ``DiePlateThree`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiePlateThree`` 
    
    :param diePlateThree: 
    :type diePlateThree: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DiePlateTwo: float = ...
    """
    Returns or sets  the die plate two 
    
    <hr>
    
    Getter Method
    
    Signature ``DiePlateTwo`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiePlateTwo`` 
    
    :param diePlateTwo: 
    :type diePlateTwo: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DieSameOffsetValue: bool = ...
    """
    Returns or sets  the die same offset value 
    
    <hr>
    
    Getter Method
    
    Signature ``DieSameOffsetValue`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DieSameOffsetValue`` 
    
    :param dieSameOffsetValue: 
    :type dieSameOffsetValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ForEachScrapDiePlateThree: bool = ...
    """
    Returns or sets  the result whether use same clearance for each scrap in die plate three 
    
    <hr>
    
    Getter Method
    
    Signature ``ForEachScrapDiePlateThree`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForEachScrapDiePlateThree`` 
    
    :param forEachScrapDiePlateThree: 
    :type forEachScrapDiePlateThree: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ForEachScrapDiePlateTwo: bool = ...
    """
    Returns or sets  the for each scrap die plate two 
    
    <hr>
    
    Getter Method
    
    Signature ``ForEachScrapDiePlateTwo`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForEachScrapDiePlateTwo`` 
    
    :param forEachScrapDiePlateTwo: 
    :type forEachScrapDiePlateTwo: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NewPartNames: str = ...
    """
    Returns or sets  the new component names.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewPartNames`` 
    
    :returns:  Retruns the new component names  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewPartNames`` 
    
    :param newPartNames:  Specifies the new component names  
    :type newPartNames: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalBottomBackPlateSlug: DieCavityAndSlugHoleBuilderBottomPlateSlugItems = ...
    """
    Returns or sets  the normal bbpslug 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalBottomBackPlateSlug`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderBottomPlateSlugItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalBottomBackPlateSlug`` 
    
    :param normalBottomBackPlateSlug: 
    :type normalBottomBackPlateSlug: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderBottomPlateSlugItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalCavity: DieCavityAndSlugHoleBuilderCavityTypeItems = ...
    """
    Returns or sets  the normal cavity 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalCavity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderCavityTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalCavity`` 
    
    :param normalCavity: 
    :type normalCavity: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderCavityTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalClearance: float = ...
    """
    Returns or sets  the normal clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalClearance`` 
    
    :param normalClearance: 
    :type normalClearance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalClearanceOption: DieCavityAndSlugHoleBuilderClearanceOptionItems = ...
    """
    Returns or sets  the normal clearance option 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalClearanceOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderClearanceOptionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalClearanceOption`` 
    
    :param normalClearanceOption: 
    :type normalClearanceOption: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderClearanceOptionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalDieShoeSlug: DieCavityAndSlugHoleBuilderDieShoeSlugTypeItems = ...
    """
    Returns or sets  the normal dsslug 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalDieShoeSlug`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderDieShoeSlugTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalDieShoeSlug`` 
    
    :param normalDieShoeSlug: 
    :type normalDieShoeSlug: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderDieShoeSlugTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalForEachScrap1: bool = ...
    """
    Returns or sets  the normal for each scrap1 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalForEachScrap1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalForEachScrap1`` 
    
    :param normalForEachScrap1: 
    :type normalForEachScrap1: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalForEachScrap2: bool = ...
    """
    Returns or sets  the normal for each scrap2 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalForEachScrap2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalForEachScrap2`` 
    
    :param normalForEachScrap2: 
    :type normalForEachScrap2: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalOffsetSide: DieCavityAndSlugHoleBuilderOffsetSideOptionItems = ...
    """
    Returns or sets  the normal offset side 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalOffsetSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderOffsetSideOptionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalOffsetSide`` 
    
    :param normalOffsetSide: 
    :type normalOffsetSide: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderOffsetSideOptionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalRenameDialog: bool = ...
    """
    Returns or sets  the normal rename dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalRenameDialog`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalRenameDialog`` 
    
    :param normalRenameDialog: 
    :type normalRenameDialog: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalSelectPierceDieInsert: NXOpen.SelectBodyList = ...
    """
    Returns  the normal select pierce die insert 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSelectPierceDieInsert`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalSlugInDiePlateThree: DieCavityAndSlugHoleBuilderDiePlateThreeSlugType = ...
    """
    Returns or sets  the normal slug in diePlateThree 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugInDiePlateThree`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderDiePlateThreeSlugType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugInDiePlateThree`` 
    
    :param normalSlugInDiePlateThree: 
    :type normalSlugInDiePlateThree: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderDiePlateThreeSlugType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalSlugInDiePlateTwo: DieCavityAndSlugHoleBuilderDiePlateTwoSlugType = ...
    """
    Returns or sets  the normal slug in die plate two 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugInDiePlateTwo`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderDiePlateTwoSlugType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugInDiePlateTwo`` 
    
    :param normalSlugInDiePlateTwo: 
    :type normalSlugInDiePlateTwo: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderDiePlateTwoSlugType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalSlugParameter1: float = ...
    """
    Returns or sets  the normal slug parameter1 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugParameter1`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugParameter1`` 
    
    :param normalSlugParameter1: 
    :type normalSlugParameter1: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalSlugParameter2: float = ...
    """
    Returns or sets  the normal slug parameter2 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugParameter2`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugParameter2`` 
    
    :param normalSlugParameter2: 
    :type normalSlugParameter2: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalSlugParameter3: float = ...
    """
    Returns or sets  the normal slug parameter3 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugParameter3`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugParameter3`` 
    
    :param normalSlugParameter3: 
    :type normalSlugParameter3: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalSlugParameter4: float = ...
    """
    Returns or sets  the normal slug parameter4 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugParameter4`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugParameter4`` 
    
    :param normalSlugParameter4: 
    :type normalSlugParameter4: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetLinearDimension: NXOpen.Expression = ...
    """
    Returns  the offset linear dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetLinearDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name to create insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns:  Retruns parent part name  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPartName:  Specifies the parent part name  
    :type parentPartName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Position: DieCavityAndSlugHoleBuilderInsertPositionItems = ...
    """
    Returns or sets  the position 
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderInsertPositionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilderInsertPositionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectOffsetSpreadsheet: str = ...
    """
    Returns or sets  the super offset spreadsheet 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectOffsetSpreadsheet`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectOffsetSpreadsheet`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the select scrap 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectScrap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectSketch: NXOpen.SelectSketch = ...
    """
    Returns  the select sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectSketch` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ShimHeight: float = ...
    """
    Returns or sets  the shim height 
    
    <hr>
    
    Getter Method
    
    Signature ``ShimHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShimHeight`` 
    
    :param shimHeight: 
    :type shimHeight: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ShimOffset: float = ...
    """
    Returns or sets  the shim offset 
    
    <hr>
    
    Getter Method
    
    Signature ``ShimOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShimOffset`` 
    
    :param shimOffset: 
    :type shimOffset: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SlugHoleHeightLinearDimension: NXOpen.Expression = ...
    """
    Returns  the slug hole height linear dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugHoleHeightLinearDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SlugPreviousParameterA: float = ...
    """
    Returns or sets  the previous slug parameter A 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugPreviousParameterA`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SlugPreviousParameterA`` 
    
    :param slugPreviousParameterA: 
    :type slugPreviousParameterA: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SlugPreviousParameterC1: float = ...
    """
    Returns or sets  the previous slug parameter C1 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugPreviousParameterC1`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SlugPreviousParameterC1`` 
    
    :param slugPreviousParameterC1: 
    :type slugPreviousParameterC1: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SlugPreviousParameterC2: float = ...
    """
    Returns or sets  the previous slug parameter C2 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugPreviousParameterC2`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SlugPreviousParameterC2`` 
    
    :param slugPreviousParameterC2: 
    :type slugPreviousParameterC2: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SpacerAngle: float = ...
    """
    Returns or sets  the spacer angle 
    
    <hr>
    
    Getter Method
    
    Signature ``SpacerAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpacerAngle`` 
    
    :param spacerAngle: 
    :type spacerAngle: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SpacerOffset: float = ...
    """
    Returns or sets  the spacer offset 
    
    <hr>
    
    Getter Method
    
    Signature ``SpacerOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpacerOffset`` 
    
    :param spacerOffset: 
    :type spacerOffset: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WaferHeight: float = ...
    """
    Returns or sets  the wafer height 
    
    <hr>
    
    Getter Method
    
    Signature ``WaferHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WaferHeight`` 
    
    :param waferHeight: 
    :type waferHeight: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: DieCavityAndSlugHoleBuilder = ...  # unknown typename


class MotionSimulationCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of MotionSimulation.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateMotionSimulationBuilder(self) -> MotionSimulationBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.MotionSimulationBuilder`.  
        
        Signature ``CreateMotionSimulationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.MotionSimulationBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class SpecifyCircuitCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Specify Circuit builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> SpecifyCircuitBuilder:
        """
        Creates a SpecifyCircuit builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`SpecifyCircuitBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.SpecifyCircuitBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBaseBuilderTypes():
    """
    die base types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardDieBase", "standard die base"
       "CustomizeDieBase", "customize die base"
       "DesignTools", "die base design tools"
    """
    StandardDieBase = 0  # DieBaseBuilderTypesMemberType
    CustomizeDieBase = 1  # DieBaseBuilderTypesMemberType
    DesignTools = 2  # DieBaseBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilderParentNodeOptMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBaseBuilderParentNodeOpt():
    """
    parent node options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Control", "use PDW project's control part as parent part"
       "Die", "use PDW project's die part as parent part"
       "SubFirst", "use PDW project's sub-die base as parent part"
       "SubSecond", "use PDW project's sub-die base as parent part"
       "DieBaseFirst", "use PDW project's die base part as parent part"
    """
    Control = 0  # DieBaseBuilderParentNodeOptMemberType
    Die = 1  # DieBaseBuilderParentNodeOptMemberType
    SubFirst = 2  # DieBaseBuilderParentNodeOptMemberType
    SubSecond = 3  # DieBaseBuilderParentNodeOptMemberType
    DieBaseFirst = 4  # DieBaseBuilderParentNodeOptMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilderDieBaseTypeOptMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBaseBuilderDieBaseTypeOpt():
    """
    die bse types options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Pdw", "progressive die type"
       "SingleDie", "single die type"
       "CompoundDie", "compound die type"
       "DrawDie", "draw die type"
    """
    Pdw = 0  # DieBaseBuilderDieBaseTypeOptMemberType
    SingleDie = 1  # DieBaseBuilderDieBaseTypeOptMemberType
    CompoundDie = 2  # DieBaseBuilderDieBaseTypeOptMemberType
    DrawDie = 3  # DieBaseBuilderDieBaseTypeOptMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilderCatalogOptMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBaseBuilderCatalogOpt():
    """
    catalog options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Dme", "catalog for DME"
       "Futaba", "catalog for FUTABA"
    """
    Dme = 0  # DieBaseBuilderCatalogOptMemberType
    Futaba = 1  # DieBaseBuilderCatalogOptMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilderPlatesNumberOptMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBaseBuilderPlatesNumberOpt():
    """
    plates number options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PlateFive", "plates number is 5"
       "PlateEight", "plates number is 8"
       "PlateNine", "plates number is 9"
       "PlateTen", "plates number is 10"
       "PlateTwelve", "plates number is 12"
    """
    PlateFive = 0  # DieBaseBuilderPlatesNumberOptMemberType
    PlateEight = 1  # DieBaseBuilderPlatesNumberOptMemberType
    PlateNine = 2  # DieBaseBuilderPlatesNumberOptMemberType
    PlateTen = 3  # DieBaseBuilderPlatesNumberOptMemberType
    PlateTwelve = 4  # DieBaseBuilderPlatesNumberOptMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilderDesignToolOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBaseBuilderDesignToolOption():
    """
    design tool options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Split", "split sub die base"
       "Merge", "merge sub die base"
       "Align", "align sub die base"
       "Adjust", "adjust length of sub die base"
       "Save", "save sub die base as template"
       "Delete", "delete selected die base"
    """
    Split = 0  # DieBaseBuilderDesignToolOptionMemberType
    Merge = 1  # DieBaseBuilderDesignToolOptionMemberType
    Align = 2  # DieBaseBuilderDesignToolOptionMemberType
    Adjust = 3  # DieBaseBuilderDesignToolOptionMemberType
    Save = 4  # DieBaseBuilderDesignToolOptionMemberType
    Delete = 5  # DieBaseBuilderDesignToolOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilderSplitOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBaseBuilderSplitOption():
    """
    split options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Standard", " - "
       "UserDefined", " - "
    """
    Standard = 0  # DieBaseBuilderSplitOptionMemberType
    UserDefined = 1  # DieBaseBuilderSplitOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilderAlongDirectionOptMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBaseBuilderAlongDirectionOpt():
    """
    along direction options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AlongXDirection", "along X direction"
       "AlongYDirection", "along Y direction"
    """
    AlongXDirection = 0  # DieBaseBuilderAlongDirectionOptMemberType
    AlongYDirection = 1  # DieBaseBuilderAlongDirectionOptMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilderSplitMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieBaseBuilderSplitMethod():
    """
    split method. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WholeSubDiebase", "select whole sub-diebase"
       "SinglePlate", "select single plate"
    """
    WholeSubDiebase = 0  # DieBaseBuilderSplitMethodMemberType
    SinglePlate = 1  # DieBaseBuilderSplitMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieBaseBuilder(NXOpen.Builder):
    """
    Represents Progressive Die Wizard and Engineering Die Wizard builder to manage die base.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.DieBaseCollection.CreateDieBaseBuilder`
    
    Default values.
    
    ======================  ================
    Property                Value
    ======================  ================
    AlongDirection          AlongXDirection 
    ----------------------  ----------------
    Catalog                 Dme 
    ----------------------  ----------------
    Close                   0 
    ----------------------  ----------------
    DbEdgeDistance          0 
    ----------------------  ----------------
    DbRefPointX             0 
    ----------------------  ----------------
    DbRefPointY             0 
    ----------------------  ----------------
    DesignToolOpt           Split 
    ----------------------  ----------------
    DieBaseType             Pdw 
    ----------------------  ----------------
    FirstLength             0 
    ----------------------  ----------------
    GapFirst                0 
    ----------------------  ----------------
    GapSecond               0 
    ----------------------  ----------------
    LoadDBOnly              0 
    ----------------------  ----------------
    OpenDist                0 
    ----------------------  ----------------
    ParentNode              Control 
    ----------------------  ----------------
    PlateLength             0 
    ----------------------  ----------------
    PlateWidth              0 
    ----------------------  ----------------
    PlatesNumber            PlateNine 
    ----------------------  ----------------
    Rename                  0 
    ----------------------  ----------------
    SecondLength            0 
    ----------------------  ----------------
    SplitGap                0 
    ----------------------  ----------------
    SplitSubSingle          WholeSubDiebase 
    ----------------------  ----------------
    StandardOrUserDefined   Standard 
    ----------------------  ----------------
    StripTravelDistance     0 
    ----------------------  ----------------
    Type                    StandardDieBase 
    ----------------------  ----------------
    UpdateDieBasePosition   0 
    ----------------------  ----------------
    XDistanceFirst          0 
    ----------------------  ----------------
    XDistanceSecond         0 
    ----------------------  ----------------
    YDistanceFirst          0 
    ----------------------  ----------------
    YDistanceSecond         0 
    ======================  ================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        die base types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardDieBase", "standard die base"
           "CustomizeDieBase", "customize die base"
           "DesignTools", "die base design tools"
        """
        StandardDieBase = 0  # DieBaseBuilderTypesMemberType
        CustomizeDieBase = 1  # DieBaseBuilderTypesMemberType
        DesignTools = 2  # DieBaseBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParentNodeOpt():
        """
        parent node options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Control", "use PDW project's control part as parent part"
           "Die", "use PDW project's die part as parent part"
           "SubFirst", "use PDW project's sub-die base as parent part"
           "SubSecond", "use PDW project's sub-die base as parent part"
           "DieBaseFirst", "use PDW project's die base part as parent part"
        """
        Control = 0  # DieBaseBuilderParentNodeOptMemberType
        Die = 1  # DieBaseBuilderParentNodeOptMemberType
        SubFirst = 2  # DieBaseBuilderParentNodeOptMemberType
        SubSecond = 3  # DieBaseBuilderParentNodeOptMemberType
        DieBaseFirst = 4  # DieBaseBuilderParentNodeOptMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DieBaseTypeOpt():
        """
        die bse types options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Pdw", "progressive die type"
           "SingleDie", "single die type"
           "CompoundDie", "compound die type"
           "DrawDie", "draw die type"
        """
        Pdw = 0  # DieBaseBuilderDieBaseTypeOptMemberType
        SingleDie = 1  # DieBaseBuilderDieBaseTypeOptMemberType
        CompoundDie = 2  # DieBaseBuilderDieBaseTypeOptMemberType
        DrawDie = 3  # DieBaseBuilderDieBaseTypeOptMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CatalogOpt():
        """
        catalog options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Dme", "catalog for DME"
           "Futaba", "catalog for FUTABA"
        """
        Dme = 0  # DieBaseBuilderCatalogOptMemberType
        Futaba = 1  # DieBaseBuilderCatalogOptMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PlatesNumberOpt():
        """
        plates number options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PlateFive", "plates number is 5"
           "PlateEight", "plates number is 8"
           "PlateNine", "plates number is 9"
           "PlateTen", "plates number is 10"
           "PlateTwelve", "plates number is 12"
        """
        PlateFive = 0  # DieBaseBuilderPlatesNumberOptMemberType
        PlateEight = 1  # DieBaseBuilderPlatesNumberOptMemberType
        PlateNine = 2  # DieBaseBuilderPlatesNumberOptMemberType
        PlateTen = 3  # DieBaseBuilderPlatesNumberOptMemberType
        PlateTwelve = 4  # DieBaseBuilderPlatesNumberOptMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DesignToolOption():
        """
        design tool options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Split", "split sub die base"
           "Merge", "merge sub die base"
           "Align", "align sub die base"
           "Adjust", "adjust length of sub die base"
           "Save", "save sub die base as template"
           "Delete", "delete selected die base"
        """
        Split = 0  # DieBaseBuilderDesignToolOptionMemberType
        Merge = 1  # DieBaseBuilderDesignToolOptionMemberType
        Align = 2  # DieBaseBuilderDesignToolOptionMemberType
        Adjust = 3  # DieBaseBuilderDesignToolOptionMemberType
        Save = 4  # DieBaseBuilderDesignToolOptionMemberType
        Delete = 5  # DieBaseBuilderDesignToolOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplitOption():
        """
        split options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Standard", " - "
           "UserDefined", " - "
        """
        Standard = 0  # DieBaseBuilderSplitOptionMemberType
        UserDefined = 1  # DieBaseBuilderSplitOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AlongDirectionOpt():
        """
        along direction options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AlongXDirection", "along X direction"
           "AlongYDirection", "along Y direction"
        """
        AlongXDirection = 0  # DieBaseBuilderAlongDirectionOptMemberType
        AlongYDirection = 1  # DieBaseBuilderAlongDirectionOptMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SplitMethod():
        """
        split method. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WholeSubDiebase", "select whole sub-diebase"
           "SinglePlate", "select single plate"
        """
        WholeSubDiebase = 0  # DieBaseBuilderSplitMethodMemberType
        SinglePlate = 1  # DieBaseBuilderSplitMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def PickArea(self) -> None:
        """
        The action to pick work area for die base.  
        
        Signature ``PickArea()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RefPoint(self) -> None:
        """
        The action to specify the reference point for the die base 
        
        Signature ``RefPoint()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DieBaseReg(self) -> None:
        """
        The action to edit die base register file.  
        
        Signature ``DieBaseReg()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DieBaseData(self) -> None:
        """
        The action to edit die base data file.  
        
        Signature ``DieBaseData()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def PickSplitLocation(self) -> None:
        """
        The action to pick split location.  
        
        Signature ``PickSplitLocation()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def PickLocation(self) -> None:
        """
        The action to pick location for die base.  
        
        Signature ``PickLocation()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteSelectedDieBase(self) -> None:
        """
        The action to delete selected die base.  
        
        Signature ``DeleteSelectedDieBase()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    AdjustedPlateLength: float = ...
    """
    Returns or sets  the plate length value.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjustedPlateLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjustedPlateLength`` 
    
    :param adjustedPlateLength: 
    :type adjustedPlateLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    AlongDirection: DieBaseBuilderAlongDirectionOpt = ...
    """
    Returns or sets  the direction options.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlongDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilderAlongDirectionOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlongDirection`` 
    
    :param alongDirection: 
    :type alongDirection: :py:class:`NXOpen.Tooling.DieBaseBuilderAlongDirectionOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Catalog: DieBaseBuilderCatalogOpt = ...
    """
    Returns or sets  the die base catalog.  
    
    <hr>
    
    Getter Method
    
    Signature ``Catalog`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilderCatalogOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Catalog`` 
    
    :param catalog: 
    :type catalog: :py:class:`NXOpen.Tooling.DieBaseBuilderCatalogOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Close: float = ...
    """
    Returns or sets  the die close status value.  
    
    <hr>
    
    Getter Method
    
    Signature ``Close`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Close`` 
    
    :param close: 
    :type close: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    CreateSplittingCurves: NXOpen.Section = ...
    """
    Returns  the create splitting curves 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateSplittingCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DbEdgeDistance: float = ...
    """
    Returns or sets  the distance to die base edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``DbEdgeDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DbEdgeDistance`` 
    
    :param dbEdgeDistance: 
    :type dbEdgeDistance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    DbRefPointX: float = ...
    """
    Returns or sets  the X coordinates of reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DbRefPointX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DbRefPointX`` 
    
    :param dbRefPointX: 
    :type dbRefPointX: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    DbRefPointY: float = ...
    """
    Returns or sets  the Y coordinates of reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``DbRefPointY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DbRefPointY`` 
    
    :param dbRefPointY: 
    :type dbRefPointY: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    DesignToolOpt: DieBaseBuilderDesignToolOption = ...
    """
    Returns or sets  the design tool options.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignToolOpt`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilderDesignToolOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignToolOpt`` 
    
    :param designToolOpt: 
    :type designToolOpt: :py:class:`NXOpen.Tooling.DieBaseBuilderDesignToolOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    DieBase: NXOpen.SelectBody = ...
    """
    Returns  the selected die base.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieBase`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DieBaseToDelete: NXOpen.SelectBodyList = ...
    """
    Returns  the selected die base to delete.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieBaseToDelete`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DieBaseType: DieBaseBuilderDieBaseTypeOpt = ...
    """
    Returns or sets  the die base type( progressive die, single die, draw die or compound die).  
    
    <hr>
    
    Getter Method
    
    Signature ``DieBaseType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilderDieBaseTypeOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DieBaseType`` 
    
    :param dieBaseType: 
    :type dieBaseType: :py:class:`NXOpen.Tooling.DieBaseBuilderDieBaseTypeOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    FirstLength: float = ...
    """
    Returns or sets  the first section length.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstLength`` 
    
    :param firstLength: 
    :type firstLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    GapFirst: float = ...
    """
    Returns or sets  the first gap value.  
    
    <hr>
    
    Getter Method
    
    Signature ``GapFirst`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GapFirst`` 
    
    :param gapFirst: 
    :type gapFirst: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    GapSecond: float = ...
    """
    Returns or sets  the second gap value.  
    
    <hr>
    
    Getter Method
    
    Signature ``GapSecond`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GapSecond`` 
    
    :param gapSecond: 
    :type gapSecond: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    LoadDBOnly: bool = ...
    """
    Returns or sets  the option whether load die base only or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``LoadDBOnly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadDBOnly`` 
    
    :param loadDBOnly: 
    :type loadDBOnly: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    NewDieBaseName: str = ...
    """
    Returns or sets  the new die base part name.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewDieBaseName`` 
    
    :returns:  Retruns  new die basename  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewDieBaseName`` 
    
    :param dieBaseName:  Specifies the new die base name  
    :type dieBaseName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    OpenDist: float = ...
    """
    Returns or sets  the open distance value.  
    
    <hr>
    
    Getter Method
    
    Signature ``OpenDist`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OpenDist`` 
    
    :param openDist: 
    :type openDist: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    ParentNode: DieBaseBuilderParentNodeOpt = ...
    """
    Returns or sets  the parent node.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentNode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilderParentNodeOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentNode`` 
    
    :param parentNode: 
    :type parentNode: :py:class:`NXOpen.Tooling.DieBaseBuilderParentNodeOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns:  Retruns parent part name  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPart:  Specifies the parent part name  
    :type parentPart: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    PlateLength: float = ...
    """
    Returns or sets  the plate length value.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateLength`` 
    
    :param plateLength: 
    :type plateLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    PlateWidth: float = ...
    """
    Returns or sets  the plate width value.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateWidth`` 
    
    :param plateWidth: 
    :type plateWidth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    PlatesNumber: DieBaseBuilderPlatesNumberOpt = ...
    """
    Returns or sets  the user defined plates number.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlatesNumber`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilderPlatesNumberOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlatesNumber`` 
    
    :param platesNumber: 
    :type platesNumber: :py:class:`NXOpen.Tooling.DieBaseBuilderPlatesNumberOpt` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Rename: bool = ...
    """
    Returns or sets  the option whether rename the die base or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    SecondLength: float = ...
    """
    Returns or sets  the second section length.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondLength`` 
    
    :param secondLength: 
    :type secondLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    SelectPlateToSplit: NXOpen.SelectPart = ...
    """
    Returns  the selected die plates.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPlateToSplit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPart` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectSubDieBase: NXOpen.SelectPart = ...
    """
    Returns  the selected sub die base part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectSubDieBase`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPart` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SplitGap: float = ...
    """
    Returns or sets  the split gap value.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitGap`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SplitGap`` 
    
    :param splitGap: 
    :type splitGap: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    SplitSubSingle: DieBaseBuilderSplitMethod = ...
    """
    Returns or sets  the split options: whole sub die base or single plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitSubSingle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilderSplitMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SplitSubSingle`` 
    
    :param splitSubSingle: 
    :type splitSubSingle: :py:class:`NXOpen.Tooling.DieBaseBuilderSplitMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    StandardOrUserDefined: DieBaseBuilderSplitOption = ...
    """
    Returns or sets  the standard or user defined split option 
    
    <hr>
    
    Getter Method
    
    Signature ``StandardOrUserDefined`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilderSplitOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardOrUserDefined`` 
    
    :param standardOrUserDefined: 
    :type standardOrUserDefined: :py:class:`NXOpen.Tooling.DieBaseBuilderSplitOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StripTravelDistance: float = ...
    """
    Returns or sets  the strip travel distance value.  
    
    <hr>
    
    Getter Method
    
    Signature ``StripTravelDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StripTravelDistance`` 
    
    :param stripTravelDistance: 
    :type stripTravelDistance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Type: DieBaseBuilderTypes = ...
    """
    Returns or sets  the die base type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.DieBaseBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    UpdateDieBasePosition: bool = ...
    """
    Returns or sets  the option whether update die base position or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateDieBasePosition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateDieBasePosition`` 
    
    :param updateDieBasePosition: 
    :type updateDieBasePosition: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    XDistanceFirst: float = ...
    """
    Returns or sets  the first distance along X value.  
    
    <hr>
    
    Getter Method
    
    Signature ``XDistanceFirst`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XDistanceFirst`` 
    
    :param xDistanceFirst: 
    :type xDistanceFirst: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    XDistanceSecond: float = ...
    """
    Returns or sets  the second distance along X value.  
    
    <hr>
    
    Getter Method
    
    Signature ``XDistanceSecond`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XDistanceSecond`` 
    
    :param xDistanceSecond: 
    :type xDistanceSecond: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    YDistanceFirst: float = ...
    """
    Returns or sets  the first distance along Y value.  
    
    <hr>
    
    Getter Method
    
    Signature ``YDistanceFirst`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YDistanceFirst`` 
    
    :param yDistanceFirst: 
    :type yDistanceFirst: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    YDistanceSecond: float = ...
    """
    Returns or sets  the second distance along Y value.  
    
    <hr>
    
    Getter Method
    
    Signature ``YDistanceSecond`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YDistanceSecond`` 
    
    :param dySecond: 
    :type dySecond: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Null: DieBaseBuilder = ...  # unknown typename


class SpindleSliderBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Tooling.SpindleSliderBuilder` to create a spindle slider  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateSpindleSliderBuilder`
    
    .. versionadded:: NX10.0.2
    """
    
    def DeleteSpindleSlider(self, spindleSliderName: str) -> None:
        """
        Deletes the spindle slider 
        
        Signature ``DeleteSpindleSlider(spindleSliderName)`` 
        
        :param spindleSliderName: 
        :type spindleSliderName: str 
        
        .. versionadded:: NX10.0.2
        
        License requirements: nx_dievalidation ("DIE VALIDATION")
        """
        ...
    
    DriveBody: NXOpen.SelectNXObjectList = ...
    """
    Returns  the drive body 
    
    <hr>
    
    Getter Method
    
    Signature ``DriveBody`` 
    
    :returns:  Solid body, sheet body or facet body 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    """
    DriveVector: NXOpen.Direction = ...
    """
    Returns or sets  the direction that drive body drives spindle slider 
    
    <hr>
    
    Getter Method
    
    Signature ``DriveVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DriveVector`` 
    
    :param driveVector: 
    :type driveVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.2
    
    License requirements: nx_dievalidation ("DIE VALIDATION")
    """
    SpindleSliderBody: NXOpen.SelectNXObjectList = ...
    """
    Returns  the spindle slider body 
    
    <hr>
    
    Getter Method
    
    Signature ``SpindleSliderBody`` 
    
    :returns:  Solid body, sheet body or facet body 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    """
    SpindleSliderName: str = ...
    """
    Returns or sets  the spindle slider name 
    
    <hr>
    
    Getter Method
    
    Signature ``SpindleSliderName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpindleSliderName`` 
    
    :param spindleSliderName: 
    :type spindleSliderName: str 
    
    .. versionadded:: NX10.0.2
    
    License requirements: nx_dievalidation ("DIE VALIDATION")
    """
    SpindleSliderVector: NXOpen.Direction = ...
    """
    Returns or sets  the direction spindle slider move along 
    
    <hr>
    
    Getter Method
    
    Signature ``SpindleSliderVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpindleSliderVector`` 
    
    :param spindleSliderVector: 
    :type spindleSliderVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.2
    
    License requirements: nx_dievalidation ("DIE VALIDATION")
    """
    Null: SpindleSliderBuilder = ...  # unknown typename


class SpecifyCircuitBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create specify circuit.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.SpecifyCircuitCollection.CreateBuilder`
    
    Default values.
    
    ===============  =====
    Property         Value
    ===============  =====
    CreateFittings   1 
    ---------------  -----
    KeepCircuit      0 
    ---------------  -----
    Layer            251 
    ---------------  -----
    UseSymbol        1 
    ===============  =====
    
    .. versionadded:: NX8.0.0
    """
    
    def CheckStatus(self) -> None:
        """
        Check whether cooling circuit is finished or not.  
        
        Signature ``CheckStatus()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    @typing.overload
    def GetCircuitColor(self) -> None:
        """Returns or sets  the circuit channel temperary body color."""
        ...
    
    @typing.overload
    def GetCircuitColor(self) -> NXOpen.NXColor:
        """
        Getter Method
        
        Signature ``CircuitColor`` 
        
        :returns: 
        :rtype: Id 
        
        .. versionadded:: NX8.0.1
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetCircuitColor(self, circuitColor: NXOpen.NXColor) -> None:
        """
        Setter Method
        
        Signature ``CircuitColor`` 
        
        :param circuitColor: 
        :type circuitColor: Id 
        
        .. versionadded:: NX8.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    @typing.overload
    def GetCircuitColor(self) -> 'list[float]':
        """
        Returns the circuit channel body color.  
        
        Signature ``GetCircuitColor()`` 
        
        :returns:  Array of 3 RGB values, each between 0 and 1  
        :rtype: list of float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetCircuitColor(self) -> None:
        """Returns or sets  the circuit channel temperary body color."""
        ...
    
    @typing.overload
    def SetCircuitColor(self, circuitColor: NXOpen.NXColor) -> None:
        """
        Getter Method
        
        Signature ``CircuitColor`` 
        
        :param circuitColor: 
        :type circuitColor: Id 
        
        .. versionadded:: NX8.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    @typing.overload
    def SetCircuitColor(self, circuitColor: NXOpen.NXColor) -> None:
        """
        Setter Method
        
        Signature ``CircuitColor`` 
        
        :param circuitColor: 
        :type circuitColor: Id 
        
        .. versionadded:: NX8.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    @typing.overload
    def SetCircuitColor(self, circuitColor: 'list[float]') -> None:
        """
        Sets the circuit color. 
        
        Signature ``SetCircuitColor(circuitColor)`` 
        
        :param circuitColor:  Array of 3 RGB values, each between 0 and 1  
        :type circuitColor: list of float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def GetOneCircuit(self, channels: 'list[NXOpen.Body]') -> None:
        """
        Gets intersect cooling list value.  
        
        Signature ``GetOneCircuit(channels)`` 
        
        :param channels:  the cooling body 
        :type channels: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def InitializeCircuitSetData(self) -> None:
        """
        Initializes the circuit set data.  
        
        Signature ``InitializeCircuitSetData()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateCoolingFittingData(self) -> CoolingFittingData:
        """
        Creates the cooling fitting data object.  
        
        Signature ``CreateCoolingFittingData()`` 
        
        :returns:  the new :py:class:`NXOpen.Tooling.CoolingFittingData` instance  
        :rtype: :py:class:`NXOpen.Tooling.CoolingFittingData` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def GetCoolingFittingData(self) -> CoolingFittingData:
        """
        Gets the Cooling Fitting Data object.  
        
        Signature ``GetCoolingFittingData()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CoolingFittingData` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    ChannelColor: NXOpen.NXColor = ...
    """
    Returns or sets  the circuit channel body color.  
    
    <hr>
    
    Getter Method
    
    Signature ``ChannelColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChannelColor`` 
    
    :param channelColor: 
    :type channelColor: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    CircuitColor: NXOpen.NXColor = ...
    """
    Returns or sets  the circuit channel temperary body color.  
    
    <hr>
    
    Getter Method
    
    Signature ``CircuitColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircuitColor`` 
    
    :param circuitColor: 
    :type circuitColor: Id 
    
    .. versionadded:: NX8.0.1
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    CreateFittings: bool = ...
    """
    Returns or sets  the value which specifies whether to add fittings or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateFittings`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateFittings`` 
    
    :param createFittings: 
    :type createFittings: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    InletChannel: NXOpen.SelectBodyList = ...
    """
    Returns  the inlet channel.  
    
    <hr>
    
    Getter Method
    
    Signature ``InletChannel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    KeepCircuit: bool = ...
    """
    Returns or sets  the option whether to keep the circuit displayed body.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepCircuit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepCircuit`` 
    
    :param keepCircuit: 
    :type keepCircuit: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Layer: int = ...
    """
    Returns or sets  the layer value for the selected channels.  
    
    <hr>
    
    Getter Method
    
    Signature ``Layer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Layer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    OutletChannel: NXOpen.SelectBody = ...
    """
    Returns  the outlet channel.  
    
    <hr>
    
    Getter Method
    
    Signature ``OutletChannel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    UseSymbol: bool = ...
    """
    Returns or sets  the value which specifies whether to add real component or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseSymbol`` 
    
    :param useSymbol: 
    :type useSymbol: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Null: SpecifyCircuitBuilder = ...  # unknown typename


class ConceptPositionBuilder(NXOpen.Builder):
    """
    concept position builder for standard part design   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ConceptPositionCollection.CreateConceptPositionBuilder`
    
    .. versionadded:: NX6.0.0
    """
    LocatedPoint: NXOpen.Point = ...
    """
    Returns or sets  the located point 
    
    <hr>
    
    Getter Method
    
    Signature ``LocatedPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LocatedPoint`` 
    
    :param locatedPoint: 
    :type locatedPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PartPosition: NXOpen.Section = ...
    """
    Returns  the part position section 
    
    <hr>
    
    Getter Method
    
    Signature ``PartPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ConceptPositionBuilder = ...  # unknown typename


class ElectrodeDeleteBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ElectrodeDeleteBuilderTypes():
    """
    delete sparking solid from blank or delete blank, pallet or holder directly. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SparkingBody", "Delete sparking body from electrode."
       "Component", "Delete electrode, holder and pallet."
    """
    SparkingBody = 0  # ElectrodeDeleteBuilderTypesMemberType
    Component = 1  # ElectrodeDeleteBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ElectrodeDeleteBuilder(NXOpen.Builder):
    """
    Electrode delete component builder to remove blank, pallet and holder from assembly.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ElectrodeDesignCollection.CreateDeleteComponentBuilder`
    
    Default values.
    
    =========  =====
    Property   Value
    =========  =====
    KeepSize   0 
    =========  =====
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        delete sparking solid from blank or delete blank, pallet or holder directly. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SparkingBody", "Delete sparking body from electrode."
           "Component", "Delete electrode, holder and pallet."
        """
        SparkingBody = 0  # ElectrodeDeleteBuilderTypesMemberType
        Component = 1  # ElectrodeDeleteBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Component: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the utility to get component to delete.  
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Head: NXOpen.Features.SelectFeatureList = ...
    """
    Returns  the utility to get sparking solid to delete.  
    
    <hr>
    
    Getter Method
    
    Signature ``Head`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeatureList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    KeepSize: bool = ...
    """
    Returns or sets  the option to keep blank size after deleting sparking solid.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSize`` 
    
    :param keepSize: 
    :type keepSize: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    RoundPosition: bool = ...
    """
    Returns or sets  the option to round electrode position.  
    
    <hr>
    
    Getter Method
    
    Signature ``RoundPosition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RoundPosition`` 
    
    :param roundPosition: 
    :type roundPosition: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Type: ElectrodeDeleteBuilderTypes = ...
    """
    Returns or sets  the object type to be deleted.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ElectrodeDeleteBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.ElectrodeDeleteBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Null: ElectrodeDeleteBuilder = ...  # unknown typename


class FamilyMoldBuilder(NXOpen.Builder):
    """
    Creates a Mold Wizard Family Mold builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.FamilyMoldCollection.CreateFamilyMoldBuilder`
    
    .. versionadded:: NX6.0.0
    """
    ItemIndex: int = ...
    """
    Returns or sets  the method to get the selected item index from family mold builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ItemIndex`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemIndex`` 
    
    :param intItemIndex: 
    :type intItemIndex: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ListItem: str = ...
    """
    Returns or sets  the method to get the selected item name from family mold builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ListItem`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ListItem`` 
    
    :param strListItem: 
    :type strListItem: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: FamilyMoldBuilder = ...  # unknown typename


class SubInsertBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubInsertBuilderTypes():
    """
    Represents the type of parent part 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ParentOfSolidOwningPart", "The parent part is the parent of solid owning part"
       "ProdPart", "The parent part is Prod part"
       "SolidOwningPart", "The parent part is the owning part of solid"
       "CurrentWorkPart", "The parent part is current work part"
    """
    ParentOfSolidOwningPart = 0  # SubInsertBuilderTypesMemberType
    ProdPart = 1  # SubInsertBuilderTypesMemberType
    SolidOwningPart = 2  # SubInsertBuilderTypesMemberType
    CurrentWorkPart = 3  # SubInsertBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubInsertBuilderShapeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SubInsertBuilderShape():
    """
    Represents the foot shape 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Box", "The shape is a block"
       "Cylinder", "The shape is a cylinder"
    """
    Box = 0  # SubInsertBuilderShapeMemberType
    Cylinder = 1  # SubInsertBuilderShapeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SubInsertBuilder(NXOpen.Builder):
    """
    The SubInsert builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.SubInsertCollection.CreateSubInsertBuilder`
    
    Default values.
    
    ============  =====
    Property      Value
    ============  =====
    InputParm     0 
    ------------  -----
    Rename        0 
    ------------  -----
    SelFootType   Box 
    ============  =====
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Represents the type of parent part 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ParentOfSolidOwningPart", "The parent part is the parent of solid owning part"
           "ProdPart", "The parent part is Prod part"
           "SolidOwningPart", "The parent part is the owning part of solid"
           "CurrentWorkPart", "The parent part is current work part"
        """
        ParentOfSolidOwningPart = 0  # SubInsertBuilderTypesMemberType
        ProdPart = 1  # SubInsertBuilderTypesMemberType
        SolidOwningPart = 2  # SubInsertBuilderTypesMemberType
        CurrentWorkPart = 3  # SubInsertBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Shape():
        """
        Represents the foot shape 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Box", "The shape is a block"
           "Cylinder", "The shape is a cylinder"
        """
        Box = 0  # SubInsertBuilderShapeMemberType
        Cylinder = 1  # SubInsertBuilderShapeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def EditRegFile(self) -> None:
        """
        Edit register file of foot 
        
        Signature ``EditRegFile()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditDatabase(self) -> None:
        """
        Edit datebase of foot 
        
        Signature ``EditDatabase()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    InputParm: float = ...
    """
    Returns or sets  the parameter of foot 
    
    <hr>
    
    Getter Method
    
    Signature ``InputParm`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InputParm`` 
    
    :param inputParm: 
    :type inputParm: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Rename: bool = ...
    """
    Returns or sets  the subinsert name 
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelFootType: SubInsertBuilderShape = ...
    """
    Returns or sets  the foot type which can be a box or a cylinder 
    
    <hr>
    
    Getter Method
    
    Signature ``SelFootType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SubInsertBuilderShape` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelFootType`` 
    
    :param selFootType: 
    :type selFootType: :py:class:`NXOpen.Tooling.SubInsertBuilderShape` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectBotFace: NXOpen.SelectBodyList = ...
    """
    Returns  the bottom face to position the sub-insert 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBotFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectHead: NXOpen.SelectBodyList = ...
    """
    Returns  the head of sub-insert 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectHead`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: SubInsertBuilderTypes = ...
    """
    Returns or sets  the parent part type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SubInsertBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.SubInsertBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SubInsertBuilder = ...  # unknown typename


class BomCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Bom   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBomBuilder(self) -> BomBuilder:
        """
        Creates a BOM builder  
        
        Signature ``CreateBomBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.BomBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class ColorExpressionsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.ColorExpressionsBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateColorExpressionsBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def SetCurrentUDO(self, udo: NXOpen.UserDefinedObjects.UserDefinedObject) -> None:
        """
        Select current udo 
        
        Signature ``SetCurrentUDO(udo)`` 
        
        :param udo:  The udo object  
        :type udo: :py:class:`NXOpen.UserDefinedObjects.UserDefinedObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteCurrentUDO(self) -> None:
        """
        Delete current udo 
        
        Signature ``DeleteCurrentUDO()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def BlockCurrentUDO(self, blocked: bool) -> None:
        """
        Block current udo 
        
        Signature ``BlockCurrentUDO(blocked)`` 
        
        :param blocked: 
        :type blocked: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    ColorName: str = ...
    """
    Returns or sets  the color name 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColorName`` 
    
    :param colorName: 
    :type colorName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ColorPicker: NXOpen.NXColor = ...
    """
    Returns or sets  the color picker 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorPicker`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColorPicker`` 
    
    :param colorPicker: 
    :type colorPicker: Id 
    
    .. versionadded:: NX12.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectFaces: NXOpen.ScCollector = ...
    """
    Returns  the solid faces selected by user
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: ColorExpressionsBuilder = ...  # unknown typename


class RunnerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Runner   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def CreateRunnerBuilder(self) -> RunnerBuilder:
        """
        Creates a Runner builder  
        
        Signature ``CreateRunnerBuilder()`` 
        
        :returns:  Runner Builder object  
        :rtype: :py:class:`NXOpen.Tooling.RunnerBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def CreateRunnerBuilder(self, runnerFeature: NXOpen.Features.BodyFeature) -> RunnerBuilder:
        """
        Creates a Runner builder  
        
        Signature ``CreateRunnerBuilder(runnerFeature)`` 
        
        :param runnerFeature:  :py:class:`NXOpen.Tooling.Runner` to be edited  
        :type runnerFeature: :py:class:`NXOpen.Features.BodyFeature` 
        :returns:  :py:class:`NXOpen.Tooling.RunnerBuilder`  
        :rtype: :py:class:`NXOpen.Tooling.RunnerBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    


class MoldProcessCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Mold Process   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateMoldProcessBuilder(self) -> MoldProcessBuilder:
        """
        Creates a Mold Process builder  
        
        Signature ``CreateMoldProcessBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.MoldProcessBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class DirectUnfoldBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DirectUnfoldBuilderTypes():
    """
    Specifies the option of direct unfold type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Convert", "the direct unfold type of convert to Sheet Metal"
       "MergeBends", "the direct unfold type of merge bends"
       "DefinePreBends", "the direct unfold type of define pre-bends"
       "DeleteBends", "the direct unfold type of delete all bends"
    """
    Convert = 0  # DirectUnfoldBuilderTypesMemberType
    MergeBends = 1  # DirectUnfoldBuilderTypesMemberType
    DefinePreBends = 2  # DirectUnfoldBuilderTypesMemberType
    DeleteBends = 3  # DirectUnfoldBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DirectUnfoldBuilderBodyListMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DirectUnfoldBuilderBodyList():
    """
    The name list of bodies in current part. It is changed in selecting different part. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Default is none."
    """
    NotSet = 0  # DirectUnfoldBuilderBodyListMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DirectUnfoldBuilderMatTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DirectUnfoldBuilderMatType():
    """
    The material database defined in PDW. It is added in project initialization. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Steel", "Default is steel."
    """
    Steel = 0  # DirectUnfoldBuilderMatTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DirectUnfoldBuilderBendMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DirectUnfoldBuilderBend():
    """
    The number of children bends in defining prebend. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Two", "two bends"
       "Three", "three bends"
       "Four", "four bends"
       "Five", "five bends"
       "Six", "six bends"
    """
    Two = 0  # DirectUnfoldBuilderBendMemberType
    Three = 1  # DirectUnfoldBuilderBendMemberType
    Four = 2  # DirectUnfoldBuilderBendMemberType
    Five = 3  # DirectUnfoldBuilderBendMemberType
    Six = 4  # DirectUnfoldBuilderBendMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DirectUnfoldBuilder(NXOpen.Builder):
    """
    The builder contains all inputs for direct unfolding.  
    
    They are:
    name of current design part
    name of bodies in current part
    planar faces for auto-recogniton
    ...
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.DirectUnfoldCollection.CreateDirectUnfoldBuilder`
    
    Default values.
    
    =========================================  ========
    Property                                   Value
    =========================================  ========
    Angle1                                     30 
    -----------------------------------------  --------
    Angle2                                     30 
    -----------------------------------------  --------
    Angle3                                     30 
    -----------------------------------------  --------
    Angle4                                     30 
    -----------------------------------------  --------
    Angle5                                     30 
    -----------------------------------------  --------
    Angle6                                     30 
    -----------------------------------------  --------
    CurBodies                                  None 
    -----------------------------------------  --------
    DefineNeutralFactor.BendDevelopedLength    0 
    -----------------------------------------  --------
    DefineNeutralFactor.NeutralFactor          0.40 
    -----------------------------------------  --------
    DefineNeutralFactor.NeutralFactorFormula   General 
    -----------------------------------------  --------
    DefineNeutralFactor.PartMaterial           08 
    -----------------------------------------  --------
    DesignSequence                             0 
    -----------------------------------------  --------
    DevLength (deprecated)                     0 
    -----------------------------------------  --------
    InterRenameComp                            0 
    -----------------------------------------  --------
    Materials (deprecated)                     Steel 
    -----------------------------------------  --------
    NumBends                                   Two 
    -----------------------------------------  --------
    NumInter                                   1 
    -----------------------------------------  --------
    OrientPitch                                0 
    -----------------------------------------  --------
    Pitch                                      0 
    -----------------------------------------  --------
    StartStation                               2 
    =========================================  ========
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Specifies the option of direct unfold type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Convert", "the direct unfold type of convert to Sheet Metal"
           "MergeBends", "the direct unfold type of merge bends"
           "DefinePreBends", "the direct unfold type of define pre-bends"
           "DeleteBends", "the direct unfold type of delete all bends"
        """
        Convert = 0  # DirectUnfoldBuilderTypesMemberType
        MergeBends = 1  # DirectUnfoldBuilderTypesMemberType
        DefinePreBends = 2  # DirectUnfoldBuilderTypesMemberType
        DeleteBends = 3  # DirectUnfoldBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BodyList():
        """
        The name list of bodies in current part. It is changed in selecting different part. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Default is none."
        """
        NotSet = 0  # DirectUnfoldBuilderBodyListMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MatType():
        """
        The material database defined in PDW. It is added in project initialization. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Steel", "Default is steel."
        """
        Steel = 0  # DirectUnfoldBuilderMatTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Bend():
        """
        The number of children bends in defining prebend. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Two", "two bends"
           "Three", "three bends"
           "Four", "four bends"
           "Five", "five bends"
           "Six", "six bends"
        """
        Two = 0  # DirectUnfoldBuilderBendMemberType
        Three = 1  # DirectUnfoldBuilderBendMemberType
        Four = 2  # DirectUnfoldBuilderBendMemberType
        Five = 3  # DirectUnfoldBuilderBendMemberType
        Six = 4  # DirectUnfoldBuilderBendMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def LoadDatabase(self) -> None:
        """
        Opens process_data Speadsheet in PDW.  
        
        Signature ``LoadDatabase()`` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX10.0.0
           This functionality is no longer supported.
        
        License requirements: None.
        """
        ...
    
    
    def KByMaterial(self) -> None:
        """
        Evaluates K factors for every bend by giving material, radius of the bend and thickenss of the part.  
        
        Signature ``KByMaterial()`` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX10.0.0
           This functionality is no longer supported.
        
        License requirements: None.
        """
        ...
    
    AdditionalBendFaces: NXOpen.ScCollector = ...
    """
    Returns  the additional bend faces 
    
    <hr>
    
    Getter Method
    
    Signature ``AdditionalBendFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Angle1: float = ...
    """
    Returns or sets  the first angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle1`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle1`` 
    
    :param angle1: 
    :type angle1: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Angle2: float = ...
    """
    Returns or sets  the second angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle2`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle2`` 
    
    :param angle2: 
    :type angle2: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Angle3: float = ...
    """
    Returns or sets  the third angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle3`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle3`` 
    
    :param angle3: 
    :type angle3: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Angle4: float = ...
    """
    Returns or sets  the fourth angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle4`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle4`` 
    
    :param angle4: 
    :type angle4: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Angle5: float = ...
    """
    Returns or sets  the fifth angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle5`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle5`` 
    
    :param angle5: 
    :type angle5: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Angle6: float = ...
    """
    Returns or sets  the sixth angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle6`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle6`` 
    
    :param angle6: 
    :type angle6: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CurBodies: DirectUnfoldBuilderBodyList = ...
    """
    Returns or sets  the current body list.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurBodies`` 
    
    :param curBodies: 
    :type curBodies: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DefineNeutralFactor: DefineNeutralFactorBuilder = ...
    """
    Returns  the define neutral factor builder which contains new neutral factor, part material and bend developed length 
    
    <hr>
    
    Getter Method
    
    Signature ``DefineNeutralFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DefineNeutralFactorBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    DesignSequence: int = ...
    """
    Returns or sets  the design sequence.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignSequence`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignSequence`` 
    
    :param designSequence: 
    :type designSequence: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DevLength: float = ...
    """
    Returns or sets  the operations to developed length of a bend.  
    
    <hr>
    
    Getter Method
    
    Signature ``DevLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.DefineNeutralFactorBuilder.BendDevelopedLength` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DevLength`` 
    
    :param devLength: 
    :type devLength: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.DefineNeutralFactorBuilder.BendDevelopedLength` instead.
    
    License requirements: None.
    """
    EditOption: int = ...
    """
    Returns or sets  the edit intermediate stage option.  
    
    <hr>
    
    Getter Method
    
    Signature ``EditOption`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditOption`` 
    
    :param editOption: 
    :type editOption: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InterNamingRule: str = ...
    """
    Returns or sets  the naming rule of intermediate stages.  
    
    <hr>
    
    Getter Method
    
    Signature ``InterNamingRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterNamingRule`` 
    
    :param interNamingRule: 
    :type interNamingRule: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    InterRenameComp: bool = ...
    """
    Returns or sets  the switch of rename components.  
    
    <hr>
    
    Getter Method
    
    Signature ``InterRenameComp`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterRenameComp`` 
    
    :param interRenameComp: 
    :type interRenameComp: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    InterStage: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the intermediate stages selected as the reference of insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``InterStage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    KFactor: str = ...
    """
    Returns or sets  the operations of k factor for a single bend.  
    
    <hr>
    
    Getter Method
    
    Signature ``KFactor`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.DefineNeutralFactorBuilder.NeutralFactor` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KFactor`` 
    
    :param kFactor: 
    :type kFactor: str 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.DefineNeutralFactorBuilder.NeutralFactor` instead.
    
    License requirements: None.
    """
    Materials: DirectUnfoldBuilderMatType = ...
    """
    Returns or sets  the materials available in PDW.  
    
    <hr>
    
    Getter Method
    
    Signature ``Materials`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderMatType` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.DefineNeutralFactorBuilder.PartMaterial` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Materials`` 
    
    :param materials: 
    :type materials: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderMatType` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.DefineNeutralFactorBuilder.PartMaterial` instead.
    
    License requirements: None.
    """
    NumBends: DirectUnfoldBuilderBend = ...
    """
    Returns or sets  the number of bends.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumBends`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderBend` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumBends`` 
    
    :param numBends: 
    :type numBends: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderBend` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NumInter: int = ...
    """
    Returns or sets  the number of intermediate stages.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumInter`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumInter`` 
    
    :param numInter: 
    :type numInter: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OrientPitch: int = ...
    """
    Returns or sets  the orientation of pitch.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientPitch`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientPitch`` 
    
    :param orientPitch: 
    :type orientPitch: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Pitch: float = ...
    """
    Returns or sets  the pitch.  
    
    <hr>
    
    Getter Method
    
    Signature ``Pitch`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Pitch`` 
    
    :param pitch: 
    :type pitch: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelPlanarFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the planar faces selected as the start of automatic recognition.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelPlanarFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectBend: NXOpen.SelectFaceList = ...
    """
    Returns  the selection list that stores bend faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBend`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StartStation: int = ...
    """
    Returns or sets  the start station.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartStation`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartStation`` 
    
    :param startStation: 
    :type startStation: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UnfoldType: DirectUnfoldBuilderTypes = ...
    """
    Returns or sets  the type of direct unfold, the name get_type has been used 
    
    <hr>
    
    Getter Method
    
    Signature ``UnfoldType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnfoldType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: DirectUnfoldBuilder = ...  # unknown typename


class CoolingPatternBuilder(NXOpen.Builder):
    """
    The builder class for Cooling pattern which assists you
    to create channels with selected curves.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.CoolingPatternCollection.CreateCoolingPatternBuilder`
    
    Default values.
    
    ===============  ===========================================
    Property         Value
    ===============  ===========================================
    Diameter.Value   10 (millimeters part), 0.375 (inches part) 
    ===============  ===========================================
    
    .. versionadded:: NX7.5.0
    """
    ChannelDiameter: float = ...
    """
    Returns or sets  the channel diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``ChannelDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChannelDiameter`` 
    
    :param channelDiameter: 
    :type channelDiameter: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ChannelGuide: NXOpen.Section = ...
    """
    Returns  the lines used to create the channel path.  
    
    <hr>
    
    Getter Method
    
    Signature ``ChannelGuide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Diameter: NXOpen.Expression = ...
    """
    Returns  the channel diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: CoolingPatternBuilder = ...  # unknown typename


class UniversalUnformBuilderBendTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UniversalUnformBuilderBendTypes():
    """
    The types of bend  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StraightBend", "straight bend type"
       "ContourFlange", "contour flange type"
       "Burring", "burring type"
    """
    StraightBend = 0  # UniversalUnformBuilderBendTypesMemberType
    ContourFlange = 1  # UniversalUnformBuilderBendTypesMemberType
    Burring = 2  # UniversalUnformBuilderBendTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UniversalUnformBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Tooling.UniversalUnformBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ToolingCollection.CreateUniversalUnformBuilder`
    
    Default values.
    
    =========================================  =============
    Property                                   Value
    =========================================  =============
    BendType                                   StraightBend 
    -----------------------------------------  -------------
    DefineNeutralFactor.BendDevelopedLength    0 
    -----------------------------------------  -------------
    DefineNeutralFactor.NeutralFactor          0.40 
    -----------------------------------------  -------------
    DefineNeutralFactor.NeutralFactorFormula   General 
    -----------------------------------------  -------------
    DefineNeutralFactor.PartMaterial           08 
    -----------------------------------------  -------------
    UnformNeutralFactor (deprecated)           0.4 
    =========================================  =============
    
    .. versionadded:: NX8.5.0
    """
    
    class BendTypes():
        """
        The types of bend  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StraightBend", "straight bend type"
           "ContourFlange", "contour flange type"
           "Burring", "burring type"
        """
        StraightBend = 0  # UniversalUnformBuilderBendTypesMemberType
        ContourFlange = 1  # UniversalUnformBuilderBendTypesMemberType
        Burring = 2  # UniversalUnformBuilderBendTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BendFaces: NXOpen.ScCollector = ...
    """
    Returns  the bend faces 
    
    <hr>
    
    Getter Method
    
    Signature ``BendFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    BendType: UniversalUnformBuilderBendTypes = ...
    """
    Returns or sets  the bend type 
    
    <hr>
    
    Getter Method
    
    Signature ``BendType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.UniversalUnformBuilderBendTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendType`` 
    
    :param bendType: 
    :type bendType: :py:class:`NXOpen.Tooling.UniversalUnformBuilderBendTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    BlendFaces: NXOpen.ScCollector = ...
    """
    Returns  the blend faces 
    
    <hr>
    
    Getter Method
    
    Signature ``BlendFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DefineNeutralFactor: DefineNeutralFactorBuilder = ...
    """
    Returns  the define neutral factor builder which contains new neutral factor, part material and bend developed length 
    
    <hr>
    
    Getter Method
    
    Signature ``DefineNeutralFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DefineNeutralFactorBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ReferenceFaceEdge: NXOpen.SelectNXObject = ...
    """
    Returns  the reference face edge 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceFaceEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    UnformNeutralFactor: float = ...
    """
    Returns or sets  the operation of neutral factor for univeral unform.  
    
    <hr>
    
    Getter Method
    
    Signature ``UnformNeutralFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.DefineNeutralFactorBuilder.NeutralFactor` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnformNeutralFactor`` 
    
    :param kFactor: 
    :type kFactor: float 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.DefineNeutralFactorBuilder.NeutralFactor` instead.
    
    License requirements: None.
    """
    Null: UniversalUnformBuilder = ...  # unknown typename


class ReusableObjectManager():
    """
    Represents a collection of ReusableObjects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def CreatePasteBuilder(self) -> ReusableObjectPasteBuilder:
        """
        Creates a ReusableObjectPasteBuilder  
        
        Signature ``CreatePasteBuilder()`` 
        
        :returns: :py:class:`Tooling.ReusableObjectPasteBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ReusableObjectPasteBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def CreatePositioningBuilder(self) -> ReusePositioningObjectBuilder:
        """
        Creates a  :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilder`  
        
        Signature ``CreatePositioningBuilder()`` 
        
        :returns: :py:class:`Tooling.ReusePositioningObjectBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def CreatePositioningBuilder(self, positioningObject: NXOpen.Features.Feature) -> ReusePositioningObjectBuilder:
        """
        Creates a  :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilder`  
        
        Signature ``CreatePositioningBuilder(positioningObject)`` 
        
        :param positioningObject:  Repositioning feature  
        :type positioningObject: :py:class:`NXOpen.Features.Feature` 
        :returns: :py:class:`Tooling.ReusePositioningObjectBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateQuickDatumCsysBuilder(self) -> QuickDatumCsysBuilder:
        """
        Creates a  :py:class:`NXOpen.Tooling.QuickDatumCsysBuilder`  
        
        Signature ``CreateQuickDatumCsysBuilder()`` 
        
        :returns: :py:class:`Tooling.QuickDatumCsysBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.QuickDatumCsysBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    


class MoldFeatureRecognitionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.MoldFeatureRecognitionBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateMoldFeatureRecognitionBuilder`
    
    Default values.
    
    ===========================  ==============================================
    Property                     Value
    ===========================  ==============================================
    DraftAngle.Value             3 
    ---------------------------  ----------------------------------------------
    MaximumRibLength.Value       2.0 (millimeters part), 0.07 (inches part) 
    ---------------------------  ----------------------------------------------
    MaximumRibThickness.Value    5.0 (millimeters part), 0.19 (inches part) 
    ---------------------------  ----------------------------------------------
    UndercutMinimumWidth.Value   0.25 (millimeters part), 0.0098 (inches part) 
    ===========================  ==============================================
    
    .. versionadded:: NX11.0.1
    """
    
    def AnalyzeMoldBody(self) -> None:
        """
        Analyze selected body 
        
        Signature ``AnalyzeMoldBody()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def ExportResult(self) -> None:
        """
        Export analysis result 
        
        Signature ``ExportResult()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def SetProductOrientation(self, matrix: NXOpen.Matrix3x3) -> None:
        """
        Set the product orientation 
        
        Signature ``SetProductOrientation(matrix)`` 
        
        :param matrix: 
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def GetProductOrientation(self) -> NXOpen.Matrix3x3:
        """
        Get the product orientation  
        
        Signature ``GetProductOrientation()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def ReleaseAllProductFeatureData(self) -> None:
        """
        Free all product feature data 
        
        Signature ``ReleaseAllProductFeatureData()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def FindMoldFeatures(self) -> None:
        """
        Find and collect molding features 
        
        Signature ``FindMoldFeatures()`` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    
    def SetIsCoreCavityFaceChanged(self, status: bool) -> None:
        """
        Set the value whether user has changed core/cavity faces or not.  
        
        Signature ``SetIsCoreCavityFaceChanged(status)`` 
        
        :param status: 
        :type status: bool 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    BodyProjectArea: float = ...
    """
    Returns or sets  the project area 
    
    <hr>
    
    Getter Method
    
    Signature ``BodyProjectArea`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BodyProjectArea`` 
    
    :param bodyProjectArea: 
    :type bodyProjectArea: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    BodySurfaceArea: float = ...
    """
    Returns or sets  the surface area value 
    
    <hr>
    
    Getter Method
    
    Signature ``BodySurfaceArea`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BodySurfaceArea`` 
    
    :param surfaceArea: 
    :type surfaceArea: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    DraftAngle: NXOpen.Expression = ...
    """
    Returns  the draft angle 
    
    <hr>
    
    Getter Method
    
    Signature ``DraftAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MaximumRibLength: NXOpen.Expression = ...
    """
    Returns  the maximum rib length to be recognized 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumRibLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MaximumRibThickness: NXOpen.Expression = ...
    """
    Returns  the maximum rib thickness to be recognized 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumRibThickness`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MaximumWallThickness: float = ...
    """
    Returns or sets  the maximum wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumWallThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumWallThickness`` 
    
    :param maxWallThickness: 
    :type maxWallThickness: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MinimumWallThickness: float = ...
    """
    Returns or sets  the minimum wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumWallThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumWallThickness`` 
    
    :param minWallThickness: 
    :type minWallThickness: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MinimumXDimension: float = ...
    """
    Returns or sets  the minimum x dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumXDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumXDimension`` 
    
    :param minxLength: 
    :type minxLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MinimumYDimension: float = ...
    """
    Returns or sets  the minimum y dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumYDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumYDimension`` 
    
    :param minyLength: 
    :type minyLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MinimumZDimension: float = ...
    """
    Returns or sets  the minimum z dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumZDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumZDimension`` 
    
    :param minzLength: 
    :type minzLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    PartFolderBrowser: str = ...
    """
    Returns or sets  the folder of part file to be saved 
    
    <hr>
    
    Getter Method
    
    Signature ``PartFolderBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartFolderBrowser`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    PartVolume: float = ...
    """
    Returns or sets  the product body volume 
    
    <hr>
    
    Getter Method
    
    Signature ``PartVolume`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartVolume`` 
    
    :param partVolume: 
    :type partVolume: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    SaveAndExportStatus: bool = ...
    """
    Returns or sets  the value that indicates whether to save part and export analysis data or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``SaveAndExportStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveAndExportStatus`` 
    
    :param status: 
    :type status: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    SelectionBody: NXOpen.SelectBody = ...
    """
    Returns  the selected body for analysis 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    UndercutMinimumWidth: NXOpen.Expression = ...
    """
    Returns  the undercut minimum width 
    
    <hr>
    
    Getter Method
    
    Signature ``UndercutMinimumWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    XDimension: float = ...
    """
    Returns or sets  the x dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``XDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XDimension`` 
    
    :param xLength: 
    :type xLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    XmlFolderBrowser: str = ...
    """
    Returns or sets  the folder in which output XML results can be found 
    
    <hr>
    
    Getter Method
    
    Signature ``XmlFolderBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XmlFolderBrowser`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    YDimension: float = ...
    """
    Returns or sets  the y dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``YDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YDimension`` 
    
    :param yLength: 
    :type yLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    ZDimension: float = ...
    """
    Returns or sets  the z dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``ZDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZDimension`` 
    
    :param zLength: 
    :type zLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    Null: MoldFeatureRecognitionBuilder = ...  # unknown typename


class HoleReportCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.HoleReportBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateHoleReportBuilder(self) -> HoleReportBuilder:
        """
        Creates hole report builder  
        
        Signature ``CreateHoleReportBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.HoleReportBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class CompDrawingBuilderFilterSelectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CompDrawingBuilderFilterSelection():
    """
    Specifies the filter of components.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Type", "filter components by type"
       "Drawing", "filter componnets by drawing"
       "All", "list all components"
    """
    Type = 0  # CompDrawingBuilderFilterSelectionMemberType
    Drawing = 1  # CompDrawingBuilderFilterSelectionMemberType
    All = 2  # CompDrawingBuilderFilterSelectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CompDrawingBuilderComponentTypeSelectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CompDrawingBuilderComponentTypeSelection():
    """
    Specifies the type of components.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", "the type of components, read from configuration file"
    """
    All = 0  # CompDrawingBuilderComponentTypeSelectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CompDrawingBuilderDrawingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CompDrawingBuilderDrawingType():
    """
    Specifies the drawing type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "without drawing"
       "NonMaster", "with non-master drawing"
       "SelfContained", "with self-contained drawing"
    """
    NotSet = 0  # CompDrawingBuilderDrawingTypeMemberType
    NonMaster = 1  # CompDrawingBuilderDrawingTypeMemberType
    SelfContained = 2  # CompDrawingBuilderDrawingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CompDrawingBuilderProjectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CompDrawingBuilderProjectionType():
    """
    Specifies the project type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FirstAngleProjection", "first angle projection"
       "ThirdAngleProjection", "third angle projection"
    """
    FirstAngleProjection = 0  # CompDrawingBuilderProjectionTypeMemberType
    ThirdAngleProjection = 1  # CompDrawingBuilderProjectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CompDrawingBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.CompDrawingBuilder` which is 
    used to create or edit the Component Drawing.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ToolingDrawingCollection.CreateComponentDrawingBuilder`
    
    Default values.
    
    ==================  =====================
    Property            Value
    ==================  =====================
    ComponentType       All 
    ------------------  ---------------------
    DrawingFilter       None 
    ------------------  ---------------------
    Filter              Type 
    ------------------  ---------------------
    IsKeepDrawingOpen   0 
    ------------------  ---------------------
    Margin              15 
    ------------------  ---------------------
    Projection          FirstAngleProjection 
    ==================  =====================
    
    .. versionadded:: NX8.0.0
    """
    
    class FilterSelection():
        """
        Specifies the filter of components.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Type", "filter components by type"
           "Drawing", "filter componnets by drawing"
           "All", "list all components"
        """
        Type = 0  # CompDrawingBuilderFilterSelectionMemberType
        Drawing = 1  # CompDrawingBuilderFilterSelectionMemberType
        All = 2  # CompDrawingBuilderFilterSelectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ComponentTypeSelection():
        """
        Specifies the type of components.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", "the type of components, read from configuration file"
        """
        All = 0  # CompDrawingBuilderComponentTypeSelectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DrawingType():
        """
        Specifies the drawing type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "without drawing"
           "NonMaster", "with non-master drawing"
           "SelfContained", "with self-contained drawing"
        """
        NotSet = 0  # CompDrawingBuilderDrawingTypeMemberType
        NonMaster = 1  # CompDrawingBuilderDrawingTypeMemberType
        SelfContained = 2  # CompDrawingBuilderDrawingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProjectionType():
        """
        Specifies the project type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FirstAngleProjection", "first angle projection"
           "ThirdAngleProjection", "third angle projection"
        """
        FirstAngleProjection = 0  # CompDrawingBuilderProjectionTypeMemberType
        ThirdAngleProjection = 1  # CompDrawingBuilderProjectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateAll(self) -> None:
        """
        Creates all drawings.  
        
        Signature ``CreateAll()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDrawing(self, pName: str, dFile: str, dName: str, templateName: str) -> None:
        """
        Creates a drawing.  
        
        Signature ``CreateDrawing(pName, dFile, dName, templateName)`` 
        
        :param pName: 
        :type pName: str 
        :param dFile: 
        :type dFile: str 
        :param dName: 
        :type dName: str 
        :param templateName: 
        :type templateName: str 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`NXOpen.Tooling.CompDrawingBuilder.CreateCompDrawing` instead.
        
        License requirements: None.
        """
        ...
    
    
    def DeleteDrawing(self, pName: str, dFile: str, dName: str, templateName: str) -> None:
        """
        Deletes a drawing.  
        
        Signature ``DeleteDrawing(pName, dFile, dName, templateName)`` 
        
        :param pName: 
        :type pName: str 
        :param dFile: 
        :type dFile: str 
        :param dName: 
        :type dName: str 
        :param templateName: 
        :type templateName: str 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`NXOpen.Tooling.CompDrawingBuilder.DeleteCompDrawing` instead.
        
        License requirements: None.
        """
        ...
    
    
    def OpenDrawing(self, pName: str, dFile: str, dName: str, templateName: str) -> None:
        """
        Opens a drawing.  
        
        Signature ``OpenDrawing(pName, dFile, dName, templateName)`` 
        
        :param pName: 
        :type pName: str 
        :param dFile: 
        :type dFile: str 
        :param dName: 
        :type dName: str 
        :param templateName: 
        :type templateName: str 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`NXOpen.Tooling.CompDrawingBuilder.OpenCompDrawing` instead.
        
        License requirements: None.
        """
        ...
    
    
    def EditDrawing(self, pName: str, dFile: str, dName: str, templateName: str) -> None:
        """
        Edits a drawing.  
        
        Signature ``EditDrawing(pName, dFile, dName, templateName)`` 
        
        :param pName: 
        :type pName: str 
        :param dFile: 
        :type dFile: str 
        :param dName: 
        :type dName: str 
        :param templateName: 
        :type templateName: str 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`NXOpen.Tooling.CompDrawingBuilder.EditCompDrawing` instead.
        
        License requirements: None.
        """
        ...
    
    
    def InitConstructor(self) -> None:
        """
        Initializes the component drawing value.  
        
        Signature ``InitConstructor()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCompDrawing(self, component: NXOpen.NXObject, componentPartName: str, drawingFileName: str, drawingName: str, templateName: str) -> None:
        """
        Creates a drawing for a component 
        
        Signature ``CreateCompDrawing(component, componentPartName, drawingFileName, drawingName, templateName)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.NXObject` 
        :param componentPartName:  component part name 
        :type componentPartName: str 
        :param drawingFileName:  drawing file name 
        :type drawingFileName: str 
        :param drawingName:  drawing name 
        :type drawingName: str 
        :param templateName:  template name 
        :type templateName: str 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Tooling.CompDrawingBuilder.CreateComponentDrawingCopyAttribute` instead.
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteCompSheet(self, component: NXOpen.NXObject, componentPartName: str, drawingFileName: str, drawingName: str, templateName: str) -> None:
        """
        Deletes a sheet from a component.  
        
        Signature ``DeleteCompSheet(component, componentPartName, drawingFileName, drawingName, templateName)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.NXObject` 
        :param componentPartName:  component part name 
        :type componentPartName: str 
        :param drawingFileName:  drawing file name 
        :type drawingFileName: str 
        :param drawingName:  drawing name 
        :type drawingName: str 
        :param templateName:  template name 
        :type templateName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def OpenCompDrawing(self, component: NXOpen.NXObject, componentPartName: str, drawingFileName: str, drawingName: str, templateName: str) -> None:
        """
        Opens a drawing in a component.  
        
        Signature ``OpenCompDrawing(component, componentPartName, drawingFileName, drawingName, templateName)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.NXObject` 
        :param componentPartName:  component part name 
        :type componentPartName: str 
        :param drawingFileName:  drawing file name 
        :type drawingFileName: str 
        :param drawingName:  drawing name 
        :type drawingName: str 
        :param templateName:  template name 
        :type templateName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def EditCompDrawing(self, component: NXOpen.NXObject, componentPartName: str, drawingFileName: str, drawingName: str, templateName: str, oldSheetName: str) -> None:
        """
        Edits a drawing in a component.  
        
        Signature ``EditCompDrawing(component, componentPartName, drawingFileName, drawingName, templateName, oldSheetName)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.NXObject` 
        :param componentPartName:  component part name 
        :type componentPartName: str 
        :param drawingFileName:  drawing file name 
        :type drawingFileName: str 
        :param drawingName:  drawing name 
        :type drawingName: str 
        :param templateName:  template name 
        :type templateName: str 
        :param oldSheetName:  old sheet name 
        :type oldSheetName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AddCompSheet(self, component: NXOpen.NXObject, componentPartName: str, drawingFileName: str, drawingName: str, templateName: str) -> None:
        """
        Add a new sheet to a component.  
        
        Signature ``AddCompSheet(component, componentPartName, drawingFileName, drawingName, templateName)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.NXObject` 
        :param componentPartName:  component part name 
        :type componentPartName: str 
        :param drawingFileName:  drawing file name 
        :type drawingFileName: str 
        :param drawingName:  drawing name 
        :type drawingName: str 
        :param templateName:  template name 
        :type templateName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteCompDrawing(self, component: NXOpen.NXObject, componentPartName: str, drawingFileName: str, drawingName: str, templateName: str) -> None:
        """
        Deletes drawings in self-contained part or deletes a master model part with drawings 
        
        Signature ``DeleteCompDrawing(component, componentPartName, drawingFileName, drawingName, templateName)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.NXObject` 
        :param componentPartName:  component part name 
        :type componentPartName: str 
        :param drawingFileName:  drawing file name 
        :type drawingFileName: str 
        :param drawingName:  drawing name 
        :type drawingName: str 
        :param templateName:  template name 
        :type templateName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateComponentDrawingCopyAttribute(self, component: NXOpen.NXObject, componentPartName: str, drawingFileName: str, drawingName: str, templateName: str, attributeTitles: 'list[str]', attributeValues: 'list[str]') -> None:
        """
        Creates a drawing for a component and copy attribute to the drawing part 
        
        Signature ``CreateComponentDrawingCopyAttribute(component, componentPartName, drawingFileName, drawingName, templateName, attributeTitles, attributeValues)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.NXObject` 
        :param componentPartName:  component part name 
        :type componentPartName: str 
        :param drawingFileName:  drawing file name 
        :type drawingFileName: str 
        :param drawingName:  drawing name 
        :type drawingName: str 
        :param templateName:  template name 
        :type templateName: str 
        :param attributeTitles:  attribute titles  
        :type attributeTitles: list of str 
        :param attributeValues:  attribute values  
        :type attributeValues: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    Component: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the component to create drawing.  
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ComponentType: CompDrawingBuilderComponentTypeSelection = ...
    """
    Returns or sets  the component type in mold or die project assembly.  
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CompDrawingBuilderComponentTypeSelection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ComponentType`` 
    
    :param componentType: 
    :type componentType: :py:class:`NXOpen.Tooling.CompDrawingBuilderComponentTypeSelection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DrawingFileNamingRule: str = ...
    """
    Returns or sets  the naming rule of drawing files.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingFileNamingRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingFileNamingRule`` 
    
    :param drawingFileNamingRule: 
    :type drawingFileNamingRule: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DrawingFilter: CompDrawingBuilderDrawingType = ...
    """
    Returns or sets  the drawing component drawing filter.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingFilter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CompDrawingBuilderDrawingType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingFilter`` 
    
    :param drawingType: 
    :type drawingType: :py:class:`NXOpen.Tooling.CompDrawingBuilderDrawingType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DrawingSheetNamingRule: str = ...
    """
    Returns or sets  the naming rule of drawing sheets.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingSheetNamingRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingSheetNamingRule`` 
    
    :param drawingSheetNamingRule: 
    :type drawingSheetNamingRule: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Filter: CompDrawingBuilderFilterSelection = ...
    """
    Returns or sets  the filter to select component for drawing.  
    
    <hr>
    
    Getter Method
    
    Signature ``Filter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CompDrawingBuilderFilterSelection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Filter`` 
    
    :param filter: 
    :type filter: :py:class:`NXOpen.Tooling.CompDrawingBuilderFilterSelection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IsKeepDrawingOpen: bool = ...
    """
    Returns or sets  the option whether to keep drawing open.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsKeepDrawingOpen`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsKeepDrawingOpen`` 
    
    :param isKeepDrawingOpen: 
    :type isKeepDrawingOpen: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Margin: int = ...
    """
    Returns or sets  the margin for user defined drawing template.  
    
    <hr>
    
    Getter Method
    
    Signature ``Margin`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Margin`` 
    
    :param margin: 
    :type margin: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MarginForView: float = ...
    """
    Returns or sets  the margin for view for user defined drawing template.  
    
    <hr>
    
    Getter Method
    
    Signature ``MarginForView`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarginForView`` 
    
    :param marginForView: 
    :type marginForView: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Projection: CompDrawingBuilderProjectionType = ...
    """
    Returns or sets  the drawing projection angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``Projection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CompDrawingBuilderProjectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Projection`` 
    
    :param projection: 
    :type projection: :py:class:`NXOpen.Tooling.CompDrawingBuilderProjectionType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: CompDrawingBuilder = ...  # unknown typename


class MoldwizardManager():
    """
    Provides create builder methods for Moldwizard.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def CreateEjectorTableBuilder(self) -> EjectorTableBuilder:
        """
        Creates Ejector Pin Table builder.  
        
        Signature ``CreateEjectorTableBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.EjectorTableBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateBomListBuilder(self) -> BomListBuilder:
        """
        Creates Bom List builder.  
        
        Signature ``CreateBomListBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.BomListBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateMoldFillingBuilder(self) -> MoldFillingBuilder:
        """
        Creates Mold Filling builder.  
        
        Signature ``CreateMoldFillingBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.MoldFillingBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateBomListDataProvider(self) -> BomListDataProvider:
        """
        Creates a data provider for BOM list.  
        
        Signature ``CreateBomListDataProvider()`` 
        
        :returns: :py:class:`Tooling.BomListDataProvider` object object  
        :rtype: :py:class:`NXOpen.Tooling.BomListDataProvider` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateCopySolidBuilder(self) -> CopySolidBuilder:
        """
        Creates Copy Solid builder.  
        
        Signature ``CreateCopySolidBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CopySolidBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateMoldFeatureRecognitionBuilder(self) -> MoldFeatureRecognitionBuilder:
        """
        Creates mold feature recognition builder.  
        
        Signature ``CreateMoldFeatureRecognitionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.MoldFeatureRecognitionBuilder` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateSheetMetalFeatureRecognitionBuilder(self) -> SheetMetalFeatureRecognitionBuilder:
        """
        Creates sheet metal feature recognition builder.  
        
        Signature ``CreateSheetMetalFeatureRecognitionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SheetMetalFeatureRecognitionBuilder` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateCostFeatureDataProvider(self) -> CostTableDataProvider:
        """
        Creates a data provider for cost feature data.  
        
        Signature ``CreateCostFeatureDataProvider()`` 
        
        :returns: :py:class:`Tooling.CostTableDataProvider` object object  
        :rtype: :py:class:`NXOpen.Tooling.CostTableDataProvider` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateColorExpressionsBuilder(self) -> ColorExpressionsBuilder:
        """
        Creates Color Expressions builder.  
        
        Signature ``CreateColorExpressionsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ColorExpressionsBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateFeatureReferenceSetBuilder(self) -> FeatureReferenceSetBuilder:
        """
        Creates Featrue Reference Set builder.  
        
        Signature ``CreateFeatureReferenceSetBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.FeatureReferenceSetBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    


class HoleManufacturingNoteBuilderDefineByViewOrHolesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleManufacturingNoteBuilderDefineByViewOrHoles():
    """
    the view selection or window selection type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "View", " - "
       "Holes", " - "
    """
    View = 0  # HoleManufacturingNoteBuilderDefineByViewOrHolesMemberType
    Holes = 1  # HoleManufacturingNoteBuilderDefineByViewOrHolesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleManufacturingNoteBuilderHoleIndexTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleManufacturingNoteBuilderHoleIndexType():
    """
    the hole index type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UserDefinedAndNumber", " - "
       "Alphabetic", " - "
       "Numeric", " - "
    """
    UserDefinedAndNumber = 0  # HoleManufacturingNoteBuilderHoleIndexTypeMemberType
    Alphabetic = 1  # HoleManufacturingNoteBuilderHoleIndexTypeMemberType
    Numeric = 2  # HoleManufacturingNoteBuilderHoleIndexTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleManufacturingNoteBuilder(NXOpen.Builder):
    """
    Tooling builder for HoleManufacturingNote   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.HoleManufacturingNoteCollection.CreateHoleManufacturingNoteBuilder`
    
    Default values.
    
    =========================================  =====================
    Property                                   Value
    =========================================  =====================
    DefineByViewOrHolesEnum                    View 
    -----------------------------------------  ---------------------
    HoleIndexSize                              3.5 
    -----------------------------------------  ---------------------
    HoleIndexTypeEnum                          UserDefinedAndNumber 
    -----------------------------------------  ---------------------
    HoleManufacturingNoteSize                  3.5 
    -----------------------------------------  ---------------------
    UseDifferentSubIndexForSameDiameterHoles   0 
    =========================================  =====================
    
    .. versionadded:: NX9.0.0
    """
    
    class DefineByViewOrHoles():
        """
        the view selection or window selection type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "View", " - "
           "Holes", " - "
        """
        View = 0  # HoleManufacturingNoteBuilderDefineByViewOrHolesMemberType
        Holes = 1  # HoleManufacturingNoteBuilderDefineByViewOrHolesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HoleIndexType():
        """
        the hole index type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UserDefinedAndNumber", " - "
           "Alphabetic", " - "
           "Numeric", " - "
        """
        UserDefinedAndNumber = 0  # HoleManufacturingNoteBuilderHoleIndexTypeMemberType
        Alphabetic = 1  # HoleManufacturingNoteBuilderHoleIndexTypeMemberType
        Numeric = 2  # HoleManufacturingNoteBuilderHoleIndexTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateHoleIndexLabel(self, viewTag: NXOpen.NXObject, holeTypeIndex: str, faceTag: NXOpen.NXObject, holeDiameter: float, holePos: NXOpen.Point3d, holetype: str, reverseFlag: bool) -> NXOpen.NXObject:
        """
        The method to create hole index  
        
        Signature ``CreateHoleIndexLabel(viewTag, holeTypeIndex, faceTag, holeDiameter, holePos, holetype, reverseFlag)`` 
        
        :param viewTag:  The view to create hole index label  
        :type viewTag: :py:class:`NXOpen.NXObject` 
        :param holeTypeIndex:  The hole hole index label string  
        :type holeTypeIndex: str 
        :param faceTag:  The hole face data  
        :type faceTag: :py:class:`NXOpen.NXObject` 
        :param holeDiameter:  The hole diameter  
        :type holeDiameter: float 
        :param holePos:  The hole position  
        :type holePos: :py:class:`NXOpen.Point3d` 
        :param holetype:  The hole type string  
        :type holetype: str 
        :param reverseFlag:  The hole reversed flag  
        :type reverseFlag: bool 
        :returns:  The hole index label tag  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateHoleManufacturingNoteAsNote(self, viewTag: NXOpen.NXObject, holeManufacturingNoteVector: 'list[str]', point: NXOpen.Point3d) -> NXOpen.NXObject:
        """
        The method to create manufaturing information as note  
        
        Signature ``CreateHoleManufacturingNoteAsNote(viewTag, holeManufacturingNoteVector, point)`` 
        
        :param viewTag:  The view to create hole index label  
        :type viewTag: :py:class:`NXOpen.NXObject` 
        :param holeManufacturingNoteVector:  The hole index label string  
        :type holeManufacturingNoteVector: list of str 
        :param point:  The location point data  
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  The manufaturing information note tag  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CycleObjectsInView(self, viewTag: NXOpen.NXObject, vseqNumber: int, isDrawing: bool, inObject: NXOpen.NXObject) -> NXOpen.NXObject:
        """
        The method to cycle objects in view  
        
        Signature ``CycleObjectsInView(viewTag, vseqNumber, isDrawing, inObject)`` 
        
        :param viewTag:  The view to cycle  
        :type viewTag: :py:class:`NXOpen.NXObject` 
        :param vseqNumber:  The View Sequence Number of the View must NOT be DSS_ALL_VIEWS or DSS_NO_VIEWS  
        :type vseqNumber: int 
        :param isDrawing:  Is this view a drawing  
        :type isDrawing: bool 
        :param inObject:  Input object  
        :type inObject: :py:class:`NXOpen.NXObject` 
        :returns:  Output object  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ModifyStyle(self) -> None:
        """
        The method to modify the style of the previewed note 
        
        Signature ``ModifyStyle()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    CreatedHoleManufacturingNote: NXOpen.NXObject = ...
    """
    Returns or sets  the created hole manufacturing note 
    
    <hr>
    
    Getter Method
    
    Signature ``CreatedHoleManufacturingNote`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreatedHoleManufacturingNote`` 
    
    :param createdHoleManufacturingNote: 
    :type createdHoleManufacturingNote: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DefineByViewOrHolesEnum: HoleManufacturingNoteBuilderDefineByViewOrHoles = ...
    """
    Returns or sets  the selection type enumeration 
    
    <hr>
    
    Getter Method
    
    Signature ``DefineByViewOrHolesEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.HoleManufacturingNoteBuilderDefineByViewOrHoles` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefineByViewOrHolesEnum`` 
    
    :param defineByViewOrHoles: 
    :type defineByViewOrHoles: :py:class:`NXOpen.Tooling.HoleManufacturingNoteBuilderDefineByViewOrHoles` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleIndexColor: NXOpen.NXColor = ...
    """
    Returns or sets  the hole index character color 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleIndexColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleIndexColor`` 
    
    :param holeIndexColor: 
    :type holeIndexColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleIndexSize: float = ...
    """
    Returns or sets  the hole index character size 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleIndexSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleIndexSize`` 
    
    :param holeIndexSize: 
    :type holeIndexSize: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleIndexTypeEnum: HoleManufacturingNoteBuilderHoleIndexType = ...
    """
    Returns or sets  the hole index type enumeration 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleIndexTypeEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.HoleManufacturingNoteBuilderHoleIndexType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleIndexTypeEnum`` 
    
    :param holeIndexTypeEnum: 
    :type holeIndexTypeEnum: :py:class:`NXOpen.Tooling.HoleManufacturingNoteBuilderHoleIndexType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleManufacturingNoteColor: NXOpen.NXColor = ...
    """
    Returns or sets  the manufaturing information character color 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleManufacturingNoteColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleManufacturingNoteColor`` 
    
    :param holeManufacturingNoteColor: 
    :type holeManufacturingNoteColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleManufacturingNoteOrigin: NXOpen.Annotations.OriginBuilder = ...
    """
    Returns  the manufacturing information origin 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleManufacturingNoteOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.OriginBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HoleManufacturingNoteSize: float = ...
    """
    Returns or sets  the manufaturing information character size 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleManufacturingNoteSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleManufacturingNoteSize`` 
    
    :param holeManufacturingNoteSize: 
    :type holeManufacturingNoteSize: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleManufacturingNoteStyle: NXOpen.Annotations.StyleBuilder = ...
    """
    Returns  the hole manufacturing note style 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleManufacturingNoteStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectHoles: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected holes 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectHoles`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectView: NXOpen.SelectNXObject = ...
    """
    Returns  the selected view 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UseDifferentSubIndexForSameDiameterHoles: bool = ...
    """
    Returns or sets  the use different sub index for same diameter holes 
    
    <hr>
    
    Getter Method
    
    Signature ``UseDifferentSubIndexForSameDiameterHoles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseDifferentSubIndexForSameDiameterHoles`` 
    
    :param useDifferentSubIndexForSameDiameterHoles: 
    :type useDifferentSubIndexForSameDiameterHoles: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: HoleManufacturingNoteBuilder = ...  # unknown typename


class SIZERCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of SIZER   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateExportBuilder(self) -> SIZERExportBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.SIZERExportBuilder`  
        
        Signature ``CreateExportBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SIZERExportBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def CreateImportBuilder(self) -> SIZERImportBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.SIZERImportBuilder`  
        
        Signature ``CreateImportBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SIZERImportBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class CalculateAreaCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of CalculateArea builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> CalculateAreaBuilder:
        """
        Creates a CalculateArea builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`CalculateAreaBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.CalculateAreaBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class BlankGeneratorCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.BlankGeneratorBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBlankGeneratorBuilder(self) -> BlankGeneratorBuilder:
        """
        Creates blank generator builder.  
        
        Signature ``CreateBlankGeneratorBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.BlankGeneratorBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class FastenerAssemConfigBuilder(NXOpen.Builder):
    """
    Represents a Fastener Assem Config Collection.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.FastenerAssemConfigCollection.CreateBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: FastenerAssemConfigBuilder = ...  # unknown typename


class ReusablePocketCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ReusablePocketBuilder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateReusablePocketBuilder(self) -> ReusablePocketBuilder:
        """
        Creates a ReusablePocket builder  
        
        Signature ``CreateReusablePocketBuilder()`` 
        
        :returns:  Reusable Pocket Builder object  
        :rtype: :py:class:`NXOpen.Tooling.ReusablePocketBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class AddReusableFeatureCollectionInputData_Struct():
    """
    Defines the input data of AddReusableFeatureBuilder .  
    
    Constructor: 
    NXOpen.Tooling.AddReusableFeatureCollection.InputData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    KrxFile: str = ...
    """
    KRX file of reusable feature template 
    <hr>
    
    Field Value
    Type:str
    """
    LibName: str = ...
    """
    Library name of reusable feature template 
    <hr>
    
    Field Value
    Type:str
    """
    LibPath: str = ...
    """
    Library path of reusable feature template 
    <hr>
    
    Field Value
    Type:str
    """
    Entity: NXOpen.NXObject = ...
    """
    Placement entity in create mode 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    Position: NXOpen.Point3d = ...
    """
    Cursor position in create mode 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Point3d`
    """
    Feature: NXOpen.Features.Feature = ...
    """
    Reusable feature in edit mode 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Features.Feature`
    """


class SetPressModelBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Tooling.SetPressModelBuilder` to set and load the press model.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateSetPressModelBuilder`
    
    Default values.
    
    =================  =====
    Property           Value
    =================  =====
    StrokesPerMinute   0 
    =================  =====
    
    .. versionadded:: NX10.0.2
    """
    
    def SetPressModelName(self, pressModelName: str) -> None:
        """
        Sets the press model name user selected in the list box
        
        Signature ``SetPressModelName(pressModelName)`` 
        
        :param pressModelName: 
        :type pressModelName: str 
        
        .. versionadded:: NX10.0.2
        
        License requirements: nx_dievalidation ("DIE VALIDATION")
        """
        ...
    
    
    def InitializeAvailablePressModels(self, pressModelPath: str) -> None:
        """
        Initializes the available press models from press model path
        
        Signature ``InitializeAvailablePressModels(pressModelPath)`` 
        
        :param pressModelPath: 
        :type pressModelPath: str 
        
        .. versionadded:: NX10.0.2
        
        License requirements: nx_dievalidation ("DIE VALIDATION")
        """
        ...
    
    NameSuffix: str = ...
    """
    Returns or sets  the name suffix add to the press model parts
    
    <hr>
    
    Getter Method
    
    Signature ``NameSuffix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NameSuffix`` 
    
    :param nameSuffix: 
    :type nameSuffix: str 
    
    .. versionadded:: NX10.0.2
    
    License requirements: nx_dievalidation ("DIE VALIDATION")
    """
    PressModelPath: str = ...
    """
    Returns or sets  the path to clone available press model
    
    <hr>
    
    Getter Method
    
    Signature ``PressModelPath`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PressModelPath`` 
    
    :param pressModelPath: 
    :type pressModelPath: str 
    
    .. versionadded:: NX10.0.2
    
    License requirements: nx_dievalidation ("DIE VALIDATION")
    """
    StrokesPerMinute: float = ...
    """
    Returns or sets  the strokes per minute of press model
    
    <hr>
    
    Getter Method
    
    Signature ``StrokesPerMinute`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StrokesPerMinute`` 
    
    :param strokesPerMinute: 
    :type strokesPerMinute: float 
    
    .. versionadded:: NX10.0.2
    
    License requirements: nx_dievalidation ("DIE VALIDATION")
    """
    TargetDirectory: str = ...
    """
    Returns or sets  the target directory to store cloned press model
    
    <hr>
    
    Getter Method
    
    Signature ``TargetDirectory`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetDirectory`` 
    
    :param pathName: 
    :type pathName: str 
    
    .. versionadded:: NX10.0.2
    
    License requirements: nx_dievalidation ("DIE VALIDATION")
    """
    Null: SetPressModelBuilder = ...  # unknown typename


class WorkflowManagementCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a Workflow Management Collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateChangeoverManagementBuilder(self) -> ChangeoverManagementBuilder:
        """
        Creates changeover management builder.  
        
        Signature ``CreateChangeoverManagementBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ChangeoverManagementBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateConcurrentDesignManagementBuilder(self) -> ConcurrentDesignManagementBuilder:
        """
        Create Concurrent Design Management builder.  
        
        Signature ``CreateConcurrentDesignManagementBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ConcurrentDesignManagementBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class FaceAttributeBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create face attribute.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ManufacturingGeometryCollection.CreateFaceAttributeBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def DeleteItem(self) -> None:
        """
        Delete an attribute item.  
        
        Signature ``DeleteItem()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
        """
        ...
    
    Null: FaceAttributeBuilder = ...  # unknown typename


class CloneObject(NXOpen.TransientObject):
    """
    Represents the clone operation in Add Reusable Component Builder.  
    
    To create an instance of this object use :py:meth:`NXOpen.Tooling.AddReusablePart.CreateCloneObject`
    
    .. versionadded:: NX6.0.0
    """
    
    def Dispose(self) -> None:
        """
        Destructs the class.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def AddAssembly(self, assemName: str) -> None:
        """
        Adds the part/assembly to be cloned. 
        
        Signature ``AddAssembly(assemName)`` 
        
        :param assemName:  Project assembly name  
        :type assemName: str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def AddAssembly(self, part: NXOpen.Part) -> None:
        """
        Adds the part/assembly to be cloned. 
        
        Signature ``AddAssembly(part)`` 
        
        :param part:  The assembly to be cloned. 
        :type part: :py:class:`NXOpen.Part` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    
    def CreateClonePartItem(self, partName: str) -> ClonePart:
        """
        Creates a new clone part item.  
        
        Signature ``CreateClonePartItem(partName)`` 
        
        :param partName:  clone part name  
        :type partName: str 
        :returns:  the new :py:class:`NXOpen.Tooling.ClonePart` instance  
        :rtype: :py:class:`NXOpen.Tooling.ClonePart` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Commit(self) -> str:
        """
        Performs the clone operation.  
        
        Signature ``Commit()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindClonePartItem(self, partName: str) -> ClonePart:
        """
        Find the part item to be cloned by giving part name  
        
        Signature ``FindClonePartItem(partName)`` 
        
        :param partName:  clone part name  
        :type partName: str 
        :returns:  The returned :py:class:`NXOpen.Tooling.ClonePart` instance  
        :rtype: :py:class:`NXOpen.Tooling.ClonePart` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindClonePartItemByIndex(self, index: int) -> ClonePart:
        """
        Find the part item to be cloned by giving index 
        
        Signature ``FindClonePartItemByIndex(index)`` 
        
        :param index:  index  
        :type index: int 
        :returns:  The returned :py:class:`NXOpen.Tooling.ClonePart` instance  
        :rtype: :py:class:`NXOpen.Tooling.ClonePart` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    
    
    def AddAssociatedPart(self, clonedPartName: str, fileType: ToolingCloneparttype) -> None:
        """
        Adds other part (FEM, SIM part etc.  
        
        ) to be cloned
        
        Signature ``AddAssociatedPart(clonedPartName, fileType)`` 
        
        :param clonedPartName:  part name  
        :type clonedPartName: str 
        :param fileType:  part file type  
        :type fileType: :py:class:`NXOpen.Tooling.ToolingCloneparttype` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNextNumber(self, nextNumber: int) -> None:
        """
        Sets the next number of clone object.  
        
        Signature ``SetNextNumber(nextNumber)`` 
        
        :param nextNumber:  next number  
        :type nextNumber: int 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    
    
    def BuildClonePartItems(self) -> 'list[ClonePart]':
        """
        Builds the cloned part name (item id, item name, revision id) etc.  
        
        Signature ``BuildClonePartItems()`` 
        
        :returns:  Cloned part items  
        :rtype: list of :py:class:`NXOpen.Tooling.ClonePart` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def BuildAllClonePartItems(self) -> None:
        """
        Builds the cloned part name (item id, item name, revision id) etc with no cloned part items output.  
        
        Signature ``BuildAllClonePartItems()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetProjectName(self, projName: str) -> None:
        """
        Sets the project name.  
        
        Signature ``SetProjectName(projName)`` 
        
        :param projName: 
        :type projName: str 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    
    def SetNameRule(self, nameRule: str) -> None:
        """
        Sets the name rule.  
        
        Signature ``SetNameRule(nameRule)`` 
        
        :param nameRule: 
        :type nameRule: str 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    
    def SyncPartNumber(self) -> None:
        """
        Synchronize the previous number with current.  
        
        Signature ``SyncPartNumber()`` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    
    def RestorePartNumber(self) -> None:
        """
        Restore start number.  
        
        Signature ``RestorePartNumber()`` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    
    def SetKeepItemType(self, keepItemType: bool) -> None:
        """
        Uses the item type which is same as original source item.  
        
        Signature ``SetKeepItemType(keepItemType)`` 
        
        :param keepItemType:  Keep the same item type or not  
        :type keepItemType: bool 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    
    def SetDefaultItemType(self, defaultItemType: str) -> None:
        """
        Sets the default item type.  
        
        Signature ``SetDefaultItemType(defaultItemType)`` 
        
        :param defaultItemType:  Default item type  
        :type defaultItemType: str 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    
    def SetDefaultNameRule(self, nameRule: str) -> None:
        """
        Sets the name rule (refer to the Customer Defaults).  
        
        Signature ``SetDefaultNameRule(nameRule)`` 
        
        :param nameRule:  Naming rule  
        :type nameRule: str 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    CloneMethod: ToolingClonemethod = ...
    """
    Returns or sets  the clone method
    
    <hr>
    
    Getter Method
    
    Signature ``CloneMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ToolingClonemethod` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CloneMethod`` 
    
    :param cloneMethod: 
    :type cloneMethod: :py:class:`NXOpen.Tooling.ToolingClonemethod` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    OutputFolder: str = ...
    """
    Returns or sets  the destination folder
    
    <hr>
    
    Getter Method
    
    Signature ``OutputFolder`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutputFolder`` 
    
    :param outputFolder:  If this folder is not set, it will use the folder of display part  
    :type outputFolder: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """


class MWDesignGuideLinesBuilderDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWDesignGuideLinesBuilderDirectionType():
    """
    The type of direction for the guide line to be created. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", "Normal"
       "Tangential", "Tangential"
       "SnaptoWCSAxis", "Snap to WCS axis"
       "Vector", "Specify Vector"
    """
    Normal = 0  # MWDesignGuideLinesBuilderDirectionTypeMemberType
    Tangential = 1  # MWDesignGuideLinesBuilderDirectionTypeMemberType
    SnaptoWCSAxis = 2  # MWDesignGuideLinesBuilderDirectionTypeMemberType
    Vector = 3  # MWDesignGuideLinesBuilderDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWDesignGuideLinesBuilder(NXOpen.Builder):
    """
    The builder for designing guide lines in Mold Wizard.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWDesignGuideLinesCollection.CreateBuilder`
    
    Default values.
    
    ==================  ======================================
    Property            Value
    ==================  ======================================
    GuideDirection      Normal 
    ------------------  --------------------------------------
    GuideLength.Value   0 (millimeters part), 0 (inches part) 
    ------------------  --------------------------------------
    SnapAngleLimit      30 
    ==================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    
    class DirectionType():
        """
        The type of direction for the guide line to be created. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Normal", "Normal"
           "Tangential", "Tangential"
           "SnaptoWCSAxis", "Snap to WCS axis"
           "Vector", "Specify Vector"
        """
        Normal = 0  # MWDesignGuideLinesBuilderDirectionTypeMemberType
        Tangential = 1  # MWDesignGuideLinesBuilderDirectionTypeMemberType
        SnaptoWCSAxis = 2  # MWDesignGuideLinesBuilderDirectionTypeMemberType
        Vector = 3  # MWDesignGuideLinesBuilderDirectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DeleteSelectedGuideLine(self) -> None:
        """
        Button for deleting the selected guide line.  
        
        Signature ``DeleteSelectedGuideLine()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteAllGuideLines(self) -> None:
        """
        Button for deleting all the guide lines.  
        
        Signature ``DeleteAllGuideLines()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AutoCreateGuideLines(self) -> None:
        """
        Button for creating guide lines automatically at locations where there are not exactly two parting lines are connecting.  
        
        Signature ``AutoCreateGuideLines()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateGuideLine(self, partingLineTag: NXOpen.Curve, closePoint: NXOpen.Point3d, length: float) -> tuple:
        """
        Create a guide line given a parting line and coordinates close to one of its end points.  
        
        If there is an existing guide line at the same location, a new one will not be created
        and the existing guide line will be returned.  
        
        Signature ``CreateGuideLine(partingLineTag, closePoint, length)`` 
        
        :param partingLineTag:  Parting line on which a guide line will be placed  
        :type partingLineTag: :py:class:`NXOpen.Curve` 
        :param closePoint:  Point close to one of the end points of the parting line  
        :type closePoint: :py:class:`NXOpen.Point3d` 
        :param length:  Length of the guide line to be created  
        :type length: float 
        :returns: a tuple 
        :rtype: A tuple consisting of (guideLine, created). guideLine is a :py:class:`NXOpen.Curve`.   Existing or newly created guide line created is a int.   1 if a guide line has been created, or 0 if existing guide line is returned 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateGuideLineDirection(self, directionType: MWDesignGuideLinesBuilderDirectionType, guideLine: NXOpen.Curve) -> None:
        """
        Update the guide line with a new direction.  
        
        Signature ``UpdateGuideLineDirection(directionType, guideLine)`` 
        
        :param directionType:  Direction type  
        :type directionType: :py:class:`NXOpen.Tooling.MWDesignGuideLinesBuilderDirectionType` 
        :param guideLine:  Guide line      
        :type guideLine: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteGuideLine(self, guideLine: NXOpen.Curve) -> None:
        """
        Delete a given guide line.  
        
        Signature ``DeleteGuideLine(guideLine)`` 
        
        :param guideLine:  Guide line  
        :type guideLine: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateGuideLineDirectionAndLength(self, guideLine: NXOpen.Curve, guideLineVector: NXOpen.Vector3d, guideLinelength: float) -> None:
        """
        Update the guide line with a new direction and length.  
        
        Signature ``UpdateGuideLineDirectionAndLength(guideLine, guideLineVector, guideLinelength)`` 
        
        :param guideLine:  Guide line  
        :type guideLine: :py:class:`NXOpen.Curve` 
        :param guideLineVector:  Direction vector of the guide line  
        :type guideLineVector: :py:class:`NXOpen.Vector3d` 
        :param guideLinelength:  Length of the guide line  
        :type guideLinelength: float 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    GuideDirection: MWDesignGuideLinesBuilderDirectionType = ...
    """
    Returns or sets  the direction type for creating or editing the guide line.  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDesignGuideLinesBuilderDirectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GuideDirection`` 
    
    :param guideDirection: 
    :type guideDirection: :py:class:`NXOpen.Tooling.MWDesignGuideLinesBuilderDirectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    GuideLength: NXOpen.Expression = ...
    """
    Returns  the length for the guide line.  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    GuideOrPartingLine: NXOpen.SelectCurve = ...
    """
    Returns  the guide line or parting line.  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideOrPartingLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    GuideVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector for the guide line.  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GuideVector`` 
    
    :param guideVector: 
    :type guideVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SnapAngleLimit: float = ...
    """
    Returns or sets  the snap angle limit for snapping the guide line direction to one of the WCS axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``SnapAngleLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SnapAngleLimit`` 
    
    :param snapAngleLimit: 
    :type snapAngleLimit: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: MWDesignGuideLinesBuilder = ...  # unknown typename


class PiercingInsertBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderTypes():
    """
    Specifies the option of piercing insert type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DieInsert", "the die insert type"
       "DieCavityAndSlugHole", "the die cavity and slug hole type"
       "PunchInsert", "the punch insert type"
       "Association", "the association type"
       "Delete", "the delete insert type"
    """
    DieInsert = 0  # PiercingInsertBuilderTypesMemberType
    DieCavityAndSlugHole = 1  # PiercingInsertBuilderTypesMemberType
    PunchInsert = 2  # PiercingInsertBuilderTypesMemberType
    Association = 3  # PiercingInsertBuilderTypesMemberType
    Delete = 4  # PiercingInsertBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderDieInsertTypeItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderDieInsertTypeItems():
    """
    Specifies the type of insert. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DieInsert", "the die insert type"
       "BackingInsert", "the backing insert type"
    """
    DieInsert = 0  # PiercingInsertBuilderDieInsertTypeItemsMemberType
    BackingInsert = 1  # PiercingInsertBuilderDieInsertTypeItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderNormalCavityTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderNormalCavityType():
    """
    Specifies the type of cavity. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TaperAngle", "the taper angle type"
       "Step", "the step type"
       "RoundStep1", "the round step1 type"
       "RoundStep2", "the round step2 type"
    """
    TaperAngle = 0  # PiercingInsertBuilderNormalCavityTypeMemberType
    Step = 1  # PiercingInsertBuilderNormalCavityTypeMemberType
    RoundStep1 = 2  # PiercingInsertBuilderNormalCavityTypeMemberType
    RoundStep2 = 3  # PiercingInsertBuilderNormalCavityTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderNormalBbpslugTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderNormalBbpslugType():
    """
    Specifies the type of bottom plate slug. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fillet", "Bottom plate slug type is fillet"
       "Rectangle", "Bottom plate slug type is rectangle"
       "Circle", "Bottom plate slug type is circle"
       "Mickey", "Bottom plate slug type is mickey"
       "Clearance", "Bottom plate slug type is clearance"
       "SlotVer", "Bottom plate slug type is slot vertical"
       "SlotHor", "Bottom plate slug type is slot horizontal"
       "NotSet", "Bottom plate slug type is none"
    """
    Fillet = 0  # PiercingInsertBuilderNormalBbpslugTypeMemberType
    Rectangle = 1  # PiercingInsertBuilderNormalBbpslugTypeMemberType
    Circle = 2  # PiercingInsertBuilderNormalBbpslugTypeMemberType
    Mickey = 3  # PiercingInsertBuilderNormalBbpslugTypeMemberType
    Clearance = 4  # PiercingInsertBuilderNormalBbpslugTypeMemberType
    SlotVer = 5  # PiercingInsertBuilderNormalBbpslugTypeMemberType
    SlotHor = 6  # PiercingInsertBuilderNormalBbpslugTypeMemberType
    NotSet = 7  # PiercingInsertBuilderNormalBbpslugTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderNormalDsslugTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderNormalDsslugType():
    """
    Specifies the type of die shoe slug. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fillet", "Die shoe slug type is fillet"
       "Rectangle", "Die shoe slug type is rectangle"
       "Circle", "Die shoe slug type is circle"
       "Mickey", "Die shoe slug type is mickey"
       "Clearance", "Die shoe slug type is clearance"
       "SlotVer", "Die shoe slug type is slot vertical"
       "SlotHor", "Die shoe slug type is slot horizontal"
       "NotSet", "Die shoe slug type is none"
    """
    Fillet = 0  # PiercingInsertBuilderNormalDsslugTypeMemberType
    Rectangle = 1  # PiercingInsertBuilderNormalDsslugTypeMemberType
    Circle = 2  # PiercingInsertBuilderNormalDsslugTypeMemberType
    Mickey = 3  # PiercingInsertBuilderNormalDsslugTypeMemberType
    Clearance = 4  # PiercingInsertBuilderNormalDsslugTypeMemberType
    SlotVer = 5  # PiercingInsertBuilderNormalDsslugTypeMemberType
    SlotHor = 6  # PiercingInsertBuilderNormalDsslugTypeMemberType
    NotSet = 7  # PiercingInsertBuilderNormalDsslugTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderPunchPocketTypeItemsPPMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderPunchPocketTypeItemsPP():
    """
    Specifies the punch pocket type in punch plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Clearance", "Punch pocket type in punch plate is clearance"
       "Fillet", "Punch pocket type in punch plate is fillet"
       "Circle", "Punch pocket type in punch plate is circle"
    """
    Clearance = 0  # PiercingInsertBuilderPunchPocketTypeItemsPPMemberType
    Fillet = 1  # PiercingInsertBuilderPunchPocketTypeItemsPPMemberType
    Circle = 2  # PiercingInsertBuilderPunchPocketTypeItemsPPMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderPunchPocketTypeItemsBPMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderPunchPocketTypeItemsBP():
    """
    Specifies the punch pocket type in backing plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Clearance", "Punch pocket type in backing plate is clearance"
       "Fillet", "Punch pocket type in backing plate is fillet"
       "Circle", "Punch pocket type in backing plate is circle"
    """
    Clearance = 0  # PiercingInsertBuilderPunchPocketTypeItemsBPMemberType
    Fillet = 1  # PiercingInsertBuilderPunchPocketTypeItemsBPMemberType
    Circle = 2  # PiercingInsertBuilderPunchPocketTypeItemsBPMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderPunchPocketTypeItemsSPMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderPunchPocketTypeItemsSP():
    """
    Specifies the punch pocket type in stripper plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Clearance", "Punch pocket type in stripper plate is clearance"
       "Fillet", "Punch pocket type in stripper plate is fillet"
       "Circle", "Punch pocket type in stripper plate is circle"
    """
    Clearance = 0  # PiercingInsertBuilderPunchPocketTypeItemsSPMemberType
    Fillet = 1  # PiercingInsertBuilderPunchPocketTypeItemsSPMemberType
    Circle = 2  # PiercingInsertBuilderPunchPocketTypeItemsSPMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderNormalUdpparentPartTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderNormalUdpparentPartType():
    """
    Specifies the parent part of user defined punch. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PrjDie099", "Parent part is die"
       "PrjDb000", "Parent part is db"
       "PrjSub002", "Parent part is sub"
    """
    PrjDie099 = 0  # PiercingInsertBuilderNormalUdpparentPartTypeMemberType
    PrjDb000 = 1  # PiercingInsertBuilderNormalUdpparentPartTypeMemberType
    PrjSub002 = 2  # PiercingInsertBuilderNormalUdpparentPartTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderNormalClearanceOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderNormalClearanceOptionType():
    """
    Specifies the design option of piercing insert. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "The design option is normal"
       "Variable", "The design option is fineblanking"
    """
    Constant = 0  # PiercingInsertBuilderNormalClearanceOptionTypeMemberType
    Variable = 1  # PiercingInsertBuilderNormalClearanceOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderNormalOffsetSideTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderNormalOffsetSideType():
    """
    Specifies the offset side of normal pierce insert design. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DieSide", "The offset side is die"
       "PunchSide", "The offset side is punch"
    """
    DieSide = 0  # PiercingInsertBuilderNormalOffsetSideTypeMemberType
    PunchSide = 1  # PiercingInsertBuilderNormalOffsetSideTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderAssociationToolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderAssociationToolType():
    """
    Specifies the association tool operation option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AddIntoList", "The operation option is add into list"
       "RemoveFromList", "The operation option is remove from list"
       "DeleteSelectedInserts", "The operation option is delete selected inserts"
    """
    AddIntoList = 0  # PiercingInsertBuilderAssociationToolTypeMemberType
    RemoveFromList = 1  # PiercingInsertBuilderAssociationToolTypeMemberType
    DeleteSelectedInserts = 2  # PiercingInsertBuilderAssociationToolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilderInsertPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertBuilderInsertPosition():
    """
    Specifies the position of piercing inserts, for EDW only 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "The position is top side"
       "Bottom", "The position is bottom side"
    """
    Top = 0  # PiercingInsertBuilderInsertPositionMemberType
    Bottom = 1  # PiercingInsertBuilderInsertPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertBuilder(NXOpen.Builder):
    """
    Represents piercing insert builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.PiercingInsertCollection.CreatePiercingInsertBuilder`
    
    Default values.
    
    ====================================  =========================================
    Property                              Value
    ====================================  =========================================
    AssociationTool                       AddIntoList 
    ------------------------------------  -----------------------------------------
    DieInsertType                         DieInsert 
    ------------------------------------  -----------------------------------------
    DieOffsetValue                        0 
    ------------------------------------  -----------------------------------------
    DieSameOffsetValue                    0 
    ------------------------------------  -----------------------------------------
    NormalBbpslug                         Fillet 
    ------------------------------------  -----------------------------------------
    NormalCavity                          TaperAngle 
    ------------------------------------  -----------------------------------------
    NormalClearance                       0.05 
    ------------------------------------  -----------------------------------------
    NormalClearanceOption                 Constant 
    ------------------------------------  -----------------------------------------
    NormalDsslug                          Fillet 
    ------------------------------------  -----------------------------------------
    NormalForEachScrap1                   0 
    ------------------------------------  -----------------------------------------
    NormalForEachScrap2                   0 
    ------------------------------------  -----------------------------------------
    NormalOffsetSide                      DieSide 
    ------------------------------------  -----------------------------------------
    NormalOnePunchToggle                  0 
    ------------------------------------  -----------------------------------------
    NormalRenameDialog                    0 
    ------------------------------------  -----------------------------------------
    NormalSlugPara1                       3 
    ------------------------------------  -----------------------------------------
    NormalSlugPara2                       -3 
    ------------------------------------  -----------------------------------------
    NormalSlugPara3                       2 
    ------------------------------------  -----------------------------------------
    NormalSlugPara4                       3 
    ------------------------------------  -----------------------------------------
    OffsetLinearDimension.Value           3 (millimeters part), 0.12 (inches part) 
    ------------------------------------  -----------------------------------------
    Position                              Bottom 
    ------------------------------------  -----------------------------------------
    PunchOffsetValue                      0 
    ------------------------------------  -----------------------------------------
    PunchPocketClearanceForBP             0 
    ------------------------------------  -----------------------------------------
    PunchPocketClearanceForPP             0 
    ------------------------------------  -----------------------------------------
    PunchPocketClearanceForSP             0 
    ------------------------------------  -----------------------------------------
    PunchPocketToggleForBP                0 
    ------------------------------------  -----------------------------------------
    PunchPocketToggleForPP                0 
    ------------------------------------  -----------------------------------------
    PunchPocketToggleForSP                0 
    ------------------------------------  -----------------------------------------
    PunchPocketTypeInBP                   Clearance 
    ------------------------------------  -----------------------------------------
    PunchPocketTypeInPP                   Clearance 
    ------------------------------------  -----------------------------------------
    PunchPocketTypeInSP                   Clearance 
    ------------------------------------  -----------------------------------------
    PunchSameOffsetValue                  0 
    ------------------------------------  -----------------------------------------
    SlugHoleHeightLinearDimension.Value   100 (millimeters part), 4 (inches part) 
    ------------------------------------  -----------------------------------------
    UserDefinedDieInsertClearance         0 
    ------------------------------------  -----------------------------------------
    UserDefinedDieInsertHeight.Value      0 (millimeters part), 0 (inches part) 
    ------------------------------------  -----------------------------------------
    UserDefinedPunchEnd.Value             0 (millimeters part), 0 (inches part) 
    ------------------------------------  -----------------------------------------
    UserDefinedPunchStart.Value           0 (millimeters part), 0 (inches part) 
    ====================================  =========================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Specifies the option of piercing insert type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DieInsert", "the die insert type"
           "DieCavityAndSlugHole", "the die cavity and slug hole type"
           "PunchInsert", "the punch insert type"
           "Association", "the association type"
           "Delete", "the delete insert type"
        """
        DieInsert = 0  # PiercingInsertBuilderTypesMemberType
        DieCavityAndSlugHole = 1  # PiercingInsertBuilderTypesMemberType
        PunchInsert = 2  # PiercingInsertBuilderTypesMemberType
        Association = 3  # PiercingInsertBuilderTypesMemberType
        Delete = 4  # PiercingInsertBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DieInsertTypeItems():
        """
        Specifies the type of insert. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DieInsert", "the die insert type"
           "BackingInsert", "the backing insert type"
        """
        DieInsert = 0  # PiercingInsertBuilderDieInsertTypeItemsMemberType
        BackingInsert = 1  # PiercingInsertBuilderDieInsertTypeItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalCavityType():
        """
        Specifies the type of cavity. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TaperAngle", "the taper angle type"
           "Step", "the step type"
           "RoundStep1", "the round step1 type"
           "RoundStep2", "the round step2 type"
        """
        TaperAngle = 0  # PiercingInsertBuilderNormalCavityTypeMemberType
        Step = 1  # PiercingInsertBuilderNormalCavityTypeMemberType
        RoundStep1 = 2  # PiercingInsertBuilderNormalCavityTypeMemberType
        RoundStep2 = 3  # PiercingInsertBuilderNormalCavityTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalBbpslugType():
        """
        Specifies the type of bottom plate slug. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fillet", "Bottom plate slug type is fillet"
           "Rectangle", "Bottom plate slug type is rectangle"
           "Circle", "Bottom plate slug type is circle"
           "Mickey", "Bottom plate slug type is mickey"
           "Clearance", "Bottom plate slug type is clearance"
           "SlotVer", "Bottom plate slug type is slot vertical"
           "SlotHor", "Bottom plate slug type is slot horizontal"
           "NotSet", "Bottom plate slug type is none"
        """
        Fillet = 0  # PiercingInsertBuilderNormalBbpslugTypeMemberType
        Rectangle = 1  # PiercingInsertBuilderNormalBbpslugTypeMemberType
        Circle = 2  # PiercingInsertBuilderNormalBbpslugTypeMemberType
        Mickey = 3  # PiercingInsertBuilderNormalBbpslugTypeMemberType
        Clearance = 4  # PiercingInsertBuilderNormalBbpslugTypeMemberType
        SlotVer = 5  # PiercingInsertBuilderNormalBbpslugTypeMemberType
        SlotHor = 6  # PiercingInsertBuilderNormalBbpslugTypeMemberType
        NotSet = 7  # PiercingInsertBuilderNormalBbpslugTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalDsslugType():
        """
        Specifies the type of die shoe slug. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fillet", "Die shoe slug type is fillet"
           "Rectangle", "Die shoe slug type is rectangle"
           "Circle", "Die shoe slug type is circle"
           "Mickey", "Die shoe slug type is mickey"
           "Clearance", "Die shoe slug type is clearance"
           "SlotVer", "Die shoe slug type is slot vertical"
           "SlotHor", "Die shoe slug type is slot horizontal"
           "NotSet", "Die shoe slug type is none"
        """
        Fillet = 0  # PiercingInsertBuilderNormalDsslugTypeMemberType
        Rectangle = 1  # PiercingInsertBuilderNormalDsslugTypeMemberType
        Circle = 2  # PiercingInsertBuilderNormalDsslugTypeMemberType
        Mickey = 3  # PiercingInsertBuilderNormalDsslugTypeMemberType
        Clearance = 4  # PiercingInsertBuilderNormalDsslugTypeMemberType
        SlotVer = 5  # PiercingInsertBuilderNormalDsslugTypeMemberType
        SlotHor = 6  # PiercingInsertBuilderNormalDsslugTypeMemberType
        NotSet = 7  # PiercingInsertBuilderNormalDsslugTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PunchPocketTypeItemsPP():
        """
        Specifies the punch pocket type in punch plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Clearance", "Punch pocket type in punch plate is clearance"
           "Fillet", "Punch pocket type in punch plate is fillet"
           "Circle", "Punch pocket type in punch plate is circle"
        """
        Clearance = 0  # PiercingInsertBuilderPunchPocketTypeItemsPPMemberType
        Fillet = 1  # PiercingInsertBuilderPunchPocketTypeItemsPPMemberType
        Circle = 2  # PiercingInsertBuilderPunchPocketTypeItemsPPMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PunchPocketTypeItemsBP():
        """
        Specifies the punch pocket type in backing plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Clearance", "Punch pocket type in backing plate is clearance"
           "Fillet", "Punch pocket type in backing plate is fillet"
           "Circle", "Punch pocket type in backing plate is circle"
        """
        Clearance = 0  # PiercingInsertBuilderPunchPocketTypeItemsBPMemberType
        Fillet = 1  # PiercingInsertBuilderPunchPocketTypeItemsBPMemberType
        Circle = 2  # PiercingInsertBuilderPunchPocketTypeItemsBPMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PunchPocketTypeItemsSP():
        """
        Specifies the punch pocket type in stripper plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Clearance", "Punch pocket type in stripper plate is clearance"
           "Fillet", "Punch pocket type in stripper plate is fillet"
           "Circle", "Punch pocket type in stripper plate is circle"
        """
        Clearance = 0  # PiercingInsertBuilderPunchPocketTypeItemsSPMemberType
        Fillet = 1  # PiercingInsertBuilderPunchPocketTypeItemsSPMemberType
        Circle = 2  # PiercingInsertBuilderPunchPocketTypeItemsSPMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalUdpparentPartType():
        """
        Specifies the parent part of user defined punch. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PrjDie099", "Parent part is die"
           "PrjDb000", "Parent part is db"
           "PrjSub002", "Parent part is sub"
        """
        PrjDie099 = 0  # PiercingInsertBuilderNormalUdpparentPartTypeMemberType
        PrjDb000 = 1  # PiercingInsertBuilderNormalUdpparentPartTypeMemberType
        PrjSub002 = 2  # PiercingInsertBuilderNormalUdpparentPartTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalClearanceOptionType():
        """
        Specifies the design option of piercing insert. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "The design option is normal"
           "Variable", "The design option is fineblanking"
        """
        Constant = 0  # PiercingInsertBuilderNormalClearanceOptionTypeMemberType
        Variable = 1  # PiercingInsertBuilderNormalClearanceOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalOffsetSideType():
        """
        Specifies the offset side of normal pierce insert design. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DieSide", "The offset side is die"
           "PunchSide", "The offset side is punch"
        """
        DieSide = 0  # PiercingInsertBuilderNormalOffsetSideTypeMemberType
        PunchSide = 1  # PiercingInsertBuilderNormalOffsetSideTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AssociationToolType():
        """
        Specifies the association tool operation option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AddIntoList", "The operation option is add into list"
           "RemoveFromList", "The operation option is remove from list"
           "DeleteSelectedInserts", "The operation option is delete selected inserts"
        """
        AddIntoList = 0  # PiercingInsertBuilderAssociationToolTypeMemberType
        RemoveFromList = 1  # PiercingInsertBuilderAssociationToolTypeMemberType
        DeleteSelectedInserts = 2  # PiercingInsertBuilderAssociationToolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InsertPosition():
        """
        Specifies the position of piercing inserts, for EDW only 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "The position is top side"
           "Bottom", "The position is bottom side"
        """
        Top = 0  # PiercingInsertBuilderInsertPositionMemberType
        Bottom = 1  # PiercingInsertBuilderInsertPositionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def NormalLoadDie(self) -> None:
        """
        Load standard die insert for normal pierce design.  
        
        Signature ``NormalLoadDie()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateUserDefinedInsertDatumPlane(self) -> None:
        """
        Create datum plane for user defined die or backing insert outline.  
        
        Signature ``CreateUserDefinedInsertDatumPlane()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateUserDefinedDieInsert(self) -> None:
        """
        Create user defined die insert or backing insert for selected scraps.  
        
        Signature ``CreateUserDefinedDieInsert()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AddDieInsertPart(self) -> None:
        """
        Add user defined die insert or backing insert part.  
        
        Signature ``AddDieInsertPart()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DieEditOffsetValueTable(self) -> None:
        """
        Edit offset value table.  
        
        Signature ``DieEditOffsetValueTable()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NormalCreateCavityAndSlug(self) -> None:
        """
        Create cavity and slug for normal pierce design.  
        
        Signature ``NormalCreateCavityAndSlug()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NormalLoadStandardPunch(self) -> None:
        """
        Load standard punch for normal pierce design.  
        
        Signature ``NormalLoadStandardPunch()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def PunchEditOffsetValueTable(self) -> None:
        """
        Edit offset value table.  
        
        Signature ``PunchEditOffsetValueTable()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NormalCreateUdp(self) -> None:
        """
        Create user defined punch for normal pierce design.  
        
        Signature ``NormalCreateUdp()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddStripperInsert(self) -> None:
        """
        Add standard stripper insert.  
        
        Signature ``AddStripperInsert()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdatePosition(self) -> None:
        """
        Update position.  
        
        Signature ``UpdatePosition()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def LinkButton(self) -> None:
        """
        Link the selected insert with the selected scrap.  
        
        Signature ``LinkButton()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    AssociationTool: PiercingInsertBuilderAssociationToolType = ...
    """
    Returns or sets  the association tool type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssociationTool`` 
    
    :returns:  Indicates the association tool type  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderAssociationToolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociationTool`` 
    
    :param associationTool:  Indicates the association tool type  
    :type associationTool: :py:class:`NXOpen.Tooling.PiercingInsertBuilderAssociationToolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ConceptDesign: bool = ...
    """
    Returns or sets  the value indicating if the design is for a concept.  
    
    True indicates it is a concept design. 
    
    <hr>
    
    Getter Method
    
    Signature ``ConceptDesign`` 
    
    :returns:  Indicates whether it is a concept design  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConceptDesign`` 
    
    :param conceptDesign:  Indicates whether it is a concept design  
    :type conceptDesign: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DieInsertType: PiercingInsertBuilderDieInsertTypeItems = ...
    """
    Returns or sets  the die insert type.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieInsertType`` 
    
    :returns:  Indicates the type of insert to design, die insert or backing insert  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderDieInsertTypeItems` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DieInsertType`` 
    
    :param dieInsertType:  Indicates the type of insert to design, die insert or backing insert  
    :type dieInsertType: :py:class:`NXOpen.Tooling.PiercingInsertBuilderDieInsertTypeItems` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DieOffsetValue: float = ...
    """
    Returns or sets  the die offset value.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieOffsetValue`` 
    
    :returns:  Indicates the die offset value  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DieOffsetValue`` 
    
    :param dieOffsetValue:  Indicates the die offset value  
    :type dieOffsetValue: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DieSameOffsetValue: bool = ...
    """
    Returns or sets  the same offset value option of die design.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieSameOffsetValue`` 
    
    :returns:  Indicates the same offset value option of die design  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DieSameOffsetValue`` 
    
    :param dieSameOffsetValue:  Indicates the same offset value option of die design  
    :type dieSameOffsetValue: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NewPartNames: str = ...
    """
    Returns or sets  the new component names.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewPartNames`` 
    
    :returns:  Retruns the new component names  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewPartNames`` 
    
    :param newPartNames:  Specifies the new component names  
    :type newPartNames: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    NormalBbpslug: PiercingInsertBuilderNormalBbpslugType = ...
    """
    Returns or sets  the bottom plate slug type for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalBbpslug`` 
    
    :returns:  Indicates bottom plate slug type for normal pierce design  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalBbpslugType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalBbpslug`` 
    
    :param normalBbpslug:  Indicates bottom plate slug type for normal pierce design  
    :type normalBbpslug: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalBbpslugType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalCavity: PiercingInsertBuilderNormalCavityType = ...
    """
    Returns or sets  the cavity type for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalCavity`` 
    
    :returns:  Indicates the cavity type for normal pierce design  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalCavityType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalCavity`` 
    
    :param normalCavity:  Indicates the cavity type for normal pierce design  
    :type normalCavity: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalCavityType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalClearance: float = ...
    """
    Returns or sets  the clearance value for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalClearance`` 
    
    :returns:  Indicates the clearance value for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalClearance`` 
    
    :param normalClearance:  Indicates the clearance value for normal pierce design  
    :type normalClearance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalClearanceOption: PiercingInsertBuilderNormalClearanceOptionType = ...
    """
    Returns or sets  the clearance option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalClearanceOption`` 
    
    :returns:  Indicates the clearance option for normal pierce design  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalClearanceOptionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalClearanceOption`` 
    
    :param normalClearanceOption:  Indicates the clearance option for normal pierce design  
    :type normalClearanceOption: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalClearanceOptionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalDsslug: PiercingInsertBuilderNormalDsslugType = ...
    """
    Returns or sets  the die shoe slug type for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalDsslug`` 
    
    :returns:  Indicates die shoe slug type for normal pierce design  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalDsslugType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalDsslug`` 
    
    :param normalDsslug:  Indicates die shoe slug type for normal pierce design  
    :type normalDsslug: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalDsslugType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalForEachScrap1: bool = ...
    """
    Returns or sets  the each scrap option of bottom plate slug for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalForEachScrap1`` 
    
    :returns:  Indicates each scrap option of bottom plate slug for normal pierce design  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalForEachScrap1`` 
    
    :param normalForEachScrap1:  Indicates each scrap option of bottom plate slug for normal pierce design  
    :type normalForEachScrap1: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalForEachScrap2: bool = ...
    """
    Returns or sets  the each scrap option of die shoe slug for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalForEachScrap2`` 
    
    :returns:  Indicates each scrap option of die shoe slug for normal pierce design  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalForEachScrap2`` 
    
    :param normalForEachScrap2:  Indicates each scrap option of die shoe slug for normal pierce design  
    :type normalForEachScrap2: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalOffsetSide: PiercingInsertBuilderNormalOffsetSideType = ...
    """
    Returns or sets  the offset side option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalOffsetSide`` 
    
    :returns:  Indicates the offset side option for normal pierce design  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalOffsetSideType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalOffsetSide`` 
    
    :param normalOffsetSide:  Indicates the offset side option for normal pierce design  
    :type normalOffsetSide: :py:class:`NXOpen.Tooling.PiercingInsertBuilderNormalOffsetSideType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalOnePunchToggle: bool = ...
    """
    Returns or sets  the one punch option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalOnePunchToggle`` 
    
    :returns:  Indicates the one punch option for normal pierce design  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalOnePunchToggle`` 
    
    :param normalOnePunchToggle:  Indicates the one punch option for normal pierce design  
    :type normalOnePunchToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalPunchLength: str = ...
    """
    Returns or sets  the punch length for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalPunchLength`` 
    
    :returns:  Indicates the punch length for normal pierce design  
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalPunchLength`` 
    
    :param normalPunchLength:  Indicates the punch length for normal pierce design  
    :type normalPunchLength: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalRenameDialog: bool = ...
    """
    Returns or sets  the rename dialog option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalRenameDialog`` 
    
    :returns:  Indicates the rename dialog option for normal pierce design  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalRenameDialog`` 
    
    :param normalRenameDialog:  Indicates the rename dialog option for normal pierce design  
    :type normalRenameDialog: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalSelectPierceDieInsert: NXOpen.SelectBodyList = ...
    """
    Returns  the select pierce die insert to be edited.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSelectPierceDieInsert`` 
    
    :returns:  Indicates the selected pierce die insert to be edited  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalSelectPiercePunch: NXOpen.SelectBodyList = ...
    """
    Returns  the select pierce punch insert to be edited.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSelectPiercePunch`` 
    
    :returns:  Indicates the selected pierce punch insert to be edited  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalSlugPara1: float = ...
    """
    Returns or sets  the H value of slug hole for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugPara1`` 
    
    :returns:  Indicates the H value of slug hole for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugPara1`` 
    
    :param normalSlugPara1:  Indicates the H value of slug hole for normal pierce design  
    :type normalSlugPara1: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalSlugPara2: float = ...
    """
    Returns or sets  the A value of slug hole for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugPara2`` 
    
    :returns:  Indicates A value of slug hole for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugPara2`` 
    
    :param normalSlugPara2:  Indicates A value of slug hole for normal pierce design  
    :type normalSlugPara2: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalSlugPara3: float = ...
    """
    Returns or sets  the C1 value of slug hole for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugPara3`` 
    
    :returns:  Indicates C1 value of slug hole for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugPara3`` 
    
    :param normalSlugPara3:  Indicates C1 value of slug hole for normal pierce design  
    :type normalSlugPara3: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NormalSlugPara4: float = ...
    """
    Returns or sets  the C2 value of slug hole for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugPara4`` 
    
    :returns:  Indicates the C2 value of slug hole for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugPara4`` 
    
    :param normalSlugPara4:  Indicates the C2 value of slug hole for normal pierce design  
    :type normalSlugPara4: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OffsetLinearDimension: NXOpen.Expression = ...
    """
    Returns  the offset linear dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetLinearDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name to create insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns:  Retruns parent part name  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPart:  Specifies the parent part name  
    :type parentPart: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Position: PiercingInsertBuilderInsertPosition = ...
    """
    Returns or sets  the reverse direction 
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderInsertPosition` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Tooling.PiercingInsertBuilderInsertPosition` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchOffsetValue: float = ...
    """
    Returns or sets  the punch offset value.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchOffsetValue`` 
    
    :returns:  Indicates the punch offset value  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchOffsetValue`` 
    
    :param punchOffsetValue:  Indicates the punch offset value  
    :type punchOffsetValue: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PunchPocketClearanceForBP: float = ...
    """
    Returns or sets  the punch pocket clearance for backing plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketClearanceForBP`` 
    
    :returns:  Indicates the clearance value of punch pocket in backing plate  
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketClearanceForBP`` 
    
    :param punchPocketClearanceForBP:  Indicates the clearance value of punch pocket in backing plate  
    :type punchPocketClearanceForBP: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPocketClearanceForPP: float = ...
    """
    Returns or sets  the punch pocket clearance for punch plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketClearanceForPP`` 
    
    :returns:  Indicates the clearance value of punch pocket in punch plate  
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketClearanceForPP`` 
    
    :param punchPocketClearanceForPP:  Indicates the clearance value of punch pocket in punch plate  
    :type punchPocketClearanceForPP: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPocketClearanceForSP: float = ...
    """
    Returns or sets  the punch pocket clearance for stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketClearanceForSP`` 
    
    :returns:  Indicates the clearance value of punch pocket in stripper plate  
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketClearanceForSP`` 
    
    :param punchPocketClearanceForSP:  Indicates the clearance value of punch pocket in stripper plate  
    :type punchPocketClearanceForSP: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPocketHeightInSP: float = ...
    """
    Returns or sets  the punch pocket height in the stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketHeightInSP`` 
    
    :returns:  Indicates the punch pocket height value in the stripper plate  
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketHeightInSP`` 
    
    :param punchPocketHeightInSP:  Indicates the punch pocket height value in the stripper plate  
    :type punchPocketHeightInSP: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPocketToggleForBP: bool = ...
    """
    Returns or sets  the punch pocket toggle for backing plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketToggleForBP`` 
    
    :returns:  Indicates whether to create punch pocket in backing plate  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketToggleForBP`` 
    
    :param punchPocketToggleForBP:  Indicates whether to create punch pocket in backing plate  
    :type punchPocketToggleForBP: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPocketToggleForPP: bool = ...
    """
    Returns or sets  the punch pocket toggle for punch plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketToggleForPP`` 
    
    :returns:  Indicates whether to create punch pocket in punch plate  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketToggleForPP`` 
    
    :param punchPocketToggleForPP:  Indicates whether to create punch pocket in punch plate  
    :type punchPocketToggleForPP: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPocketToggleForSP: bool = ...
    """
    Returns or sets  the punch pocket toggle for stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketToggleForSP`` 
    
    :returns:  Indicates whether to create punch pocket in stripper plate  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketToggleForSP`` 
    
    :param punchPocketToggleForSP:  Indicates whether to create punch pocket in stripper plate  
    :type punchPocketToggleForSP: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPocketTypeInBP: PiercingInsertBuilderPunchPocketTypeItemsBP = ...
    """
    Returns or sets  the punch pocket type in backing plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketTypeInBP`` 
    
    :returns:  Indicates the type of punch pocket in backing plate  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderPunchPocketTypeItemsBP` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketTypeInBP`` 
    
    :param punchPocketTypeInBP:  Indicates the type of punch pocket in backing plate  
    :type punchPocketTypeInBP: :py:class:`NXOpen.Tooling.PiercingInsertBuilderPunchPocketTypeItemsBP` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPocketTypeInPP: PiercingInsertBuilderPunchPocketTypeItemsPP = ...
    """
    Returns or sets  the punch pocket type in punch plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketTypeInPP`` 
    
    :returns:  Indicates the type of punch pocket in punch plate  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderPunchPocketTypeItemsPP` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketTypeInPP`` 
    
    :param punchPocketTypeInPP:  Indicates the type of punch pocket in punch plate  
    :type punchPocketTypeInPP: :py:class:`NXOpen.Tooling.PiercingInsertBuilderPunchPocketTypeItemsPP` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPocketTypeInSP: PiercingInsertBuilderPunchPocketTypeItemsSP = ...
    """
    Returns or sets  the punch pocket type in stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketTypeInSP`` 
    
    :returns:  Indicates the type of punch pocket in stripper plate  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderPunchPocketTypeItemsSP` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketTypeInSP`` 
    
    :param punchPocketTypeInSP:  Indicates the type of punch pocket in stripper plate  
    :type punchPocketTypeInSP: :py:class:`NXOpen.Tooling.PiercingInsertBuilderPunchPocketTypeItemsSP` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchSameOffsetValue: bool = ...
    """
    Returns or sets  the same offset value option of punch design.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchSameOffsetValue`` 
    
    :returns:  Indicates the same offset value option of punch design  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchSameOffsetValue`` 
    
    :param punchSameOffsetValue:  Indicates the same offset value option of punch design  
    :type punchSameOffsetValue: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectAssociationInsert: NXOpen.SelectBodyList = ...
    """
    Returns  the selection of the inserts to create association.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAssociationInsert`` 
    
    :returns:  Indicates the selected inserts for association update  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectAssociationScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the selection of the scrap to create association.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAssociationScrap`` 
    
    :returns:  Indicates the selected scrap for association update  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectDieInsertForCavity: NXOpen.SelectBodyList = ...
    """
    Returns  the select die insert for cavity.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectDieInsertForCavity`` 
    
    :returns:  Indicates the selected die insert for cavity design  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectDieInsertOutline: NXOpen.Section = ...
    """
    Returns  the select die insert outline.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectDieInsertOutline`` 
    
    :returns:  Indicates the profiles for user defined die or backing insert design  
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the select scraps for pierce insert design.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectScrap`` 
    
    :returns:  the selected scraps for pierce insert design  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectScrapOrInsert: NXOpen.SelectFaceList = ...
    """
    Returns  the select scrap or insert for association update.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectScrapOrInsert`` 
    
    :returns:  Indicates the selected scrap or insert for association update  
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectUserDefinedDieInsertForEdit: NXOpen.SelectBodyList = ...
    """
    Returns  the selected user defined die insert to edit.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectUserDefinedDieInsertForEdit`` 
    
    :returns:  Indicates the selected user defined die insert to edit  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SettingWithoutFalseBody: bool = ...
    """
    Returns or sets  the option of whether to create false body for die or backing insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``SettingWithoutFalseBody`` 
    
    :returns:  Indicates whether to create false body  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SettingWithoutFalseBody`` 
    
    :param settingWithoutFalseBody:  Indicates whether to create false body  
    :type settingWithoutFalseBody: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SlugHoleHeightLinearDimension: NXOpen.Expression = ...
    """
    Returns  the slug hole height linear dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugHoleHeightLinearDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Type: PiercingInsertBuilderTypes = ...
    """
    Returns or sets  the type of piercing insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:  Indicates the current type value of the dialog's types block  
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type:  Indicates the type value of the dialog's types block to be set to  
    :type type: :py:class:`NXOpen.Tooling.PiercingInsertBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UserDefinedDieInsertClearance: float = ...
    """
    Returns or sets  the user defined die insert clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedDieInsertClearance`` 
    
    :returns:  Indicates the false body clearance value of user defined die or backing insert  
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedDieInsertClearance`` 
    
    :param userDefinedDieInsertClearance:  Indicates the false body clearance value of user defined die or backing insert  
    :type userDefinedDieInsertClearance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UserDefinedDieInsertHeight: NXOpen.Expression = ...
    """
    Returns  the user defined die insert height.  
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedDieInsertHeight`` 
    
    :returns:  Indicates the height value of user defined die or backing insert  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UserDefinedPunchEnd: NXOpen.Expression = ...
    """
    Returns  the user defined punch end 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedPunchEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    UserDefinedPunchPenetration: float = ...
    """
    Returns or sets  the user defined punch penetration.  
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedPunchPenetration`` 
    
    :returns:  Indicates the punch penetration value for pierce design  
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedPunchPenetration`` 
    
    :param userDefinedPunchPenetration:  Indicates the punch penetration value for pierce design  
    :type userDefinedPunchPenetration: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UserDefinedPunchStart: NXOpen.Expression = ...
    """
    Returns  the user defined punch start 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedPunchStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: PiercingInsertBuilder = ...  # unknown typename


class ToolingManager():
    """
    Contains the collection objects for creating and iterating over Reuse Library objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX6.0.0
    """
    
    def CreateReusableObject(self) -> ReusableObject:
        """
        Creates a :py:class:`NXOpen.Tooling.ReusableObject`  
        
        Signature ``CreateReusableObject()`` 
        
        :returns: :py:class:`NXOpen.Tooling.ReusableObject`  
        :rtype: :py:class:`NXOpen.Tooling.ReusableObject` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    
    MWSearchRegions: MWSearchRegionCollection = ...
    """
    Returns the MWSearchRegionCollection instance belonging to this part 
    
    Signature ``MWSearchRegions`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWSearchRegionCollection`
    """
    MWDefineRegions: MWDefineRegionsCollection = ...
    """
    Returns the MWDefineRegionsCollection instance belonging to this part 
    
    Signature ``MWDefineRegions`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDefineRegionsCollection`
    """
    MWDefineSheets: MWDefineSheetsCollection = ...
    """
    Returns the MWDefineSheetsCollection instance belonging to this part 
    
    Signature ``MWDefineSheets`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDefineSheetsCollection`
    """
    MWCopySheets: MWCopySheetsCollection = ...
    """
    Returns the MWCopySheetsCollection instance belonging to this part 
    
    Signature ``MWCopySheets`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWCopySheetsCollection`
    """
    MWPartingManager: MWPartingManagerCollection = ...
    """
    Returns the MWPartingManagerCollection instance belonging to this part 
    
    Signature ``MWPartingManager`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWPartingManagerCollection`
    """
    MWDesignPartingSurface: MWDesignPartingSurfaceCollection = ...
    """
    Returns the MWDesignPartingSurfaceCollection instance belonging to this part 
    
    Signature ``MWDesignPartingSurface`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDesignPartingSurfaceCollection`
    """
    MWTraversePartingLines: MWTraversePartingLinesCollection = ...
    """
    Returns the MWTraversePartingLinesCollection instance belonging to this part 
    
    Signature ``MWTraversePartingLines`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWTraversePartingLinesCollection`
    """
    MWDesignGuideLines: MWDesignGuideLinesCollection = ...
    """
    Returns the MWDesignGuideLinesCollection instance belonging to this part 
    
    Signature ``MWDesignGuideLines`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDesignGuideLinesCollection`
    """
    MWMoldedPartValidation: MWMoldedPartValidationManager = ...
    """
    Returns the MWMoldedPartValidationManager instance belonging to this part 
    
    Signature ``MWMoldedPartValidation`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWMoldedPartValidationManager`
    """
    WallThicknessChecker: WallThicknessCheckerManager = ...
    """
    Returns the WallThicknessCheckerManager instance belonging to this part 
    
    Signature ``WallThicknessChecker`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WallThicknessCheckerManager`
    """
    GuidedExtension: GuidedExtensionManager = ...
    """
    Returns the GuidedExtensionManager instance belonging to this part 
    
    Signature ``GuidedExtension`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.GuidedExtensionManager`
    """
    ValidCheck: ValidCheckCollection = ...
    """
    Returns the ValidCheckCollection instance belonging to this part 
    
    Signature ``ValidCheck`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ValidCheckCollection`
    """
    DirectUnfold: DirectUnfoldCollection = ...
    """
    Returns the DirectUnfold instance belonging to this part 
    
    Signature ``DirectUnfold`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DirectUnfoldCollection`
    """
    Boms: BomCollection = ...
    """
    Returns the BomCollection instance belonging to this part 
    
    Signature ``Boms`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BomCollection`
    """
    StockSizes: StockSizeCollection = ...
    """
    Returns the StockSizeCollection instance belonging to this part 
    
    Signature ``StockSizes`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StockSizeCollection`
    """
    MoldCsys: MoldCsysCollection = ...
    """
    Returns the MoldCsysCollection instance belonging to this part 
    
    Signature ``MoldCsys`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MoldCsysCollection`
    """
    FamilyMolds: FamilyMoldCollection = ...
    """
    Returns the FamilyMoldCollection instance belonging to this part 
    
    Signature ``FamilyMolds`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FamilyMoldCollection`
    """
    Pockets: PocketCollection = ...
    """
    Returns the PocketCollection instance belonging to this part 
    
    Signature ``Pockets`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PocketCollection`
    """
    ProfileSplits: ProfileSplitCollection = ...
    """
    Returns the ProfileSplitCollection instance belonging to this part 
    
    Signature ``ProfileSplits`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ProfileSplitCollection`
    """
    InitializeProjects: InitProjectCollection = ...
    """
    Returns the InitProjectCollection instance belonging to this part 
    
    Signature ``InitializeProjects`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InitProjectCollection`
    """
    PiercingInsert: PiercingInsertCollection = ...
    """
    Returns the PiercingInsert instance belonging to this part 
    
    Signature ``PiercingInsert`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertCollection`
    """
    StripLayout: StripLayoutCollection = ...
    """
    Returns the StripLayout instance belonging to this part 
    
    Signature ``StripLayout`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StripLayoutCollection`
    """
    Layouts: MWLayoutCollection = ...
    """
    Returns the MWLayoutCollection instance belonging to this part 
    
    Signature ``Layouts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWLayoutCollection`
    """
    SubInserts: SubInsertCollection = ...
    """
    Returns the SubInsertCollection instance belonging to this part 
    
    Signature ``SubInserts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SubInsertCollection`
    """
    ScrapDesign: ScrapDesignCollection = ...
    """
    Returns the ScrapDesignCollection instance belonging to this part 
    
    Signature ``ScrapDesign`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignCollection`
    """
    Undersizes: UndersizeCollection = ...
    """
    Returns the UndersizeCollection instance belonging to this part 
    
    Signature ``Undersizes`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.UndersizeCollection`
    """
    Workpieces: WorkpieceCollection = ...
    """
    Returns the WorkpieceCollection instance belonging to this part 
    
    Signature ``Workpieces`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WorkpieceCollection`
    """
    ElectrodeCopys: ElectrodeCopyCollection = ...
    """
    Returns the ElectrodeCopyCollection instance belonging to this part 
    
    Signature ``ElectrodeCopys`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ElectrodeCopyCollection`
    """
    InitProj: InitProjCollection = ...
    """
    Returns the InitProjCollection instance belonging to this part 
    
    Signature ``InitProj`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InitProjCollection`
    """
    ConceptPositions: ConceptPositionCollection = ...
    """
    Returns the ConceptPositionCollection instance belonging to this part 
    
    Signature ``ConceptPositions`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ConceptPositionCollection`
    """
    WireHole: WireHoleCollection = ...
    """
    Returns the WireHole instance belonging to this part 
    
    Signature ``WireHole`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WireHoleCollection`
    """
    HoleReport: HoleReportCollection = ...
    """
    Returns the HoleReport instance belonging to this part 
    
    Signature ``HoleReport`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.HoleReportCollection`
    """
    ReliefDesign: ReliefDesignCollection = ...
    """
    Returns the ReliefDesign instance belonging to this part 
    
    Signature ``ReliefDesign`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReliefDesignCollection`
    """
    ForceCalculation: ForceCalculationCollection = ...
    """
    Returns the ForceCalculation instance belonging to this part 
    
    Signature ``ForceCalculation`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ForceCalculationCollection`
    """
    BendInsertDesign: BendInsertDesignCollection = ...
    """
    Returns the BendInsertDesign instance belonging to this part 
    
    Signature ``BendInsertDesign`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendInsertDesignCollection`
    """
    UnusedFileManagement: UnusedFileManagementCollection = ...
    """
    Returns the UnusedFileManagement instance belonging to this part 
    
    Signature ``UnusedFileManagement`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.UnusedFileManagementCollection`
    """
    CornerDesign: CornerDesignCollection = ...
    """
    Returns the CornerDesign instance belonging to this part 
    
    Signature ``CornerDesign`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CornerDesignCollection`
    """
    MoldInserts: MoldInsertCollection = ...
    """
    Returns the MoldInsertCollection instance belonging to this part 
    
    Signature ``MoldInserts`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MoldInsertCollection`
    """
    MoldProcesses: MoldProcessCollection = ...
    """
    Returns the MoldProcessCollection instance belonging to this part 
    
    Signature ``MoldProcesses`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MoldProcessCollection`
    """
    FastenerAssembly: FastenerAssyCollection = ...
    """
    Returns the FastenerAssyCollection instance belonging to this part 
    
    Signature ``FastenerAssembly`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FastenerAssyCollection`
    """
    FastenerAssemConfig: FastenerAssemConfigCollection = ...
    """
    Returns the FastenerAssemConfigCollection instance belonging to this part 
    
    Signature ``FastenerAssemConfig`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FastenerAssemConfigCollection`
    """
    AddReusableFeature: AddReusableFeatureCollection = ...
    """
    Returns the AddReusableFeatureCollection instance belonging to this part 
    
    Signature ``AddReusableFeature`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AddReusableFeatureCollection`
    """
    ReferenceBlends: ReferenceBlendCollection = ...
    """
    Returns the ReferenceBlendCollection instance belonging to this part 
    
    Signature ``ReferenceBlends`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReferenceBlendCollection`
    """
    CalculateAreas: CalculateAreaCollection = ...
    """
    Returns the CalculateAreaCollection instance belonging to this part 
    
    Signature ``CalculateAreas`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CalculateAreaCollection`
    """
    FaceSplits: FaceSplitCollection = ...
    """
    Returns the FaceSplitCollection instance belonging to this part 
    
    Signature ``FaceSplits`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FaceSplitCollection`
    """
    TraverseLoops: TraverseLoopCollection = ...
    """
    Returns the TraverseLoopCollection instance belonging to this part 
    
    Signature ``TraverseLoops`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TraverseLoopCollection`
    """
    EnlargeSurfaces: EnlargeSurfaceCollection = ...
    """
    Returns the EnlargeSurfaceCollection instance belonging to this part 
    
    Signature ``EnlargeSurfaces`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EnlargeSurfaceCollection`
    """
    SolidPatchs: SolidPatchCollection = ...
    """
    Returns the SolidPatchCollection instance belonging to this part 
    
    Signature ``SolidPatchs`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SolidPatchCollection`
    """
    SplitSolids: SplitSolidCollection = ...
    """
    Returns the SplitSolidCollection instance belonging to this part 
    
    Signature ``SplitSolids`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SplitSolidCollection`
    """
    EdgePatchs: EdgePatchCollection = ...
    """
    Returns the EdgePatchCollection instance belonging to this part 
    
    Signature ``EdgePatchs`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EdgePatchCollection`
    """
    AssignPatchs: AssignPatchCollection = ...
    """
    Returns the AssignPatchCollection instance belonging to this part 
    
    Signature ``AssignPatchs`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssignPatchCollection`
    """
    TrimRegions: TrimRegionCollection = ...
    """
    Returns the TrimRegionCollection instance belonging to this part 
    
    Signature ``TrimRegions`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimRegionCollection`
    """
    CoolingPattern: CoolingPatternCollection = ...
    """
    Returns the CoolingPatternCollection instance belonging to this part 
    
    Signature ``CoolingPattern`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CoolingPatternCollection`
    """
    CoolingDefineChannel: CoolingDefineChannelCollection = ...
    """
    Returns the CoolingDefineChannelCollection instance belonging to this part 
    
    Signature ``CoolingDefineChannel`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CoolingDefineChannelCollection`
    """
    ChannelAdjust: ChannelAdjustCollection = ...
    """
    Returns the ChannelAdjustCollection instance belonging to this part
    
    Signature ``ChannelAdjust`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ChannelAdjustCollection`
    """
    CoolingConnect: CoolingConnectCollection = ...
    """
    Returns the CoolingConnectCollection instance belonging to this part 
    
    Signature ``CoolingConnect`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CoolingConnectCollection`
    """
    BlankGenerator: BlankGeneratorCollection = ...
    """
    Returns the BlankGeneratorCollection instance belonging to this part
    
    Signature ``BlankGenerator`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlankGeneratorCollection`
    """
    BlankLayout: BlankLayoutCollection = ...
    """
    Returns the BlankLayoutCollection instance belonging to this part 
    
    Signature ``BlankLayout`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlankLayoutCollection`
    """
    DieDesignSetting: DieDesignSettingCollection = ...
    """
    Returns the DieDesignSettingCollection instance belonging to this part 
    
    Signature ``DieDesignSetting`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieDesignSettingCollection`
    """
    EWMultiPositions: EWMultiPositionCollection = ...
    """
    Returns the EWMultiPositionCollection instance belonging to this part 
    
    Signature ``EWMultiPositions`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EWMultiPositionCollection`
    """
    FormingInsert: FormingInsertCollection = ...
    """
    Returns the FormingInsertCollection instance belonging to this part 
    
    Signature ``FormingInsert`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FormingInsertCollection`
    """
    InsertAuxiliary: InsertAuxiliaryCollection = ...
    """
    Returns the InsertAuxiliaryCollection instance belonging to this part 
    
    Signature ``InsertAuxiliary`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InsertAuxiliaryCollection`
    """
    EjectorPostProcessings: EjectorPostProcessingCollection = ...
    """
    Returns the EjectorPostProcessingCollection instance belonging to this part 
    
    Signature ``EjectorPostProcessings`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EjectorPostProcessingCollection`
    """
    TrimMoldComponents: TrimMoldComponentsCollection = ...
    """
    Returns the TrimMoldComponentsCollection instance belonging to this part 
    
    Signature ``TrimMoldComponents`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimMoldComponentsCollection`
    """
    DesignTrimTools: DesignTrimToolCollection = ...
    """
    Returns the DesignTrimToolCollection instance belonging to this part 
    
    Signature ``DesignTrimTools`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DesignTrimToolCollection`
    """
    CoolingExtend: CoolingExtendCollection = ...
    """
    Returns the CoolingExtendCollection instance belonging to this part 
    
    Signature ``CoolingExtend`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CoolingExtendCollection`
    """
    SIZER: SIZERCollection = ...
    """
    Returns the SIZERCollection instance belonging to this part 
    
    Signature ``SIZER`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SIZERCollection`
    """
    Runner: RunnerCollection = ...
    """
    Returns the RunnerCollection instance belonging to this part 
    
    Signature ``Runner`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.RunnerCollection`
    """
    MotionSimulation: MotionSimulationCollection = ...
    """
    Returns the MotionSimulationCollection instance belonging to this part 
    
    Signature ``MotionSimulation`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MotionSimulationCollection`
    """
    ReusablePocket: ReusablePocketCollection = ...
    """
    Returns the ReusablePocketCollection instance belonging to this part 
    
    Signature ``ReusablePocket`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReusablePocketCollection`
    """
    ChannelFitting: ChannelFittingCollection = ...
    """
    Returns the ChannelFittingCollection instance belonging to this part 
    
    Signature ``ChannelFitting`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ChannelFittingCollection`
    """
    AutoDie: AutoDieCollection = ...
    """
    Returns the AutoDieCollection instance belonging to this part 
    
    Signature ``AutoDie`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AutoDieCollection`
    """
    ManufacturingGeometry: ManufacturingGeometryCollection = ...
    """
    Returns the ManufacturingGeometryCollection instance belonging to this part 
    
    Signature ``ManufacturingGeometry`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ManufacturingGeometryCollection`
    """
    BurringInsert: BurringInsertCollection = ...
    """
    Returns the BuringInsertCollection instance belonging to this part 
    
    Signature ``BurringInsert`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BurringInsertCollection`
    """
    ClearanceManagement: ClearanceManagementCollection = ...
    """
    Returns the ClearanceManagementCollection instance belonging to this part 
    
    Signature ``ClearanceManagement`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ClearanceManagementCollection`
    """
    WorkflowManagement: WorkflowManagementCollection = ...
    """
    Returns the WorkflowManagementCollection instance belonging to this part 
    
    Signature ``WorkflowManagement`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WorkflowManagementCollection`
    """
    LayoutManagement: LayoutManagementCollection = ...
    """
    Returns the LayoutManagementCollection instance belonging to this part 
    
    Signature ``LayoutManagement`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LayoutManagementCollection`
    """
    ReusableObjectManager: ReusableObjectManager = ...
    """
    Returns the ReusableObjectManager instance belonging to this part 
    
    Signature ``ReusableObjectManager`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReusableObjectManager`
    """
    ToolingDrawing: ToolingDrawingCollection = ...
    """
    Returns the ToolingDrawingCollection instance belonging to this part 
    
    Signature ``ToolingDrawing`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ToolingDrawingCollection`
    """
    TrimSolid: TrimSolidCollection = ...
    """
    Returns the TrimSolidCollection instance belonging to this part 
    
    Signature ``TrimSolid`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimSolidCollection`
    """
    DieBase: DieBaseCollection = ...
    """
    Returns the DieBaseCollection instance belonging to this part 
    
    Signature ``DieBase`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieBaseCollection`
    """
    SpecifyBaffle: SpecifyBaffleCollection = ...
    """
    Returns the SpecifyBaffleCollection instance belonging to this part 
    
    Signature ``SpecifyBaffle`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecifyBaffleCollection`
    """
    ElectrodeDesign: ElectrodeDesignCollection = ...
    """
    Returns the ElectrodeDesignCollection instance belonging to this part 
    
    Signature ``ElectrodeDesign`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ElectrodeDesignCollection`
    """
    FastenerAssyCustomization: FastenerAssyCustomizationCollection = ...
    """
    Returns the FastenerAssyCustomizationCollection instance belonging to this part 
    
    Signature ``FastenerAssyCustomization`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FastenerAssyCustomizationCollection`
    """
    CreateBox: CreateBoxCollection = ...
    """
    Returns the CreateBoxCollection instance belonging to this part 
    
    Signature ``CreateBox`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CreateBoxCollection`
    """
    ReplaceSolid: ReplaceSolidCollection = ...
    """
    Returns the ReplaceSolidCollection instance belonging to this part 
    
    Signature ``ReplaceSolid`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReplaceSolidCollection`
    """
    SpecifyCircuit: SpecifyCircuitCollection = ...
    """
    Returns the SpecifyCircuitCollection instance belonging to this part 
    
    Signature ``SpecifyCircuit`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecifyCircuitCollection`
    """
    StandardPart: StandardPartCollection = ...
    """
    Returns the StandardPartCollection instance belonging to this part 
    
    Signature ``StandardPart`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StandardPartCollection`
    """
    QuickQuotation: QuickQuotationCollection = ...
    """
    Returns the QuickQuotationCollection instance belonging to this part 
    
    Signature ``QuickQuotation`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.QuickQuotationCollection`
    """
    FastenerRemoveNode: FastenerRemoveNodeCollection = ...
    """
    Returns the FastenerRemoveNodeCollection instance belonging to this part 
    
    Signature ``FastenerRemoveNode`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FastenerRemoveNodeCollection`
    """
    MoldDesign: MoldDesignCollection = ...
    """
    Returns the MoldDesignCollection instance belonging to this part 
    
    Signature ``MoldDesign`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MoldDesignCollection`
    """
    IntermediateStage: IntermediateStageCollection = ...
    """
    Returns the IntermediateStageCollection instance belonging to this part 
    
    Signature ``IntermediateStage`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.IntermediateStageCollection`
    """
    BendOperation: BendOperationCollection = ...
    """
    Returns the BendOperationCollection instance belonging to this part 
    
    Signature ``BendOperation`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendOperationCollection`
    """
    StandardPartPosition: StandardPartPositionCollection = ...
    """
    Returns the StandardPartCollection instance belonging to this part 
    
    Signature ``StandardPartPosition`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StandardPartPositionCollection`
    """
    ProgressiveDie: ProgressiveDieManager = ...
    """
    Returns the Progressive Die Manager for this part 
    
    Signature ``ProgressiveDie`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ProgressiveDieManager`
    """
    BlankNesting: BlankNestingCollection = ...
    """
    Returns the BlankNestingCollection instance belonging to this part 
    
    Signature ``BlankNesting`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlankNestingCollection`
    """
    Moldwizard: MoldwizardManager = ...
    """
    Returns the moldwizard manager for this part 
    
    Signature ``Moldwizard`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MoldwizardManager`
    """
    ObjectAttributeManagement: ObjectAttributeManagementCollection = ...
    """
    Returns the ObjectAttributeManagementCollection instance belonging to this part 
    
    Signature ``ObjectAttributeManagement`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ObjectAttributeManagementCollection`
    """
    FaceColorManagement: FaceColorManagementCollection = ...
    """
    Returns the FaceColorManagementCollection instance belonging to this part 
    
    Signature ``FaceColorManagement`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FaceColorManagementCollection`
    """
    HoleManufacturingNote: HoleManufacturingNoteCollection = ...
    """
    Returns the HoleManufacturingNoteCollection instance belonging to this part 
    
    Signature ``HoleManufacturingNote`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.HoleManufacturingNoteCollection`
    """


class SolidPatchCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of SolidPatch builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> SolidPatchBuilder:
        """
        Creates a SolidPatch builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`SolidPatchBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.SolidPatchBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilderBodyMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScrapDesignBuilderBody():
    """
    Specifies the operation type of scraps 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "Create operation"
       "Edit", "Edit operation"
       "Addon", "Add-on operation"
       "Grouping", "Grouping operation"
    """
    Create = 0  # ScrapDesignBuilderBodyMemberType
    Edit = 1  # ScrapDesignBuilderBodyMemberType
    Addon = 2  # ScrapDesignBuilderBodyMemberType
    Grouping = 3  # ScrapDesignBuilderBodyMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilderScrapDefTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScrapDesignBuilderScrapDefType():
    """
    Specifies the creation type of scraps 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BlankBoundarySketch", "Boundary curves or sketch will be used to create scraps"
       "HoleBoundary", "Hole boundary curves will be extracted automatically to create scraps"
       "ClosedCurves", "Close curves will be used to create scraps"
       "BoundaryLines", "Boundary lines will be used to create an entire scrap"
       "ExistedSheetBody", "Existed sheet body will be converted to scrap"
       "ChangeType", "The type of scrap will be changed between Piercing and Piloting"
    """
    BlankBoundarySketch = 0  # ScrapDesignBuilderScrapDefTypeMemberType
    HoleBoundary = 1  # ScrapDesignBuilderScrapDefTypeMemberType
    ClosedCurves = 2  # ScrapDesignBuilderScrapDefTypeMemberType
    BoundaryLines = 3  # ScrapDesignBuilderScrapDefTypeMemberType
    ExistedSheetBody = 4  # ScrapDesignBuilderScrapDefTypeMemberType
    ChangeType = 5  # ScrapDesignBuilderScrapDefTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilderDefScrapTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScrapDesignBuilderDefScrapType():
    """
    Specifies the definition type of scraps 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Piercing", "Scrap will be defined as piercing type"
       "Piloting", "Scrap will be defined as piloting type"
    """
    Piercing = 0  # ScrapDesignBuilderDefScrapTypeMemberType
    Piloting = 1  # ScrapDesignBuilderDefScrapTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilderScrapDefPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScrapDesignBuilderScrapDefPosition():
    """
    Specifies the position method of scraps, projecting method is normally used 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ProjectToStrip", "Scrap will be projected into the strip plane"
       "KeepOrigin", "Scrap will be created in the original plane"
    """
    ProjectToStrip = 0  # ScrapDesignBuilderScrapDefPositionMemberType
    KeepOrigin = 1  # ScrapDesignBuilderScrapDefPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilderEditScrapTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScrapDesignBuilderEditScrapType():
    """
    Specifies the edit type of scraps 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Split", "Splits a scrap by selected curves"
       "Merge", "Merges two scraps into one"
       "ApplyMinimumRadius", "Applies minimum radius to sharp corners of scraps"
       "ChangeStation", "Changes the station number of scraps"
       "Delete", "Deletes scraps"
       "Update", "Updates scraps if there is any design change"
    """
    Split = 0  # ScrapDesignBuilderEditScrapTypeMemberType
    Merge = 1  # ScrapDesignBuilderEditScrapTypeMemberType
    ApplyMinimumRadius = 2  # ScrapDesignBuilderEditScrapTypeMemberType
    ChangeStation = 3  # ScrapDesignBuilderEditScrapTypeMemberType
    Delete = 4  # ScrapDesignBuilderEditScrapTypeMemberType
    Update = 5  # ScrapDesignBuilderEditScrapTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilderRemoveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScrapDesignBuilderRemoveType():
    """
    Specifies the removing type as filter  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "InferScrap", "Captures inferred scraps"
       "Overlap", "Captures overlaps"
       "Overcut", "Captures overcuts"
       "Trimming", "Captures trimming scraps"
       "Hole", "Captures hole scraps"
       "Scrap", "Captures normal scraps"
       "All", "Captures any kind of scraps"
    """
    InferScrap = 0  # ScrapDesignBuilderRemoveTypeMemberType
    Overlap = 1  # ScrapDesignBuilderRemoveTypeMemberType
    Overcut = 2  # ScrapDesignBuilderRemoveTypeMemberType
    Trimming = 3  # ScrapDesignBuilderRemoveTypeMemberType
    Hole = 4  # ScrapDesignBuilderRemoveTypeMemberType
    Scrap = 5  # ScrapDesignBuilderRemoveTypeMemberType
    All = 6  # ScrapDesignBuilderRemoveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilderAddonTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScrapDesignBuilderAddonType():
    """
    Specifies the add-on type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Overlap", "Creates overlap"
       "Overcut", "Creates overcut"
       "Trimming", "Creates trimming"
       "UserDefined", "Creates user defined add-on"
    """
    Overlap = 0  # ScrapDesignBuilderAddonTypeMemberType
    Overcut = 1  # ScrapDesignBuilderAddonTypeMemberType
    Trimming = 2  # ScrapDesignBuilderAddonTypeMemberType
    UserDefined = 3  # ScrapDesignBuilderAddonTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilderOvercutTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScrapDesignBuilderOvercutType():
    """
    Specifies the over cut type, different type has different parameters 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NormalType", "Creates normal type of overcut"
       "TangentType", "Creates tangent type of overcut"
       "CircularType", "Creates circular type of overcut"
       "RectangularType", "Creates rectangular type of overcut"
    """
    NormalType = 0  # ScrapDesignBuilderOvercutTypeMemberType
    TangentType = 1  # ScrapDesignBuilderOvercutTypeMemberType
    CircularType = 2  # ScrapDesignBuilderOvercutTypeMemberType
    RectangularType = 3  # ScrapDesignBuilderOvercutTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilderTrimNumTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScrapDesignBuilderTrimNumType():
    """
    Specifies the step of trimming process, the maximum is five 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "One", "Specifies one step of trimming"
       "Two", "Specifies two steps of trimming"
       "Three", "Specifies three steps of trimming"
       "Four", "Specifies four steps of trimming"
       "Five", "Specifies five steps of trimming"
    """
    One = 0  # ScrapDesignBuilderTrimNumTypeMemberType
    Two = 1  # ScrapDesignBuilderTrimNumTypeMemberType
    Three = 2  # ScrapDesignBuilderTrimNumTypeMemberType
    Four = 3  # ScrapDesignBuilderTrimNumTypeMemberType
    Five = 4  # ScrapDesignBuilderTrimNumTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ScrapDesignBuilder(NXOpen.Builder):
    """
    Represents a scrap design builder    
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ScrapDesignCollection.CreateScrapDesignBuilder`
    
    Default values.
    
    =================  ===============
    Property           Value
    =================  ===============
    AddonOperation     Overlap 
    -----------------  ---------------
    ApplyColor         0 
    -----------------  ---------------
    DefStationNum      1 
    -----------------  ---------------
    DoubleA            0 
    -----------------  ---------------
    DoubleAngle        0 
    -----------------  ---------------
    DoubleB            0 
    -----------------  ---------------
    DoubleH            0 
    -----------------  ---------------
    DoubleR            0.2 
    -----------------  ---------------
    EditMethod         Split 
    -----------------  ---------------
    EditStationNum     1 
    -----------------  ---------------
    MinRad             0.1 
    -----------------  ---------------
    OvercutOperation   NormalType 
    -----------------  ---------------
    OverlapWidth       0.1 
    -----------------  ---------------
    PierceType         Piercing 
    -----------------  ---------------
    ProcessFive        0 
    -----------------  ---------------
    ProcessFour        0 
    -----------------  ---------------
    ProcessOne         0 
    -----------------  ---------------
    ProcessThree       0 
    -----------------  ---------------
    ProcessTwo         0 
    -----------------  ---------------
    RemoveFilter       InferScrap 
    -----------------  ---------------
    ScrapPosition      ProjectToStrip 
    -----------------  ---------------
    ScrapTol           0.01 
    -----------------  ---------------
    ScrapTypeEnum      Create 
    =================  ===============
    
    .. versionadded:: NX6.0.0
    """
    
    class Body():
        """
        Specifies the operation type of scraps 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "Create operation"
           "Edit", "Edit operation"
           "Addon", "Add-on operation"
           "Grouping", "Grouping operation"
        """
        Create = 0  # ScrapDesignBuilderBodyMemberType
        Edit = 1  # ScrapDesignBuilderBodyMemberType
        Addon = 2  # ScrapDesignBuilderBodyMemberType
        Grouping = 3  # ScrapDesignBuilderBodyMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ScrapDefType():
        """
        Specifies the creation type of scraps 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BlankBoundarySketch", "Boundary curves or sketch will be used to create scraps"
           "HoleBoundary", "Hole boundary curves will be extracted automatically to create scraps"
           "ClosedCurves", "Close curves will be used to create scraps"
           "BoundaryLines", "Boundary lines will be used to create an entire scrap"
           "ExistedSheetBody", "Existed sheet body will be converted to scrap"
           "ChangeType", "The type of scrap will be changed between Piercing and Piloting"
        """
        BlankBoundarySketch = 0  # ScrapDesignBuilderScrapDefTypeMemberType
        HoleBoundary = 1  # ScrapDesignBuilderScrapDefTypeMemberType
        ClosedCurves = 2  # ScrapDesignBuilderScrapDefTypeMemberType
        BoundaryLines = 3  # ScrapDesignBuilderScrapDefTypeMemberType
        ExistedSheetBody = 4  # ScrapDesignBuilderScrapDefTypeMemberType
        ChangeType = 5  # ScrapDesignBuilderScrapDefTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DefScrapType():
        """
        Specifies the definition type of scraps 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Piercing", "Scrap will be defined as piercing type"
           "Piloting", "Scrap will be defined as piloting type"
        """
        Piercing = 0  # ScrapDesignBuilderDefScrapTypeMemberType
        Piloting = 1  # ScrapDesignBuilderDefScrapTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ScrapDefPosition():
        """
        Specifies the position method of scraps, projecting method is normally used 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ProjectToStrip", "Scrap will be projected into the strip plane"
           "KeepOrigin", "Scrap will be created in the original plane"
        """
        ProjectToStrip = 0  # ScrapDesignBuilderScrapDefPositionMemberType
        KeepOrigin = 1  # ScrapDesignBuilderScrapDefPositionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EditScrapType():
        """
        Specifies the edit type of scraps 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Split", "Splits a scrap by selected curves"
           "Merge", "Merges two scraps into one"
           "ApplyMinimumRadius", "Applies minimum radius to sharp corners of scraps"
           "ChangeStation", "Changes the station number of scraps"
           "Delete", "Deletes scraps"
           "Update", "Updates scraps if there is any design change"
        """
        Split = 0  # ScrapDesignBuilderEditScrapTypeMemberType
        Merge = 1  # ScrapDesignBuilderEditScrapTypeMemberType
        ApplyMinimumRadius = 2  # ScrapDesignBuilderEditScrapTypeMemberType
        ChangeStation = 3  # ScrapDesignBuilderEditScrapTypeMemberType
        Delete = 4  # ScrapDesignBuilderEditScrapTypeMemberType
        Update = 5  # ScrapDesignBuilderEditScrapTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RemoveType():
        """
        Specifies the removing type as filter  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "InferScrap", "Captures inferred scraps"
           "Overlap", "Captures overlaps"
           "Overcut", "Captures overcuts"
           "Trimming", "Captures trimming scraps"
           "Hole", "Captures hole scraps"
           "Scrap", "Captures normal scraps"
           "All", "Captures any kind of scraps"
        """
        InferScrap = 0  # ScrapDesignBuilderRemoveTypeMemberType
        Overlap = 1  # ScrapDesignBuilderRemoveTypeMemberType
        Overcut = 2  # ScrapDesignBuilderRemoveTypeMemberType
        Trimming = 3  # ScrapDesignBuilderRemoveTypeMemberType
        Hole = 4  # ScrapDesignBuilderRemoveTypeMemberType
        Scrap = 5  # ScrapDesignBuilderRemoveTypeMemberType
        All = 6  # ScrapDesignBuilderRemoveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AddonType():
        """
        Specifies the add-on type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Overlap", "Creates overlap"
           "Overcut", "Creates overcut"
           "Trimming", "Creates trimming"
           "UserDefined", "Creates user defined add-on"
        """
        Overlap = 0  # ScrapDesignBuilderAddonTypeMemberType
        Overcut = 1  # ScrapDesignBuilderAddonTypeMemberType
        Trimming = 2  # ScrapDesignBuilderAddonTypeMemberType
        UserDefined = 3  # ScrapDesignBuilderAddonTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OvercutType():
        """
        Specifies the over cut type, different type has different parameters 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NormalType", "Creates normal type of overcut"
           "TangentType", "Creates tangent type of overcut"
           "CircularType", "Creates circular type of overcut"
           "RectangularType", "Creates rectangular type of overcut"
        """
        NormalType = 0  # ScrapDesignBuilderOvercutTypeMemberType
        TangentType = 1  # ScrapDesignBuilderOvercutTypeMemberType
        CircularType = 2  # ScrapDesignBuilderOvercutTypeMemberType
        RectangularType = 3  # ScrapDesignBuilderOvercutTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimNumType():
        """
        Specifies the step of trimming process, the maximum is five 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "One", "Specifies one step of trimming"
           "Two", "Specifies two steps of trimming"
           "Three", "Specifies three steps of trimming"
           "Four", "Specifies four steps of trimming"
           "Five", "Specifies five steps of trimming"
        """
        One = 0  # ScrapDesignBuilderTrimNumTypeMemberType
        Two = 1  # ScrapDesignBuilderTrimNumTypeMemberType
        Three = 2  # ScrapDesignBuilderTrimNumTypeMemberType
        Four = 3  # ScrapDesignBuilderTrimNumTypeMemberType
        Five = 4  # ScrapDesignBuilderTrimNumTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetOvercutPosition(self) -> NXOpen.Point3d:
        """
        Returns the overcut position, it determines where the overcut sketch will be constrained  
        
        Signature ``GetOvercutPosition()`` 
        
        :returns:  Indicates the position to constrain overcut sketch  
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: None.
        """
        ...
    
    
    def SetOvercutPosition(self, overcutPosition: NXOpen.Point3d) -> None:
        """
        Sets the overcut position, it determines where the overcut sketch will be constrained 
        
        Signature ``SetOvercutPosition(overcutPosition)`` 
        
        :param overcutPosition: 
        :type overcutPosition: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    AddonOperation: ScrapDesignBuilderAddonType = ...
    """
    Returns or sets  the add-on operation, which includes overlap, overcut, trimming and user defined 
    
    <hr>
    
    Getter Method
    
    Signature ``AddonOperation`` 
    
    :returns:  Indicates the add-on operation  
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilderAddonType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AddonOperation`` 
    
    :param addonOperation: 
    :type addonOperation: :py:class:`NXOpen.Tooling.ScrapDesignBuilderAddonType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ApplyColor: bool = ...
    """
    Returns or sets  the toggle to determine whether the color will be used to all other scraps with the same shape 
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyColor`` 
    
    :returns:  Indicates whether the color will be used to all other scraps  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyColor`` 
    
    :param applyColor: 
    :type applyColor: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    AssignColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color for assigned scrap 
    
    <hr>
    
    Getter Method
    
    Signature ``AssignColor`` 
    
    :returns:  Indicates the color of scraps  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssignColor`` 
    
    :param assignColor: 
    :type assignColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    AttachEdge: NXOpen.SelectEdgeList = ...
    """
    Returns  the edge that overlap will be attached 
    
    <hr>
    
    Getter Method
    
    Signature ``AttachEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AttachScrap: NXOpen.SelectBody = ...
    """
    Returns  the scrap that overlap will be attached 
    
    <hr>
    
    Getter Method
    
    Signature ``AttachScrap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BoundaryList: NXOpen.ScCollector = ...
    """
    Returns  the boundary list served for boundary line method 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ChangeColScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the changing color of scrap 
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeColScrap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CurveList: NXOpen.Section = ...
    """
    Returns  the curve list served for boundary+sketch or close boundaries method 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveList`` 
    
    :returns:  The curve list is to create scraps  
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DefStationNum: int = ...
    """
    Returns or sets  the defined station number, according to it scraps can be laid out automatically in strip 
    
    <hr>
    
    Getter Method
    
    Signature ``DefStationNum`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefStationNum`` 
    
    :param defStationNum: 
    :type defStationNum: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    DoubleA: float = ...
    """
    Returns or sets  the double A served as the parameter of overcut 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleA`` 
    
    :returns:  Indicates the parameter A of overcut  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleA`` 
    
    :param doubleA: 
    :type doubleA: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    DoubleAngle: float = ...
    """
    Returns or sets  the double Angle served as the parameter of overcut 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleAngle`` 
    
    :returns:  Indicates the parameter Angle of overcut  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleAngle`` 
    
    :param doubleAngle: 
    :type doubleAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    DoubleB: float = ...
    """
    Returns or sets  the double B served as the parameter of overcut 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleB`` 
    
    :returns:  Indicates the parameter B of overcut  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleB`` 
    
    :param doubleB: 
    :type doubleB: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    DoubleH: float = ...
    """
    Returns or sets  the double H served as the parameter of overcut 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleH`` 
    
    :returns:  Indicates the parameter H of overcut  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleH`` 
    
    :param doubleH: 
    :type doubleH: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    DoubleR: float = ...
    """
    Returns or sets  the double R served as the parameter of overcut 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleR`` 
    
    :returns:  Indicates the parameter R of overcut  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleR`` 
    
    :param doubleR: 
    :type doubleR: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    EditMethod: ScrapDesignBuilderEditScrapType = ...
    """
    Returns or sets  the edit method, which includes splitting, merging, applying minimum radius, changing station, deleting and updating 
    
    <hr>
    
    Getter Method
    
    Signature ``EditMethod`` 
    
    :returns:  Indicates the edit method  
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilderEditScrapType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditMethod`` 
    
    :param editMethod: 
    :type editMethod: :py:class:`NXOpen.Tooling.ScrapDesignBuilderEditScrapType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    EditStationNum: int = ...
    """
    Returns or sets  the station number to lay out in strip 
    
    <hr>
    
    Getter Method
    
    Signature ``EditStationNum`` 
    
    :returns:  Indicates the station number of scraps  
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditStationNum`` 
    
    :param editStationNum: 
    :type editStationNum: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ExistScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the existed scrap served for exist sheet body method 
    
    <hr>
    
    Getter Method
    
    Signature ``ExistScrap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    HoleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the hole color 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleColor`` 
    
    :returns:  Indicates the color of hole scraps  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleColor`` 
    
    :param holeColor: 
    :type holeColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    MinRad: float = ...
    """
    Returns or sets  the minimum radius to blend sharp corners 
    
    <hr>
    
    Getter Method
    
    Signature ``MinRad`` 
    
    :returns:  Indicates the minimum radius for sharp corners   
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinRad`` 
    
    :param minRad: 
    :type minRad: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OvercutColor: NXOpen.NXColor = ...
    """
    Returns or sets  the overcut color 
    
    <hr>
    
    Getter Method
    
    Signature ``OvercutColor`` 
    
    :returns:  Indicates the color of overcuts  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OvercutColor`` 
    
    :param overcutColor: 
    :type overcutColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OvercutEdge: NXOpen.SelectEdge = ...
    """
    Returns  the edge that overcut will be attached 
    
    <hr>
    
    Getter Method
    
    Signature ``OvercutEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OvercutOperation: ScrapDesignBuilderOvercutType = ...
    """
    Returns or sets  the overcut operation, which includes normal type, tangent type, circular type and rectangular type 
    
    <hr>
    
    Getter Method
    
    Signature ``OvercutOperation`` 
    
    :returns:  Indicates the type of overcut  
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilderOvercutType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OvercutOperation`` 
    
    :param overcutOperation: 
    :type overcutOperation: :py:class:`NXOpen.Tooling.ScrapDesignBuilderOvercutType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OverlapColor: NXOpen.NXColor = ...
    """
    Returns or sets  the overlap color 
    
    <hr>
    
    Getter Method
    
    Signature ``OverlapColor`` 
    
    :returns:  Indicates the color of overlaps  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverlapColor`` 
    
    :param overlapColor: 
    :type overlapColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    OverlapWidth: float = ...
    """
    Returns or sets  the overlap width 
    
    <hr>
    
    Getter Method
    
    Signature ``OverlapWidth`` 
    
    :returns:  Indicates the width of overlap  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverlapWidth`` 
    
    :param overlapWidth: 
    :type overlapWidth: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    PierceType: ScrapDesignBuilderDefScrapType = ...
    """
    Returns or sets  the piercing type, piercing or piloting 
    
    <hr>
    
    Getter Method
    
    Signature ``PierceType`` 
    
    :returns:  Indicates the scrap type  
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilderDefScrapType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PierceType`` 
    
    :param pierceType: 
    :type pierceType: :py:class:`NXOpen.Tooling.ScrapDesignBuilderDefScrapType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    PiercingColor: NXOpen.NXColor = ...
    """
    Returns or sets  the piercing color 
    
    <hr>
    
    Getter Method
    
    Signature ``PiercingColor`` 
    
    :returns:  Indicates the color of piercing scraps  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PiercingColor`` 
    
    :param piercingColor: 
    :type piercingColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    PilotingColor: NXOpen.NXColor = ...
    """
    Returns or sets  the piloting color 
    
    <hr>
    
    Getter Method
    
    Signature ``PilotingColor`` 
    
    :returns:  Indicates the color of piloting scraps  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PilotingColor`` 
    
    :param pilotingColor: 
    :type pilotingColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ProcessFive: float = ...
    """
    Returns or sets  the process five 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessFive`` 
    
    :returns:  Indicates five steps of trimming process  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessFive`` 
    
    :param processFive: 
    :type processFive: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ProcessFour: float = ...
    """
    Returns or sets  the process four 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessFour`` 
    
    :returns:  Indicates four steps of trimming process  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessFour`` 
    
    :param processFour: 
    :type processFour: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ProcessOne: float = ...
    """
    Returns or sets  the process one 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessOne`` 
    
    :returns:  Indicates one step of trimming process  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessOne`` 
    
    :param processOne: 
    :type processOne: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ProcessThree: float = ...
    """
    Returns or sets  the process three 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessThree`` 
    
    :returns:  Indicates three steps of trimming process  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessThree`` 
    
    :param processThree: 
    :type processThree: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ProcessTwo: float = ...
    """
    Returns or sets  the process two 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessTwo`` 
    
    :returns:  Indicates two steps of trimming process  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessTwo`` 
    
    :param processTwo: 
    :type processTwo: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    RemoveFilter: ScrapDesignBuilderRemoveType = ...
    """
    Returns or sets  the removing filter 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveFilter`` 
    
    :returns:  Indicates the filter of removing scraps  
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilderRemoveType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveFilter`` 
    
    :param removeFilter: 
    :type removeFilter: :py:class:`NXOpen.Tooling.ScrapDesignBuilderRemoveType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrapMethod: ScrapDesignBuilderScrapDefType = ...
    """
    Returns or sets  the scrap method, which includes boundary+sketch, hole boundary, close curves, boundary lines and existed sheet body 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrapMethod`` 
    
    :returns:  Indicates the creating method of scraps  
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilderScrapDefType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrapMethod`` 
    
    :param scrapMethod: 
    :type scrapMethod: :py:class:`NXOpen.Tooling.ScrapDesignBuilderScrapDefType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrapPosition: ScrapDesignBuilderScrapDefPosition = ...
    """
    Returns or sets  the scrap position 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrapPosition`` 
    
    :returns:  Indicates the position method to create scraps  
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilderScrapDefPosition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrapPosition`` 
    
    :param scrapPosition: 
    :type scrapPosition: :py:class:`NXOpen.Tooling.ScrapDesignBuilderScrapDefPosition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrapTol: float = ...
    """
    Returns or sets  the scrap tolerance, when fail to create scrap in some cases, this value can be decreased to try again 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrapTol`` 
    
    :returns:  Indicates the tolerance to create scraps  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrapTol`` 
    
    :param scrapTol: 
    :type scrapTol: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    ScrapTypeEnum: ScrapDesignBuilderBody = ...
    """
    Returns or sets  the scrap type enum 
    
    <hr>
    
    Getter Method
    
    Signature ``ScrapTypeEnum`` 
    
    :returns:  Indicates the operating method of scraps  
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilderBody` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScrapTypeEnum`` 
    
    :param scrapTypeEnum: 
    :type scrapTypeEnum: :py:class:`NXOpen.Tooling.ScrapDesignBuilderBody` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    SecondScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the second scrap to merge with the first one 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondScrap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SplitCurve: NXOpen.Section = ...
    """
    Returns  the splitting curve 
    
    <hr>
    
    Getter Method
    
    Signature ``SplitCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SplitScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the scrap to be splitted or merged 
    
    <hr>
    
    Getter Method
    
    Signature ``SplitScrap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TrimNum: ScrapDesignBuilderTrimNumType = ...
    """
    Returns or sets  the trimming number 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimNum`` 
    
    :returns:  Indicates the steps of trimming process  
    :rtype: :py:class:`NXOpen.Tooling.ScrapDesignBuilderTrimNumType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimNum`` 
    
    :param trimNum: 
    :type trimNum: :py:class:`NXOpen.Tooling.ScrapDesignBuilderTrimNumType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    TrimmingColor: NXOpen.NXColor = ...
    """
    Returns or sets  the trimming color 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingColor`` 
    
    :returns:  Indicates the color of trimming scraps  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimmingColor`` 
    
    :param trimmingColor: 
    :type trimmingColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING")
    """
    UserAddonCurve: NXOpen.Section = ...
    """
    Returns  the user defined add-on curve to create overlap+overcut 
    
    <hr>
    
    Getter Method
    
    Signature ``UserAddonCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ScrapDesignBuilder = ...  # unknown typename


class SubInsertCollection(NXOpen.TaggedObjectCollection):
    """
    Creates SubInsert builder collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSubInsertBuilder(self) -> SubInsertBuilder:
        """
        Creates subinsert builder  
        
        Signature ``CreateSubInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SubInsertBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class ReliefDesignCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.ReliefDesignBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateReliefDesignBuilder(self) -> ReliefDesignBuilder:
        """
        Creates Relief Design  builder.  
        
        Signature ``CreateReliefDesignBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ReliefDesignBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class UnusedFileManagementCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.UnusedFileManagementCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateUnusedFileManagementBuilder(self) -> UnusedFileManagementBuilder:
        """
        Creates Unused File Management  builder.  
        
        Signature ``CreateUnusedFileManagementBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.UnusedFileManagementBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    


class EjectorTableData(NXOpen.TransientObject):
    """
    Represents the ejector table data in Ejector Table Builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.EjectorTableBuilder.NewEjectorTableData`
    
    .. versionadded:: NX9.0.0
    """
    
    def Dispose(self) -> None:
        """
        Dispose the ejector table data.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CollectEjectors(self, parent: NXOpen.NXObject) -> None:
        """
        Collects ejectors into ejector table data.  
        
        Signature ``CollectEjectors(parent)`` 
        
        :param parent:  parent part  
        :type parent: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    


class LayoutRepositionBuilderMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LayoutRepositionBuilderMethod():
    """
    Represents the type of layout transform. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rotate", "Rotate method"
       "Transform", "Transform method"
       "PointToPoint", "Point to Point method"
    """
    Rotate = 0  # LayoutRepositionBuilderMethodMemberType
    Transform = 1  # LayoutRepositionBuilderMethodMemberType
    PointToPoint = 2  # LayoutRepositionBuilderMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LayoutRepositionBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LayoutRepositionBuilderType():
    """
    Represents the method of layout transform. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Move", "Move type"
       "Copy", "Copy type"
    """
    Move = 0  # LayoutRepositionBuilderTypeMemberType
    Copy = 1  # LayoutRepositionBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LayoutRepositionBuilder(NXOpen.Builder):
    """
    Represents a Tooling::LayoutRepositionBuilder builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWLayoutCollection.CreateLayoutRepositionBuilder`
    
    Default values.
    
    ==================  ======================================
    Property            Value
    ==================  ======================================
    DimX.Value          0 (millimeters part), 0 (inches part) 
    ------------------  --------------------------------------
    DimY.Value          0 (millimeters part), 0 (inches part) 
    ------------------  --------------------------------------
    RepositionType      Move 
    ------------------  --------------------------------------
    RotateAngle.Value   180 
    ==================  ======================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Method():
        """
        Represents the type of layout transform. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rotate", "Rotate method"
           "Transform", "Transform method"
           "PointToPoint", "Point to Point method"
        """
        Rotate = 0  # LayoutRepositionBuilderMethodMemberType
        Transform = 1  # LayoutRepositionBuilderMethodMemberType
        PointToPoint = 2  # LayoutRepositionBuilderMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Type():
        """
        Represents the method of layout transform. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Move", "Move type"
           "Copy", "Copy type"
        """
        Move = 0  # LayoutRepositionBuilderTypeMemberType
        Copy = 1  # LayoutRepositionBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DimX: NXOpen.Expression = ...
    """
    Returns  the distance dimension in X-axis 
    
    <hr>
    
    Getter Method
    
    Signature ``DimX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DimY: NXOpen.Expression = ...
    """
    Returns  the distance dimension in Y-axis 
    
    <hr>
    
    Getter Method
    
    Signature ``DimY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PointFrom: NXOpen.Point = ...
    """
    Returns or sets  the transform start point 
    
    <hr>
    
    Getter Method
    
    Signature ``PointFrom`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointFrom`` 
    
    :param pointFrom: 
    :type pointFrom: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PointTo: NXOpen.Point = ...
    """
    Returns or sets  the transform end point 
    
    <hr>
    
    Getter Method
    
    Signature ``PointTo`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointTo`` 
    
    :param pointTo: 
    :type pointTo: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RepositionMethod: LayoutRepositionBuilderMethod = ...
    """
    Returns or sets  the reposition method 
    
    <hr>
    
    Getter Method
    
    Signature ``RepositionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LayoutRepositionBuilderMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RepositionMethod`` 
    
    :param enumRepositionmethod: 
    :type enumRepositionmethod: :py:class:`NXOpen.Tooling.LayoutRepositionBuilderMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RepositionType: LayoutRepositionBuilderType = ...
    """
    Returns or sets  the reposition type 
    
    <hr>
    
    Getter Method
    
    Signature ``RepositionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LayoutRepositionBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RepositionType`` 
    
    :param enumRepositiontype: 
    :type enumRepositiontype: :py:class:`NXOpen.Tooling.LayoutRepositionBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RotateAngle: NXOpen.Expression = ...
    """
    Returns  the rotate angle 
    
    <hr>
    
    Getter Method
    
    Signature ``RotateAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RotatePoint: NXOpen.Point = ...
    """
    Returns or sets  the rotate point 
    
    <hr>
    
    Getter Method
    
    Signature ``RotatePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotatePoint`` 
    
    :param rotatePoint: 
    :type rotatePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectInstance: NXOpen.SelectBodyList = ...
    """
    Returns  the select instance 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectInstance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: LayoutRepositionBuilder = ...  # unknown typename


class AssemblyDrawingBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssemblyDrawingBuilderTypes():
    """
    Specifies the filter of assembly.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Visibility", " - "
       "Drawing", " - "
       "View", " - "
    """
    Visibility = 0  # AssemblyDrawingBuilderTypesMemberType
    Drawing = 1  # AssemblyDrawingBuilderTypesMemberType
    View = 2  # AssemblyDrawingBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssemblyDrawingBuilderDrawingTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssemblyDrawingBuilderDrawingTypes():
    """
    Specifies the drawing type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MasterModel", " - "
       "SelfContained", " - "
    """
    MasterModel = 0  # AssemblyDrawingBuilderDrawingTypesMemberType
    SelfContained = 1  # AssemblyDrawingBuilderDrawingTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssemblyDrawingBuilderDrawingCreateOrEditMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssemblyDrawingBuilderDrawingCreateOrEdit():
    """
    Specifies the sheet operation.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CreateNew", " - "
       "Sh1", " - "
    """
    CreateNew = 0  # AssemblyDrawingBuilderDrawingCreateOrEditMemberType
    Sh1 = 1  # AssemblyDrawingBuilderDrawingCreateOrEditMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssemblyDrawingBuilderAttributeNamesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssemblyDrawingBuilderAttributeNames():
    """
    Specifies the attribute name
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MwSide", " - "
       "MwComponentName", " - "
    """
    MwSide = 0  # AssemblyDrawingBuilderAttributeNamesMemberType
    MwComponentName = 1  # AssemblyDrawingBuilderAttributeNamesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssemblyDrawingBuilderAttributeValuesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssemblyDrawingBuilderAttributeValues():
    """
    Specifies the attribute value.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "A", " - "
       "B", " - "
       "Hide", " - "
    """
    A = 0  # AssemblyDrawingBuilderAttributeValuesMemberType
    B = 1  # AssemblyDrawingBuilderAttributeValuesMemberType
    Hide = 2  # AssemblyDrawingBuilderAttributeValuesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssemblyDrawingBuilderViewOptionValueMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssemblyDrawingBuilderViewOptionValue():
    """
    Specifies the view options.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DefaultView", " - "
       "BaseViewTool", " - "
    """
    DefaultView = 0  # AssemblyDrawingBuilderViewOptionValueMemberType
    BaseViewTool = 1  # AssemblyDrawingBuilderViewOptionValueMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssemblyDrawingBuilderModelViewToUseValueMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssemblyDrawingBuilderModelViewToUseValue():
    """
    Specifies the model view to use.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", " - "
       "Front", " - "
       "Right", " - "
       "Back", " - "
       "Bottom", " - "
       "Left", " - "
       "Isometric", " - "
       "Trimetric", " - "
    """
    Top = 0  # AssemblyDrawingBuilderModelViewToUseValueMemberType
    Front = 1  # AssemblyDrawingBuilderModelViewToUseValueMemberType
    Right = 2  # AssemblyDrawingBuilderModelViewToUseValueMemberType
    Back = 3  # AssemblyDrawingBuilderModelViewToUseValueMemberType
    Bottom = 4  # AssemblyDrawingBuilderModelViewToUseValueMemberType
    Left = 5  # AssemblyDrawingBuilderModelViewToUseValueMemberType
    Isometric = 6  # AssemblyDrawingBuilderModelViewToUseValueMemberType
    Trimetric = 7  # AssemblyDrawingBuilderModelViewToUseValueMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssemblyDrawingBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.AssemblyDrawingBuilder` which is 
    used to create or edit the Assembly Drawing.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ToolingDrawingCollection.CreateAssemblyDrawingBuilder`
    
    Default values.
    
    ===================================  ============
    Property                             Value
    ===================================  ============
    DoubleViewScale                      1 
    -----------------------------------  ------------
    EnumAttributeName                    MwSide 
    -----------------------------------  ------------
    EnumAttributeValue                   A 
    -----------------------------------  ------------
    EnumDrawingType                      MasterModel 
    -----------------------------------  ------------
    EnumSheets                           CreateNew 
    -----------------------------------  ------------
    ModelViewToUse                       Top 
    -----------------------------------  ------------
    TgShowA                              0 
    -----------------------------------  ------------
    TgShowB                              0 
    -----------------------------------  ------------
    ToggleBlankComponentsWithAttribute   0 
    -----------------------------------  ------------
    ToggleListDependents                 0 
    -----------------------------------  ------------
    ToggleShowOnly                       0 
    -----------------------------------  ------------
    ViewOption                           DefaultView 
    ===================================  ============
    
    .. versionadded:: NX8.5.0
    """
    
    class Types():
        """
        Specifies the filter of assembly.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Visibility", " - "
           "Drawing", " - "
           "View", " - "
        """
        Visibility = 0  # AssemblyDrawingBuilderTypesMemberType
        Drawing = 1  # AssemblyDrawingBuilderTypesMemberType
        View = 2  # AssemblyDrawingBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DrawingTypes():
        """
        Specifies the drawing type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MasterModel", " - "
           "SelfContained", " - "
        """
        MasterModel = 0  # AssemblyDrawingBuilderDrawingTypesMemberType
        SelfContained = 1  # AssemblyDrawingBuilderDrawingTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DrawingCreateOrEdit():
        """
        Specifies the sheet operation.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CreateNew", " - "
           "Sh1", " - "
        """
        CreateNew = 0  # AssemblyDrawingBuilderDrawingCreateOrEditMemberType
        Sh1 = 1  # AssemblyDrawingBuilderDrawingCreateOrEditMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AttributeNames():
        """
        Specifies the attribute name
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MwSide", " - "
           "MwComponentName", " - "
        """
        MwSide = 0  # AssemblyDrawingBuilderAttributeNamesMemberType
        MwComponentName = 1  # AssemblyDrawingBuilderAttributeNamesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AttributeValues():
        """
        Specifies the attribute value.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "A", " - "
           "B", " - "
           "Hide", " - "
        """
        A = 0  # AssemblyDrawingBuilderAttributeValuesMemberType
        B = 1  # AssemblyDrawingBuilderAttributeValuesMemberType
        Hide = 2  # AssemblyDrawingBuilderAttributeValuesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewOptionValue():
        """
        Specifies the view options.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DefaultView", " - "
           "BaseViewTool", " - "
        """
        DefaultView = 0  # AssemblyDrawingBuilderViewOptionValueMemberType
        BaseViewTool = 1  # AssemblyDrawingBuilderViewOptionValueMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ModelViewToUseValue():
        """
        Specifies the model view to use.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", " - "
           "Front", " - "
           "Right", " - "
           "Back", " - "
           "Bottom", " - "
           "Left", " - "
           "Isometric", " - "
           "Trimetric", " - "
        """
        Top = 0  # AssemblyDrawingBuilderModelViewToUseValueMemberType
        Front = 1  # AssemblyDrawingBuilderModelViewToUseValueMemberType
        Right = 2  # AssemblyDrawingBuilderModelViewToUseValueMemberType
        Back = 3  # AssemblyDrawingBuilderModelViewToUseValueMemberType
        Bottom = 4  # AssemblyDrawingBuilderModelViewToUseValueMemberType
        Left = 5  # AssemblyDrawingBuilderModelViewToUseValueMemberType
        Isometric = 6  # AssemblyDrawingBuilderModelViewToUseValueMemberType
        Trimetric = 7  # AssemblyDrawingBuilderModelViewToUseValueMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def NewMasterModelFile(self, masterModelFileName: str) -> None:
        """
        Create a new master model file 
        
        Signature ``NewMasterModelFile(masterModelFileName)`` 
        
        :param masterModelFileName: 
        :type masterModelFileName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def OpenMasterModelFile(self, masterModelFileName: str) -> None:
        """
        Open the master model file 
        
        Signature ``OpenMasterModelFile(masterModelFileName)`` 
        
        :param masterModelFileName: 
        :type masterModelFileName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteSheet(self, selectedSheetName: str) -> None:
        """
        Delete the sheet 
        
        Signature ``DeleteSheet(selectedSheetName)`` 
        
        :param selectedSheetName: 
        :type selectedSheetName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AddSectionView(self) -> None:
        """
        The option for add section view 
        
        Signature ``AddSectionView()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AddView(self, viewTag: NXOpen.NXObject, attrName: str, componentType: 'list[str]') -> None:
        """
        The option for add view 
        
        Signature ``AddView(viewTag, attrName, componentType)`` 
        
        :param viewTag: 
        :type viewTag: :py:class:`NXOpen.NXObject` 
        :param attrName: 
        :type attrName: str 
        :param componentType: 
        :type componentType: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def RetrieveSheet(self, selectedSheetName: str) -> None:
        """
        Retrieve the sheet 
        
        Signature ``RetrieveSheet(selectedSheetName)`` 
        
        :param selectedSheetName: 
        :type selectedSheetName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateDrawing(self, sheetName: str, templateName: str) -> None:
        """
        Create drawing 
        
        Signature ``CreateDrawing(sheetName, templateName)`` 
        
        :param sheetName: 
        :type sheetName: str 
        :param templateName: 
        :type templateName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def EditDrawing(self, sheetName: str, templateName: str) -> None:
        """
        Edit drawing 
        
        Signature ``EditDrawing(sheetName, templateName)`` 
        
        :param sheetName: 
        :type sheetName: str 
        :param templateName: 
        :type templateName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AssignAttr(self, selectdObjs: 'list[NXOpen.NXObject]', attrName: str, attrValue: str) -> None:
        """
        Assign attribute 
        
        Signature ``AssignAttr(selectdObjs, attrName, attrValue)`` 
        
        :param selectdObjs: 
        :type selectdObjs: list of :py:class:`NXOpen.NXObject` 
        :param attrName: 
        :type attrName: str 
        :param attrValue: 
        :type attrValue: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateView(self, viewName: str, viewScale: float) -> None:
        """
        Create view 
        
        Signature ``CreateView(viewName, viewScale)`` 
        
        :param viewName: 
        :type viewName: str 
        :param viewScale: 
        :type viewScale: float 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteView(self, viewName: str) -> None:
        """
        Delete view 
        
        Signature ``DeleteView(viewName)`` 
        
        :param viewName: 
        :type viewName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateSectionView(self, viewName: str, parentView: NXOpen.NXObject, stepDirection: 'list[float]', arrowdirection: 'list[float]', pointX: 'list[float]', pointY: 'list[float]', pointZ: 'list[float]', segmentType: 'list[int]', attrName: str, attrValueList: 'list[str]') -> None:
        """
        Create section view 
        
        Signature ``CreateSectionView(viewName, parentView, stepDirection, arrowdirection, pointX, pointY, pointZ, segmentType, attrName, attrValueList)`` 
        
        :param viewName: 
        :type viewName: str 
        :param parentView: 
        :type parentView: :py:class:`NXOpen.NXObject` 
        :param stepDirection: 
        :type stepDirection: list of float 
        :param arrowdirection: 
        :type arrowdirection: list of float 
        :param pointX: 
        :type pointX: list of float 
        :param pointY: 
        :type pointY: list of float 
        :param pointZ: 
        :type pointZ: list of float 
        :param segmentType: 
        :type segmentType: list of int 
        :param attrName: 
        :type attrName: str 
        :param attrValueList: 
        :type attrValueList: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateViewToShowComponents(self, viewName: str) -> NXOpen.NXObject:
        """
        Create view to show components  
        
        Signature ``CreateViewToShowComponents(viewName)`` 
        
        :param viewName: 
        :type viewName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    DeleteButtonClicked: bool = ...
    """
    Returns or sets  the delete button clicked attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``DeleteButtonClicked`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeleteButtonClicked`` 
    
    :param deleteButtonClicked: 
    :type deleteButtonClicked: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DoubleViewScale: float = ...
    """
    Returns or sets  a double view scale 
    
    <hr>
    
    Getter Method
    
    Signature ``DoubleViewScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DoubleViewScale`` 
    
    :param doubleViewScale: 
    :type doubleViewScale: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EnumAttributeName: AssemblyDrawingBuilderAttributeNames = ...
    """
    Returns or sets  the option for select the attribute name 
    
    <hr>
    
    Getter Method
    
    Signature ``EnumAttributeName`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderAttributeNames` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnumAttributeName`` 
    
    :param enumAttributeName: 
    :type enumAttributeName: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderAttributeNames` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EnumAttributeValue: AssemblyDrawingBuilderAttributeValues = ...
    """
    Returns or sets  the option for select the attribute value 
    
    <hr>
    
    Getter Method
    
    Signature ``EnumAttributeValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderAttributeValues` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnumAttributeValue`` 
    
    :param enumAttributeValue: 
    :type enumAttributeValue: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderAttributeValues` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EnumDrawingType: AssemblyDrawingBuilderDrawingTypes = ...
    """
    Returns or sets  the option for the assembly drawing operation 
    
    <hr>
    
    Getter Method
    
    Signature ``EnumDrawingType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderDrawingTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnumDrawingType`` 
    
    :param enumDrawingType: 
    :type enumDrawingType: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderDrawingTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EnumSheets: AssemblyDrawingBuilderDrawingCreateOrEdit = ...
    """
    Returns or sets  the option for select the sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``EnumSheets`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderDrawingCreateOrEdit` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnumSheets`` 
    
    :param enumSheets: 
    :type enumSheets: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderDrawingCreateOrEdit` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ModelViewToUse: AssemblyDrawingBuilderModelViewToUseValue = ...
    """
    Returns or sets  the option for model view to use 
    
    <hr>
    
    Getter Method
    
    Signature ``ModelViewToUse`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderModelViewToUseValue` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModelViewToUse`` 
    
    :param modelViewToUseValue: 
    :type modelViewToUseValue: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderModelViewToUseValue` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ScaleModified: bool = ...
    """
    Returns or sets  the scale modified attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleModified`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleModified`` 
    
    :param scaleModified: 
    :type scaleModified: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SectionViewButtonClicked: bool = ...
    """
    Returns or sets  the section view button clicked attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionViewButtonClicked`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionViewButtonClicked`` 
    
    :param sectionViewButtonClicked: 
    :type sectionViewButtonClicked: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StringFilterRule: str = ...
    """
    Returns or sets  the Filter rule 
    
    <hr>
    
    Getter Method
    
    Signature ``StringFilterRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringFilterRule`` 
    
    :param stringFilterRule: 
    :type stringFilterRule: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StringNameRule: str = ...
    """
    Returns or sets  the string name rule 
    
    <hr>
    
    Getter Method
    
    Signature ``StringNameRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringNameRule`` 
    
    :param stringNameRule: 
    :type stringNameRule: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StringSheetName: str = ...
    """
    Returns or sets  the sheet name 
    
    <hr>
    
    Getter Method
    
    Signature ``StringSheetName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringSheetName`` 
    
    :param stringSheetName: 
    :type stringSheetName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TgShowA: bool = ...
    """
    Returns or sets  the A attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``TgShowA`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TgShowA`` 
    
    :param tgShowA: 
    :type tgShowA: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TgShowB: bool = ...
    """
    Returns or sets  the B attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``TgShowB`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TgShowB`` 
    
    :param tgShowB: 
    :type tgShowB: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToggleBlankComponentsWithAttribute: bool = ...
    """
    Returns or sets  the blank components with attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleBlankComponentsWithAttribute`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleBlankComponentsWithAttribute`` 
    
    :param toggleBlankComponentsWithAttribute: 
    :type toggleBlankComponentsWithAttribute: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToggleListDependents: bool = ...
    """
    Returns or sets  the List dependents 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleListDependents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleListDependents`` 
    
    :param toggleListDependents: 
    :type toggleListDependents: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToggleShowOnly: bool = ...
    """
    Returns or sets  the only show components with attribute toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleShowOnly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleShowOnly`` 
    
    :param showOnly: 
    :type showOnly: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: AssemblyDrawingBuilderTypes = ...
    """
    Returns or sets  the option for the Assembly drawing operation
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ViewLocation: NXOpen.Point = ...
    """
    Returns or sets  the view location 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewLocation`` 
    
    :param viewLocation: 
    :type viewLocation: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ViewOption: AssemblyDrawingBuilderViewOptionValue = ...
    """
    Returns or sets  the option for view tools 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderViewOptionValue` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewOption`` 
    
    :param viewOptionValue: 
    :type viewOptionValue: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilderViewOptionValue` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: AssemblyDrawingBuilder = ...  # unknown typename


class MWTraversePartingLinesBuilder(NXOpen.Builder):
    """
    Builder for creating parting lines by traversing in the Mold Wizard application   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWTraversePartingLinesCollection.CreateBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def AssignTraverseLoopBuilder(self, traverseLoopBuilder: TraverseLoopBuilder) -> None:
        """
        Assign the traverse loop builder 
        
        Signature ``AssignTraverseLoopBuilder(traverseLoopBuilder)`` 
        
        :param traverseLoopBuilder:  Traverse loop builder  
        :type traverseLoopBuilder: :py:class:`NXOpen.Tooling.TraverseLoopBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    Null: MWTraversePartingLinesBuilder = ...  # unknown typename


class BendInsertDesignBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendInsertDesignBuilderTypes():
    """
    the bending operation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Standard", "standard insert"
       "UserDefined", "user defined"
       "Delete", "delete"
    """
    Standard = 0  # BendInsertDesignBuilderTypesMemberType
    UserDefined = 1  # BendInsertDesignBuilderTypesMemberType
    Delete = 2  # BendInsertDesignBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendInsertDesignBuilderBendingDirectionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendInsertDesignBuilderBendingDirectionOption():
    """
    the bending direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Up", "bending up"
       "Down", "bending down"
    """
    Up = 0  # BendInsertDesignBuilderBendingDirectionOptionMemberType
    Down = 1  # BendInsertDesignBuilderBendingDirectionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendInsertDesignBuilderBendTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendInsertDesignBuilderBendTypeOption():
    """
    the bend type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sbend", "90 degree bend"
       "Abend", "angle bend"
       "Zbend", "z bend"
       "Vbend", "v bend"
       "Uzbend", "universal z bend"
    """
    Sbend = 0  # BendInsertDesignBuilderBendTypeOptionMemberType
    Abend = 1  # BendInsertDesignBuilderBendTypeOptionMemberType
    Zbend = 2  # BendInsertDesignBuilderBendTypeOptionMemberType
    Vbend = 3  # BendInsertDesignBuilderBendTypeOptionMemberType
    Uzbend = 4  # BendInsertDesignBuilderBendTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendInsertDesignBuilderInsertTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendInsertDesignBuilderInsertTypeOption():
    """
    the insert type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Punch", "punch insert"
       "Die", "die insert"
    """
    Punch = 0  # BendInsertDesignBuilderInsertTypeOptionMemberType
    Die = 1  # BendInsertDesignBuilderInsertTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendInsertDesignBuilderParentOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendInsertDesignBuilderParentOption():
    """
    the parent node. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sub", "sub parent"
    """
    Sub = 0  # BendInsertDesignBuilderParentOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendInsertDesignBuilderBlankPositionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendInsertDesignBuilderBlankPositions():
    """
    Specifies the blank position. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PunchPlate", "the blank is on the punch plate"
       "StripperPlate", "the blank is on the stripper plate"
    """
    PunchPlate = 0  # BendInsertDesignBuilderBlankPositionsMemberType
    StripperPlate = 1  # BendInsertDesignBuilderBlankPositionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendInsertDesignBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.BendInsertDesignBuilder`
    Bend Insert Design is to create inset puch or die for bend .  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.BendInsertDesignCollection.CreateBendInsertDesignBuilder`
    
    Default values.
    
    ==========================  ======================================
    Property                    Value
    ==========================  ======================================
    BendType                    Sbend 
    --------------------------  --------------------------------------
    BendingDirection            Down 
    --------------------------  --------------------------------------
    BlankPosition               PunchPlate 
    --------------------------  --------------------------------------
    BottomPlateClearance        0 
    --------------------------  --------------------------------------
    CompositeInsert             0 
    --------------------------  --------------------------------------
    ConceptDesign               0 
    --------------------------  --------------------------------------
    DiePlateClearance           0 
    --------------------------  --------------------------------------
    Extend.Value                5 (millimeters part), 1 (inches part) 
    --------------------------  --------------------------------------
    ExtrudeEnd.Value            5 (millimeters part), 1 (inches part) 
    --------------------------  --------------------------------------
    ExtrudeStart.Value          0 (millimeters part), 0 (inches part) 
    --------------------------  --------------------------------------
    FalseBody                   0 
    --------------------------  --------------------------------------
    InsertType                  Punch 
    --------------------------  --------------------------------------
    ParentNode                  Sub 
    --------------------------  --------------------------------------
    PunchPlateClearance         0 
    --------------------------  --------------------------------------
    ReName                      0 
    --------------------------  --------------------------------------
    StripperPlateClearance      0 
    --------------------------  --------------------------------------
    Type                        Standard 
    --------------------------  --------------------------------------
    UseBottomPlateClearance     0 
    --------------------------  --------------------------------------
    UseDiePlateClearance        0 
    --------------------------  --------------------------------------
    UsePunchPlateClearance      0 
    --------------------------  --------------------------------------
    UseStripperPlateClearance   0 
    ==========================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        the bending operation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Standard", "standard insert"
           "UserDefined", "user defined"
           "Delete", "delete"
        """
        Standard = 0  # BendInsertDesignBuilderTypesMemberType
        UserDefined = 1  # BendInsertDesignBuilderTypesMemberType
        Delete = 2  # BendInsertDesignBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BendingDirectionOption():
        """
        the bending direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Up", "bending up"
           "Down", "bending down"
        """
        Up = 0  # BendInsertDesignBuilderBendingDirectionOptionMemberType
        Down = 1  # BendInsertDesignBuilderBendingDirectionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BendTypeOption():
        """
        the bend type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sbend", "90 degree bend"
           "Abend", "angle bend"
           "Zbend", "z bend"
           "Vbend", "v bend"
           "Uzbend", "universal z bend"
        """
        Sbend = 0  # BendInsertDesignBuilderBendTypeOptionMemberType
        Abend = 1  # BendInsertDesignBuilderBendTypeOptionMemberType
        Zbend = 2  # BendInsertDesignBuilderBendTypeOptionMemberType
        Vbend = 3  # BendInsertDesignBuilderBendTypeOptionMemberType
        Uzbend = 4  # BendInsertDesignBuilderBendTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InsertTypeOption():
        """
        the insert type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Punch", "punch insert"
           "Die", "die insert"
        """
        Punch = 0  # BendInsertDesignBuilderInsertTypeOptionMemberType
        Die = 1  # BendInsertDesignBuilderInsertTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParentOption():
        """
        the parent node. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sub", "sub parent"
        """
        Sub = 0  # BendInsertDesignBuilderParentOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BlankPositions():
        """
        Specifies the blank position. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PunchPlate", "the blank is on the punch plate"
           "StripperPlate", "the blank is on the stripper plate"
        """
        PunchPlate = 0  # BendInsertDesignBuilderBlankPositionsMemberType
        StripperPlate = 1  # BendInsertDesignBuilderBlankPositionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetFaces(self, faceOccs: 'list[NXOpen.Face]') -> None:
        """
        Sets the face occurrences into builder attribute.  
        
        Signature ``SetFaces(faceOccs)`` 
        
        :param faceOccs:  array of face occurrences  
        :type faceOccs: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AddInsertComponent(self) -> None:
        """
        Add the new bend insert component 
        
        Signature ``AddInsertComponent()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    BendFace: NXOpen.ScCollector = ...
    """
    Returns  the bend face.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BendType: BendInsertDesignBuilderBendTypeOption = ...
    """
    Returns or sets  the bend type.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderBendTypeOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendType`` 
    
    :param bendType: 
    :type bendType: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderBendTypeOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendingDirection: BendInsertDesignBuilderBendingDirectionOption = ...
    """
    Returns or sets  the bending direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendingDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderBendingDirectionOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendingDirection`` 
    
    :param bendingDirection: 
    :type bendingDirection: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderBendingDirectionOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BlankPosition: BendInsertDesignBuilderBlankPositions = ...
    """
    Returns or sets  the blank position in punch plate or stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderBlankPositions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankPosition`` 
    
    :param blankPosition: 
    :type blankPosition: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderBlankPositions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BottomPlateClearance: float = ...
    """
    Returns or sets  the clearance value of bottom backing plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomPlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BottomPlateClearance`` 
    
    :param bottomPlateClr: 
    :type bottomPlateClr: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    CompositeInsert: bool = ...
    """
    Returns or sets  the composite insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``CompositeInsert`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompositeInsert`` 
    
    :param compositeInsert: 
    :type compositeInsert: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ConceptDesign: bool = ...
    """
    Returns or sets  the concept design option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConceptDesign`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConceptDesign`` 
    
    :param conceptDesign: 
    :type conceptDesign: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DiePlateClearance: float = ...
    """
    Returns or sets  the clearance value of die plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``DiePlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiePlateClearance`` 
    
    :param diePlateClr: 
    :type diePlateClr: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Extend: NXOpen.Expression = ...
    """
    Returns  the extend.  
    
    <hr>
    
    Getter Method
    
    Signature ``Extend`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ExtrudeEnd: NXOpen.Expression = ...
    """
    Returns  the extrude end, A half when composite insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ExtrudeEnd1: NXOpen.Expression = ...
    """
    Returns  the extrude end B -half.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeEnd1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ExtrudeSketch: NXOpen.Section = ...
    """
    Returns  the extrude sketch.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ExtrudeStart: NXOpen.Expression = ...
    """
    Returns  the extrude start, A half when composite insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ExtrudeStart1: NXOpen.Expression = ...
    """
    Returns  the extrude start - B half.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeStart1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FalseBody: bool = ...
    """
    Returns or sets  the false body creation option.  
    
    <hr>
    
    Getter Method
    
    Signature ``FalseBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FalseBody`` 
    
    :param falseBody: 
    :type falseBody: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    FlipTrimDirection: bool = ...
    """
    Returns or sets  the flip trim feature direction of insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlipTrimDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlipTrimDirection`` 
    
    :param flipTrimDirection: 
    :type flipTrimDirection: bool 
    
    .. versionadded:: NX9.0.1
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    InsertComponent: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the select insert to delete 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InsertToEdit: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the select insert to edit 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertToEdit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InsertType: BendInsertDesignBuilderInsertTypeOption = ...
    """
    Returns or sets  the insert type.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsertType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderInsertTypeOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsertType`` 
    
    :param insertType: 
    :type insertType: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderInsertTypeOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IntersectPlane: NXOpen.Plane = ...
    """
    Returns or sets  the intersect plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``IntersectPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntersectPlane`` 
    
    :param intersectPlane: 
    :type intersectPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IsAutoDatum: bool = ...
    """
    Returns or sets  the auto datum plane 
    
    <hr>
    
    Getter Method
    
    Signature ``IsAutoDatum`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsAutoDatum`` 
    
    :param isInner: 
    :type isInner: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NewPartName: str = ...
    """
    Returns or sets  the new component name.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewPartName`` 
    
    :returns:  Retruns the new component name  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewPartName`` 
    
    :param newPartNames:  Specifies the new component name  
    :type newPartNames: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ParentNode: BendInsertDesignBuilderParentOption = ...
    """
    Returns or sets  the parent node.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentNode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderParentOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentNode`` 
    
    :param parentNode: 
    :type parentNode: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderParentOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name to create insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns:  Retruns parent part name  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPart:  Specifies the parent part name  
    :type parentPart: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPlateClearance: float = ...
    """
    Returns or sets  the clearance value of punch plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPlateClearance`` 
    
    :param punchPlateClr: 
    :type punchPlateClr: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReName: bool = ...
    """
    Returns or sets  the rename option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReName`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReName`` 
    
    :param reName: 
    :type reName: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StripperPlateClearance: float = ...
    """
    Returns or sets  the clearance value of  stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``StripperPlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StripperPlateClearance`` 
    
    :param stripperPlateClr: 
    :type stripperPlateClr: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: BendInsertDesignBuilderTypes = ...
    """
    Returns or sets  the operation type of bending insert design.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.BendInsertDesignBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UseBottomPlateClearance: bool = ...
    """
    Returns or sets  the option to use bottom backing plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseBottomPlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseBottomPlateClearance`` 
    
    :param useBPClearance: 
    :type useBPClearance: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UseDiePlateClearance: bool = ...
    """
    Returns or sets  the option to use die plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseDiePlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseDiePlateClearance`` 
    
    :param useDPClearance: 
    :type useDPClearance: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePunchPlateClearance: bool = ...
    """
    Returns or sets  the option to use punch plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePunchPlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePunchPlateClearance`` 
    
    :param usePPClearance: 
    :type usePPClearance: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UseStripperPlateClearance: bool = ...
    """
    Returns or sets  the option to use stripper plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseStripperPlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseStripperPlateClearance`` 
    
    :param useSPClearance: 
    :type useSPClearance: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: BendInsertDesignBuilder = ...  # unknown typename


class MoldCsysBuilderWcspositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MoldCsysBuilderWcsposition():
    """
    Represents the method to computer the WCS positino
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CurrentWcs", "current wcs position"
       "ProductBodyCenter", "product body center position"
       "BoundaryFaceCenter", "boundary face center position"
    """
    CurrentWcs = 0  # MoldCsysBuilderWcspositionMemberType
    ProductBodyCenter = 1  # MoldCsysBuilderWcspositionMemberType
    BoundaryFaceCenter = 2  # MoldCsysBuilderWcspositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MoldCsysBuilder(NXOpen.Builder):
    """
    Mold Wizard MoldCsys project builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldCsysCollection.CreateMoldCsysBuilder`
    
    Default values.
    
    ========  ===========
    Property  Value
    ========  ===========
    Lockx     0 
    --------  -----------
    Locky     0 
    --------  -----------
    Lockz     1 
    --------  -----------
    Wcstype   CurrentWcs 
    ========  ===========
    
    .. versionadded:: NX6.0.0
    """
    
    class Wcsposition():
        """
        Represents the method to computer the WCS positino
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CurrentWcs", "current wcs position"
           "ProductBodyCenter", "product body center position"
           "BoundaryFaceCenter", "boundary face center position"
        """
        CurrentWcs = 0  # MoldCsysBuilderWcspositionMemberType
        ProductBodyCenter = 1  # MoldCsysBuilderWcspositionMemberType
        BoundaryFaceCenter = 2  # MoldCsysBuilderWcspositionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Lockx: bool = ...
    """
    Returns or sets  the product doesn't move along X to the new position of WCS if lockx is true 
    
    <hr>
    
    Getter Method
    
    Signature ``Lockx`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Lockx`` 
    
    :param lockx: 
    :type lockx: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Locky: bool = ...
    """
    Returns or sets  the product doesn't move along Y to the new position of WCS if locky is true 
    
    <hr>
    
    Getter Method
    
    Signature ``Locky`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Locky`` 
    
    :param locky: 
    :type locky: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Lockz: bool = ...
    """
    Returns or sets  the product doesn't move along Z to the new position of WCS if lockz is true 
    
    <hr>
    
    Getter Method
    
    Signature ``Lockz`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Lockz`` 
    
    :param lockz: 
    :type lockz: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Prod: NXOpen.SelectFaceList = ...
    """
    Returns  the selected faces are used to create a bounding box whose center
    will be the new origin of WCS 
    
    <hr>
    
    Getter Method
    
    Signature ``Prod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Wcstype: MoldCsysBuilderWcsposition = ...
    """
    Returns or sets  the wcs type to decide the method to get csys position
    
    <hr>
    
    Getter Method
    
    Signature ``Wcstype`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MoldCsysBuilderWcsposition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Wcstype`` 
    
    :param wcstype: 
    :type wcstype: :py:class:`NXOpen.Tooling.MoldCsysBuilderWcsposition` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: MoldCsysBuilder = ...  # unknown typename


class PocketBuilderModeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PocketBuilderModeType():
    """
    Represents the pocket operation method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Subtract", "do subtract"
       "Add", "do unite"
    """
    Subtract = 0  # PocketBuilderModeTypeMemberType
    Add = 1  # PocketBuilderModeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PocketBuilderToolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PocketBuilderToolType():
    """
    Represents the select type of tool 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Part", "part"
       "Solid", "solid"
    """
    Part = 0  # PocketBuilderToolTypeMemberType
    Solid = 1  # PocketBuilderToolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PocketBuilderRsetTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PocketBuilderRsetType():
    """
    Represents the pocket refset types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", "false"
       "True", "true"
       "Both", "both"
       "AddMaterial", "add material"
       "NoChange", "no change"
    """
    FalseValue = 0  # PocketBuilderRsetTypeMemberType
    TrueValue = 1  # PocketBuilderRsetTypeMemberType
    Both = 2  # PocketBuilderRsetTypeMemberType
    AddMaterial = 3  # PocketBuilderRsetTypeMemberType
    NoChange = 4  # PocketBuilderRsetTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PocketBuilder(NXOpen.Builder):
    """
    Mold Wizard pocket management builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.PocketCollection.CreatePocketBuilder`
    
    Default values.
    
    =======================  =====
    Property                 Value
    =======================  =====
    EntireComponentPattern   0 
    -----------------------  -----
    PreviewFalseBody         0 
    =======================  =====
    
    .. versionadded:: NX6.0.0
    """
    
    class ModeType():
        """
        Represents the pocket operation method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Subtract", "do subtract"
           "Add", "do unite"
        """
        Subtract = 0  # PocketBuilderModeTypeMemberType
        Add = 1  # PocketBuilderModeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ToolType():
        """
        Represents the select type of tool 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Part", "part"
           "Solid", "solid"
        """
        Part = 0  # PocketBuilderToolTypeMemberType
        Solid = 1  # PocketBuilderToolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RsetType():
        """
        Represents the pocket refset types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", "false"
           "True", "true"
           "Both", "both"
           "AddMaterial", "add material"
           "NoChange", "no change"
        """
        FalseValue = 0  # PocketBuilderRsetTypeMemberType
        TrueValue = 1  # PocketBuilderRsetTypeMemberType
        Both = 2  # PocketBuilderRsetTypeMemberType
        AddMaterial = 3  # PocketBuilderRsetTypeMemberType
        NoChange = 4  # PocketBuilderRsetTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def FindIntersection(self) -> None:
        """
        Finds the intersected components to create pocket 
        
        Signature ``FindIntersection()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CheckStatus(self) -> None:
        """
        Checks the pocket status of standard parts 
        
        Signature ``CheckStatus()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemovePocket(self) -> None:
        """
        The function to remove pocket 
        
        Signature ``RemovePocket()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditFalseBody(self) -> None:
        """
        Edits false body 
        
        Signature ``EditFalseBody()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteFamilyToolFalse(self) -> None:
        """
        Deletes the family tool false body 
        
        Signature ``DeleteFamilyToolFalse()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    AssociationSetting: bool = ...
    """
    Returns or sets  the association setting access functions 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociationSetting`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociationSetting`` 
    
    :param associationSetting: 
    :type associationSetting: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CreateSolidSetting: bool = ...
    """
    Returns or sets  the option for creating interference solids for HD3D.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateSolidSetting`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateSolidSetting`` 
    
    :param createSolidSetting: 
    :type createSolidSetting: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EntireComponentPattern: bool = ...
    """
    Returns or sets  the option for selecting entire component pattern.  
    
    <hr>
    
    Getter Method
    
    Signature ``EntireComponentPattern`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EntireComponentPattern`` 
    
    :param entire: 
    :type entire: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design")
    """
    ModeSelection: PocketBuilderModeType = ...
    """
    Returns or sets  the mode select types 
    
    <hr>
    
    Getter Method
    
    Signature ``ModeSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PocketBuilderModeType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModeSelection`` 
    
    :param modeSelection: 
    :type modeSelection: :py:class:`NXOpen.Tooling.PocketBuilderModeType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PreviewFalseBody: bool = ...
    """
    Returns or sets  the option for previewing family part false bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``PreviewFalseBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreviewFalseBody`` 
    
    :param previewFalse: 
    :type previewFalse: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design")
    """
    ReferenceSets: PocketBuilderRsetType = ...
    """
    Returns or sets  the types of reference sets 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceSets`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PocketBuilderRsetType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceSets`` 
    
    :param referenceSets: 
    :type referenceSets: :py:class:`NXOpen.Tooling.PocketBuilderRsetType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SaveSetting: bool = ...
    """
    Returns or sets  the option for saving pocket check result in part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SaveSetting`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveSetting`` 
    
    :param saveSetting: 
    :type saveSetting: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectTarget: NXOpen.SelectBodyList = ...
    """
    Returns  the target part selection 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTarget`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectTool: NXOpen.SelectNXObjectList = ...
    """
    Returns  the tool part selection 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTool`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectTypes: PocketBuilderToolType = ...
    """
    Returns or sets  the types of tool to select 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTypes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PocketBuilderToolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectTypes`` 
    
    :param selectTypes: 
    :type selectTypes: :py:class:`NXOpen.Tooling.PocketBuilderToolType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ShowSetting: bool = ...
    """
    Returns or sets  the show or hide value access functions 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSetting`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSetting`` 
    
    :param showSetting: 
    :type showSetting: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: PocketBuilder = ...  # unknown typename


class FaceColorManagementCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.FaceColorManagementBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFaceColorManagementBuilder(self) -> FaceColorManagementBuilder:
        """
        Creates face color management builder.  
        
        Signature ``CreateFaceColorManagementBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.FaceColorManagementBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    


class InsertEditToolsBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InsertEditToolsBuilderTypes():
    """
    Specifies the insert edit tools type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Copy", "copy"
       "Delete", "delete"
    """
    Copy = 0  # InsertEditToolsBuilderTypesMemberType
    Delete = 1  # InsertEditToolsBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InsertEditToolsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.InsertEditToolsBuilder` which is 
    used to copy or delete the insert edit.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateInsertEditToolsBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class Types():
        """
        Specifies the insert edit tools type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Copy", "copy"
           "Delete", "delete"
        """
        Copy = 0  # InsertEditToolsBuilderTypesMemberType
        Delete = 1  # InsertEditToolsBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ControlPoint: NXOpen.Point = ...
    """
    Returns or sets  the control point 
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ControlPoint`` 
    
    :param controlPoint: 
    :type controlPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    CopySelectInsert: NXOpen.SelectBodyList = ...
    """
    Returns  the copy select insert 
    
    <hr>
    
    Getter Method
    
    Signature ``CopySelectInsert`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    DestinationPoint: NXOpen.Point = ...
    """
    Returns or sets  the destination point 
    
    <hr>
    
    Getter Method
    
    Signature ``DestinationPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DestinationPoint`` 
    
    :param destinationPoint: 
    :type destinationPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    InsertsToDelete: NXOpen.SelectBodyList = ...
    """
    Returns  the inserts to delete 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertsToDelete`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ShanksToDelete: NXOpen.ScCollector = ...
    """
    Returns  the shanks to delete 
    
    <hr>
    
    Getter Method
    
    Signature ``ShanksToDelete`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Type: InsertEditToolsBuilderTypes = ...
    """
    Returns or sets  the insert edit type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InsertEditToolsBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.InsertEditToolsBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: InsertEditToolsBuilder = ...  # unknown typename


class LayoutManagementCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.LayoutManagementBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLayoutManagementBuilder(self) -> LayoutManagementBuilder:
        """
        Creates Layout Management builder.  
        
        Signature ``CreateLayoutManagementBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.LayoutManagementBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class WallThicknessCheckerBuilderCalculateMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WallThicknessCheckerBuilderCalculateMethod():
    """
    The calculation method used for the wall thickness analysis. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ray", "Ray"
       "RollingBall", "Rolling ball"
       "VectorProject", "Vector project"
    """
    Ray = 0  # WallThicknessCheckerBuilderCalculateMethodMemberType
    RollingBall = 1  # WallThicknessCheckerBuilderCalculateMethodMemberType
    VectorProject = 2  # WallThicknessCheckerBuilderCalculateMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WallThicknessCheckerBuilderRangeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WallThicknessCheckerBuilderRangeType():
    """
    The range type for defining the ranges used in displaying the thickness results. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Uniform", "Uniform"
       "UserDefined", "User-defined"
    """
    Uniform = 0  # WallThicknessCheckerBuilderRangeTypeMemberType
    UserDefined = 1  # WallThicknessCheckerBuilderRangeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WallThicknessCheckerBuilderLegendControlMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WallThicknessCheckerBuilderLegendControl():
    """
    The legend control used in displaying the thickness results. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Blend", "Blend"
       "Sharp", "Sharp"
    """
    Blend = 0  # WallThicknessCheckerBuilderLegendControlMemberType
    Sharp = 1  # WallThicknessCheckerBuilderLegendControlMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WallThicknessCheckerBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to perform wall thickness analysis.  
    
    The method :py:meth:`NXOpen.Tooling.WallThicknessCheckerBuilder.Calculate` should be called before calling commit. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.WallThicknessCheckerManager.CreateBuilder`
    
    Default values.
    
    ========================================  ========
    Property                                  Value
    ========================================  ========
    CalculationCalculateMethod                Ray 
    ----------------------------------------  --------
    CalculationMaximumSpacing                 0 
    ----------------------------------------  --------
    CalculationMaximumThicknessTolerance      0 
    ----------------------------------------  --------
    CalculationProjectToFace                  0 
    ----------------------------------------  --------
    CalculationSamplePointsIntervalScale      50 
    ----------------------------------------  --------
    InspectDisplayVolumeFillers               0 
    ----------------------------------------  --------
    InspectDisplayWithExcludeColor            1 
    ----------------------------------------  --------
    InspectExcludeDistance                    1.0 
    ----------------------------------------  --------
    InspectExcludeSharpEdgeResultsDisplay     0 
    ----------------------------------------  --------
    InspectionChangeFacesColor                0 
    ----------------------------------------  --------
    InspectionDisplayFringeColorPlot          0 
    ----------------------------------------  --------
    InspectionDisplayRayVectors               0 
    ----------------------------------------  --------
    InspectionIncludeAllFaces                 0 
    ----------------------------------------  --------
    InspectionThicknessFilterRangeHighLimit   100 
    ----------------------------------------  --------
    InspectionThicknessFilterRangeLowLimit    0 
    ----------------------------------------  --------
    InspectionTranslucency                    0 
    ----------------------------------------  --------
    InspectionUseThicknessRangeSelect         0 
    ----------------------------------------  --------
    OptionsCreateBall                         0 
    ----------------------------------------  --------
    OptionsCreateThicknessText                0 
    ----------------------------------------  --------
    OptionsDisplayDynamicBall                 1 
    ----------------------------------------  --------
    OptionsDisplayMeshElements                0 
    ----------------------------------------  --------
    OptionsDisplayOppositeMeshElements        0 
    ----------------------------------------  --------
    OptionsDisplayThicknessVectors            1 
    ----------------------------------------  --------
    OptionsDynamicSnapToVertex                0 
    ----------------------------------------  --------
    OptionsLegendControl                      Blend 
    ----------------------------------------  --------
    OptionsLowerLimit01                       0 
    ----------------------------------------  --------
    OptionsLowerLimit02                       0 
    ----------------------------------------  --------
    OptionsLowerLimit03                       0 
    ----------------------------------------  --------
    OptionsLowerLimit04                       0 
    ----------------------------------------  --------
    OptionsLowerLimit05                       0 
    ----------------------------------------  --------
    OptionsLowerLimit06                       0 
    ----------------------------------------  --------
    OptionsLowerLimit07                       0 
    ----------------------------------------  --------
    OptionsLowerLimit08                       0 
    ----------------------------------------  --------
    OptionsLowerLimit09                       0 
    ----------------------------------------  --------
    OptionsLowerLimit10                       0 
    ----------------------------------------  --------
    OptionsLowerLimit11                       0 
    ----------------------------------------  --------
    OptionsLowerLimit12                       0 
    ----------------------------------------  --------
    OptionsNumDecimals                        2 
    ----------------------------------------  --------
    OptionsNumberOfColors                     12 
    ----------------------------------------  --------
    OptionsRangeHighLimit                     0 
    ----------------------------------------  --------
    OptionsRangeLowLimit                      0 
    ----------------------------------------  --------
    OptionsRangeType                          Uniform 
    ----------------------------------------  --------
    OptionsSaveThicknessVectorsAsLines        0 
    ----------------------------------------  --------
    OptionsUpperLimit01                       0 
    ----------------------------------------  --------
    OptionsUpperLimit02                       0 
    ----------------------------------------  --------
    OptionsUpperLimit03                       0 
    ----------------------------------------  --------
    OptionsUpperLimit04                       0 
    ----------------------------------------  --------
    OptionsUpperLimit05                       0 
    ----------------------------------------  --------
    OptionsUpperLimit06                       0 
    ----------------------------------------  --------
    OptionsUpperLimit07                       0 
    ----------------------------------------  --------
    OptionsUpperLimit08                       0 
    ----------------------------------------  --------
    OptionsUpperLimit09                       0 
    ----------------------------------------  --------
    OptionsUpperLimit10                       0 
    ----------------------------------------  --------
    OptionsUpperLimit11                       0 
    ----------------------------------------  --------
    OptionsUpperLimit12                       0 
    ========================================  ========
    
    .. versionadded:: NX8.0.0
    """
    
    class CalculateMethod():
        """
        The calculation method used for the wall thickness analysis. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ray", "Ray"
           "RollingBall", "Rolling ball"
           "VectorProject", "Vector project"
        """
        Ray = 0  # WallThicknessCheckerBuilderCalculateMethodMemberType
        RollingBall = 1  # WallThicknessCheckerBuilderCalculateMethodMemberType
        VectorProject = 2  # WallThicknessCheckerBuilderCalculateMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RangeType():
        """
        The range type for defining the ranges used in displaying the thickness results. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Uniform", "Uniform"
           "UserDefined", "User-defined"
        """
        Uniform = 0  # WallThicknessCheckerBuilderRangeTypeMemberType
        UserDefined = 1  # WallThicknessCheckerBuilderRangeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LegendControl():
        """
        The legend control used in displaying the thickness results. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Blend", "Blend"
           "Sharp", "Sharp"
        """
        Blend = 0  # WallThicknessCheckerBuilderLegendControlMemberType
        Sharp = 1  # WallThicknessCheckerBuilderLegendControlMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Calculate(self) -> None:
        """
        Method for the "Calculate" button, needs to be called before calling commit.  
        
        Signature ``Calculate()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SaveResults(self) -> None:
        """
        Saves the Results after calling the :py:meth:`NXOpen.Tooling.WallThicknessCheckerBuilder.Calculate` to save the thickness calculation results.  
        
        Signature ``SaveResults()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteSavedResults(self) -> None:
        """
        Deletes the saved thickness results if the thickness calculation results are no longer needed.  
        
        Signature ``DeleteSavedResults()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def InitThicknessData(self, changeBody: int) -> None:
        """
        Initialize the default thickness calculation data for the new input body used in the thickness analysis.  
        
        Signature ``InitThicknessData(changeBody)`` 
        
        :param changeBody: 
        :type changeBody: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateSelectedFacesInfo(self) -> None:
        """
        Update the information of the seleted faces in the thickness calculation database for inspecting thickness results.  
        
        Signature ``UpdateSelectedFacesInfo()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateThicknessGraphicObjects(self, startPoint: NXOpen.Point3d, directionVector: NXOpen.Vector3d, length: float, color: NXOpen.NXColor) -> None:
        """
        Create graphic objects for the thickness results.  
        
        Signature ``CreateThicknessGraphicObjects(startPoint, directionVector, length, color)`` 
        
        :param startPoint:  Start point for creating graphic objects  
        :type startPoint: :py:class:`NXOpen.Point3d` 
        :param directionVector:  Direction vector  
        :type directionVector: :py:class:`NXOpen.Vector3d` 
        :param length:  Thickness length for creating graphic objects  
        :type length: float 
        :param color:  Color for use in creating graphic objects  
        :type color: Id 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RecordTransientMeshes(self) -> None:
        """
        Record the transient meshes.  
        
        Signature ``RecordTransientMeshes()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def KeepTransientMeshes(self, keepMeshes: int) -> None:
        """
        Set the flag for keeping the transient meshes.  
        
        Signature ``KeepTransientMeshes(keepMeshes)`` 
        
        :param keepMeshes: 
        :type keepMeshes: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SaveThicknessUDO(self, saveThicknessUDO: bool) -> None:
        """
        Set the flag for saving to Wall Thickness UDO.  
        
        Signature ``SaveThicknessUDO(saveThicknessUDO)`` 
        
        :param saveThicknessUDO: 
        :type saveThicknessUDO: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SaveSelectedWTAnalysisResultsAO(self, selectedWTAnalysisResultsAO: NXOpen.TaggedObject) -> None:
        """
        Save the selected wall thickness analysis results display AO 
        
        Signature ``SaveSelectedWTAnalysisResultsAO(selectedWTAnalysisResultsAO)`` 
        
        :param selectedWTAnalysisResultsAO:  Wall thickness analysis results AO  
        :type selectedWTAnalysisResultsAO: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    CalPageNormalVector: NXOpen.Direction = ...
    """
    Returns or sets  the normal used when :py:class:`NXOpen.Tooling.WallThicknessCheckerBuilderCalculateMethod` is set to :py:class:` NXOpen.Tooling.WallThicknessCheckerBuilderCalculateMethod.VectorProject  < NXOpen.Tooling.WallThicknessCheckerBuilderCalculateMethod>` 
    
    <hr>
    
    Getter Method
    
    Signature ``CalPageNormalVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalPageNormalVector`` 
    
    :param calPageNormalVector: 
    :type calPageNormalVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    CalculationBody: NXOpen.SelectBody = ...
    """
    Returns  the body for thickness analysis.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CalculationCalculateMethod: WallThicknessCheckerBuilderCalculateMethod = ...
    """
    Returns or sets  the calculation method used in the thickness analysis.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationCalculateMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WallThicknessCheckerBuilderCalculateMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationCalculateMethod`` 
    
    :param calculationCalculateMethod: 
    :type calculationCalculateMethod: :py:class:`NXOpen.Tooling.WallThicknessCheckerBuilderCalculateMethod` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CalculationMaximumSpacing: float = ...
    """
    Returns or sets  the maximum spacing used in the thickness analysis.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationMaximumSpacing`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationMaximumSpacing`` 
    
    :param calculationMaximumSpacing: 
    :type calculationMaximumSpacing: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CalculationMaximumThicknessTolerance: float = ...
    """
    Returns or sets  the maximum thickness tolerance used in the thickness analysis.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationMaximumThicknessTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationMaximumThicknessTolerance`` 
    
    :param calculationMaximumThicknessTolerance: 
    :type calculationMaximumThicknessTolerance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CalculationProjectToFace: bool = ...
    """
    Returns or sets  the project to face option for the thickness analysis on the Calculation Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationProjectToFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationProjectToFace`` 
    
    :param calculationProjectToFace: 
    :type calculationProjectToFace: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CalculationSamplePointsIntervalScale: int = ...
    """
    Returns or sets  the scale for controlling the sampling spacing and thickness analysis tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationSamplePointsIntervalScale`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationSamplePointsIntervalScale`` 
    
    :param calculationSamplePointsIntervalScale: 
    :type calculationSamplePointsIntervalScale: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InApplyStatus: int = ...
    """
    Returns or sets  the flag that indicates the Apply status of the command, needed only in the interactive environment.  
    
    <hr>
    
    Getter Method
    
    Signature ``InApplyStatus`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InApplyStatus`` 
    
    :param inApplyStatus: 
    :type inApplyStatus: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectDisplayVolumeFillers: bool = ...
    """
    Returns or sets  the option of displaying the internal volume fillers for the thickness analysis results on the Inspect Tab page 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectDisplayVolumeFillers`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectDisplayVolumeFillers`` 
    
    :param inspectDisplayVolumeFillers: 
    :type inspectDisplayVolumeFillers: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    InspectDisplayWithExcludeColor: bool = ...
    """
    Returns or sets  the option to display with exclude color for excluded results 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectDisplayWithExcludeColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectDisplayWithExcludeColor`` 
    
    :param inspectDisplayWithExcludeColor: 
    :type inspectDisplayWithExcludeColor: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    InspectExcludeColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color used for displaying excluded sharp edge results 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectExcludeColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectExcludeColor`` 
    
    :param inspectExcludeColor: 
    :type inspectExcludeColor: Id 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    InspectExcludeDistance: float = ...
    """
    Returns or sets  the distance from sharp edge to exclude thickness analysis results display 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectExcludeDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectExcludeDistance`` 
    
    :param inspectExcludeDistance: 
    :type inspectExcludeDistance: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    InspectExcludeSharpEdgeResultsDisplay: bool = ...
    """
    Returns or sets  the option to exclude sharp edge thickness analysis results display 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectExcludeSharpEdgeResultsDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectExcludeSharpEdgeResultsDisplay`` 
    
    :param inspectExcludeSharpEdgeResultsDisplay: 
    :type inspectExcludeSharpEdgeResultsDisplay: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    InspectionChangeFacesColor: bool = ...
    """
    Returns or sets  the option of changing color of selected faces on the Inspect Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionChangeFacesColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionChangeFacesColor`` 
    
    :param inspectionChangeFacesColor: 
    :type inspectionChangeFacesColor: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionDisplayFringeColorPlot: bool = ...
    """
    Returns or sets  the option of displaying the fringe color plot for the thickness analysis results on the Inspect Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionDisplayFringeColorPlot`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionDisplayFringeColorPlot`` 
    
    :param inspectionDisplayFringeColorPlot: 
    :type inspectionDisplayFringeColorPlot: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionDisplayRayVectors: bool = ...
    """
    Returns or sets  the option of displaying the ray vectors for the thickness analysis results on the Inspect Tab page 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionDisplayRayVectors`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionDisplayRayVectors`` 
    
    :param inspectionDisplayRayVectors: 
    :type inspectionDisplayRayVectors: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionDynamicPointOnFace: NXOpen.SelectFace = ...
    """
    Returns  the selected location on face for displaying dynamic thickness display 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionDynamicPointOnFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the selected faces for displaying the thickness results on the Inspect Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionIncludeAllFaces: bool = ...
    """
    Returns or sets  the option of selecting all faces for displaying thickness analysis results on the Inspect Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionIncludeAllFaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionIncludeAllFaces`` 
    
    :param inspectionIncludeAllFaces: 
    :type inspectionIncludeAllFaces: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionSelectedFacesColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color used in changing the color of selected faces on the Inspect Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionSelectedFacesColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionSelectedFacesColor`` 
    
    :param inspectionSelectedFacesColor: 
    :type inspectionSelectedFacesColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionThicknessFilterRangeHighLimit: float = ...
    """
    Returns or sets  the high limit of range select on the Inspect Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionThicknessFilterRangeHighLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionThicknessFilterRangeHighLimit`` 
    
    :param inspectionThicknessFilterRangeHighLimit: 
    :type inspectionThicknessFilterRangeHighLimit: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionThicknessFilterRangeLowLimit: float = ...
    """
    Returns or sets  the low limit of range select on the Inspect Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionThicknessFilterRangeLowLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionThicknessFilterRangeLowLimit`` 
    
    :param inspectionThicknessFilterRangeLowLimit: 
    :type inspectionThicknessFilterRangeLowLimit: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionTranslucency: int = ...
    """
    Returns or sets  the translucency for the faces of the selected solid body 
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionTranslucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionTranslucency`` 
    
    :param inspectionTranslucency: 
    :type inspectionTranslucency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InspectionUseThicknessRangeSelect: bool = ...
    """
    Returns or sets  the option of using range select for selecting faces on the Inspect Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InspectionUseThicknessRangeSelect`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InspectionUseThicknessRangeSelect`` 
    
    :param inspectionUseThicknessRangeSelect: 
    :type inspectionUseThicknessRangeSelect: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor01: NXOpen.NXColor = ...
    """
    Returns or sets  the 1st color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor01`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor01`` 
    
    :param optionsColor01: 
    :type optionsColor01: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor02: NXOpen.NXColor = ...
    """
    Returns or sets  the 2nd color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor02`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor02`` 
    
    :param optionsColor02: 
    :type optionsColor02: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor03: NXOpen.NXColor = ...
    """
    Returns or sets  the 3rd color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor03`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor03`` 
    
    :param optionsColor03: 
    :type optionsColor03: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor04: NXOpen.NXColor = ...
    """
    Returns or sets  the 4th color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor04`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor04`` 
    
    :param optionsColor04: 
    :type optionsColor04: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor05: NXOpen.NXColor = ...
    """
    Returns or sets  the 5th color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor05`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor05`` 
    
    :param optionsColor05: 
    :type optionsColor05: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor06: NXOpen.NXColor = ...
    """
    Returns or sets  the 6th color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor06`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor06`` 
    
    :param optionsColor06: 
    :type optionsColor06: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor07: NXOpen.NXColor = ...
    """
    Returns or sets  the 7th color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor07`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor07`` 
    
    :param optionsColor07: 
    :type optionsColor07: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor08: NXOpen.NXColor = ...
    """
    Returns or sets  the 8th color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor08`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor08`` 
    
    :param optionsColor08: 
    :type optionsColor08: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor09: NXOpen.NXColor = ...
    """
    Returns or sets  the 9th color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor09`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor09`` 
    
    :param optionsColor09: 
    :type optionsColor09: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor10: NXOpen.NXColor = ...
    """
    Returns or sets  the 10th color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor10`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor10`` 
    
    :param optionsColor10: 
    :type optionsColor10: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor11: NXOpen.NXColor = ...
    """
    Returns or sets  the 11th color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor11`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor11`` 
    
    :param optionsColor11: 
    :type optionsColor11: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsColor12: NXOpen.NXColor = ...
    """
    Returns or sets  the 12th color used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsColor12`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsColor12`` 
    
    :param optionsColor12: 
    :type optionsColor12: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsCreateBall: bool = ...
    """
    Returns or sets  the option to create a ball for :py:class:`Tooling.WallThicknessCheckerBuilderCalculateMethod.RollingBall <Tooling.WallThicknessCheckerBuilderCalculateMethod>`
    when a point is selected on a face.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsCreateBall`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsCreateBall`` 
    
    :param optionsCreateBall: 
    :type optionsCreateBall: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsCreateThicknessText: bool = ...
    """
    Returns or sets  the option to create text for the thickness results.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsCreateThicknessText`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsCreateThicknessText`` 
    
    :param optionsCreateThicknessText: 
    :type optionsCreateThicknessText: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OptionsDisplayDynamicBall: bool = ...
    """
    Returns or sets  the option to display dynamic ball for :py:class:`Tooling.WallThicknessCheckerBuilderCalculateMethod.RollingBall <Tooling.WallThicknessCheckerBuilderCalculateMethod>`.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsDisplayDynamicBall`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsDisplayDynamicBall`` 
    
    :param optionsDisplayDynamicBall: 
    :type optionsDisplayDynamicBall: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsDisplayMeshElements: bool = ...
    """
    Returns or sets  the option to mesh elements.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsDisplayMeshElements`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsDisplayMeshElements`` 
    
    :param optionsDisplayMeshElements: 
    :type optionsDisplayMeshElements: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsDisplayOppositeMeshElements: bool = ...
    """
    Returns or sets  the option to display opposite mesh elements.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsDisplayOppositeMeshElements`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsDisplayOppositeMeshElements`` 
    
    :param optionsDisplayOppositeMeshElements: 
    :type optionsDisplayOppositeMeshElements: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsDisplayThicknessVectors: bool = ...
    """
    Returns or sets  the option to display the thickness ray vectors.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsDisplayThicknessVectors`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsDisplayThicknessVectors`` 
    
    :param optionsDisplayThicknessVectors: 
    :type optionsDisplayThicknessVectors: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsDynamicSnapToVertex: bool = ...
    """
    Returns or sets  the option to snap to vertex for displaying dynamic thickness results.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsDynamicSnapToVertex`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsDynamicSnapToVertex`` 
    
    :param optionsDynamicSnapToVertex: 
    :type optionsDynamicSnapToVertex: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLegendControl: WallThicknessCheckerBuilderLegendControl = ...
    """
    Returns or sets  the legend control for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLegendControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WallThicknessCheckerBuilderLegendControl` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLegendControl`` 
    
    :param optionsLegendControl: 
    :type optionsLegendControl: :py:class:`NXOpen.Tooling.WallThicknessCheckerBuilderLegendControl` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit01: float = ...
    """
    Returns or sets  the 1st lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit01`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit01`` 
    
    :param optionsLowerLimit01: 
    :type optionsLowerLimit01: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit02: float = ...
    """
    Returns or sets  the 2nd lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit02`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit02`` 
    
    :param optionsLowerLimit02: 
    :type optionsLowerLimit02: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit03: float = ...
    """
    Returns or sets  the 3rd lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit03`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit03`` 
    
    :param optionsLowerLimit03: 
    :type optionsLowerLimit03: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit04: float = ...
    """
    Returns or sets  the 4th lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit04`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit04`` 
    
    :param optionsLowerLimit04: 
    :type optionsLowerLimit04: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit05: float = ...
    """
    Returns or sets  the 5th lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit05`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit05`` 
    
    :param optionsLowerLimit05: 
    :type optionsLowerLimit05: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit06: float = ...
    """
    Returns or sets  the 6th lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit06`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit06`` 
    
    :param optionsLowerLimit06: 
    :type optionsLowerLimit06: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit07: float = ...
    """
    Returns or sets  the 7th lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit07`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit07`` 
    
    :param optionsLowerLimit07: 
    :type optionsLowerLimit07: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit08: float = ...
    """
    Returns or sets  the 8th lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit08`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit08`` 
    
    :param optionsLowerLimit08: 
    :type optionsLowerLimit08: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit09: float = ...
    """
    Returns or sets  the 9th lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit09`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit09`` 
    
    :param optionsLowerLimit09: 
    :type optionsLowerLimit09: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit10: float = ...
    """
    Returns or sets  the 10th lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit10`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit10`` 
    
    :param optionsLowerLimit10: 
    :type optionsLowerLimit10: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit11: float = ...
    """
    Returns or sets  the 11th lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit11`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit11`` 
    
    :param optionsLowerLimit11: 
    :type optionsLowerLimit11: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsLowerLimit12: float = ...
    """
    Returns or sets  the 12th lower range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsLowerLimit12`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsLowerLimit12`` 
    
    :param optionsLowerLimit12: 
    :type optionsLowerLimit12: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsNumDecimals: int = ...
    """
    Returns or sets  the number of decimal places for thickness output.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsNumDecimals`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsNumDecimals`` 
    
    :param optionsNumDecimals: 
    :type optionsNumDecimals: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsNumberOfColors: int = ...
    """
    Returns or sets  the number of colors used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsNumberOfColors`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsNumberOfColors`` 
    
    :param optionsNumberOfColors: 
    :type optionsNumberOfColors: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsRangeHighLimit: float = ...
    """
    Returns or sets  the thickness high limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsRangeHighLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsRangeHighLimit`` 
    
    :param optionsRangeHighLimit: 
    :type optionsRangeHighLimit: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsRangeLowLimit: float = ...
    """
    Returns or sets  the thickness low limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsRangeLowLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsRangeLowLimit`` 
    
    :param optionsRangeLowLimit: 
    :type optionsRangeLowLimit: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsRangeType: WallThicknessCheckerBuilderRangeType = ...
    """
    Returns or sets  the range type for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsRangeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WallThicknessCheckerBuilderRangeType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsRangeType`` 
    
    :param optionsRangeType: 
    :type optionsRangeType: :py:class:`NXOpen.Tooling.WallThicknessCheckerBuilderRangeType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsSaveThicknessVectorsAsLines: bool = ...
    """
    Returns or sets  the option to create permanent lines as the thickness ray vectors.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsSaveThicknessVectorsAsLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsSaveThicknessVectorsAsLines`` 
    
    :param optionsSaveThicknessVectorsAsLines: 
    :type optionsSaveThicknessVectorsAsLines: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit01: float = ...
    """
    Returns or sets  the 1st upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit01`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit01`` 
    
    :param optionsUpperLimit01: 
    :type optionsUpperLimit01: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit02: float = ...
    """
    Returns or sets  the 2nd upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit02`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit02`` 
    
    :param optionsUpperLimit02: 
    :type optionsUpperLimit02: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit03: float = ...
    """
    Returns or sets  the 3rd upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit03`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit03`` 
    
    :param optionsUpperLimit03: 
    :type optionsUpperLimit03: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit04: float = ...
    """
    Returns or sets  the 4th upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit04`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit04`` 
    
    :param optionsUpperLimit04: 
    :type optionsUpperLimit04: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit05: float = ...
    """
    Returns or sets  the 5th upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit05`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit05`` 
    
    :param optionsUpperLimit05: 
    :type optionsUpperLimit05: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit06: float = ...
    """
    Returns or sets  the 6th upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit06`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit06`` 
    
    :param optionsUpperLimit06: 
    :type optionsUpperLimit06: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit07: float = ...
    """
    Returns or sets  the 7th upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit07`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit07`` 
    
    :param optionsUpperLimit07: 
    :type optionsUpperLimit07: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit08: float = ...
    """
    Returns or sets  the 8th upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit08`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit08`` 
    
    :param optionsUpperLimit08: 
    :type optionsUpperLimit08: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit09: float = ...
    """
    Returns or sets  the 9th upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit09`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit09`` 
    
    :param optionsUpperLimit09: 
    :type optionsUpperLimit09: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit10: float = ...
    """
    Returns or sets  the 10th upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit10`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit10`` 
    
    :param optionsUpperLimit10: 
    :type optionsUpperLimit10: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit11: float = ...
    """
    Returns or sets  the 11th upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit11`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit11`` 
    
    :param optionsUpperLimit11: 
    :type optionsUpperLimit11: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptionsUpperLimit12: float = ...
    """
    Returns or sets  the 12th upper range limit used for displaying the thickness analysis results on the Options Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``OptionsUpperLimit12`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionsUpperLimit12`` 
    
    :param optionsUpperLimit12: 
    :type optionsUpperLimit12: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: WallThicknessCheckerBuilder = ...  # unknown typename


class ClearanceManagementCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.ClearanceManagementCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateClearanceManagementBuilder(self) -> ClearanceManagementBuilder:
        """
        Creates burring insert builder.  
        
        Signature ``CreateClearanceManagementBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ClearanceManagementBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class ToolingApplicationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ToolingApplication():
    """
    Wizard type, some of them should be same as in mpdwshare_uf_mold.h 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ReuseLibrary", "Reuse Library"
       "MoldWizard", "MoldWizard"
       "PdieWizard", "Progressive Die Wizard"
       "StampingDie", "Stamping Die"
       "ElectrodeWizard", "Electrode Wizard"
       "EdieWizard", "Engineering Die Wizard"
    """
    ReuseLibrary = 0  # ToolingApplicationMemberType
    MoldWizard = 1  # ToolingApplicationMemberType
    PdieWizard = 2  # ToolingApplicationMemberType
    StampingDie = 3  # ToolingApplicationMemberType
    ElectrodeWizard = 4  # ToolingApplicationMemberType
    EdieWizard = 5  # ToolingApplicationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ToolingCloneparttypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ToolingCloneparttype():
    """
    Part file type, .sim, .fem etc.  
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PrtType", "Normal NX part"
       "SimType", "CAE .sim part"
       "FemType", "CAE .fem part"
       "FemIdealizedType", "CAE Idealized part for .fem"
       "DrawingType", "Drawing part"
    """
    PrtType = 0  # ToolingCloneparttypeMemberType
    SimType = 1  # ToolingCloneparttypeMemberType
    FemType = 2  # ToolingCloneparttypeMemberType
    FemIdealizedType = 3  # ToolingCloneparttypeMemberType
    DrawingType = 4  # ToolingCloneparttypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ToolingDrawingCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.CompDrawingBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateComponentDrawingBuilder(self) -> CompDrawingBuilder:
        """
        Creates create component drawing builder  
        
        Signature ``CreateComponentDrawingBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CompDrawingBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateAssemblyDrawingBuilder(self) -> AssemblyDrawingBuilder:
        """
        Creates assembly drawing builder  
        
        Signature ``CreateAssemblyDrawingBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.AssemblyDrawingBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateSectionLineCreationBuilder(self) -> SectionLineCreationBuilder:
        """
        Creates section line creation builder  
        
        Signature ``CreateSectionLineCreationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SectionLineCreationBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateAutoDimensionBuilder(self) -> AutoDimensionBuilder:
        """
        Creates auto dimension builder  
        
        Signature ``CreateAutoDimensionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.AutoDimensionBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateDrawingSheetNameBuilder(self) -> DrawingSheetNameBuilder:
        """
        Creates drawing sheet name builder  
        
        Signature ``CreateDrawingSheetNameBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DrawingSheetNameBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    


class AssignPatchCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of AssignPatch builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> AssignPatchBuilder:
        """
        Creates a AssignPatch builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`AssignPatchBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.AssignPatchBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateBuilderByPartingOrPatchType(self) -> AssignPatchBuilder:
        """
        Creates a AssignPatch builder for use in NX11 and later releases  
        
        Signature ``CreateBuilderByPartingOrPatchType()`` 
        
        :returns: :py:class:`AssignPatchBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.AssignPatchBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    


class DieInsertBuilderPositionItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieInsertBuilderPositionItems():
    """
    Specifies the position of piercing inserts, for EDW only 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "The position is top side"
       "Bottom", "The position is bottom side"
    """
    Top = 0  # DieInsertBuilderPositionItemsMemberType
    Bottom = 1  # DieInsertBuilderPositionItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieInsertBuilderInsertModeItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieInsertBuilderInsertModeItems():
    """
    Specifies the insert mode for die. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandardInsert", "The die insert mode is standard insert"
       "SketchProfile", "The die insert mode is sketch profile"
       "BoundingBox", "The die insert mode is bounding box"
    """
    StandardInsert = 0  # DieInsertBuilderInsertModeItemsMemberType
    SketchProfile = 1  # DieInsertBuilderInsertModeItemsMemberType
    BoundingBox = 2  # DieInsertBuilderInsertModeItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieInsertBuilderDieInsertTypeItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieInsertBuilderDieInsertTypeItems():
    """
    Specifies the type of insert. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DieInsert", " - "
       "BackingInsert", " - "
    """
    DieInsert = 0  # DieInsertBuilderDieInsertTypeItemsMemberType
    BackingInsert = 1  # DieInsertBuilderDieInsertTypeItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieInsertBuilderBoundingBoxTypeItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieInsertBuilderBoundingBoxTypeItems():
    """
    Specifies the bounding box type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Block", "The bounding box type is Block"
       "Cylinder", "The bounding box type is Cylinder"
    """
    Block = 0  # DieInsertBuilderBoundingBoxTypeItemsMemberType
    Cylinder = 1  # DieInsertBuilderBoundingBoxTypeItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieInsertBuilder(NXOpen.Builder):
    """
    Represents die insert builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateDieInsertBuilder`
    
    Default values.
    
    =================================  ======================================
    Property                           Value
    =================================  ======================================
    BoundingBoxType                    Block 
    ---------------------------------  --------------------------------------
    ConceptDesign                      0 
    ---------------------------------  --------------------------------------
    DieInsertType                      DieInsert 
    ---------------------------------  --------------------------------------
    InsertMode                         StandardInsert 
    ---------------------------------  --------------------------------------
    Position                           Bottom 
    ---------------------------------  --------------------------------------
    RenameDialog                       0 
    ---------------------------------  --------------------------------------
    UserDefinedDieInsertClearance      0 
    ---------------------------------  --------------------------------------
    UserDefinedDieInsertHeight.Value   0 (millimeters part), 0 (inches part) 
    ---------------------------------  --------------------------------------
    WithoutFalseBody                   0 
    =================================  ======================================
    
    .. versionadded:: NX11.0.0
    """
    
    class PositionItems():
        """
        Specifies the position of piercing inserts, for EDW only 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "The position is top side"
           "Bottom", "The position is bottom side"
        """
        Top = 0  # DieInsertBuilderPositionItemsMemberType
        Bottom = 1  # DieInsertBuilderPositionItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InsertModeItems():
        """
        Specifies the insert mode for die. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandardInsert", "The die insert mode is standard insert"
           "SketchProfile", "The die insert mode is sketch profile"
           "BoundingBox", "The die insert mode is bounding box"
        """
        StandardInsert = 0  # DieInsertBuilderInsertModeItemsMemberType
        SketchProfile = 1  # DieInsertBuilderInsertModeItemsMemberType
        BoundingBox = 2  # DieInsertBuilderInsertModeItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DieInsertTypeItems():
        """
        Specifies the type of insert. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DieInsert", " - "
           "BackingInsert", " - "
        """
        DieInsert = 0  # DieInsertBuilderDieInsertTypeItemsMemberType
        BackingInsert = 1  # DieInsertBuilderDieInsertTypeItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BoundingBoxTypeItems():
        """
        Specifies the bounding box type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Block", "The bounding box type is Block"
           "Cylinder", "The bounding box type is Cylinder"
        """
        Block = 0  # DieInsertBuilderBoundingBoxTypeItemsMemberType
        Cylinder = 1  # DieInsertBuilderBoundingBoxTypeItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def StandardDieInsert(self) -> None:
        """
        Insert the standard die by invoking standard part management dialog
        
        Signature ``StandardDieInsert()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateUserDefinedInsertDatumPlane(self) -> None:
        """
        Create datum plane for user defined die or backing insert outline.  
        
        Signature ``CreateUserDefinedInsertDatumPlane()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AddDieInsertPart(self) -> None:
        """
        Add die insert or backing insert part into assembly when creating user defined insert datum plane 
        
        Signature ``AddDieInsertPart()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateUserDefinedDieInsert(self) -> None:
        """
        Create user defined die insert or backing insert for selected scraps when creating die insert by user defined type 
        
        Signature ``CreateUserDefinedDieInsert()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetManipulatorToMatrixAndPosition(self, matrix: NXOpen.Matrix3x3, position: NXOpen.Point3d) -> None:
        """
        Sets box csys matrix.  
        
        Signature ``SetManipulatorToMatrixAndPosition(matrix, position)`` 
        
        :param matrix: 
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        :param position: 
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CalculateBoxSize(self) -> None:
        """
        Calculate box size and set directions, edge length, lower point position.  
        
        Signature ``CalculateBoxSize()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    BoundingBoxType: DieInsertBuilderBoundingBoxTypeItems = ...
    """
    Returns or sets  the bounding box type 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingBoxType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieInsertBuilderBoundingBoxTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingBoxType`` 
    
    :param boundingBoxType: 
    :type boundingBoxType: :py:class:`NXOpen.Tooling.DieInsertBuilderBoundingBoxTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BoxPosition: NXOpen.Point3d = ...
    """
    Returns or sets  the position of csys for box.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoxPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoxPosition`` 
    
    :param csysOrigin: 
    :type csysOrigin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ConceptDesign: bool = ...
    """
    Returns or sets  the value indicating if the design is for a concept.  
    
    True indicates it is a concept design. 
    
    <hr>
    
    Getter Method
    
    Signature ``ConceptDesign`` 
    
    :returns:  Indicates whether it is a concept design  
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConceptDesign`` 
    
    :param conceptDesign:  Indicates whether it is a concept design  
    :type conceptDesign: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DieInsertType: DieInsertBuilderDieInsertTypeItems = ...
    """
    Returns or sets  the die insert type.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieInsertType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieInsertBuilderDieInsertTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DieInsertType`` 
    
    :param dieInsertType: 
    :type dieInsertType: :py:class:`NXOpen.Tooling.DieInsertBuilderDieInsertTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DieStandardInsertInstance: NXOpen.TaggedObject = ...
    """
    Returns or sets  the die standard insert instance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieStandardInsertInstance`` 
    
    :returns:  Retruns the die standard insert instance  
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DieStandardInsertInstance`` 
    
    :param dieStandardInsertInstance:  Specifies the die standard insert instance  
    :type dieStandardInsertInstance: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    InsertMode: DieInsertBuilderInsertModeItems = ...
    """
    Returns or sets  the insert mode 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieInsertBuilderInsertModeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsertMode`` 
    
    :param insertMode: 
    :type insertMode: :py:class:`NXOpen.Tooling.DieInsertBuilderInsertModeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NewPartNames: str = ...
    """
    Returns or sets  the new component names.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewPartNames`` 
    
    :returns:  Retruns the new component names  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewPartNames`` 
    
    :param newPartNames:  Specifies the new component names  
    :type newPartNames: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeX: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative x 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeY: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative y 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeZ: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative z 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveX: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive x 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveY: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive y 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveZ: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive z 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name to create insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns:  Retruns parent part name  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPartName:  Specifies the parent part name  
    :type parentPartName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Position: DieInsertBuilderPositionItems = ...
    """
    Returns or sets  the die insert position.  
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieInsertBuilderPositionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Tooling.DieInsertBuilderPositionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RadialOffset: NXOpen.Expression = ...
    """
    Returns  the radial offset value for cylinder box
    
    <hr>
    
    Getter Method
    
    Signature ``RadialOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    RenameDialog: bool = ...
    """
    Returns or sets  the rename dialog option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenameDialog`` 
    
    :returns:  Indicates the rename dialog option for normal pierce design  
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameDialog`` 
    
    :param renameDialog:  Indicates the rename dialog option for normal pierce design  
    :type renameDialog: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectDieInsertOutline: NXOpen.Section = ...
    """
    Returns  the select die insert outline 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectDieInsertOutline`` 
    
    :returns:  Indicates the profiles for user defined die or backing insert design  
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the select scraps for pierce insert design.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectScrap`` 
    
    :returns:  the selected scraps for pierce insert design  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectUserDefinedDieInsertForEdit: NXOpen.SelectBodyList = ...
    """
    Returns  the select user defined insert to edit 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectUserDefinedDieInsertForEdit`` 
    
    :returns:  Indicates the selected user defined die insert to edit  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectVector: NXOpen.Direction = ...
    """
    Returns or sets  the select vector 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectVector`` 
    
    :param selectVector: 
    :type selectVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UserDefinedDieInsertClearance: float = ...
    """
    Returns or sets  the user defined die insert clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedDieInsertClearance`` 
    
    :returns:  Indicates the false body clearance value of user defined die or backing insert  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedDieInsertClearance`` 
    
    :param userDefinedDieInsertClearance:  Indicates the false body clearance value of user defined die or backing insert  
    :type userDefinedDieInsertClearance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UserDefinedDieInsertHeight: NXOpen.Expression = ...
    """
    Returns  the user defined die insert height 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedDieInsertHeight`` 
    
    :returns:  Indicates the height value of user defined die or backing insert  
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    WithoutFalseBody: bool = ...
    """
    Returns or sets  the option of whether to create false body for die or backing insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``WithoutFalseBody`` 
    
    :returns:  Indicates whether to create false body  
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WithoutFalseBody`` 
    
    :param withoutFalseBody:  Indicates whether to create false body  
    :type withoutFalseBody: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: DieInsertBuilder = ...  # unknown typename


class ConcurrentDesignManagementBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConcurrentDesignManagementBuilderTypes():
    """
    Specifies the types of concurrent design management. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DesignerLogin", "the designer login page"
       "TaskAssignment", "the task assignment page"
       "SaveAndUpdate", "the save and update page"
    """
    DesignerLogin = 0  # ConcurrentDesignManagementBuilderTypesMemberType
    TaskAssignment = 1  # ConcurrentDesignManagementBuilderTypesMemberType
    SaveAndUpdate = 2  # ConcurrentDesignManagementBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConcurrentDesignManagementBuilderUpdateTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConcurrentDesignManagementBuilderUpdateTypes():
    """
    Specifies the types of the update action. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SaveMyComponents", "the save my components action"
       "UpdateOtherComponents", "the update other components action"
    """
    SaveMyComponents = 0  # ConcurrentDesignManagementBuilderUpdateTypesMemberType
    UpdateOtherComponents = 1  # ConcurrentDesignManagementBuilderUpdateTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConcurrentDesignManagementBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.ConcurrentDesignManagementBuilder` to support concurrent design workflow management.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.WorkflowManagementCollection.CreateConcurrentDesignManagementBuilder`
    
    Default values.
    
    ===================  =================
    Property             Value
    ===================  =================
    SetAsMyDefaultTask   0 
    -------------------  -----------------
    UpdateOptions        SaveMyComponents 
    ===================  =================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Specifies the types of concurrent design management. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DesignerLogin", "the designer login page"
           "TaskAssignment", "the task assignment page"
           "SaveAndUpdate", "the save and update page"
        """
        DesignerLogin = 0  # ConcurrentDesignManagementBuilderTypesMemberType
        TaskAssignment = 1  # ConcurrentDesignManagementBuilderTypesMemberType
        SaveAndUpdate = 2  # ConcurrentDesignManagementBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class UpdateTypes():
        """
        Specifies the types of the update action. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SaveMyComponents", "the save my components action"
           "UpdateOtherComponents", "the update other components action"
        """
        SaveMyComponents = 0  # ConcurrentDesignManagementBuilderUpdateTypesMemberType
        UpdateOtherComponents = 1  # ConcurrentDesignManagementBuilderUpdateTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DesignTasks: str = ...
    """
    Returns or sets  the designer names.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignTasks`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignTasks`` 
    
    :param designTasks: 
    :type designTasks: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    DesignerName: str = ...
    """
    Returns or sets  the designer name.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignerName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignerName`` 
    
    :param designerName: 
    :type designerName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    ProjectLeader: str = ...
    """
    Returns or sets  the project leader name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectLeader`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectLeader`` 
    
    :param projectLeader: 
    :type projectLeader: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    SelectComponent: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the selected component to assign to a designer.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectedDesignerIndex: int = ...
    """
    Returns or sets  the index of the selected designer.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedDesignerIndex`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedDesignerIndex`` 
    
    :param selectedDesignerIndex: 
    :type selectedDesignerIndex: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    SetAsMyDefaultTask: bool = ...
    """
    Returns or sets  the option to set as the current user's default task.  
    
    <hr>
    
    Getter Method
    
    Signature ``SetAsMyDefaultTask`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SetAsMyDefaultTask`` 
    
    :param setAsMyDefaultTask: 
    :type setAsMyDefaultTask: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    TaskDescription: str = ...
    """
    Returns or sets  the task description string 
    
    <hr>
    
    Getter Method
    
    Signature ``TaskDescription`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TaskDescription`` 
    
    :param taskDescription: 
    :type taskDescription: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Type: ConcurrentDesignManagementBuilderTypes = ...
    """
    Returns or sets  the type of concurrent design management.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ConcurrentDesignManagementBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.ConcurrentDesignManagementBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    UpdateOptions: ConcurrentDesignManagementBuilderUpdateTypes = ...
    """
    Returns or sets  the update type.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ConcurrentDesignManagementBuilderUpdateTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UpdateOptions`` 
    
    :param updateOptions: 
    :type updateOptions: :py:class:`NXOpen.Tooling.ConcurrentDesignManagementBuilderUpdateTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    UserName: str = ...
    """
    Returns or sets  the user name to login.  
    
    <hr>
    
    Getter Method
    
    Signature ``UserName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserName`` 
    
    :param userName: 
    :type userName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Null: ConcurrentDesignManagementBuilder = ...  # unknown typename


class DefineLifterBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DefineLifterBuilderTypes():
    """
    Specifies the lifter types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "GenericLifter", "Generic lifter type"
       "LifteronLifter", "Lifter on lifter type"
    """
    GenericLifter = 0  # DefineLifterBuilderTypesMemberType
    LifteronLifter = 1  # DefineLifterBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DefineLifterBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.DefineLifterBuilder` to create different types of lifter objects, which
    are used for kinematic motion.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateDefineLifterBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class Types():
        """
        Specifies the lifter types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "GenericLifter", "Generic lifter type"
           "LifteronLifter", "Lifter on lifter type"
        """
        GenericLifter = 0  # DefineLifterBuilderTypesMemberType
        LifteronLifter = 1  # DefineLifterBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DeleteGenericLifter(self, lifterName: str) -> None:
        """
        Delete the generic lifter 
        
        Signature ``DeleteGenericLifter(lifterName)`` 
        
        :param lifterName: 
        :type lifterName: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteLifterOnLifter(self, lifterName: str) -> None:
        """
        Delete the lifter on lifter 
        
        Signature ``DeleteLifterOnLifter(lifterName)`` 
        
        :param lifterName: 
        :type lifterName: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    LifterBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the lifter body which is the body needed for motion simulation 
    
    <hr>
    
    Getter Method
    
    Signature ``LifterBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    LifterDriveBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the lifter drive body which drives the lifter body 
    
    <hr>
    
    Getter Method
    
    Signature ``LifterDriveBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    LifterDriveVector: NXOpen.Direction = ...
    """
    Returns or sets  the lifter drive vector 
    
    <hr>
    
    Getter Method
    
    Signature ``LifterDriveVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LifterDriveVector`` 
    
    :param lifterDriveVector: 
    :type lifterDriveVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LifterName: str = ...
    """
    Returns or sets  the lifter name 
    
    <hr>
    
    Getter Method
    
    Signature ``LifterName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LifterName`` 
    
    :param lifterName: 
    :type lifterName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LifterOnBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the lifter on body which is driven by the main lifter body 
    
    <hr>
    
    Getter Method
    
    Signature ``LifterOnBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    LifterOnDriveVector: NXOpen.Direction = ...
    """
    Returns or sets  the lifter on lifter drive vector, it's driven by the main lifter 
    
    <hr>
    
    Getter Method
    
    Signature ``LifterOnDriveVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LifterOnDriveVector`` 
    
    :param lifterOnDriveVector: 
    :type lifterOnDriveVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LifterOnLifterVector: NXOpen.Direction = ...
    """
    Returns or sets  the lifter on lifter vector, which the lifter on lifter moves along 
    
    <hr>
    
    Getter Method
    
    Signature ``LifterOnLifterVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LifterOnLifterVector`` 
    
    :param lifterOnLifterVector: 
    :type lifterOnLifterVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LifterOnName: str = ...
    """
    Returns or sets  the lifter on name 
    
    <hr>
    
    Getter Method
    
    Signature ``LifterOnName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LifterOnName`` 
    
    :param lifterOnName: 
    :type lifterOnName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LifterVector: NXOpen.Direction = ...
    """
    Returns or sets  the lifter vector that the lifter body moves along 
    
    <hr>
    
    Getter Method
    
    Signature ``LifterVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LifterVector`` 
    
    :param lifterVector: 
    :type lifterVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MainLifterBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the main lifter bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``MainLifterBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    MainLifterDriveBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the main lifter drive body that drives the lifter body
    
    <hr>
    
    Getter Method
    
    Signature ``MainLifterDriveBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    MainLifterDriveVector: NXOpen.Direction = ...
    """
    Returns or sets  the main lifter drive vector 
    
    <hr>
    
    Getter Method
    
    Signature ``MainLifterDriveVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MainLifterDriveVector`` 
    
    :param mainLifterDriveVector: 
    :type mainLifterDriveVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MainLifterVector: NXOpen.Direction = ...
    """
    Returns or sets  the main lifter vector that the main lifter moves along
    
    <hr>
    
    Getter Method
    
    Signature ``MainLifterVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MainLifterVector`` 
    
    :param mainLifterVector: 
    :type mainLifterVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: DefineLifterBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DefineLifterBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.DefineLifterBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: DefineLifterBuilder = ...  # unknown typename


class BlankNestingCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.BlankNestingBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBlankNestingBuilder(self) -> BlankNestingBuilder:
        """
        Creates Dialog builder.  
        
        Signature ``CreateBlankNestingBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.BlankNestingBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    


class MWDefineRegionsBuilderTranslucencyOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWDefineRegionsBuilderTranslucencyOptionType():
    """
    This enum represents the translucency is to be performed on the selected or non-selected region faces 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SelectedFaces", "Selected region faces"
       "OtherFaces", "Non-selected region faces"
    """
    SelectedFaces = 0  # MWDefineRegionsBuilderTranslucencyOptionTypeMemberType
    OtherFaces = 1  # MWDefineRegionsBuilderTranslucencyOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWDefineRegionsBuilder(NXOpen.Builder):
    """
    The MWDefineRegions builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWDefineRegionsCollection.CreateBuilder`
    
    Default values.
    
    =========================  ==============
    Property                   Value
    =========================  ==============
    CreatePartingLinesToggle   0 
    -------------------------  --------------
    CreateRegionsToggle        0 
    -------------------------  --------------
    TranslucencyOption         SelectedFaces 
    -------------------------  --------------
    TranslucencyValueScale     0 
    =========================  ==============
    
    .. versionadded:: NX6.0.0
    """
    
    class TranslucencyOptionType():
        """
        This enum represents the translucency is to be performed on the selected or non-selected region faces 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SelectedFaces", "Selected region faces"
           "OtherFaces", "Non-selected region faces"
        """
        SelectedFaces = 0  # MWDefineRegionsBuilderTranslucencyOptionTypeMemberType
        OtherFaces = 1  # MWDefineRegionsBuilderTranslucencyOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateNewRegionButton(self) -> None:
        """
        Button to create a new empty region 
        
        Signature ``CreateNewRegionButton()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SearchRegionButton(self) -> None:
        """
        Button to invoke searching region 
        
        Signature ``SearchRegionButton()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetupRegionsInfo(self) -> None:
        """
        Setup the UI data for defining regions 
        
        Signature ``SetupRegionsInfo()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def DisplayProductBody(self) -> None:
        """
        Display the product body in the part file 
        
        Signature ``DisplayProductBody()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def CreateNewRegion(self) -> str:
        """
        Create a new region  
        
        Signature ``CreateNewRegion()`` 
        
        :returns:  new region object created  
        :rtype: str 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def GetOrCreateEmptyRegion(self) -> tuple:
        """
        Get or create an empty region  
        
        Signature ``GetOrCreateEmptyRegion()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (regionName, created). regionName is a str.   empty region object created is a int.   Return flag indicating if an empty region UDO is created 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def DeleteRegion(self, regionName: str) -> None:
        """
        Delete a region 
        
        Signature ``DeleteRegion(regionName)`` 
        
        :param regionName:  region object to be deleted  
        :type regionName: str 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def SetCurrentRegion(self, regionName: str) -> None:
        """
        Set the current region 
        
        Signature ``SetCurrentRegion(regionName)`` 
        
        :param regionName:  current region name  
        :type regionName: str 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def ChangeCurrentRegionName(self, regionName: str) -> int:
        """
        Change the region name for the current region  
        
        Signature ``ChangeCurrentRegionName(regionName)`` 
        
        :param regionName:  region name  
        :type regionName: str 
        :returns:  return status  
        :rtype: int 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def ChangeRegionFacesColor(self, regionName: str, allOrUndefined: int, color: int) -> None:
        """
        Change the color of the faces of a region 
        
        Signature ``ChangeRegionFacesColor(regionName, allOrUndefined, color)`` 
        
        :param regionName:  region name  
        :type regionName: str 
        :param allOrUndefined:  1: All faces, 2: Undefined faces when regionUDO is 0  
        :type allOrUndefined: int 
        :param color:  color for region faces  
        :type color: int 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def ChangeEntitiesColor(self, entities: 'list[NXOpen.TaggedObject]', color: int) -> None:
        """
        Change the color of displayable entities 
        
        Signature ``ChangeEntitiesColor(entities, color)`` 
        
        :param entities:  an array of entities  
        :type entities: list of :py:class:`NXOpen.TaggedObject` 
        :param color:  color for entities  
        :type color: int 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def ChangeRegionLayer(self, regionName: str, layer: int) -> None:
        """
        Change the layer of the region 
        
        Signature ``ChangeRegionLayer(regionName, layer)`` 
        
        :param regionName:  region name  
        :type regionName: str 
        :param layer:  layer for region faces  
        :type layer: int 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def UpdateUndefinedFaces(self, changeColor: int) -> None:
        """
        Update the undefined faces 
        
        Signature ``UpdateUndefinedFaces(changeColor)`` 
        
        :param changeColor:  indicator for changing color too  
        :type changeColor: int 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def DeleteAllExistingRegions(self) -> None:
        """
        Delete all existing regions 
        
        Signature ``DeleteAllExistingRegions()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def UpdateUnsewnBodiesNameAttribute(self, unsewFeatureTag: NXOpen.TaggedObject, cavityFaces: 'list[NXOpen.Face]') -> None:
        """
        Update name attribute for the unsew bodies of the cavity and core regions 
        
        Signature ``UpdateUnsewnBodiesNameAttribute(unsewFeatureTag, cavityFaces)`` 
        
        :param unsewFeatureTag:  Unsewn feature object  
        :type unsewFeatureTag: :py:class:`NXOpen.TaggedObject` 
        :param cavityFaces:  an array of cavity faces  
        :type cavityFaces: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def HookupRegionUdoAndBodyForCavityAndCore(self) -> None:
        """
        Hook up cavity and core region UDO objects with the corresponding sheet bodies 
        
        Signature ``HookupRegionUdoAndBodyForCavityAndCore()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    CreatePartingLinesToggle: bool = ...
    """
    Returns or sets  the create parting lines toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``CreatePartingLinesToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreatePartingLinesToggle`` 
    
    :param createPartingLinesToggle: 
    :type createPartingLinesToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CreateRegionsToggle: bool = ...
    """
    Returns or sets  the create regions toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateRegionsToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateRegionsToggle`` 
    
    :param createRegionsToggle: 
    :type createRegionsToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    FaceColor: NXOpen.NXColor = ...
    """
    Returns or sets  the face color for the selected region faces 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceColor`` 
    
    :param faceColor: 
    :type faceColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectRegionFaces: NXOpen.ScCollector = ...
    """
    Returns  the region faces for defining region 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectRegionFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TranslucencyOption: MWDefineRegionsBuilderTranslucencyOptionType = ...
    """
    Returns or sets  the translucency option for the selected or non-selected region faces 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslucencyOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDefineRegionsBuilderTranslucencyOptionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TranslucencyOption`` 
    
    :param translucencyOption: 
    :type translucencyOption: :py:class:`NXOpen.Tooling.MWDefineRegionsBuilderTranslucencyOptionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TranslucencyValueScale: int = ...
    """
    Returns or sets  the translucency value for the selected or non-selected region faces 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslucencyValueScale`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TranslucencyValueScale`` 
    
    :param translucencyValueScale: 
    :type translucencyValueScale: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: MWDefineRegionsBuilder = ...  # unknown typename


class DieDesignLowerBinderBuilder(NXOpen.Builder):
    """
    Represents a Lower Binder builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieDesignLowerBinderBuilder`
    
    .. versionadded:: NX9.0.0
    """
    BasePlane: NXOpen.Plane = ...
    """
    Returns or sets  the base plane used to create Lower Binder
    
    <hr>
    
    Getter Method
    
    Signature ``BasePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BasePlane`` 
    
    :param basePlane: 
    :type basePlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BinderProfiles: NXOpen.SelectNXObjectList = ...
    """
    Returns  the binder profiles used to create Lower Binder 
    
    <hr>
    
    Getter Method
    
    Signature ``BinderProfiles`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BinderRelief: float = ...
    """
    Returns or sets  the binder relief 
    
    <hr>
    
    Getter Method
    
    Signature ``BinderRelief`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BinderRelief`` 
    
    :param binderRelief: 
    :type binderRelief: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BlankProfile: NXOpen.SelectNXObjectList = ...
    """
    Returns  the blank profile used to create Lower Binder 
    
    <hr>
    
    Getter Method
    
    Signature ``BlankProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BlankProfileOffset: float = ...
    """
    Returns or sets  the blank profile offset 
    
    <hr>
    
    Getter Method
    
    Signature ``BlankProfileOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BlankProfileOffset`` 
    
    :param blankProfileOffset: 
    :type blankProfileOffset: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CoreDirection: int = ...
    """
    Returns or sets  the core direction determines the direction of Lower Binder 
    
    <hr>
    
    Getter Method
    
    Signature ``CoreDirection`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CoreDirection`` 
    
    :param coreDirection: 
    :type coreDirection: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DeckProfile: NXOpen.SelectNXObjectList = ...
    """
    Returns  the deck profile used to create Lower Binder
    
    <hr>
    
    Getter Method
    
    Signature ``DeckProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    IsApproxSheetBody: bool = ...
    """
    Returns or sets  the exact sheet determines whether to use machine allowance 
    
    <hr>
    
    Getter Method
    
    Signature ``IsApproxSheetBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``IsApproxSheetBody`` 
    
    :param isExactSheet: 
    :type isExactSheet: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    IsExactBinderProfiles: bool = ...
    """
    Returns or sets  the exact binder profiles determines whether to use offset value 
    
    <hr>
    
    Getter Method
    
    Signature ``IsExactBinderProfiles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``IsExactBinderProfiles`` 
    
    :param isExactBinderProfiles: 
    :type isExactBinderProfiles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    LowerDeckThickness: float = ...
    """
    Returns or sets  the lower deck thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerDeckThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``LowerDeckThickness`` 
    
    :param lowerDeckThickness: 
    :type lowerDeckThickness: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MachineAllowance: float = ...
    """
    Returns or sets  the machine allowance 
    
    <hr>
    
    Getter Method
    
    Signature ``MachineAllowance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``MachineAllowance`` 
    
    :param machineAllowance: 
    :type machineAllowance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    OffsetValue: float = ...
    """
    Returns or sets  the offset value 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetValue`` 
    
    :param offsetValue: 
    :type offsetValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    OutWallThickness: float = ...
    """
    Returns or sets  the out wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``OutWallThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``OutWallThickness`` 
    
    :param outWallThickness: 
    :type outWallThickness: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    OutterWallProfile: NXOpen.SelectNXObjectList = ...
    """
    Returns  the inner profile used in Lower Binder, it is optional 
    
    <hr>
    
    Getter Method
    
    Signature ``OutterWallProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SheetBody: NXOpen.SelectBody = ...
    """
    Returns  the sheet body used as sheet metal product 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UpperDeckOffsetSheet: NXOpen.SelectBody = ...
    """
    Returns  the upper deck offset sheet used in Lower Binder, it is optional 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperDeckOffsetSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UpperDeckRelief: float = ...
    """
    Returns or sets  the upper deck relief 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperDeckRelief`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``UpperDeckRelief`` 
    
    :param upperDeckRelief: 
    :type upperDeckRelief: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UpperDeckReliefSheet: NXOpen.SelectBody = ...
    """
    Returns  the upper deck relief sheet used in Lower Binder, it is optional 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperDeckReliefSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UpperDeckThickness: float = ...
    """
    Returns or sets  the upper deck thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperDeckThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``UpperDeckThickness`` 
    
    :param upperDeckThickness: 
    :type upperDeckThickness: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallThickness: float = ...
    """
    Returns or sets  the wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``WallThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``WallThickness`` 
    
    :param wallThickness: 
    :type wallThickness: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: DieDesignLowerBinderBuilder = ...  # unknown typename


class DieDesDrawPunchBuilder(NXOpen.Builder):
    """
    Die Design draw punch management builder, create a draw die punch by selected sheet body, curve
    and base plane.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieDesDrawPunchBuilder`
    
    .. versionadded:: NX8.0.0
    """
    ApproximateSheetbodyOption: bool = ...
    """
    Returns or sets  the option to indicate whether to use approximate sheet metal.  
    
    <hr>
    
    Getter Method
    
    Signature ``ApproximateSheetbodyOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApproximateSheetbodyOption`` 
    
    :param approximateSheetbodyOption: 
    :type approximateSheetbodyOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BasePlane: NXOpen.Plane = ...
    """
    Returns or sets  the base plane, which is used for define the base of the punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``BasePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BasePlane`` 
    
    :param basePlane: 
    :type basePlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseThickness: float = ...
    """
    Returns or sets  the base thickness, which is used for define the base thickness of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseThickness`` 
    
    :param baseThickness: 
    :type baseThickness: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseWidth: float = ...
    """
    Returns or sets  the base width, which is used for define the base width value of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseWidth`` 
    
    :param baseWidth: 
    :type baseWidth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BeltThickness: float = ...
    """
    Returns or sets  the belt thickness, which is used for define the belt thickness of the punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``BeltThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BeltThickness`` 
    
    :param beltThickness: 
    :type beltThickness: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CoreDrawPunchOption: bool = ...
    """
    Returns or sets  the option to indicate whether to create core draw punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``CoreDrawPunchOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoreDrawPunchOption`` 
    
    :param coreDrawPunchOption: 
    :type coreDrawPunchOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DeckThickness: float = ...
    """
    Returns or sets  the deck thickness, which is used for define the deck thickness of the punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeckThickness`` 
    
    :param deckThickness: 
    :type deckThickness: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExactSheetbodyOption: bool = ...
    """
    Returns or sets  the option to indicate whether to use exact sheet metal.  
    
    This function has been obsoleted, use
    :py:meth:`Tooling.DieDesDrawPunchBuilder.ApproximateSheetbodyOption` 
    for substitution.
    
    <hr>
    
    Getter Method
    
    Signature ``ExactSheetbodyOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExactSheetbodyOption`` 
    
    :param exactSheetbodyOption: 
    :type exactSheetbodyOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    FlangeProfile: NXOpen.Section = ...
    """
    Returns  the flange profile, which is used for user defined flange shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MachiningAllowance: float = ...
    """
    Returns or sets  the machining allowance, which is used for define the user machining allowance of the punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``MachiningAllowance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MachiningAllowance`` 
    
    :param machiningAllowance: 
    :type machiningAllowance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MainWallCenterLine: NXOpen.Section = ...
    """
    Returns  the main wall center line profile, which is used for user defined main wall shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``MainWallCenterLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PunchCurve: NXOpen.SelectNXObjectList = ...
    """
    Returns  the punch curve, which is used for wall extrusion.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReliefAngle: float = ...
    """
    Returns or sets  the relief angle thickness, which is used for define the relief angle of the punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefAngle`` 
    
    :param reliefAngle: 
    :type reliefAngle: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ReliefDistance: float = ...
    """
    Returns or sets  the relief distance thickness, which is used for define the relief distance of the punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReliefDistance`` 
    
    :param reliefDistance: 
    :type reliefDistance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    SheetBody: NXOpen.SelectBody = ...
    """
    Returns  the sheet body, which is used to trim the punch top face.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SheetBodyDeck: NXOpen.SelectBody = ...
    """
    Returns  the inner deck sheet body, which is used for draw punch inner deck face.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetBodyDeck`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TfeatureSet: NXOpen.Features.Feature = ...
    """
    Returns or sets  the feature set tag.  
    
    <hr>
    
    Getter Method
    
    Signature ``TfeatureSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TfeatureSet`` 
    
    :param tFeatureSet: 
    :type tFeatureSet: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallThickness: float = ...
    """
    Returns or sets  the wall thickness, which is used for define the wall thickness of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``WallThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallThickness`` 
    
    :param wallThickness: 
    :type wallThickness: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: DieDesDrawPunchBuilder = ...  # unknown typename


class MWDefineRegionsCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of MWDefineRegions builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> MWDefineRegionsBuilder:
        """
        Creates a MWDefineRegions builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`MWDefineRegionsBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.MWDefineRegionsBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class SIZERExportBuilderMechanicalData_Struct():
    """
    Defines the mechanical data in Motion mode.  
    
    .
    Constructor: 
    NXOpen.Tooling.SIZERExportBuilder.MechanicalData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Id: int = ...
    """
    Unique ID                
    <hr>
    
    Field Value
    Type:int
    """
    Name: str = ...
    """
    Mechanical Name          
    <hr>
    
    Field Value
    Type:str
    """
    Solution: NXOpen.Motion.MotionSolution = ...
    """
    Motion solution          
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Motion.MotionSolution`
    """
    TorqueGraph: NXOpen.Motion.Graph = ...
    """
    Torque graph in solution 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Motion.Graph`
    """
    SpeedGraph: NXOpen.Motion.Graph = ...
    """
    Speed graph in solution  
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Motion.Graph`
    """
    FrictionTorque: float = ...
    """
    Friction Torque value    
    <hr>
    
    Field Value
    Type:float
    """
    SystemEfficiency: float = ...
    """
    System Efficiency value  
    <hr>
    
    Field Value
    Type:float
    """
    LoadInertia: float = ...
    """
    Load Inertia value       
    <hr>
    
    Field Value
    Type:float
    """
    AdditionalInertia: float = ...
    """
    Additional Inertia value 
    <hr>
    
    Field Value
    Type:float
    """


class ShimBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShimBuilderTypes():
    """
    Specify the shim operation type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AddInsert", " - "
       "EditInsert", " - "
       "DeleteInsert", " - "
    """
    AddInsert = 0  # ShimBuilderTypesMemberType
    EditInsert = 1  # ShimBuilderTypesMemberType
    DeleteInsert = 2  # ShimBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShimBuilderParentOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShimBuilderParentOption():
    """
    Specify the parent node. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoParent", " - "
    """
    NoParent = 0  # ShimBuilderParentOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShimBuilderSideAttributeValuesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShimBuilderSideAttributeValues():
    """
    Specifies the value of side attribute. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "the NONE value"
       "Top", "the TOP value"
       "Bottom", "the BOTTOM value"
    """
    NotSet = 0  # ShimBuilderSideAttributeValuesMemberType
    Top = 1  # ShimBuilderSideAttributeValuesMemberType
    Bottom = 2  # ShimBuilderSideAttributeValuesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShimBuilder(NXOpen.Builder):
    """
    Shim Builder of PDW and EDW.  
    
    A Body is returned by this builder. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateShimBuilder`
    
    Default values.
    
    ===================  =========
    Property             Value
    ===================  =========
    ParentNode           NoParent 
    -------------------  ---------
    RenameToggle         0 
    -------------------  ---------
    SideAttributeValue   None 
    ===================  =========
    
    .. versionadded:: NX10.0.0
    """
    
    class Types():
        """
        Specify the shim operation type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AddInsert", " - "
           "EditInsert", " - "
           "DeleteInsert", " - "
        """
        AddInsert = 0  # ShimBuilderTypesMemberType
        EditInsert = 1  # ShimBuilderTypesMemberType
        DeleteInsert = 2  # ShimBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParentOption():
        """
        Specify the parent node. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoParent", " - "
        """
        NoParent = 0  # ShimBuilderParentOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SideAttributeValues():
        """
        Specifies the value of side attribute. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "the NONE value"
           "Top", "the TOP value"
           "Bottom", "the BOTTOM value"
        """
        NotSet = 0  # ShimBuilderSideAttributeValuesMemberType
        Top = 1  # ShimBuilderSideAttributeValuesMemberType
        Bottom = 2  # ShimBuilderSideAttributeValuesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateInnerProfileSetBuilder(self) -> ShimInnerProfileSetBuilder:
        """
        Create a inner profile set builder object.  
        
        Signature ``CreateInnerProfileSetBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetItemName(self) -> 'list[int]':
        """
        Returns the item name Of Set List 
        
        Signature ``GetItemName()`` 
        
        :returns: the item name 
        :rtype: list of int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetItemName(self, itemName: 'list[int]') -> None:
        """
        Sets the item name of Set List 
        
        Signature ``SetItemName(itemName)`` 
        
        :param itemName: the item name 
        :type itemName: list of int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    Height: NXOpen.Expression = ...
    """
    Returns  the height of shim body 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    InsertToDelete: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the shim component that needs to be deleted 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertToDelete`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    InsertToEdit: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the shim component that needs to be edit 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertToEdit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OffsetOuterDistance: NXOpen.Expression = ...
    """
    Returns  the offset distance of outer loop 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetOuterDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OuterRoughOffset: bool = ...
    """
    Returns or sets  the outer rough offset 
    
    <hr>
    
    Getter Method
    
    Signature ``OuterRoughOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OuterRoughOffset`` 
    
    :param outerRoughOffset: 
    :type outerRoughOffset: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ParentNode: ShimBuilderParentOption = ...
    """
    Returns or sets  the parent node which shim part will be insert to 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentNode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ShimBuilderParentOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentNode`` 
    
    :param parentNode: 
    :type parentNode: :py:class:`NXOpen.Tooling.ShimBuilderParentOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name of shim part 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPartName: 
    :type parentPartName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RenameToggle: bool = ...
    """
    Returns or sets  the toggle to indicate whether to rename shim part 
    
    <hr>
    
    Getter Method
    
    Signature ``RenameToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameToggle`` 
    
    :param renameToggle: 
    :type renameToggle: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ShimFace: NXOpen.SelectFaceList = ...
    """
    Returns  the face for doing shim body 
    
    <hr>
    
    Getter Method
    
    Signature ``ShimFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SideAttributeValue: ShimBuilderSideAttributeValues = ...
    """
    Returns or sets  the side attribute value for shim.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideAttributeValue`` 
    
    :returns:  Indicates the side attribute value for shim  
    :rtype: :py:class:`NXOpen.Tooling.ShimBuilderSideAttributeValues` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideAttributeValue`` 
    
    :param sideAttributeValue:  Indicates the side attribute value for shim  
    :type sideAttributeValue: :py:class:`NXOpen.Tooling.ShimBuilderSideAttributeValues` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SlugholeProfile: ShimInnerProfileSetBuilderList = ...
    """
    Returns  the list containing the inner profiles which need to offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlugholeProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilderList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Type: ShimBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ShimBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.ShimBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: ShimBuilder = ...  # unknown typename


class BomListBuilderBomListTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BomListBuilderBomListTypes():
    """
    Represents an index to components list type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BomList", "A list includes components in BOM"
       "HideList", "A list includes hidden components"
    """
    BomList = 0  # BomListBuilderBomListTypesMemberType
    HideList = 1  # BomListBuilderBomListTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BomListBuilderBomListSortOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BomListBuilderBomListSortOption():
    """
    Represents an enumeration indicating whether the sorting needs to be performed in ascending or descending order. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unsorted", "Unsorted"
       "Ascending", "Ascending"
       "Descending", "Descending"
    """
    Unsorted = 0  # BomListBuilderBomListSortOptionMemberType
    Ascending = 1  # BomListBuilderBomListSortOptionMemberType
    Descending = 2  # BomListBuilderBomListSortOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BomListBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.BomListBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateBomListBuilder`
    
    Default values.
    
    ============  ========
    Property      Value
    ============  ========
    BomListType   BomList 
    ============  ========
    
    .. versionadded:: NX10.0.0
    """
    
    class BomListTypes():
        """
        Represents an index to components list type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BomList", "A list includes components in BOM"
           "HideList", "A list includes hidden components"
        """
        BomList = 0  # BomListBuilderBomListTypesMemberType
        HideList = 1  # BomListBuilderBomListTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BomListSortOption():
        """
        Represents an enumeration indicating whether the sorting needs to be performed in ascending or descending order. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unsorted", "Unsorted"
           "Ascending", "Ascending"
           "Descending", "Descending"
        """
        Unsorted = 0  # BomListBuilderBomListSortOptionMemberType
        Ascending = 1  # BomListBuilderBomListSortOptionMemberType
        Descending = 2  # BomListBuilderBomListSortOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateEwBlankAttributes(self) -> None:
        """
        Updates the blank attributes of electrodes in Electrode Design Application.  
        
        Signature ``UpdateEwBlankAttributes()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ParseBomTemplate(self) -> None:
        """
        Parses the current BOM template.  
        
        Use this function to populate data in data provider of BOM. 
        
        Signature ``ParseBomTemplate()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def PopulateBomListData(self) -> None:
        """
        Populates BOM list data according to current template.  
        
        Signature ``PopulateBomListData()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AddBomData(self, partOccs: 'list[NXOpen.Assemblies.Component]', dataStrings: 'list[str]') -> None:
        """
        Adds a new record into BOM list.  
        
        Signature ``AddBomData(partOccs, dataStrings)`` 
        
        :param partOccs:  The part occurrences to add into BOM. Sets NULL to add the current display part into BOM list. 
        :type partOccs: list of :py:class:`NXOpen.Assemblies.Component` 
        :param dataStrings:  The BOM data.  
        :type dataStrings: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ShowComponents(self, rowID: int, partOccs: 'list[NXOpen.Assemblies.Component]') -> None:
        """
        Shows the corresponding components of given row in the BOM List so that the components can be exported to spreadsheet.  
        
        Signature ``ShowComponents(rowID, partOccs)`` 
        
        :param rowID: 
        :type rowID: int 
        :param partOccs:  The part occurrences to be shown in BOM List. Sets NULL show all part occurrences in given row in BOM List.  
        :type partOccs: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ShowRows(self, rowIDs: 'list[int]') -> None:
        """
        Shows the given rows in the BOM List so that all the components of the rows can be exported to spreadsheet.  
        
        Signature ``ShowRows(rowIDs)`` 
        
        :param rowIDs: 
        :type rowIDs: list of int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def IgnoreComponents(self, rowID: int, partOccs: 'list[NXOpen.Assemblies.Component]') -> None:
        """
        Ignores the corresponding components of given row in the Hide List so that the components can not be exported to spreadsheet.  
        
        Signature ``IgnoreComponents(rowID, partOccs)`` 
        
        :param rowID: 
        :type rowID: int 
        :param partOccs:  The part occurrences to be ignored in Hide List. Sets NULL to ignore all part occurrences in given row in Hide List.  
        :type partOccs: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def IgnoreRows(self, rowIDs: 'list[int]') -> None:
        """
        Ignores the given rows in the Hide List so that all the components of the rows can not be exported to spreadsheet.  
        
        Signature ``IgnoreRows(rowIDs)`` 
        
        :param rowIDs: 
        :type rowIDs: list of int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SortColumn(self, columnID: int, order: BomListBuilderBomListSortOption) -> None:
        """
        Sorts the given column.  
        
        Signature ``SortColumn(columnID, order)`` 
        
        :param columnID: 
        :type columnID: int 
        :param order: 
        :type order: :py:class:`NXOpen.Tooling.BomListBuilderBomListSortOption` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreatePartsList(self, columnWidths: 'list[int]', point: NXOpen.Point3d) -> NXOpen.DisplayableObject:
        """
        Creates parts list for the assembly.  
        
        Signature ``CreatePartsList(columnWidths, point)`` 
        
        :param columnWidths:  The widths of each column.  
        :type columnWidths: list of int 
        :param point:  The position of parts list.  
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  The created parts list.  
        :rtype: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetColumnLabel(self, columnID: int) -> str:
        """
        Gets the column label.  
        
        Signature ``GetColumnLabel(columnID)`` 
        
        :param columnID:  Column index  
        :type columnID: int 
        :returns:  Column Label  
        :rtype: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetColumnAttribute(self, columnID: int) -> str:
        """
        Gets the corresponding attribute name of given column.  
        
        Signature ``GetColumnAttribute(columnID)`` 
        
        :param columnID:  Column index  
        :type columnID: int 
        :returns:  Column attribute  
        :rtype: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPartOccs(self, rowID: int) -> 'list[NXOpen.Assemblies.Component]':
        """
        Gets the corresponding part occurrences of given row.  
        
        Signature ``GetPartOccs(rowID)`` 
        
        :param rowID: 
        :type rowID: int 
        :returns:  The corresponding part occurrences of given row.  
        :rtype: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetRows(self, bomListType: BomListBuilderBomListTypes) -> 'list[int]':
        """
        Gets all the row numbers in the given List 
        
        Signature ``GetRows(bomListType)`` 
        
        :param bomListType: 
        :type bomListType: :py:class:`NXOpen.Tooling.BomListBuilderBomListTypes` 
        :returns:  All row numbers in the given list  
        :rtype: list of int 
        
        .. versionadded:: NX10.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`Tooling.BomListDataProvider.RowCount` instead.
        
        License requirements: None.
        """
        ...
    
    
    def GetAttributeStrings(self) -> 'list[str]':
        """
        Gets all the attributes listed in the current template 
        
        Signature ``GetAttributeStrings()`` 
        
        :returns:  Attribute strings.  
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`Tooling.BomListBuilder.GetColumnAttribute` instead.
        
        License requirements: None.
        """
        ...
    
    
    def GetColumn(self, attrString: str) -> None:
        """
        Gets column number of given attribute
        
        Signature ``GetColumn(attrString)`` 
        
        :param attrString: 
        :type attrString: str 
        
        .. versionadded:: NX10.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`Tooling.BomListBuilder.GetColumnAttribute` instead.
        
        License requirements: None.
        """
        ...
    
    
    def ModifyBomData(self, rowNumber: int, columnNumber: int, userString: str) -> None:
        """
        Modifies BOM data
        
        Signature ``ModifyBomData(rowNumber, columnNumber, userString)`` 
        
        :param rowNumber: 
        :type rowNumber: int 
        :param columnNumber: 
        :type columnNumber: int 
        :param userString: 
        :type userString: str 
        
        .. versionadded:: NX10.0.0
        
        .. deprecated::  NX11.0.0
           Use :py:meth:`Tooling.BomListDataProvider.SetString` instead.
        
        License requirements: None.
        """
        ...
    
    BomListDataProvider: BomListDataProvider = ...
    """
    Returns  the data provider of BOM 
    
    <hr>
    
    Getter Method
    
    Signature ``BomListDataProvider`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BomListDataProvider` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    BomListType: BomListBuilderBomListTypes = ...
    """
    Returns or sets  the tree list shows which kind of components should be included in 
    
    <hr>
    
    Getter Method
    
    Signature ``BomListType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BomListBuilderBomListTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BomListType`` 
    
    :param bomListType: 
    :type bomListType: :py:class:`NXOpen.Tooling.BomListBuilderBomListTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BomTemplate: str = ...
    """
    Returns or sets  the template file of bom
    
    <hr>
    
    Getter Method
    
    Signature ``BomTemplate`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BomTemplate`` 
    
    :param bomTemplate: 
    :type bomTemplate: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectComponents: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the select component needed to get stocksize
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: BomListBuilder = ...  # unknown typename


class AddReusablePartCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of AddReusablePart   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> AddReusablePart:
        """
        Creates a AddReusablePart builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`AddReusablePart` object object  
        :rtype: :py:class:`NXOpen.Tooling.AddReusablePart` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    


class BendOperationBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendOperationBuilderTypes():
    """
    unbend operations. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unbend", "unbend operation"
       "Rebend", "rebend operation"
       "Prebend", "prebend operation"
       "Overbend", "overbend operation"
    """
    Unbend = 0  # BendOperationBuilderTypesMemberType
    Rebend = 1  # BendOperationBuilderTypesMemberType
    Prebend = 2  # BendOperationBuilderTypesMemberType
    Overbend = 3  # BendOperationBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendOperationBuilderPrebendMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendOperationBuilderPrebend():
    """
    The number of children bends of prebend. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Two", "two prebends"
       "Three", "three prebends"
       "Four", "four prebends"
       "Five", "five prebends"
       "Six", "six prebends"
    """
    Two = 0  # BendOperationBuilderPrebendMemberType
    Three = 1  # BendOperationBuilderPrebendMemberType
    Four = 2  # BendOperationBuilderPrebendMemberType
    Five = 3  # BendOperationBuilderPrebendMemberType
    Six = 4  # BendOperationBuilderPrebendMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendOperationBuilderOverbendOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BendOperationBuilderOverbendOptions():
    """
    The overbend option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ResizeBendAngle", "overbend by resize bend angle"
       "ResizeBendRadius", "overbend by resize bend radius"
    """
    ResizeBendAngle = 0  # BendOperationBuilderOverbendOptionsMemberType
    ResizeBendRadius = 1  # BendOperationBuilderOverbendOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BendOperationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.BendOperationBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.BendOperationCollection.CreateBendOperationBuilder`
    
    Default values.
    
    =========================================  ================
    Property                                   Value
    =========================================  ================
    AlternateResult                            0 
    -----------------------------------------  ----------------
    BendAngle1                                 30 
    -----------------------------------------  ----------------
    BendAngle2                                 30 
    -----------------------------------------  ----------------
    BendAngle3                                 30 
    -----------------------------------------  ----------------
    BendAngle4                                 30 
    -----------------------------------------  ----------------
    BendAngle5                                 30 
    -----------------------------------------  ----------------
    BendDevLength                              0.0 
    -----------------------------------------  ----------------
    BendNeutralFactor                          0.4 
    -----------------------------------------  ----------------
    BendNumPrebends                            Two 
    -----------------------------------------  ----------------
    DefineNeutralFactor.BendDevelopedLength    0 
    -----------------------------------------  ----------------
    DefineNeutralFactor.NeutralFactor          0.40 
    -----------------------------------------  ----------------
    DefineNeutralFactor.NeutralFactorFormula   General 
    -----------------------------------------  ----------------
    DefineNeutralFactor.PartMaterial           08 
    -----------------------------------------  ----------------
    FixTabFlangePosition                       0 
    -----------------------------------------  ----------------
    KeepRadiusFixed                            0 
    -----------------------------------------  ----------------
    OverbendAngle                              0 
    -----------------------------------------  ----------------
    OverbendOption                             ResizeBendAngle 
    -----------------------------------------  ----------------
    RestorePosition                            0 
    =========================================  ================
    
    .. versionadded:: NX8.5.0
    """
    
    class Types():
        """
        unbend operations. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unbend", "unbend operation"
           "Rebend", "rebend operation"
           "Prebend", "prebend operation"
           "Overbend", "overbend operation"
        """
        Unbend = 0  # BendOperationBuilderTypesMemberType
        Rebend = 1  # BendOperationBuilderTypesMemberType
        Prebend = 2  # BendOperationBuilderTypesMemberType
        Overbend = 3  # BendOperationBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Prebend():
        """
        The number of children bends of prebend. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Two", "two prebends"
           "Three", "three prebends"
           "Four", "four prebends"
           "Five", "five prebends"
           "Six", "six prebends"
        """
        Two = 0  # BendOperationBuilderPrebendMemberType
        Three = 1  # BendOperationBuilderPrebendMemberType
        Four = 2  # BendOperationBuilderPrebendMemberType
        Five = 3  # BendOperationBuilderPrebendMemberType
        Six = 4  # BendOperationBuilderPrebendMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OverbendOptions():
        """
        The overbend option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ResizeBendAngle", "overbend by resize bend angle"
           "ResizeBendRadius", "overbend by resize bend radius"
        """
        ResizeBendAngle = 0  # BendOperationBuilderOverbendOptionsMemberType
        ResizeBendRadius = 1  # BendOperationBuilderOverbendOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AlternateResult: bool = ...
    """
    Returns or sets  the switch to set if use an alternate result.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlternateResult`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlternateResult`` 
    
    :param alternateResult: 
    :type alternateResult: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BaseBody: NXOpen.Body = ...
    """
    Returns or sets  the base body.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseBody`` 
    
    :param baseBody: 
    :type baseBody: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendAngle1: float = ...
    """
    Returns or sets  the first angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle1`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle1`` 
    
    :param angle1: 
    :type angle1: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendAngle2: float = ...
    """
    Returns or sets  the second angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle2`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle2`` 
    
    :param angle2: 
    :type angle2: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendAngle3: float = ...
    """
    Returns or sets  the third angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle3`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle3`` 
    
    :param angle3: 
    :type angle3: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendAngle4: float = ...
    """
    Returns or sets  the fourth angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle4`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle4`` 
    
    :param angle4: 
    :type angle4: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendAngle5: float = ...
    """
    Returns or sets  the fifth angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle5`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle5`` 
    
    :param angle5: 
    :type angle5: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendDevLength: float = ...
    """
    Returns or sets  the operation to developed length of a bend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendDevLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendDevLength`` 
    
    :param devLength: 
    :type devLength: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendNeutralFactor: float = ...
    """
    Returns or sets  the operation of k factor for a single bend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendNeutralFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendNeutralFactor`` 
    
    :param kFactor: 
    :type kFactor: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendNumPrebends: BendOperationBuilderPrebend = ...
    """
    Returns or sets  the number of prebends.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendNumPrebends`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendOperationBuilderPrebend` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendNumPrebends`` 
    
    :param numBends: 
    :type numBends: :py:class:`NXOpen.Tooling.BendOperationBuilderPrebend` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DefineNeutralFactor: DefineNeutralFactorBuilder = ...
    """
    Returns  the define neutral factor builder which contains new neutral factor, part material and bend developed length 
    
    <hr>
    
    Getter Method
    
    Signature ``DefineNeutralFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DefineNeutralFactorBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    FixTabFlangePosition: bool = ...
    """
    Returns or sets  the switch to set if fixed tab or flange position while resize bend radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``FixTabFlangePosition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FixTabFlangePosition`` 
    
    :param fixTabFlangePosition: 
    :type fixTabFlangePosition: bool 
    
    .. versionadded:: NX9.0.3
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    KeepRadiusFixed: bool = ...
    """
    Returns or sets  the keep radius fixed.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepRadiusFixed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepRadiusFixed`` 
    
    :param keepRadiusFixed: 
    :type keepRadiusFixed: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OverbendAngle: float = ...
    """
    Returns or sets  the overbend angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``OverbendAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverbendAngle`` 
    
    :param overbendAngle: 
    :type overbendAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OverbendOption: BendOperationBuilderOverbendOptions = ...
    """
    Returns or sets  the overbend option 
    
    <hr>
    
    Getter Method
    
    Signature ``OverbendOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendOperationBuilderOverbendOptions` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverbendOption`` 
    
    :param overbendOption: 
    :type overbendOption: :py:class:`NXOpen.Tooling.BendOperationBuilderOverbendOptions` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OverbendRadius: float = ...
    """
    Returns or sets  the overbend radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``OverbendRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverbendRadius`` 
    
    :param overbendRadius: 
    :type overbendRadius: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReferObject: NXOpen.SelectEdgeList = ...
    """
    Returns  the reference objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ResizeRadius: bool = ...
    """
    Returns or sets  the resize radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``ResizeRadius`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ResizeRadius`` 
    
    :param resizeRadius: 
    :type resizeRadius: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RestorePosition: bool = ...
    """
    Returns or sets  the switch to set whether restore the overbend part position.  
    
    <hr>
    
    Getter Method
    
    Signature ``RestorePosition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RestorePosition`` 
    
    :param restorePosition: 
    :type restorePosition: bool 
    
    .. versionadded:: NX9.0.3
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectedBend: NXOpen.SelectFaceList = ...
    """
    Returns  the selection of bends.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedBend`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: BendOperationBuilderTypes = ...
    """
    Returns or sets  the type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BendOperationBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.BendOperationBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WorkPart: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the work part.  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: BendOperationBuilder = ...  # unknown typename


class FastenerAssyCustomizationCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of FastenerAssyCustomizationBuilder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> FastenerAssyCustomizationBuilder:
        """
        Creates a FastenerAssyCustomization builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns:  Fastener Assy Customization Builder object  
        :rtype: :py:class:`NXOpen.Tooling.FastenerAssyCustomizationBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class StockSizeBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockSizeBuilderTypes():
    """
    Represents the shape of stock size. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Block", "The shape is a block"
       "Cylinder", "The shape is a cylinder"
    """
    Block = 0  # StockSizeBuilderTypesMemberType
    Cylinder = 1  # StockSizeBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockSizeBuilderRefCsysTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockSizeBuilderRefCsysType():
    """
    Represents the reference CSYS type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Wcs", "reference WCS"
       "AbsoluteDisplayedPart", "reference ABS in displayed part"
       "SelectedCSYS", "reference the selected csys"
    """
    Wcs = 0  # StockSizeBuilderRefCsysTypeMemberType
    AbsoluteDisplayedPart = 1  # StockSizeBuilderRefCsysTypeMemberType
    SelectedCSYS = 2  # StockSizeBuilderRefCsysTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockSizeBuilderShapeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockSizeBuilderShape():
    """
    Represents the shape of stock size. This is to be obsoleted.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Block", "The shape is a block"
       "Cylinder", "The shape is a cylinder"
    """
    Block = 0  # StockSizeBuilderShapeMemberType
    Cylinder = 1  # StockSizeBuilderShapeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockSizeBuilderCylinderMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StockSizeBuilderCylinder():
    """
    Represents the base circle type of cylinder.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circumscribed", "circumcircle based cylinder"
       "InscribedCircle", "inscribed circle based cylinder"
    """
    Circumscribed = 0  # StockSizeBuilderCylinderMemberType
    InscribedCircle = 1  # StockSizeBuilderCylinderMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StockSizeBuilder(NXOpen.Builder):
    """
    Represents a Tooling::StockSizeBuilder builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.StockSizeCollection.CreateStocksizeBuilder`
    
    Default values.
    
    ===================  ============================================
    Property             Value
    ===================  ============================================
    Associative          1 
    -------------------  --------------------------------------------
    Clearance.Value      3.0 (millimeters part), 0.125 (inches part) 
    -------------------  --------------------------------------------
    IsClearanceAutoSet   0 
    -------------------  --------------------------------------------
    ReferenceCsysType    Wcs 
    -------------------  --------------------------------------------
    ShowDiameterSymbol   1 
    -------------------  --------------------------------------------
    SizePrecision        3 
    ===================  ============================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Represents the shape of stock size. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Block", "The shape is a block"
           "Cylinder", "The shape is a cylinder"
        """
        Block = 0  # StockSizeBuilderTypesMemberType
        Cylinder = 1  # StockSizeBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RefCsysType():
        """
        Represents the reference CSYS type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Wcs", "reference WCS"
           "AbsoluteDisplayedPart", "reference ABS in displayed part"
           "SelectedCSYS", "reference the selected csys"
        """
        Wcs = 0  # StockSizeBuilderRefCsysTypeMemberType
        AbsoluteDisplayedPart = 1  # StockSizeBuilderRefCsysTypeMemberType
        SelectedCSYS = 2  # StockSizeBuilderRefCsysTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Shape():
        """
        Represents the shape of stock size. This is to be obsoleted.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Block", "The shape is a block"
           "Cylinder", "The shape is a cylinder"
        """
        Block = 0  # StockSizeBuilderShapeMemberType
        Cylinder = 1  # StockSizeBuilderShapeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Cylinder():
        """
        Represents the base circle type of cylinder.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circumscribed", "circumcircle based cylinder"
           "InscribedCircle", "inscribed circle based cylinder"
        """
        Circumscribed = 0  # StockSizeBuilderCylinderMemberType
        InscribedCircle = 1  # StockSizeBuilderCylinderMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ModifyRefCsys(self, inputOrigin: NXOpen.Point3d, inputMatrix: NXOpen.Matrix3x3) -> None:
        """
        Modifies the reference csys for stock size.  
        
        Signature ``ModifyRefCsys(inputOrigin, inputMatrix)`` 
        
        :param inputOrigin: 
        :type inputOrigin: :py:class:`NXOpen.Point3d` 
        :param inputMatrix: 
        :type inputMatrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateRefCsys(self, inputOrigin: NXOpen.Point3d, inputMatrix: NXOpen.Matrix3x3) -> None:
        """
        Creates the reference csys for stock size.  
        
        Signature ``CreateRefCsys(inputOrigin, inputMatrix)`` 
        
        :param inputOrigin: 
        :type inputOrigin: :py:class:`NXOpen.Point3d` 
        :param inputMatrix: 
        :type inputMatrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditStockSizeAttr(self, workPart: NXOpen.NXObject) -> None:
        """
        Add or edit stock size attributes.  
        
        Signature ``EditStockSizeAttr(workPart)`` 
        
        :param workPart: 
        :type workPart: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateBlankSizeString(self) -> None:
        """
        Update blank size.  
        
        Signature ``UpdateBlankSizeString()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def UpdateStockSizeString(self) -> None:
        """
        Update stock size.  
        
        Signature ``UpdateStockSizeString()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CalculateBoxSize(self) -> tuple:
        """
        Calculate box size and get directions, edge length, lower point position.  
        
        Signature ``CalculateBoxSize()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (minPoint, edgeLength, cysMatrix). minPoint is a :py:class:`NXOpen.Point3d`. edgeLength is a list of float. cysMatrix is a :py:class:`NXOpen.Matrix3x3`. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetManipulatorOrientation(self, cysMatrix: NXOpen.Matrix3x3) -> None:
        """
        Set the orientation of the current bounded box.  
        
        Signature ``SetManipulatorOrientation(cysMatrix)`` 
        
        :param cysMatrix: 
        :type cysMatrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetFitFaceStatus(self, fitFace: bool) -> None:
        """
        Find out those extreme planar faces, and set fitting face status in all directions.  
        
        Signature ``SetFitFaceStatus(fitFace)`` 
        
        :param fitFace: 
        :type fitFace: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetStockSizeObject(self, stock: NXOpen.NXObject) -> None:
        """
        Set stock size object.  
        
        Signature ``SetStockSizeObject(stock)`` 
        
        :param stock: 
        :type stock: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ConvertStockDataToBuilder(self, stock: NXOpen.NXObject) -> None:
        """
        Convert stock size object data to builder.  
        
        Signature ``ConvertStockDataToBuilder(stock)`` 
        
        :param stock: 
        :type stock: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    Associative: bool = ...
    """
    Returns or sets  the association of stock size object 
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param isAssociation: 
    :type isAssociation: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    AxisVector: NXOpen.Direction = ...
    """
    Returns or sets  the cylinder axis vector to calculate cylinder stock szie
    
    <hr>
    
    Getter Method
    
    Signature ``AxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AxisVector`` 
    
    :param cylinderVector: 
    :type cylinderVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BlankPrecisionValue: float = ...
    """
    Returns or sets  the blank size precision string.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankPrecisionValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankPrecisionValue`` 
    
    :param blankPrecisionValue: 
    :type blankPrecisionValue: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BlankSize: str = ...
    """
    Returns or sets  the blank size string, it is separated by " X ".  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankSize`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankSize`` 
    
    :param blankSize: 
    :type blankSize: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Clearance: NXOpen.Expression = ...
    """
    Returns  the clearance of the stocksize.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ConnectionString: str = ...
    """
    Returns or sets  the connection string 
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectionString`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConnectionString`` 
    
    :param connectionString: 
    :type connectionString: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    CylinderType: StockSizeBuilderCylinder = ...
    """
    Returns or sets  the cylinder type to generate a cylinder for the stock size.  
    
    <hr>
    
    Getter Method
    
    Signature ``CylinderType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StockSizeBuilderCylinder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CylinderType`` 
    
    :param enumCylinderType: 
    :type enumCylinderType: :py:class:`NXOpen.Tooling.StockSizeBuilderCylinder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    IsClearanceAutoSet: bool = ...
    """
    Returns or sets  the is clearance auto set 
    
    <hr>
    
    Getter Method
    
    Signature ``IsClearanceAutoSet`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsClearanceAutoSet`` 
    
    :param isClearanceAutoSet: 
    :type isClearanceAutoSet: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetNegativeX: float = ...
    """
    Returns or sets  the clearance value for the blank in -X direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetNegativeX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetNegativeX`` 
    
    :param offsetNegativeX: 
    :type offsetNegativeX: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetNegativeY: float = ...
    """
    Returns or sets  the clearance value for the blank in -Y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetNegativeY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetNegativeY`` 
    
    :param offsetNegativeY: 
    :type offsetNegativeY: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetNegativeZ: float = ...
    """
    Returns or sets  the clearance value for the blank in -Z direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetNegativeZ`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetNegativeZ`` 
    
    :param offsetNegativeZ: 
    :type offsetNegativeZ: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetPositiveX: float = ...
    """
    Returns or sets  the clearance value for the blank in +X direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPositiveX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetPositiveX`` 
    
    :param offsetPositiveX: 
    :type offsetPositiveX: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetPositiveY: float = ...
    """
    Returns or sets  the clearance value for the blank in +Y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPositiveY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetPositiveY`` 
    
    :param offsetPositiveY: 
    :type offsetPositiveY: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetPositiveZ: float = ...
    """
    Returns or sets  the clearance value for the blank in +Z direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPositiveZ`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetPositiveZ`` 
    
    :param offsetPositiveZ: 
    :type offsetPositiveZ: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RadialOffset: float = ...
    """
    Returns or sets  the clearance value for the cylinder blank in radial direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadialOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RadialOffset`` 
    
    :param radialOffset: 
    :type radialOffset: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RefCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the reference csys to calculate stocksize.  
    
    <hr>
    
    Getter Method
    
    Signature ``RefCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RefCsys`` 
    
    :param refCsys: 
    :type refCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    RefCsysSelection: NXOpen.SelectCoordinateSystem = ...
    """
    Returns  the reference csys to calculate stocksize.  
    
    <hr>
    
    Getter Method
    
    Signature ``RefCsysSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCoordinateSystem` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ReferenceCsysType: StockSizeBuilderRefCsysType = ...
    """
    Returns or sets  the reference csys type 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceCsysType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StockSizeBuilderRefCsysType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceCsysType`` 
    
    :param referenceCsysType: 
    :type referenceCsysType: :py:class:`NXOpen.Tooling.StockSizeBuilderRefCsysType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectBody: NXOpen.SelectBodyList = ...
    """
    Returns  the selected body to calculate a bounding box for stock size.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ShowDiameterSymbol: bool = ...
    """
    Returns or sets  the attribute which determines whether the diameter symbol is shown or not when stock type is cylinder
    
    <hr>
    
    Getter Method
    
    Signature ``ShowDiameterSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowDiameterSymbol`` 
    
    :param showDiameterSymbol: 
    :type showDiameterSymbol: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SizePrecision: int = ...
    """
    Returns or sets  the size precision of the stock.  
    
    <hr>
    
    Getter Method
    
    Signature ``SizePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SizePrecision`` 
    
    :param integerPrecision: 
    :type integerPrecision: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    StockType: StockSizeBuilderShape = ...
    """
    Returns or sets  the stock shape to be generated, it can be a box or cylinder.  
    
    <hr>
    
    Getter Method
    
    Signature ``StockType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StockSizeBuilderShape` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StockType`` 
    
    :param enumStockType: 
    :type enumStockType: :py:class:`NXOpen.Tooling.StockSizeBuilderShape` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    StringStock: str = ...
    """
    Returns or sets  the stock size string, it is separated by " X ".  
    
    <hr>
    
    Getter Method
    
    Signature ``StringStock`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StringStock`` 
    
    :param stringStock: 
    :type stringStock: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: StockSizeBuilderTypes = ...
    """
    Returns or sets  the stock shape to be generated, it can be a block or cylinder.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StockSizeBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.StockSizeBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: StockSizeBuilder = ...  # unknown typename


class ClonePart(NXOpen.TransientObject):
    """
    Represents the part inforamtion to be cloned in Add Reusable Component Builder.  
    
    To create an instace of this object use :py:meth:`NXOpen.Tooling.CloneObject.CreateClonePartItem`
    
    .. versionadded:: NX6.0.0
    """
    
    def Dispose(self) -> None:
        """
        Dispose the part infomation to be cloned 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    IsClone: bool = ...
    """
    Returns or sets   a value that indicates whether this object is to be cloned.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsClone`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsClone`` 
    
    :param isClone: 
    :type isClone: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NewItemId: str = ...
    """
    Returns or sets   the item id in Teamcenter after renaming.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewItemId`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewItemId`` 
    
    :param itemId: 
    :type itemId: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NewItemType: str = ...
    """
    Returns or sets   the item type in Teamcenter after renaming.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewItemType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewItemType`` 
    
    :param itemType: 
    :type itemType: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NewMfkId: str = ...
    """
    Returns or sets   the mfk id in Teamcenter after renaming.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewMfkId`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewMfkId`` 
    
    :param mfkId: 
    :type mfkId: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    NewPartName: str = ...
    """
    Returns or sets   the part name (item name in Teamcenter) after renaming.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewPartName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewPartName`` 
    
    :param clonedName: 
    :type clonedName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NewRevisionId: str = ...
    """
    Returns or sets   the revision id in Teamcenter after renaming.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewRevisionId`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewRevisionId`` 
    
    :param revId: 
    :type revId: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PartName: str = ...
    """
    Returns or sets   the part name (item id in Teamcenter) before renaming.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartName`` 
    
    :param partName: 
    :type partName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """


class MWDefineSheetsBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWDefineSheetsBuilderTypes():
    """
    The types for defining Cavity and Core. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Region", " - "
       "SplitBody", " - "
    """
    Region = 0  # MWDefineSheetsBuilderTypesMemberType
    SplitBody = 1  # MWDefineSheetsBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWDefineSheetsBuilderDefineStepTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWDefineSheetsBuilderDefineStepType():
    """
    The define steps for defining Cavity and Core using the Split Body method. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CutSolids", " - "
       "CavityandCore", " - "
    """
    CutSolids = 0  # MWDefineSheetsBuilderDefineStepTypeMemberType
    CavityandCore = 1  # MWDefineSheetsBuilderDefineStepTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWDefineSheetsBuilder(NXOpen.Builder):
    """
    Builder for defining sheets in Mold Wizard   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWDefineSheetsCollection.CreateBuilder`
    
    Default values.
    
    ===========================  ==============
    Property                     Value
    ===========================  ==============
    CheckGeometryToggle          0 
    ---------------------------  --------------
    CheckOverlappingToggle       0 
    ---------------------------  --------------
    DefineStep                   CavityandCore 
    ---------------------------  --------------
    NoInteractionQueriesToggle   0 
    ---------------------------  --------------
    RenameComponentPartToggle    0 
    ---------------------------  --------------
    SewTolerance                 0.01 
    ===========================  ==============
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        The types for defining Cavity and Core. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Region", " - "
           "SplitBody", " - "
        """
        Region = 0  # MWDefineSheetsBuilderTypesMemberType
        SplitBody = 1  # MWDefineSheetsBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DefineStepType():
        """
        The define steps for defining Cavity and Core using the Split Body method. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CutSolids", " - "
           "CavityandCore", " - "
        """
        CutSolids = 0  # MWDefineSheetsBuilderDefineStepTypeMemberType
        CavityandCore = 1  # MWDefineSheetsBuilderDefineStepTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SuppressPartingButton(self) -> None:
        """
        Button for suppressing parting 
        
        Signature ``SuppressPartingButton()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def InitBuilderData(self) -> None:
        """
        Initialize the data for the "Define Sheets" builder 
        
        Signature ``InitBuilderData()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def UpdateBuilderData(self) -> None:
        """
        Update the data for the "Define Sheets" builder 
        
        Signature ``UpdateBuilderData()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def SaveBuilderData(self) -> None:
        """
        Save the data for the "Define Sheets" builder 
        
        Signature ``SaveBuilderData()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def ResetBuilderData(self) -> None:
        """
        Reset the data for the "Define Sheets" builder 
        
        Signature ``ResetBuilderData()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def SetAllRegionUdosSelected(self, allRegionUDOsSelected: int) -> None:
        """
        Set the flag to indicate if the node for all the region UDOs in the tree list is selected 
        
        Signature ``SetAllRegionUdosSelected(allRegionUDOsSelected)`` 
        
        :param allRegionUDOsSelected:  Flag indicates if the tree node for all regions is selected  
        :type allRegionUDOsSelected: int 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def SetSelectedRegions(self, regionNames: 'list[str]') -> None:
        """
        Set the selected regions in the tree list 
        
        Signature ``SetSelectedRegions(regionNames)`` 
        
        :param regionNames:  an array of regions  
        :type regionNames: list of str 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def DeleteExistingSheets(self) -> None:
        """
        For suppressing parting, or delete existing sheets 
        
        Signature ``DeleteExistingSheets()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def PerformDisplayAndHighlight(self) -> None:
        """
        Perform display and highlight for the selected region when there is only one selected 
        
        Signature ``PerformDisplayAndHighlight()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def TurnOffAllSheets(self) -> None:
        """
        Turn off all parting and patched sheets 
        
        Signature ``TurnOffAllSheets()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def DisplayRegionOrSheetBody(self, onOff: int) -> None:
        """
        Turn on or off the display for the region or sheet body for the selected regions 
        
        Signature ``DisplayRegionOrSheetBody(onOff)`` 
        
        :param onOff:  0 - Off, other - On  
        :type onOff: int 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def PerformDisplayForTypeChange(self) -> None:
        """
        Perform the display operations when the type of defining Cavity and Core is changed.  
        
        Signature ``PerformDisplayForTypeChange()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateRegionSewnSheet(self, regionName: str) -> None:
        """
        Create sewn sheet for the region 
        
        Signature ``CreateRegionSewnSheet(regionName)`` 
        
        :param regionName:  region  
        :type regionName: str 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def SuppressRegionSheet(self, regionName: str) -> None:
        """
        Suppress the region sheet 
        
        Signature ``SuppressRegionSheet(regionName)`` 
        
        :param regionName:  region  
        :type regionName: str 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def ReversePartNormal(self, viewPart: NXOpen.BasePart) -> None:
        """
        Reverse the normal for the part 
        
        Signature ``ReversePartNormal(viewPart)`` 
        
        :param viewPart:  Part whose normal is to be reversed  
        :type viewPart: :py:class:`NXOpen.BasePart` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def SetDisplayedPart(self, displayedPart: NXOpen.BasePart) -> None:
        """
        Set displayed part 
        
        Signature ``SetDisplayedPart(displayedPart)`` 
        
        :param displayedPart:  new displayed part  
        :type displayedPart: :py:class:`NXOpen.BasePart` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def SetWorkPart(self, workPart: NXOpen.BasePart) -> None:
        """
        Set work part 
        
        Signature ``SetWorkPart(workPart)`` 
        
        :param workPart:  new work part  
        :type workPart: :py:class:`NXOpen.BasePart` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def CreateAssemblyNodeForRegionSheet(self, regionName: str) -> NXOpen.BasePart:
        """
        Create linked body for region sheet other than the cavity or core sheet  
        
        Signature ``CreateAssemblyNodeForRegionSheet(regionName)`` 
        
        :param regionName:  region name  
        :type regionName: str 
        :returns:  linked part for the region sewn sheet  
        :rtype: :py:class:`NXOpen.BasePart` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def AutoCreateSelectedSheets(self) -> None:
        """
        Create all the selected sheets automatically with no user interaction queries 
        
        Signature ``AutoCreateSelectedSheets()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    CheckGeometryToggle: bool = ...
    """
    Returns or sets  the check geometry toggle for the final sewn sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckGeometryToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CheckGeometryToggle`` 
    
    :param checkGeometryToggle: 
    :type checkGeometryToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CheckOverlappingToggle: bool = ...
    """
    Returns or sets  the check overlapping toggle for the final sewn sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckOverlappingToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CheckOverlappingToggle`` 
    
    :param checkOverlappingToggle: 
    :type checkOverlappingToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DefineStep: MWDefineSheetsBuilderDefineStepType = ...
    """
    Returns or sets  the define step for defining Cavity and Core using the Split Body method
    
    <hr>
    
    Getter Method
    
    Signature ``DefineStep`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDefineSheetsBuilderDefineStepType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefineStep`` 
    
    :param defineStep: 
    :type defineStep: :py:class:`NXOpen.Tooling.MWDefineSheetsBuilderDefineStepType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NoInteractionQueriesToggle: bool = ...
    """
    Returns or sets  the "No Interaction Queries" toggle indicates that user interactions are not required 
    so as to turn off user interactions during Journamation playback 
    
    <hr>
    
    Getter Method
    
    Signature ``NoInteractionQueriesToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoInteractionQueriesToggle`` 
    
    :param noInteractionQueriesToggle: 
    :type noInteractionQueriesToggle: bool 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    """
    RenameComponentPartToggle: bool = ...
    """
    Returns or sets  the  toggle for invoking rename dialog for creating new component part 
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponentPartToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponentPartToggle`` 
    
    :param renameComponentPartToggle: 
    :type renameComponentPartToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectSheetBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the select sheets is for selecting region, parting and patched sheets to form a new sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectSheetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SewTolerance: float = ...
    """
    Returns or sets  the sew tolerance for sewing sheets 
    
    <hr>
    
    Getter Method
    
    Signature ``SewTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SewTolerance`` 
    
    :param sewTolerance: 
    :type sewTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SplittingSheets: NXOpen.ScCollector = ...
    """
    Returns  the sheets for splitting the subtracted workpiece 
    
    <hr>
    
    Getter Method
    
    Signature ``SplittingSheets`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Type: MWDefineSheetsBuilderTypes = ...
    """
    Returns or sets  the type for defining Cavity and Core 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDefineSheetsBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.MWDefineSheetsBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: MWDefineSheetsBuilder = ...  # unknown typename


class MWSearchRegionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of MWSearchRegion builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> MWSearchRegionBuilder:
        """
        Creates a MWSearchRegion builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`MWSearchRegionBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.MWSearchRegionBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class CaeReuseLibrary():
    """
    Represents a :py:class:`NXOpen.Tooling.CaeReuseLibrary`
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.CAE.BaseFEModel`
    
    .. versionadded:: NX7.5.2
    """
    
    def CreateReusableObject(self) -> ReusableObject:
        """
        Creates a :py:class:`NXOpen.Tooling.ReusableObject`  
        
        Signature ``CreateReusableObject()`` 
        
        :returns: :py:class:`NXOpen.Tooling.ReusableObject`  
        :rtype: :py:class:`NXOpen.Tooling.ReusableObject` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    
    
    def ExportBeamSectionToLibrary(self, reuseLibraryName: str, reusableObject: ReusableObject) -> None:
        """
        Exports a beam section to created reuse library 
        
        Signature ``ExportBeamSectionToLibrary(reuseLibraryName, reusableObject)`` 
        
        :param reuseLibraryName:  Library to which beam-section is exported  
        :type reuseLibraryName: str 
        :param reusableObject:  :py:class:`NXOpen.Tooling.ReusableObject`  
        :type reusableObject: :py:class:`NXOpen.Tooling.ReusableObject` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation")
        """
        ...
    
    
    def ImportBeamSectionFromLibrary(self, reuseLibraryName: str) -> NXOpen.CAE.BeamSection:
        """
        Copies a beam section from library to current part  
        
        Signature ``ImportBeamSectionFromLibrary(reuseLibraryName)`` 
        
        :param reuseLibraryName:  Library from where beam-section is imported  
        :type reuseLibraryName: str 
        :returns:  Beam section created by the given library  
        :rtype: :py:class:`NXOpen.CAE.BeamSection` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: nx_masterfem ("Finite Element Modeling") OR nx_design_sim ("NX Design Simulation")
        """
        ...
    
    
    def UpdateDescription(self, descriptiveName: str, reuseLibraryName: str, previewImageFile: str) -> None:
        """
        Renames and updates preview image for reusable object  
        
        Signature ``UpdateDescription(descriptiveName, reuseLibraryName, previewImageFile)`` 
        
        :param descriptiveName:  New descriptive name  
        :type descriptiveName: str 
        :param reuseLibraryName:  Library to update  
        :type reuseLibraryName: str 
        :param previewImageFile:  New preview image file name including the path  
        :type previewImageFile: str 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    


class WireHoleCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.WireHoleBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateWireHoleBuilder(self) -> WireHoleBuilder:
        """
        Creates wire hole builder  
        
        Signature ``CreateWireHoleBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.WireHoleBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class QuickQuotationBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickQuotationBuilderTypes():
    """
    Specify the operation type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "JobInformation", "job information type"
       "ProjectDefinition", "project definition type"
       "ConceptDesign", "concept design type"
       "Grouping", "grouping type"
       "Quoting", "quoting type"
    """
    JobInformation = 0  # QuickQuotationBuilderTypesMemberType
    ProjectDefinition = 1  # QuickQuotationBuilderTypesMemberType
    ConceptDesign = 2  # QuickQuotationBuilderTypesMemberType
    Grouping = 3  # QuickQuotationBuilderTypesMemberType
    Quoting = 4  # QuickQuotationBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickQuotationBuilderDesignTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickQuotationBuilderDesignTypes():
    """
    Specify the design type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NewDesign", "the design is a new design"
       "Changeover", "the design is a changeover"
       "AdditionalDie", "The design is a additional die"
    """
    NewDesign = 0  # QuickQuotationBuilderDesignTypesMemberType
    Changeover = 1  # QuickQuotationBuilderDesignTypesMemberType
    AdditionalDie = 2  # QuickQuotationBuilderDesignTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickQuotationBuilderObjectTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickQuotationBuilderObjectTypes():
    """
    Specify the concept sheet body type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Piercing", "sheet body type is piercing"
       "Bending", "sheet body type is piercing"
       "Forming", "sheet body is forming"
       "Burring", "sheet body is burring"
       "Cam", "sheet body is camunits."
    """
    Piercing = 0  # QuickQuotationBuilderObjectTypesMemberType
    Bending = 1  # QuickQuotationBuilderObjectTypesMemberType
    Forming = 2  # QuickQuotationBuilderObjectTypesMemberType
    Burring = 3  # QuickQuotationBuilderObjectTypesMemberType
    Cam = 4  # QuickQuotationBuilderObjectTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickQuotationBuilderInsertGroupMaterialsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickQuotationBuilderInsertGroupMaterials():
    """
    Specify the insert group material. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Cr12", "insert group material is Cr12"
       "Cr12MoV", "insert group material is Cr12MoV"
    """
    Cr12 = 0  # QuickQuotationBuilderInsertGroupMaterialsMemberType
    Cr12MoV = 1  # QuickQuotationBuilderInsertGroupMaterialsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickQuotationBuilderManageTemporaryObjectsTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickQuotationBuilderManageTemporaryObjectsTypes():
    """
    Specify the management type for the temporary objects. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Hide", " - "
       "Display", " - "
       "Delete", " - "
    """
    Hide = 0  # QuickQuotationBuilderManageTemporaryObjectsTypesMemberType
    Display = 1  # QuickQuotationBuilderManageTemporaryObjectsTypesMemberType
    Delete = 2  # QuickQuotationBuilderManageTemporaryObjectsTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickQuotationBuilder(NXOpen.Builder):
    """
    Progressive Die Wizard  builder to create quick quotation.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.QuickQuotationCollection.CreateQuickQuotationBuilder`
    
    Default values.
    
    ===========================  =========
    Property                     Value
    ===========================  =========
    BendingColor                 120 
    ---------------------------  ---------
    BurringColor                 29 
    ---------------------------  ---------
    CamunitColor                 58 
    ---------------------------  ---------
    CompFactor                   1 
    ---------------------------  ---------
    FormingColor                 152 
    ---------------------------  ---------
    InsertGroupMaterial          Cr12 
    ---------------------------  ---------
    ManageTemporaryObjectsType   Hide 
    ---------------------------  ---------
    ObjectType                   Piercing 
    ---------------------------  ---------
    OutlineEnlargeTimes          1 
    ---------------------------  ---------
    PartNo                       0 
    ---------------------------  ---------
    PartsAmout                   0 
    ---------------------------  ---------
    PiercingColor                97 
    ---------------------------  ---------
    Pitch                        0 
    ---------------------------  ---------
    StationsNo                   0 
    ---------------------------  ---------
    StripLength                  0 
    ---------------------------  ---------
    StripThickness               0 
    ---------------------------  ---------
    Width                        0 
    ---------------------------  ---------
    WorkAreaLength               0 
    ---------------------------  ---------
    WorkAreaWidth                0 
    ===========================  =========
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Specify the operation type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "JobInformation", "job information type"
           "ProjectDefinition", "project definition type"
           "ConceptDesign", "concept design type"
           "Grouping", "grouping type"
           "Quoting", "quoting type"
        """
        JobInformation = 0  # QuickQuotationBuilderTypesMemberType
        ProjectDefinition = 1  # QuickQuotationBuilderTypesMemberType
        ConceptDesign = 2  # QuickQuotationBuilderTypesMemberType
        Grouping = 3  # QuickQuotationBuilderTypesMemberType
        Quoting = 4  # QuickQuotationBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DesignTypes():
        """
        Specify the design type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NewDesign", "the design is a new design"
           "Changeover", "the design is a changeover"
           "AdditionalDie", "The design is a additional die"
        """
        NewDesign = 0  # QuickQuotationBuilderDesignTypesMemberType
        Changeover = 1  # QuickQuotationBuilderDesignTypesMemberType
        AdditionalDie = 2  # QuickQuotationBuilderDesignTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ObjectTypes():
        """
        Specify the concept sheet body type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Piercing", "sheet body type is piercing"
           "Bending", "sheet body type is piercing"
           "Forming", "sheet body is forming"
           "Burring", "sheet body is burring"
           "Cam", "sheet body is camunits."
        """
        Piercing = 0  # QuickQuotationBuilderObjectTypesMemberType
        Bending = 1  # QuickQuotationBuilderObjectTypesMemberType
        Forming = 2  # QuickQuotationBuilderObjectTypesMemberType
        Burring = 3  # QuickQuotationBuilderObjectTypesMemberType
        Cam = 4  # QuickQuotationBuilderObjectTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InsertGroupMaterials():
        """
        Specify the insert group material. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Cr12", "insert group material is Cr12"
           "Cr12MoV", "insert group material is Cr12MoV"
        """
        Cr12 = 0  # QuickQuotationBuilderInsertGroupMaterialsMemberType
        Cr12MoV = 1  # QuickQuotationBuilderInsertGroupMaterialsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ManageTemporaryObjectsTypes():
        """
        Specify the management type for the temporary objects. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Hide", " - "
           "Display", " - "
           "Delete", " - "
        """
        Hide = 0  # QuickQuotationBuilderManageTemporaryObjectsTypesMemberType
        Display = 1  # QuickQuotationBuilderManageTemporaryObjectsTypesMemberType
        Delete = 2  # QuickQuotationBuilderManageTemporaryObjectsTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DatumPlane(self) -> None:
        """
        Create a datum plane.  
        
        Signature ``DatumPlane()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def TemplateConfig(self) -> None:
        """
        The template configuration.  
        
        Signature ``TemplateConfig()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    BendingColor: NXOpen.NXColor = ...
    """
    Returns or sets  the bending color.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendingColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendingColor`` 
    
    :param specifyColor: 
    :type specifyColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    BlankSize: float = ...
    """
    Returns or sets  the blank size.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankSize`` 
    
    :param blankSize: 
    :type blankSize: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    BurringColor: NXOpen.NXColor = ...
    """
    Returns or sets  the burring color.  
    
    <hr>
    
    Getter Method
    
    Signature ``BurringColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BurringColor`` 
    
    :param specifyColor: 
    :type specifyColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    CamunitColor: NXOpen.NXColor = ...
    """
    Returns or sets  the cam unit color.  
    
    <hr>
    
    Getter Method
    
    Signature ``CamunitColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CamunitColor`` 
    
    :param specifyColor: 
    :type specifyColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    CompFactor: float = ...
    """
    Returns or sets  the complexity factor.  
    
    <hr>
    
    Getter Method
    
    Signature ``CompFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompFactor`` 
    
    :param compFactor: 
    :type compFactor: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Customer: str = ...
    """
    Returns or sets  the customer.  
    
    <hr>
    
    Getter Method
    
    Signature ``Customer`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Customer`` 
    
    :param customer: 
    :type customer: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    DesignHours: float = ...
    """
    Returns or sets  the design hours.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignHours`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignHours`` 
    
    :param designHours: 
    :type designHours: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    DesignPrice: float = ...
    """
    Returns or sets  the work area width.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignPrice`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignPrice`` 
    
    :param designPrice: 
    :type designPrice: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    DistanceX: float = ...
    """
    Returns or sets  the distance between sub die base and die base edge in X direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceX`` 
    
    :param distanceX: 
    :type distanceX: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    DistanceY: float = ...
    """
    Returns or sets  the distance between sub die base and die base edge in Y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceY`` 
    
    :param distanceY: 
    :type distanceY: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    FormingColor: NXOpen.NXColor = ...
    """
    Returns or sets  the forming color.  
    
    <hr>
    
    Getter Method
    
    Signature ``FormingColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FormingColor`` 
    
    :param specifyColor: 
    :type specifyColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    InsertGroupMaterial: QuickQuotationBuilderInsertGroupMaterials = ...
    """
    Returns or sets  the insert group material.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsertGroupMaterial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.QuickQuotationBuilderInsertGroupMaterials` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsertGroupMaterial`` 
    
    :param insertGroupMaterial: 
    :type insertGroupMaterial: :py:class:`NXOpen.Tooling.QuickQuotationBuilderInsertGroupMaterials` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    ManageTemporaryObjectsType: QuickQuotationBuilderManageTemporaryObjectsTypes = ...
    """
    Returns or sets  the management type for temporary objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``ManageTemporaryObjectsType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.QuickQuotationBuilderManageTemporaryObjectsTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ManageTemporaryObjectsType`` 
    
    :param manageTemporaryObjectsType: 
    :type manageTemporaryObjectsType: :py:class:`NXOpen.Tooling.QuickQuotationBuilderManageTemporaryObjectsTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    MaterialUtil: str = ...
    """
    Returns or sets  the material utilization.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialUtil`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialUtil`` 
    
    :param materialUtil: 
    :type materialUtil: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    ObjectType: QuickQuotationBuilderObjectTypes = ...
    """
    Returns or sets  the object type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.QuickQuotationBuilderObjectTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectType`` 
    
    :param objectType: 
    :type objectType: :py:class:`NXOpen.Tooling.QuickQuotationBuilderObjectTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    OutlineEnlargeTimes: float = ...
    """
    Returns or sets  the outline enlarge times.  
    
    <hr>
    
    Getter Method
    
    Signature ``OutlineEnlargeTimes`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutlineEnlargeTimes`` 
    
    :param outlineEnlargeTimes: 
    :type outlineEnlargeTimes: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    PartNo: int = ...
    """
    Returns or sets  the part no.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartNo`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartNo`` 
    
    :param partNo: 
    :type partNo: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    PartsAmout: int = ...
    """
    Returns or sets  the parts amount.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartsAmout`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartsAmout`` 
    
    :param partsAmout: 
    :type partsAmout: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    PiercingColor: NXOpen.NXColor = ...
    """
    Returns or sets  the piercing color.  
    
    <hr>
    
    Getter Method
    
    Signature ``PiercingColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PiercingColor`` 
    
    :param specifyColor: 
    :type specifyColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Pitch: float = ...
    """
    Returns or sets  the pitch.  
    
    <hr>
    
    Getter Method
    
    Signature ``Pitch`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Pitch`` 
    
    :param pitch: 
    :type pitch: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    QuoteDate: str = ...
    """
    Returns or sets  the quote date.  
    
    <hr>
    
    Getter Method
    
    Signature ``QuoteDate`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``QuoteDate`` 
    
    :param quoteDate: 
    :type quoteDate: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    QuoteNo: str = ...
    """
    Returns or sets  the quote no.  
    
    <hr>
    
    Getter Method
    
    Signature ``QuoteNo`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``QuoteNo`` 
    
    :param quoteNo: 
    :type quoteNo: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Quoter: str = ...
    """
    Returns or sets  the quoter.  
    
    <hr>
    
    Getter Method
    
    Signature ``Quoter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Quoter`` 
    
    :param quoter: 
    :type quoter: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    SelOutline: NXOpen.Section = ...
    """
    Returns  the selected outline.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelOutline`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelSheetBody: NXOpen.SelectBodyList = ...
    """
    Returns  the selected sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelSheetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StationsNo: int = ...
    """
    Returns or sets  the stations no.  
    
    <hr>
    
    Getter Method
    
    Signature ``StationsNo`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StationsNo`` 
    
    :param stationsNo: 
    :type stationsNo: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    StripLength: float = ...
    """
    Returns or sets  the strip length.  
    
    <hr>
    
    Getter Method
    
    Signature ``StripLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StripLength`` 
    
    :param stripLength: 
    :type stripLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    StripMaterial: str = ...
    """
    Returns or sets  the strip material.  
    
    <hr>
    
    Getter Method
    
    Signature ``StripMaterial`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StripMaterial`` 
    
    :param stripMaterial: 
    :type stripMaterial: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    StripThickness: float = ...
    """
    Returns or sets  the strip thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``StripThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StripThickness`` 
    
    :param stripThickness: 
    :type stripThickness: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Type: QuickQuotationBuilderTypes = ...
    """
    Returns or sets  the operation type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.QuickQuotationBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.QuickQuotationBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Width: float = ...
    """
    Returns or sets  the width.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    WorkAreaLength: float = ...
    """
    Returns or sets  the work area length.  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkAreaLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkAreaLength`` 
    
    :param workAreaLength: 
    :type workAreaLength: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    WorkAreaWidth: float = ...
    """
    Returns or sets  the work area width.  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkAreaWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkAreaWidth`` 
    
    :param workAreaWidth: 
    :type workAreaWidth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Null: QuickQuotationBuilder = ...  # unknown typename


class WallThicknessCheckerManager():
    """
    Represents the manager of the WallThicknessChecker builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def CreateBuilder(self) -> WallThicknessCheckerBuilder:
        """
        Creates a WallThicknessChecker builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`WallThicknessCheckerBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.WallThicknessCheckerBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class CoolingConnectBuilder(NXOpen.Builder):
    """
    The builder class for Cooling connection which assists you
    to create channel and connect it to other channels.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.CoolingConnectCollection.CreateCoolingConnectBuilder`
    
    Default values.
    
    ====================  =====
    Property              Value
    ====================  =====
    DefineConnectVector   0 
    --------------------  -----
    DefineStartPoint      0 
    ====================  =====
    
    .. versionadded:: NX7.5.0
    """
    ConnectVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector specified for creating connecting channel.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConnectVector`` 
    
    :param connectVector: 
    :type connectVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DefineConnectVector: bool = ...
    """
    Returns or sets  the value which specifies whether to define the vector of the connect channel or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DefineConnectVector`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefineConnectVector`` 
    
    :param defineConnectVector: 
    :type defineConnectVector: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DefineStartPoint: bool = ...
    """
    Returns or sets  the value which specifies whether to define the start point or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``DefineStartPoint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefineStartPoint`` 
    
    :param defineStartPoint: 
    :type defineStartPoint: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FirstChannel: NXOpen.SelectBody = ...
    """
    Returns  the first channel to be connected.  
    
    <hr>
    
    Getter Method
    
    Signature ``FirstChannel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SecondChannel: NXOpen.SelectBody = ...
    """
    Returns  the second channel to be connected.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondChannel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StartPoint: NXOpen.Point = ...
    """
    Returns or sets  the point for changing the start position of the connecting channel.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPoint`` 
    
    :param startPoint: 
    :type startPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: CoolingConnectBuilder = ...  # unknown typename


class EjectorPostProcessingCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a EjectorPostProcessingCollection class   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateEjectorPostProcessingBuilder(self) -> EjectorPostProcessingBuilder:
        """
        Creates a EjectorPostProcessing builder  
        
        Signature ``CreateEjectorPostProcessingBuilder()`` 
        
        :returns:  Ejector Post Processing Builder object  
        :rtype: :py:class:`NXOpen.Tooling.EjectorPostProcessingBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class DieDesDrawDieBuilder(NXOpen.Builder):
    """
    Represents the Die Design draw die management builder, which is to create a draw die by selected 
    sheet body, curve and base plane.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieDesDrawDieBuilder`
    
    .. versionadded:: NX8.0.0
    """
    ApproximateSheetbodyOption: bool = ...
    """
    Returns or sets  the option to indicate whether to use approximate sheet metal.  
    
    <hr>
    
    Getter Method
    
    Signature ``ApproximateSheetbodyOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApproximateSheetbodyOption`` 
    
    :param approximateSheetbodyOption: 
    :type approximateSheetbodyOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BasePlane: NXOpen.Plane = ...
    """
    Returns or sets  the base plane, which is used for define the base of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``BasePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BasePlane`` 
    
    :param basePlane: 
    :type basePlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BaseThickness: float = ...
    """
    Returns or sets  the base thickness, which is used for define the base thickness of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseThickness`` 
    
    :param baseThickness: 
    :type baseThickness: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BinderEdgeOffset: float = ...
    """
    Returns or sets  the binder edge offset, which is used for define the binder edge offset value of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``BinderEdgeOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BinderEdgeOffset`` 
    
    :param binderEdgeOffset: 
    :type binderEdgeOffset: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BlankCurve: NXOpen.SelectNXObjectList = ...
    """
    Returns  the blank curve, which is used for extrusion.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    CoreDrawDieOption: bool = ...
    """
    Returns or sets  the option to indicate whether to create core draw die.  
    
    <hr>
    
    Getter Method
    
    Signature ``CoreDrawDieOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CoreDrawDieOption`` 
    
    :param coreDrawDieOption: 
    :type coreDrawDieOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DeckEdgeOffset: float = ...
    """
    Returns or sets  the deck edge offset, which is used for define the deck edge offset value of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckEdgeOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeckEdgeOffset`` 
    
    :param deckEdgeOffset: 
    :type deckEdgeOffset: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DeckFlangeThickness: float = ...
    """
    Returns or sets  the deck flange thickness, which is used for define the flange thickness of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckFlangeThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeckFlangeThickness`` 
    
    :param deckFlangeThickness: 
    :type deckFlangeThickness: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    DeckThickness: float = ...
    """
    Returns or sets  the deck thickness, which is used for define the deck thickness of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeckThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeckThickness`` 
    
    :param deckThickness: 
    :type deckThickness: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ExactSheetbodyOption: bool = ...
    """
    Returns or sets  the option to indicate whether to use exact sheet body.  
    
    This function has been obsoleted, use
    :py:meth:`Tooling.DieDesDrawDieBuilder.ApproximateSheetbodyOption` 
    for substitution.
    
    <hr>
    
    Getter Method
    
    Signature ``ExactSheetbodyOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExactSheetbodyOption`` 
    
    :param exactSheetbodyOption: 
    :type exactSheetbodyOption: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    FlangeCurve: NXOpen.SelectNXObjectList = ...
    """
    Returns  the flange curve, which is used for extrusion.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FlangeOffset: float = ...
    """
    Returns or sets  the flange offset, which is the offset value from projected blank curve to flange curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlangeOffset`` 
    
    :param flangeOffset: 
    :type flangeOffset: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MachiningAllowance: float = ...
    """
    Returns or sets  the machining allowance, which is used for define the user machining allowance of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``MachiningAllowance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MachiningAllowance`` 
    
    :param machiningAllowance: 
    :type machiningAllowance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    PunchCurve: NXOpen.SelectNXObjectList = ...
    """
    Returns  the punch curve, which is used for extrusion.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SheetBody: NXOpen.SelectBody = ...
    """
    Returns  the sheet body, which is used to trim the die top face.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TfeatureSet: NXOpen.Features.Feature = ...
    """
    Returns or sets  the feature set tag.  
    
    <hr>
    
    Getter Method
    
    Signature ``TfeatureSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``TfeatureSet`` 
    
    :param tFeatureSet: 
    :type tFeatureSet: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    WallThickness: float = ...
    """
    Returns or sets  the wall thickness, which is used for define the wall thickness of the die.  
    
    <hr>
    
    Getter Method
    
    Signature ``WallThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WallThickness`` 
    
    :param wallThickness: 
    :type wallThickness: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: DieDesDrawDieBuilder = ...  # unknown typename


class HoleDatumSymbolBuilderSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleDatumSymbolBuilderSymbolType():
    """
    symbol type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "First", " - "
       "Second", " - "
       "Third", " - "
       "Fourth", " - "
    """
    First = 0  # HoleDatumSymbolBuilderSymbolTypeMemberType
    Second = 1  # HoleDatumSymbolBuilderSymbolTypeMemberType
    Third = 2  # HoleDatumSymbolBuilderSymbolTypeMemberType
    Fourth = 3  # HoleDatumSymbolBuilderSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleDatumSymbolBuilder(NXOpen.Builder):
    """
    Creates hole datum symbol builder for progressive die.  
    
    No entity is returned. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateHoleDatumSymbolBuilder`
    
    Default values.
    
    ================================  ================
    Property                          Value
    ================================  ================
    AttributeTitles                   AttributeTitles 
    --------------------------------  ----------------
    AttributeValues                   AtributeValues 
    --------------------------------  ----------------
    HoleDiameter                      0 
    --------------------------------  ----------------
    HoleTolerance                     0 
    --------------------------------  ----------------
    HoleType                          First 
    --------------------------------  ----------------
    SelectHolesAccordingToAttribute   0 
    ================================  ================
    
    .. versionadded:: NX11.0.0
    """
    
    class SymbolType():
        """
        symbol type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "First", " - "
           "Second", " - "
           "Third", " - "
           "Fourth", " - "
        """
        First = 0  # HoleDatumSymbolBuilderSymbolTypeMemberType
        Second = 1  # HoleDatumSymbolBuilderSymbolTypeMemberType
        Third = 2  # HoleDatumSymbolBuilderSymbolTypeMemberType
        Fourth = 3  # HoleDatumSymbolBuilderSymbolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateSymbolSizeInView(self) -> None:
        """
        Update symbol size in view 
        
        Signature ``UpdateSymbolSizeInView()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CycleObjectsInView(self, viewTag: NXOpen.NXObject, vseqNumber: int, isDrawing: bool, inObject: NXOpen.NXObject) -> NXOpen.NXObject:
        """
        The method to cycle objects in view  
        
        Signature ``CycleObjectsInView(viewTag, vseqNumber, isDrawing, inObject)`` 
        
        :param viewTag:  The view to cycle  
        :type viewTag: :py:class:`NXOpen.NXObject` 
        :param vseqNumber:  The View Sequence Number of the View must NOT be DSS_ALL_VIEWS or DSS_NO_VIEWS  
        :type vseqNumber: int 
        :param isDrawing:  Is this view a drawing  
        :type isDrawing: bool 
        :param inObject:  Input object  
        :type inObject: :py:class:`NXOpen.NXObject` 
        :returns:  Output object  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AttributeTitles: str = ...
    """
    Returns or sets  the attribute titles 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeTitles`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeTitles`` 
    
    :param attributeTitles: 
    :type attributeTitles: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    AttributeValues: str = ...
    """
    Returns or sets  the attribute values 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeValues`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeValues`` 
    
    :param attributeValues: 
    :type attributeValues: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleDiameter: float = ...
    """
    Returns or sets  the hole diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleDiameter`` 
    
    :param holeDiameter: 
    :type holeDiameter: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleTolerance: float = ...
    """
    Returns or sets  the hole tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleTolerance`` 
    
    :param holeTolerance: 
    :type holeTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleType: HoleDatumSymbolBuilderSymbolType = ...
    """
    Returns or sets  the hole type 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.HoleDatumSymbolBuilderSymbolType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleType`` 
    
    :param holeType: 
    :type holeType: :py:class:`NXOpen.Tooling.HoleDatumSymbolBuilderSymbolType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectHoles: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select holes 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectHoles`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectHolesAccordingToAttribute: bool = ...
    """
    Returns or sets  the select holes according to attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectHolesAccordingToAttribute`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectHolesAccordingToAttribute`` 
    
    :param selectHolesAccordingToAttribute: 
    :type selectHolesAccordingToAttribute: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectSpreadsheet: str = ...
    """
    Returns or sets  the select spreadsheet 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectSpreadsheet`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectSpreadsheet`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectView: NXOpen.Drawings.SelectDraftingViewList = ...
    """
    Returns  the select view 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingViewList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: HoleDatumSymbolBuilder = ...  # unknown typename


class FormingInsertCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.FormingInsertBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFormingInsertBuilder(self) -> FormingInsertBuilder:
        """
        Creates forming insert builder.  
        
        Signature ``CreateFormingInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.FormingInsertBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class FastenerRemoveNodeBuilder(NXOpen.Builder):
    """
    Fastener remove node builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.FastenerRemoveNodeCollection.CreateFastenerRemoveNodeBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def AddComponent(self, component: NXOpen.NXObject) -> None:
        """
        Adds component.  
        
        Signature ``AddComponent(component)`` 
        
        :param component: Component to add 
        :type component: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveComponent(self, component: NXOpen.NXObject) -> None:
        """
        Removes component.  
        
        Signature ``RemoveComponent(component)`` 
        
        :param component: Component to remove 
        :type component: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    Null: FastenerRemoveNodeBuilder = ...  # unknown typename


class InitProjectBuilderMaterialIdMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InitProjectBuilderMaterialId():
    """
    the material type includes None and Nylon 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None material is set"
       "Nylon", "Nylon material type"
    """
    NotSet = 0  # InitProjectBuilderMaterialIdMemberType
    Nylon = 1  # InitProjectBuilderMaterialIdMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InitProjectBuilderConfigurationIdMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InitProjectBuilderConfigurationId():
    """
    the configuration type includes default and orig 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Default", "Default configuration"
       "Orig", "Original configuration"
    """
    Default = 0  # InitProjectBuilderConfigurationIdMemberType
    Orig = 1  # InitProjectBuilderConfigurationIdMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InitProjectBuilderUnitIdMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InitProjectBuilderUnitId():
    """
    the unit type includes metric and inch project type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Millimeter", "metric project"
       "Inch", "english project"
    """
    Millimeter = 0  # InitProjectBuilderUnitIdMemberType
    Inch = 1  # InitProjectBuilderUnitIdMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InitProjectBuilder(NXOpen.Builder):
    """
    Mold Wizard initialize project builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.InitProjectCollection.CreateBuilder`
    
    Default values.
    
    ==============  ===========
    Property        Value
    ==============  ===========
    Configuration   Default 
    --------------  -----------
    Material        None 
    --------------  -----------
    Rename          0 
    --------------  -----------
    Unit            Millimeter 
    ==============  ===========
    
    .. versionadded:: NX6.0.0
    """
    
    class MaterialId():
        """
        the material type includes None and Nylon 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None material is set"
           "Nylon", "Nylon material type"
        """
        NotSet = 0  # InitProjectBuilderMaterialIdMemberType
        Nylon = 1  # InitProjectBuilderMaterialIdMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ConfigurationId():
        """
        the configuration type includes default and orig 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Default", "Default configuration"
           "Orig", "Original configuration"
        """
        Default = 0  # InitProjectBuilderConfigurationIdMemberType
        Orig = 1  # InitProjectBuilderConfigurationIdMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class UnitId():
        """
        the unit type includes metric and inch project type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Millimeter", "metric project"
           "Inch", "english project"
        """
        Millimeter = 0  # InitProjectBuilderUnitIdMemberType
        Inch = 1  # InitProjectBuilderUnitIdMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BodySelect: NXOpen.SelectBodyList = ...
    """
    Returns  the body will be used as product to create Mold Wizard project 
    
    <hr>
    
    Getter Method
    
    Signature ``BodySelect`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Configuration: InitProjectBuilderConfigurationId = ...
    """
    Returns or sets  the configuration access functions
    
    <hr>
    
    Getter Method
    
    Signature ``Configuration`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InitProjectBuilderConfigurationId` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Configuration`` 
    
    :param configuration: 
    :type configuration: :py:class:`NXOpen.Tooling.InitProjectBuilderConfigurationId` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Material: InitProjectBuilderMaterialId = ...
    """
    Returns or sets  the material access functions 
    
    <hr>
    
    Getter Method
    
    Signature ``Material`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InitProjectBuilderMaterialId` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Material`` 
    
    :param material: 
    :type material: :py:class:`NXOpen.Tooling.InitProjectBuilderMaterialId` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PathName: str = ...
    """
    Returns or sets  the project path access functions 
    
    <hr>
    
    Getter Method
    
    Signature ``PathName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PathName`` 
    
    :param pathName: 
    :type pathName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ProjectName: str = ...
    """
    Returns or sets  the project name access functions 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectName`` 
    
    :param projectName: 
    :type projectName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Rename: bool = ...
    """
    Returns or sets  the rename dialog allows users to define rename rules 
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Shrinkage: str = ...
    """
    Returns or sets  the shrinkage access functions
    
    <hr>
    
    Getter Method
    
    Signature ``Shrinkage`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Shrinkage`` 
    
    :param shrinkage: 
    :type shrinkage: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Unit: InitProjectBuilderUnitId = ...
    """
    Returns or sets  the project unit access functions 
    
    <hr>
    
    Getter Method
    
    Signature ``Unit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InitProjectBuilderUnitId` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Unit`` 
    
    :param unit: 
    :type unit: :py:class:`NXOpen.Tooling.InitProjectBuilderUnitId` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: InitProjectBuilder = ...  # unknown typename


class SlugRetentionBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SlugRetentionBuilderTypes():
    """
    the main type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TypeFirst", " - "
       "TypeSecond", " - "
    """
    TypeFirst = 0  # SlugRetentionBuilderTypesMemberType
    TypeSecond = 1  # SlugRetentionBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SlugRetentionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.SlugRetentionBuilder` which is used to create the Slug Retention.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateSlugRetentionBuilder`
    
    Default values.
    
    =======================  ==========================================
    Property                 Value
    =======================  ==========================================
    AngularDimension.Value   5 
    -----------------------  ------------------------------------------
    CuttingClearance.Value   2 (millimeters part), 0.05 (inches part) 
    -----------------------  ------------------------------------------
    CuttingDistance.Value    10 (millimeters part), 0.25 (inches part) 
    -----------------------  ------------------------------------------
    OffsetDistance           5 
    -----------------------  ------------------------------------------
    RadiusDimension.Value    7 (millimeters part), 0.25 (inches part) 
    =======================  ==========================================
    
    .. versionadded:: NX10.0.0
    """
    
    class Types():
        """
        the main type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TypeFirst", " - "
           "TypeSecond", " - "
        """
        TypeFirst = 0  # SlugRetentionBuilderTypesMemberType
        TypeSecond = 1  # SlugRetentionBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngularDimension: NXOpen.Expression = ...
    """
    Returns  the angular dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    CuttingClearance: NXOpen.Expression = ...
    """
    Returns  the cutting clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingClearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    CuttingDistance: NXOpen.Expression = ...
    """
    Returns  the cutting distance 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    OffsetDirection: NXOpen.Direction = ...
    """
    Returns or sets  the offset direction 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetDirection`` 
    
    :param offsetDirection: 
    :type offsetDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetDistance: float = ...
    """
    Returns or sets  the offset distance 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetDistance`` 
    
    :param offsetDistance: 
    :type offsetDistance: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PreviousWorkPart: NXOpen.Part = ...
    """
    Returns or sets  the previous work part 
    
    <hr>
    
    Getter Method
    
    Signature ``PreviousWorkPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreviousWorkPart`` 
    
    :param previousWorkPart: 
    :type previousWorkPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RadiusDimension: NXOpen.Expression = ...
    """
    Returns  the radius dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RotateDirection: NXOpen.Direction = ...
    """
    Returns or sets  the rotate direction 
    
    <hr>
    
    Getter Method
    
    Signature ``RotateDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotateDirection`` 
    
    :param rotateDirection: 
    :type rotateDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectComponent: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the select component 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SelectDataFile: str = ...
    """
    Returns or sets  the select data file 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectDataFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectDataFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectPoint: NXOpen.Point = ...
    """
    Returns or sets  the select point 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectPoint`` 
    
    :param selectPoint: 
    :type selectPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SlugEdgeForTypeTwo: NXOpen.Edge = ...
    """
    Returns or sets  the slug edge for type two 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugEdgeForTypeTwo`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Edge` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SlugEdgeForTypeTwo`` 
    
    :param slugEdgeForTypeTwo: 
    :type slugEdgeForTypeTwo: :py:class:`NXOpen.Edge` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SlugRetentionBooleanData: NXOpen.GeometricUtilities.BooleanOperation = ...
    """
    Returns  the slug retention boolean data 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugRetentionBooleanData`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanOperation` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SlugRetentionEdge: NXOpen.SelectEdge = ...
    """
    Returns  the slug retention edge 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugRetentionEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SlugRetentionFeature: NXOpen.Features.Feature = ...
    """
    Returns or sets  the slug retention feature 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugRetentionFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SlugRetentionFeature`` 
    
    :param slugRetentionFeature: 
    :type slugRetentionFeature: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TargetBodyForSubtract: NXOpen.Body = ...
    """
    Returns or sets  the target body for subtract 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetBodyForSubtract`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetBodyForSubtract`` 
    
    :param targetBodyForSubtract: 
    :type targetBodyForSubtract: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: SlugRetentionBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SlugRetentionBuilderTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.SlugRetentionBuilderTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: SlugRetentionBuilder = ...  # unknown typename


class SelectReuseLibraryItemBuilder(NXOpen.TaggedObject):
    """
    Select a part from the reuse library   
    
    .. versionadded:: NX9.0.0
    """
    DescriptiveName: str = ...
    """
    Returns or sets  the descriptive name 
    
    <hr>
    
    Getter Method
    
    Signature ``DescriptiveName`` 
    
    :returns:  the path of a part  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DescriptiveName`` 
    
    :param descriptiveName:  the path of a part  
    :type descriptiveName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Selection: str = ...
    """
    Returns or sets  the path of the file from the reuse library 
    
    <hr>
    
    Getter Method
    
    Signature ``Selection`` 
    
    :returns:  the path of a part  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Selection`` 
    
    :param path:  the path of a part  
    :type path: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: SelectReuseLibraryItemBuilder = ...  # unknown typename


class DrawingSheetNameBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.DrawingSheetNameBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ToolingDrawingCollection.CreateDrawingSheetNameBuilder`
    
    .. versionadded:: NX8.5.0
    """
    DrawingSheetName: str = ...
    """
    Returns or sets  the drawing sheet name for adding a new drawing sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingSheetName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawingSheetName`` 
    
    :param drawingSheetName: 
    :type drawingSheetName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: DrawingSheetNameBuilder = ...  # unknown typename


class IntermediateStageCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.IntermediateStageBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateIntermediateStageBuilder(self) -> IntermediateStageBuilder:
        """
        Creates create direct unfold builder  
        
        Signature ``CreateIntermediateStageBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.IntermediateStageBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> IntermediateStageBuilder:
        """
        Finds the :py:class:`NXOpen.Tooling.IntermediateStageBuilder` with the given identifier as 
        recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier
        in different versions of the software. However newer versions of the software should find 
        the same object when FindObject is passed older versions of its journal identifier. In general,
        this method should not be used in handwritten code and exists to support record and 
        playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier. 
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier to be found  
        :type journalIdentifier: str 
        :returns:  IntermediateStageBuilder found  
        :rtype: :py:class:`NXOpen.Tooling.IntermediateStageBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    


class AutoDieGroup(NXOpen.TaggedObject):
    """
    Represents a group for Auto Stamping Die  
    
    To obtain an instance of this class us :py:class:`NXOpen.Tooling.AutoDieCollection`
    
    .. versionadded:: NX8.0.0
    """
    Null: AutoDieGroup = ...  # unknown typename


class ManufacturingGeometryBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create manufacturing geometry.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ManufacturingGeometryCollection.CreateBuilder`
    
    Default values.
    
    =============  =====
    Property       Value
    =============  =====
    Translucency   0 
    =============  =====
    
    .. versionadded:: NX8.0.0
    """
    
    def GetFaceColor(self) -> int:
        """
        Returns the face color.  
        
        Signature ``GetFaceColor()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
        """
        ...
    
    
    def SetFaceColor(self, faceColor: int) -> None:
        """
        Sets the face color.  
        
        Signature ``SetFaceColor(faceColor)`` 
        
        :param faceColor: 
        :type faceColor: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
        """
        ...
    
    
    def InitializeGeometry(self) -> None:
        """
        Sets the initialize geometry.  
        
        Signature ``InitializeGeometry()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
        """
        ...
    
    
    def CreateNewSubNode(self, selNode: int) -> None:
        """
        Create a new sub node.  
        
        Signature ``CreateNewSubNode(selNode)`` 
        
        :param selNode:  The tree new created sub node  
        :type selNode: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
        """
        ...
    
    
    def InitializeContent(self, initializeWay: int) -> None:
        """
        Sets the initialize content.  
        
        Parameter initialize_way indicate the different invoke entry 
        initialize_way == 0 : Run from Electrode Design Wizard
        initialize_way == 1 : Run from Progressive Die Wizard
        initialize_way == 2 : Run from Mold Wizard
        initialize_way == 3 : Run from Die Design
        initialize_way == 4 : Run from Engineering Die Wizard.
        
        Signature ``InitializeContent(initializeWay)`` 
        
        :param initializeWay: 
        :type initializeWay: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
        """
        ...
    
    Face: NXOpen.ScCollector = ...
    """
    Returns  the face to use as the region faces of the geometry groups.  
    
    <hr>
    
    Getter Method
    
    Signature ``Face`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Translucency: int = ...
    """
    Returns or sets  the translucency to specify the group faces display.  
    
    <hr>
    
    Getter Method
    
    Signature ``Translucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``Translucency`` 
    
    :param translucency: 
    :type translucency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard") OR nx_engineering_die_wizard ("NX Engineering Die Wizard")
    """
    Null: ManufacturingGeometryBuilder = ...  # unknown typename


class ReplaceSolidBuilder(NXOpen.Builder):
    """
    Represents a replace solid operation.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ReplaceSolidCollection.CreateReplaceSolidBuilder`
    
    Default values.
    
    ======================================================  ==========================================
    Property                                                Value
    ======================================================  ==========================================
    BoundingBoxBuilder.Clearance.Value (deprecated)         1.0 (millimeters part), 0.1 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoundingBoxBuilder.OffsetNegativeX.Value (deprecated)   1.0 (millimeters part), 0.1 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoundingBoxBuilder.OffsetNegativeY.Value (deprecated)   1.0 (millimeters part), 0.1 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoundingBoxBuilder.OffsetNegativeZ.Value (deprecated)   1.0 (millimeters part), 0.1 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoundingBoxBuilder.OffsetPositiveX.Value (deprecated)   1.0 (millimeters part), 0.1 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoundingBoxBuilder.OffsetPositiveY.Value (deprecated)   1.0 (millimeters part), 0.1 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoundingBoxBuilder.OffsetPositiveZ.Value (deprecated)   1.0 (millimeters part), 0.1 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoundingBoxBuilder.XValue.Value (deprecated)            10 (millimeters part), 1.0 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoundingBoxBuilder.YValue.Value (deprecated)            10 (millimeters part), 1.0 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoundingBoxBuilder.ZValue.Value (deprecated)            10 (millimeters part), 1.0 (inches part) 
    ------------------------------------------------------  ------------------------------------------
    BoxFaceToggle                                           1 
    ------------------------------------------------------  ------------------------------------------
    RemoveParameter                                         0 
    ======================================================  ==========================================
    
    .. versionadded:: NX8.0.0
    """
    
    def EditBox(self) -> None:
        """
        Edit bounding box.  
        
        Signature ``EditBox()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ReverseFaceDirectionCallBack(self, faceEid: NXOpen.NXObject, state: int) -> None:
        """
        Update face information when set to reverse face direction.  
        
        Signature ``ReverseFaceDirectionCallBack(faceEid, state)`` 
        
        :param faceEid:  placement face eid  
        :type faceEid: :py:class:`NXOpen.NXObject` 
        :param state:  state for reverse face direction  
        :type state: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def UpdateForFaceChange(self) -> None:
        """
        Update bounding box and face information.  
        
        Signature ``UpdateForFaceChange()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def UpdateFaceListState(self, faceEid: NXOpen.NXObject, reverse: int, faceForBoxFlag: int, action: int) -> None:
        """
        Update face state in ReplaceSolidFaceList.  
        
        Signature ``UpdateFaceListState(faceEid, reverse, faceForBoxFlag, action)`` 
        
        :param faceEid:  placement face eid  
        :type faceEid: :py:class:`NXOpen.NXObject` 
        :param reverse:  flag for reverse face direction,0--not reversed, 1--reversed, -1--no change  
        :type reverse: int 
        :param faceForBoxFlag:  face for creating box flag, 0--not , 1--yes, -1--no change  
        :type faceForBoxFlag: int 
        :param action:  action type, 0--add, 1--modify, -1--remove  
        :type action: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetBoundedBoxBuilder(self) -> NXOpen.Features.ToolingBoxBuilder:
        """
        Asks the new bounded box feature builder.  
        
        Signature ``GetBoundedBoxBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.ToolingBoxBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetBoundedBoxBuilder(self, boxBuilder: NXOpen.Features.ToolingBoxBuilder) -> None:
        """
        Sets the new bounded box feature builder.  
        
        Signature ``SetBoundedBoxBuilder(boxBuilder)`` 
        
        :param boxBuilder: 
        :type boxBuilder: :py:class:`NXOpen.Features.ToolingBoxBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    BoundingBoxBuilder: CreateBoxBuilder = ...
    """
    Returns or sets  the bounding box feature builder.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingBoxBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CreateBoxBuilder` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.ReplaceSolidBuilder.GetBoundedBoxBuilder` instead.
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingBoxBuilder`` 
    
    :param boxBuilder: 
    :type boxBuilder: :py:class:`NXOpen.Tooling.CreateBoxBuilder` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.ReplaceSolidBuilder.SetBoundedBoxBuilder` instead.
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BoxFaceToggle: bool = ...
    """
    Returns or sets  the face used for box creation.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoxFaceToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``BoxFaceToggle`` 
    
    :param boxFaceToggle: 
    :type boxFaceToggle: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Clearance: NXOpen.Expression = ...
    """
    Returns  the clearance value for box in six directions.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    FaceReverseDirection: bool = ...
    """
    Returns or sets  the face reverse direction status.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceReverseDirection`` 
    
    :param faceReverseDirection: 
    :type faceReverseDirection: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RemoveParameter: bool = ...
    """
    Returns or sets  the option to remove parameter after feature creation.  
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveParameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveParameter`` 
    
    :param removeParameter: 
    :type removeParameter: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelFace: NXOpen.SelectFaceList = ...
    """
    Returns  the selected replacement face.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: ReplaceSolidBuilder = ...  # unknown typename


class SIZERExportBuilderRunModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SIZERExportBuilderRunMode():
    """
    Represents the run mode. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None Mode"
       "Motion", "Motion Mode"
       "Mcd", "MCD Mode"
    """
    NotSet = 0  # SIZERExportBuilderRunModeMemberType
    Motion = 1  # SIZERExportBuilderRunModeMemberType
    Mcd = 2  # SIZERExportBuilderRunModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SIZERExportBuilder(NXOpen.Builder):
    """
    Exports input parameters for motor selection to SIZER drive design to
    support the sizing, configuration, and selection of drive components.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.SIZERCollection.CreateExportBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class RunMode():
        """
        Represents the run mode. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None Mode"
           "Motion", "Motion Mode"
           "Mcd", "MCD Mode"
        """
        NotSet = 0  # SIZERExportBuilderRunModeMemberType
        Motion = 1  # SIZERExportBuilderRunModeMemberType
        Mcd = 2  # SIZERExportBuilderRunModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MechanicalData():
        """
        Defines the mechanical data in Motion mode.  
        
        .
        Constructor: 
        NXOpen.Tooling.SIZERExportBuilder.MechanicalData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Id: int = ...
        """
        Unique ID                
        <hr>
        
        Field Value
        Type:int
        """
        Name: str = ...
        """
        Mechanical Name          
        <hr>
        
        Field Value
        Type:str
        """
        Solution: NXOpen.Motion.MotionSolution = ...
        """
        Motion solution          
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Motion.MotionSolution`
        """
        TorqueGraph: NXOpen.Motion.Graph = ...
        """
        Torque graph in solution 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Motion.Graph`
        """
        SpeedGraph: NXOpen.Motion.Graph = ...
        """
        Speed graph in solution  
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Motion.Graph`
        """
        FrictionTorque: float = ...
        """
        Friction Torque value    
        <hr>
        
        Field Value
        Type:float
        """
        SystemEfficiency: float = ...
        """
        System Efficiency value  
        <hr>
        
        Field Value
        Type:float
        """
        LoadInertia: float = ...
        """
        Load Inertia value       
        <hr>
        
        Field Value
        Type:float
        """
        AdditionalInertia: float = ...
        """
        Additional Inertia value 
        <hr>
        
        Field Value
        Type:float
        """
    
    
    class MCDMechanicalData():
        """
        Defines the mechanical data in MCD mode.  
        
        .
        Constructor: 
        NXOpen.Tooling.SIZERExportBuilder.MCDMechanicalData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Id: int = ...
        """
        Unique ID                    
        <hr>
        
        Field Value
        Type:int
        """
        Name: str = ...
        """
        Mechanical Name              
        <hr>
        
        Field Value
        Type:str
        """
        AxisControl: NXOpen.Mechatronics.PhysicsConstraint = ...
        """
        Axis Control                 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.PhysicsConstraint`
        """
        ReferenceDesignator: str = ...
        """
        Logical Reference Designator 
        <hr>
        
        Field Value
        Type:str
        """
        FrictionTorque: float = ...
        """
        Friction Torque value        
        <hr>
        
        Field Value
        Type:float
        """
        SystemEfficiency: float = ...
        """
        System Efficiency value      
        <hr>
        
        Field Value
        Type:float
        """
        LoadInertia: float = ...
        """
        Load Inertia value           
        <hr>
        
        Field Value
        Type:float
        """
        AdditionalInertia: float = ...
        """
        Additional Inertia value     
        <hr>
        
        Field Value
        Type:float
        """
    
    
    def GetRunMode(self) -> SIZERExportBuilderRunMode:
        """
        Gets the run mode.  
        
        Signature ``GetRunMode()`` 
        
        :returns:  Run mode  
        :rtype: :py:class:`NXOpen.Tooling.SIZERExportBuilderRunMode` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRunMode(self, runMode: SIZERExportBuilderRunMode) -> None:
        """
        Sets the run mode.  
        
        Signature ``SetRunMode(runMode)`` 
        
        :param runMode:  Run mode  
        :type runMode: :py:class:`NXOpen.Tooling.SIZERExportBuilderRunMode` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: mechanisms ("MECHANISMS") OR nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetMechanicalData(self) -> 'list[SIZERExportBuilderMechanicalData_Struct]':
        """
        Gets all groups of mechanical data in Motion mode.  
        
        Signature ``GetMechanicalData()`` 
        
        :returns:  Array of mechanical data  
        :rtype: list of :py:class:`NXOpen.Tooling.SIZERExportBuilderMechanicalData_Struct` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMechanicalData(self, mechanicalData: 'list[SIZERExportBuilderMechanicalData_Struct]') -> None:
        """
        Sets all groups of mechanical data in Motion mode.  
        
        Signature ``SetMechanicalData(mechanicalData)`` 
        
        :param mechanicalData:  Array of mechanical data  
        :type mechanicalData: list of :py:class:`NXOpen.Tooling.SIZERExportBuilderMechanicalData_Struct` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: mechanisms ("MECHANISMS")
        """
        ...
    
    
    def GetMcdMechanicalData(self) -> 'list[SIZERExportBuilderMCDMechanicalData_Struct]':
        """
        Gets all groups of mechanical data in MCD mode.  
        
        Signature ``GetMcdMechanicalData()`` 
        
        :returns:  Array of mechanical data  
        :rtype: list of :py:class:`NXOpen.Tooling.SIZERExportBuilderMCDMechanicalData_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetMcdMechanicalData(self, mechanicalData: 'list[SIZERExportBuilderMCDMechanicalData_Struct]') -> None:
        """
        Sets all groups of mechanical data in MCD mode.  
        
        Signature ``SetMcdMechanicalData(mechanicalData)`` 
        
        :param mechanicalData:  Array of mechanical data  
        :type mechanicalData: list of :py:class:`NXOpen.Tooling.SIZERExportBuilderMCDMechanicalData_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ProcessMcdSimulationData(self, startTime: float, endTime: float) -> None:
        """
        Processes the simulation data in MCD mode.  
        
        Signature ``ProcessMcdSimulationData(startTime, endTime)`` 
        
        :param startTime:  Start Time of simulation  
        :type startTime: float 
        :param endTime:  End Time of simulation  
        :type endTime: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    OutputFile: str = ...
    """
    Returns or sets  the output *.  
    
    mdix file, which is exported to SIZER. 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutputFile`` 
    
    :param outputFile: 
    :type outputFile: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: mechanisms ("MECHANISMS") OR nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SIZERExportBuilder = ...  # unknown typename


class ConceptPositionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ConceptPosition   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateConceptPositionBuilder(self) -> ConceptPositionBuilder:
        """
        Creates a ConceptPosition builder  
        
        Signature ``CreateConceptPositionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ConceptPositionBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class ClearanceManagementBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ClearanceManagementBuilderType():
    """
    Specifies type to assign or check clearances 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AssignClearances", " - "
       "CheckClearances", " - "
    """
    AssignClearances = 0  # ClearanceManagementBuilderTypeMemberType
    CheckClearances = 1  # ClearanceManagementBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ClearanceManagementBuilderSelectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ClearanceManagementBuilderSelection():
    """
    Specifies clearance management part. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ToolPart", " - "
       "TargetPart", " - "
    """
    ToolPart = 0  # ClearanceManagementBuilderSelectionMemberType
    TargetPart = 1  # ClearanceManagementBuilderSelectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ClearanceManagementBuilder(NXOpen.Builder):
    """
    Progressive Die Wizard  builder to management clearances.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ClearanceManagementCollection.CreateClearanceManagementBuilder`
    
    Default values.
    
    ==================================  =================
    Property                            Value
    ==================================  =================
    IsHighLightFacesWithSameClearance   0 
    ----------------------------------  -----------------
    PlateClearanceEighth                0 
    ----------------------------------  -----------------
    PlateClearanceFifth                 0 
    ----------------------------------  -----------------
    PlateClearanceFirst                 0 
    ----------------------------------  -----------------
    PlateClearanceFourth                0 
    ----------------------------------  -----------------
    PlateClearanceNinth                 0 
    ----------------------------------  -----------------
    PlateClearanceSecond                0 
    ----------------------------------  -----------------
    PlateClearanceSeventh               0 
    ----------------------------------  -----------------
    PlateClearanceSixth                 0 
    ----------------------------------  -----------------
    PlateClearanceTenth                 0 
    ----------------------------------  -----------------
    PlateClearanceThird                 0 
    ----------------------------------  -----------------
    ShowPartAndClearanceHoleOnly        0 
    ----------------------------------  -----------------
    ToolPartOrTargetPart                ToolPart 
    ----------------------------------  -----------------
    TypeAssignOrCheck                   AssignClearances 
    ----------------------------------  -----------------
    UsePlateClearanceEighth             0 
    ----------------------------------  -----------------
    UsePlateClearanceFifth              0 
    ----------------------------------  -----------------
    UsePlateClearanceFirst              0 
    ----------------------------------  -----------------
    UsePlateClearanceFourth             0 
    ----------------------------------  -----------------
    UsePlateClearanceNinth              0 
    ----------------------------------  -----------------
    UsePlateClearanceSecond             0 
    ----------------------------------  -----------------
    UsePlateClearanceSeventh            0 
    ----------------------------------  -----------------
    UsePlateClearanceSixth              0 
    ----------------------------------  -----------------
    UsePlateClearanceTenth              0 
    ----------------------------------  -----------------
    UsePlateClearanceThird              0 
    ==================================  =================
    
    .. versionadded:: NX8.0.0
    """
    
    class Type():
        """
        Specifies type to assign or check clearances 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AssignClearances", " - "
           "CheckClearances", " - "
        """
        AssignClearances = 0  # ClearanceManagementBuilderTypeMemberType
        CheckClearances = 1  # ClearanceManagementBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Selection():
        """
        Specifies clearance management part. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ToolPart", " - "
           "TargetPart", " - "
        """
        ToolPart = 0  # ClearanceManagementBuilderSelectionMemberType
        TargetPart = 1  # ClearanceManagementBuilderSelectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetParameters(self, paraNames: 'list[str]', paraValues: 'list[str]') -> None:
        """
        Set the parameter number, names and values in the tree list into builder attribute.  
        
        Signature ``SetParameters(paraNames, paraValues)`` 
        
        :param paraNames:  an array of names  
        :type paraNames: list of str 
        :param paraValues:  an array of values  
        :type paraValues: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    IsHighLightFacesWithSameClearance: bool = ...
    """
    Returns or sets  the option whether highlight faces with same clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsHighLightFacesWithSameClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsHighLightFacesWithSameClearance`` 
    
    :param isHighLightFacesWithSameClearance: 
    :type isHighLightFacesWithSameClearance: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceEighth: float = ...
    """
    Returns or sets  the plate clearance eighth.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceEighth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceEighth`` 
    
    :param plateClearanceEighth: 
    :type plateClearanceEighth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceFifth: float = ...
    """
    Returns or sets  the plate clearance fifth.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceFifth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceFifth`` 
    
    :param plateClearanceFifth: 
    :type plateClearanceFifth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceFirst: float = ...
    """
    Returns or sets  the plate clearance first.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceFirst`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceFirst`` 
    
    :param plateClearanceFirst: 
    :type plateClearanceFirst: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceFourth: float = ...
    """
    Returns or sets  the plate clearance fourth.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceFourth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceFourth`` 
    
    :param plateClearanceFourth: 
    :type plateClearanceFourth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceNinth: float = ...
    """
    Returns or sets  the plate clearance ninth.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceNinth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceNinth`` 
    
    :param plateClearanceNinth: 
    :type plateClearanceNinth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceSecond: float = ...
    """
    Returns or sets  the plate clearance second.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceSecond`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceSecond`` 
    
    :param plateClearanceSecond: 
    :type plateClearanceSecond: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceSeventh: float = ...
    """
    Returns or sets  the plate clearance seventh.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceSeventh`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceSeventh`` 
    
    :param plateClearanceSeventh: 
    :type plateClearanceSeventh: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceSixth: float = ...
    """
    Returns or sets  the plate clearance sixth.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceSixth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceSixth`` 
    
    :param plateClearanceSixth: 
    :type plateClearanceSixth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceTenth: float = ...
    """
    Returns or sets  the plate clearance tenth.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceTenth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceTenth`` 
    
    :param plateClearanceTenth: 
    :type plateClearanceTenth: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceThird: float = ...
    """
    Returns or sets  the plate clearance third.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceThird`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceThird`` 
    
    :param plateClaranceThird: 
    :type plateClaranceThird: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectFace: NXOpen.ScCollector = ...
    """
    Returns  the select face.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectPart: NXOpen.SelectBody = ...
    """
    Returns  the selected part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ShowPartAndClearanceHoleOnly: bool = ...
    """
    Returns or sets  the option to show selected part and clearance hole only.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowPartAndClearanceHoleOnly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowPartAndClearanceHoleOnly`` 
    
    :param showPartAndClearanceHoleOnly: 
    :type showPartAndClearanceHoleOnly: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SpecifyClearanceDataFile: str = ...
    """
    Returns or sets  the name and full path of specified file.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyClearanceDataFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyClearanceDataFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToolPartOrTargetPart: ClearanceManagementBuilderSelection = ...
    """
    Returns or sets  the tool part or target part.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolPartOrTargetPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ClearanceManagementBuilderSelection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolPartOrTargetPart`` 
    
    :param toolPartOrTargetPart: 
    :type toolPartOrTargetPart: :py:class:`NXOpen.Tooling.ClearanceManagementBuilderSelection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TypeAssignOrCheck: ClearanceManagementBuilderType = ...
    """
    Returns or sets  the clearance management type.  
    
    <hr>
    
    Getter Method
    
    Signature ``TypeAssignOrCheck`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ClearanceManagementBuilderType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TypeAssignOrCheck`` 
    
    :param typeAssignOrCheck: 
    :type typeAssignOrCheck: :py:class:`NXOpen.Tooling.ClearanceManagementBuilderType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceEighth: bool = ...
    """
    Returns or sets  the option whether use plate clearance eighth.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceEighth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceEighth`` 
    
    :param usePlateClearanceEighth: 
    :type usePlateClearanceEighth: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceFifth: bool = ...
    """
    Returns or sets  the option whether use plate clearance fifth.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceFifth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceFifth`` 
    
    :param usePlateClearanceFifth: 
    :type usePlateClearanceFifth: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceFirst: bool = ...
    """
    Returns or sets  the option whether use plate clearance first.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceFirst`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceFirst`` 
    
    :param usePlateClearanceFirst: 
    :type usePlateClearanceFirst: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceFourth: bool = ...
    """
    Returns or sets  the option whether use plate clearance fourth.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceFourth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceFourth`` 
    
    :param usePlateClearanceFourth: 
    :type usePlateClearanceFourth: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceNinth: bool = ...
    """
    Returns or sets  the option whether use plate clearance ninth.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceNinth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceNinth`` 
    
    :param usePlateClearanceNinth: 
    :type usePlateClearanceNinth: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceSecond: bool = ...
    """
    Returns or sets  the option whether use plate clearance second.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceSecond`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceSecond`` 
    
    :param usePlateClearanceSecond: 
    :type usePlateClearanceSecond: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceSeventh: bool = ...
    """
    Returns or sets  the option whether use plate clearance seventh.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceSeventh`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceSeventh`` 
    
    :param usePlateClearanceSeventh: 
    :type usePlateClearanceSeventh: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceSixth: bool = ...
    """
    Returns or sets  the option whether use plate clearance sixth.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceSixth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceSixth`` 
    
    :param usePlateClearanceSixth: 
    :type usePlateClearanceSixth: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceTenth: bool = ...
    """
    Returns or sets  the option whether use plate clearance tenth.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceTenth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceTenth`` 
    
    :param usePlateClearanceTenth: 
    :type usePlateClearanceTenth: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceThird: bool = ...
    """
    Returns or sets  the option whether use plate clearance third.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceThird`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceThird`` 
    
    :param usePlateClearanceThird: 
    :type usePlateClearanceThird: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: ClearanceManagementBuilder = ...  # unknown typename


class ProgressiveDieManager():
    """
    Provides create builder methods for Progressive Die.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def CreateRemoveHolesBuilder(self) -> RemoveHolesBuilder:
        """
        Creates Remove Holes builder.  
        
        Signature ``CreateRemoveHolesBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.RemoveHolesBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateRunSimulationBuilder(self) -> RunSimulationBuilder:
        """
        Creates Run Simulation builder.  
        
        Signature ``CreateRunSimulationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.RunSimulationBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateDefineCamBuilder(self) -> DefineCamBuilder:
        """
        Creates Define Cam builder.  
        
        Signature ``CreateDefineCamBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DefineCamBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateDefineLifterBuilder(self) -> DefineLifterBuilder:
        """
        Creates Define Lifter builder.  
        
        Signature ``CreateDefineLifterBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DefineLifterBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateBackingPadBuilder(self) -> BackingPadBuilder:
        """
        Creates backing pad builder.  
        
        Signature ``CreateBackingPadBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.BackingPadBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateSlugRetentionBuilder(self, featureSet: NXOpen.Features.FeatureGroup) -> SlugRetentionBuilder:
        """
        Creates slug retention builder.  
        
        Signature ``CreateSlugRetentionBuilder(featureSet)`` 
        
        :param featureSet: 
        :type featureSet: :py:class:`NXOpen.Features.FeatureGroup` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SlugRetentionBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateGeneralInsertBuilder(self) -> GeneralInsertBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.GeneralInsertBuilder`  
        
        Signature ``CreateGeneralInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.GeneralInsertBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateHemFixerBuilder(self, featureSet: NXOpen.Features.FeatureGroup) -> HemFixerBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.HemFixerBuilder`  
        
        Signature ``CreateHemFixerBuilder(featureSet)`` 
        
        :param featureSet: 
        :type featureSet: :py:class:`NXOpen.Features.FeatureGroup` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.HemFixerBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateShimBuilder(self) -> ShimBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.ShimBuilder`  
        
        Signature ``CreateShimBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ShimBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateShimInnerProfileSetBuilder(self) -> ShimInnerProfileSetBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder`  
        
        Signature ``CreateShimInnerProfileSetBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateStripperVentingBuilder(self, featureSet: NXOpen.Features.FeatureGroup) -> StripperVentingBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.StripperVentingBuilder`  
        
        Signature ``CreateStripperVentingBuilder(featureSet)`` 
        
        :param featureSet: 
        :type featureSet: :py:class:`NXOpen.Features.FeatureGroup` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.StripperVentingBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateUnfoldingSimulationBuilder(self) -> UnfoldingSimulationBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.UnfoldingSimulationBuilder`  
        
        Signature ``CreateUnfoldingSimulationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.UnfoldingSimulationBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDieInsertBuilder(self) -> DieInsertBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.DieInsertBuilder`  
        
        Signature ``CreateDieInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieInsertBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateDieCavityAndSlugHoleBuilder(self) -> DieCavityAndSlugHoleBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilder`  
        
        Signature ``CreateDieCavityAndSlugHoleBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieCavityAndSlugHoleBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreatePunchInsertBuilder(self) -> PunchInsertBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.PunchInsertBuilder`  
        
        Signature ``CreatePunchInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.PunchInsertBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreatePiercingInsertMiniToolsBuilder(self) -> PiercingInsertMiniToolsBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.PiercingInsertMiniToolsBuilder`  
        
        Signature ``CreatePiercingInsertMiniToolsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.PiercingInsertMiniToolsBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateSmartScrewUpdateBuilder(self) -> SmartScrewUpdateBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.SmartScrewUpdateBuilder`  
        
        Signature ``CreateSmartScrewUpdateBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SmartScrewUpdateBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateSpecialPiercingInsertBuilder(self) -> SpecialPiercingInsertBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilder`  
        
        Signature ``CreateSpecialPiercingInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSpecialFormingBuilder(self) -> SpecialFormingBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.SpecialFormingBuilder`  
        
        Signature ``CreateSpecialFormingBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SpecialFormingBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateHoleDatumSymbolBuilder(self) -> HoleDatumSymbolBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.HoleDatumSymbolBuilder`  
        
        Signature ``CreateHoleDatumSymbolBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.HoleDatumSymbolBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateRenameAndExportComponentBuilder(self) -> RenameAndExportComponentBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilder`  
        
        Signature ``CreateRenameAndExportComponentBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateInsertEditToolsBuilder(self) -> InsertEditToolsBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.InsertEditToolsBuilder`  
        
        Signature ``CreateInsertEditToolsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.InsertEditToolsBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateUserDefinedMotionBuilder(self) -> UserDefinedMotionBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.UserDefinedMotionBuilder`  
        
        Signature ``CreateUserDefinedMotionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.UserDefinedMotionBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard") OR ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateSplitInsertBuilder(self) -> SplitInsertBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.SplitInsertBuilder`  
        
        Signature ``CreateSplitInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SplitInsertBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    


class DieEngFormTaskBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Form Task builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieEngFormTaskBuilder`
    
    Default values.
    
    ================  =====
    Property          Value
    ================  =====
    FinishOperation   1 
    ================  =====
    
    .. versionadded:: NX8.0.0
    """
    
    def GetDetails(self) -> 'list[str]':
        """
        Returns the detailed information of the feature set by user.  
        
        Signature ``GetDetails()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDetails(self, details: 'list[str]') -> None:
        """
        Sets the detailed information of the feature.  
        
        Signature ``SetDetails(details)`` 
        
        :param details: 
        :type details: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    CamDirection: NXOpen.Direction = ...
    """
    Returns or sets  the cam direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``CamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CamDirection`` 
    
    :param camDirection: 
    :type camDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DieTip: NXOpen.Features.SelectFeature = ...
    """
    Returns  the die tip selection.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieTip`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FinishOperation: bool = ...
    """
    Returns or sets  the finish operation option.  
    
    <hr>
    
    Getter Method
    
    Signature ``FinishOperation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FinishOperation`` 
    
    :param finishOperation: 
    :type finishOperation: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PointInRegion: NXOpen.Point = ...
    """
    Returns or sets  the point in region 
    
    <hr>
    
    Getter Method
    
    Signature ``PointInRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointInRegion`` 
    
    :param pointInRegion: 
    :type pointInRegion: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    RegionBounds: NXOpen.ScCollector = ...
    """
    Returns  the edge region bounds 
    
    <hr>
    
    Getter Method
    
    Signature ``RegionBounds`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ShapeDetail: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the shape detail selection.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeDetail`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: DieEngFormTaskBuilder = ...  # unknown typename


class ChannelAdjustBuilderAdjustTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ChannelAdjustBuilderAdjustType():
    """
    the adjust method. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Distance", "Reposition the target channels."
       "BaffleLength", "Change the length of the baffles."
    """
    Distance = 0  # ChannelAdjustBuilderAdjustTypeMemberType
    BaffleLength = 1  # ChannelAdjustBuilderAdjustTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ChannelAdjustBuilderVectorMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ChannelAdjustBuilderVectorMethod():
    """
    the vector adjust method. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Along", "Reposition the target channels along the vector specified."
       "Perpendicular", "Reposition the target channels Perpendicular the vector specified."
    """
    Along = 0  # ChannelAdjustBuilderVectorMethodMemberType
    Perpendicular = 1  # ChannelAdjustBuilderVectorMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ChannelAdjustBuilder(NXOpen.Builder):
    """
    The builder class for Channel Adjust which assists you
    to adjust the postion and the length of the channel.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ChannelAdjustCollection.CreateChannelAdjustBuilder`
    
    Default values.
    
    =================  ======================================
    Property           Value
    =================  ======================================
    Distance.Value     0 (millimeters part), 0 (inches part) 
    -----------------  --------------------------------------
    RepositionMethod   Along 
    =================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    
    class AdjustType():
        """
        the adjust method. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Distance", "Reposition the target channels."
           "BaffleLength", "Change the length of the baffles."
        """
        Distance = 0  # ChannelAdjustBuilderAdjustTypeMemberType
        BaffleLength = 1  # ChannelAdjustBuilderAdjustTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VectorMethod():
        """
        the vector adjust method. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Along", "Reposition the target channels along the vector specified."
           "Perpendicular", "Reposition the target channels Perpendicular the vector specified."
        """
        Along = 0  # ChannelAdjustBuilderVectorMethodMemberType
        Perpendicular = 1  # ChannelAdjustBuilderVectorMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetManipulatorOriginValue(self, moveOrigin: NXOpen.Point3d) -> None:
        """
        Sets the manipulator origin.  
        
        Signature ``SetManipulatorOriginValue(moveOrigin)`` 
        
        :param moveOrigin: 
        :type moveOrigin: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX9.0.2
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    AdjustMethod: ChannelAdjustBuilderAdjustType = ...
    """
    Returns or sets  the method for adjusting the cooling channels.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjustMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ChannelAdjustBuilderAdjustType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjustMethod`` 
    
    :param adjustMethod: 
    :type adjustMethod: :py:class:`NXOpen.Tooling.ChannelAdjustBuilderAdjustType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    AdjustVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector specified for the adjust direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjustVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjustVector`` 
    
    :param adjustVector: 
    :type adjustVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Distance: NXOpen.Expression = ...
    """
    Returns  the distance between the channels and faces.  
    
    <hr>
    
    Getter Method
    
    Signature ``Distance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReferenceFace: NXOpen.ScCollector = ...
    """
    Returns  the reference faces for calculating the distance to the cooling channels.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RepositionMethod: ChannelAdjustBuilderVectorMethod = ...
    """
    Returns or sets  the method for moving the cooling channels.  
    
    <hr>
    
    Getter Method
    
    Signature ``RepositionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ChannelAdjustBuilderVectorMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RepositionMethod`` 
    
    :param repositionMethod: 
    :type repositionMethod: :py:class:`NXOpen.Tooling.ChannelAdjustBuilderVectorMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TargetChannel: NXOpen.SelectBodyList = ...
    """
    Returns  the cooling channel to be adjusted.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetChannel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ChannelAdjustBuilder = ...  # unknown typename


class ElectrodeCheckingBuilder(NXOpen.Builder):
    """
    Electrode Checking builder to check the touch status of all electrode.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ElectrodeDesignCollection.CreateCheckingBuilder`
    
    Default values.
    
    =============  =====
    Property       Value
    =============  =====
    InterSolid     1 
    -------------  -----
    MapFaceColor   1 
    -------------  -----
    SameParent     1 
    -------------  -----
    TouchArea      0 
    -------------  -----
    TouchBody      1 
    =============  =====
    
    .. versionadded:: NX8.0.0
    """
    Electrode: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the electrode part to be checked with the workpiece part.  
    
    <hr>
    
    Getter Method
    
    Signature ``Electrode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ElectrodeNameFilter: str = ...
    """
    Returns or sets  the wildcard string to filter out the electrode part name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ElectrodeNameFilter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ElectrodeNameFilter`` 
    
    :param electrodeNameFilter: 
    :type electrodeNameFilter: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    InterSolid: bool = ...
    """
    Returns or sets  the option for generating the interference solid body.  
    
    <hr>
    
    Getter Method
    
    Signature ``InterSolid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterSolid`` 
    
    :param interSolid: 
    :type interSolid: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    MapFaceColor: bool = ...
    """
    Returns or sets  the option for mapping color of the touched face pair from workpiece to electrode.  
    
    <hr>
    
    Getter Method
    
    Signature ``MapFaceColor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MapFaceColor`` 
    
    :param mapFaceColor: 
    :type mapFaceColor: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    SameParent: bool = ...
    """
    Returns or sets  the option for checking the workpiece and electrode part under the same part or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``SameParent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SameParent`` 
    
    :param sameParent: 
    :type sameParent: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    SaveResultsInPart: bool = ...
    """
    Returns or sets  the option for saving checking results in part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SaveResultsInPart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveResultsInPart`` 
    
    :param saveResultsInPart: 
    :type saveResultsInPart: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    TouchArea: bool = ...
    """
    Returns or sets  the option for calculating the area of the touch sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``TouchArea`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TouchArea`` 
    
    :param touchArea: 
    :type touchArea: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    TouchBody: bool = ...
    """
    Returns or sets  the option for generating the touch sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``TouchBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TouchBody`` 
    
    :param touchBody: 
    :type touchBody: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Workpiece: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the workpiece part to be checked with the electrode part.  
    
    <hr>
    
    Getter Method
    
    Signature ``Workpiece`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    WorkpieceNameFilter: str = ...
    """
    Returns or sets  the wildcard string to filter out the workpiece part name.  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkpieceNameFilter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkpieceNameFilter`` 
    
    :param workpieceNameFilter: 
    :type workpieceNameFilter: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Null: ElectrodeCheckingBuilder = ...  # unknown typename


class InsertAuxiliaryCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateInsertAuxiliaryBuilder(self) -> InsertAuxiliaryBuilder:
        """
        Creates insert auxiliary builder.  
        
        Signature ``CreateInsertAuxiliaryBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class RunnerBuilderSectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RunnerBuilderSectionType():
    """
    Represents the section type of runner channel. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circular", "Use circular section type."
       "Parabolic", "Use parabolic section type."
       "Trapezoidal", "Use trapezoidal section type."
       "Hexagonal", "Use hexagonal section type."
       "SemiCircular", "Use semicircular section type."
    """
    Circular = 0  # RunnerBuilderSectionTypeMemberType
    Parabolic = 1  # RunnerBuilderSectionTypeMemberType
    Trapezoidal = 2  # RunnerBuilderSectionTypeMemberType
    Hexagonal = 3  # RunnerBuilderSectionTypeMemberType
    SemiCircular = 4  # RunnerBuilderSectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RunnerBuilderGuideEndTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RunnerBuilderGuideEndType():
    """
    Represents the runner guide end type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Both", "Use both start and end points."
       "StartOnly", "Use the start point only."
       "EndOnly", "Use the end point only."
       "NotSet", "None of runner guide points for use."
    """
    Both = 0  # RunnerBuilderGuideEndTypeMemberType
    StartOnly = 1  # RunnerBuilderGuideEndTypeMemberType
    EndOnly = 2  # RunnerBuilderGuideEndTypeMemberType
    NotSet = 3  # RunnerBuilderGuideEndTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RunnerBuilder(NXOpen.Builder):
    """
    Mold Wizard runner management builder, select curves as runner guide, choose section type and edit
    section parameters, optional choose boolean type to create runner channel.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.RunnerCollection.CreateRunnerBuilder`
    
    Default values.
    
    ==========================  =====================
    Property                    Value
    ==========================  =====================
    EndShape                    Both 
    --------------------------  ---------------------
    SectionShape                Circular 
    --------------------------  ---------------------
    TransMotion.DeltaEnum       ReferenceWcsWorkPart 
    --------------------------  ---------------------
    TransMotion.DeltaXc.Value   0.0 
    --------------------------  ---------------------
    TransMotion.DeltaYc.Value   0.0 
    --------------------------  ---------------------
    TransMotion.DeltaZc.Value   0.0 
    ==========================  =====================
    
    .. versionadded:: NX7.5.0
    """
    
    class SectionType():
        """
        Represents the section type of runner channel. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circular", "Use circular section type."
           "Parabolic", "Use parabolic section type."
           "Trapezoidal", "Use trapezoidal section type."
           "Hexagonal", "Use hexagonal section type."
           "SemiCircular", "Use semicircular section type."
        """
        Circular = 0  # RunnerBuilderSectionTypeMemberType
        Parabolic = 1  # RunnerBuilderSectionTypeMemberType
        Trapezoidal = 2  # RunnerBuilderSectionTypeMemberType
        Hexagonal = 3  # RunnerBuilderSectionTypeMemberType
        SemiCircular = 4  # RunnerBuilderSectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GuideEndType():
        """
        Represents the runner guide end type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Both", "Use both start and end points."
           "StartOnly", "Use the start point only."
           "EndOnly", "Use the end point only."
           "NotSet", "None of runner guide points for use."
        """
        Both = 0  # RunnerBuilderGuideEndTypeMemberType
        StartOnly = 1  # RunnerBuilderGuideEndTypeMemberType
        EndOnly = 2  # RunnerBuilderGuideEndTypeMemberType
        NotSet = 3  # RunnerBuilderGuideEndTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DeleteRunner(self) -> None:
        """
        Deletes the runner bodies.  
        
        Signature ``DeleteRunner()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def EditRegisterFile(self) -> None:
        """
        Edits runner section register file.  
        
        Signature ``EditRegisterFile()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def EditDataBase(self) -> None:
        """
        Edits runner section data base.  
        
        Signature ``EditDataBase()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDataFromRunnerFeature(self, sheetData: SpreadsheetData) -> None:
        """
        Gets spreadsheet data from runner feature.  
        
        Signature ``GetDataFromRunnerFeature(sheetData)`` 
        
        :param sheetData:  Spreadsheet data  
        :type sheetData: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def ImportTemplate(self) -> None:
        """
        Import runner section template part.  
        
        Signature ``ImportTemplate()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def UpdateGuideLoops(self) -> None:
        """
        Restruct guide loops when guide curve selection updates.  
        
        Signature ``UpdateGuideLoops()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def ReadSectionDataFromDatabase(self) -> 'list[str]':
        """
        Read section data from runner section database.  
        
        Signature ``ReadSectionDataFromDatabase()`` 
        
        :returns:  Section type name list in spreadsheet.  
        :rtype: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def SetParameterTreeData(self, sheetData: SpreadsheetData) -> None:
        """
        Sets spreadsheet data.  
        
        Signature ``SetParameterTreeData(sheetData)`` 
        
        :param sheetData:  Spreadsheet data  
        :type sheetData: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def ReadSelectedSectionData(self, sectionName: str) -> None:
        """
        Reads selected section data from database.  
        
        Signature ``ReadSelectedSectionData(sectionName)`` 
        
        :param sectionName: 
        :type sectionName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def StoreSectionParameters(self) -> None:
        """
        Stores current section parameters information.  
        
        Signature ``StoreSectionParameters()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def EditTemplateExpression(self) -> None:
        """
        Edits expressions of runner section.  
        
        Signature ``EditTemplateExpression()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def UpdateTemplatePart(self) -> None:
        """
        Updates runner section.  
        
        Signature ``UpdateTemplatePart()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def UpdateGuideOrientation(self) -> None:
        """
        Updates the orientation of the section in guide loops.  
        
        Signature ``UpdateGuideOrientation()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    BooleanOperation: NXOpen.GeometricUtilities.BooleanOperation = ...
    """
    Returns  the boolean operation to perform on the runner.  
    
    <hr>
    
    Getter Method
    
    Signature ``BooleanOperation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.BooleanOperation` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EndShape: RunnerBuilderGuideEndType = ...
    """
    Returns or sets  the guide end shape type of runner.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.RunnerBuilderGuideEndType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndShape`` 
    
    :param endShape: 
    :type endShape: :py:class:`NXOpen.Tooling.RunnerBuilderGuideEndType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    GuideLines: NXOpen.Section = ...
    """
    Returns  the runner guide lines to create runner channel.  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideLines`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RunnerBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the runner bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``RunnerBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SectionOffset: NXOpen.Expression = ...
    """
    Returns  the offset value of the runner section.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SectionShape: RunnerBuilderSectionType = ...
    """
    Returns or sets  the section shape type of runner.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.RunnerBuilderSectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionShape`` 
    
    :param sectionShape: 
    :type sectionShape: :py:class:`NXOpen.Tooling.RunnerBuilderSectionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SectionVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector indicating the runner section direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``SectionVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionVector`` 
    
    :param sectionVector: 
    :type sectionVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TransMotion: NXOpen.GeometricUtilities.ModlMotion = ...
    """
    Returns  the transform motion to rotate the section curves.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransMotion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ModlMotion` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: RunnerBuilder = ...  # unknown typename


class LayoutBuilderLayoutTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LayoutBuilderLayoutType():
    """
    Represents the type of layout. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangle", "Rectangle layout"
       "Circular", "Circle layout"
    """
    Rectangle = 0  # LayoutBuilderLayoutTypeMemberType
    Circular = 1  # LayoutBuilderLayoutTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LayoutBuilderLayoutSubTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LayoutBuilderLayoutSubType():
    """
    Represents the the sub type of layout. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Balance", "Balance type"
       "Linear", "Linear type"
       "Radial", "Radial circular type"
       "Constant", "Constanct circular type"
    """
    Balance = 0  # LayoutBuilderLayoutSubTypeMemberType
    Linear = 1  # LayoutBuilderLayoutSubTypeMemberType
    Radial = 2  # LayoutBuilderLayoutSubTypeMemberType
    Constant = 3  # LayoutBuilderLayoutSubTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LayoutBuilderBalNumberMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LayoutBuilderBalNumber():
    """
    Represents the number of balance cavity. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Two", "Two balance cavities"
       "Four", "Four balance cavities"
    """
    Two = 0  # LayoutBuilderBalNumberMemberType
    Four = 1  # LayoutBuilderBalNumberMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LayoutBuilderXrefNumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LayoutBuilderXrefNum():
    """
    Represents the type of x move refer. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Block", "Block type"
       "Move", "Move type"
    """
    Block = 0  # LayoutBuilderXrefNumMemberType
    Move = 1  # LayoutBuilderXrefNumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LayoutBuilderYrefNumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LayoutBuilderYrefNum():
    """
    Represents the type of y move refer. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Block", "Block type"
       "Move", "Move type"
    """
    Block = 0  # LayoutBuilderYrefNumMemberType
    Move = 1  # LayoutBuilderYrefNumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LayoutBuilder(NXOpen.Builder):
    """
    Represents a Tooling::LayoutBuilder builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWLayoutCollection.CreateLayoutBuilder`
    
    Default values.
    
    ==================  ======================================
    Property            Value
    ==================  ======================================
    CirCavityNumber     2 
    ------------------  --------------------------------------
    CirRadius           0 
    ------------------  --------------------------------------
    CirRotateAngle      360 
    ------------------  --------------------------------------
    CirStartAngle       0 
    ------------------  --------------------------------------
    DimBalFirst.Value   0 (millimeters part), 0 (inches part) 
    ------------------  --------------------------------------
    LinXnumber          2 
    ------------------  --------------------------------------
    LinYnumber          1 
    ==================  ======================================
    
    .. versionadded:: NX6.0.0
    """
    
    class LayoutType():
        """
        Represents the type of layout. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangle", "Rectangle layout"
           "Circular", "Circle layout"
        """
        Rectangle = 0  # LayoutBuilderLayoutTypeMemberType
        Circular = 1  # LayoutBuilderLayoutTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LayoutSubType():
        """
        Represents the the sub type of layout. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Balance", "Balance type"
           "Linear", "Linear type"
           "Radial", "Radial circular type"
           "Constant", "Constanct circular type"
        """
        Balance = 0  # LayoutBuilderLayoutSubTypeMemberType
        Linear = 1  # LayoutBuilderLayoutSubTypeMemberType
        Radial = 2  # LayoutBuilderLayoutSubTypeMemberType
        Constant = 3  # LayoutBuilderLayoutSubTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BalNumber():
        """
        Represents the number of balance cavity. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Two", "Two balance cavities"
           "Four", "Four balance cavities"
        """
        Two = 0  # LayoutBuilderBalNumberMemberType
        Four = 1  # LayoutBuilderBalNumberMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class XrefNum():
        """
        Represents the type of x move refer. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Block", "Block type"
           "Move", "Move type"
        """
        Block = 0  # LayoutBuilderXrefNumMemberType
        Move = 1  # LayoutBuilderXrefNumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class YrefNum():
        """
        Represents the type of y move refer. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Block", "Block type"
           "Move", "Move type"
        """
        Block = 0  # LayoutBuilderYrefNumMemberType
        Move = 1  # LayoutBuilderYrefNumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Layout(self) -> None:
        """
        Perform cavity layout 
        
        Signature ``Layout()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insertpocket(self) -> None:
        """
        Insert pocket 
        
        Signature ``Insertpocket()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Transform(self) -> None:
        """
        Reposition cavity 
        
        Signature ``Transform()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Remove(self) -> None:
        """
        Remove cavity 
        
        Signature ``Remove()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Autocenter(self) -> None:
        """
        Make center of cavity 
        
        Signature ``Autocenter()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    BalCavityNumber: LayoutBuilderBalNumber = ...
    """
    Returns or sets  the balance cavity number 
    
    <hr>
    
    Getter Method
    
    Signature ``BalCavityNumber`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LayoutBuilderBalNumber` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BalCavityNumber`` 
    
    :param enumBalCavityNumber: 
    :type enumBalCavityNumber: :py:class:`NXOpen.Tooling.LayoutBuilderBalNumber` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CirCavityNumber: int = ...
    """
    Returns or sets  the copy number for circular transform 
    
    <hr>
    
    Getter Method
    
    Signature ``CirCavityNumber`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CirCavityNumber`` 
    
    :param cirCavityNumber: 
    :type cirCavityNumber: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CirRadius: float = ...
    """
    Returns or sets  the radius value 
    
    <hr>
    
    Getter Method
    
    Signature ``CirRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CirRadius`` 
    
    :param cirRadius: 
    :type cirRadius: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CirRotateAngle: float = ...
    """
    Returns or sets  the rotate angle 
    
    <hr>
    
    Getter Method
    
    Signature ``CirRotateAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CirRotateAngle`` 
    
    :param cirRotateAngle: 
    :type cirRotateAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CirStartAngle: float = ...
    """
    Returns or sets  the start angle 
    
    <hr>
    
    Getter Method
    
    Signature ``CirStartAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CirStartAngle`` 
    
    :param cirStartAngle: 
    :type cirStartAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DimBalFirst: NXOpen.Expression = ...
    """
    Returns  the first dimension for balance transform 
    
    <hr>
    
    Getter Method
    
    Signature ``DimBalFirst`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DimBalSecond: NXOpen.Expression = ...
    """
    Returns  the second dimension for balance transform 
    
    <hr>
    
    Getter Method
    
    Signature ``DimBalSecond`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DimXdist: NXOpen.Expression = ...
    """
    Returns  the cavity distance dimension in X-axis 
    
    <hr>
    
    Getter Method
    
    Signature ``DimXdist`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DimYdist: NXOpen.Expression = ...
    """
    Returns  the cavity distance dimension in Y-axis 
    
    <hr>
    
    Getter Method
    
    Signature ``DimYdist`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LayoutVector: NXOpen.Direction = ...
    """
    Returns or sets  the rotate vector 
    
    <hr>
    
    Getter Method
    
    Signature ``LayoutVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LayoutVector`` 
    
    :param layoutVector: 
    :type layoutVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LinXnumber: int = ...
    """
    Returns or sets  the copy number for linear transform in X-axis 
    
    <hr>
    
    Getter Method
    
    Signature ``LinXnumber`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinXnumber`` 
    
    :param linXNumber: 
    :type linXNumber: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LinYnumber: int = ...
    """
    Returns or sets  the copy number for linear transform in Y-axis 
    
    <hr>
    
    Getter Method
    
    Signature ``LinYnumber`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinYnumber`` 
    
    :param linYNumber: 
    :type linYNumber: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MwLayoutType: LayoutBuilderLayoutType = ...
    """
    Returns or sets  the layout pattern type 
    
    <hr>
    
    Getter Method
    
    Signature ``MwLayoutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LayoutBuilderLayoutType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MwLayoutType`` 
    
    :param enumLayoutType: 
    :type enumLayoutType: :py:class:`NXOpen.Tooling.LayoutBuilderLayoutType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RotatePoint: NXOpen.Point = ...
    """
    Returns or sets  the rotate point 
    
    <hr>
    
    Getter Method
    
    Signature ``RotatePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotatePoint`` 
    
    :param rotatePoint: 
    :type rotatePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectCavity: NXOpen.SelectBodyList = ...
    """
    Returns  the select cavity 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCavity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SubType: LayoutBuilderLayoutSubType = ...
    """
    Returns or sets  the layout transform type 
    
    <hr>
    
    Getter Method
    
    Signature ``SubType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LayoutBuilderLayoutSubType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SubType`` 
    
    :param enumSubType: 
    :type enumSubType: :py:class:`NXOpen.Tooling.LayoutBuilderLayoutSubType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Xref: LayoutBuilderXrefNum = ...
    """
    Returns or sets  the layout cavity number in X-axis 
    
    <hr>
    
    Getter Method
    
    Signature ``Xref`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LayoutBuilderXrefNum` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Xref`` 
    
    :param enumXRef: 
    :type enumXRef: :py:class:`NXOpen.Tooling.LayoutBuilderXrefNum` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Yref: LayoutBuilderYrefNum = ...
    """
    Returns or sets  the layout cavity number in Y-axis 
    
    <hr>
    
    Getter Method
    
    Signature ``Yref`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LayoutBuilderYrefNum` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Yref`` 
    
    :param enumYRef: 
    :type enumYRef: :py:class:`NXOpen.Tooling.LayoutBuilderYrefNum` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: LayoutBuilder = ...  # unknown typename


class DesignTrimToolBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create Mold Wizard design trim tool.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.DesignTrimToolCollection.CreateDesignTrimToolBuilder`
    
    Default values.
    
    ================  =====
    Property          Value
    ================  =====
    NewSurfaceLayer   32 
    ================  =====
    
    .. versionadded:: NX7.5.0
    """
    
    def SetTrimDataDetails(self, trimPart: NXOpen.NXObject, sourceObjectOcc: NXOpen.NXObject, currentTrimSurfaceName: str, previousTrimSurfaceName: str) -> None:
        """
        Set details of the trim data.  
        
        Signature ``SetTrimDataDetails(trimPart, sourceObjectOcc, currentTrimSurfaceName, previousTrimSurfaceName)`` 
        
        :param trimPart:  the trim part where to create or edit or trim surface feature.  
        :type trimPart: :py:class:`NXOpen.NXObject` 
        :param sourceObjectOcc:  the source object occurrence used to create a linked feature in the trim part.  
        :type sourceObjectOcc: :py:class:`NXOpen.NXObject` 
        :param currentTrimSurfaceName:  the name to set to the trim surface feature.  
        :type currentTrimSurfaceName: str 
        :param previousTrimSurfaceName:  the previous name of the trim surface feature.  
        :type previousTrimSurfaceName: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateNewComponent(self, partName: str, instanceName: str) -> NXOpen.Assemblies.Component:
        """
        Create a new trim part component in the work part.  
        
        Signature ``CreateNewComponent(partName, instanceName)`` 
        
        :param partName:  the part name for the new component.  
        :type partName: str 
        :param instanceName:  the instance name for the new component.  
        :type instanceName: str 
        :returns:  the new component that is created.  
        :rtype: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDefaultSheet(self, surfaceName: str, trimPart: NXOpen.NXObject, sheetType: int, layer: int) -> NXOpen.NXObject:
        """
        Create a Moldwizard default trim surface, including CORE_TRIM_SHEET, CAVITY_TRIM_SHEET, CORE_MOLD_SURFACE, CAVITY_MOLD_SURFACE.  
        
        Signature ``CreateDefaultSheet(surfaceName, trimPart, sheetType, layer)`` 
        
        :param surfaceName:  the name for the default sheet to create.  
        :type surfaceName: str 
        :param trimPart:  the trim part where to create the default trim surface feature.  
        :type trimPart: :py:class:`NXOpen.NXObject` 
        :param sheetType:  the sheet type, parting sheet or mold surface.  
        :type sheetType: int 
        :param layer:  the layer to put the new sheet feature.  
        :type layer: int 
        :returns:  the new sheet that is created.  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    NewSurfaceLayer: int = ...
    """
    Returns or sets  the layer where the new trim surface is created.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewSurfaceLayer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewSurfaceLayer`` 
    
    :param newSurfaceLayer: 
    :type newSurfaceLayer: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SourceObject: NXOpen.SelectNXObject = ...
    """
    Returns  the face or sheet body.  
    
    <hr>
    
    Getter Method
    
    Signature ``SourceObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: DesignTrimToolBuilder = ...  # unknown typename


class ChannelFittingBuilder(NXOpen.Builder):
    """
    The builder class for Channel Fitting which assists you
    to add cooling fitting.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ChannelFittingCollection.CreateChannelFittingBuilder`
    
    Default values.
    
    ======================  =========================================
    Property                Value
    ======================  =========================================
    BottomClearance.Value   0 (millimeters part), 0 (inches part) 
    ----------------------  -----------------------------------------
    TopClearance.Value      5 (millimeters part), 1.25 (inches part) 
    ----------------------  -----------------------------------------
    UseSymbol               1 
    ======================  =========================================
    
    .. versionadded:: NX7.5.0
    """
    
    def CreateCoolingFittingData(self) -> CoolingFittingData:
        """
        Creates the Cooling Fitting Data object.  
        
        Signature ``CreateCoolingFittingData()`` 
        
        :returns:  the new :py:class:`Tooling.CoolingFittingData` instance  
        :rtype: :py:class:`NXOpen.Tooling.CoolingFittingData` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetCoolingFittingData(self) -> CoolingFittingData:
        """
        Get the Cooling Fitting Data object.  
        
        Signature ``GetCoolingFittingData()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CoolingFittingData` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateFittingPoints(self) -> None:
        """
        Create Fitting Points.  
        
        Signature ``CreateFittingPoints()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    BottomClearance: NXOpen.Expression = ...
    """
    Returns  the bottom clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``BottomClearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BoundaryBody: NXOpen.SelectBodyList = ...
    """
    Returns  the boundary body to create the cooling fitting points.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    FittingPoint: NXOpen.Point = ...
    """
    Returns or sets  the new point specified for the cooling fitting point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FittingPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FittingPoint`` 
    
    :param fittingPoint: 
    :type fittingPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ParentChannel: NXOpen.SelectBodyList = ...
    """
    Returns  the parent channel of the cooling fitting points.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentChannel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SearchBoundaryBodies: bool = ...
    """
    Returns or sets  the value which specifies whether to auto search boundary bodies or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``SearchBoundaryBodies`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SearchBoundaryBodies`` 
    
    :param searchBoundaryBodies: 
    :type searchBoundaryBodies: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TopClearance: NXOpen.Expression = ...
    """
    Returns  the top clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``TopClearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    UseSymbol: bool = ...
    """
    Returns or sets  the value which specifies whether to add real component or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseSymbol`` 
    
    :param useSymbol: 
    :type useSymbol: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Null: ChannelFittingBuilder = ...  # unknown typename


class FaceColorManagementBuilderHoleTypeEnumValueMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FaceColorManagementBuilderHoleTypeEnumValue():
    """
    the hole type enumeration 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ThroughHoles", " - "
       "BlindHoles", " - "
       "CounterboredHoles", " - "
       "CountersunkHoles", " - "
       "ThreadedHoles", " - "
       "ComboHoles", " - "
       "WireEDMStartHoles", " - "
       "CirclesinSketch", " - "
    """
    ThroughHoles = 0  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
    BlindHoles = 1  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
    CounterboredHoles = 2  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
    CountersunkHoles = 3  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
    ThreadedHoles = 4  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
    ComboHoles = 5  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
    WireEDMStartHoles = 6  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
    CirclesinSketch = 7  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FaceColorManagementBuilder(NXOpen.Builder):
    """
    Tooling  builder to assign and edit color of objects   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.FaceColorManagementCollection.CreateFaceColorManagementBuilder`
    
    Default values.
    
    =======================================  =============
    Property                                 Value
    =======================================  =============
    AngleNoseIgnorableSize                   0.5 
    ---------------------------------------  -------------
    FaceTranslucency                         0 
    ---------------------------------------  -------------
    HighlightSelectedFace                    0 
    ---------------------------------------  -------------
    HoleTypeEnum                             ThroughHoles 
    ---------------------------------------  -------------
    IsAutoSelectHoleByType                   0 
    ---------------------------------------  -------------
    IsShowFaceWithSameColorAttributeToggle   0 
    ---------------------------------------  -------------
    IsShowFaceWithoutColorAttributeToggle    0 
    ---------------------------------------  -------------
    OnlyCheckHoleFace                        0 
    ---------------------------------------  -------------
    SelectSubHoleFaceAutomatically           0 
    =======================================  =============
    
    .. versionadded:: NX9.0.0
    """
    
    class HoleTypeEnumValue():
        """
        the hole type enumeration 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ThroughHoles", " - "
           "BlindHoles", " - "
           "CounterboredHoles", " - "
           "CountersunkHoles", " - "
           "ThreadedHoles", " - "
           "ComboHoles", " - "
           "WireEDMStartHoles", " - "
           "CirclesinSketch", " - "
        """
        ThroughHoles = 0  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
        BlindHoles = 1  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
        CounterboredHoles = 2  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
        CountersunkHoles = 3  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
        ThreadedHoles = 4  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
        ComboHoles = 5  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
        WireEDMStartHoles = 6  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
        CirclesinSketch = 7  # FaceColorManagementBuilderHoleTypeEnumValueMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ShowFacesWithoutColorAttrirbute(self) -> None:
        """
        The action to show faces without color attributes 
        
        Signature ``ShowFacesWithoutColorAttrirbute()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def ShowFaceWithoutAnyManufacturingInformationButton(self) -> None:
        """
        The action to show face without any manufacturing information 
        
        Signature ``ShowFaceWithoutAnyManufacturingInformationButton()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ShowFaceWithSameManufacturingInformationButton(self) -> None:
        """
        The action to show face with same manufacturing information 
        
        Signature ``ShowFaceWithSameManufacturingInformationButton()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def EditColorSpreadsheet(self) -> None:
        """
        The action to edit face color spreadsheet 
        
        Signature ``EditColorSpreadsheet()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def AssignAttributeToObject(self, objectTag: NXOpen.NXObject, attrTitle: str, attrValue: str) -> None:
        """
        Assign attribute to object 
        
        Signature ``AssignAttributeToObject(objectTag, attrTitle, attrValue)`` 
        
        :param objectTag: 
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param attrTitle: 
        :type attrTitle: str 
        :param attrValue: 
        :type attrValue: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def AssignColorToObject(self, objectTag: NXOpen.NXObject, colorID: int) -> None:
        """
        Assign color to object 
        
        Signature ``AssignColorToObject(objectTag, colorID)`` 
        
        :param objectTag: 
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param colorID: 
        :type colorID: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def RemoveAttributeOfObject(self, objectTag: NXOpen.NXObject, attrTitle: str) -> None:
        """
        Remove attribute of object 
        
        Signature ``RemoveAttributeOfObject(objectTag, attrTitle)`` 
        
        :param objectTag: 
        :type objectTag: :py:class:`NXOpen.NXObject` 
        :param attrTitle: 
        :type attrTitle: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    AngleNoseIgnorableSize: float = ...
    """
    Returns or sets  the angle nose ignorable size 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleNoseIgnorableSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleNoseIgnorableSize`` 
    
    :param angleNoseIgnorableSize: 
    :type angleNoseIgnorableSize: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceColor: NXOpen.NXColor = ...
    """
    Returns or sets  the face color 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceColor`` 
    
    :param faceColor: 
    :type faceColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceTranslucency: int = ...
    """
    Returns or sets  the face translucency 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceTranslucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceTranslucency`` 
    
    :param faceTranslucency: 
    :type faceTranslucency: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    HighlightSelectedFace: bool = ...
    """
    Returns or sets  the option whether to highlight selected faces 
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightSelectedFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightSelectedFace`` 
    
    :param highlightSelectedFace: 
    :type highlightSelectedFace: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    HoleTypeEnum: FaceColorManagementBuilderHoleTypeEnumValue = ...
    """
    Returns or sets  the hole type enumeration 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTypeEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FaceColorManagementBuilderHoleTypeEnumValue` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleTypeEnum`` 
    
    :param holeTypeEnum: 
    :type holeTypeEnum: :py:class:`NXOpen.Tooling.FaceColorManagementBuilderHoleTypeEnumValue` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    IsAutoSelectHoleByType: bool = ...
    """
    Returns or sets  the option whether to select holes by type automatically 
    
    <hr>
    
    Getter Method
    
    Signature ``IsAutoSelectHoleByType`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsAutoSelectHoleByType`` 
    
    :param isAutoSelectHoleByType: 
    :type isAutoSelectHoleByType: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    IsShowFaceWithSameColorAttributeToggle: bool = ...
    """
    Returns or sets  the option whether to show face with same color attribute toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``IsShowFaceWithSameColorAttributeToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsShowFaceWithSameColorAttributeToggle`` 
    
    :param isShowFaceWithSameColorAttributeToggle: 
    :type isShowFaceWithSameColorAttributeToggle: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    IsShowFaceWithoutColorAttributeToggle: bool = ...
    """
    Returns or sets  the option whether to show face without color attribute toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``IsShowFaceWithoutColorAttributeToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsShowFaceWithoutColorAttributeToggle`` 
    
    :param isShowFaceWithoutColorAttributeToggle: 
    :type isShowFaceWithoutColorAttributeToggle: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    OnlyCheckHoleFace: bool = ...
    """
    Returns or sets  the only check planar face option 
    
    <hr>
    
    Getter Method
    
    Signature ``OnlyCheckHoleFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OnlyCheckHoleFace`` 
    
    :param onlyCheckHoleFace: 
    :type onlyCheckHoleFace: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectColorSpreadsheet: str = ...
    """
    Returns or sets  the face color spreadsheet 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectColorSpreadsheet`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectColorSpreadsheet`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    SelectCurve: NXOpen.ScCollector = ...
    """
    Returns  the select curve 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectFace: NXOpen.ScCollector = ...
    """
    Returns  the selected faces 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectHoleAxis: NXOpen.Direction = ...
    """
    Returns or sets  the hole axis 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectHoleAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectHoleAxis`` 
    
    :param selectHoleAxis: 
    :type selectHoleAxis: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    SelectSubHoleFaceAutomatically: bool = ...
    """
    Returns or sets  the select sub-hole face automatically option 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectSubHoleFaceAutomatically`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectSubHoleFaceAutomatically`` 
    
    :param selectSubHoleFaceAutomatically: 
    :type selectSubHoleFaceAutomatically: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    Null: FaceColorManagementBuilder = ...  # unknown typename


class LayoutManagementBuilderStationItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LayoutManagementBuilderStationItems():
    """
    Specifies the station items 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "One", "Define station number -- 01"
       "Two", "Define station number -- 02"
       "Three", "Define station number -- 03"
    """
    One = 0  # LayoutManagementBuilderStationItemsMemberType
    Two = 1  # LayoutManagementBuilderStationItemsMemberType
    Three = 2  # LayoutManagementBuilderStationItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LayoutManagementBuilder(NXOpen.Builder):
    """
    Layout Management Builder of Engineering Die Wizard   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.LayoutManagementCollection.CreateLayoutManagementBuilder`
    
    Default values.
    
    ===============================  =====================
    Property                         Value
    ===============================  =====================
    RepositionMotion.DeltaEnum       ReferenceWcsWorkPart 
    -------------------------------  ---------------------
    RepositionMotion.DeltaXc.Value   0.0 
    -------------------------------  ---------------------
    RepositionMotion.DeltaYc.Value   0.0 
    -------------------------------  ---------------------
    RepositionMotion.DeltaZc.Value   0.0 
    -------------------------------  ---------------------
    StationDistance                  0 
    -------------------------------  ---------------------
    StationEnum                      One 
    -------------------------------  ---------------------
    StationNameStr                   station 
    -------------------------------  ---------------------
    StationNumber                    3 
    ===============================  =====================
    
    .. versionadded:: NX8.0.0
    """
    
    class StationItems():
        """
        Specifies the station items 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "One", "Define station number -- 01"
           "Two", "Define station number -- 02"
           "Three", "Define station number -- 03"
        """
        One = 0  # LayoutManagementBuilderStationItemsMemberType
        Two = 1  # LayoutManagementBuilderStationItemsMemberType
        Three = 2  # LayoutManagementBuilderStationItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BodiesReposition: NXOpen.SelectBodyList = ...
    """
    Returns  the select bodies to reposition 
    
    <hr>
    
    Getter Method
    
    Signature ``BodiesReposition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RepositionMotion: NXOpen.GeometricUtilities.ModlMotion = ...
    """
    Returns  the reposition motion 
    
    <hr>
    
    Getter Method
    
    Signature ``RepositionMotion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ModlMotion` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectEntityAdd: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select entity to add into the station 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEntityAdd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectEntityRemove: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select entity to remove from the station 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEntityRemove`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SpecifyDieTip: NXOpen.Direction = ...
    """
    Returns or sets  the specify die tip to define the forming direction
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyDieTip`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyDieTip`` 
    
    :param specifyDieTip: 
    :type specifyDieTip: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StationDistance: float = ...
    """
    Returns or sets  the station distance of engineering die
    
    <hr>
    
    Getter Method
    
    Signature ``StationDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StationDistance`` 
    
    :param stationDistance: 
    :type stationDistance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StationEnum: LayoutManagementBuilderStationItems = ...
    """
    Returns or sets  the station number definition of engineering die 
    
    <hr>
    
    Getter Method
    
    Signature ``StationEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LayoutManagementBuilderStationItems` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StationEnum`` 
    
    :param stationEnum: 
    :type stationEnum: :py:class:`NXOpen.Tooling.LayoutManagementBuilderStationItems` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StationNameStr: str = ...
    """
    Returns or sets  the station name definition of engineering die 
    
    <hr>
    
    Getter Method
    
    Signature ``StationNameStr`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StationNameStr`` 
    
    :param stationNameStr: 
    :type stationNameStr: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StationNumber: int = ...
    """
    Returns or sets  the total station number of engineering die layout
    
    <hr>
    
    Getter Method
    
    Signature ``StationNumber`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StationNumber`` 
    
    :param stationNumber: 
    :type stationNumber: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: LayoutManagementBuilder = ...  # unknown typename


class AutoDieCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Die Design Draw Punch  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDieDesDrawPunchBuilder(self, featureSet: NXOpen.Features.Feature) -> DieDesDrawPunchBuilder:
        """
        Creates a Die Design Draw Punch builder.  
        
        Signature ``CreateDieDesDrawPunchBuilder(featureSet)`` 
        
        :param featureSet: 
        :type featureSet: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieDesDrawPunchBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDieDesDrawDieBuilder(self, featureSet: NXOpen.Features.Feature) -> DieDesDrawDieBuilder:
        """
        Creates a Die Design Draw Die builder.  
        
        Signature ``CreateDieDesDrawDieBuilder(featureSet)`` 
        
        :param featureSet: 
        :type featureSet: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieDesDrawDieBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDieEngFormTaskBuilder(self, dieEngFormTask: NXOpen.Features.Feature) -> DieEngFormTaskBuilder:
        """
        Creates the form task feature builder.  
        
        Signature ``CreateDieEngFormTaskBuilder(dieEngFormTask)`` 
        
        :param dieEngFormTask:  Form Task to be edited.  
        :type dieEngFormTask: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieEngFormTaskBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateDieDesPierceInsertBuilder(self) -> DieDesPierceInsertBuilder:
        """
        Creates a Die Design Pierce Insert builder  
        
        Signature ``CreateDieDesPierceInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieDesPierceInsertBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDieEngTrimAngleCheckBuilder(self, dieEngTrimAngleCheck: NXOpen.GeometricAnalysis.AnalysisObject) -> DieEngTrimAngleCheckBuilder:
        """
        Creates a Die Engineering Trim Angle Check builder  
        
        Signature ``CreateDieEngTrimAngleCheckBuilder(dieEngTrimAngleCheck)`` 
        
        :param dieEngTrimAngleCheck: 
        :type dieEngTrimAngleCheck: :py:class:`NXOpen.GeometricAnalysis.AnalysisObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieEngTrimAngleCheckBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateLsdynaGeometryPreparationBuilder(self) -> LsdynaGeometryPreparationBuilder:
        """
        Creates a formability analysis geometry preparation builder  
        
        Signature ``CreateLsdynaGeometryPreparationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateLsdynaKfileGeneratorBuilder(self) -> LsdynaKfileGeneratorBuilder:
        """
        Creates a LS-Dyna integration builder.  
        
        Signature ``CreateLsdynaKfileGeneratorBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.LsdynaKfileGeneratorBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateLsdynaFormAnalysisResultDisplayBuilder(self) -> LsdynaFormAnalysisResultDisplayBuilder:
        """
        Creates a LS-Dyna Formability Analysis - Result Display builder  
        
        Signature ``CreateLsdynaFormAnalysisResultDisplayBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.LsdynaFormAnalysisResultDisplayBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateDieDesignLowerBinderBuilder(self, frec: NXOpen.Features.Feature) -> DieDesignLowerBinderBuilder:
        """
        Creates a Die Design Lower Binder Builder  
        
        Signature ``CreateDieDesignLowerBinderBuilder(frec)`` 
        
        :param frec: 
        :type frec: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieDesignLowerBinderBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDieDesignTrimPostBuilder(self, frec: NXOpen.Features.Feature) -> DieDesignTrimPostBuilder:
        """
        Creates a Die Design Trim Post Builder  
        
        Signature ``CreateDieDesignTrimPostBuilder(frec)`` 
        
        :param frec: 
        :type frec: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieDesignTrimPostBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDieEngStampingCarryoverBuilder(self, dieEngStampingCarryover: NXOpen.Features.BodyFeature) -> DieEngStampingCarryoverBuilder:
        """
        Creates the stamping carryover feature builder.  
        
        Signature ``CreateDieEngStampingCarryoverBuilder(dieEngStampingCarryover)`` 
        
        :param dieEngStampingCarryover:  Stamping Carryover feature to be edited.  
        :type dieEngStampingCarryover: :py:class:`NXOpen.Features.BodyFeature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieEngStampingCarryoverBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateDieEngStampingOutputBuilder(self, frec: NXOpen.Features.BodyFeature) -> DieEngStampingOutputBuilder:
        """
        Creates a Stamping Output builder.  
        
        Signature ``CreateDieEngStampingOutputBuilder(frec)`` 
        
        :param frec:  Stamping output feature to be edited.  
        :type frec: :py:class:`NXOpen.Features.BodyFeature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieEngStampingOutputBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateDieEngTrimTaskBuilder(self, frec: NXOpen.Features.BodyFeature) -> DieEngTrimTaskBuilder:
        """
        Creates a Die Engineer Trim Task Builder  
        
        Signature ``CreateDieEngTrimTaskBuilder(frec)`` 
        
        :param frec:  Trim task feature to be edited.  
        :type frec: :py:class:`NXOpen.Features.BodyFeature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieEngTrimTaskBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateDieEngProcessUpdateManagerBuilder(self, frec: NXOpen.Features.BodyFeature) -> DieEngProcessUpdateManagerBuilder:
        """
        Creates a Die Engineer Process Update Manager builder.  
        
        Signature ``CreateDieEngProcessUpdateManagerBuilder(frec)`` 
        
        :param frec:  Process update manager feature to be edited.  
        :type frec: :py:class:`NXOpen.Features.BodyFeature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieEngProcessUpdateManagerBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    
    def CreateSetPressModelBuilder(self) -> SetPressModelBuilder:
        """
        Creates a Set Press Model builder.  
        
        Signature ``CreateSetPressModelBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SetPressModelBuilder` 
        
        .. versionadded:: NX10.0.2
        
        License requirements: nx_dievalidation ("DIE VALIDATION")
        """
        ...
    
    
    def CreateSpindleSliderBuilder(self) -> SpindleSliderBuilder:
        """
        Creates a Spindle Slider builder.  
        
        Signature ``CreateSpindleSliderBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SpindleSliderBuilder` 
        
        .. versionadded:: NX10.0.2
        
        License requirements: nx_dievalidation ("DIE VALIDATION")
        """
        ...
    
    
    def CreateDieEngDieTipBuilder(self, frec: NXOpen.Features.Feature) -> DieEngDieTipBuilder:
        """
        Creates a Die Engineer Die Tip Builder  
        
        Signature ``CreateDieEngDieTipBuilder(frec)`` 
        
        :param frec:  Die tip feature to be edited.  
        :type frec: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieEngDieTipBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateDieEngLineUpBuilder(self, frec: NXOpen.Features.BodyFeature) -> DieEngLineupBuilder:
        """
        Creates a Die Engineer Line Up Builder  
        
        Signature ``CreateDieEngLineUpBuilder(frec)`` 
        
        :param frec:  Line up feature to be edited.  
        :type frec: :py:class:`NXOpen.Features.BodyFeature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieEngLineupBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateDieEngDefineProductOrientationBuilder(self, featureSet: NXOpen.Features.Feature) -> DieEngDefineProductOrientationBuilder:
        """
        Creates a Die Engineer Define Product Orientation builder.  
        
        Signature ``CreateDieEngDefineProductOrientationBuilder(featureSet)`` 
        
        :param featureSet: 
        :type featureSet: :py:class:`NXOpen.Features.Feature` 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieEngDefineProductOrientationBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    


class InitProjCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of InitProj   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateInitProjBuilder(self) -> InitProjBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.InitProjBuilder`  
        
        Signature ``CreateInitProjBuilder()`` 
        
        :returns: :py:class:`NXOpen.Tooling.InitProjBuilder` object  
        :rtype: :py:class:`NXOpen.Tooling.InitProjBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class ChannelAdjustCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a ChannelAdjust Collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateChannelAdjustBuilder(self) -> ChannelAdjustBuilder:
        """
        Creates a Tooling.  
        
        ChannelAdjustBuilder  
        
        Signature ``CreateChannelAdjustBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ChannelAdjustBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class DieEngTrimAngleCheckBuilderDirectionOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngTrimAngleCheckBuilderDirectionOptions():
    """
    Options to determine the method to specify direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ByVector", " - "
       "ByAngles", " - "
    """
    ByVector = 0  # DieEngTrimAngleCheckBuilderDirectionOptionsMemberType
    ByAngles = 1  # DieEngTrimAngleCheckBuilderDirectionOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngTrimAngleCheckBuilder(NXOpen.Builder):
    """
    Represents a Trim Angle Check builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieEngTrimAngleCheckBuilder`
    
    Default values.
    
    ========================  =========================================
    Property                  Value
    ========================  =========================================
    CheckPointSpacing.Value   25.4 (millimeters part), 1 (inches part) 
    ------------------------  -----------------------------------------
    DirectionOption           ByVector 
    ------------------------  -----------------------------------------
    ElevationAngle.Value      90 
    ------------------------  -----------------------------------------
    LineScale                 1 
    ------------------------  -----------------------------------------
    MaxAngle.Value            20 
    ------------------------  -----------------------------------------
    MinAngle.Value            -15 
    ------------------------  -----------------------------------------
    PlaneAngle.Value          0 
    ========================  =========================================
    
    .. versionadded:: NX8.5.0
    """
    
    class DirectionOptions():
        """
        Options to determine the method to specify direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ByVector", " - "
           "ByAngles", " - "
        """
        ByVector = 0  # DieEngTrimAngleCheckBuilderDirectionOptionsMemberType
        ByAngles = 1  # DieEngTrimAngleCheckBuilderDirectionOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetJoinedSelectedCurves(self) -> 'list[NXOpen.Curve]':
        """
        Get the joined trimming curves.  
        
        If join is not needed, they are the copies of trimming curves. 
        
        Signature ``GetJoinedSelectedCurves()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetJoinedSelectedCurves(self, joinedSelectedCurves: 'list[NXOpen.Curve]') -> None:
        """
        Set the joined trimming curves.  
        
        If join is not needed, they are the copies of trimming curves. 
        
        Signature ``SetJoinedSelectedCurves(joinedSelectedCurves)`` 
        
        :param joinedSelectedCurves: 
        :type joinedSelectedCurves: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def GetTrimSideTags(self) -> 'list[NXOpen.Direction]':
        """
        Get the vector tags of joined trimming curve trim sides.  
        
        Signature ``GetTrimSideTags()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Direction` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTrimSideTags(self, trimSideTags: 'list[NXOpen.Direction]') -> None:
        """
        Set the vector tags of joined trimming curve trim sides.  
        
        Signature ``SetTrimSideTags(trimSideTags)`` 
        
        :param trimSideTags: 
        :type trimSideTags: list of :py:class:`NXOpen.Direction` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def JoinCurvesAndEdges(self, inputCrvs: 'list[NXOpen.ICurve]', distTol: float) -> 'list[NXOpen.ICurve]':
        """
        Join the input curves and edges.  
        
        Original curves and edges won't be modified. 
        
        Signature ``JoinCurvesAndEdges(inputCrvs, distTol)`` 
        
        :param inputCrvs:  Curves/Edges to be joined.  
        :type inputCrvs: list of :py:class:`NXOpen.ICurve` 
        :param distTol:  Distance tolerance.  
        :type distTol: float 
        :returns:  Joined curves/edges or copies of the input curves/edges if join is not needed.  
        :rtype: list of :py:class:`NXOpen.ICurve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AutoFit: bool = ...
    """
    Returns or sets  the option to indicate whether to fit or not when selecting trimming curve(s) on the trimming curve list 
    
    <hr>
    
    Getter Method
    
    Signature ``AutoFit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoFit`` 
    
    :param autoFit: 
    :type autoFit: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CheckPointSpacing: NXOpen.Expression = ...
    """
    Returns  the maximum distance between two check points 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckPointSpacing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    DirectionOption: DieEngTrimAngleCheckBuilderDirectionOptions = ...
    """
    Returns or sets  the option to set the method of defining trimming direction 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieEngTrimAngleCheckBuilderDirectionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionOption`` 
    
    :param directionOption: 
    :type directionOption: :py:class:`NXOpen.Tooling.DieEngTrimAngleCheckBuilderDirectionOptions` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ElevationAngle: NXOpen.Expression = ...
    """
    Returns  the elevation angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ElevationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    HideSafeZone: bool = ...
    """
    Returns or sets  the option to indicate whether to hide the feedback objects whose trim angles are in the safe zone or not 
    
    <hr>
    
    Getter Method
    
    Signature ``HideSafeZone`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HideSafeZone`` 
    
    :param hideSafeZone: 
    :type hideSafeZone: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    LineScale: float = ...
    """
    Returns or sets  the line scale 
    
    <hr>
    
    Getter Method
    
    Signature ``LineScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineScale`` 
    
    :param lineScale: 
    :type lineScale: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MaxAngle: NXOpen.Expression = ...
    """
    Returns  the upper limit of a valid trim angle 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MinAngle: NXOpen.Expression = ...
    """
    Returns  the lower limit of a valid trim angle 
    
    <hr>
    
    Getter Method
    
    Signature ``MinAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PlaneAngle: NXOpen.Expression = ...
    """
    Returns  the plane angle 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TrimmingCurves: NXOpen.ScCollector = ...
    """
    Returns  the trimming curves 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    TrimmingDirection: NXOpen.Direction = ...
    """
    Returns or sets  the trimming direction 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimmingDirection`` 
    
    :param trimmingDirection: 
    :type trimmingDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimmingFaces: NXOpen.ScCollector = ...
    """
    Returns  the trimming faces 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: DieEngTrimAngleCheckBuilder = ...  # unknown typename


class MoldDesignCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Mold Design.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFlowAnalysisBuilder(self) -> FlowAnalysisBuilder:
        """
        Creates flow analysis builder  
        
        Signature ``CreateFlowAnalysisBuilder()`` 
        
        :returns: :py:class:`Tooling.FlowAnalysisBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.FlowAnalysisBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def CreateFlowDisplayBuilder(self, moldex3DResult: NXOpen.DisplayableObject) -> FlowDisplayBuilder:
        """
        Creates flow display builder  
        
        Signature ``CreateFlowDisplayBuilder(moldex3DResult)`` 
        
        :param moldex3DResult:  MFAO  
        :type moldex3DResult: :py:class:`NXOpen.DisplayableObject` 
        :returns: :py:class:`Tooling.FlowDisplayBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.FlowDisplayBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    


class UserDefinedMotionBuilderMotionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UserDefinedMotionBuilderMotionTypes():
    """
    Specifies the motion types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear motion type"
       "Rotary", "Rotary motion type"
    """
    Linear = 0  # UserDefinedMotionBuilderMotionTypesMemberType
    Rotary = 1  # UserDefinedMotionBuilderMotionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UserDefinedMotionBuilderLinearCurveTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UserDefinedMotionBuilderLinearCurveTypes():
    """
    Specifies the motion curve types when motion type is Linear 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear motion curve type"
       "FromFile", "Motion curve data read from file type"
    """
    Linear = 0  # UserDefinedMotionBuilderLinearCurveTypesMemberType
    FromFile = 1  # UserDefinedMotionBuilderLinearCurveTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UserDefinedMotionBuilderRotaryCurveTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UserDefinedMotionBuilderRotaryCurveTypes():
    """
    Specifies the motion curve types when motion type is Rotary 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rotary", "Rotary motion curve type"
       "FromFile", "Motion curve data read from file type"
    """
    Rotary = 0  # UserDefinedMotionBuilderRotaryCurveTypesMemberType
    FromFile = 1  # UserDefinedMotionBuilderRotaryCurveTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UserDefinedMotionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.UserDefinedMotionBuilder` to create user defined motion, which
    contains linear and rotary motion   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateUserDefinedMotionBuilder`
    
    Default values.
    
    =================  =======
    Property           Value
    =================  =======
    LinearCurveType    Linear 
    -----------------  -------
    MotionType         Linear 
    -----------------  -------
    MoveDistance       0 
    -----------------  -------
    PressStartAngle    0 
    -----------------  -------
    PressStopAngle     90 
    -----------------  -------
    ReturnStartAngle   180 
    -----------------  -------
    ReturnStopAngle    270 
    -----------------  -------
    RotaryCurveType    Rotary 
    -----------------  -------
    RotationAngle      0 
    -----------------  -------
    UseControlData     0 
    =================  =======
    
    .. versionadded:: NX11.0.0
    """
    
    class MotionTypes():
        """
        Specifies the motion types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear motion type"
           "Rotary", "Rotary motion type"
        """
        Linear = 0  # UserDefinedMotionBuilderMotionTypesMemberType
        Rotary = 1  # UserDefinedMotionBuilderMotionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LinearCurveTypes():
        """
        Specifies the motion curve types when motion type is Linear 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear motion curve type"
           "FromFile", "Motion curve data read from file type"
        """
        Linear = 0  # UserDefinedMotionBuilderLinearCurveTypesMemberType
        FromFile = 1  # UserDefinedMotionBuilderLinearCurveTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RotaryCurveTypes():
        """
        Specifies the motion curve types when motion type is Rotary 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rotary", "Rotary motion curve type"
           "FromFile", "Motion curve data read from file type"
        """
        Rotary = 0  # UserDefinedMotionBuilderRotaryCurveTypesMemberType
        FromFile = 1  # UserDefinedMotionBuilderRotaryCurveTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DeleteUserDefinedMotion(self, motionName: str) -> None:
        """
        Delete a user defined motion 
        
        Signature ``DeleteUserDefinedMotion(motionName)`` 
        
        :param motionName: 
        :type motionName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    ExportMotion: str = ...
    """
    Returns or sets  the export motion 
    
    <hr>
    
    Getter Method
    
    Signature ``ExportMotion`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExportMotion`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ImportMotion: str = ...
    """
    Returns or sets  the import motion 
    
    <hr>
    
    Getter Method
    
    Signature ``ImportMotion`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ImportMotion`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LinearCurveType: UserDefinedMotionBuilderLinearCurveTypes = ...
    """
    Returns or sets  the linear curve type 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearCurveType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.UserDefinedMotionBuilderLinearCurveTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearCurveType`` 
    
    :param linearCurveType: 
    :type linearCurveType: :py:class:`NXOpen.Tooling.UserDefinedMotionBuilderLinearCurveTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LinearMotionVector: NXOpen.Direction = ...
    """
    Returns or sets  the linear motion vector 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearMotionVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearMotionVector`` 
    
    :param linearMotionVector: 
    :type linearMotionVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MotionBody: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the motion body 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    MotionName: str = ...
    """
    Returns or sets  the motion name 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MotionName`` 
    
    :param motionName: 
    :type motionName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MotionType: UserDefinedMotionBuilderMotionTypes = ...
    """
    Returns or sets  the motion type 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.UserDefinedMotionBuilderMotionTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MotionType`` 
    
    :param motionType: 
    :type motionType: :py:class:`NXOpen.Tooling.UserDefinedMotionBuilderMotionTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MoveDistance: float = ...
    """
    Returns or sets  the move distance 
    
    <hr>
    
    Getter Method
    
    Signature ``MoveDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoveDistance`` 
    
    :param moveDistance: 
    :type moveDistance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PressStartAngle: float = ...
    """
    Returns or sets  the press start angle 
    
    <hr>
    
    Getter Method
    
    Signature ``PressStartAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PressStartAngle`` 
    
    :param pressStartAngle: 
    :type pressStartAngle: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PressStopAngle: float = ...
    """
    Returns or sets  the press stop angle 
    
    <hr>
    
    Getter Method
    
    Signature ``PressStopAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PressStopAngle`` 
    
    :param pressStopAngle: 
    :type pressStopAngle: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReturnStartAngle: float = ...
    """
    Returns or sets  the return start angle
    
    <hr>
    
    Getter Method
    
    Signature ``ReturnStartAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReturnStartAngle`` 
    
    :param returnStartAngle: 
    :type returnStartAngle: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReturnStopAngle: float = ...
    """
    Returns or sets  the return stop angle
    
    <hr>
    
    Getter Method
    
    Signature ``ReturnStopAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReturnStopAngle`` 
    
    :param returnStopAngle: 
    :type returnStopAngle: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RotaryCurveType: UserDefinedMotionBuilderRotaryCurveTypes = ...
    """
    Returns or sets  the rotary curve type 
    
    <hr>
    
    Getter Method
    
    Signature ``RotaryCurveType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.UserDefinedMotionBuilderRotaryCurveTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotaryCurveType`` 
    
    :param rotaryCurveType: 
    :type rotaryCurveType: :py:class:`NXOpen.Tooling.UserDefinedMotionBuilderRotaryCurveTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RotaryMotionAxis: NXOpen.Axis = ...
    """
    Returns or sets  the rotary motion axis 
    
    <hr>
    
    Getter Method
    
    Signature ``RotaryMotionAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotaryMotionAxis`` 
    
    :param rotaryMotionAxis: 
    :type rotaryMotionAxis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RotationAngle: float = ...
    """
    Returns or sets  the rotation angle 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationAngle`` 
    
    :param rotationAngle: 
    :type rotationAngle: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UseControlData: bool = ...
    """
    Returns or sets  the use control data 
    
    <hr>
    
    Getter Method
    
    Signature ``UseControlData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseControlData`` 
    
    :param useControlData: 
    :type useControlData: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: UserDefinedMotionBuilder = ...  # unknown typename


class AddReusableFeatureCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of AddReusableFeature   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    class InputData():
        """
        Defines the input data of AddReusableFeatureBuilder .  
        
        Constructor: 
        NXOpen.Tooling.AddReusableFeatureCollection.InputData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        KrxFile: str = ...
        """
        KRX file of reusable feature template 
        <hr>
        
        Field Value
        Type:str
        """
        LibName: str = ...
        """
        Library name of reusable feature template 
        <hr>
        
        Field Value
        Type:str
        """
        LibPath: str = ...
        """
        Library path of reusable feature template 
        <hr>
        
        Field Value
        Type:str
        """
        Entity: NXOpen.NXObject = ...
        """
        Placement entity in create mode 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        Position: NXOpen.Point3d = ...
        """
        Cursor position in create mode 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Point3d`
        """
        Feature: NXOpen.Features.Feature = ...
        """
        Reusable feature in edit mode 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Features.Feature`
        """
    
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self, inputData: AddReusableFeatureCollectionInputData_Struct) -> AddReusableFeatureBuilder:
        """
        Creates a AddReusableFeature builder  
        
        Signature ``CreateBuilder(inputData)`` 
        
        :param inputData:  Input data  
        :type inputData: :py:class:`NXOpen.Tooling.AddReusableFeatureCollectionInputData_Struct` 
        :returns:  Add Reusable Feature Builder  
        :rtype: :py:class:`NXOpen.Tooling.AddReusableFeatureBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderTypes():
    """
    Specifies the parent part type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", " - "
       "Edit", " - "
       "Delete", " - "
    """
    Create = 0  # SpecialPiercingInsertBuilderTypesMemberType
    Edit = 1  # SpecialPiercingInsertBuilderTypesMemberType
    Delete = 2  # SpecialPiercingInsertBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderParentPartTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderParentPartTypes():
    """
    Specifies the parent part type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ProjectDie", " - "
       "ProjectDieBase", " - "
       "ProjectSubDieBase", " - "
    """
    ProjectDie = 0  # SpecialPiercingInsertBuilderParentPartTypesMemberType
    ProjectDieBase = 1  # SpecialPiercingInsertBuilderParentPartTypesMemberType
    ProjectSubDieBase = 2  # SpecialPiercingInsertBuilderParentPartTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderInsertPositionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderInsertPositionTypes():
    """
    Specifies the position of piercing inserts, for EDW only 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "The position is top side"
       "Bottom", "The position is bottom side"
    """
    Top = 0  # SpecialPiercingInsertBuilderInsertPositionTypesMemberType
    Bottom = 1  # SpecialPiercingInsertBuilderInsertPositionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderPunchOrDieTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderPunchOrDieTypes():
    """
    Specifies the parent part type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Punch", " - "
       "Die", " - "
       "DieCavityAndSlugHole", " - "
    """
    Punch = 0  # SpecialPiercingInsertBuilderPunchOrDieTypesMemberType
    Die = 1  # SpecialPiercingInsertBuilderPunchOrDieTypesMemberType
    DieCavityAndSlugHole = 2  # SpecialPiercingInsertBuilderPunchOrDieTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderStandardOrUserDefinedTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderStandardOrUserDefinedTypes():
    """
    Specifies the parent part type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Standard", " - "
       "UserDefined", " - "
    """
    Standard = 0  # SpecialPiercingInsertBuilderStandardOrUserDefinedTypesMemberType
    UserDefined = 1  # SpecialPiercingInsertBuilderStandardOrUserDefinedTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderBoundBoxTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderBoundBoxType():
    """
    Specifies the bounded box type block or cylinder. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BoundedBlock", " - "
       "BoundedCylinder", " - "
    """
    BoundedBlock = 0  # SpecialPiercingInsertBuilderBoundBoxTypeMemberType
    BoundedCylinder = 1  # SpecialPiercingInsertBuilderBoundBoxTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderNormalCavityTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderNormalCavityType():
    """
    Specifies the type of cavity. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TaperAngle", "the taper angle type"
       "Step", "the step type"
    """
    TaperAngle = 0  # SpecialPiercingInsertBuilderNormalCavityTypeMemberType
    Step = 1  # SpecialPiercingInsertBuilderNormalCavityTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugType():
    """
    Specifies the type of bottom plate slug. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fillet", "Bottom backing plate slug type is fillet"
       "Rectangle", "Bottom backing plate slug type is rectangle"
       "Circle", "Bottom backing plate slug type is circle"
       "Mickey", "Bottom backing plate slug type is mickey"
       "Clearance", "Bottom backing plate slug type is clearance"
       "SlotVer", "Bottom backing plate slug type is slot vertical"
       "SlotHor", "Bottom backing plate slug type is slot horizontal"
       "NotSet", "Bottom backing plate slug type is none"
    """
    Fillet = 0  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
    Rectangle = 1  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
    Circle = 2  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
    Mickey = 3  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
    Clearance = 4  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
    SlotVer = 5  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
    SlotHor = 6  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
    NotSet = 7  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderNormalDieShoeSlugType():
    """
    Specifies the type of die shoe slug. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Fillet", "Die shoe slug type is fillet"
       "Rectangle", "Die shoe slug type is rectangle"
       "Circle", "Die shoe slug type is circle"
       "Mickey", "Die shoe slug type is mickey"
       "Clearance", "Die shoe slug type is clearance"
       "SlotVer", "Die shoe slug type is slot vertical"
       "SlotHor", "Die shoe slug type is slot horizontal"
       "NotSet", "Die shoe slug type is none"
    """
    Fillet = 0  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
    Rectangle = 1  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
    Circle = 2  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
    Mickey = 3  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
    Clearance = 4  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
    SlotVer = 5  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
    SlotHor = 6  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
    NotSet = 7  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilderNormalOffsetSideTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialPiercingInsertBuilderNormalOffsetSideType():
    """
    Specifies the offset side of normal pierce insert design. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PunchSide", "The offset side is punch"
       "DieSide", "The offset side is die"
    """
    PunchSide = 0  # SpecialPiercingInsertBuilderNormalOffsetSideTypeMemberType
    DieSide = 1  # SpecialPiercingInsertBuilderNormalOffsetSideTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialPiercingInsertBuilder(NXOpen.Builder):
    """
    Creates special piercing insert for progressive die.  
    
    No entity is returned. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateSpecialPiercingInsertBuilder`
    
    Default values.
    
    ====================================  =========================================
    Property                              Value
    ====================================  =========================================
    BoundBox                              BoundedBlock 
    ------------------------------------  -----------------------------------------
    EndLimit.Value                        0 (millimeters part), 0 (inches part) 
    ------------------------------------  -----------------------------------------
    InsertPosition                        Bottom 
    ------------------------------------  -----------------------------------------
    NormalBbpslug                         Fillet 
    ------------------------------------  -----------------------------------------
    NormalCavity                          TaperAngle 
    ------------------------------------  -----------------------------------------
    NormalClearance                       0.05 
    ------------------------------------  -----------------------------------------
    NormalDsslug                          Fillet 
    ------------------------------------  -----------------------------------------
    NormalOffsetSide                      DieSide 
    ------------------------------------  -----------------------------------------
    NormalSlugPara1                       3 
    ------------------------------------  -----------------------------------------
    NormalSlugPara2                       -3 
    ------------------------------------  -----------------------------------------
    NormalSlugPara3                       2 
    ------------------------------------  -----------------------------------------
    NormalSlugPara4                       3 
    ------------------------------------  -----------------------------------------
    OffsetLinearDimension.Value           3 (millimeters part), 0.12 (inches part) 
    ------------------------------------  -----------------------------------------
    ParentPart                            ProjectDie 
    ------------------------------------  -----------------------------------------
    PlateClearanceFirst                   0 
    ------------------------------------  -----------------------------------------
    PlateClearanceFourth                  0 
    ------------------------------------  -----------------------------------------
    PlateClearanceSecond                  0 
    ------------------------------------  -----------------------------------------
    PlateClearanceThird                   0 
    ------------------------------------  -----------------------------------------
    PunchOrDie                            Punch 
    ------------------------------------  -----------------------------------------
    RenameComponent                       0 
    ------------------------------------  -----------------------------------------
    SlugHoleHeightLinearDimension.Value   100 (millimeters part), 4 (inches part) 
    ------------------------------------  -----------------------------------------
    StandardOrUserDefined                 Standard 
    ------------------------------------  -----------------------------------------
    StartLimit.Value                      0 (millimeters part), 0 (inches part) 
    ------------------------------------  -----------------------------------------
    UsePlateClearanceFirst                0 
    ------------------------------------  -----------------------------------------
    UsePlateClearanceFourth               0 
    ------------------------------------  -----------------------------------------
    UsePlateClearanceSecond               0 
    ------------------------------------  -----------------------------------------
    UsePlateClearanceThird                0 
    ====================================  =========================================
    
    .. versionadded:: NX11.0.0
    """
    
    class Types():
        """
        Specifies the parent part type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", " - "
           "Edit", " - "
           "Delete", " - "
        """
        Create = 0  # SpecialPiercingInsertBuilderTypesMemberType
        Edit = 1  # SpecialPiercingInsertBuilderTypesMemberType
        Delete = 2  # SpecialPiercingInsertBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParentPartTypes():
        """
        Specifies the parent part type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ProjectDie", " - "
           "ProjectDieBase", " - "
           "ProjectSubDieBase", " - "
        """
        ProjectDie = 0  # SpecialPiercingInsertBuilderParentPartTypesMemberType
        ProjectDieBase = 1  # SpecialPiercingInsertBuilderParentPartTypesMemberType
        ProjectSubDieBase = 2  # SpecialPiercingInsertBuilderParentPartTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InsertPositionTypes():
        """
        Specifies the position of piercing inserts, for EDW only 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "The position is top side"
           "Bottom", "The position is bottom side"
        """
        Top = 0  # SpecialPiercingInsertBuilderInsertPositionTypesMemberType
        Bottom = 1  # SpecialPiercingInsertBuilderInsertPositionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PunchOrDieTypes():
        """
        Specifies the parent part type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Punch", " - "
           "Die", " - "
           "DieCavityAndSlugHole", " - "
        """
        Punch = 0  # SpecialPiercingInsertBuilderPunchOrDieTypesMemberType
        Die = 1  # SpecialPiercingInsertBuilderPunchOrDieTypesMemberType
        DieCavityAndSlugHole = 2  # SpecialPiercingInsertBuilderPunchOrDieTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StandardOrUserDefinedTypes():
        """
        Specifies the parent part type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Standard", " - "
           "UserDefined", " - "
        """
        Standard = 0  # SpecialPiercingInsertBuilderStandardOrUserDefinedTypesMemberType
        UserDefined = 1  # SpecialPiercingInsertBuilderStandardOrUserDefinedTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BoundBoxType():
        """
        Specifies the bounded box type block or cylinder. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BoundedBlock", " - "
           "BoundedCylinder", " - "
        """
        BoundedBlock = 0  # SpecialPiercingInsertBuilderBoundBoxTypeMemberType
        BoundedCylinder = 1  # SpecialPiercingInsertBuilderBoundBoxTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalCavityType():
        """
        Specifies the type of cavity. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TaperAngle", "the taper angle type"
           "Step", "the step type"
        """
        TaperAngle = 0  # SpecialPiercingInsertBuilderNormalCavityTypeMemberType
        Step = 1  # SpecialPiercingInsertBuilderNormalCavityTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalBottomBackingPlateSlugType():
        """
        Specifies the type of bottom plate slug. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fillet", "Bottom backing plate slug type is fillet"
           "Rectangle", "Bottom backing plate slug type is rectangle"
           "Circle", "Bottom backing plate slug type is circle"
           "Mickey", "Bottom backing plate slug type is mickey"
           "Clearance", "Bottom backing plate slug type is clearance"
           "SlotVer", "Bottom backing plate slug type is slot vertical"
           "SlotHor", "Bottom backing plate slug type is slot horizontal"
           "NotSet", "Bottom backing plate slug type is none"
        """
        Fillet = 0  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
        Rectangle = 1  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
        Circle = 2  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
        Mickey = 3  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
        Clearance = 4  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
        SlotVer = 5  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
        SlotHor = 6  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
        NotSet = 7  # SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalDieShoeSlugType():
        """
        Specifies the type of die shoe slug. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Fillet", "Die shoe slug type is fillet"
           "Rectangle", "Die shoe slug type is rectangle"
           "Circle", "Die shoe slug type is circle"
           "Mickey", "Die shoe slug type is mickey"
           "Clearance", "Die shoe slug type is clearance"
           "SlotVer", "Die shoe slug type is slot vertical"
           "SlotHor", "Die shoe slug type is slot horizontal"
           "NotSet", "Die shoe slug type is none"
        """
        Fillet = 0  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
        Rectangle = 1  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
        Circle = 2  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
        Mickey = 3  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
        Clearance = 4  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
        SlotVer = 5  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
        SlotHor = 6  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
        NotSet = 7  # SpecialPiercingInsertBuilderNormalDieShoeSlugTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalOffsetSideType():
        """
        Specifies the offset side of normal pierce insert design. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PunchSide", "The offset side is punch"
           "DieSide", "The offset side is die"
        """
        PunchSide = 0  # SpecialPiercingInsertBuilderNormalOffsetSideTypeMemberType
        DieSide = 1  # SpecialPiercingInsertBuilderNormalOffsetSideTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateDatumPlane(self) -> None:
        """
        The create datum plane 
        
        Signature ``CreateDatumPlane()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetWCSForSpecialPiercingInsert(self, needPrecisionValue: bool) -> None:
        """
        Set work coordinate system for special piercing insert 
        
        Signature ``SetWCSForSpecialPiercingInsert(needPrecisionValue)`` 
        
        :param needPrecisionValue: 
        :type needPrecisionValue: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def WaveFacesOfSelectedCurves(self, rootPart: NXOpen.Part, instanceTag: NXOpen.NXObject) -> None:
        """
        Wave faces of selected curves 
        
        Signature ``WaveFacesOfSelectedCurves(rootPart, instanceTag)`` 
        
        :param rootPart: 
        :type rootPart: :py:class:`NXOpen.Part` 
        :param instanceTag: 
        :type instanceTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def WaveSelectedCurves(self) -> None:
        """
        Wave selected curves 
        
        Signature ``WaveSelectedCurves()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetWaveLinkedCurves(self) -> 'list[NXOpen.Curve]':
        """
        Get wave linked curves 
        
        Signature ``GetWaveLinkedCurves()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateOffsetDatumPlane(self) -> None:
        """
        Create offset datum plane 
        
        Signature ``CreateOffsetDatumPlane()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetProfile(self, sectionTag: NXOpen.Section) -> 'list[NXOpen.Curve]':
        """
        Get profiles 
        
        Signature ``GetProfile(sectionTag)`` 
        
        :param sectionTag: 
        :type sectionTag: :py:class:`NXOpen.Section` 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetCorrectEdgeInNewPart(self, partTag: NXOpen.Part, sourceEdge: NXOpen.Edge) -> NXOpen.Edge:
        """
        Get correct edge in new part  
        
        Signature ``GetCorrectEdgeInNewPart(partTag, sourceEdge)`` 
        
        :param partTag: 
        :type partTag: :py:class:`NXOpen.Part` 
        :param sourceEdge: 
        :type sourceEdge: :py:class:`NXOpen.Edge` 
        :returns: 
        :rtype: :py:class:`NXOpen.Edge` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def WaveFacesAndFillHole(self, rootPart: NXOpen.Part, instanceTag: NXOpen.NXObject) -> None:
        """
        Wave faces and fill hole 
        
        Signature ``WaveFacesAndFillHole(rootPart, instanceTag)`` 
        
        :param rootPart: 
        :type rootPart: :py:class:`NXOpen.Part` 
        :param instanceTag: 
        :type instanceTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetCorrectFacesOfExtractRegionFeature(self) -> 'list[NXOpen.Face]':
        """
        Get correct faces of extrac region feature.  
        
        Signature ``GetCorrectFacesOfExtractRegionFeature()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetBoxMatrixAndPosition(self, matrix: NXOpen.Matrix3x3, position: NXOpen.Point3d) -> None:
        """
        Sets box csys matrix.  
        
        Signature ``SetBoxMatrixAndPosition(matrix, position)`` 
        
        :param matrix: 
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        :param position: 
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CalculateBoxSize(self) -> None:
        """
        Calculate box size and set directions, edge length, lower point position.  
        
        Signature ``CalculateBoxSize()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AddInsertPartIntoAssembly(self, parentPart: NXOpen.NXObject, templatePartName: str, origin: NXOpen.Point3d) -> NXOpen.NXObject:
        """
        Add insert part into assembly.  
        
        Signature ``AddInsertPartIntoAssembly(parentPart, templatePartName, origin)`` 
        
        :param parentPart: 
        :type parentPart: :py:class:`NXOpen.NXObject` 
        :param templatePartName: 
        :type templatePartName: str 
        :param origin: 
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetHoleBoundaryFaceAndCreatePatchOpenings(self, edges: 'list[NXOpen.NXObject]') -> NXOpen.NXObject:
        """
        Get hole boundary face and create patch openings.  
        
        Signature ``GetHoleBoundaryFaceAndCreatePatchOpenings(edges)`` 
        
        :param edges: 
        :type edges: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateKFBoundBox(self, wcsMatrix: NXOpen.Matrix3x3, clearance: 'list[float]', faces: 'list[NXOpen.NXObject]') -> NXOpen.NXObject:
        """
        Create bound box.  
        
        Signature ``CreateKFBoundBox(wcsMatrix, clearance, faces)`` 
        
        :param wcsMatrix: 
        :type wcsMatrix: :py:class:`NXOpen.Matrix3x3` 
        :param clearance: 
        :type clearance: list of float 
        :param faces: 
        :type faces: list of :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateIntersect(self, targetBody: NXOpen.NXObject, bodyOfKFBoundBox: NXOpen.NXObject) -> None:
        """
        Create intersect.  
        
        Signature ``CreateIntersect(targetBody, bodyOfKFBoundBox)`` 
        
        :param targetBody: 
        :type targetBody: :py:class:`NXOpen.NXObject` 
        :param bodyOfKFBoundBox: 
        :type bodyOfKFBoundBox: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def WaveIntersectBodyToNewDieInsertPart(self, bodies: 'list[NXOpen.NXObject]') -> None:
        """
        Wave intersect body to new die insert part.  
        
        Signature ``WaveIntersectBodyToNewDieInsertPart(bodies)`` 
        
        :param bodies: 
        :type bodies: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteSelectedInsertAndWaveLinkedSource(self) -> None:
        """
        Delete selected insert and wave linked source feature.  
        
        Signature ``DeleteSelectedInsertAndWaveLinkedSource()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SuppressAllFeatureAfter(self, featureTag: NXOpen.NXObject, suppressChildren: bool) -> None:
        """
        Suppress child feature.  
        
        Signature ``SuppressAllFeatureAfter(featureTag, suppressChildren)`` 
        
        :param featureTag: 
        :type featureTag: :py:class:`NXOpen.NXObject` 
        :param suppressChildren: 
        :type suppressChildren: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    BoundBox: SpecialPiercingInsertBuilderBoundBoxType = ...
    """
    Returns or sets  the block or cylinder 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundBox`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderBoundBoxType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundBox`` 
    
    :param boundBoxType: 
    :type boundBoxType: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderBoundBoxType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BoxPosition: NXOpen.Point3d = ...
    """
    Returns or sets  the position of csys for box.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoxPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoxPosition`` 
    
    :param csysOrigin: 
    :type csysOrigin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EndLimit: NXOpen.Expression = ...
    """
    Returns  the end limit 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    InsertPosition: SpecialPiercingInsertBuilderInsertPositionTypes = ...
    """
    Returns or sets  the reverse direction 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderInsertPositionTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsertPosition`` 
    
    :param insertPosition: 
    :type insertPosition: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderInsertPositionTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Is3DCurves: bool = ...
    """
    Returns or sets  the result whether the curves is three dimensional 
    
    <hr>
    
    Getter Method
    
    Signature ``Is3DCurves`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Is3DCurves`` 
    
    :param is3DCurves: 
    :type is3DCurves: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalBbpslug: SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugType = ...
    """
    Returns or sets  the bottom plate slug type for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalBbpslug`` 
    
    :returns:  Indicates bottom plate slug type for normal pierce design  
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalBbpslug`` 
    
    :param normalBbpslug:  Indicates bottom plate slug type for normal pierce design  
    :type normalBbpslug: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderNormalBottomBackingPlateSlugType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalCavity: SpecialPiercingInsertBuilderNormalCavityType = ...
    """
    Returns or sets  the cavity type for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalCavity`` 
    
    :returns:  Indicates the cavity type for normal pierce design  
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderNormalCavityType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalCavity`` 
    
    :param normalCavity:  Indicates the cavity type for normal pierce design  
    :type normalCavity: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderNormalCavityType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalClearance: float = ...
    """
    Returns or sets  the clearance value for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalClearance`` 
    
    :returns:  Indicates the clearance value for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalClearance`` 
    
    :param normalClearance:  Indicates the clearance value for normal pierce design  
    :type normalClearance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalDsslug: SpecialPiercingInsertBuilderNormalDieShoeSlugType = ...
    """
    Returns or sets  the die shoe slug type for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalDsslug`` 
    
    :returns:  Indicates die shoe slug type for normal pierce design  
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderNormalDieShoeSlugType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalDsslug`` 
    
    :param normalDsslug:  Indicates die shoe slug type for normal pierce design  
    :type normalDsslug: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderNormalDieShoeSlugType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalOffsetSide: SpecialPiercingInsertBuilderNormalOffsetSideType = ...
    """
    Returns or sets  the offset side option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalOffsetSide`` 
    
    :returns:  Indicates the offset side option for normal pierce design  
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderNormalOffsetSideType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalOffsetSide`` 
    
    :param normalOffsetSide:  Indicates the offset side option for normal pierce design  
    :type normalOffsetSide: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderNormalOffsetSideType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalSlugPara1: float = ...
    """
    Returns or sets  the H value of slug hole for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugPara1`` 
    
    :returns:  Indicates the H value of slug hole for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugPara1`` 
    
    :param normalSlugPara1:  Indicates the H value of slug hole for normal pierce design  
    :type normalSlugPara1: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalSlugPara2: float = ...
    """
    Returns or sets  the A value of slug hole for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugPara2`` 
    
    :returns:  Indicates A value of slug hole for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugPara2`` 
    
    :param normalSlugPara2:  Indicates A value of slug hole for normal pierce design  
    :type normalSlugPara2: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalSlugPara3: float = ...
    """
    Returns or sets  the C1 value of slug hole for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugPara3`` 
    
    :returns:  Indicates C1 value of slug hole for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugPara3`` 
    
    :param normalSlugPara3:  Indicates C1 value of slug hole for normal pierce design  
    :type normalSlugPara3: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalSlugPara4: float = ...
    """
    Returns or sets  the C2 value of slug hole for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSlugPara4`` 
    
    :returns:  Indicates the C2 value of slug hole for normal pierce design  
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalSlugPara4`` 
    
    :param normalSlugPara4:  Indicates the C2 value of slug hole for normal pierce design  
    :type normalSlugPara4: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetLinearDimension: NXOpen.Expression = ...
    """
    Returns  the offset linear dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetLinearDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeX: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative x 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeY: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative y 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeZ: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative z 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveX: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive x 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveY: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive y 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveZ: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive z 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ParentPart: SpecialPiercingInsertBuilderParentPartTypes = ...
    """
    Returns or sets  the parent part 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderParentPartTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPart`` 
    
    :param parentPart: 
    :type parentPart: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderParentPartTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name to create insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns:  Retruns parent part name  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPart:  Specifies the parent part name  
    :type parentPart: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PlateClearanceFirst: float = ...
    """
    Returns or sets  the plate clearance first 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceFirst`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceFirst`` 
    
    :param plateClearanceFirst: 
    :type plateClearanceFirst: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceFourth: float = ...
    """
    Returns or sets  the plate clearance fourth 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceFourth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceFourth`` 
    
    :param plateClearanceFourth: 
    :type plateClearanceFourth: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceSecond: float = ...
    """
    Returns or sets  the plate clearance second 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceSecond`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceSecond`` 
    
    :param plateClearanceSecond: 
    :type plateClearanceSecond: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceThird: float = ...
    """
    Returns or sets  the plate clearance third 
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceThird`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceThird`` 
    
    :param plateClearanceThird: 
    :type plateClearanceThird: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchOrDie: SpecialPiercingInsertBuilderPunchOrDieTypes = ...
    """
    Returns or sets  the punch or die 
    
    <hr>
    
    Getter Method
    
    Signature ``PunchOrDie`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderPunchOrDieTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchOrDie`` 
    
    :param punchOrDie: 
    :type punchOrDie: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderPunchOrDieTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RadialOffset: NXOpen.Expression = ...
    """
    Returns  the radial offset value for cylinder box
    
    <hr>
    
    Getter Method
    
    Signature ``RadialOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    RenameComponent: bool = ...
    """
    Returns or sets  the rename component 
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponent`` 
    
    :param renameComponent: 
    :type renameComponent: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectCurves: NXOpen.Section = ...
    """
    Returns  the select curves 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectEdges: NXOpen.SelectEdgeList = ...
    """
    Returns  the select curve 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectFace: NXOpen.SelectFaceList = ...
    """
    Returns  the select face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectInsert: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select insert 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectInsert`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectVector: NXOpen.Direction = ...
    """
    Returns or sets  the select vector 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectVector`` 
    
    :param selectVector: 
    :type selectVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SlugHoleHeightLinearDimension: NXOpen.Expression = ...
    """
    Returns  the slug hole height linear dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugHoleHeightLinearDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StandardOrUserDefined: SpecialPiercingInsertBuilderStandardOrUserDefinedTypes = ...
    """
    Returns or sets  the standard or user defined 
    
    <hr>
    
    Getter Method
    
    Signature ``StandardOrUserDefined`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderStandardOrUserDefinedTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardOrUserDefined`` 
    
    :param standardOrUserDefined: 
    :type standardOrUserDefined: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderStandardOrUserDefinedTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StartLimit: NXOpen.Expression = ...
    """
    Returns  the start limit 
    
    <hr>
    
    Getter Method
    
    Signature ``StartLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Type: SpecialPiercingInsertBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.SpecialPiercingInsertBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceFirst: bool = ...
    """
    Returns or sets  the use plate clearance first 
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceFirst`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceFirst`` 
    
    :param usePlateClearanceFirst: 
    :type usePlateClearanceFirst: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceFourth: bool = ...
    """
    Returns or sets  the use plate clearance fourth 
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceFourth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceFourth`` 
    
    :param usePlateClearanceFourth: 
    :type usePlateClearanceFourth: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceSecond: bool = ...
    """
    Returns or sets  the use plate clearance second 
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceSecond`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceSecond`` 
    
    :param usePlateClearanceSecond: 
    :type usePlateClearanceSecond: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceThird: bool = ...
    """
    Returns or sets  the use plate clearance third 
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceThird`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceThird`` 
    
    :param usePlateClearanceThird: 
    :type usePlateClearanceThird: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: SpecialPiercingInsertBuilder = ...  # unknown typename


class ReplaceSolidCollection(NXOpen.TaggedObjectCollection):
    """
    Creates ReplaceSolidBuilder collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateReplaceSolidBuilder(self) -> ReplaceSolidBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.ReplaceSolidBuilder`  
        
        Signature ``CreateReplaceSolidBuilder()`` 
        
        :returns: :py:class:`NXOpen.Tooling.ReplaceSolidBuilder` object  
        :rtype: :py:class:`NXOpen.Tooling.ReplaceSolidBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    


class ChangeoverManagementBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ChangeoverManagementBuilderTypes():
    """
    Specifies the types of changeover management. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "the create mode"
       "Manage", "the manage mode"
    """
    Create = 0  # ChangeoverManagementBuilderTypesMemberType
    Manage = 1  # ChangeoverManagementBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ChangeoverManagementBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.ChangeoverManagementBuilder` to support changeover workflow management.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.WorkflowManagementCollection.CreateChangeoverManagementBuilder`
    
    Default values.
    
    =========================  =====
    Property                   Value
    =========================  =====
    AddComponentsExclusively   0 
    -------------------------  -----
    RenameComponent            0 
    =========================  =====
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        Specifies the types of changeover management. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "the create mode"
           "Manage", "the manage mode"
        """
        Create = 0  # ChangeoverManagementBuilderTypesMemberType
        Manage = 1  # ChangeoverManagementBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UseArrangement(self) -> None:
        """
        Set the selected changeover as current used one.  
        
        Signature ``UseArrangement()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RenameArrangement(self) -> None:
        """
        Rename the selected changeover.  
        
        Signature ``RenameArrangement()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteArrangement(self, removeComponents: bool) -> None:
        """
        Delete the selected changeover.  
        
        Signature ``DeleteArrangement(removeComponents)`` 
        
        :param removeComponents: 
        :type removeComponents: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddToChangeover(self) -> None:
        """
        Add selected components to the selected changeover.  
        
        Signature ``AddToChangeover()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveFromChangeover(self) -> None:
        """
        Remove selected components from the selected changeover.  
        
        Signature ``RemoveFromChangeover()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    AddComponentsExclusively: bool = ...
    """
    Returns or sets  the exclusive adding 
    
    <hr>
    
    Getter Method
    
    Signature ``AddComponentsExclusively`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AddComponentsExclusively`` 
    
    :param addComponentsExclusively: 
    :type addComponentsExclusively: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ChangeoverName: str = ...
    """
    Returns or sets  the name of the to-be-created changeover.  
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeoverName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChangeoverName`` 
    
    :param changeoverName: 
    :type changeoverName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ClonedProductName: str = ...
    """
    Returns or sets  the name of the cloned product pack used to create a new changeover.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClonedProductName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClonedProductName`` 
    
    :param clonedProductName: 
    :type clonedProductName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    NewChangeoverName: str = ...
    """
    Returns or sets  the new name of the selected changeover.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewChangeoverName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewChangeoverName`` 
    
    :param newChangeoverName: 
    :type newChangeoverName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RenameComponent: bool = ...
    """
    Returns or sets  the option to rename the components of the to-be-created changeover.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponent`` 
    
    :param renameComponent: 
    :type renameComponent: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectComponents: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the selection of components to be added to or removed from a changeover.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectProduct: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the selection of product for which to create changeover.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectProduct`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectedArrangementName: str = ...
    """
    Returns or sets  the name of the selected changeover arrangement.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedArrangementName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedArrangementName`` 
    
    :param arrangementName: 
    :type arrangementName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Type: ChangeoverManagementBuilderTypes = ...
    """
    Returns or sets  the type of changeover management.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ChangeoverManagementBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.ChangeoverManagementBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: ChangeoverManagementBuilder = ...  # unknown typename


class MWDesignGuideLinesCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of MWDesignGuideLines builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> MWDesignGuideLinesBuilder:
        """
        Creates a MWDesignGuideLines builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`MWDesignGuideLinesBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.MWDesignGuideLinesBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class EWMultiPositionCollection(NXOpen.TaggedObjectCollection):
    """
    Creates EWMultiPosition builder collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateEwmultiPositionBuilder(self) -> EWMultiPositionBuilder:
        """
        Creates EW multi-position builder  
        
        Signature ``CreateEwmultiPositionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.EWMultiPositionBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class FaceSplitCollection(NXOpen.TaggedObjectCollection):
    """
    Creates Face Split collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFaceSplitBuilder(self) -> FaceSplitBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.FaceSplitBuilder`  
        
        Signature ``CreateFaceSplitBuilder()`` 
        
        :returns: :py:class:`NXOpen.Tooling.FaceSplitBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.FaceSplitBuilder` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: None.
        """
        ...
    


class PrebendBuilderNumberBendsOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PrebendBuilderNumberBendsOption():
    """
    The option of bend number to divide into 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Two", "two prebends"
       "Three", "three prebends"
       "Four", "four prebends"
       "Five", "five prebends"
       "Six", "six prebends"
    """
    Two = 0  # PrebendBuilderNumberBendsOptionMemberType
    Three = 1  # PrebendBuilderNumberBendsOptionMemberType
    Four = 2  # PrebendBuilderNumberBendsOptionMemberType
    Five = 3  # PrebendBuilderNumberBendsOptionMemberType
    Six = 4  # PrebendBuilderNumberBendsOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PrebendBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a :py:class:`NXOpen.Tooling.PrebendBuilder` builder to divide bend faces.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Features.ToolingCollection.CreatePrebendBuilder`
    
    Default values.
    
    ============  =====
    Property      Value
    ============  =====
    Angle01       30 
    ------------  -----
    Angle02       30 
    ------------  -----
    Angle03       30 
    ------------  -----
    Angle04       30 
    ------------  -----
    Angle05       30 
    ------------  -----
    NumberBends   Two 
    ============  =====
    
    .. versionadded:: NX10.0.0
    """
    
    class NumberBendsOption():
        """
        The option of bend number to divide into 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Two", "two prebends"
           "Three", "three prebends"
           "Four", "four prebends"
           "Five", "five prebends"
           "Six", "six prebends"
        """
        Two = 0  # PrebendBuilderNumberBendsOptionMemberType
        Three = 1  # PrebendBuilderNumberBendsOptionMemberType
        Four = 2  # PrebendBuilderNumberBendsOptionMemberType
        Five = 3  # PrebendBuilderNumberBendsOptionMemberType
        Six = 4  # PrebendBuilderNumberBendsOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Angle01: float = ...
    """
    Returns or sets  the first prebend angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle01`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle01`` 
    
    :param angle01: 
    :type angle01: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Angle02: float = ...
    """
    Returns or sets  the second prebend angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle02`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle02`` 
    
    :param angle02: 
    :type angle02: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Angle03: float = ...
    """
    Returns or sets  the third prebend angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle03`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle03`` 
    
    :param angle03: 
    :type angle03: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Angle04: float = ...
    """
    Returns or sets  the fourth prebend angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle04`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle04`` 
    
    :param angle04: 
    :type angle04: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Angle05: float = ...
    """
    Returns or sets  the fifth prebend angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle05`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle05`` 
    
    :param angle05: 
    :type angle05: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BendFace: NXOpen.ScCollector = ...
    """
    Returns  the bend face to divide 
    
    <hr>
    
    Getter Method
    
    Signature ``BendFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    NeutralFactor: str = ...
    """
    Returns or sets  the neutral factor assign into the divided bend faces 
    
    <hr>
    
    Getter Method
    
    Signature ``NeutralFactor`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeutralFactor`` 
    
    :param neutralFactor: 
    :type neutralFactor: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NumberBends: PrebendBuilderNumberBendsOption = ...
    """
    Returns or sets  the number of prebends divide into 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberBends`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PrebendBuilderNumberBendsOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberBends`` 
    
    :param numberBends: 
    :type numberBends: :py:class:`NXOpen.Tooling.PrebendBuilderNumberBendsOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StartEdge: NXOpen.ScCollector = ...
    """
    Returns  the start edge of bend face to specify the angle01 to angle05 start from 
    
    <hr>
    
    Getter Method
    
    Signature ``StartEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: PrebendBuilder = ...  # unknown typename


class CAMDataManager():
    """
    Represents an object that manages cam data objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    """
    
    def CreateBlendCurve3dBuilder(self) -> BlendCurve3DBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.BlendCurve3DBuilder`  
        
        Signature ``CreateBlendCurve3dBuilder()`` 
        
        :returns:  Tooling.  
        
        BlendCurve3DBuilder object  
        :rtype: :py:class:`NXOpen.Tooling.BlendCurve3DBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateOffsetCurve3dBuilder(self) -> OffsetCurve3DBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.OffsetCurve3DBuilder`  
        
        Signature ``CreateOffsetCurve3dBuilder()`` 
        
        :returns:  Tooling.  
        
        OffsetCurve3DBuilder object  
        :rtype: :py:class:`NXOpen.Tooling.OffsetCurve3DBuilder` 
        
        .. versionadded:: NX9.0.0
        
        .. deprecated::  NX10.0.0
            Please use :py:meth:`Features.CurveFeatureCollection.CreateOffset3dCurveBuilder` instead 
        
        License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    


class HoleManufacturingNoteCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.HoleManufacturingNoteBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateHoleManufacturingNoteBuilder(self) -> HoleManufacturingNoteBuilder:
        """
        Creates manufacturing information builder.  
        
        Signature ``CreateHoleManufacturingNoteBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.HoleManufacturingNoteBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    


class ReusableObjectPasteBuilderPasteMethodsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReusableObjectPasteBuilderPasteMethods():
    """
    Specifies the design option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Add", "Add"
       "Subtract", "Subtract"
       "Userdefined", "UserDefined"
       "Solidpunch", "SolidPunch"
    """
    NotSet = 0  # ReusableObjectPasteBuilderPasteMethodsMemberType
    Add = 1  # ReusableObjectPasteBuilderPasteMethodsMemberType
    Subtract = 2  # ReusableObjectPasteBuilderPasteMethodsMemberType
    Userdefined = 3  # ReusableObjectPasteBuilderPasteMethodsMemberType
    Solidpunch = 4  # ReusableObjectPasteBuilderPasteMethodsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReusableObjectPasteBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.ReusableObjectPasteBuilder`   
    
    Use the :py:class:`NXOpen.Tooling.ReusableObjectManager` class to create a ReusableObjectPasteBuilder.
    
    .. versionadded:: NX8.0.0
    """
    
    class PasteMethods():
        """
        Specifies the design option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Add", "Add"
           "Subtract", "Subtract"
           "Userdefined", "UserDefined"
           "Solidpunch", "SolidPunch"
        """
        NotSet = 0  # ReusableObjectPasteBuilderPasteMethodsMemberType
        Add = 1  # ReusableObjectPasteBuilderPasteMethodsMemberType
        Subtract = 2  # ReusableObjectPasteBuilderPasteMethodsMemberType
        Userdefined = 3  # ReusableObjectPasteBuilderPasteMethodsMemberType
        Solidpunch = 4  # ReusableObjectPasteBuilderPasteMethodsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetSpreadsheetData(self) -> SpreadsheetData:
        """
        Gets the spreadsheet data  
        
        Signature ``GetSpreadsheetData()`` 
        
        :returns:  Spreadsheet data  
        :rtype: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSpreadsheetData(self, spreadsheetData: SpreadsheetData) -> None:
        """
        Sets the spreadsheet data 
        
        Signature ``SetSpreadsheetData(spreadsheetData)`` 
        
        :param spreadsheetData:  Spreadsheet data  
        :type spreadsheetData: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateSpreadsheetData(self) -> None:
        """
        Updates the spreadsheet data according to the expressions in part 
        
        Signature ``UpdateSpreadsheetData()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RepositionBody(self, target: NXOpen.Point3d, orient: NXOpen.Matrix3x3, twoPickPositionMode: bool) -> None:
        """
        Moves the body to the selected point and orientation 
        
        Signature ``RepositionBody(target, orient, twoPickPositionMode)`` 
        
        :param target:  Destination point  
        :type target: :py:class:`NXOpen.Point3d` 
        :param orient:  Orientation  
        :type orient: :py:class:`NXOpen.Matrix3x3` 
        :param twoPickPositionMode:  Flag specifying whether to reposition the body based on active sketch plane when using two pick position method to drop the body. If True, reposition the body, else, do nothing.  
        :type twoPickPositionMode: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetLibraryInformation(self, feature: NXOpen.NXObject, libraryName: str, relativePath: str) -> None:
        """
        Sets library information for the feature 
        
        Signature ``SetLibraryInformation(feature, libraryName, relativePath)`` 
        
        :param feature:  Reusable object feature  
        :type feature: :py:class:`NXOpen.NXObject` 
        :param libraryName:  Library name  
        :type libraryName: str 
        :param relativePath:  Relative path where library is located  
        :type relativePath: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def LoadPart(self, partFileName: str, dropEntity: NXOpen.NXObject) -> 'list[NXOpen.NXObject]':
        """
        Imports given part file to current work part 
        
        Signature ``LoadPart(partFileName, dropEntity)`` 
        
        :param partFileName:  Part file name  
        :type partFileName: str 
        :param dropEntity:  Selected body face or datum plane of CSYS  
        :type dropEntity: :py:class:`NXOpen.NXObject` 
        :returns:  Objects, mainly bodies, from the imported part  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetCreatedObjects(self) -> 'list[NXOpen.NXObject]':
        """
        Gets the created objects 
        
        Signature ``GetCreatedObjects()`` 
        
        :returns:  Objects, mainly bodies, from the imported part  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePatternObjects(self, createPattern: bool) -> None:
        """
        Creates the pattern objects 
        
        Signature ``CreatePatternObjects(createPattern)`` 
        
        :param createPattern:  Flag indicating whether to create pattern objects or delete  
        :type createPattern: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateLocation(self) -> None:
        """
        Updates location of reusable object after edit pattern points 
        
        Signature ``UpdateLocation()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    Associative: bool = ...
    """
    Returns or sets  the option specifying whether to associate the csys of reuse object to target entity 
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX8.0.2
    
    License requirements: None.
    """
    DropFace: NXOpen.NXObject = ...
    """
    Returns or sets  the drop face required for reattach sketch when using one-pick position method  
    
    <hr>
    
    Getter Method
    
    Signature ``DropFace`` 
    
    :returns:  Drop face  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DropFace`` 
    
    :param face:  Drop face  
    :type face: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DynamicCsysOrientation: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the orientation of dynamic csys 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCsysOrientation`` 
    
    :returns:  Orientation of dynamic csys  
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicCsysOrientation`` 
    
    :param orientation:  Orientation of dynamic csys  
    :type orientation: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    DynamicCsysOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the origin of dynamic csys 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCsysOrigin`` 
    
    :returns:  Origin of dynamic csys  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicCsysOrigin`` 
    
    :param origin:  Origin of dynamic csys  
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    EditFeatureGroup: NXOpen.NXObject = ...
    """
    Returns or sets  the feature group created after reuse paste 
    
    <hr>
    
    Getter Method
    
    Signature ``EditFeatureGroup`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditFeatureGroup`` 
    
    :param featureGroup: 
    :type featureGroup: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ImportedSketch: NXOpen.NXObject = ...
    """
    Returns or sets  the imported sketch  
    
    <hr>
    
    Getter Method
    
    Signature ``ImportedSketch`` 
    
    :returns:  Imported sketch  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ImportedSketch`` 
    
    :param sketch:  Imported sketch  
    :type sketch: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InitialPasteLocation: NXOpen.Point3d = ...
    """
    Returns or sets  the initial paste location, this is mainly used to define default paste location of sketch objects 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialPasteLocation`` 
    
    :returns:  Drop location coordinates in absolute  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InitialPasteLocation`` 
    
    :param dropLocation:  Drop location coordinates in absolute  
    :type dropLocation: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LibraryName: str = ...
    """
    Returns or sets  the library name.  
    
    This library name is used for the reusable object 
    
    <hr>
    
    Getter Method
    
    Signature ``LibraryName`` 
    
    :returns:  Library name  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LibraryName`` 
    
    :param libraryName:  Library name  
    :type libraryName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PasteMethod: ReusableObjectPasteBuilderPasteMethods = ...
    """
    Returns or sets  the design option to select Boolean operation type 
    
    <hr>
    
    Getter Method
    
    Signature ``PasteMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReusableObjectPasteBuilderPasteMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PasteMethod`` 
    
    :param pasteMethod: 
    :type pasteMethod: :py:class:`NXOpen.Tooling.ReusableObjectPasteBuilderPasteMethods` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PatternFeature: NXOpen.NXObject = ...
    """
    Returns or sets  the geometry pattern feature
    
    <hr>
    
    Getter Method
    
    Signature ``PatternFeature`` 
    
    :returns:  Pattern feature  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PatternFeature`` 
    
    :param pattern:  Pattern feature  
    :type pattern: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PatternSketch: NXOpen.Sketch = ...
    """
    Returns or sets  the pattern sketch for reusable object 
    
    <hr>
    
    Getter Method
    
    Signature ``PatternSketch`` 
    
    :returns:  Pattern sketch  
    :rtype: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PatternSketch`` 
    
    :param sketch:  Pattern sketch  
    :type sketch: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PositioningFeatSet: NXOpen.Features.Feature = ...
    """
    Returns the positioning feature set by pattern sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``PositioningFeatSet`` 
    
    :returns:  Positioning feature set  
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    TargetBody: NXOpen.NXObject = ...
    """
    Returns or sets  the target body required for boolean operation 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetBody`` 
    
    :returns:  Target body  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetBody`` 
    
    :param body:  Target body  
    :type body: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    TargetFace: NXOpen.NXObject = ...
    """
    Returns or sets  the target face required for solid punch 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetFace`` 
    
    :returns:  Target face  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetFace`` 
    
    :param face:  Target face  
    :type face: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    UseOnePickPositionMethod: bool = ...
    """
    Returns or sets  the option specifying whether to use one-pick position method for drag/drop 
    
    <hr>
    
    Getter Method
    
    Signature ``UseOnePickPositionMethod`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseOnePickPositionMethod`` 
    
    :param useOnePickPositionMethod: 
    :type useOnePickPositionMethod: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: ReusableObjectPasteBuilder = ...  # unknown typename


class FlowDisplayBuilderAnalysisResultsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FlowDisplayBuilderAnalysisResults():
    """
    The option of analysis results. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MeltFrontTime", " - "
       "GateContribution", " - "
       "PressureDrop", " - "
       "MeltFrontTemperature", " - "
       "MaxTemperature", " - "
       "AverageTemperature", " - "
       "FrozenLayerRatio", " - "
       "MaxCoolingTime", " - "
    """
    MeltFrontTime = 0  # FlowDisplayBuilderAnalysisResultsMemberType
    GateContribution = 1  # FlowDisplayBuilderAnalysisResultsMemberType
    PressureDrop = 2  # FlowDisplayBuilderAnalysisResultsMemberType
    MeltFrontTemperature = 3  # FlowDisplayBuilderAnalysisResultsMemberType
    MaxTemperature = 4  # FlowDisplayBuilderAnalysisResultsMemberType
    AverageTemperature = 5  # FlowDisplayBuilderAnalysisResultsMemberType
    FrozenLayerRatio = 6  # FlowDisplayBuilderAnalysisResultsMemberType
    MaxCoolingTime = 7  # FlowDisplayBuilderAnalysisResultsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FlowDisplayBuilder(NXOpen.Builder):
    """
    Represents the builder which is used to create flow analysis.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldDesignCollection.CreateFlowDisplayBuilder`
    
    Default values.
    
    ================  ==============
    Property          Value
    ================  ==============
    AirTrapOption     0 
    ----------------  --------------
    NumberIntervals   20 
    ----------------  --------------
    NumberSubMeshes   0 
    ----------------  --------------
    ResultsOption     MeltFrontTime 
    ----------------  --------------
    WeldLineOption    0 
    ================  ==============
    
    .. versionadded:: NX8.5.0
    """
    
    class AnalysisResults():
        """
        The option of analysis results. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MeltFrontTime", " - "
           "GateContribution", " - "
           "PressureDrop", " - "
           "MeltFrontTemperature", " - "
           "MaxTemperature", " - "
           "AverageTemperature", " - "
           "FrozenLayerRatio", " - "
           "MaxCoolingTime", " - "
        """
        MeltFrontTime = 0  # FlowDisplayBuilderAnalysisResultsMemberType
        GateContribution = 1  # FlowDisplayBuilderAnalysisResultsMemberType
        PressureDrop = 2  # FlowDisplayBuilderAnalysisResultsMemberType
        MeltFrontTemperature = 3  # FlowDisplayBuilderAnalysisResultsMemberType
        MaxTemperature = 4  # FlowDisplayBuilderAnalysisResultsMemberType
        AverageTemperature = 5  # FlowDisplayBuilderAnalysisResultsMemberType
        FrozenLayerRatio = 6  # FlowDisplayBuilderAnalysisResultsMemberType
        MaxCoolingTime = 7  # FlowDisplayBuilderAnalysisResultsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DisplayDynamicColorPlots(self) -> None:
        """
        Display color plots in all steps.  
        
        Signature ``DisplayDynamicColorPlots()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    AirTrapOption: bool = ...
    """
    Returns or sets  the air trap option to be set 
    
    <hr>
    
    Getter Method
    
    Signature ``AirTrapOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AirTrapOption`` 
    
    :param airTrapOption: 
    :type airTrapOption: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    FolderBrowser: str = ...
    """
    Returns or sets  the folder in which flow analysis results can be found 
    
    <hr>
    
    Getter Method
    
    Signature ``FolderBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FolderBrowser`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    NumberIntervals: int = ...
    """
    Returns or sets  the interval number of the whole filling time.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberIntervals`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberIntervals`` 
    
    :param numIntervals: 
    :type numIntervals: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    NumberSubMeshes: int = ...
    """
    Returns or sets  the number of sub-meshes to display 
    
    <hr>
    
    Getter Method
    
    Signature ``NumberSubMeshes`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberSubMeshes`` 
    
    :param noSubMeshes: 
    :type noSubMeshes: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    ResultsOption: FlowDisplayBuilderAnalysisResults = ...
    """
    Returns or sets  the analysis results option to display 
    
    <hr>
    
    Getter Method
    
    Signature ``ResultsOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.FlowDisplayBuilderAnalysisResults` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ResultsOption`` 
    
    :param resultsOption: 
    :type resultsOption: :py:class:`NXOpen.Tooling.FlowDisplayBuilderAnalysisResults` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    WeldLineOption: bool = ...
    """
    Returns or sets  the weld line option to be set 
    
    <hr>
    
    Getter Method
    
    Signature ``WeldLineOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WeldLineOption`` 
    
    :param weldLineOption: 
    :type weldLineOption: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Null: FlowDisplayBuilder = ...  # unknown typename


class ForceCalculationBuilderProcessTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ForceCalculationBuilderProcessTypes():
    """
    The process type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Catalog", "catalog"
       "AngularBlanking", "angular blanking"
       "AngularEmbossing", "angular embossing"
       "AngularPiercing", "angular piercing"
       "Bending", "bending"
       "Blanking", "blanking"
       "Burring", "burring"
       "CircularDrawing", "circular drawing"
       "Counterboring", "counterboring"
       "Countersinking", "countersinking"
       "CylindricalIroning", "cylindrical ironing"
       "Flanging", "flanging"
       "Piercing", "piercing"
       "RoundEmbossing", "round embossing"
       "SquareDrawing", "square drawing"
       "UBending", "U bending"
       "VBending", "V bending"
       "VBendingTree", "V bending tree"
       "ZBending", "Z bending"
    """
    Catalog = 0  # ForceCalculationBuilderProcessTypesMemberType
    AngularBlanking = 1  # ForceCalculationBuilderProcessTypesMemberType
    AngularEmbossing = 2  # ForceCalculationBuilderProcessTypesMemberType
    AngularPiercing = 3  # ForceCalculationBuilderProcessTypesMemberType
    Bending = 4  # ForceCalculationBuilderProcessTypesMemberType
    Blanking = 5  # ForceCalculationBuilderProcessTypesMemberType
    Burring = 6  # ForceCalculationBuilderProcessTypesMemberType
    CircularDrawing = 7  # ForceCalculationBuilderProcessTypesMemberType
    Counterboring = 8  # ForceCalculationBuilderProcessTypesMemberType
    Countersinking = 9  # ForceCalculationBuilderProcessTypesMemberType
    CylindricalIroning = 10  # ForceCalculationBuilderProcessTypesMemberType
    Flanging = 11  # ForceCalculationBuilderProcessTypesMemberType
    Piercing = 12  # ForceCalculationBuilderProcessTypesMemberType
    RoundEmbossing = 13  # ForceCalculationBuilderProcessTypesMemberType
    SquareDrawing = 14  # ForceCalculationBuilderProcessTypesMemberType
    UBending = 15  # ForceCalculationBuilderProcessTypesMemberType
    VBending = 16  # ForceCalculationBuilderProcessTypesMemberType
    VBendingTree = 17  # ForceCalculationBuilderProcessTypesMemberType
    ZBending = 18  # ForceCalculationBuilderProcessTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ForceCalculationBuilderCalculationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ForceCalculationBuilderCalculationTypes():
    """
    The calculation type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", "calculate force considering pre-stations effects"
       "Isolated", "calculate force in isolation, without considering other processes"
    """
    Normal = 0  # ForceCalculationBuilderCalculationTypesMemberType
    Isolated = 1  # ForceCalculationBuilderCalculationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ForceCalculationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.ForceCalculationBuilder`
    Force Calculation Design is to calculate force of process
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ForceCalculationCollection.CreateForceCalculationBuilder`
    
    Default values.
    
    ================  ================
    Property          Value
    ================  ================
    CalculationType   Normal 
    ----------------  ----------------
    DecimalPlaces     3 
    ----------------  ----------------
    ProcessType       AngularBlanking 
    ================  ================
    
    .. versionadded:: NX7.5.0
    """
    
    class ProcessTypes():
        """
        The process type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Catalog", "catalog"
           "AngularBlanking", "angular blanking"
           "AngularEmbossing", "angular embossing"
           "AngularPiercing", "angular piercing"
           "Bending", "bending"
           "Blanking", "blanking"
           "Burring", "burring"
           "CircularDrawing", "circular drawing"
           "Counterboring", "counterboring"
           "Countersinking", "countersinking"
           "CylindricalIroning", "cylindrical ironing"
           "Flanging", "flanging"
           "Piercing", "piercing"
           "RoundEmbossing", "round embossing"
           "SquareDrawing", "square drawing"
           "UBending", "U bending"
           "VBending", "V bending"
           "VBendingTree", "V bending tree"
           "ZBending", "Z bending"
        """
        Catalog = 0  # ForceCalculationBuilderProcessTypesMemberType
        AngularBlanking = 1  # ForceCalculationBuilderProcessTypesMemberType
        AngularEmbossing = 2  # ForceCalculationBuilderProcessTypesMemberType
        AngularPiercing = 3  # ForceCalculationBuilderProcessTypesMemberType
        Bending = 4  # ForceCalculationBuilderProcessTypesMemberType
        Blanking = 5  # ForceCalculationBuilderProcessTypesMemberType
        Burring = 6  # ForceCalculationBuilderProcessTypesMemberType
        CircularDrawing = 7  # ForceCalculationBuilderProcessTypesMemberType
        Counterboring = 8  # ForceCalculationBuilderProcessTypesMemberType
        Countersinking = 9  # ForceCalculationBuilderProcessTypesMemberType
        CylindricalIroning = 10  # ForceCalculationBuilderProcessTypesMemberType
        Flanging = 11  # ForceCalculationBuilderProcessTypesMemberType
        Piercing = 12  # ForceCalculationBuilderProcessTypesMemberType
        RoundEmbossing = 13  # ForceCalculationBuilderProcessTypesMemberType
        SquareDrawing = 14  # ForceCalculationBuilderProcessTypesMemberType
        UBending = 15  # ForceCalculationBuilderProcessTypesMemberType
        VBending = 16  # ForceCalculationBuilderProcessTypesMemberType
        VBendingTree = 17  # ForceCalculationBuilderProcessTypesMemberType
        ZBending = 18  # ForceCalculationBuilderProcessTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CalculationTypes():
        """
        The calculation type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Normal", "calculate force considering pre-stations effects"
           "Isolated", "calculate force in isolation, without considering other processes"
        """
        Normal = 0  # ForceCalculationBuilderCalculationTypesMemberType
        Isolated = 1  # ForceCalculationBuilderCalculationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CalculationType: ForceCalculationBuilderCalculationTypes = ...
    """
    Returns or sets  the calculation method.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ForceCalculationBuilderCalculationTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationType`` 
    
    :param calculationType: 
    :type calculationType: :py:class:`NXOpen.Tooling.ForceCalculationBuilderCalculationTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CuttingPerimeter: str = ...
    """
    Returns or sets  the cutting perimeter length for EDM of the process.  
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingPerimeter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingPerimeter`` 
    
    :param cuttingPerimeter:  Indicates the string of cutting perimeter length  
    :type cuttingPerimeter: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DecimalPlaces: int = ...
    """
    Returns or sets  the decimal places of the calculated force result.  
    
    <hr>
    
    Getter Method
    
    Signature ``DecimalPlaces`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DecimalPlaces`` 
    
    :param decimalPlaces: 
    :type decimalPlaces: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ForceProcess: NXOpen.SelectFaceList = ...
    """
    Returns  the process used to calculate force.  
    
    <hr>
    
    Getter Method
    
    Signature ``ForceProcess`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    GravityCenter: str = ...
    """
    Returns or sets  the gravity center of the process.  
    
    <hr>
    
    Getter Method
    
    Signature ``GravityCenter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GravityCenter`` 
    
    :param gravityCenter:  Indicates the string of process gravity center  
    :type gravityCenter: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HoldingForce: str = ...
    """
    Returns or sets  the pressure-pad-force of the process.  
    
    <hr>
    
    Getter Method
    
    Signature ``HoldingForce`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoldingForce`` 
    
    :param holdingForce:  Indicates the string of holding force  
    :type holdingForce: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Parameter: str = ...
    """
    Returns or sets  the parameter expression to calculate the process force.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parameter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Parameter`` 
    
    :param parameterExp: 
    :type parameterExp: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ParameterText: str = ...
    """
    Returns or sets  the parameter text.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterText`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParameterText`` 
    
    :param parameterText: 
    :type parameterText: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ProcessFace: NXOpen.ScCollector = ...
    """
    Returns  the face of the process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProcessForce: str = ...
    """
    Returns or sets  the process force of the calculated result.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessForce`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessForce`` 
    
    :param processForce:  Indicates the string of process force  
    :type processForce: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProcessName: str = ...
    """
    Returns or sets  the process name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessName`` 
    
    :param processName: 
    :type processName: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ProcessType: ForceCalculationBuilderProcessTypes = ...
    """
    Returns or sets  the process type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ForceCalculationBuilderProcessTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessType`` 
    
    :param processType: 
    :type processType: :py:class:`NXOpen.Tooling.ForceCalculationBuilderProcessTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TotalForce: str = ...
    """
    Returns or sets  the total force of the calculated processes .  
    
    <hr>
    
    Getter Method
    
    Signature ``TotalForce`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TotalForce`` 
    
    :param totalForce:  Indicates the string of total process force  
    :type totalForce: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TotalForceCenter: str = ...
    """
    Returns or sets  the total force center of the calculated processes .  
    
    <hr>
    
    Getter Method
    
    Signature ``TotalForceCenter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TotalForceCenter`` 
    
    :param totalForceCenter:  Indicates the string of total process force center  
    :type totalForceCenter: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ForceCalculationBuilder = ...  # unknown typename


class SelectReuseLibraryListItemBuilder(NXOpen.TaggedObject):
    """
    Select reuse library list item  
    
    .. versionadded:: NX9.0.0
    """
    SelectReuseItem: SelectReuseLibraryItemBuilder = ...
    """
    Returns  the selected reuse item list.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectReuseItem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SelectReuseLibraryItemBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: SelectReuseLibraryListItemBuilder = ...  # unknown typename


class TrimMoldComponentsBuilderTrimMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimMoldComponentsBuilderTrimMethod():
    """
    the processing type of Trim Mold Components. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Trim", "Trim"
       "Untrim", "Untrim"
    """
    Trim = 0  # TrimMoldComponentsBuilderTrimMethodMemberType
    Untrim = 1  # TrimMoldComponentsBuilderTrimMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimMoldComponentsBuilderTrimPartNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimMoldComponentsBuilderTrimPartName():
    """
    the trim part options where a part chosen to work around 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Notrimpart", "No Trim Part"
    """
    Notrimpart = 0  # TrimMoldComponentsBuilderTrimPartNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimMoldComponentsBuilderTrimSurfaceNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimMoldComponentsBuilderTrimSurfaceName():
    """
    trim surface types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SelectFaces", "Select faces"
       "SelectSheetBody", "Select sheet body"
    """
    SelectFaces = 0  # TrimMoldComponentsBuilderTrimSurfaceNameMemberType
    SelectSheetBody = 1  # TrimMoldComponentsBuilderTrimSurfaceNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimMoldComponentsBuilderTargetScopeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimMoldComponentsBuilderTargetScope():
    """
    the target bodies selection scope 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Product", "Select target bodies in product node part"
       "Any", "Select target bodies in any part of the entire assembly"
    """
    Product = 0  # TrimMoldComponentsBuilderTargetScopeMemberType
    Any = 1  # TrimMoldComponentsBuilderTargetScopeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimMoldComponentsBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create Mold Wizard trim mold components.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.TrimMoldComponentsCollection.CreateTrimMoldComponentsBuilder`
    
    Default values.
    
    ==================  ============
    Property            Value
    ==================  ============
    ActionType          Trim 
    ------------------  ------------
    TargetSelectScope   Product 
    ------------------  ------------
    TrimPart            Notrimpart 
    ------------------  ------------
    TrimSurface         SelectFaces 
    ==================  ============
    
    .. versionadded:: NX7.5.0
    """
    
    class TrimMethod():
        """
        the processing type of Trim Mold Components. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Trim", "Trim"
           "Untrim", "Untrim"
        """
        Trim = 0  # TrimMoldComponentsBuilderTrimMethodMemberType
        Untrim = 1  # TrimMoldComponentsBuilderTrimMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimPartName():
        """
        the trim part options where a part chosen to work around 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Notrimpart", "No Trim Part"
        """
        Notrimpart = 0  # TrimMoldComponentsBuilderTrimPartNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimSurfaceName():
        """
        trim surface types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SelectFaces", "Select faces"
           "SelectSheetBody", "Select sheet body"
        """
        SelectFaces = 0  # TrimMoldComponentsBuilderTrimSurfaceNameMemberType
        SelectSheetBody = 1  # TrimMoldComponentsBuilderTrimSurfaceNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TargetScope():
        """
        the target bodies selection scope 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Product", "Select target bodies in product node part"
           "Any", "Select target bodies in any part of the entire assembly"
        """
        Product = 0  # TrimMoldComponentsBuilderTargetScopeMemberType
        Any = 1  # TrimMoldComponentsBuilderTargetScopeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetTrimDataDetails(self, surfaceType: int, trimDirection: int, targets: 'list[NXOpen.NXObject]', tools: 'list[NXOpen.NXObject]') -> None:
        """
        Set details of the trim data.  
        
        Signature ``SetTrimDataDetails(surfaceType, trimDirection, targets, tools)`` 
        
        :param surfaceType:  the surface type.  
        :type surfaceType: int 
        :param trimDirection:  the trim direction.  
        :type trimDirection: int 
        :param targets:  array of target ejector pins.  
        :type targets: list of :py:class:`NXOpen.NXObject` 
        :param tools:  array of tool objects.  
        :type tools: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    ActionType: TrimMoldComponentsBuilderTrimMethod = ...
    """
    Returns or sets  the action type defines the current trim method used to processing a mold components.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimMoldComponentsBuilderTrimMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionType`` 
    
    :param actionType: 
    :type actionType: :py:class:`NXOpen.Tooling.TrimMoldComponentsBuilderTrimMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TargetBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the target bodies which collects the bodies to be trimmed or untrimmed.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TargetSelectScope: TrimMoldComponentsBuilderTargetScope = ...
    """
    Returns or sets  the selection scope for target body selection.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetSelectScope`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimMoldComponentsBuilderTargetScope` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetSelectScope`` 
    
    :param targetSelectScope: 
    :type targetSelectScope: :py:class:`NXOpen.Tooling.TrimMoldComponentsBuilderTargetScope` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToolFace: NXOpen.ScCollector = ...
    """
    Returns  the tool face used to trim the target bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToolSheetBody: NXOpen.SelectBody = ...
    """
    Returns  the tool sheet body used to trim the target bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolSheetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimDirection: bool = ...
    """
    Returns or sets  the indication to reverse the trim direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimDirection`` 
    
    :param trimDirection: 
    :type trimDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimPart: TrimMoldComponentsBuilderTrimPartName = ...
    """
    Returns or sets  the trim part where trim surface features are found.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimMoldComponentsBuilderTrimPartName` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimPart`` 
    
    :param trimPart: 
    :type trimPart: :py:class:`NXOpen.Tooling.TrimMoldComponentsBuilderTrimPartName` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimSurface: TrimMoldComponentsBuilderTrimSurfaceName = ...
    """
    Returns or sets  the trim surface used to trim the target bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimSurface`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimMoldComponentsBuilderTrimSurfaceName` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimSurface`` 
    
    :param trimSurface: 
    :type trimSurface: :py:class:`NXOpen.Tooling.TrimMoldComponentsBuilderTrimSurfaceName` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: TrimMoldComponentsBuilder = ...  # unknown typename


class EdgePatchBuilderSelectTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EdgePatchBuilderSelectTypes():
    """
    Settings of the selection types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Face", "Face types"
       "Body", "Body types"
       "Traverse", "Traverse types"
    """
    Face = 0  # EdgePatchBuilderSelectTypesMemberType
    Body = 1  # EdgePatchBuilderSelectTypesMemberType
    Traverse = 2  # EdgePatchBuilderSelectTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EdgePatchBuilderPatchStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EdgePatchBuilderPatchStatus():
    """
    Settings of the patch status types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoLoopExisted", "No loop existed in list"
       "OneLoopExisted", "One loop existed in list"
       "MultiLoopsExisted", "More than one loops existed in list"
       "SomeLoopsExisted", "Some loops existed in list"
       "LoopNotPatched", "No loop is patched"
       "PatchedAndSomeSuppressed", "Some patched bodies are suppressed"
       "PatchedAndAllSuppressed", "All patched bodies are suppressed"
       "PatchedAndNoSuppressed", "No patched body is suppressed"
    """
    NoLoopExisted = 0  # EdgePatchBuilderPatchStatusMemberType
    OneLoopExisted = 1  # EdgePatchBuilderPatchStatusMemberType
    MultiLoopsExisted = 2  # EdgePatchBuilderPatchStatusMemberType
    SomeLoopsExisted = 3  # EdgePatchBuilderPatchStatusMemberType
    LoopNotPatched = 4  # EdgePatchBuilderPatchStatusMemberType
    PatchedAndSomeSuppressed = 5  # EdgePatchBuilderPatchStatusMemberType
    PatchedAndAllSuppressed = 6  # EdgePatchBuilderPatchStatusMemberType
    PatchedAndNoSuppressed = 7  # EdgePatchBuilderPatchStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EdgePatchBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create edge patch surfaces.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.EdgePatchCollection.CreateBuilder`
    
    Default values.
    
    =============  =====
    Property       Value
    =============  =====
    PatchSurface   1 
    -------------  -----
    SelType        Face 
    =============  =====
    
    .. versionadded:: NX7.5.0
    """
    
    class SelectTypes():
        """
        Settings of the selection types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Face", "Face types"
           "Body", "Body types"
           "Traverse", "Traverse types"
        """
        Face = 0  # EdgePatchBuilderSelectTypesMemberType
        Body = 1  # EdgePatchBuilderSelectTypesMemberType
        Traverse = 2  # EdgePatchBuilderSelectTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PatchStatus():
        """
        Settings of the patch status types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoLoopExisted", "No loop existed in list"
           "OneLoopExisted", "One loop existed in list"
           "MultiLoopsExisted", "More than one loops existed in list"
           "SomeLoopsExisted", "Some loops existed in list"
           "LoopNotPatched", "No loop is patched"
           "PatchedAndSomeSuppressed", "Some patched bodies are suppressed"
           "PatchedAndAllSuppressed", "All patched bodies are suppressed"
           "PatchedAndNoSuppressed", "No patched body is suppressed"
        """
        NoLoopExisted = 0  # EdgePatchBuilderPatchStatusMemberType
        OneLoopExisted = 1  # EdgePatchBuilderPatchStatusMemberType
        MultiLoopsExisted = 2  # EdgePatchBuilderPatchStatusMemberType
        SomeLoopsExisted = 3  # EdgePatchBuilderPatchStatusMemberType
        LoopNotPatched = 4  # EdgePatchBuilderPatchStatusMemberType
        PatchedAndSomeSuppressed = 5  # EdgePatchBuilderPatchStatusMemberType
        PatchedAndAllSuppressed = 6  # EdgePatchBuilderPatchStatusMemberType
        PatchedAndNoSuppressed = 7  # EdgePatchBuilderPatchStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DirectionReverse(self) -> None:
        """
        Reverse reference face direction.  
        
        Signature ``DirectionReverse()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetBodyColor(self) -> None:
        """Returns or sets  the patch body color."""
        ...
    
    @typing.overload
    def GetBodyColor(self) -> NXOpen.NXColor:
        """
        Getter Method
        
        Signature ``BodyColor`` 
        
        :returns: the color index 
        :rtype: Id 
        
        .. versionadded:: NX7.5.5
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetBodyColor(self, patchColor: NXOpen.NXColor) -> None:
        """
        Setter Method
        
        Signature ``BodyColor`` 
        
        :param patchColor: the color index 
        :type patchColor: Id 
        
        .. versionadded:: NX7.5.5
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetBodyColor(self) -> tuple:
        """
        Returns the body color. 
        
        Signature ``GetBodyColor()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (redValue, greenValue, blueValue). redValue is a float.   red value between 0 and 1 greenValue is a float.   green value between 0 and 1 blueValue is a float.   blue value between 0 and 1 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`Tooling.EdgePatchBuilder.BodyColor` instead.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetBodyColor(self) -> None:
        """Returns or sets  the patch body color."""
        ...
    
    @typing.overload
    def SetBodyColor(self, patchColor: NXOpen.NXColor) -> None:
        """
        Getter Method
        
        Signature ``BodyColor`` 
        
        :param patchColor: the color index 
        :type patchColor: Id 
        
        .. versionadded:: NX7.5.5
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetBodyColor(self, patchColor: NXOpen.NXColor) -> None:
        """
        Setter Method
        
        Signature ``BodyColor`` 
        
        :param patchColor: the color index 
        :type patchColor: Id 
        
        .. versionadded:: NX7.5.5
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetBodyColor(self, redValue: float, greenValue: float, blueValue: float) -> None:
        """
        Sets the body color. 
        
        Signature ``SetBodyColor(redValue, greenValue, blueValue)`` 
        
        :param redValue:  red value between 0 and 1  
        :type redValue: float 
        :param greenValue:  green value between 0 and 1  
        :type greenValue: float 
        :param blueValue:  blue value between 0 and 1  
        :type blueValue: float 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`Tooling.EdgePatchBuilder.BodyColor` instead.
        
        License requirements: None.
        """
        ...
    
    
    def FindFaceHoles(self, referFaces: NXOpen.Face) -> EdgePatchBuilderPatchStatus:
        """
        Find holes on the input faces.  
        
        Signature ``FindFaceHoles(referFaces)`` 
        
        :param referFaces:  the faces to find holes 
        :type referFaces: :py:class:`NXOpen.Face` 
        :returns:  the loop status  
        :rtype: :py:class:`NXOpen.Tooling.EdgePatchBuilderPatchStatus` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FindBodyHoles(self, body: NXOpen.Body) -> None:
        """
        Find holes on the input body.  
        
        Signature ``FindBodyHoles(body)`` 
        
        :param body:  the body to find holes on which 
        :type body: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FindEdgesPatch(self, edges: 'list[NXOpen.NXObject]') -> EdgePatchBuilderPatchStatus:
        """
        Get hole information of input edges.  
        
        Signature ``FindEdgesPatch(edges)`` 
        
        :param edges:  the edges or curves to find holes information 
        :type edges: list of :py:class:`NXOpen.NXObject` 
        :returns:  the edges or curves patch status  
        :rtype: :py:class:`NXOpen.Tooling.EdgePatchBuilderPatchStatus` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def EditReferenceFace(self, index: int, addFaces: 'list[NXOpen.Face]', removeFaces: 'list[NXOpen.Face]') -> None:
        """
        Add or remove reference faces.  
        
        Signature ``EditReferenceFace(index, addFaces, removeFaces)`` 
        
        :param index:  the index of list loop  
        :type index: int 
        :param addFaces:  The faces to add to reference faces  
        :type addFaces: list of :py:class:`NXOpen.Face` 
        :param removeFaces:  The faces to remove from reference faces  
        :type removeFaces: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteOneLoopList(self, index: int) -> None:
        """
        Delete one loop list of the index.  
        
        Signature ``DeleteOneLoopList(index)`` 
        
        :param index:  the index value  
        :type index: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSelectedItems(self, selectedItems: 'list[int]') -> None:
        """
        Set the selected items index value.  
        
        Signature ``SetSelectedItems(selectedItems)`` 
        
        :param selectedItems:  the selected index values  
        :type selectedItems: list of int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTolerance(self, tolerance: float) -> None:
        """
        Set the tolerance value.  
        
        Signature ``SetTolerance(tolerance)`` 
        
        :param tolerance:  the tolerance value  
        :type tolerance: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetGiveFailedMessage(self, giveMessage: int) -> None:
        """
        Set the giving failed message value.  
        
        Signature ``SetGiveFailedMessage(giveMessage)`` 
        
        :param giveMessage:  the giving failed message value  
        :type giveMessage: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DestroyMemory(self) -> None:
        """
        Destroy the builder memory.  
        
        Signature ``DestroyMemory()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearList(self, type: int) -> None:
        """
        Clear the index list.  
        
        Signature ``ClearList(type)`` 
        
        :param type:  indicating which index list to clear  
        :type type: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDeletedList(self, items: 'list[int]') -> None:
        """
        Set deleted list value.  
        
        Signature ``SetDeletedList(items)`` 
        
        :param items:  the deleted index values  
        :type items: list of int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def MakeMoldWizardFills(self, tolerance: float, edges: 'list[NXOpen.NXObject]', origFaces: 'list[NXOpen.Face]') -> None:
        """
        Create a mold wizard fill.  
        
        Signature ``MakeMoldWizardFills(tolerance, edges, origFaces)`` 
        
        :param tolerance:  distance tolerance  
        :type tolerance: float 
        :param edges:  ordered edges array  
        :type edges: list of :py:class:`NXOpen.NXObject` 
        :param origFaces:  selected faces array  
        :type origFaces: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    
    AllowPatch: bool = ...
    """
    Returns or sets  the flag indicating if creating copies for patch surface is allowed.  
    
    <hr>
    
    Getter Method
    
    Signature ``AllowPatch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllowPatch`` 
    
    :param patch: 
    :type patch: bool 
    
    .. versionadded:: NX7.5.3
    
    License requirements: None.
    """
    Body: NXOpen.SelectBody = ...
    """
    Returns  the body to use to search for loops.  
    
    <hr>
    
    Getter Method
    
    Signature ``Body`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BodyColor: NXOpen.NXColor = ...
    """
    Returns or sets  the patch body color.  
    
    <hr>
    
    Getter Method
    
    Signature ``BodyColor`` 
    
    :returns: the color index 
    :rtype: Id 
    
    .. versionadded:: NX7.5.5
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BodyColor`` 
    
    :param patchColor: the color index 
    :type patchColor: Id 
    
    .. versionadded:: NX7.5.5
    
    License requirements: None.
    """
    Face: NXOpen.ScCollector = ...
    """
    Returns  the face to use to search for loops.  
    
    <hr>
    
    Getter Method
    
    Signature ``Face`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Loops: NXOpen.ScCollector = ...
    """
    Returns  the loops to patch.  
    
    <hr>
    
    Getter Method
    
    Signature ``Loops`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PatchSurface: bool = ...
    """
    Returns or sets  the indication to create patch surface bodies in core/cavity.  
    
    <hr>
    
    Getter Method
    
    Signature ``PatchSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PatchSurface`` 
    
    :param patchSurface: 
    :type patchSurface: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReferenceFace: NXOpen.ScCollector = ...
    """
    Returns  the reference face to use to create edge patch.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelType: EdgePatchBuilderSelectTypes = ...
    """
    Returns or sets  the patch type of the edge patch creation.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EdgePatchBuilderSelectTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelType`` 
    
    :param selType: 
    :type selType: :py:class:`NXOpen.Tooling.EdgePatchBuilderSelectTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: EdgePatchBuilder = ...  # unknown typename


class TrimSolidBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimSolidBuilderTypes():
    """
    represents the option to select face or sheet body or manufacturing faces to trim the bounding box. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Face", "Region with body faces."
       "SheetBody", "Region with sheet bodies."
       "ManufacturingRegion", "Region with attribute faces."
    """
    Face = 0  # TrimSolidBuilderTypesMemberType
    SheetBody = 1  # TrimSolidBuilderTypesMemberType
    ManufacturingRegion = 2  # TrimSolidBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimSolidBuilderTrimSolidActionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimSolidBuilderTrimSolidAction():
    """
    represents the action to create trim solid. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Trim", "Action to do trim."
       "Subtract", "Action to do subtract."
       "KeepBoxandRegion", "Action to keep box and region."
    """
    Trim = 0  # TrimSolidBuilderTrimSolidActionMemberType
    Subtract = 1  # TrimSolidBuilderTrimSolidActionMemberType
    KeepBoxandRegion = 2  # TrimSolidBuilderTrimSolidActionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimSolidBuilder(NXOpen.Builder):
    """
    Mold Wizard trim solid management builder, trims bounding box body with region, subtract 
    bounding box with workpiece or keep region and box.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.TrimSolidCollection.CreateTrimSolidBuilder`
    
    Default values.
    
    ================  ============================================
    Property          Value
    ================  ============================================
    ActionType        Trim 
    ----------------  --------------------------------------------
    ChangeBoxSize     1 
    ----------------  --------------------------------------------
    Clearance.Value   0.1 (millimeters part), 0.004 (inches part) 
    ----------------  --------------------------------------------
    RemoveParameter   0 
    ================  ============================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Types():
        """
        represents the option to select face or sheet body or manufacturing faces to trim the bounding box. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Face", "Region with body faces."
           "SheetBody", "Region with sheet bodies."
           "ManufacturingRegion", "Region with attribute faces."
        """
        Face = 0  # TrimSolidBuilderTypesMemberType
        SheetBody = 1  # TrimSolidBuilderTypesMemberType
        ManufacturingRegion = 2  # TrimSolidBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimSolidAction():
        """
        represents the action to create trim solid. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Trim", "Action to do trim."
           "Subtract", "Action to do subtract."
           "KeepBoxandRegion", "Action to keep box and region."
        """
        Trim = 0  # TrimSolidBuilderTrimSolidActionMemberType
        Subtract = 1  # TrimSolidBuilderTrimSolidActionMemberType
        KeepBoxandRegion = 2  # TrimSolidBuilderTrimSolidActionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InsideBoundBox(self) -> None:
        """
        The faces inside the bounding box.  
        
        Signature ``InsideBoundBox()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def InsideCrossBoundBox(self) -> None:
        """
        The faces inside/cross the bounding box.  
        
        Signature ``InsideCrossBoundBox()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetBoundBox(self, block: NXOpen.Body) -> None:
        """
        Sets the bounding box tag.  
        
        Signature ``SetBoundBox(block)`` 
        
        :param block:  the bounding box block body 
        :type block: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetManualBody(self, block: NXOpen.Body) -> None:
        """
        Sets the manually selected target body.  
        
        Signature ``SetManualBody(block)`` 
        
        :param block: the manually selected target body 
        :type block: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateBoundBox(self) -> None:
        """
        Creates the bounding box.  
        
        Signature ``CreateBoundBox()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateToolingBox(self) -> NXOpen.Body:
        """
        Creates the tooling box.  
        
        Signature ``CreateToolingBox()`` 
        
        :returns:  the bounded box body 
        :rtype: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    ActionType: TrimSolidBuilderTrimSolidAction = ...
    """
    Returns or sets  the action type of trim, subtract or just keep the region and the bounding box.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimSolidBuilderTrimSolidAction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``ActionType`` 
    
    :param actionType: 
    :type actionType: :py:class:`NXOpen.Tooling.TrimSolidBuilderTrimSolidAction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ChangeBoxSize: bool = ...
    """
    Returns or sets  the option to change the created boundbox size
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeBoxSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.18
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChangeBoxSize`` 
    
    :param changeBoxSize: 
    :type changeBoxSize: bool 
    
    .. versionadded:: NX8.0.18
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Clearance: NXOpen.Expression = ...
    """
    Returns  the single side clearance value of the bounding box.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RegionFaces: NXOpen.ScCollector = ...
    """
    Returns  the region faces to create trim solid.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RemoveParameter: bool = ...
    """
    Returns or sets  the option to remove parameter of the trim solid body
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveParameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveParameter`` 
    
    :param removeParameter: 
    :type removeParameter: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectBoundBox: NXOpen.SelectBody = ...
    """
    Returns  the selected bounding box.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBoundBox`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectLinkTarget: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the component that the trimmed body is linked to.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLinkTarget`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SheetBody: NXOpen.SelectBodyList = ...
    """
    Returns  the sheet body to create trim solid.  
    
    <hr>
    
    Getter Method
    
    Signature ``SheetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TaggedFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the faces with the defined attribute to create trim solid.  
    
    <hr>
    
    Getter Method
    
    Signature ``TaggedFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TrimDirection: bool = ...
    """
    Returns or sets  the trim body side.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimDirection`` 
    
    :param trimDirection: 
    :type trimDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: TrimSolidBuilderTypes = ...
    """
    Returns or sets  the type to select face, sheet body or manufacturing faces to trim the bounding box.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimSolidBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.TrimSolidBuilderTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: TrimSolidBuilder = ...  # unknown typename


class MoldInsertBuilderBooleanTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MoldInsertBuilderBooleanType():
    """
    design type: unite single workpieces, subtract overall workpieces 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UniteSingleWorkpieces", "unite single"
       "SubtractOverallWorkpieces", "subtract overall"
    """
    UniteSingleWorkpieces = 0  # MoldInsertBuilderBooleanTypeMemberType
    SubtractOverallWorkpieces = 1  # MoldInsertBuilderBooleanTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MoldInsertBuilder(NXOpen.Builder):
    """
    Mold Wizard mold insert management builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldInsertCollection.CreateMoldInsertBuilder`
    
    Default values.
    
    ===========  ======================
    Property     Value
    ===========  ======================
    MethodType   UniteSingleWorkpieces 
    -----------  ----------------------
    Rename       0 
    ===========  ======================
    
    .. versionadded:: NX6.0.0
    """
    
    class BooleanType():
        """
        design type: unite single workpieces, subtract overall workpieces 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UniteSingleWorkpieces", "unite single"
           "SubtractOverallWorkpieces", "subtract overall"
        """
        UniteSingleWorkpieces = 0  # MoldInsertBuilderBooleanTypeMemberType
        SubtractOverallWorkpieces = 1  # MoldInsertBuilderBooleanTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    MethodType: MoldInsertBuilderBooleanType = ...
    """
    Returns or sets  the method type 
    
    <hr>
    
    Getter Method
    
    Signature ``MethodType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MoldInsertBuilderBooleanType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MethodType`` 
    
    :param methodType: 
    :type methodType: :py:class:`NXOpen.Tooling.MoldInsertBuilderBooleanType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Rename: bool = ...
    """
    Returns or sets  the rename method 
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectBody: NXOpen.SelectBodyList = ...
    """
    Returns  the select body 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: MoldInsertBuilder = ...  # unknown typename


class BlankNestingBuilderLayoutTypeSpecificationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlankNestingBuilderLayoutTypeSpecification():
    """
    Specifies the layout type of blank nesting. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangle", "Auto-position blank along x-axis with rectangle bounding box."
       "Parallelogram", "Auto-position blank along x-axis with parallelogram bounding box."
       "Trapezoid", "Rotate blank 180 degrees and auto-position it along x-axis with trapezoid bounding box."
       "OneUp", "Auto-position blank along x-axis without bounding box."
       "TwoUp", "Two up without bounding box. Move one blank along y-axis, then auto-position them along x-axis."
       "TwoPair", "Two pair without bounding box. Rotate one blank 180 degrees and move along y-axis, then auto-position them along x-axis."
    """
    Rectangle = 0  # BlankNestingBuilderLayoutTypeSpecificationMemberType
    Parallelogram = 1  # BlankNestingBuilderLayoutTypeSpecificationMemberType
    Trapezoid = 2  # BlankNestingBuilderLayoutTypeSpecificationMemberType
    OneUp = 3  # BlankNestingBuilderLayoutTypeSpecificationMemberType
    TwoUp = 4  # BlankNestingBuilderLayoutTypeSpecificationMemberType
    TwoPair = 5  # BlankNestingBuilderLayoutTypeSpecificationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlankNestingBuilder(NXOpen.Builder):
    """
    Blank Nesting Builder of PDW, EDW and Die Engineering.  
    
    No object is returned by this builder. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.BlankNestingCollection.CreateBlankNestingBuilder`
    
    Default values.
    
    =================  ==========
    Property           Value
    =================  ==========
    AngleResult        0 
    -----------------  ----------
    AngleStep          25 
    -----------------  ----------
    BlankArea          0 
    -----------------  ----------
    BoundarySegment    200 
    -----------------  ----------
    HeightStep         25 
    -----------------  ----------
    LayoutType         Rectangle 
    -----------------  ----------
    MinimumDistance    0 
    -----------------  ----------
    PitchResult        0 
    -----------------  ----------
    StripWidthResult   0 
    -----------------  ----------
    Utilization        0 
    -----------------  ----------
    WebDistance        0 
    =================  ==========
    
    .. versionadded:: NX8.5.0
    """
    
    class LayoutTypeSpecification():
        """
        Specifies the layout type of blank nesting. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangle", "Auto-position blank along x-axis with rectangle bounding box."
           "Parallelogram", "Auto-position blank along x-axis with parallelogram bounding box."
           "Trapezoid", "Rotate blank 180 degrees and auto-position it along x-axis with trapezoid bounding box."
           "OneUp", "Auto-position blank along x-axis without bounding box."
           "TwoUp", "Two up without bounding box. Move one blank along y-axis, then auto-position them along x-axis."
           "TwoPair", "Two pair without bounding box. Rotate one blank 180 degrees and move along y-axis, then auto-position them along x-axis."
        """
        Rectangle = 0  # BlankNestingBuilderLayoutTypeSpecificationMemberType
        Parallelogram = 1  # BlankNestingBuilderLayoutTypeSpecificationMemberType
        Trapezoid = 2  # BlankNestingBuilderLayoutTypeSpecificationMemberType
        OneUp = 3  # BlankNestingBuilderLayoutTypeSpecificationMemberType
        TwoUp = 4  # BlankNestingBuilderLayoutTypeSpecificationMemberType
        TwoPair = 5  # BlankNestingBuilderLayoutTypeSpecificationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def LayoutCalculation(self) -> None:
        """
        The method to calculate maximum material utilization for the selected entities.  
        
        Signature ``LayoutCalculation()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    AngleResult: float = ...
    """
    Returns or sets  the angle between processed blank and original blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleResult`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleResult`` 
    
    :param angleResult: 
    :type angleResult: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    AngleStep: float = ...
    """
    Returns or sets  the angle increment to use when rotating the blank during the processing to find the best layout.  
    
    The angle is specified in degrees. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleStep`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleStep`` 
    
    :param angleStep: 
    :type angleStep: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    BlankArea: float = ...
    """
    Returns or sets  the up datum face area that was found in the processing.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankArea`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankArea`` 
    
    :param blankArea: 
    :type blankArea: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    BoundarySegment: int = ...
    """
    Returns or sets  the number of boundary segment.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundarySegment`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundarySegment`` 
    
    :param boundarySegment: 
    :type boundarySegment: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    HeightStep: float = ...
    """
    Returns or sets  the distance increment to use when translating the blank in the vertical direction during the processing to find the best layout.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeightStep`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeightStep`` 
    
    :param heightStep: 
    :type heightStep: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    LayoutType: BlankNestingBuilderLayoutTypeSpecification = ...
    """
    Returns or sets  the type of layout to use in the blank nesting processing.  
    
    <hr>
    
    Getter Method
    
    Signature ``LayoutType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlankNestingBuilderLayoutTypeSpecification` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LayoutType`` 
    
    :param layoutType: 
    :type layoutType: :py:class:`NXOpen.Tooling.BlankNestingBuilderLayoutTypeSpecification` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MinimumDistance: float = ...
    """
    Returns or sets  the minimum distance between the adjacent blanks.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumDistance`` 
    
    :param minimumDistance: 
    :type minimumDistance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    PitchResult: float = ...
    """
    Returns or sets  the distance between blanks that was found in the processing.  
    
    <hr>
    
    Getter Method
    
    Signature ``PitchResult`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PitchResult`` 
    
    :param pitchResult: 
    :type pitchResult: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SelectObject: NXOpen.ScCollector = ...
    """
    Returns  the selected entities making up the blank to be nested.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    StripWidthResult: float = ...
    """
    Returns or sets  the strip width.  
    
    <hr>
    
    Getter Method
    
    Signature ``StripWidthResult`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StripWidthResult`` 
    
    :param stripWidthResult: 
    :type stripWidthResult: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Utilization: float = ...
    """
    Returns or sets  the maximum material utilization of the blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``Utilization`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Utilization`` 
    
    :param utilization: 
    :type utilization: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    WebDistance: float = ...
    """
    Returns or sets  the distance between the blank and the strip.  
    
    <hr>
    
    Getter Method
    
    Signature ``WebDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WebDistance`` 
    
    :param webDistance: 
    :type webDistance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: BlankNestingBuilder = ...  # unknown typename


class AssignPatchBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssignPatchBuilderTypes():
    """
    The types for assigning sheets. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PatchSurface", " - "
       "PartingSurface", " - "
    """
    PatchSurface = 0  # AssignPatchBuilderTypesMemberType
    PartingSurface = 1  # AssignPatchBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssignPatchBuilderConvertTypeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssignPatchBuilderConvertTypeOption():
    """
    The option to convert to have copies or no copies for all selected sheets. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WithCopies", " - "
       "NoCopies", " - "
    """
    WithCopies = 0  # AssignPatchBuilderConvertTypeOptionMemberType
    NoCopies = 1  # AssignPatchBuilderConvertTypeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssignPatchBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to add sheet bodies as patch surfaces or delete patch surfaces.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AssignPatchCollection.CreateBuilder`
    
    Default values.
    
    ============  ===========
    Property      Value
    ============  ===========
    ConvertType   WithCopies 
    ------------  -----------
    KeepSheet     1 
    ============  ===========
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        The types for assigning sheets. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PatchSurface", " - "
           "PartingSurface", " - "
        """
        PatchSurface = 0  # AssignPatchBuilderTypesMemberType
        PartingSurface = 1  # AssignPatchBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ConvertTypeOption():
        """
        The option to convert to have copies or no copies for all selected sheets. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WithCopies", " - "
           "NoCopies", " - "
        """
        WithCopies = 0  # AssignPatchBuilderConvertTypeOptionMemberType
        NoCopies = 1  # AssignPatchBuilderConvertTypeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    @typing.overload
    def GetPatchColor(self) -> None:
        """Returns or sets  the patch surface color."""
        ...
    
    @typing.overload
    def GetPatchColor(self) -> NXOpen.NXColor:
        """
        Getter Method
        
        Signature ``PatchColor`` 
        
        :returns: 
        :rtype: Id 
        
        .. versionadded:: NX7.5.5
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetPatchColor(self, patchColor: NXOpen.NXColor) -> None:
        """
        Setter Method
        
        Signature ``PatchColor`` 
        
        :param patchColor: 
        :type patchColor: Id 
        
        .. versionadded:: NX7.5.5
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetPatchColor(self) -> tuple:
        """
        Get the defined color of patch surfaces. 
        
        Signature ``GetPatchColor()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (redValue, greenValue, blueValue). redValue is a float.   red value between 0 and 1 greenValue is a float.   green value between 0 and 1 blueValue is a float.   blue value between 0 and 1 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`Tooling.AssignPatchBuilder.PatchColor` instead.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetPatchColor(self) -> None:
        """Returns or sets  the patch surface color."""
        ...
    
    @typing.overload
    def SetPatchColor(self, patchColor: NXOpen.NXColor) -> None:
        """
        Getter Method
        
        Signature ``PatchColor`` 
        
        :param patchColor: 
        :type patchColor: Id 
        
        .. versionadded:: NX7.5.5
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetPatchColor(self, patchColor: NXOpen.NXColor) -> None:
        """
        Setter Method
        
        Signature ``PatchColor`` 
        
        :param patchColor: 
        :type patchColor: Id 
        
        .. versionadded:: NX7.5.5
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetPatchColor(self, redValue: float, greenValue: float, blueValue: float) -> None:
        """
        Set the defined color of patch surfaces. 
        
        Signature ``SetPatchColor(redValue, greenValue, blueValue)`` 
        
        :param redValue:  red value between 0 and 1  
        :type redValue: float 
        :param greenValue:  green value between 0 and 1  
        :type greenValue: float 
        :param blueValue:  blue value between 0 and 1  
        :type blueValue: float 
        
        .. versionadded:: NX7.5.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`Tooling.AssignPatchBuilder.PatchColor` instead.
        
        License requirements: None.
        """
        ...
    
    
    def AddSelectFace(self, addFace: NXOpen.Body) -> None:
        """
        Add selected face to select list.  
        
        Signature ``AddSelectFace(addFace)`` 
        
        :param addFace:  face to add to user selected face list  
        :type addFace: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def InitOnEnter(self) -> None:
        """
        Get initial patched and parting faces to do delete surface function.  
        
        Signature ``InitOnEnter()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateInitialCandidates(self) -> None:
        """
        Update initial candidates after changing sheet type.  
        
        Signature ``UpdateInitialCandidates()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def PrepareAllRemovingSheets(self, sheets: 'list[NXOpen.Body]') -> None:
        """
        Get all the related sheets in one feature set.  
        
        Signature ``PrepareAllRemovingSheets(sheets)`` 
        
        :param sheets:  The sheets to find their related originals  
        :type sheets: list of :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearAddingCandidates(self) -> None:
        """
        Clear the m_addingCandidates list.  
        
        Signature ``ClearAddingCandidates()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    ConvertType: AssignPatchBuilderConvertTypeOption = ...
    """
    Returns or sets  the option to convert to have copies or no copies for all selected sheets.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssignPatchBuilderConvertTypeOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertType`` 
    
    :param convertType: 
    :type convertType: :py:class:`NXOpen.Tooling.AssignPatchBuilderConvertTypeOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    KeepSheet: bool = ...
    """
    Returns or sets  the flag indicating whether to Keep the sheet body or just delete it when deleting a patch surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSheet`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSheet`` 
    
    :param keepSheet: 
    :type keepSheet: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PartingColor: NXOpen.NXColor = ...
    """
    Returns or sets  the parting surface color 
    
    <hr>
    
    Getter Method
    
    Signature ``PartingColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartingColor`` 
    
    :param partingColor: 
    :type partingColor: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PatchColor: NXOpen.NXColor = ...
    """
    Returns or sets  the patch surface color.  
    
    <hr>
    
    Getter Method
    
    Signature ``PatchColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.5
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PatchColor`` 
    
    :param patchColor: 
    :type patchColor: Id 
    
    .. versionadded:: NX7.5.5
    
    License requirements: None.
    """
    PatchSurfaces: NXOpen.SelectBodyList = ...
    """
    Returns  the selected surfaces added as patch surfaces or deleted from patch surfaces.  
    
    <hr>
    
    Getter Method
    
    Signature ``PatchSurfaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: AssignPatchBuilderTypes = ...
    """
    Returns or sets  the type for editing patch or parting 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AssignPatchBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.AssignPatchBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: AssignPatchBuilder = ...  # unknown typename


class DieEngDefineProductOrientationBuilderOptimalMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngDefineProductOrientationBuilderOptimalMethod():
    """
    the optimal method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MinimizeBackdraft", " - "
       "MinimizeDrawDepth", " - "
       "NormaltoFace", " - "
       "AxisofHole", " - "
       "ThreePoints", " - "
    """
    MinimizeBackdraft = 0  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
    MinimizeDrawDepth = 1  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
    NormaltoFace = 2  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
    AxisofHole = 3  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
    ThreePoints = 4  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngDefineProductOrientationBuilderFacetQualityOption():
    """
    the facet quality option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Coarse", " - "
       "Normal", " - "
       "Fine", " - "
       "ExtraFine", " - "
       "UltraFine", " - "
    """
    Coarse = 0  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
    Normal = 1  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
    Fine = 2  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
    ExtraFine = 3  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
    UltraFine = 4  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngDefineProductOrientationBuilderViewDraftOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngDefineProductOrientationBuilderViewDraftOptions():
    """
    view draft options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "ComputeTrimAngles", " - "
       "ComputeWallAngles", " - "
    """
    NotSet = 0  # DieEngDefineProductOrientationBuilderViewDraftOptionsMemberType
    ComputeTrimAngles = 1  # DieEngDefineProductOrientationBuilderViewDraftOptionsMemberType
    ComputeWallAngles = 2  # DieEngDefineProductOrientationBuilderViewDraftOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngDefineProductOrientationBuilder(NXOpen.Builder):
    """
    Die Engineer define product orientation builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieEngDefineProductOrientationBuilder`
    
    Default values.
    
    =======================  ==================
    Property                 Value
    =======================  ==================
    AngleIncrement           0 
    -----------------------  ------------------
    AngleValue               0 
    -----------------------  ------------------
    AngleValueOptimal        0 
    -----------------------  ------------------
    ChooseOptimalMethod      MinimizeBackdraft 
    -----------------------  ------------------
    DoublePassTranslucency   0 
    -----------------------  ------------------
    DraftAngleScale          0 
    -----------------------  ------------------
    FacetQualityOptions      Coarse 
    -----------------------  ------------------
    FailureShowIsocline      0 
    -----------------------  ------------------
    FailureValue             75 
    -----------------------  ------------------
    LimitShading             0 
    -----------------------  ------------------
    TrimWallAngleScale       0 
    -----------------------  ------------------
    VisualizeDepth           0 
    -----------------------  ------------------
    VisualizeDraft           0 
    -----------------------  ------------------
    VisualizeDraftOptions    None 
    -----------------------  ------------------
    WarningShowIsocline      0 
    -----------------------  ------------------
    WarningValue             50 
    =======================  ==================
    
    .. versionadded:: NX11.0.0
    """
    
    class OptimalMethod():
        """
        the optimal method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MinimizeBackdraft", " - "
           "MinimizeDrawDepth", " - "
           "NormaltoFace", " - "
           "AxisofHole", " - "
           "ThreePoints", " - "
        """
        MinimizeBackdraft = 0  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
        MinimizeDrawDepth = 1  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
        NormaltoFace = 2  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
        AxisofHole = 3  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
        ThreePoints = 4  # DieEngDefineProductOrientationBuilderOptimalMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FacetQualityOption():
        """
        the facet quality option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Coarse", " - "
           "Normal", " - "
           "Fine", " - "
           "ExtraFine", " - "
           "UltraFine", " - "
        """
        Coarse = 0  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
        Normal = 1  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
        Fine = 2  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
        ExtraFine = 3  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
        UltraFine = 4  # DieEngDefineProductOrientationBuilderFacetQualityOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewDraftOptions():
        """
        view draft options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "ComputeTrimAngles", " - "
           "ComputeWallAngles", " - "
        """
        NotSet = 0  # DieEngDefineProductOrientationBuilderViewDraftOptionsMemberType
        ComputeTrimAngles = 1  # DieEngDefineProductOrientationBuilderViewDraftOptionsMemberType
        ComputeWallAngles = 2  # DieEngDefineProductOrientationBuilderViewDraftOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetReason(self) -> 'list[str]':
        """
        Returns the reason  
        
        Signature ``GetReason()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetReason(self, reason: 'list[str]') -> None:
        """
        Sets the reason 
        
        Signature ``SetReason(reason)`` 
        
        :param reason: 
        :type reason: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def ButtonNew(self) -> None:
        """
        The callback function of button new 
        
        Signature ``ButtonNew()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def ButtonCut(self) -> None:
        """
        The callback function of button cut 
        
        Signature ``ButtonCut()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def ButtonCopy(self) -> None:
        """
        The callback function of button copy 
        
        Signature ``ButtonCopy()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def ButtonPaste(self) -> None:
        """
        The callback function of button paste 
        
        Signature ``ButtonPaste()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def ButtonCopyTip(self) -> None:
        """
        The callback function of button copy tip 
        
        Signature ``ButtonCopyTip()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def ButtonView(self) -> None:
        """
        The callback function of button view 
        
        Signature ``ButtonView()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def ButtonApplyOptimal(self) -> None:
        """
        The callback function of button apply optimal 
        
        Signature ``ButtonApplyOptimal()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AngleAbout: NXOpen.Direction = ...
    """
    Returns or sets  the angle about 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleAbout`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleAbout`` 
    
    :param angleAbout: 
    :type angleAbout: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    AngleIncrement: float = ...
    """
    Returns or sets  the angle increment 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleIncrement`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleIncrement`` 
    
    :param angleIncrement: 
    :type angleIncrement: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    AngleValue: float = ...
    """
    Returns or sets  the angle value 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleValue`` 
    
    :param angleValue: 
    :type angleValue: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    AngleValueOptimal: float = ...
    """
    Returns or sets  the angle value optimal 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleValueOptimal`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleValueOptimal`` 
    
    :param angleValueOptimal: 
    :type angleValueOptimal: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ChooseOptimalMethod: DieEngDefineProductOrientationBuilderOptimalMethod = ...
    """
    Returns or sets  the choose optimal method 
    
    <hr>
    
    Getter Method
    
    Signature ``ChooseOptimalMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieEngDefineProductOrientationBuilderOptimalMethod` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ChooseOptimalMethod`` 
    
    :param chooseOptimalMethod: 
    :type chooseOptimalMethod: :py:class:`NXOpen.Tooling.DieEngDefineProductOrientationBuilderOptimalMethod` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ColorDepthPass: NXOpen.NXColor = ...
    """
    Returns or sets  the color depth pass 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorDepthPass`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ColorDepthPass`` 
    
    :param colorDepthPass: 
    :type colorDepthPass: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ColorDraftAngleFailure: NXOpen.NXColor = ...
    """
    Returns or sets  the color draft angle failure 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorDraftAngleFailure`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ColorDraftAngleFailure`` 
    
    :param colorDraftAngleFailure: 
    :type colorDraftAngleFailure: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ColorDraftAnglePass: NXOpen.NXColor = ...
    """
    Returns or sets  the color draft angle pass 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorDraftAnglePass`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ColorDraftAnglePass`` 
    
    :param colorDraftAnglePass: 
    :type colorDraftAnglePass: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ColorDraftAngleWarning: NXOpen.NXColor = ...
    """
    Returns or sets  the color draft angle warning 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorDraftAngleWarning`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ColorDraftAngleWarning`` 
    
    :param colorDraftAngleWarning: 
    :type colorDraftAngleWarning: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ColorFailure: NXOpen.NXColor = ...
    """
    Returns or sets  the color failure 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorFailure`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ColorFailure`` 
    
    :param colorFailure: 
    :type colorFailure: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ColorWarning: NXOpen.NXColor = ...
    """
    Returns or sets  the color warning 
    
    <hr>
    
    Getter Method
    
    Signature ``ColorWarning`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ColorWarning`` 
    
    :param colorWarning: 
    :type colorWarning: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DoublePassTranslucency: float = ...
    """
    Returns or sets  the double pass translucency 
    
    <hr>
    
    Getter Method
    
    Signature ``DoublePassTranslucency`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DoublePassTranslucency`` 
    
    :param doublePassTranslucency: 
    :type doublePassTranslucency: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    DraftAngleScale: float = ...
    """
    Returns or sets  the draft angle scale 
    
    <hr>
    
    Getter Method
    
    Signature ``DraftAngleScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DraftAngleScale`` 
    
    :param draftAngleScale: 
    :type draftAngleScale: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FacetQualityOptions: DieEngDefineProductOrientationBuilderFacetQualityOption = ...
    """
    Returns or sets  the facet quality options 
    
    <hr>
    
    Getter Method
    
    Signature ``FacetQualityOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieEngDefineProductOrientationBuilderFacetQualityOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FacetQualityOptions`` 
    
    :param facetQualityOptions: 
    :type facetQualityOptions: :py:class:`NXOpen.Tooling.DieEngDefineProductOrientationBuilderFacetQualityOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FailureShowIsocline: bool = ...
    """
    Returns or sets  the failure show isocline 
    
    <hr>
    
    Getter Method
    
    Signature ``FailureShowIsocline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FailureShowIsocline`` 
    
    :param failureShowIsocline: 
    :type failureShowIsocline: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FailureValue: float = ...
    """
    Returns or sets  the failure value 
    
    <hr>
    
    Getter Method
    
    Signature ``FailureValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FailureValue`` 
    
    :param failureValue: 
    :type failureValue: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FromPoint: NXOpen.Point = ...
    """
    Returns or sets  the from point 
    
    <hr>
    
    Getter Method
    
    Signature ``FromPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FromPoint`` 
    
    :param fromPoint: 
    :type fromPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FromVector: NXOpen.Direction = ...
    """
    Returns or sets  the from vector 
    
    <hr>
    
    Getter Method
    
    Signature ``FromVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FromVector`` 
    
    :param fromVector: 
    :type fromVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    LimitShading: bool = ...
    """
    Returns or sets  the limit shading 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitShading`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``LimitShading`` 
    
    :param limitShading: 
    :type limitShading: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    NameCSYS: str = ...
    """
    Returns or sets  the name csys 
    
    <hr>
    
    Getter Method
    
    Signature ``NameCSYS`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``NameCSYS`` 
    
    :param nameCSYS: 
    :type nameCSYS: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    OptimalHoleAxis: NXOpen.ScCollector = ...
    """
    Returns  the optimal hole axis 
    
    <hr>
    
    Getter Method
    
    Signature ``OptimalHoleAxis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    OptimalPoint1: NXOpen.Point = ...
    """
    Returns or sets  the optimal point1 
    
    <hr>
    
    Getter Method
    
    Signature ``OptimalPoint1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``OptimalPoint1`` 
    
    :param optimalPoint1: 
    :type optimalPoint1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    OptimalPoint2: NXOpen.Point = ...
    """
    Returns or sets  the optimal point2 
    
    <hr>
    
    Getter Method
    
    Signature ``OptimalPoint2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``OptimalPoint2`` 
    
    :param optimalPoint2: 
    :type optimalPoint2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    OptimalPoint3: NXOpen.Point = ...
    """
    Returns or sets  the optimal point3 
    
    <hr>
    
    Getter Method
    
    Signature ``OptimalPoint3`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``OptimalPoint3`` 
    
    :param optimalPoint3: 
    :type optimalPoint3: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PointInRegion: NXOpen.Point = ...
    """
    Returns or sets  the point in region 
    
    <hr>
    
    Getter Method
    
    Signature ``PointInRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``PointInRegion`` 
    
    :param pointInRegion: 
    :type pointInRegion: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    PointInRegion1: NXOpen.Point = ...
    """
    Returns or sets  the point in region1 
    
    <hr>
    
    Getter Method
    
    Signature ``PointInRegion1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``PointInRegion1`` 
    
    :param pointInRegion1: 
    :type pointInRegion1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ProductCSYS: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the product csys 
    
    <hr>
    
    Getter Method
    
    Signature ``ProductCSYS`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ProductCSYS`` 
    
    :param productCSYS: 
    :type productCSYS: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ReverseNormal: bool = ...
    """
    Returns or sets  the reverse normal 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseNormal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseNormal`` 
    
    :param reverseNormal: 
    :type reverseNormal: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ReverseSheetNormal: bool = ...
    """
    Returns or sets  the reverse sheet normal 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseSheetNormal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseSheetNormal`` 
    
    :param reverseSheetNormal: 
    :type reverseSheetNormal: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ToPoint: NXOpen.Point = ...
    """
    Returns or sets  the to point 
    
    <hr>
    
    Getter Method
    
    Signature ``ToPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ToPoint`` 
    
    :param toPoint: 
    :type toPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ToVector: NXOpen.Direction = ...
    """
    Returns or sets  the to vector 
    
    <hr>
    
    Getter Method
    
    Signature ``ToVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ToVector`` 
    
    :param toVector: 
    :type toVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimProfile: NXOpen.ScCollector = ...
    """
    Returns  the trim profile 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimWallAngleScale: float = ...
    """
    Returns or sets  the trim wall angle scale 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimWallAngleScale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimWallAngleScale`` 
    
    :param trimWallAngleScale: 
    :type trimWallAngleScale: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ViewRegionBounds: NXOpen.ScCollector = ...
    """
    Returns  the view region bounds 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewRegionBounds`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    VisualizeDepth: bool = ...
    """
    Returns or sets  the visualize depth 
    
    <hr>
    
    Getter Method
    
    Signature ``VisualizeDepth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``VisualizeDepth`` 
    
    :param visualizeDepth: 
    :type visualizeDepth: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    VisualizeDraft: bool = ...
    """
    Returns or sets  the visualize draft 
    
    <hr>
    
    Getter Method
    
    Signature ``VisualizeDraft`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``VisualizeDraft`` 
    
    :param visualizeDraft: 
    :type visualizeDraft: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    VisualizeDraftOptions: DieEngDefineProductOrientationBuilderViewDraftOptions = ...
    """
    Returns or sets  the visualize draft options 
    
    <hr>
    
    Getter Method
    
    Signature ``VisualizeDraftOptions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieEngDefineProductOrientationBuilderViewDraftOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``VisualizeDraftOptions`` 
    
    :param visualizeDraftOptions: 
    :type visualizeDraftOptions: :py:class:`NXOpen.Tooling.DieEngDefineProductOrientationBuilderViewDraftOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    WarningShowIsocline: bool = ...
    """
    Returns or sets  the warning show isocline 
    
    <hr>
    
    Getter Method
    
    Signature ``WarningShowIsocline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``WarningShowIsocline`` 
    
    :param warningShowIsocline: 
    :type warningShowIsocline: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    WarningValue: float = ...
    """
    Returns or sets  the warning value 
    
    <hr>
    
    Getter Method
    
    Signature ``WarningValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``WarningValue`` 
    
    :param warningValue: 
    :type warningValue: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: DieEngDefineProductOrientationBuilder = ...  # unknown typename


class WorkpieceBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WorkpieceBuilderTypes():
    """
    the unit type includes product and combined work piece type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ProductWorkPiece", "The old assembly of Mold wizard"
       "CombinedWorkPiece", "The new assembly of Mold wizard"
    """
    ProductWorkPiece = 0  # WorkpieceBuilderTypesMemberType
    CombinedWorkPiece = 1  # WorkpieceBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WorkpieceBuilderWorkPieceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WorkpieceBuilderWorkPieceType():
    """
    the unit type includes the work piece create method
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UserDefinedBlock", "The method defines the block by user"
       "CavityCore", "The method adds the standards of cavity and core"
       "CavityOnly", "The method adds the standards of cavity"
       "CoreOnly", "The method adds the standards of cavity"
    """
    UserDefinedBlock = 0  # WorkpieceBuilderWorkPieceTypeMemberType
    CavityCore = 1  # WorkpieceBuilderWorkPieceTypeMemberType
    CavityOnly = 2  # WorkpieceBuilderWorkPieceTypeMemberType
    CoreOnly = 3  # WorkpieceBuilderWorkPieceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WorkpieceBuilderMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WorkpieceBuilderMethodType():
    """
    the unit type includes the work piece define method
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DistanceAllowance", "Create block by define the distance allowance"
       "ReferencePoint", "Create block by define the reference point"
       "Sketch", "Create block by extrude the sketch"
       "KfBox", "Create block by define the kf box"
    """
    DistanceAllowance = 0  # WorkpieceBuilderMethodTypeMemberType
    ReferencePoint = 1  # WorkpieceBuilderMethodTypeMemberType
    Sketch = 2  # WorkpieceBuilderMethodTypeMemberType
    KfBox = 3  # WorkpieceBuilderMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WorkpieceBuilder(NXOpen.Builder):
    """
    Mold Wizard work piece builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.WorkpieceCollection.CreateWorkpieceBuilder`
    
    Default values.
    
    ====================  ==================
    Property              Value
    ====================  ==================
    BlockType             UserDefinedBlock 
    --------------------  ------------------
    GenerateMethod        DistanceAllowance 
    --------------------  ------------------
    RoundDimensionValue   0 
    --------------------  ------------------
    RoundPrecision        0 
    --------------------  ------------------
    ShowBoundbox          0 
    ====================  ==================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        the unit type includes product and combined work piece type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ProductWorkPiece", "The old assembly of Mold wizard"
           "CombinedWorkPiece", "The new assembly of Mold wizard"
        """
        ProductWorkPiece = 0  # WorkpieceBuilderTypesMemberType
        CombinedWorkPiece = 1  # WorkpieceBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WorkPieceType():
        """
        the unit type includes the work piece create method
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UserDefinedBlock", "The method defines the block by user"
           "CavityCore", "The method adds the standards of cavity and core"
           "CavityOnly", "The method adds the standards of cavity"
           "CoreOnly", "The method adds the standards of cavity"
        """
        UserDefinedBlock = 0  # WorkpieceBuilderWorkPieceTypeMemberType
        CavityCore = 1  # WorkpieceBuilderWorkPieceTypeMemberType
        CavityOnly = 2  # WorkpieceBuilderWorkPieceTypeMemberType
        CoreOnly = 3  # WorkpieceBuilderWorkPieceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MethodType():
        """
        the unit type includes the work piece define method
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DistanceAllowance", "Create block by define the distance allowance"
           "ReferencePoint", "Create block by define the reference point"
           "Sketch", "Create block by extrude the sketch"
           "KfBox", "Create block by define the kf box"
        """
        DistanceAllowance = 0  # WorkpieceBuilderMethodTypeMemberType
        ReferencePoint = 1  # WorkpieceBuilderMethodTypeMemberType
        Sketch = 2  # WorkpieceBuilderMethodTypeMemberType
        KfBox = 3  # WorkpieceBuilderMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ResetSizes(self) -> None:
        """
        Resets workpiece sizes 
        
        Signature ``ResetSizes()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    BlockType: WorkpieceBuilderWorkPieceType = ...
    """
    Returns or sets  the work piece shape type access functions 
    
    <hr>
    
    Getter Method
    
    Signature ``BlockType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WorkpieceBuilderWorkPieceType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlockType`` 
    
    :param blockType: 
    :type blockType: :py:class:`NXOpen.Tooling.WorkpieceBuilderWorkPieceType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    GenerateMethod: WorkpieceBuilderMethodType = ...
    """
    Returns or sets  the generate method access functions 
    
    <hr>
    
    Getter Method
    
    Signature ``GenerateMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WorkpieceBuilderMethodType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GenerateMethod`` 
    
    :param generateMethod: 
    :type generateMethod: :py:class:`NXOpen.Tooling.WorkpieceBuilderMethodType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReferencePoint: NXOpen.Point = ...
    """
    Returns or sets  the reference point to generate the work piece 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePoint`` 
    
    :param referencePoint: 
    :type referencePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RoundDimensionValue: bool = ...
    """
    Returns or sets  the dimension round value 
    
    <hr>
    
    Getter Method
    
    Signature ``RoundDimensionValue`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoundDimensionValue`` 
    
    :param roundDimensionValue: 
    :type roundDimensionValue: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RoundPrecision: float = ...
    """
    Returns or sets  the round precision 
    
    <hr>
    
    Getter Method
    
    Signature ``RoundPrecision`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoundPrecision`` 
    
    :param roundPrecision: 
    :type roundPrecision: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectWorkPieceBody: NXOpen.SelectBodyList = ...
    """
    Returns  the work piece body selection 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectWorkPieceBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ShowBoundbox: bool = ...
    """
    Returns or sets  the setting to show the bounding box of the product or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowBoundbox`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowBoundbox`` 
    
    :param showBoundbox: 
    :type showBoundbox: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: WorkpieceBuilderTypes = ...
    """
    Returns or sets  the selection type to select the work piece 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WorkpieceBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.WorkpieceBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: WorkpieceBuilder = ...  # unknown typename


class ProfileSplitBuilder(NXOpen.Builder):
    """
    The ProfileSplit builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProfileSplitCollection.CreateProfileSplitBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def StTraverse(self) -> None:
        """
        Start traverse function to get edge loop 
        
        Signature ``StTraverse()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    DefAssociative: bool = ...
    """
    Returns or sets  the associative flag 
    
    <hr>
    
    Getter Method
    
    Signature ``DefAssociative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefAssociative`` 
    
    :param defassociative: 
    :type defassociative: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DefVector: NXOpen.Direction = ...
    """
    Returns or sets  the extruded vector to return 
    
    <hr>
    
    Getter Method
    
    Signature ``DefVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefVector`` 
    
    :param defVector: 
    :type defVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ExtDist1: NXOpen.Expression = ...
    """
    Returns  the extruded start distance 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtDist1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ExtDist2: NXOpen.Expression = ...
    """
    Returns  the extruded end distance 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtDist2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectBody: NXOpen.SelectBodyList = ...
    """
    Returns  the selected body to be splitted 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectProfile: NXOpen.Section = ...
    """
    Returns  the selected profile 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ProfileSplitBuilder = ...  # unknown typename


class SelectReuseLibraryListBuilder(NXOpen.TaggedObject):
    """
    Select a list of objects from the reuse library   
    
    .. versionadded:: NX9.0.0
    """
    
    def CreateListItem(self) -> SelectReuseLibraryListItemBuilder:
        """
        Generate a list item.  
        
        Signature ``CreateListItem()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    ItemName: str = ...
    """
    Returns or sets  the item name from the reuse library 
    
    <hr>
    
    Getter Method
    
    Signature ``ItemName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemName`` 
    
    :param itemName: 
    :type itemName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReuseItemList: SelectReuseLibraryListItemBuilderList = ...
    """
    Returns  the select reuse item list.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReuseItemList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilderList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: SelectReuseLibraryListBuilder = ...  # unknown typename


class EWMultiPositionBuilder(NXOpen.Builder):
    """
    Represents the multiple position builder which is used to get transformed electrode heads together.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.EWMultiPositionCollection.CreateEwmultiPositionBuilder`
    
    .. versionadded:: NX7.5.0
    """
    Head: NXOpen.SelectBodyList = ...
    """
    Returns  the head to match to another possible head.  
    
    <hr>
    
    Getter Method
    
    Signature ``Head`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HeadSet: NXOpen.BodyList = ...
    """
    Returns  the head sets with specified body and transformation data.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeadSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.BodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: EWMultiPositionBuilder = ...  # unknown typename


class ElectrodeBlankBuilderBlankShapeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ElectrodeBlankBuilderBlankShape():
    """
    Represents the electrode blank shape option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Block", "the shape of the blank is block"
       "Cylinder", "the shape of the blank is cylinder"
       "Undercut", "the shape of the blank is block to spark undercut area"
    """
    Block = 0  # ElectrodeBlankBuilderBlankShapeMemberType
    Cylinder = 1  # ElectrodeBlankBuilderBlankShapeMemberType
    Undercut = 2  # ElectrodeBlankBuilderBlankShapeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ElectrodeBlankBuilderBlankMaterialMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ElectrodeBlankBuilderBlankMaterial():
    """
    Represents the blank material option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Copper", "the material of the blank is copper"
       "Graphite", "the material of the blank is graphite"
    """
    Copper = 0  # ElectrodeBlankBuilderBlankMaterialMemberType
    Graphite = 1  # ElectrodeBlankBuilderBlankMaterialMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ElectrodeBlankBuilderJointObjectMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ElectrodeBlankBuilderJointObject():
    """
    Represents the transition type between head bodies and the blank. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Extrude", "extrude body from joint face to blank"
       "Offset", "create offset feature from joint face to blank"
       "NotSet", "nothing to do"
    """
    Extrude = 0  # ElectrodeBlankBuilderJointObjectMemberType
    Offset = 1  # ElectrodeBlankBuilderJointObjectMemberType
    NotSet = 2  # ElectrodeBlankBuilderJointObjectMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ElectrodeBlankBuilder(NXOpen.Builder):
    """
    Design electrode blank builder to create an electrode blank for the selected body.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ElectrodeDesignCollection.CreateBlankBuilder`
    
    Default values.
    
    ========================  ========================================
    Property                  Value
    ========================  ========================================
    Angle.Value               0 
    ------------------------  ----------------------------------------
    BlendRadius.Value         0 (millimeters part), 0 (inches part) 
    ------------------------  ----------------------------------------
    ExtensionHeight.Value     5 (millimeters part), 0.2 (inches part) 
    ------------------------  ----------------------------------------
    JointMethod               Extrude 
    ------------------------  ----------------------------------------
    KeepSize                  0 
    ------------------------  ----------------------------------------
    KeepZValueInSameMSet      0 
    ------------------------  ----------------------------------------
    Material                  Copper 
    ------------------------  ----------------------------------------
    ReferencePointPrecision   1 
    ------------------------  ----------------------------------------
    Rename                    0 
    ------------------------  ----------------------------------------
    RotationAngle.Value       0 
    ------------------------  ----------------------------------------
    RoundCrossLinesPosition   0 
    ------------------------  ----------------------------------------
    Shape                     Block 
    ------------------------  ----------------------------------------
    UniteBodies               1 
    ------------------------  ----------------------------------------
    XRefValue.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  ----------------------------------------
    YRefValue.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  ----------------------------------------
    ZRefValue.Value           0 (millimeters part), 0 (inches part) 
    ========================  ========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class BlankShape():
        """
        Represents the electrode blank shape option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Block", "the shape of the blank is block"
           "Cylinder", "the shape of the blank is cylinder"
           "Undercut", "the shape of the blank is block to spark undercut area"
        """
        Block = 0  # ElectrodeBlankBuilderBlankShapeMemberType
        Cylinder = 1  # ElectrodeBlankBuilderBlankShapeMemberType
        Undercut = 2  # ElectrodeBlankBuilderBlankShapeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BlankMaterial():
        """
        Represents the blank material option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Copper", "the material of the blank is copper"
           "Graphite", "the material of the blank is graphite"
        """
        Copper = 0  # ElectrodeBlankBuilderBlankMaterialMemberType
        Graphite = 1  # ElectrodeBlankBuilderBlankMaterialMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class JointObject():
        """
        Represents the transition type between head bodies and the blank. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Extrude", "extrude body from joint face to blank"
           "Offset", "create offset feature from joint face to blank"
           "NotSet", "nothing to do"
        """
        Extrude = 0  # ElectrodeBlankBuilderJointObjectMemberType
        Offset = 1  # ElectrodeBlankBuilderJointObjectMemberType
        NotSet = 2  # ElectrodeBlankBuilderJointObjectMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdateBlankData(self, registerPath: str, dataPath: str, modelPath: str, bitmapPath: str, material: str, paraNames: 'list[str]', paraValues: 'list[str]') -> None:
        """
        Update the data of the blank.  
        
        Signature ``UpdateBlankData(registerPath, dataPath, modelPath, bitmapPath, material, paraNames, paraValues)`` 
        
        :param registerPath:  register path of the blank part  
        :type registerPath: str 
        :param dataPath:  data path of the blank part  
        :type dataPath: str 
        :param modelPath:  model path of the blank part  
        :type modelPath: str 
        :param bitmapPath:  bitmap path of the blank part  
        :type bitmapPath: str 
        :param material:  material of the blank part  
        :type material: str 
        :param paraNames:  parameter name the blank part  
        :type paraNames: list of str 
        :param paraValues:  parameter value the blank part  
        :type paraValues: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CreateCloneObject(self, applicationType: int, installationMethod: int, partToBeInstalled: str, folderToSaveParts: str, projectName: str) -> CloneObject:
        """
        Creates clone object.  
        
        Signature ``CreateCloneObject(applicationType, installationMethod, partToBeInstalled, folderToSaveParts, projectName)`` 
        
        :param applicationType: 
        :type applicationType: int 
        :param installationMethod: 
        :type installationMethod: int 
        :param partToBeInstalled: 
        :type partToBeInstalled: str 
        :param folderToSaveParts: 
        :type folderToSaveParts: str 
        :param projectName: 
        :type projectName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateDisplayName(self, displayName: str) -> None:
        """
        Update display name of the blank.  
        
        Signature ``UpdateDisplayName(displayName)`` 
        
        :param displayName:  display name of the blank part  
        :type displayName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the angle of the joint object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Blank: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the blank to be edited.  
    
    <hr>
    
    Getter Method
    
    Signature ``Blank`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BlankMatrix: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the blank matrix.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankMatrix`` 
    
    :returns:  blank matrix  
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankMatrix`` 
    
    :param matrix:  blank matrix  
    :type matrix: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    BlendRadius: NXOpen.Expression = ...
    """
    Returns  the default blend radius of blended edges.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlendRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CrossLinesRatio: float = ...
    """
    Returns or sets  the ratio of cross center lines.  
    
    <hr>
    
    Getter Method
    
    Signature ``CrossLinesRatio`` 
    
    :returns:  ratio  
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrossLinesRatio`` 
    
    :param ratio:  ratio  
    :type ratio: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    ExtensionHeight: NXOpen.Expression = ...
    """
    Returns  the default extension height between head bodies and the blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HeadBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the head bodies to be used to create a blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeadBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    JointFace: NXOpen.SelectFace = ...
    """
    Returns  the face to create a joint object between the blank and head bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``JointFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    JointMethod: ElectrodeBlankBuilderJointObject = ...
    """
    Returns or sets  the joint object type.  
    
    <hr>
    
    Getter Method
    
    Signature ``JointMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ElectrodeBlankBuilderJointObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JointMethod`` 
    
    :param jointMethod: 
    :type jointMethod: :py:class:`NXOpen.Tooling.ElectrodeBlankBuilderJointObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    KeepSize: bool = ...
    """
    Returns or sets  the option to keep size of the blank or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepSize`` 
    
    :param keepSize: 
    :type keepSize: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    KeepZValueInSameMSet: bool = ...
    """
    Returns or sets  the option to specify whether to keep the Z values of all blanks in the current machine set CSYS.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepZValueInSameMSet`` 
    
    :returns:  keep z value in machine set or not  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepZValueInSameMSet`` 
    
    :param keepValue:  keep z value in machine set or not  
    :type keepValue: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Material: ElectrodeBlankBuilderBlankMaterial = ...
    """
    Returns or sets  the material of the blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``Material`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ElectrodeBlankBuilderBlankMaterial` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Material`` 
    
    :param material: 
    :type material: :py:class:`NXOpen.Tooling.ElectrodeBlankBuilderBlankMaterial` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    MsetPart: NXOpen.TaggedObject = ...
    """
    Returns or sets  the current machine set under which a blank is added.  
    
    <hr>
    
    Getter Method
    
    Signature ``MsetPart`` 
    
    :returns:  the machine set part  
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MsetPart`` 
    
    :param mset:  the machine set part  
    :type mset: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    MultiPositionBuilder: NXOpen.TaggedObject = ...
    """
    Returns or sets  the multi position builder.  
    
    <hr>
    
    Getter Method
    
    Signature ``MultiPositionBuilder`` 
    
    :returns:  multi position builder tag  
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MultiPositionBuilder`` 
    
    :param builderTag:  multi position builder tag  
    :type builderTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    ReferenceCenter: NXOpen.Point3d = ...
    """
    Returns or sets  the blank reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceCenter`` 
    
    :returns:  blank position  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceCenter`` 
    
    :param point:  blank position  
    :type point: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    ReferencePointPrecision: float = ...
    """
    Returns or sets  the precision of the reference coordinates in the machine set csys.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferencePointPrecision`` 
    
    :returns:  precision value  
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferencePointPrecision`` 
    
    :param precision:  precision value  
    :type precision: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Rename: bool = ...
    """
    Returns or sets  the option to use the part name management dialog box or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    ReusablePartBuilder: NXOpen.TaggedObject = ...
    """
    Returns or sets  the reusable part builder.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReusablePartBuilder`` 
    
    :returns:  reusable part builder tag  
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReusablePartBuilder`` 
    
    :param builderTag:  reusable part builder tag  
    :type builderTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    RotationAngle: NXOpen.Expression = ...
    """
    Returns  the rotation angle of blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotationAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    RoundCrossLinesPosition: bool = ...
    """
    Returns or sets  the option to round the position of cross lines or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``RoundCrossLinesPosition`` 
    
    :returns:  round cross lines or not  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoundCrossLinesPosition`` 
    
    :param round:  round cross lines or not  
    :type round: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Shape: ElectrodeBlankBuilderBlankShape = ...
    """
    Returns or sets  the shape of the blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``Shape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ElectrodeBlankBuilderBlankShape` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Shape`` 
    
    :param shape: 
    :type shape: :py:class:`NXOpen.Tooling.ElectrodeBlankBuilderBlankShape` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    UniteBodies: bool = ...
    """
    Returns or sets  the option to unite head bodies, the extension and the blank or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``UniteBodies`` 
    
    :returns:  unite head, extension and blank together or not  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UniteBodies`` 
    
    :param unite:  unite head, extension and blank together or not  
    :type unite: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    XRefValue: NXOpen.Expression = ...
    """
    Returns  the X value of the blank origin in the current machine set coordinator.  
    
    <hr>
    
    Getter Method
    
    Signature ``XRefValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    YRefValue: NXOpen.Expression = ...
    """
    Returns  the Y value of the blank origin in the current machine set coordinator.  
    
    <hr>
    
    Getter Method
    
    Signature ``YRefValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ZRefValue: NXOpen.Expression = ...
    """
    Returns  the Z value of the blank origin in the current machine set coordinator.  
    
    <hr>
    
    Getter Method
    
    Signature ``ZRefValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: ElectrodeBlankBuilder = ...  # unknown typename


class MWDesignPartingSurfaceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of MWDesignPartingSurface builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> MWDesignPartingSurfaceBuilder:
        """
        Creates a MWDesignPartingSurface builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`MWDesignPartingSurfaceBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.MWDesignPartingSurfaceBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class CornerDesignCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.CornerDesignCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCornerDesignBuilder(self) -> CornerDesignBuilder:
        """
        Creates Corner Design  builder.  
        
        Signature ``CreateCornerDesignBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CornerDesignBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    


class DieEngLineupBuilder(NXOpen.Features.FeatureBuilder):
    """
    Die Engineer lineup management builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieEngLineUpBuilder`
    
    Default values.
    
    =======================  =====
    Property                 Value
    =======================  =====
    ReorientProperties       0 
    -----------------------  -----
    UpdatePressInformation   0 
    =======================  =====
    
    .. versionadded:: NX11.0.0
    """
    
    def ObjectProperties(self) -> None:
        """
        The object properties button call back 
        
        Signature ``ObjectProperties()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def MoreDetails(self) -> None:
        """
        The more details button call back 
        
        Signature ``MoreDetails()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    Product: NXOpen.SelectNXObjectList = ...
    """
    Returns  the lineup product sheet body
    
    <hr>
    
    Getter Method
    
    Signature ``Product`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    ReorientProperties: bool = ...
    """
    Returns or sets  the reorient properties 
    
    <hr>
    
    Getter Method
    
    Signature ``ReorientProperties`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``ReorientProperties`` 
    
    :param reorientProperties: 
    :type reorientProperties: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    UpdatePressInformation: bool = ...
    """
    Returns or sets  the update press information 
    
    <hr>
    
    Getter Method
    
    Signature ``UpdatePressInformation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``UpdatePressInformation`` 
    
    :param updatePressInformation: 
    :type updatePressInformation: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: DieEngLineupBuilder = ...  # unknown typename


class PocketCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.PocketBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePocketBuilder(self) -> PocketBuilder:
        """
        Creates pocket object  
        
        Signature ``CreatePocketBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.PocketBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class MWLayoutCollection(NXOpen.TaggedObjectCollection):
    """
    Creates Mold Wizard layout collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLayoutBuilder(self) -> LayoutBuilder:
        """
        Creates a Layout builder  
        
        Signature ``CreateLayoutBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.LayoutBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateLayoutRepositionBuilder(self) -> LayoutRepositionBuilder:
        """
        Creates a layout reposition builder  
        
        Signature ``CreateLayoutRepositionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.LayoutRepositionBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class ObjectAttributeManagementBuilderShowTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ObjectAttributeManagementBuilderShowType():
    """
    show attributes of selected objects or show objects according to attribute 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ShowAttributeOfSelectedObject", " - "
       "ShowObjectAccordingToAttribute", " - "
    """
    ShowAttributeOfSelectedObject = 0  # ObjectAttributeManagementBuilderShowTypeMemberType
    ShowObjectAccordingToAttribute = 1  # ObjectAttributeManagementBuilderShowTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ObjectAttributeManagementBuilderFilterTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ObjectAttributeManagementBuilderFilterType():
    """
    the selection filter type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Part", " - "
       "Component", " - "
       "SolidBody", " - "
       "Face", " - "
    """
    Part = 0  # ObjectAttributeManagementBuilderFilterTypeMemberType
    Component = 1  # ObjectAttributeManagementBuilderFilterTypeMemberType
    SolidBody = 2  # ObjectAttributeManagementBuilderFilterTypeMemberType
    Face = 3  # ObjectAttributeManagementBuilderFilterTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ObjectAttributeManagementBuilderFilterAccordingToAttributeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ObjectAttributeManagementBuilderFilterAccordingToAttributeType():
    """
    the selection filter type according to attribute 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Part", " - "
       "Component", " - "
       "SolidBody", " - "
       "Face", " - "
    """
    Part = 0  # ObjectAttributeManagementBuilderFilterAccordingToAttributeTypeMemberType
    Component = 1  # ObjectAttributeManagementBuilderFilterAccordingToAttributeTypeMemberType
    SolidBody = 2  # ObjectAttributeManagementBuilderFilterAccordingToAttributeTypeMemberType
    Face = 3  # ObjectAttributeManagementBuilderFilterAccordingToAttributeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ObjectAttributeManagementBuilderShowComponentsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ObjectAttributeManagementBuilderShowComponentsType():
    """
    the show type according to attribute 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ShowAllComponents", " - "
       "OnlyShowComponentsWithAttribute", " - "
       "HideComponentsWithAttribute", " - "
    """
    ShowAllComponents = 0  # ObjectAttributeManagementBuilderShowComponentsTypeMemberType
    OnlyShowComponentsWithAttribute = 1  # ObjectAttributeManagementBuilderShowComponentsTypeMemberType
    HideComponentsWithAttribute = 2  # ObjectAttributeManagementBuilderShowComponentsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ObjectAttributeManagementBuilder(NXOpen.Builder):
    """
    Tooling  builder to assign and edit attributes of objects   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ObjectAttributeManagementCollection.CreateObjectAttributeManagementBuilder`
    
    Default values.
    
    ====================================  ===============================
    Property                              Value
    ====================================  ===============================
    AttributeOfRootPart                   0 
    ------------------------------------  -------------------------------
    SelectionFilter                       Component 
    ------------------------------------  -------------------------------
    SelectionFilterAccordingToAttribute   Component 
    ------------------------------------  -------------------------------
    ShowTypeEnum                          ShowAllComponents 
    ------------------------------------  -------------------------------
    ToggleListDependents                  0 
    ------------------------------------  -------------------------------
    Type                                  ShowObjectAccordingToAttribute 
    ====================================  ===============================
    
    .. versionadded:: NX9.0.0
    """
    
    class ShowType():
        """
        show attributes of selected objects or show objects according to attribute 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ShowAttributeOfSelectedObject", " - "
           "ShowObjectAccordingToAttribute", " - "
        """
        ShowAttributeOfSelectedObject = 0  # ObjectAttributeManagementBuilderShowTypeMemberType
        ShowObjectAccordingToAttribute = 1  # ObjectAttributeManagementBuilderShowTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FilterType():
        """
        the selection filter type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Part", " - "
           "Component", " - "
           "SolidBody", " - "
           "Face", " - "
        """
        Part = 0  # ObjectAttributeManagementBuilderFilterTypeMemberType
        Component = 1  # ObjectAttributeManagementBuilderFilterTypeMemberType
        SolidBody = 2  # ObjectAttributeManagementBuilderFilterTypeMemberType
        Face = 3  # ObjectAttributeManagementBuilderFilterTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FilterAccordingToAttributeType():
        """
        the selection filter type according to attribute 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Part", " - "
           "Component", " - "
           "SolidBody", " - "
           "Face", " - "
        """
        Part = 0  # ObjectAttributeManagementBuilderFilterAccordingToAttributeTypeMemberType
        Component = 1  # ObjectAttributeManagementBuilderFilterAccordingToAttributeTypeMemberType
        SolidBody = 2  # ObjectAttributeManagementBuilderFilterAccordingToAttributeTypeMemberType
        Face = 3  # ObjectAttributeManagementBuilderFilterAccordingToAttributeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShowComponentsType():
        """
        the show type according to attribute 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ShowAllComponents", " - "
           "OnlyShowComponentsWithAttribute", " - "
           "HideComponentsWithAttribute", " - "
        """
        ShowAllComponents = 0  # ObjectAttributeManagementBuilderShowComponentsTypeMemberType
        OnlyShowComponentsWithAttribute = 1  # ObjectAttributeManagementBuilderShowComponentsTypeMemberType
        HideComponentsWithAttribute = 2  # ObjectAttributeManagementBuilderShowComponentsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddFromDataFileAttributeList(self) -> None:
        """
        The action to add selected attributes from attributes spreadsheet 
        
        Signature ``AddFromDataFileAttributeList()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def NewAttribute(self) -> None:
        """
        The action to new an attribute 
        
        Signature ``NewAttribute()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CopyAttribute(self) -> None:
        """
        The action to copy selected attributes 
        
        Signature ``CopyAttribute()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def PasteAttribute(self) -> None:
        """
        The action to paste copied attributes 
        
        Signature ``PasteAttribute()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteAttribute(self) -> None:
        """
        The action to delete selected attributes 
        
        Signature ``DeleteAttribute()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def UndoButton(self) -> None:
        """
        The action to undo last delete 
        
        Signature ``UndoButton()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def EditConfigurationFile(self) -> None:
        """
        Tha action to edit attribute spreadsheet 
        
        Signature ``EditConfigurationFile()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AttributeOfRootPart: bool = ...
    """
    Returns or sets  the option whether to show attributes of root part 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeOfRootPart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeOfRootPart`` 
    
    :param attributeOfRootPart: 
    :type attributeOfRootPart: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    AttributeTitles: str = ...
    """
    Returns or sets  the attribute titles 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeTitles`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeTitles`` 
    
    :param attributeTitles: 
    :type attributeTitles: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    AttributeValues: str = ...
    """
    Returns or sets  the attribute values 
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeValues`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeValues`` 
    
    :param attributeValues: 
    :type attributeValues: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectAttributeSpreadsheet: str = ...
    """
    Returns or sets  the selected attribute spreadsheet 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAttributeSpreadsheet`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectAttributeSpreadsheet`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectBody: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select body 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectBodyAccordingToAttribute: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select body according to attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBodyAccordingToAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectComponent: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected objects 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectComponentAccordingToAttribute: NXOpen.SelectNXObjectList = ...
    """
    Returns  the objects according to attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponentAccordingToAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectFace: NXOpen.ScCollector = ...
    """
    Returns  the select face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectFaceAccordingToAttribute: NXOpen.ScCollector = ...
    """
    Returns  the faces according to attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFaceAccordingToAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectionFilter: ObjectAttributeManagementBuilderFilterType = ...
    """
    Returns or sets  the selection filter 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionFilter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilderFilterType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionFilter`` 
    
    :param selectionFilter: 
    :type selectionFilter: :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilderFilterType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectionFilterAccordingToAttribute: ObjectAttributeManagementBuilderFilterAccordingToAttributeType = ...
    """
    Returns or sets  the selection filter according to attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionFilterAccordingToAttribute`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilderFilterAccordingToAttributeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionFilterAccordingToAttribute`` 
    
    :param selectionFilterAccordingToAttribute: 
    :type selectionFilterAccordingToAttribute: :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilderFilterAccordingToAttributeType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ShowTypeEnum: ObjectAttributeManagementBuilderShowComponentsType = ...
    """
    Returns or sets  the show type enumeration 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowTypeEnum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilderShowComponentsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowTypeEnum`` 
    
    :param showComponentsTypeEnum: 
    :type showComponentsTypeEnum: :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilderShowComponentsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToggleListDependents: bool = ...
    """
    Returns or sets  the option whether to list dependent components 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleListDependents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleListDependents`` 
    
    :param toggleListDependents: 
    :type toggleListDependents: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: ObjectAttributeManagementBuilderShowType = ...
    """
    Returns or sets  the type show objects or attributes 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilderShowType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.ObjectAttributeManagementBuilderShowType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: ObjectAttributeManagementBuilder = ...  # unknown typename


class StripLayoutBuilderFromStationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StripLayoutBuilderFromStationType():
    """
    Specifies the option of From Station for layout
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "One", "the beginning layout station is 1"
       "Two", "the beginning layout station is 2"
       "Three", "the beginning layout station is 3"
    """
    One = 0  # StripLayoutBuilderFromStationTypeMemberType
    Two = 1  # StripLayoutBuilderFromStationTypeMemberType
    Three = 2  # StripLayoutBuilderFromStationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StripLayoutBuilderToStationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StripLayoutBuilderToStationType():
    """
    Specifies the option of To Station for layout
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "One", "the end layout station is 1"
       "Two", "the end layout station is 2"
       "Three", "the end layout station is 3"
    """
    One = 0  # StripLayoutBuilderToStationTypeMemberType
    Two = 1  # StripLayoutBuilderToStationTypeMemberType
    Three = 2  # StripLayoutBuilderToStationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StripLayoutBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.StripLayoutBuilder`
    This class is for Strip Layout Design UI
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.StripLayoutCollection.CreateStripLayoutBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class FromStationType():
        """
        Specifies the option of From Station for layout
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "One", "the beginning layout station is 1"
           "Two", "the beginning layout station is 2"
           "Three", "the beginning layout station is 3"
        """
        One = 0  # StripLayoutBuilderFromStationTypeMemberType
        Two = 1  # StripLayoutBuilderFromStationTypeMemberType
        Three = 2  # StripLayoutBuilderFromStationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ToStationType():
        """
        Specifies the option of To Station for layout
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "One", "the end layout station is 1"
           "Two", "the end layout station is 2"
           "Three", "the end layout station is 3"
        """
        One = 0  # StripLayoutBuilderToStationTypeMemberType
        Two = 1  # StripLayoutBuilderToStationTypeMemberType
        Three = 2  # StripLayoutBuilderToStationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    FromStation: StripLayoutBuilderFromStationType = ...
    """
    Returns or sets  the From Station type on the Layout group of Strip Layout Design dialog
    
    <hr>
    
    Getter Method
    
    Signature ``FromStation`` 
    
    :returns:  Returns the from station value 
    :rtype: :py:class:`NXOpen.Tooling.StripLayoutBuilderFromStationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FromStation`` 
    
    :param fromStation:  Sets the from station value 
    :type fromStation: :py:class:`NXOpen.Tooling.StripLayoutBuilderFromStationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ToStation: StripLayoutBuilderToStationType = ...
    """
    Returns or sets  the To Station type on the Layout group of Strip Layout Design dialog
    
    <hr>
    
    Getter Method
    
    Signature ``ToStation`` 
    
    :returns:  Returns the to station value 
    :rtype: :py:class:`NXOpen.Tooling.StripLayoutBuilderToStationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToStation`` 
    
    :param toStation:  Sets the to station value 
    :type toStation: :py:class:`NXOpen.Tooling.StripLayoutBuilderToStationType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: StripLayoutBuilder = ...  # unknown typename


class BlankLayoutBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlankLayoutBuilderTypes():
    """
    Specifies the option of blank layout type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CreateLayout", "the type of create blank layout"
       "AddBlank", "the type of add multiple blank"
       "CopyBlank", "the type of copy blank"
       "RemoveBlank", "the type of remove blank"
       "SetBasePoint", "the type of set the base point of the blank"
       "FlipBlank", "the type of flip blank"
    """
    CreateLayout = 0  # BlankLayoutBuilderTypesMemberType
    AddBlank = 1  # BlankLayoutBuilderTypesMemberType
    CopyBlank = 2  # BlankLayoutBuilderTypesMemberType
    RemoveBlank = 3  # BlankLayoutBuilderTypesMemberType
    SetBasePoint = 4  # BlankLayoutBuilderTypesMemberType
    FlipBlank = 5  # BlankLayoutBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlankLayoutBuilderSideWebOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlankLayoutBuilderSideWebOption():
    """
    Specifies the option of side webs type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Average", "the side webs type of average"
       "Bottom", "the side webs type of bottom"
       "Top", "the side webs type of top"
    """
    Average = 0  # BlankLayoutBuilderSideWebOptionMemberType
    Bottom = 1  # BlankLayoutBuilderSideWebOptionMemberType
    Top = 2  # BlankLayoutBuilderSideWebOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlankLayoutBuilderLeftRightSideOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlankLayoutBuilderLeftRightSideOption():
    """
    Specifies the option of left right side type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Average", "the left right side type of average"
       "Left", "the left side type"
       "Right", "the right side type"
    """
    Average = 0  # BlankLayoutBuilderLeftRightSideOptionMemberType
    Left = 1  # BlankLayoutBuilderLeftRightSideOptionMemberType
    Right = 2  # BlankLayoutBuilderLeftRightSideOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlankLayoutBuilderSnapSizeOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlankLayoutBuilderSnapSizeOption():
    """
    Specifies the option of snap size. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Tenth", "the snap size is 0.1"
       "Fifth", "the snap size is 0.2"
       "Half", "the snap size is 1/2"
       "One", "the snap size is 1"
       "Two", "the snap size is 2"
       "Five", "the snap size is 5"
       "Ten", "the snap size is 10"
    """
    Tenth = 0  # BlankLayoutBuilderSnapSizeOptionMemberType
    Fifth = 1  # BlankLayoutBuilderSnapSizeOptionMemberType
    Half = 2  # BlankLayoutBuilderSnapSizeOptionMemberType
    One = 3  # BlankLayoutBuilderSnapSizeOptionMemberType
    Two = 4  # BlankLayoutBuilderSnapSizeOptionMemberType
    Five = 5  # BlankLayoutBuilderSnapSizeOptionMemberType
    Ten = 6  # BlankLayoutBuilderSnapSizeOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlankLayoutBuilder(NXOpen.Builder):
    """
    Progressive Die Wizard blank layout builder  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.BlankLayoutCollection.CreateBlankLayoutBuilder`
    
    Default values.
    
    ==================  ========
    Property            Value
    ==================  ========
    Bottom              0 
    ------------------  --------
    LeftDistance        0 
    ------------------  --------
    LeftRightSide       Average 
    ------------------  --------
    LockPitchAndWidth   0 
    ------------------  --------
    MinimumSpaceSize    0 
    ------------------  --------
    Pitch               0 
    ------------------  --------
    RightDistance       0 
    ------------------  --------
    Rotate              0 
    ------------------  --------
    SideWeb             Average 
    ------------------  --------
    SnapSize            One 
    ------------------  --------
    ThreeBlanks         0 
    ------------------  --------
    Top                 0 
    ------------------  --------
    Width               0 
    ------------------  --------
    XShift              0 
    ------------------  --------
    YShift              0 
    ==================  ========
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Specifies the option of blank layout type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CreateLayout", "the type of create blank layout"
           "AddBlank", "the type of add multiple blank"
           "CopyBlank", "the type of copy blank"
           "RemoveBlank", "the type of remove blank"
           "SetBasePoint", "the type of set the base point of the blank"
           "FlipBlank", "the type of flip blank"
        """
        CreateLayout = 0  # BlankLayoutBuilderTypesMemberType
        AddBlank = 1  # BlankLayoutBuilderTypesMemberType
        CopyBlank = 2  # BlankLayoutBuilderTypesMemberType
        RemoveBlank = 3  # BlankLayoutBuilderTypesMemberType
        SetBasePoint = 4  # BlankLayoutBuilderTypesMemberType
        FlipBlank = 5  # BlankLayoutBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SideWebOption():
        """
        Specifies the option of side webs type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Average", "the side webs type of average"
           "Bottom", "the side webs type of bottom"
           "Top", "the side webs type of top"
        """
        Average = 0  # BlankLayoutBuilderSideWebOptionMemberType
        Bottom = 1  # BlankLayoutBuilderSideWebOptionMemberType
        Top = 2  # BlankLayoutBuilderSideWebOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LeftRightSideOption():
        """
        Specifies the option of left right side type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Average", "the left right side type of average"
           "Left", "the left side type"
           "Right", "the right side type"
        """
        Average = 0  # BlankLayoutBuilderLeftRightSideOptionMemberType
        Left = 1  # BlankLayoutBuilderLeftRightSideOptionMemberType
        Right = 2  # BlankLayoutBuilderLeftRightSideOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SnapSizeOption():
        """
        Specifies the option of snap size. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Tenth", "the snap size is 0.1"
           "Fifth", "the snap size is 0.2"
           "Half", "the snap size is 1/2"
           "One", "the snap size is 1"
           "Two", "the snap size is 2"
           "Five", "the snap size is 5"
           "Ten", "the snap size is 10"
        """
        Tenth = 0  # BlankLayoutBuilderSnapSizeOptionMemberType
        Fifth = 1  # BlankLayoutBuilderSnapSizeOptionMemberType
        Half = 2  # BlankLayoutBuilderSnapSizeOptionMemberType
        One = 3  # BlankLayoutBuilderSnapSizeOptionMemberType
        Two = 4  # BlankLayoutBuilderSnapSizeOptionMemberType
        Five = 5  # BlankLayoutBuilderSnapSizeOptionMemberType
        Ten = 6  # BlankLayoutBuilderSnapSizeOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BasePoint: NXOpen.Point = ...
    """
    Returns or sets  the base point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BasePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BasePoint`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Blank: NXOpen.SelectBody = ...
    """
    Returns  the blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``Blank`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BlankNameStr: str = ...
    """
    Returns or sets  the selected blank name.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankNameStr`` 
    
    :returns:  Returns the blank name  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankNameStr`` 
    
    :param blankNameStr:  Sets the blank name  
    :type blankNameStr: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Bottom: float = ...
    """
    Returns or sets  the bottom boundary distance between blank and strip.  
    
    <hr>
    
    Getter Method
    
    Signature ``Bottom`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Bottom`` 
    
    :param bottom: 
    :type bottom: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LeftDistance: float = ...
    """
    Returns or sets  the left boudary distance between blank and strip.  
    
    <hr>
    
    Getter Method
    
    Signature ``LeftDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeftDistance`` 
    
    :param leftDistance: 
    :type leftDistance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LeftRightSide: BlankLayoutBuilderLeftRightSideOption = ...
    """
    Returns or sets  the type of use left or right side to decide the distance between blank and strip.  
    
    <hr>
    
    Getter Method
    
    Signature ``LeftRightSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlankLayoutBuilderLeftRightSideOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeftRightSide`` 
    
    :param leftRightSide: 
    :type leftRightSide: :py:class:`NXOpen.Tooling.BlankLayoutBuilderLeftRightSideOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    LockPitchAndWidth: bool = ...
    """
    Returns or sets  the lock pitch and width values from being changed during processing.  
    
    <hr>
    
    Getter Method
    
    Signature ``LockPitchAndWidth`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockPitchAndWidth`` 
    
    :param lockPitchAndWidth: 
    :type lockPitchAndWidth: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MaterialUtilization: str = ...
    """
    Returns or sets  the material utilization of the blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialUtilization`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialUtilization`` 
    
    :param materialUtilization: 
    :type materialUtilization: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MinimumSpaceSize: bool = ...
    """
    Returns or sets  the option to report minimum space size or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumSpaceSize`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumSpaceSize`` 
    
    :param minimumSpaceSize: 
    :type minimumSpaceSize: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MinimumSpaceSizeValue: str = ...
    """
    Returns or sets  the minimum distance between the adjacent blanks.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumSpaceSizeValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumSpaceSizeValue`` 
    
    :param minimumSpaceSizeValue: 
    :type minimumSpaceSizeValue: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Pitch: float = ...
    """
    Returns or sets  the distance between the adjacent stations.  
    
    <hr>
    
    Getter Method
    
    Signature ``Pitch`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Pitch`` 
    
    :param pitch: 
    :type pitch: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RightDistance: float = ...
    """
    Returns or sets  the right boundary distance between blank and strip.  
    
    <hr>
    
    Getter Method
    
    Signature ``RightDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RightDistance`` 
    
    :param rightDistance: 
    :type rightDistance: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Rotate: float = ...
    """
    Returns or sets  the value to rotate the blank around the base point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Rotate`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rotate`` 
    
    :param rotate: 
    :type rotate: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SideWeb: BlankLayoutBuilderSideWebOption = ...
    """
    Returns or sets  the type of the overlap on the strip.  
    
    <hr>
    
    Getter Method
    
    Signature ``SideWeb`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlankLayoutBuilderSideWebOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SideWeb`` 
    
    :param sideWeb: 
    :type sideWeb: :py:class:`NXOpen.Tooling.BlankLayoutBuilderSideWebOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SnapSize: BlankLayoutBuilderSnapSizeOption = ...
    """
    Returns or sets  the option to set the increment of the scale bar.  
    
    <hr>
    
    Getter Method
    
    Signature ``SnapSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlankLayoutBuilderSnapSizeOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SnapSize`` 
    
    :param snapSize: 
    :type snapSize: :py:class:`NXOpen.Tooling.BlankLayoutBuilderSnapSizeOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ThreeBlanks: bool = ...
    """
    Returns or sets  the usage of three blanks or one blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThreeBlanks`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreeBlanks`` 
    
    :param threeBlanks: 
    :type threeBlanks: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Top: float = ...
    """
    Returns or sets  the top boudary distance between blank and strip.  
    
    <hr>
    
    Getter Method
    
    Signature ``Top`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Top`` 
    
    :param top: 
    :type top: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: BlankLayoutBuilderTypes = ...
    """
    Returns or sets  the blank layout type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlankLayoutBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.BlankLayoutBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Width: float = ...
    """
    Returns or sets  the width of the strip.  
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    XShift: float = ...
    """
    Returns or sets  the value to shift the blank in the X direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``XShift`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XShift`` 
    
    :param xShift: 
    :type xShift: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YShift: float = ...
    """
    Returns or sets  the value to shift the blank in the Y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``YShift`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YShift`` 
    
    :param yShift: 
    :type yShift: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: BlankLayoutBuilder = ...  # unknown typename


class CopySolidBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.CopySolidBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateCopySolidBuilder`
    
    Default values.
    
    ====================  =====
    Property              Value
    ====================  =====
    LinkToNewComponents   1 
    ====================  =====
    
    .. versionadded:: NX11.0.0
    """
    CloneObject: CloneObject = ...
    """
    Returns  the clone client data.  
    
    <hr>
    
    Getter Method
    
    Signature ``CloneObject`` 
    
    :returns:  A :py:class:`NXOpen.Tooling.CloneObject` instance  
    :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LinkToNewComponents: bool = ...
    """
    Returns or sets  the link to new components 
    
    <hr>
    
    Getter Method
    
    Signature ``LinkToNewComponents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinkToNewComponents`` 
    
    :param linkToNewComponents: 
    :type linkToNewComponents: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MultipleComponents: bool = ...
    """
    Returns or sets  the multiple components 
    
    <hr>
    
    Getter Method
    
    Signature ``MultipleComponents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MultipleComponents`` 
    
    :param multipleComponents: 
    :type multipleComponents: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the solid bodies selected by user
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectParentPartOcc: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the parent part occurrence of the part which collects the copied solid bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectParentPartOcc`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    WizardType: ToolingApplication = ...
    """
    Returns or sets  the wizard type data.  
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ToolingApplication` 
    
    .. versionadded:: NX11.0.2
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: :py:class:`NXOpen.Tooling.ToolingApplication` 
    
    .. versionadded:: NX11.0.2
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: CopySolidBuilder = ...  # unknown typename


class ShimInnerProfileSetBuilder(NXOpen.Builder):
    """
    This is a seed block of set list.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateShimInnerProfileSetBuilder`
    
    Default values.
    
    ============  =====
    Property      Value
    ============  =====
    RoughOffset   0 
    ============  =====
    
    .. versionadded:: NX10.0.0
    """
    RoughOffset: bool = ...
    """
    Returns or sets  the rough offset 
    
    <hr>
    
    Getter Method
    
    Signature ``RoughOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoughOffset`` 
    
    :param roughOffset: 
    :type roughOffset: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SlugHoleProfile: NXOpen.ScCollector = ...
    """
    Returns  the slug hole profile 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugHoleProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SlugHoleProfileOffset: NXOpen.Expression = ...
    """
    Returns  the slug hole profile offset 
    
    <hr>
    
    Getter Method
    
    Signature ``SlugHoleProfileOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: ShimInnerProfileSetBuilder = ...  # unknown typename


class PunchInsertBuilderInsertPositionItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PunchInsertBuilderInsertPositionItems():
    """
    Specifies the position of piercing inserts, for EDW only 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "The position is top side"
       "Bottom", "The position is bottom side"
    """
    Top = 0  # PunchInsertBuilderInsertPositionItemsMemberType
    Bottom = 1  # PunchInsertBuilderInsertPositionItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PunchInsertBuilderPunchPocketTypeItemsPunchPlateMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PunchInsertBuilderPunchPocketTypeItemsPunchPlate():
    """
    Specifies the punch pocket type in punch plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Clearance", "Punch pocket type in punch plate is clearance"
       "Fillet", "Punch pocket type in punch plate is fillet"
       "Circle", "Punch pocket type in punch plate is circle"
       "SuperOffset", "Punch pocket type in punch plate is super offset"
    """
    Clearance = 0  # PunchInsertBuilderPunchPocketTypeItemsPunchPlateMemberType
    Fillet = 1  # PunchInsertBuilderPunchPocketTypeItemsPunchPlateMemberType
    Circle = 2  # PunchInsertBuilderPunchPocketTypeItemsPunchPlateMemberType
    SuperOffset = 3  # PunchInsertBuilderPunchPocketTypeItemsPunchPlateMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PunchInsertBuilderPunchPocketTypeItemsBackingPlateMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PunchInsertBuilderPunchPocketTypeItemsBackingPlate():
    """
    Specifies the punch pocket type in backing plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Clearance", "Punch pocket type in backing plate is clearance"
       "Fillet", "Punch pocket type in backing plate is fillet"
       "Circle", "Punch pocket type in backing plate is circle"
       "SuperOffset", "Punch pocket type in backing plate is super offset"
    """
    Clearance = 0  # PunchInsertBuilderPunchPocketTypeItemsBackingPlateMemberType
    Fillet = 1  # PunchInsertBuilderPunchPocketTypeItemsBackingPlateMemberType
    Circle = 2  # PunchInsertBuilderPunchPocketTypeItemsBackingPlateMemberType
    SuperOffset = 3  # PunchInsertBuilderPunchPocketTypeItemsBackingPlateMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PunchInsertBuilderPunchPocketTypeItemsStripperPlateMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PunchInsertBuilderPunchPocketTypeItemsStripperPlate():
    """
    Specifies the punch pocket type in stripper plate. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Clearance", "Punch pocket type in stripper plate is clearance"
       "Fillet", "Punch pocket type in stripper plate is fillet"
       "Circle", "Punch pocket type in stripper plate is circle"
       "SuperOffset", "Punch pocket type in stripper plate is super offset"
    """
    Clearance = 0  # PunchInsertBuilderPunchPocketTypeItemsStripperPlateMemberType
    Fillet = 1  # PunchInsertBuilderPunchPocketTypeItemsStripperPlateMemberType
    Circle = 2  # PunchInsertBuilderPunchPocketTypeItemsStripperPlateMemberType
    SuperOffset = 3  # PunchInsertBuilderPunchPocketTypeItemsStripperPlateMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PunchInsertBuilderNormalClearanceOptionTypeItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PunchInsertBuilderNormalClearanceOptionTypeItems():
    """
    Specifies the design option of piercing insert. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "The design option is normal"
       "Variable", "The design option is fineblanking"
       "SuperOffset", "The design option is fineblanking"
    """
    Constant = 0  # PunchInsertBuilderNormalClearanceOptionTypeItemsMemberType
    Variable = 1  # PunchInsertBuilderNormalClearanceOptionTypeItemsMemberType
    SuperOffset = 2  # PunchInsertBuilderNormalClearanceOptionTypeItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PunchInsertBuilderNormalOffsetSideTypeItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PunchInsertBuilderNormalOffsetSideTypeItems():
    """
    Specifies the offset side of normal pierce insert design. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DieSide", "The offset side is die"
       "PunchSide", "The offset side is punch"
    """
    DieSide = 0  # PunchInsertBuilderNormalOffsetSideTypeItemsMemberType
    PunchSide = 1  # PunchInsertBuilderNormalOffsetSideTypeItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PunchInsertBuilder(NXOpen.Builder):
    """
    Represents punch insert builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreatePunchInsertBuilder`
    
    Default values.
    
    =====================================  ======================================
    Property                               Value
    =====================================  ======================================
    AutomaticFitToggle                     0 
    -------------------------------------  --------------------------------------
    DifferentPenetration                   0 
    -------------------------------------  --------------------------------------
    MinimumLength                          0.5 
    -------------------------------------  --------------------------------------
    MinimumRadius                          0.5 
    -------------------------------------  --------------------------------------
    NormalClearance                        0 
    -------------------------------------  --------------------------------------
    NormalClearanceOption                  Constant 
    -------------------------------------  --------------------------------------
    NormalOffsetSide                       DieSide 
    -------------------------------------  --------------------------------------
    NormalOnePunchToggle                   0 
    -------------------------------------  --------------------------------------
    NormalRenameDialog                     0 
    -------------------------------------  --------------------------------------
    Position                               Bottom 
    -------------------------------------  --------------------------------------
    PunchOffsetValue                       0 
    -------------------------------------  --------------------------------------
    PunchPocketClearanceForBackingPlate    0 
    -------------------------------------  --------------------------------------
    PunchPocketClearanceForPunchPlate      0 
    -------------------------------------  --------------------------------------
    PunchPocketClearanceForStripperPlate   0 
    -------------------------------------  --------------------------------------
    PunchPocketHeightInStripperPlate       0 
    -------------------------------------  --------------------------------------
    PunchPocketToggleForBackingPlate       0 
    -------------------------------------  --------------------------------------
    PunchPocketToggleForPunchPlate         0 
    -------------------------------------  --------------------------------------
    PunchPocketToggleForStripperPlate      0 
    -------------------------------------  --------------------------------------
    PunchPocketTypeInBackingPlate          Clearance 
    -------------------------------------  --------------------------------------
    PunchPocketTypeInPunchPlate            Clearance 
    -------------------------------------  --------------------------------------
    PunchPocketTypeInStripperPlate         Clearance 
    -------------------------------------  --------------------------------------
    PunchSameOffsetValue                   0 
    -------------------------------------  --------------------------------------
    UserDefinedPunchEnd.Value              0 (millimeters part), 0 (inches part) 
    -------------------------------------  --------------------------------------
    UserDefinedPunchPenetration            0 
    -------------------------------------  --------------------------------------
    UserDefinedPunchStart.Value            0 (millimeters part), 0 (inches part) 
    =====================================  ======================================
    
    .. versionadded:: NX11.0.0
    """
    
    class InsertPositionItems():
        """
        Specifies the position of piercing inserts, for EDW only 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "The position is top side"
           "Bottom", "The position is bottom side"
        """
        Top = 0  # PunchInsertBuilderInsertPositionItemsMemberType
        Bottom = 1  # PunchInsertBuilderInsertPositionItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PunchPocketTypeItemsPunchPlate():
        """
        Specifies the punch pocket type in punch plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Clearance", "Punch pocket type in punch plate is clearance"
           "Fillet", "Punch pocket type in punch plate is fillet"
           "Circle", "Punch pocket type in punch plate is circle"
           "SuperOffset", "Punch pocket type in punch plate is super offset"
        """
        Clearance = 0  # PunchInsertBuilderPunchPocketTypeItemsPunchPlateMemberType
        Fillet = 1  # PunchInsertBuilderPunchPocketTypeItemsPunchPlateMemberType
        Circle = 2  # PunchInsertBuilderPunchPocketTypeItemsPunchPlateMemberType
        SuperOffset = 3  # PunchInsertBuilderPunchPocketTypeItemsPunchPlateMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PunchPocketTypeItemsBackingPlate():
        """
        Specifies the punch pocket type in backing plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Clearance", "Punch pocket type in backing plate is clearance"
           "Fillet", "Punch pocket type in backing plate is fillet"
           "Circle", "Punch pocket type in backing plate is circle"
           "SuperOffset", "Punch pocket type in backing plate is super offset"
        """
        Clearance = 0  # PunchInsertBuilderPunchPocketTypeItemsBackingPlateMemberType
        Fillet = 1  # PunchInsertBuilderPunchPocketTypeItemsBackingPlateMemberType
        Circle = 2  # PunchInsertBuilderPunchPocketTypeItemsBackingPlateMemberType
        SuperOffset = 3  # PunchInsertBuilderPunchPocketTypeItemsBackingPlateMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PunchPocketTypeItemsStripperPlate():
        """
        Specifies the punch pocket type in stripper plate. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Clearance", "Punch pocket type in stripper plate is clearance"
           "Fillet", "Punch pocket type in stripper plate is fillet"
           "Circle", "Punch pocket type in stripper plate is circle"
           "SuperOffset", "Punch pocket type in stripper plate is super offset"
        """
        Clearance = 0  # PunchInsertBuilderPunchPocketTypeItemsStripperPlateMemberType
        Fillet = 1  # PunchInsertBuilderPunchPocketTypeItemsStripperPlateMemberType
        Circle = 2  # PunchInsertBuilderPunchPocketTypeItemsStripperPlateMemberType
        SuperOffset = 3  # PunchInsertBuilderPunchPocketTypeItemsStripperPlateMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalClearanceOptionTypeItems():
        """
        Specifies the design option of piercing insert. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "The design option is normal"
           "Variable", "The design option is fineblanking"
           "SuperOffset", "The design option is fineblanking"
        """
        Constant = 0  # PunchInsertBuilderNormalClearanceOptionTypeItemsMemberType
        Variable = 1  # PunchInsertBuilderNormalClearanceOptionTypeItemsMemberType
        SuperOffset = 2  # PunchInsertBuilderNormalClearanceOptionTypeItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NormalOffsetSideTypeItems():
        """
        Specifies the offset side of normal pierce insert design. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DieSide", "The offset side is die"
           "PunchSide", "The offset side is punch"
        """
        DieSide = 0  # PunchInsertBuilderNormalOffsetSideTypeItemsMemberType
        PunchSide = 1  # PunchInsertBuilderNormalOffsetSideTypeItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def StandardPunchInsert(self) -> None:
        """
        Load standard punch for normal pierce design.  
        
        Signature ``StandardPunchInsert()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def PunchEditOffsetValueTable(self) -> None:
        """
        Edit offset value table.  
        
        Signature ``PunchEditOffsetValueTable()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def NormalCreateUDP(self) -> None:
        """
        Create user defined punch for normal pierce design.  
        
        Signature ``NormalCreateUDP()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AddStandardPunchInsert(self) -> None:
        """
        Add standard punch insert by invoking standard part management dialog 
        
        Signature ``AddStandardPunchInsert()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def EditOffsetSpreadsheet(self) -> None:
        """
        Edit offset spreadhseet 
        
        Signature ``EditOffsetSpreadsheet()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AutomaticFitToggle: bool = ...
    """
    Returns or sets  the automatic fit toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticFitToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticFitToggle`` 
    
    :param automaticFitToggle: 
    :type automaticFitToggle: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DifferentPenetration: bool = ...
    """
    Returns or sets  the different penetration for punch 
    
    <hr>
    
    Getter Method
    
    Signature ``DifferentPenetration`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DifferentPenetration`` 
    
    :param differentPenetration: 
    :type differentPenetration: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IncludePilotScrap: bool = ...
    """
    Returns or sets  the include pilot scrap option toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludePilotScrap`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludePilotScrap`` 
    
    :param includePilotScrap: 
    :type includePilotScrap: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MinimumLength: float = ...
    """
    Returns or sets  the minimum length 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumLength`` 
    
    :param minimumLength: 
    :type minimumLength: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MinimumRadius: float = ...
    """
    Returns or sets  the minimum radius 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumRadius`` 
    
    :param minimumRadius: 
    :type minimumRadius: float 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NewPartNames: str = ...
    """
    Returns or sets  the new component names.  
    
    <hr>
    
    Getter Method
    
    Signature ``NewPartNames`` 
    
    :returns:  Retruns the new component names  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewPartNames`` 
    
    :param newPartNames:  Specifies the new component names  
    :type newPartNames: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    NormalClearance: float = ...
    """
    Returns or sets  the clearance value for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalClearance`` 
    
    :param normalClearance: 
    :type normalClearance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalClearanceOption: PunchInsertBuilderNormalClearanceOptionTypeItems = ...
    """
    Returns or sets  the clearance option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalClearanceOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PunchInsertBuilderNormalClearanceOptionTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalClearanceOption`` 
    
    :param normalClearanceOption: 
    :type normalClearanceOption: :py:class:`NXOpen.Tooling.PunchInsertBuilderNormalClearanceOptionTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalOffsetSide: PunchInsertBuilderNormalOffsetSideTypeItems = ...
    """
    Returns or sets  the offset side option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalOffsetSide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PunchInsertBuilderNormalOffsetSideTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalOffsetSide`` 
    
    :param normalOffsetSide: 
    :type normalOffsetSide: :py:class:`NXOpen.Tooling.PunchInsertBuilderNormalOffsetSideTypeItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalOnePunchToggle: bool = ...
    """
    Returns or sets  the one punch option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalOnePunchToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalOnePunchToggle`` 
    
    :param normalOnePunchToggle: 
    :type normalOnePunchToggle: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalPunchLength: str = ...
    """
    Returns or sets  the punch length for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalPunchLength`` 
    
    :returns:  Indicates the punch length for normal pierce design  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalPunchLength`` 
    
    :param normalPunchLength:  Indicates the punch length for normal pierce design  
    :type normalPunchLength: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalRenameDialog: bool = ...
    """
    Returns or sets  the rename dialog option for normal pierce design.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalRenameDialog`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalRenameDialog`` 
    
    :param normalRenameDialog: 
    :type normalRenameDialog: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalSelectPiercePunch: NXOpen.SelectBodyList = ...
    """
    Returns  the select pierce punch insert to be edited.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalSelectPiercePunch`` 
    
    :returns:  Indicates the selected pierce punch insert to be edited  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetSpreadsheet: str = ...
    """
    Returns or sets  the offset spreadsheet 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetSpreadsheet`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetSpreadsheet`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name to create insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns:  Retruns parent part name  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPart:  Specifies the parent part name  
    :type parentPart: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Position: PunchInsertBuilderInsertPositionItems = ...
    """
    Returns or sets  the reverse direction 
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PunchInsertBuilderInsertPositionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Tooling.PunchInsertBuilderInsertPositionItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchInsertTag: NXOpen.TaggedObject = ...
    """
    Returns or sets  the punch insert tag.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchInsertTag`` 
    
    :returns:  Retruns the punch insert tag  
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchInsertTag`` 
    
    :param punchInsertTag:  Specifies the punch insert tag  
    :type punchInsertTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PunchOffsetValue: float = ...
    """
    Returns or sets  the punch offset value.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchOffsetValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchOffsetValue`` 
    
    :param punchOffsetValue: 
    :type punchOffsetValue: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketClearanceForBackingPlate: float = ...
    """
    Returns or sets  the punch pocket clearance for backing plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketClearanceForBackingPlate`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketClearanceForBackingPlate`` 
    
    :param punchPocketClearanceForBackingPlate: 
    :type punchPocketClearanceForBackingPlate: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketClearanceForPunchPlate: float = ...
    """
    Returns or sets  the punch pocket clearance for punch plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketClearanceForPunchPlate`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketClearanceForPunchPlate`` 
    
    :param punchPocketClearanceForPunchPlate: 
    :type punchPocketClearanceForPunchPlate: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketClearanceForStripperPlate: float = ...
    """
    Returns or sets  the punch pocket clearance for stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketClearanceForStripperPlate`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketClearanceForStripperPlate`` 
    
    :param punchPocketClearanceForStripperPlate: 
    :type punchPocketClearanceForStripperPlate: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketHeightInStripperPlate: float = ...
    """
    Returns or sets  the punch pocket height in the stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketHeightInStripperPlate`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketHeightInStripperPlate`` 
    
    :param punchPocketHeightInStripperPlate: 
    :type punchPocketHeightInStripperPlate: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketToggleForBackingPlate: bool = ...
    """
    Returns or sets  the punch pocket toggle for backing plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketToggleForBackingPlate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketToggleForBackingPlate`` 
    
    :param punchPocketToggleForBackingPlate: 
    :type punchPocketToggleForBackingPlate: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketToggleForPunchPlate: bool = ...
    """
    Returns or sets  the punch pocket toggle for punch plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketToggleForPunchPlate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketToggleForPunchPlate`` 
    
    :param punchPocketToggleForPunchPlate: 
    :type punchPocketToggleForPunchPlate: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketToggleForStripperPlate: bool = ...
    """
    Returns or sets  the punch pocket toggle for stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketToggleForStripperPlate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketToggleForStripperPlate`` 
    
    :param punchPocketToggleForStripperPlate: 
    :type punchPocketToggleForStripperPlate: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketTypeInBackingPlate: PunchInsertBuilderPunchPocketTypeItemsBackingPlate = ...
    """
    Returns or sets  the punch pocket type in backing plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketTypeInBackingPlate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PunchInsertBuilderPunchPocketTypeItemsBackingPlate` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketTypeInBackingPlate`` 
    
    :param punchPocketTypeInBackingPlate: 
    :type punchPocketTypeInBackingPlate: :py:class:`NXOpen.Tooling.PunchInsertBuilderPunchPocketTypeItemsBackingPlate` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketTypeInPunchPlate: PunchInsertBuilderPunchPocketTypeItemsPunchPlate = ...
    """
    Returns or sets  the punch pocket type in punch plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketTypeInPunchPlate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PunchInsertBuilderPunchPocketTypeItemsPunchPlate` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketTypeInPunchPlate`` 
    
    :param punchPocketTypeInPunchPlate: 
    :type punchPocketTypeInPunchPlate: :py:class:`NXOpen.Tooling.PunchInsertBuilderPunchPocketTypeItemsPunchPlate` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPocketTypeInStripperPlate: PunchInsertBuilderPunchPocketTypeItemsStripperPlate = ...
    """
    Returns or sets  the punch pocket type in stripper plate.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPocketTypeInStripperPlate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PunchInsertBuilderPunchPocketTypeItemsStripperPlate` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPocketTypeInStripperPlate`` 
    
    :param punchPocketTypeInStripperPlate: 
    :type punchPocketTypeInStripperPlate: :py:class:`NXOpen.Tooling.PunchInsertBuilderPunchPocketTypeItemsStripperPlate` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchSameOffsetValue: bool = ...
    """
    Returns or sets  the same offset value option of punch design.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchSameOffsetValue`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchSameOffsetValue`` 
    
    :param punchSameOffsetValue: 
    :type punchSameOffsetValue: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectAllScrapsToggle: bool = ...
    """
    Returns or sets  the select all scraps option for creating all punches at a time.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAllScrapsToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectAllScrapsToggle`` 
    
    :param selectAllScrapsToggle: 
    :type selectAllScrapsToggle: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SelectAttributeSpreadsheet: str = ...
    """
    Returns or sets  the selected attribute spreadsheet 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAttributeSpreadsheet`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectAttributeSpreadsheet`` 
    
    :param fileName: 
    :type fileName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SelectScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the select scraps for punch insert design.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectScrap`` 
    
    :returns:  the selected scraps for pierce insert design  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectSketch: NXOpen.SelectSketch = ...
    """
    Returns  the selected sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectSketch` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    StandardPartClassificationName: str = ...
    """
    Returns or sets  the standard part classification name for punch insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandardPartClassificationName`` 
    
    :returns:  Returns standard part classification name  
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardPartClassificationName`` 
    
    :param standartPartClassificationName:  Specifies the standard part classification name  
    :type standartPartClassificationName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    StandardPunchTag: NXOpen.TaggedObject = ...
    """
    Returns or sets  the standard punch tag.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandardPunchTag`` 
    
    :returns:  Retruns the standard punch tag  
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardPunchTag`` 
    
    :param standardPunchTag:  Specifies the standard punch tag  
    :type standardPunchTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    UserDefinedPunchEnd: NXOpen.Expression = ...
    """
    Returns  the user defined punch end 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedPunchEnd`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    UserDefinedPunchPenetration: float = ...
    """
    Returns or sets  the user defined punch penetration.  
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedPunchPenetration`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedPunchPenetration`` 
    
    :param userDefinedPunchPenetration: 
    :type userDefinedPunchPenetration: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UserDefinedPunchStart: NXOpen.Expression = ...
    """
    Returns  the user defined punch start 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedPunchStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: PunchInsertBuilder = ...  # unknown typename


class ElectrodeCopyBuilderCopyMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ElectrodeCopyBuilderCopy():
    """
    Represents an index to copy type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Transform", "the method is transform"
       "Mirror", "the method is mirror"
    """
    Transform = 0  # ElectrodeCopyBuilderCopyMemberType
    Mirror = 1  # ElectrodeCopyBuilderCopyMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ElectrodeCopyBuilder(NXOpen.Builder):
    """
    The ElectrodeCopy builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ElectrodeCopyCollection.CreateElectrodeCopyBuilder`
    
    Default values.
    
    ========  ==========
    Property  Value
    ========  ==========
    DefNum    1 
    --------  ----------
    SelType   Transform 
    ========  ==========
    
    .. versionadded:: NX6.0.0
    """
    
    class Copy():
        """
        Represents an index to copy type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Transform", "the method is transform"
           "Mirror", "the method is mirror"
        """
        Transform = 0  # ElectrodeCopyBuilderCopyMemberType
        Mirror = 1  # ElectrodeCopyBuilderCopyMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetBlankPartName(self, blankPartName: str) -> None:
        """
        The part name of electrode blank.  
        
        Signature ``SetBlankPartName(blankPartName)`` 
        
        :param blankPartName:  blank part name  
        :type blankPartName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def CopyElectrode(self, copyType: ElectrodeCopyBuilderCopy, eleBody: NXOpen.NXObject, fromface: NXOpen.NXObject, toface: NXOpen.NXObject) -> NXOpen.NXObject:
        """
        Copy an electrode blank from one face to another face.  
        
        Signature ``CopyElectrode(copyType, eleBody, fromface, toface)`` 
        
        :param copyType:  copy type  
        :type copyType: :py:class:`NXOpen.Tooling.ElectrodeCopyBuilderCopy` 
        :param eleBody:  the electrode blank object that is to be copied  
        :type eleBody: :py:class:`NXOpen.NXObject` 
        :param fromface:  the 'from' face object used for transform electrode or datum plane object used for mirror electrode  
        :type fromface: :py:class:`NXOpen.NXObject` 
        :param toface:  the 'to' face object used for transform electrode  
        :type toface: :py:class:`NXOpen.NXObject` 
        :returns:  new part tag  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def UpdateParameterData(self, blankBuilderTag: NXOpen.TaggedObject, partTag: NXOpen.TaggedObject) -> tuple:
        """
        Update parameter data to electrode blank builder.  
        
        Signature ``UpdateParameterData(blankBuilderTag, partTag)`` 
        
        :param blankBuilderTag:  electrode blank builder tag 
        :type blankBuilderTag: :py:class:`NXOpen.TaggedObject` 
        :param partTag:  electrode blank body tag  
        :type partTag: :py:class:`NXOpen.TaggedObject` 
        :returns: a tuple 
        :rtype: A tuple consisting of (modelPath, paraNames). modelPath is a str.   model path paraNames is a list of str.   parameter name 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    CloneObject: CloneObject = ...
    """
    Returns  the clone client data.  
    
    <hr>
    
    Getter Method
    
    Signature ``CloneObject`` 
    
    :returns:  A :py:class:`NXOpen.Tooling.CloneObject` instance  
    :rtype: :py:class:`NXOpen.Tooling.CloneObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    CopyInstance: bool = ...
    """
    Returns or sets  the setting indicates the copy is a new part or an instance.  
    
    <hr>
    
    Getter Method
    
    Signature ``CopyInstance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CopyInstance`` 
    
    :param copyInstance: 
    :type copyInstance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DefNum: int = ...
    """
    Returns or sets  the number of transform 
    
    <hr>
    
    Getter Method
    
    Signature ``DefNum`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefNum`` 
    
    :param defNum: 
    :type defNum: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ElectrodeBlankBuilder: NXOpen.TaggedObject = ...
    """
    Returns or sets  the electrode blank builder.  
    
    <hr>
    
    Getter Method
    
    Signature ``ElectrodeBlankBuilder`` 
    
    :returns:  electrode blank builder tag  
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX10.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ElectrodeBlankBuilder`` 
    
    :param builderTag:  electrode blank builder tag  
    :type builderTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX10.0.1
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    MirrorPlane: NXOpen.SelectDatumPlaneList = ...
    """
    Returns  the mirror plane 
    
    <hr>
    
    Getter Method
    
    Signature ``MirrorPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDatumPlaneList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Rename: bool = ...
    """
    Returns or sets  the new electrode name 
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelToFace: NXOpen.SelectFaceList = ...
    """
    Returns  the selected 'to' face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelToFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelType: ElectrodeCopyBuilderCopy = ...
    """
    Returns or sets  the copy type 
    
    <hr>
    
    Getter Method
    
    Signature ``SelType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ElectrodeCopyBuilderCopy` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelType`` 
    
    :param selType: 
    :type selType: :py:class:`NXOpen.Tooling.ElectrodeCopyBuilderCopy` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectElectrode: NXOpen.SelectBodyList = ...
    """
    Returns  the selected electrode 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectElectrode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectFromFace: NXOpen.SelectFaceList = ...
    """
    Returns  the selected 'from' face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFromFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ElectrodeCopyBuilder = ...  # unknown typename


class BomListDataProviderExportedStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BomListDataProviderExportedStatus():
    """
    Represents the exported status of a cell. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Null", "No parts in the row are exported"
       "Partial", "Partial parts in the row are exported"
       "All", "All parts in the row are exported"
    """
    Null = 0  # BomListDataProviderExportedStatusMemberType
    Partial = 1  # BomListDataProviderExportedStatusMemberType
    All = 2  # BomListDataProviderExportedStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BomListDataProvider(NXOpen.TaggedObject, NXOpen.ITableEditorDataProvider):
    """
    Provides basic data for BOM List.  
    
    When :py:meth:`Builder.Commit` is called None will be returned.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateBomListDataProvider`
    
    .. versionadded:: NX11.0.0
    """
    
    class ExportedStatus():
        """
        Represents the exported status of a cell. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Null", "No parts in the row are exported"
           "Partial", "Partial parts in the row are exported"
           "All", "All parts in the row are exported"
        """
        Null = 0  # BomListDataProviderExportedStatusMemberType
        Partial = 1  # BomListDataProviderExportedStatusMemberType
        All = 2  # BomListDataProviderExportedStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    @typing.overload
    def SetString(self, rows: int, column: int, stringData: str) -> bool:
        """
        Sets string data at a particular location in the table.  
        
        Signature ``SetString(rows, column, stringData)`` 
        
        :param rows:  the row to set  
        :type rows: int 
        :param column:  the column to set  
        :type column: int 
        :param stringData:  the string data to set  
        :type stringData: str 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetString(self, rows: 'list[int]', column: int, stringData: str) -> bool:
        """
        Sets string data on a range of table cells in a specified column. Returns whether any data was successfully set.  
        
        Signature ``SetString(rows, column, stringData)`` 
        
        :param rows:  the rows to set  
        :type rows: list of int 
        :param column:  the column to be set  
        :type column: int 
        :param stringData:  the string data to set  
        :type stringData: str 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetString(self, row: int, column: int) -> str:
        """
        Gets the string data at a particular location in the table.  
        
        Signature ``GetString(row, column)`` 
        
        :param row:  the rows to query  
        :type row: int 
        :param column:  the column to query  
        :type column: int 
        :returns:  the string data at the row and column specified  
        :rtype: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetInteger(self, rows: int, column: int, integerData: int) -> bool:
        """
        Sets integer data at a particular location in the table.  
        
        Signature ``SetInteger(rows, column, integerData)`` 
        
        :param rows:  the row to set  
        :type rows: int 
        :param column:  the column to set  
        :type column: int 
        :param integerData:  the integer data to set  
        :type integerData: int 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetInteger(self, rows: 'list[int]', column: int, integerData: int) -> bool:
        """
        Sets integer data on a range of table cells in a specified column. Returns whether any data was successfully set.  
        
        Signature ``SetInteger(rows, column, integerData)`` 
        
        :param rows:  the rows to set  
        :type rows: list of int 
        :param column:  the column to be set  
        :type column: int 
        :param integerData:  the integer data to set  
        :type integerData: int 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetInteger(self, row: int, column: int) -> tuple:
        """
        Gets the integer data at a particular location in the table.  
        
        Signature ``GetInteger(row, column)`` 
        
        :param row:  the rows to query  
        :type row: int 
        :param column:  the column to query  
        :type column: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (integerData, isUnassigned). integerData is a int.   the integer data at the row and column specified isUnassigned is a bool.   is the value unassigned 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetDouble(self, rows: int, column: int, doubleData: float) -> bool:
        """
        Sets double data at a particular location in the table.  
        
        Signature ``SetDouble(rows, column, doubleData)`` 
        
        :param rows:  the row to set  
        :type rows: int 
        :param column:  the column to set  
        :type column: int 
        :param doubleData:  the double data to set  
        :type doubleData: float 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetDouble(self, rows: 'list[int]', column: int, doubleData: float) -> bool:
        """
        Sets double data on a range of table cells in a specified column. Returns whether any data was successfully set.  
        
        Signature ``SetDouble(rows, column, doubleData)`` 
        
        :param rows:  the rows to set  
        :type rows: list of int 
        :param column:  the column to be set  
        :type column: int 
        :param doubleData:  the double data to set  
        :type doubleData: float 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDouble(self, row: int, column: int) -> tuple:
        """
        Gets the double data at a particular location in the table.  
        
        Signature ``GetDouble(row, column)`` 
        
        :param row:  the rows to query  
        :type row: int 
        :param column:  the column to query  
        :type column: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (doubleData, isUnassigned). doubleData is a float.   the double data at the row and column specified isUnassigned is a bool.   is the value unassigned 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetBoolean(self, rows: int, column: int, booleanData: bool) -> bool:
        """
        Sets boolean data at a particular location in the table.  
        
        Signature ``SetBoolean(rows, column, booleanData)`` 
        
        :param rows:  the row to set  
        :type rows: int 
        :param column:  the column to set  
        :type column: int 
        :param booleanData:  the boolean data to set  
        :type booleanData: bool 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetBoolean(self, rows: 'list[int]', column: int, booleanData: bool) -> bool:
        """
        Sets boolean data on a range of table cells in a specified column. Returns whether any data was successfully set.  
        
        Signature ``SetBoolean(rows, column, booleanData)`` 
        
        :param rows:  the rows to set  
        :type rows: list of int 
        :param column:  the column to be set  
        :type column: int 
        :param booleanData:  the boolean data to set  
        :type booleanData: bool 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBoolean(self, row: int, column: int) -> bool:
        """
        Gets the boolean data at a particular location in the table.  
        
        Signature ``GetBoolean(row, column)`` 
        
        :param row:  the rows to query  
        :type row: int 
        :param column:  the column to query  
        :type column: int 
        :returns:  the boolean data at the row and column specified  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def UnsetValue(self, row: int, column: int) -> bool:
        """
        Unsets the data at a particular location in the table.  
        
        Signature ``UnsetValue(row, column)`` 
        
        :param row:  the row to unset  
        :type row: int 
        :param column:  the column to unset  
        :type column: int 
        :returns:  whether or not the data was successfully unset.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def UnsetValue(self, rows: 'list[int]', column: int) -> bool:
        """
        Unsets the data on a range of table cells in a specified column. Returns whether any data was successfully unset.  
        
        Signature ``UnsetValue(rows, column)`` 
        
        :param rows:  the rows to unset  
        :type rows: list of int 
        :param column:  the column to be unset  
        :type column: int 
        :returns:  whether or not the data was successfully unset.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Destroy(self) -> None:
        """
        Deletes the data provider.  
        
        This method should always be called when the data provider is no longer needed. 
        
        Signature ``Destroy()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    RowCount: int = ...
    """
    Returns or sets  the number of rows in the table 
    
    <hr>
    
    Getter Method
    
    Signature ``RowCount`` 
    
    :returns:  the number of rows in the table  
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RowCount`` 
    
    :param rowCount:  the number of rows in the table  
    :type rowCount: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ColumnCount: int = ...
    """
    Returns or sets  the number of columns in the table 
    
    <hr>
    
    Getter Method
    
    Signature ``ColumnCount`` 
    
    :returns:  the number of columns in the table  
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColumnCount`` 
    
    :param columnCount:  the number of columns in the table  
    :type columnCount: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: BomListDataProvider = ...  # unknown typename


class CoolingExtendCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a CoolingExtend Collection.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCoolingExtendBuilder(self) -> CoolingExtendBuilder:
        """
        Creates a Tooling.  
        
        CoolingExtendBuilder  
        
        Signature ``CreateCoolingExtendBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CoolingExtendBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class DieEngProcessUpdateManagerBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngProcessUpdateManagerBuilderTypes():
    """
    the trim task or pierce task. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TrimTask", " - "
       "PierceTask", " - "
    """
    TrimTask = 0  # DieEngProcessUpdateManagerBuilderTypesMemberType
    PierceTask = 1  # DieEngProcessUpdateManagerBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngProcessUpdateManagerBuilder(NXOpen.Builder):
    """
    Die Engineer process update manager management builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieEngProcessUpdateManagerBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class Types():
        """
        the trim task or pierce task. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TrimTask", " - "
           "PierceTask", " - "
        """
        TrimTask = 0  # DieEngProcessUpdateManagerBuilderTypesMemberType
        PierceTask = 1  # DieEngProcessUpdateManagerBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Type: DieEngProcessUpdateManagerBuilderTypes = ...
    """
    Returns or sets  the trim task or pierce task.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieEngProcessUpdateManagerBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.DieEngProcessUpdateManagerBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: DieEngProcessUpdateManagerBuilder = ...  # unknown typename


class UndersizeBuilderOrbitMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UndersizeBuilderOrbit():
    """
    Represents the orbit type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circular", "circular"
       "Square", "square"
       "Triangle", "triangle"
       "Spherical", "spherical"
       "Points", "specify points"
    """
    Circular = 0  # UndersizeBuilderOrbitMemberType
    Square = 1  # UndersizeBuilderOrbitMemberType
    Triangle = 2  # UndersizeBuilderOrbitMemberType
    Spherical = 3  # UndersizeBuilderOrbitMemberType
    Points = 4  # UndersizeBuilderOrbitMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UndersizeBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.UndersizeBuilder`      
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.UndersizeCollection.CreateUndersizeBuilder`
    
    Default values.
    
    ================  =============================================
    Property          Value
    ================  =============================================
    Angle.Value       90 (millimeters part), 90 (inches part) 
    ----------------  ---------------------------------------------
    OrbitSize.Value   0.05 (millimeters part), 0.002 (inches part) 
    ----------------  ---------------------------------------------
    OrbitType         Circular 
    ----------------  ---------------------------------------------
    SparkGap.Value    0.05 (millimeters part), 0.002 (inches part) 
    ================  =============================================
    
    .. versionadded:: NX6.0.0
    """
    
    class Orbit():
        """
        Represents the orbit type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circular", "circular"
           "Square", "square"
           "Triangle", "triangle"
           "Spherical", "spherical"
           "Points", "specify points"
        """
        Circular = 0  # UndersizeBuilderOrbitMemberType
        Square = 1  # UndersizeBuilderOrbitMemberType
        Triangle = 2  # UndersizeBuilderOrbitMemberType
        Spherical = 3  # UndersizeBuilderOrbitMemberType
        Points = 4  # UndersizeBuilderOrbitMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the angle which is between two distribution electrodes 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ElectrodeBodies: NXOpen.SelectBodyList = ...
    """
    Returns  the electrode body to do undersize 
    
    <hr>
    
    Getter Method
    
    Signature ``ElectrodeBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OrbitPointList: NXOpen.SelectPointList = ...
    """
    Returns  the points to be used as copy positions to undersize electrode 
    
    <hr>
    
    Getter Method
    
    Signature ``OrbitPointList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OrbitSize: NXOpen.Expression = ...
    """
    Returns  the orbit size which determines the radius of the distribution circle 
    
    <hr>
    
    Getter Method
    
    Signature ``OrbitSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OrbitType: UndersizeBuilderOrbit = ...
    """
    Returns or sets  the orbit type 
    
    <hr>
    
    Getter Method
    
    Signature ``OrbitType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.UndersizeBuilderOrbit` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrbitType`` 
    
    :param orbitType: 
    :type orbitType: :py:class:`NXOpen.Tooling.UndersizeBuilderOrbit` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    PointSpecify: NXOpen.Point = ...
    """
    Returns or sets  the reference point which is the center of the distribution circle
    
    <hr>
    
    Getter Method
    
    Signature ``PointSpecify`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointSpecify`` 
    
    :param pointSpecify: 
    :type pointSpecify: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectElectrodeBlock: NXOpen.SelectBodyList = ...
    """
    Returns  the body will be used as electrode body to do undersize 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectElectrodeBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.UndersizeBuilder.ElectrodeBodies` instead.
    
    License requirements: None.
    """
    SelectPoints: NXOpen.SelectPointList = ...
    """
    Returns  the points will be used as copy positions to undersize electrode 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPoints`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Tooling.UndersizeBuilder.OrbitPointList` instead.
    
    License requirements: None.
    """
    SparkGap: NXOpen.Expression = ...
    """
    Returns  the spark gap which is the gap between the electrode head and the work piece 
    
    <hr>
    
    Getter Method
    
    Signature ``SparkGap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: UndersizeBuilder = ...  # unknown typename


class EjectorTableBuilderDrawingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EjectorTableBuilderDrawingType():
    """
    The types of the ejector drawing. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MasterModel", "master model drawing"
       "SelfContained", "self contained drawing"
    """
    MasterModel = 0  # EjectorTableBuilderDrawingTypeMemberType
    SelfContained = 1  # EjectorTableBuilderDrawingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EjectorTableBuilderEjectorTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EjectorTableBuilderEjectorType():
    """
    The types of ejectors. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", "all ejectors"
       "Straight", "straight ejectors"
       "Shoulder", "shoulder ejectors"
       "Blade", "blade ejectors"
       "Sleeve", "sleeve ejectors"
       "Other", " - "
    """
    All = 0  # EjectorTableBuilderEjectorTypeMemberType
    Straight = 1  # EjectorTableBuilderEjectorTypeMemberType
    Shoulder = 2  # EjectorTableBuilderEjectorTypeMemberType
    Blade = 3  # EjectorTableBuilderEjectorTypeMemberType
    Sleeve = 4  # EjectorTableBuilderEjectorTypeMemberType
    Other = 5  # EjectorTableBuilderEjectorTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EjectorTableBuilder(NXOpen.Builder):
    """
    Represens a ejector table builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateEjectorTableBuilder`
    
    Default values.
    
    ===================  ============
    Property             Value
    ===================  ============
    EjectorDrawingType   MasterModel 
    -------------------  ------------
    EjectorPinType       All 
    -------------------  ------------
    RenameComponent      0 
    ===================  ============
    
    .. versionadded:: NX9.0.0
    """
    
    class DrawingType():
        """
        The types of the ejector drawing. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MasterModel", "master model drawing"
           "SelfContained", "self contained drawing"
        """
        MasterModel = 0  # EjectorTableBuilderDrawingTypeMemberType
        SelfContained = 1  # EjectorTableBuilderDrawingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EjectorType():
        """
        The types of ejectors. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", "all ejectors"
           "Straight", "straight ejectors"
           "Shoulder", "shoulder ejectors"
           "Blade", "blade ejectors"
           "Sleeve", "sleeve ejectors"
           "Other", " - "
        """
        All = 0  # EjectorTableBuilderEjectorTypeMemberType
        Straight = 1  # EjectorTableBuilderEjectorTypeMemberType
        Shoulder = 2  # EjectorTableBuilderEjectorTypeMemberType
        Blade = 3  # EjectorTableBuilderEjectorTypeMemberType
        Sleeve = 4  # EjectorTableBuilderEjectorTypeMemberType
        Other = 5  # EjectorTableBuilderEjectorTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AssignEjectorType(self) -> None:
        """
        Assigns the specified type on ejector pins.  
        
        Signature ``AssignEjectorType()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def RemoveEjectorType(self) -> None:
        """
        Deletes the specified type from ejector pins.  
        
        Signature ``RemoveEjectorType()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewEjectorTableData(self) -> EjectorTableData:
        """
        Creates an ejector table transient object data.  
        
        Signature ``NewEjectorTableData()`` 
        
        :returns:  Allocated ejector table data.  
        :rtype: :py:class:`NXOpen.Tooling.EjectorTableData` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def GetEjectorTableData(self) -> EjectorTableData:
        """
        Gets an ejector table transient object data.  
        
        Signature ``GetEjectorTableData()`` 
        
        :returns:  Allocated ejector table data.  
        :rtype: :py:class:`NXOpen.Tooling.EjectorTableData` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    DestinationFolder: str = ...
    """
    Returns or sets  the destination folder which the master model part will be created in.  
    
    <hr>
    
    Getter Method
    
    Signature ``DestinationFolder`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DestinationFolder`` 
    
    :param destinationFolder: 
    :type destinationFolder: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    EjectorDrawingType: EjectorTableBuilderDrawingType = ...
    """
    Returns or sets  the drawing type.  
    
    <hr>
    
    Getter Method
    
    Signature ``EjectorDrawingType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EjectorTableBuilderDrawingType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EjectorDrawingType`` 
    
    :param ejectorDrawingType: 
    :type ejectorDrawingType: :py:class:`NXOpen.Tooling.EjectorTableBuilderDrawingType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    EjectorPinType: EjectorTableBuilderEjectorType = ...
    """
    Returns or sets  the ejector pin type.  
    
    <hr>
    
    Getter Method
    
    Signature ``EjectorPinType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EjectorTableBuilderEjectorType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EjectorPinType`` 
    
    :param ejectorPinType: 
    :type ejectorPinType: :py:class:`NXOpen.Tooling.EjectorTableBuilderEjectorType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    EjectorPins: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the ejector pins.  
    
    <hr>
    
    Getter Method
    
    Signature ``EjectorPins`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MasterModelPartName: str = ...
    """
    Returns or sets  the name to create a master model part.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterModelPartName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MasterModelPartName`` 
    
    :param masterModelPartName: 
    :type masterModelPartName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    NameRule: str = ...
    """
    Returns or sets  the name rule to generate the master model part name.  
    
    <hr>
    
    Getter Method
    
    Signature ``NameRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NameRule`` 
    
    :param nameRule: 
    :type nameRule: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    RenameComponent: bool = ...
    """
    Returns or sets  the option to define the part name in Part Name Management.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponent`` 
    
    :param renameComponent: 
    :type renameComponent: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    TemplateName: str = ...
    """
    Returns or sets  the drawing template name.  
    
    <hr>
    
    Getter Method
    
    Signature ``TemplateName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TemplateName`` 
    
    :param templateName: 
    :type templateName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    WorkingPart: NXOpen.NXObject = ...
    """
    Returns or sets  the part where a self contained drawing will be created or the part to be added into the master model drawing part.  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkingPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WorkingPart`` 
    
    :param workingPart: 
    :type workingPart: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Null: EjectorTableBuilder = ...  # unknown typename


class HoleReportBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleReportBuilderTypes():
    """
    Specifies the option of hole table type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CreateTable", "the hole table type of create hole table"
       "UpdateTable", "the hole table type of update hole table"
    """
    CreateTable = 0  # HoleReportBuilderTypesMemberType
    UpdateTable = 1  # HoleReportBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleReportBuilderEnumSelectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleReportBuilderEnumSelectionType():
    """
    Specifies the option of selection type to create hole table 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ViewSelection", "Selects view to create hole table"
       "WindowSelection", "Selects holes in window to create hole table"
    """
    ViewSelection = 0  # HoleReportBuilderEnumSelectionTypeMemberType
    WindowSelection = 1  # HoleReportBuilderEnumSelectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleReportBuilderEnumQuadrantTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HoleReportBuilderEnumQuadrantType():
    """
    Specifies the option of which quadrant is positive 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PositiveQuadrantI", "First quadrant is positive"
       "PositiveQuadrantIi", "Second quadrant is positive"
       "PositiveQuadrantIii", "Third quadrant is positive"
       "PositiveQuadrantIv", "Forth quadrant is positive"
       "PositiveQuadrantAll", "All quadrant is positive"
    """
    PositiveQuadrantI = 0  # HoleReportBuilderEnumQuadrantTypeMemberType
    PositiveQuadrantIi = 1  # HoleReportBuilderEnumQuadrantTypeMemberType
    PositiveQuadrantIii = 2  # HoleReportBuilderEnumQuadrantTypeMemberType
    PositiveQuadrantIv = 3  # HoleReportBuilderEnumQuadrantTypeMemberType
    PositiveQuadrantAll = 4  # HoleReportBuilderEnumQuadrantTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HoleReportBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.HoleReportBuilder`
    This class is for Hole Report Design UI
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.HoleReportCollection.CreateHoleReportBuilder`
    
    Default values.
    
    ==============  ==================
    Property        Value
    ==============  ==================
    QuadrantType    PositiveQuadrantI 
    --------------  ------------------
    SelectionType   ViewSelection 
    ==============  ==================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        Specifies the option of hole table type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CreateTable", "the hole table type of create hole table"
           "UpdateTable", "the hole table type of update hole table"
        """
        CreateTable = 0  # HoleReportBuilderTypesMemberType
        UpdateTable = 1  # HoleReportBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EnumSelectionType():
        """
        Specifies the option of selection type to create hole table 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ViewSelection", "Selects view to create hole table"
           "WindowSelection", "Selects holes in window to create hole table"
        """
        ViewSelection = 0  # HoleReportBuilderEnumSelectionTypeMemberType
        WindowSelection = 1  # HoleReportBuilderEnumSelectionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EnumQuadrantType():
        """
        Specifies the option of which quadrant is positive 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PositiveQuadrantI", "First quadrant is positive"
           "PositiveQuadrantIi", "Second quadrant is positive"
           "PositiveQuadrantIii", "Third quadrant is positive"
           "PositiveQuadrantIv", "Forth quadrant is positive"
           "PositiveQuadrantAll", "All quadrant is positive"
        """
        PositiveQuadrantI = 0  # HoleReportBuilderEnumQuadrantTypeMemberType
        PositiveQuadrantIi = 1  # HoleReportBuilderEnumQuadrantTypeMemberType
        PositiveQuadrantIii = 2  # HoleReportBuilderEnumQuadrantTypeMemberType
        PositiveQuadrantIv = 3  # HoleReportBuilderEnumQuadrantTypeMemberType
        PositiveQuadrantAll = 4  # HoleReportBuilderEnumQuadrantTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateOrdinateOrigin(self, quadrant: int, viewTag: NXOpen.TaggedObject, pointData: NXOpen.Point3d) -> NXOpen.TaggedObject:
        """
        Create Ordinate Origin  
        
        Signature ``CreateOrdinateOrigin(quadrant, viewTag, pointData)`` 
        
        :param quadrant:  value of the positive quadrant  
        :type quadrant: int 
        :param viewTag:  the view  
        :type viewTag: :py:class:`NXOpen.TaggedObject` 
        :param pointData:  data of the cursor point  
        :type pointData: :py:class:`NXOpen.Point3d` 
        :returns:  the new ordinate  
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    CreatedOrdinateOrigin: NXOpen.TaggedObject = ...
    """
    Returns or sets  the created ordinate origin 
    
    <hr>
    
    Getter Method
    
    Signature ``CreatedOrdinateOrigin`` 
    
    :returns:  Returns the created ordinate origin  
    :rtype: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreatedOrdinateOrigin`` 
    
    :param ordinateOriginTag:  Sets the created ordinate origin  
    :type ordinateOriginTag: :py:class:`NXOpen.TaggedObject` 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    """
    HoleTable: NXOpen.SelectEdgeList = ...
    """
    Returns  the hole table to edit 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleTable`` 
    
    :returns:  Returns the hole table to edit  
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OrdinateOrigin: NXOpen.SelectPointList = ...
    """
    Returns  the ordinate origin to get the coords in given ordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``OrdinateOrigin`` 
    
    :returns:  Returns the edge in which the ordinate origin is  
    :rtype: :py:class:`NXOpen.SelectPointList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    QuadrantType: HoleReportBuilderEnumQuadrantType = ...
    """
    Returns or sets  the positive quadrant type 
    
    <hr>
    
    Getter Method
    
    Signature ``QuadrantType`` 
    
    :returns:  Returns the positive quadrant type  
    :rtype: :py:class:`NXOpen.Tooling.HoleReportBuilderEnumQuadrantType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``QuadrantType`` 
    
    :param quadrantType:  Sets the positive quadrant type  
    :type quadrantType: :py:class:`NXOpen.Tooling.HoleReportBuilderEnumQuadrantType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectionType: HoleReportBuilderEnumSelectionType = ...
    """
    Returns or sets  the selection type to choose select view or holes in window to create hole report 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionType`` 
    
    :returns:  Returns the selection type value  
    :rtype: :py:class:`NXOpen.Tooling.HoleReportBuilderEnumSelectionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionType`` 
    
    :param selectionType:  Sets the selection type value  
    :type selectionType: :py:class:`NXOpen.Tooling.HoleReportBuilderEnumSelectionType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TableAddHole: NXOpen.SelectEdgeList = ...
    """
    Returns  the holes to add to the table 
    
    <hr>
    
    Getter Method
    
    Signature ``TableAddHole`` 
    
    :returns:  Returns the holes to add to the table  
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TableHole: NXOpen.SelectEdgeList = ...
    """
    Returns  the holes in window to create hole report 
    
    <hr>
    
    Getter Method
    
    Signature ``TableHole`` 
    
    :returns:  Returns the holes in window to create hole table  
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TableOrigin: NXOpen.Point = ...
    """
    Returns or sets  the table origin 
    
    <hr>
    
    Getter Method
    
    Signature ``TableOrigin`` 
    
    :returns:  Returns the table origin to create hole table  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TableOrigin`` 
    
    :param tableOrigin:  Sets the table origin to create hole table  
    :type tableOrigin: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TableView: NXOpen.Drawings.SelectDraftingViewList = ...
    """
    Returns  the view to create hole report 
    
    <hr>
    
    Getter Method
    
    Signature ``TableView`` 
    
    :returns:  Returns the view to create hole table  
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingViewList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: HoleReportBuilderTypes = ...
    """
    Returns or sets  the type of hole table
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.HoleReportBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.HoleReportBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: HoleReportBuilder = ...  # unknown typename


class DieEngTrimAngleCheck(NXOpen.GeometricAnalysis.AnalysisObject):
    """
    Represents a die engineering trim angle check analysis object   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Tooling.DieEngTrimAngleCheckBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: DieEngTrimAngleCheck = ...  # unknown typename


class MWDefineSheetsCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of MWDefineSheets builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> MWDefineSheetsBuilder:
        """
        Creates a MWDefineSheets builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`MWDefineSheetsBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.MWDefineSheetsBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class RenameAndExportComponentBuilderNamingRuleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RenameAndExportComponentBuilderNamingRuleType():
    """
    naming rule 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Prefix", " - "
       "Suffix", " - "
       "ReplaceString", " - "
       "ToolingNameRule", " - "
    """
    NotSet = 0  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
    Prefix = 1  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
    Suffix = 2  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
    ReplaceString = 3  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
    ToolingNameRule = 4  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RenameAndExportComponentBuilderNameRuleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RenameAndExportComponentBuilderNameRuleType():
    """
    tooling naming rule 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Default", " - "
    """
    Default = 0  # RenameAndExportComponentBuilderNameRuleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RenameAndExportComponentBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RenameAndExportComponentBuilderTypes():
    """
    types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RenameCompoent", " - "
       "ExportAssembly", " - "
    """
    RenameCompoent = 0  # RenameAndExportComponentBuilderTypesMemberType
    ExportAssembly = 1  # RenameAndExportComponentBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RenameAndExportComponentBuilderDefinitionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RenameAndExportComponentBuilderDefinitionType():
    """
    definition type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Directory", " - "
       "RootPart", " - "
       "Selection", " - "
    """
    Directory = 0  # RenameAndExportComponentBuilderDefinitionTypeMemberType
    RootPart = 1  # RenameAndExportComponentBuilderDefinitionTypeMemberType
    Selection = 2  # RenameAndExportComponentBuilderDefinitionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RenameAndExportComponentBuilderLoadOptionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RenameAndExportComponentBuilderLoadOptionType():
    """
    load option type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromFolder", " - "
       "FromSearchFolder", " - "
    """
    FromFolder = 0  # RenameAndExportComponentBuilderLoadOptionTypeMemberType
    FromSearchFolder = 1  # RenameAndExportComponentBuilderLoadOptionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RenameAndExportComponentBuilder(NXOpen.Builder):
    """
    Creates rename and export component builder for progressive die.  
    
    No entity is returned. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateRenameAndExportComponentBuilder`
    
    Default values.
    
    ==========================  ===========
    Property                    Value
    ==========================  ===========
    DefineBy                    Selection 
    --------------------------  -----------
    DeleteOldComponentsToggle   0 
    --------------------------  -----------
    ExportDrawingFile           0 
    --------------------------  -----------
    ListChildrenComponents      0 
    --------------------------  -----------
    LoadOption                  FromFolder 
    --------------------------  -----------
    NewNameRule                 None 
    --------------------------  -----------
    ToolingNameRule             Default 
    ==========================  ===========
    
    .. versionadded:: NX11.0.0
    """
    
    class NamingRuleType():
        """
        naming rule 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Prefix", " - "
           "Suffix", " - "
           "ReplaceString", " - "
           "ToolingNameRule", " - "
        """
        NotSet = 0  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
        Prefix = 1  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
        Suffix = 2  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
        ReplaceString = 3  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
        ToolingNameRule = 4  # RenameAndExportComponentBuilderNamingRuleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class NameRuleType():
        """
        tooling naming rule 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Default", " - "
        """
        Default = 0  # RenameAndExportComponentBuilderNameRuleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Types():
        """
        types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RenameCompoent", " - "
           "ExportAssembly", " - "
        """
        RenameCompoent = 0  # RenameAndExportComponentBuilderTypesMemberType
        ExportAssembly = 1  # RenameAndExportComponentBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DefinitionType():
        """
        definition type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Directory", " - "
           "RootPart", " - "
           "Selection", " - "
        """
        Directory = 0  # RenameAndExportComponentBuilderDefinitionTypeMemberType
        RootPart = 1  # RenameAndExportComponentBuilderDefinitionTypeMemberType
        Selection = 2  # RenameAndExportComponentBuilderDefinitionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LoadOptionType():
        """
        load option type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FromFolder", " - "
           "FromSearchFolder", " - "
        """
        FromFolder = 0  # RenameAndExportComponentBuilderLoadOptionTypeMemberType
        FromSearchFolder = 1  # RenameAndExportComponentBuilderLoadOptionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def RenameComponents(self, partTag: NXOpen.NXObject, dirName: str, newPartName: str) -> None:
        """
        Rename components 
        
        Signature ``RenameComponents(partTag, dirName, newPartName)`` 
        
        :param partTag: 
        :type partTag: :py:class:`NXOpen.NXObject` 
        :param dirName: 
        :type dirName: str 
        :param newPartName: 
        :type newPartName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetSearchFolderListForExportDrawingFiles(self, folderList: 'list[str]') -> None:
        """
        Set search folder list 
        
        Signature ``SetSearchFolderListForExportDrawingFiles(folderList)`` 
        
        :param folderList: 
        :type folderList: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ExportComponents(self, partTag: NXOpen.NXObject, assemblyInFolderWithPath: str, outputDir: str) -> None:
        """
        Export components 
        
        Signature ``ExportComponents(partTag, assemblyInFolderWithPath, outputDir)`` 
        
        :param partTag: 
        :type partTag: :py:class:`NXOpen.NXObject` 
        :param assemblyInFolderWithPath: 
        :type assemblyInFolderWithPath: str 
        :param outputDir: 
        :type outputDir: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ExportSingleComponent(self, assemblyPartNameWithPath: str, outputDir: str) -> None:
        """
        Export single component 
        
        Signature ``ExportSingleComponent(assemblyPartNameWithPath, outputDir)`` 
        
        :param assemblyPartNameWithPath: 
        :type assemblyPartNameWithPath: str 
        :param outputDir: 
        :type outputDir: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetDrawingFilesInFolder(self, assemblyPartToExport: NXOpen.NXObject, assemblyInFolderWithPath: str, outputDir: str, onlyGetDrawingFilesNotExport: bool) -> 'list[str]':
        """
        Export components 
        
        Signature ``GetDrawingFilesInFolder(assemblyPartToExport, assemblyInFolderWithPath, outputDir, onlyGetDrawingFilesNotExport)`` 
        
        :param assemblyPartToExport: 
        :type assemblyPartToExport: :py:class:`NXOpen.NXObject` 
        :param assemblyInFolderWithPath: 
        :type assemblyInFolderWithPath: str 
        :param outputDir: 
        :type outputDir: str 
        :param onlyGetDrawingFilesNotExport: 
        :type onlyGetDrawingFilesNotExport: bool 
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ReplaceComponent(self, componentTag: NXOpen.NXObject, newComponentNameWithPath: str) -> None:
        """
        Replace components 
        
        Signature ``ReplaceComponent(componentTag, newComponentNameWithPath)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        :param newComponentNameWithPath: 
        :type newComponentNameWithPath: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AddFolderToSearch: str = ...
    """
    Returns or sets  the add folder to search 
    
    <hr>
    
    Getter Method
    
    Signature ``AddFolderToSearch`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AddFolderToSearch`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DefineBy: RenameAndExportComponentBuilderDefinitionType = ...
    """
    Returns or sets  the define by 
    
    <hr>
    
    Getter Method
    
    Signature ``DefineBy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilderDefinitionType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DefineBy`` 
    
    :param defineBy: 
    :type defineBy: :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilderDefinitionType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DeleteOldComponentsToggle: bool = ...
    """
    Returns or sets  the delete old components toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``DeleteOldComponentsToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeleteOldComponentsToggle`` 
    
    :param deleteOldComponentsToggle: 
    :type deleteOldComponentsToggle: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ExportDrawingFile: bool = ...
    """
    Returns or sets  the export drawing file 
    
    <hr>
    
    Getter Method
    
    Signature ``ExportDrawingFile`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExportDrawingFile`` 
    
    :param exportDrawingFile: 
    :type exportDrawingFile: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ListChildrenComponents: bool = ...
    """
    Returns or sets  the list children components 
    
    <hr>
    
    Getter Method
    
    Signature ``ListChildrenComponents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ListChildrenComponents`` 
    
    :param listChildrenComponents: 
    :type listChildrenComponents: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LoadOption: RenameAndExportComponentBuilderLoadOptionType = ...
    """
    Returns or sets  the load option 
    
    <hr>
    
    Getter Method
    
    Signature ``LoadOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilderLoadOptionType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadOption`` 
    
    :param loadOption: 
    :type loadOption: :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilderLoadOptionType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NeedChangeDisplayPartBack: bool = ...
    """
    Returns or sets  the need change display part back toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``NeedChangeDisplayPartBack`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeedChangeDisplayPartBack`` 
    
    :param needChangeDisplayPartBack: 
    :type needChangeDisplayPartBack: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NewNameRule: RenameAndExportComponentBuilderNamingRuleType = ...
    """
    Returns or sets  the new name rule 
    
    <hr>
    
    Getter Method
    
    Signature ``NewNameRule`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilderNamingRuleType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewNameRule`` 
    
    :param newNameRule: 
    :type newNameRule: :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilderNamingRuleType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NewStringInName: str = ...
    """
    Returns or sets  the new string in name 
    
    <hr>
    
    Getter Method
    
    Signature ``NewStringInName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewStringInName`` 
    
    :param newStringInName: 
    :type newStringInName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NextPartNameNumber: int = ...
    """
    Returns or sets  the next part name number 
    
    <hr>
    
    Getter Method
    
    Signature ``NextPartNameNumber`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NextPartNameNumber`` 
    
    :param nextPartNameNumber: 
    :type nextPartNameNumber: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OldStringInName: str = ...
    """
    Returns or sets  the old string in name 
    
    <hr>
    
    Getter Method
    
    Signature ``OldStringInName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OldStringInName`` 
    
    :param oldStringInName: 
    :type oldStringInName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OutputDiretory: str = ...
    """
    Returns or sets  the output diretory 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputDiretory`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutputDiretory`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PartDirectory: str = ...
    """
    Returns or sets  the part directory 
    
    <hr>
    
    Getter Method
    
    Signature ``PartDirectory`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartDirectory`` 
    
    :param partDirectory: 
    :type partDirectory: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PrefixOrSuffixString: str = ...
    """
    Returns or sets  the prefix or suffix string 
    
    <hr>
    
    Getter Method
    
    Signature ``PrefixOrSuffixString`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrefixOrSuffixString`` 
    
    :param prefixOrSuffixString: 
    :type prefixOrSuffixString: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectAssemblyInFolder: str = ...
    """
    Returns or sets  the select assembly in folder 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAssemblyInFolder`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectAssemblyInFolder`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectAssemblyToExport: NXOpen.SelectNXObject = ...
    """
    Returns  the select assembly to export 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAssemblyToExport`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectComponentToRename: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select component to rename 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponentToRename`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ToolingNameRule: str = ...
    """
    Returns or sets  the tooling name rule 
    
    <hr>
    
    Getter Method
    
    Signature ``ToolingNameRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolingNameRule`` 
    
    :param toolingNameRule: 
    :type toolingNameRule: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: RenameAndExportComponentBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.RenameAndExportComponentBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: RenameAndExportComponentBuilder = ...  # unknown typename


class SectionLineCreationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.SectionLineCreationBuilder` which is 
    used to create or edit the section line creation.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ToolingDrawingCollection.CreateSectionLineCreationBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    def ReverseVector(self) -> None:
        """
        Reverse vector direction 
        
        Signature ``ReverseVector()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def PointSubFunction(self) -> None:
        """
        Define the cut segment position 
        
        Signature ``PointSubFunction()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def RemoveLast(self, curveTag: NXOpen.Line) -> None:
        """
        Remove the last cut segment 
        
        Signature ``RemoveLast(curveTag)`` 
        
        :param curveTag: 
        :type curveTag: :py:class:`NXOpen.Line` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def RemoveAll(self, curveList: 'list[NXOpen.Line]') -> None:
        """
        Remove all cut segments 
        
        Signature ``RemoveAll(curveList)`` 
        
        :param curveList: 
        :type curveList: list of :py:class:`NXOpen.Line` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateTemporaryLine(self, pointData: NXOpen.Point3d, direction: NXOpen.Vector3d) -> NXOpen.Line:
        """
        Create temporary line  
        
        Signature ``CreateTemporaryLine(pointData, direction)`` 
        
        :param pointData: 
        :type pointData: :py:class:`NXOpen.Point3d` 
        :param direction: 
        :type direction: :py:class:`NXOpen.Vector3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.Line` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    SelectPoint: NXOpen.Point = ...
    """
    Returns or sets  the pnt select point 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectPoint`` 
    
    :param pntSelectPoint: 
    :type pntSelectPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    VectorDefineDirection: NXOpen.Direction = ...
    """
    Returns or sets  the vector direction 
    
    <hr>
    
    Getter Method
    
    Signature ``VectorDefineDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VectorDefineDirection`` 
    
    :param vectorDefineDirection: 
    :type vectorDefineDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: SectionLineCreationBuilder = ...  # unknown typename


class BlendCurve3DBuilderBlendCurveOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlendCurve3DBuilderBlendCurveOptions():
    """
    The blend curve creation methods: Best Fit, Variable, Vector, Current View 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BestFit", "Create blend curve by best fit method"
       "Variable", "Create blend curve by variable method"
       "Vector", "Create blend curve by vector method"
       "CurrentView", "Create blend curve by current view method"
    """
    BestFit = 0  # BlendCurve3DBuilderBlendCurveOptionsMemberType
    Variable = 1  # BlendCurve3DBuilderBlendCurveOptionsMemberType
    Vector = 2  # BlendCurve3DBuilderBlendCurveOptionsMemberType
    CurrentView = 3  # BlendCurve3DBuilderBlendCurveOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlendCurve3DBuilderInputCurvesOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BlendCurve3DBuilderInputCurvesOption():
    """
    The input curves option to keep, hide or delete input curves 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Keep", "Keep input curves"
       "Hide", "Hide input curves"
       "Delete", "Delete input curves"
    """
    Keep = 0  # BlendCurve3DBuilderInputCurvesOptionMemberType
    Hide = 1  # BlendCurve3DBuilderInputCurvesOptionMemberType
    Delete = 2  # BlendCurve3DBuilderInputCurvesOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BlendCurve3DBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.BlendCurve3DBuilder` builder which implements 
    blend curves in one side where the corner radius is too small.  
    
    This builder's Commit generally
    can produce only one (sometimes more than one) new blended curve, the GetCommittedObjects can be 
    used to get the objects. The input curves will be deleted. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.CAMDataManager.CreateBlendCurve3dBuilder`
    
    Default values.
    
    ==================  ===============================================
    Property            Value
    ==================  ===============================================
    BlendCurveOption    Vector 
    ------------------  -----------------------------------------------
    DistanceTolerance   0.0254 (millimeters part), 0.001 (inches part) 
    ------------------  -----------------------------------------------
    InputCurves         Hide 
    ------------------  -----------------------------------------------
    MinimalRadius       10 (millimeters part), 0.4 (inches part) 
    ==================  ===============================================
    
    .. versionadded:: NX9.0.0
    """
    
    class BlendCurveOptions():
        """
        The blend curve creation methods: Best Fit, Variable, Vector, Current View 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BestFit", "Create blend curve by best fit method"
           "Variable", "Create blend curve by variable method"
           "Vector", "Create blend curve by vector method"
           "CurrentView", "Create blend curve by current view method"
        """
        BestFit = 0  # BlendCurve3DBuilderBlendCurveOptionsMemberType
        Variable = 1  # BlendCurve3DBuilderBlendCurveOptionsMemberType
        Vector = 2  # BlendCurve3DBuilderBlendCurveOptionsMemberType
        CurrentView = 3  # BlendCurve3DBuilderBlendCurveOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class InputCurvesOption():
        """
        The input curves option to keep, hide or delete input curves 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Keep", "Keep input curves"
           "Hide", "Hide input curves"
           "Delete", "Delete input curves"
        """
        Keep = 0  # BlendCurve3DBuilderInputCurvesOptionMemberType
        Hide = 1  # BlendCurve3DBuilderInputCurvesOptionMemberType
        Delete = 2  # BlendCurve3DBuilderInputCurvesOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SaveFilletCurves(self) -> None:
        """
        Save the corner fillet curves.  
        
        Signature ``SaveFilletCurves()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateBlendCurves(self) -> 'list[NXOpen.Curve]':
        """
        Creates the blend curves for preview.  
        
        Signature ``CreateBlendCurves()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteBlendCurves(self, blendCurves: 'list[NXOpen.Curve]') -> None:
        """
        Delete the preview blend curves.  
        
        Signature ``DeleteBlendCurves(blendCurves)`` 
        
        :param blendCurves: 
        :type blendCurves: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    BlendCurveOption: BlendCurve3DBuilderBlendCurveOptions = ...
    """
    Returns or sets  the blend curve option 
    
    <hr>
    
    Getter Method
    
    Signature ``BlendCurveOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlendCurve3DBuilderBlendCurveOptions` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlendCurveOption`` 
    
    :param blendCurveOption: 
    :type blendCurveOption: :py:class:`NXOpen.Tooling.BlendCurve3DBuilderBlendCurveOptions` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    CornerFillet: NXOpen.ScCollector = ...
    """
    Returns  the corners to blend.  
    
    <hr>
    
    Getter Method
    
    Signature ``CornerFillet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    CurveBlend: NXOpen.ScCollector = ...
    """
    Returns  the curves to blend.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurveBlend`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    InputCurves: BlendCurve3DBuilderInputCurvesOption = ...
    """
    Returns or sets  the input curves 
    
    <hr>
    
    Getter Method
    
    Signature ``InputCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BlendCurve3DBuilderInputCurvesOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InputCurves`` 
    
    :param inputCurves: 
    :type inputCurves: :py:class:`NXOpen.Tooling.BlendCurve3DBuilderInputCurvesOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    MinimalRadius: float = ...
    """
    Returns or sets  the minimal radius of the corner to blend.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimalRadius`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimalRadius`` 
    
    :param minimalRadius: 
    :type minimalRadius: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    ReferenceDirection: NXOpen.Direction = ...
    """
    Returns or sets  the reference direction from which to get the curve blend side.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceDirection`` 
    
    :param referenceDirection: 
    :type referenceDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    ReverseSide: bool = ...
    """
    Returns or sets  the flag of reverse curve blend side.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseSide`` 
    
    :param reverseSide: 
    :type reverseSide: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    Null: BlendCurve3DBuilder = ...  # unknown typename


class StripperVentingBuilder(NXOpen.Builder):
    """
    Stripper Venting Builder of PDW and EDW.  
    
    A Body is returned by this builder. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateStripperVentingBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length of venting hole 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the blend radius of venting hole 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SelectEdge: NXOpen.SelectEdgeList = ...
    """
    Returns  the select edge for cutting venting hole 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width of venting hole 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: StripperVentingBuilder = ...  # unknown typename


class SpecifyBaffleCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Specify Baffle builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> SpecifyBaffleBuilder:
        """
        Creates a SpecifyBaffle builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`SpecifyBaffleBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.SpecifyBaffleBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class BendOperationCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.BendOperationBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBendOperationBuilder(self) -> BendOperationBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.BendOperationBuilder`  
        
        Signature ``CreateBendOperationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.BendOperationBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> BendOperationBuilder:
        """
        Finds the :py:class:`NXOpen.Tooling.BendOperationBuilder` with the given identifier as 
        recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier
        in different versions of the software. However newer versions of the software should find 
        the same object when FindObject is passed older versions of its journal identifier. In general,
        this method should not be used in handwritten code and exists to support record and 
        playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier. 
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier to be found  
        :type journalIdentifier: str 
        :returns:  BendOperationBuilder found  
        :rtype: :py:class:`NXOpen.Tooling.BendOperationBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    


class MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWDesignPartingSurfaceBuilderPartingSurfaceType():
    """
    The type of parting surface to be created. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Extrude", "Extrude"
       "Swept", "Swept"
       "BoundedPlane", "Bounded plane"
       "EnlargedSurface", "Enlarge"
       "TrimandExtend", "Trim and extend"
       "RibbonSurface", "Ribbon"
       "GuidedExtension", "Guided Extension"
    """
    Extrude = 0  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
    Swept = 1  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
    BoundedPlane = 2  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
    EnlargedSurface = 3  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
    TrimandExtend = 4  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
    RibbonSurface = 5  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
    GuidedExtension = 6  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionType():
    """
    The region type from which to trim and extend when creating parting surface. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Cavity", "From cavity region"
       "Core", "From core region"
       "NotSet", "New option for guided extension surface only"
    """
    Cavity = 0  # MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionTypeMemberType
    Core = 1  # MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionTypeMemberType
    NotSet = 2  # MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWDesignPartingSurfaceBuilderTransitionSurfaceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWDesignPartingSurfaceBuilderTransitionSurfaceType():
    """
    The type of transition surface to be created. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Auto", "Auto transition surface"
       "BoundedPlane", "Bounded transition surface"
       "Swept", "Swept transition surface"
       "Bridge", "Bridge transition surface"
    """
    Auto = 0  # MWDesignPartingSurfaceBuilderTransitionSurfaceTypeMemberType
    BoundedPlane = 1  # MWDesignPartingSurfaceBuilderTransitionSurfaceTypeMemberType
    Swept = 2  # MWDesignPartingSurfaceBuilderTransitionSurfaceTypeMemberType
    Bridge = 3  # MWDesignPartingSurfaceBuilderTransitionSurfaceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWDesignPartingSurfaceBuilderObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWDesignPartingSurfaceBuilderObjectType():
    """
    The type of parting objects to be edited or placed. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PartingSurface", "Parting surface"
       "PartingLine", "Parting line"
       "GuideLine", "Guide line"
       "TransitionObject", "Transition object"
    """
    PartingSurface = 0  # MWDesignPartingSurfaceBuilderObjectTypeMemberType
    PartingLine = 1  # MWDesignPartingSurfaceBuilderObjectTypeMemberType
    GuideLine = 2  # MWDesignPartingSurfaceBuilderObjectTypeMemberType
    TransitionObject = 3  # MWDesignPartingSurfaceBuilderObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWDesignPartingSurfaceBuilder(NXOpen.Builder):
    """
    The builder for designing parting surface in Mold Wizard.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWDesignPartingSurfaceCollection.CreateBuilder`
    
    Default values.
    
    ============================  ======================================
    Property                      Value
    ============================  ======================================
    AlternateMethod               0 
    ----------------------------  --------------------------------------
    CreateAsPartingSurface        1 
    ----------------------------  --------------------------------------
    CreateExtrudeSweptPreview     0 
    ----------------------------  --------------------------------------
    EnlargeOtherFaceOption        0 
    ----------------------------  --------------------------------------
    ExtendDistance.Value          1 (millimeters part), 1 (inches part) 
    ----------------------------  --------------------------------------
    ExtrudeDistance               60 
    ----------------------------  --------------------------------------
    ExtrudeDraftAngle             0 
    ----------------------------  --------------------------------------
    ResizeAllDirections           1 
    ----------------------------  --------------------------------------
    SurfaceRange.AnchorPosition   Vertex1 
    ----------------------------  --------------------------------------
    SurfaceTolerance              0.01 
    ----------------------------  --------------------------------------
    SurfaceType                   Extrude 
    ----------------------------  --------------------------------------
    TransitionSurfType            Auto 
    ----------------------------  --------------------------------------
    TrimAndExtendFromRegion       Cavity 
    ----------------------------  --------------------------------------
    TrimWithGuideLines            1 
    ----------------------------  --------------------------------------
    UseDefaultKeepSide            1 
    ============================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    
    class PartingSurfaceType():
        """
        The type of parting surface to be created. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Extrude", "Extrude"
           "Swept", "Swept"
           "BoundedPlane", "Bounded plane"
           "EnlargedSurface", "Enlarge"
           "TrimandExtend", "Trim and extend"
           "RibbonSurface", "Ribbon"
           "GuidedExtension", "Guided Extension"
        """
        Extrude = 0  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
        Swept = 1  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
        BoundedPlane = 2  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
        EnlargedSurface = 3  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
        TrimandExtend = 4  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
        RibbonSurface = 5  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
        GuidedExtension = 6  # MWDesignPartingSurfaceBuilderPartingSurfaceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimAndExtendFromRegionType():
        """
        The region type from which to trim and extend when creating parting surface. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Cavity", "From cavity region"
           "Core", "From core region"
           "NotSet", "New option for guided extension surface only"
        """
        Cavity = 0  # MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionTypeMemberType
        Core = 1  # MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionTypeMemberType
        NotSet = 2  # MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TransitionSurfaceType():
        """
        The type of transition surface to be created. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Auto", "Auto transition surface"
           "BoundedPlane", "Bounded transition surface"
           "Swept", "Swept transition surface"
           "Bridge", "Bridge transition surface"
        """
        Auto = 0  # MWDesignPartingSurfaceBuilderTransitionSurfaceTypeMemberType
        BoundedPlane = 1  # MWDesignPartingSurfaceBuilderTransitionSurfaceTypeMemberType
        Swept = 2  # MWDesignPartingSurfaceBuilderTransitionSurfaceTypeMemberType
        Bridge = 3  # MWDesignPartingSurfaceBuilderTransitionSurfaceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ObjectType():
        """
        The type of parting objects to be edited or placed. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PartingSurface", "Parting surface"
           "PartingLine", "Parting line"
           "GuideLine", "Guide line"
           "TransitionObject", "Transition object"
        """
        PartingSurface = 0  # MWDesignPartingSurfaceBuilderObjectTypeMemberType
        PartingLine = 1  # MWDesignPartingSurfaceBuilderObjectTypeMemberType
        GuideLine = 2  # MWDesignPartingSurfaceBuilderObjectTypeMemberType
        TransitionObject = 3  # MWDesignPartingSurfaceBuilderObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InitializeOnEntry(self) -> None:
        """
        Perform initialization tasks when entering the Design Parting Surface command.  
        
        Signature ``InitializeOnEntry()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DisplayObjectsOnEntry(self) -> None:
        """
        Display the parting surfaces, guide lines, and parting lines when entering the Design Parting Surface command.  
        
        Signature ``DisplayObjectsOnEntry()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ChangePartingObjectType(self, partingObjectType: int) -> None:
        """
        Change the type of parting objects to be placed or edited.  
        
        Signature ``ChangePartingObjectType(partingObjectType)`` 
        
        :param partingObjectType:  Parting object type  
        :type partingObjectType: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def PreCreateBoundedPlaneAndEnlargedSurface(self) -> None:
        """
        Pre-create a bounded plane or enlarged surface when the respective surface type is on.  
        
        Signature ``PreCreateBoundedPlaneAndEnlargedSurface()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearPreCreatedBoundedPlaneAndEnlargedSurface(self, differentSegment: int) -> None:
        """
        Clear the pre-created bounded plane and enlarged surface if no longer needed.  
        
        Signature ``ClearPreCreatedBoundedPlaneAndEnlargedSurface(differentSegment)`` 
        
        :param differentSegment:  Different segment flag  
        :type differentSegment: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearPreCreatedExtrudeAndSweptSurface(self, deleteSheet: int) -> None:
        """
        Clear the pre-created extrude and swept surfaces for preview if no longer needed.  
        
        Signature ``ClearPreCreatedExtrudeAndSweptSurface(deleteSheet)`` 
        
        :param deleteSheet:  Delete sheet flag  
        :type deleteSheet: int 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateExtrudeDistanceExpression(self, extrudeDistance: float) -> None:
        """
        Update the expression for the parting surface extrude distance with a new value.  
        
        Signature ``UpdateExtrudeDistanceExpression(extrudeDistance)`` 
        
        :param extrudeDistance:  Extrude distance for expression  
        :type extrudeDistance: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeletePartingSurface(self, partingSheet: NXOpen.Body) -> None:
        """
        Delete a newly created parting surface.  
        
        Signature ``DeletePartingSurface(partingSheet)`` 
        
        :param partingSheet:  Parting sheet to be deleted  
        :type partingSheet: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FinalizeCreatePartingSurface(self) -> None:
        """
        Finalize the creation of bounded plane or enlarged surface parting surface.  
        
        Signature ``FinalizeCreatePartingSurface()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def FlipTrimmedSheet(self) -> None:
        """
        Flip the trimmed bounded plane or the enlarged surface for parting surface.  
        
        Signature ``FlipTrimmedSheet()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSurfaceData(self, faceTag: NXOpen.Face) -> None:
        """
        Create surface data for enlarged surface.  
        
        Signature ``CreateSurfaceData(faceTag)`` 
        
        :param faceTag:  Face for the surface data  
        :type faceTag: :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdatePreviewSurface(self) -> None:
        """
        Update the preview surface for the bounded plane or enlarged surface.  
        
        Signature ``UpdatePreviewSurface()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdatePartingLines(self) -> None:
        """
        Update parting lines after traversing parting lines.  
        
        Signature ``UpdatePartingLines()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateEditPartingLines(self) -> None:
        """
        Update the parting lines being edited to reflect the change immediately 
        
        Signature ``UpdateEditPartingLines()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateTransitionPoints(self) -> None:
        """
        Update transition points after editing guide lines.  
        
        Signature ``UpdateTransitionPoints()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CheckSuppressParting(self) -> None:
        """
        Check if suppressing parting is needed.  
        
        Signature ``CheckSuppressParting()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateExtrudeAndSweptSheets(self, directionChange: int) -> None:
        """
        Method to update the temporary Extrude and Swept sheets for changes in UI.  
        
        Signature ``UpdateExtrudeAndSweptSheets(directionChange)`` 
        
        :param directionChange: 
        :type directionChange: int 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteAllPartingSurfaces(self) -> None:
        """
        Method to delete all the parting surfaces before auto create parting surfaces if the user chooses to do so.  
        
        Signature ``DeleteAllPartingSurfaces()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AutoCreatePartingSurfaces(self) -> None:
        """
        Method to auto create parting surfaces.  
        
        Signature ``AutoCreatePartingSurfaces()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateAllSegmentsAutoCreateInfo(self) -> None:
        """
        Method to update the auto create info for all parting segments.  
        
        Signature ``UpdateAllSegmentsAutoCreateInfo()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateSegmentAutoCreateInfo(self) -> None:
        """
        Method to update the auto create info for the selected parting segment 
        
        Signature ``UpdateSegmentAutoCreateInfo()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateInApplyStatus(self, inApplyStatus: int) -> None:
        """
        Method to update the Apply status of the command.  
        
        Signature ``UpdateInApplyStatus(inApplyStatus)`` 
        
        :param inApplyStatus: 
        :type inApplyStatus: int 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSectionForGuidedExtensionPreview(self) -> None:
        """
        Method to create a section for the preview of guided extension surface 
        
        Signature ``CreateSectionForGuidedExtensionPreview()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateBuilderPartingLinesHashTable(self) -> None:
        """
        Method to update the hash table of parting lines of the builder 
        
        Signature ``UpdateBuilderPartingLinesHashTable()`` 
        
        .. versionadded:: NX11.0.2
        
        License requirements: None.
        """
        ...
    
    AlternateMethod: bool = ...
    """
    Returns or sets  the option to use the system provided alternate method to create transition parting surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlternateMethod`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlternateMethod`` 
    
    :param alternateMethod: 
    :type alternateMethod: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CreateAsPartingSurface: bool = ...
    """
    Returns or sets  the option to create surface as parting surface 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateAsPartingSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateAsPartingSurface`` 
    
    :param createAsPartingSurface: 
    :type createAsPartingSurface: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    CreateExtrudeSweptPreview: bool = ...
    """
    Returns or sets  the option to turn on or off the preview for Extrude or Swept parting surface 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateExtrudeSweptPreview`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateExtrudeSweptPreview`` 
    
    :param createExtrudeSweptPreview: 
    :type createExtrudeSweptPreview: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    EditPartingLines: NXOpen.ScCollector = ...
    """
    Returns  the parting lines to edit.  
    
    <hr>
    
    Getter Method
    
    Signature ``EditPartingLines`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    EnlargeOtherFaceOption: bool = ...
    """
    Returns or sets  the option for enlarging the other face that connects to the same edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnlargeOtherFaceOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnlargeOtherFaceOption`` 
    
    :param enlargeOtherFaceOption: 
    :type enlargeOtherFaceOption: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ExtendDistance: NXOpen.Expression = ...
    """
    Returns  the extend distance for creating parting surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ExtrudeDirection: NXOpen.Direction = ...
    """
    Returns or sets  the extrude or first direction used in creating parting surface that requires only one direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtrudeDirection`` 
    
    :param extrudeDirection: 
    :type extrudeDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ExtrudeDistance: float = ...
    """
    Returns or sets  the extrude distance for updating the expression "parting_extrude_distance".  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtrudeDistance`` 
    
    :param extrudeDistance: 
    :type extrudeDistance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ExtrudeDraftAngle: float = ...
    """
    Returns or sets  the draft angle for extrude parting surface 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeDraftAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtrudeDraftAngle`` 
    
    :param extrudeDraftAngle: 
    :type extrudeDraftAngle: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    GuideOrPartingLine: NXOpen.SelectCurve = ...
    """
    Returns  the guide or parting line to create or edit a guide line.  
    
    <hr>
    
    Getter Method
    
    Signature ``GuideOrPartingLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurve` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PartingLines: NXOpen.SelectCurveList = ...
    """
    Returns  the parting lines for creating parting surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``PartingLines`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurveList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PrimaryEdges: NXOpen.SelectEdgeList = ...
    """
    Returns  the primary edges for creating transition parting surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ResizeAllDirections: bool = ...
    """
    Returns or sets  the option to enlarge or resize surface for all directions.  
    
    <hr>
    
    Getter Method
    
    Signature ``ResizeAllDirections`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ResizeAllDirections`` 
    
    :param resizeAllDirections: 
    :type resizeAllDirections: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SecondDirection: NXOpen.Direction = ...
    """
    Returns or sets  the second direction used in creating parting surface that requires two directions.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondDirection`` 
    
    :param secondDirection: 
    :type secondDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SurfaceRange: NXOpen.GeometricUtilities.SurfaceRangeBuilder = ...
    """
    Returns  the surface range for enlarging surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SurfaceRangeBuilder` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    SurfaceTolerance: float = ...
    """
    Returns or sets  the surface tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceTolerance`` 
    
    :param surfaceTolerance: 
    :type surfaceTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SurfaceType: MWDesignPartingSurfaceBuilderPartingSurfaceType = ...
    """
    Returns or sets  the type of parting surface to be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDesignPartingSurfaceBuilderPartingSurfaceType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SurfaceType`` 
    
    :param surfaceType: 
    :type surfaceType: :py:class:`NXOpen.Tooling.MWDesignPartingSurfaceBuilderPartingSurfaceType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TransitionObjects: NXOpen.SelectCurveList = ...
    """
    Returns  the transition curves or points used in creating transition parting surface.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurveList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TransitionSurfType: MWDesignPartingSurfaceBuilderTransitionSurfaceType = ...
    """
    Returns or sets  the type of transition surface to be created.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransitionSurfType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDesignPartingSurfaceBuilderTransitionSurfaceType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransitionSurfType`` 
    
    :param transitionSurfType: 
    :type transitionSurfType: :py:class:`NXOpen.Tooling.MWDesignPartingSurfaceBuilderTransitionSurfaceType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimAndExtendFromRegion: MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionType = ...
    """
    Returns or sets  the option for "trim and extend" from the cavity or core region.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimAndExtendFromRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimAndExtendFromRegion`` 
    
    :param trimAndExtendFromRegion: 
    :type trimAndExtendFromRegion: :py:class:`NXOpen.Tooling.MWDesignPartingSurfaceBuilderTrimAndExtendFromRegionType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimWithGuideLines: bool = ...
    """
    Returns or sets  the option to trim with guide lines.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimWithGuideLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimWithGuideLines`` 
    
    :param trimWithGuideLines: 
    :type trimWithGuideLines: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseDefaultKeepSide: bool = ...
    """
    Returns or sets  the option to use the default keep side for trimming bounded plane or enlarged surface 
    
    <hr>
    
    Getter Method
    
    Signature ``UseDefaultKeepSide`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseDefaultKeepSide`` 
    
    :param useDefaultKeepSide: 
    :type useDefaultKeepSide: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: MWDesignPartingSurfaceBuilder = ...  # unknown typename


class MWSearchRegionBuilder(NXOpen.Builder):
    """
    The Search Region builder is for defining a region by searching the region faces given a set of seed faces and boundary edges.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWSearchRegionCollection.CreateBuilder`
    
    Default values.
    
    ==================================  =====
    Property                            Value
    ==================================  =====
    HighlightConnectingFacesScale       0 
    ----------------------------------  -----
    MaximumNumberOfFacesSearched        1 
    ----------------------------------  -----
    TranslucencyAsBoundaryFacesToggle   0 
    ==================================  =====
    
    .. versionadded:: NX6.0.0
    """
    
    def ChangeBoundaryFacesColor(self) -> None:
        """
        Change the color of the selected boundary using the specified color 
        
        Signature ``ChangeBoundaryFacesColor()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def InitBuilderData(self) -> None:
        """
        Initialize the data for the Search Region builder 
        
        Signature ``InitBuilderData()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def DisplayProductBody(self) -> None:
        """
        Display the product body in the part file 
        
        Signature ``DisplayProductBody()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def TurnOffAllPartingLines(self) -> None:
        """
        Turn off all parting lines 
        
        Signature ``TurnOffAllPartingLines()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def UpdateRegion(self) -> None:
        """
        Update the region with the new region faces and seed faces 
        
        Signature ``UpdateRegion()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    BoundaryFacesColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color to be applied to the selected boundary faces 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryFacesColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryFacesColor`` 
    
    :param boundaryFacesColor: 
    :type boundaryFacesColor: Id 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    """
    DifferentColorsAsBoundaryFacesOption: bool = ...
    """
    Returns or sets  the option to use different colors as boundary faces 
    
    <hr>
    
    Getter Method
    
    Signature ``DifferentColorsAsBoundaryFacesOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DifferentColorsAsBoundaryFacesOption`` 
    
    :param differentColorsAsBoundaryFacesOption: 
    :type differentColorsAsBoundaryFacesOption: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HighlightConnectingFacesScale: int = ...
    """
    Returns or sets  the highlight connecting faces scale 
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightConnectingFacesScale`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightConnectingFacesScale`` 
    
    :param highlightConnectingFacesScale: 
    :type highlightConnectingFacesScale: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MaximumNumberOfFacesSearched: int = ...
    """
    Returns or sets  the maximum number of faces to be searched 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumNumberOfFacesSearched`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumNumberOfFacesSearched`` 
    
    :param maximumNumberOfFacesSearched: 
    :type maximumNumberOfFacesSearched: int 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    """
    SelectBoundaryEdges: NXOpen.SelectEdgeList = ...
    """
    Returns  the select boundary edges 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBoundaryEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectBoundaryFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the select boundary faces 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectBoundaryFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    """
    SelectSeedFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the select seed faces 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectSeedFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TranslucencyAsBoundaryFacesToggle: bool = ...
    """
    Returns or sets  the translucency as boundary faces toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``TranslucencyAsBoundaryFacesToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TranslucencyAsBoundaryFacesToggle`` 
    
    :param translucencyAsBoundaryFacesToggle: 
    :type translucencyAsBoundaryFacesToggle: bool 
    
    .. versionadded:: NX6.0.3
    
    License requirements: None.
    """
    Null: MWSearchRegionBuilder = ...  # unknown typename


class SpecialFormingBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialFormingBuilderTypes():
    """
    Specifies the main page type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CreateBasicInsert", " - "
       "ExtendCurveAndCreateBox", " - "
       "TrimInsert", " - "
       "ModifyInsert", " - "
       "DeleteInsert", " - "
    """
    CreateBasicInsert = 0  # SpecialFormingBuilderTypesMemberType
    ExtendCurveAndCreateBox = 1  # SpecialFormingBuilderTypesMemberType
    TrimInsert = 2  # SpecialFormingBuilderTypesMemberType
    ModifyInsert = 3  # SpecialFormingBuilderTypesMemberType
    DeleteInsert = 4  # SpecialFormingBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialFormingBuilderParentValueMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialFormingBuilderParentValue():
    """
    Specifies the main page type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PrjDie", " - "
       "PrjDb", " - "
       "PrjSub", " - "
    """
    PrjDie = 0  # SpecialFormingBuilderParentValueMemberType
    PrjDb = 1  # SpecialFormingBuilderParentValueMemberType
    PrjSub = 2  # SpecialFormingBuilderParentValueMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialFormingBuilderPunchOrDieMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialFormingBuilderPunchOrDie():
    """
    Specifies the main page type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Punch", " - "
       "Die", " - "
    """
    Punch = 0  # SpecialFormingBuilderPunchOrDieMemberType
    Die = 1  # SpecialFormingBuilderPunchOrDieMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialFormingBuilderBlockTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecialFormingBuilderBlockType():
    """
    the block type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BoundedBlock", " - "
       "UserDefined", " - "
    """
    BoundedBlock = 0  # SpecialFormingBuilderBlockTypeMemberType
    UserDefined = 1  # SpecialFormingBuilderBlockTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecialFormingBuilder(NXOpen.Builder):
    """
    Creates special forming insert builder for progressive die.  
    
    No entity is returned. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateSpecialFormingBuilder`
    
    Default values.
    
    ==========================  ======================================
    Property                    Value
    ==========================  ======================================
    BoundedBlockOrUserDefined   BoundedBlock 
    --------------------------  --------------------------------------
    BoxClearance                0 
    --------------------------  --------------------------------------
    EndLimit.Value              0 (millimeters part), 0 (inches part) 
    --------------------------  --------------------------------------
    FirstClearance              0 
    --------------------------  --------------------------------------
    InsertType                  Punch 
    --------------------------  --------------------------------------
    NeedFirstClearance          0 
    --------------------------  --------------------------------------
    NeedSecondClearance         0 
    --------------------------  --------------------------------------
    NeedThirdClearance          0 
    --------------------------  --------------------------------------
    Parent                      PrjDie 
    --------------------------  --------------------------------------
    RenameComponent             0 
    --------------------------  --------------------------------------
    SecondClearance             0 
    --------------------------  --------------------------------------
    StartLimit.Value            0 (millimeters part), 0 (inches part) 
    --------------------------  --------------------------------------
    ThirdClearance              0 
    --------------------------  --------------------------------------
    UseExistingSheetBody        0 
    --------------------------  --------------------------------------
    WithoutFalseBody            0 
    ==========================  ======================================
    
    .. versionadded:: NX11.0.0
    """
    
    class Types():
        """
        Specifies the main page type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CreateBasicInsert", " - "
           "ExtendCurveAndCreateBox", " - "
           "TrimInsert", " - "
           "ModifyInsert", " - "
           "DeleteInsert", " - "
        """
        CreateBasicInsert = 0  # SpecialFormingBuilderTypesMemberType
        ExtendCurveAndCreateBox = 1  # SpecialFormingBuilderTypesMemberType
        TrimInsert = 2  # SpecialFormingBuilderTypesMemberType
        ModifyInsert = 3  # SpecialFormingBuilderTypesMemberType
        DeleteInsert = 4  # SpecialFormingBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParentValue():
        """
        Specifies the main page type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PrjDie", " - "
           "PrjDb", " - "
           "PrjSub", " - "
        """
        PrjDie = 0  # SpecialFormingBuilderParentValueMemberType
        PrjDb = 1  # SpecialFormingBuilderParentValueMemberType
        PrjSub = 2  # SpecialFormingBuilderParentValueMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PunchOrDie():
        """
        Specifies the main page type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Punch", " - "
           "Die", " - "
        """
        Punch = 0  # SpecialFormingBuilderPunchOrDieMemberType
        Die = 1  # SpecialFormingBuilderPunchOrDieMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BlockType():
        """
        the block type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BoundedBlock", " - "
           "UserDefined", " - "
        """
        BoundedBlock = 0  # SpecialFormingBuilderBlockTypeMemberType
        UserDefined = 1  # SpecialFormingBuilderBlockTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateFormingInsert(self) -> None:
        """
        Create forming insert 
        
        Signature ``CreateFormingInsert()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetBoxMatrixAndPosition(self, matrix: NXOpen.Matrix3x3, position: NXOpen.Point3d) -> None:
        """
        Sets box csys matrix.  
        
        Signature ``SetBoxMatrixAndPosition(matrix, position)`` 
        
        :param matrix: 
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        :param position: 
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CalculateBoxSize(self) -> None:
        """
        Calculate box size and set directions, edge length, lower point position.  
        
        Signature ``CalculateBoxSize()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SewWaveLinkedFaceAndGuidedExtensionSheet(self) -> None:
        """
        Sew wave linked face and guided extension sheet.  
        
        Signature ``SewWaveLinkedFaceAndGuidedExtensionSheet()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateBoundBox(self) -> None:
        """
        Create bound box.  
        
        Signature ``CreateBoundBox()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def EditBoundBox(self) -> None:
        """
        Edit bound box.  
        
        Signature ``EditBoundBox()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ExtrudeCurvesToTrueBodyAndFalseBody(self) -> None:
        """
        Extrude curves to true body and false body.  
        
        Signature ``ExtrudeCurvesToTrueBodyAndFalseBody()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def EditExtrudeCurves(self) -> None:
        """
        Edit extrude curves.  
        
        Signature ``EditExtrudeCurves()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def TrimTrueBodyWithSewedSheet(self) -> None:
        """
        Trim true body with sewed sheet.  
        
        Signature ``TrimTrueBodyWithSewedSheet()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def MoveObjectsToUndisplayableLayer(self) -> None:
        """
        Move objects to undisplayable layer.  
        
        Signature ``MoveObjectsToUndisplayableLayer()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AssignClearance(self) -> None:
        """
        Assign clearance.  
        
        Signature ``AssignClearance()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AddInsertPartIntoAssembly(self, parentPart: NXOpen.NXObject, templatePartName: str, origin: NXOpen.Point3d) -> NXOpen.NXObject:
        """
        Add insert part into assembly.  
        
        Signature ``AddInsertPartIntoAssembly(parentPart, templatePartName, origin)`` 
        
        :param parentPart: 
        :type parentPart: :py:class:`NXOpen.NXObject` 
        :param templatePartName: 
        :type templatePartName: str 
        :param origin: 
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetFormingRegion(self, faces: 'list[NXOpen.NXObject]') -> None:
        """
        Set forming region.  
        
        Signature ``SetFormingRegion(faces)`` 
        
        :param faces: 
        :type faces: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def WaveFormingRegion(self) -> None:
        """
        Wave forming region.  
        
        Signature ``WaveFormingRegion()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateOffsetDatumPlaneForSketch(self) -> None:
        """
        Create offset datum plane for sketch.  
        
        Signature ``CreateOffsetDatumPlaneForSketch()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AssignAttributeForSketchFeature(self, sketchFeatureTag: NXOpen.NXObject) -> None:
        """
        Assign attribute for sketch feature.  
        
        Signature ``AssignAttributeForSketchFeature(sketchFeatureTag)`` 
        
        :param sketchFeatureTag: 
        :type sketchFeatureTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteSelectedInsert(self) -> None:
        """
        Delete selected insert.  
        
        Signature ``DeleteSelectedInsert()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    BoundedBlockOrUserDefined: SpecialFormingBuilderBlockType = ...
    """
    Returns or sets  the bounded block or user defined 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundedBlockOrUserDefined`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialFormingBuilderBlockType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundedBlockOrUserDefined`` 
    
    :param boundedBlockOrUserDefined: 
    :type boundedBlockOrUserDefined: :py:class:`NXOpen.Tooling.SpecialFormingBuilderBlockType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BoxClearance: float = ...
    """
    Returns or sets  the box clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``BoxClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoxClearance`` 
    
    :param boxClearance: 
    :type boxClearance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BoxPosition: NXOpen.Point3d = ...
    """
    Returns or sets  the position of csys for box.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoxPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoxPosition`` 
    
    :param csysOrigin: 
    :type csysOrigin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EndLimit: NXOpen.Expression = ...
    """
    Returns  the end limit 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    FirstClearance: float = ...
    """
    Returns or sets  the first clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstClearance`` 
    
    :param firstClearance: 
    :type firstClearance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    InsertType: SpecialFormingBuilderPunchOrDie = ...
    """
    Returns or sets  the insert type 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialFormingBuilderPunchOrDie` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InsertType`` 
    
    :param insertType: 
    :type insertType: :py:class:`NXOpen.Tooling.SpecialFormingBuilderPunchOrDie` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IsEditGuidedExtension: bool = ...
    """
    Returns or sets  the is edit guided extension 
    
    <hr>
    
    Getter Method
    
    Signature ``IsEditGuidedExtension`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsEditGuidedExtension`` 
    
    :param isEditGuidedExtension: 
    :type isEditGuidedExtension: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NeedFirstClearance: bool = ...
    """
    Returns or sets  the need first clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``NeedFirstClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeedFirstClearance`` 
    
    :param needFirstClearance: 
    :type needFirstClearance: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NeedSecondClearance: bool = ...
    """
    Returns or sets  the need second clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``NeedSecondClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeedSecondClearance`` 
    
    :param needSecondClearance: 
    :type needSecondClearance: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NeedThirdClearance: bool = ...
    """
    Returns or sets  the need third clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``NeedThirdClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeedThirdClearance`` 
    
    :param needThirdClearance: 
    :type needThirdClearance: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetValueLinearDimensionNegativeX: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative x 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeY: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative y 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionNegativeZ: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension negative z 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionNegativeZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveX: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive x 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveY: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive y 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    OffsetValueLinearDimensionPositiveZ: NXOpen.Expression = ...
    """
    Returns  the offset value linear dimension positive z 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueLinearDimensionPositiveZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Parent: SpecialFormingBuilderParentValue = ...
    """
    Returns or sets  the parent 
    
    <hr>
    
    Getter Method
    
    Signature ``Parent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialFormingBuilderParentValue` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Parent`` 
    
    :param parent: 
    :type parent: :py:class:`NXOpen.Tooling.SpecialFormingBuilderParentValue` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RenameComponent: bool = ...
    """
    Returns or sets  the rename component 
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponent`` 
    
    :param renameComponent: 
    :type renameComponent: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SecondClearance: float = ...
    """
    Returns or sets  the second clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondClearance`` 
    
    :param secondClearance: 
    :type secondClearance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectCurves: NXOpen.Section = ...
    """
    Returns  the select curves 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectFace: NXOpen.ScCollector = ...
    """
    Returns  the select face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectFormingBlock: NXOpen.SelectBody = ...
    """
    Returns  the select forming block 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFormingBlock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectInsertToDelete: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select insert to delete 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectInsertToDelete`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectSheetBody: NXOpen.SelectBody = ...
    """
    Returns  the select sheet body 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectSheetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StartLimit: NXOpen.Expression = ...
    """
    Returns  the start limit 
    
    <hr>
    
    Getter Method
    
    Signature ``StartLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ThirdClearance: float = ...
    """
    Returns or sets  the third clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``ThirdClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThirdClearance`` 
    
    :param thirdClearance: 
    :type thirdClearance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: SpecialFormingBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecialFormingBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.SpecialFormingBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UseExistingSheetBody: bool = ...
    """
    Returns or sets  the use existing sheet body 
    
    <hr>
    
    Getter Method
    
    Signature ``UseExistingSheetBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseExistingSheetBody`` 
    
    :param useExistingSheetBody: 
    :type useExistingSheetBody: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WithoutFalseBody: bool = ...
    """
    Returns or sets  the without false body 
    
    <hr>
    
    Getter Method
    
    Signature ``WithoutFalseBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WithoutFalseBody`` 
    
    :param withoutFalseBody: 
    :type withoutFalseBody: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: SpecialFormingBuilder = ...  # unknown typename


class DefineCamBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DefineCamBuilderTypes():
    """
    Specifies the cam types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LinearCam", "Linear cam type"
       "RotaryCam", "Rotary cam types"
       "RockerCam", "Rocker cam types"
       "CushionProgram", "Cushion Program cam type"
    """
    LinearCam = 0  # DefineCamBuilderTypesMemberType
    RotaryCam = 1  # DefineCamBuilderTypesMemberType
    RockerCam = 2  # DefineCamBuilderTypesMemberType
    CushionProgram = 3  # DefineCamBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DefineCamBuilderPredefinedHydraulicOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DefineCamBuilderPredefinedHydraulicOptions():
    """
    Specifies the predefined hydraulic motion types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No hydraulic motion defined"
       "BeforeMoldOpen", "Hydraulic motion before mold open"
       "BeforeEjection", "Hydraulic motion before ejection"
    """
    NotSet = 0  # DefineCamBuilderPredefinedHydraulicOptionsMemberType
    BeforeMoldOpen = 1  # DefineCamBuilderPredefinedHydraulicOptionsMemberType
    BeforeEjection = 2  # DefineCamBuilderPredefinedHydraulicOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DefineCamBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.DefineCamBuilder` to create different types of cam objects, which
    are used for kinematic motion   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateDefineCamBuilder`
    
    Default values.
    
    ===============================  ======================================
    Property                         Value
    ===============================  ======================================
    LinearBackstopOffset.Value       0 (millimeters part), 0 (inches part) 
    -------------------------------  --------------------------------------
    MotionDistance                   0 
    -------------------------------  --------------------------------------
    PredefinedHydraulicOption        None 
    -------------------------------  --------------------------------------
    PressStartAngle                  0 
    -------------------------------  --------------------------------------
    PressStopAngle                   90 
    -------------------------------  --------------------------------------
    ReturnStartAngle                 180 
    -------------------------------  --------------------------------------
    ReturnStopAngle                  270 
    -------------------------------  --------------------------------------
    RockerAxisBackstopOffset.Value   0 (millimeters part), 0 (inches part) 
    -------------------------------  --------------------------------------
    RotaryBackstopOffset.Value       0 (millimeters part), 0 (inches part) 
    ===============================  ======================================
    
    .. versionadded:: NX10.0.0
    """
    
    class Types():
        """
        Specifies the cam types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LinearCam", "Linear cam type"
           "RotaryCam", "Rotary cam types"
           "RockerCam", "Rocker cam types"
           "CushionProgram", "Cushion Program cam type"
        """
        LinearCam = 0  # DefineCamBuilderTypesMemberType
        RotaryCam = 1  # DefineCamBuilderTypesMemberType
        RockerCam = 2  # DefineCamBuilderTypesMemberType
        CushionProgram = 3  # DefineCamBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class PredefinedHydraulicOptions():
        """
        Specifies the predefined hydraulic motion types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No hydraulic motion defined"
           "BeforeMoldOpen", "Hydraulic motion before mold open"
           "BeforeEjection", "Hydraulic motion before ejection"
        """
        NotSet = 0  # DefineCamBuilderPredefinedHydraulicOptionsMemberType
        BeforeMoldOpen = 1  # DefineCamBuilderPredefinedHydraulicOptionsMemberType
        BeforeEjection = 2  # DefineCamBuilderPredefinedHydraulicOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DeleteLinearCam(self, camName: str) -> None:
        """
        Delete the linear cam 
        
        Signature ``DeleteLinearCam(camName)`` 
        
        :param camName: 
        :type camName: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteRotaryCam(self, camName: str) -> None:
        """
        Delete the rotary cam 
        
        Signature ``DeleteRotaryCam(camName)`` 
        
        :param camName: 
        :type camName: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteRockerCam(self, camName: str) -> None:
        """
        Delete the rocker cam 
        
        Signature ``DeleteRockerCam(camName)`` 
        
        :param camName: 
        :type camName: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeleteCushion(self, cushionName: str) -> None:
        """
        Delete the cushion 
        
        Signature ``DeleteCushion(cushionName)`` 
        
        :param cushionName: 
        :type cushionName: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    CamName: str = ...
    """
    Returns or sets  the cam name 
    
    <hr>
    
    Getter Method
    
    Signature ``CamName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CamName`` 
    
    :param camName: 
    :type camName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    CushionBody: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the cushion body, actually, it often is the bolster body to do the kinematic motion
    
    <hr>
    
    Getter Method
    
    Signature ``CushionBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    CushionDirection: NXOpen.Direction = ...
    """
    Returns or sets  the cushion direction that the cushion body moves along
    
    <hr>
    
    Getter Method
    
    Signature ``CushionDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CushionDirection`` 
    
    :param cushionDirection: 
    :type cushionDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    CushionName: str = ...
    """
    Returns or sets  the cushion name 
    
    <hr>
    
    Getter Method
    
    Signature ``CushionName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CushionName`` 
    
    :param cushionName: 
    :type cushionName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LinearBackstopOffset: NXOpen.Expression = ...
    """
    Returns  the linear backstop offset value, which affects the initial position of linear cam body
    
    <hr>
    
    Getter Method
    
    Signature ``LinearBackstopOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    LinearCamBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the linear cam body 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearCamBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    LinearDirection: NXOpen.Direction = ...
    """
    Returns or sets  the linear direction is the direction linear cam body move offset along 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearDirection`` 
    
    :param linearDirection: 
    :type linearDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LinearDriveBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the linear drive body which drives the linear body 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearDriveBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    MotionDistance: float = ...
    """
    Returns or sets  the motion distance 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MotionDistance`` 
    
    :param motionDistance: 
    :type motionDistance: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PredefinedHydraulicOption: DefineCamBuilderPredefinedHydraulicOptions = ...
    """
    Returns or sets  the hydraulic motion 
    
    <hr>
    
    Getter Method
    
    Signature ``PredefinedHydraulicOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DefineCamBuilderPredefinedHydraulicOptions` 
    
    .. versionadded:: NX10.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PredefinedHydraulicOption`` 
    
    :param predefinedHydraulicOption: 
    :type predefinedHydraulicOption: :py:class:`NXOpen.Tooling.DefineCamBuilderPredefinedHydraulicOptions` 
    
    .. versionadded:: NX10.0.3
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PressStartAngle: float = ...
    """
    Returns or sets  the press start angle 
    
    <hr>
    
    Getter Method
    
    Signature ``PressStartAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PressStartAngle`` 
    
    :param pressStartAngle: 
    :type pressStartAngle: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PressStopAngle: float = ...
    """
    Returns or sets  the press stop angle 
    
    <hr>
    
    Getter Method
    
    Signature ``PressStopAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PressStopAngle`` 
    
    :param pressStopAngle: 
    :type pressStopAngle: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReturnStartAngle: float = ...
    """
    Returns or sets  the return start angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ReturnStartAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReturnStartAngle`` 
    
    :param returnStartAngle: 
    :type returnStartAngle: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ReturnStopAngle: float = ...
    """
    Returns or sets  the return stop angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ReturnStopAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReturnStopAngle`` 
    
    :param returnStopAngle: 
    :type returnStopAngle: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RockerAxisBackstopOffset: NXOpen.Expression = ...
    """
    Returns  the rocker axis backstop offset, which affects the initial position of rocker body 
    
    <hr>
    
    Getter Method
    
    Signature ``RockerAxisBackstopOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RockerAxisDirection: NXOpen.Axis = ...
    """
    Returns or sets  the rocker axis direction that the rocker body rotates around
    
    <hr>
    
    Getter Method
    
    Signature ``RockerAxisDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RockerAxisDirection`` 
    
    :param rockerAxisDirection: 
    :type rockerAxisDirection: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RockerCamBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the rocker cam body 
    
    <hr>
    
    Getter Method
    
    Signature ``RockerCamBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RockerCamDirection: NXOpen.Direction = ...
    """
    Returns or sets  the rocker cam direction that the cam body moves along
    
    <hr>
    
    Getter Method
    
    Signature ``RockerCamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RockerCamDirection`` 
    
    :param rockerCamDirection: 
    :type rockerCamDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RockerCamRockerBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the rocker body of rocker cam 
    
    <hr>
    
    Getter Method
    
    Signature ``RockerCamRockerBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RockerDriveBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the rocker drive body which drives the rotary body of rocker cam 
    
    <hr>
    
    Getter Method
    
    Signature ``RockerDriveBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RotaryBackstopOffset: NXOpen.Expression = ...
    """
    Returns  the rotary backstop offset, which affects the initial position of rotary cam body 
    
    <hr>
    
    Getter Method
    
    Signature ``RotaryBackstopOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RotaryCamBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the rotary cam body 
    
    <hr>
    
    Getter Method
    
    Signature ``RotaryCamBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RotaryDirection: NXOpen.Axis = ...
    """
    Returns or sets  the rotary direction that the rotary body rotates around
    
    <hr>
    
    Getter Method
    
    Signature ``RotaryDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotaryDirection`` 
    
    :param rotaryDirection: 
    :type rotaryDirection: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RotaryDriveBodies: NXOpen.SelectDisplayableObjectList = ...
    """
    Returns  the rotary drive body which drives the rotary body 
    
    <hr>
    
    Getter Method
    
    Signature ``RotaryDriveBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Type: DefineCamBuilderTypes = ...
    """
    Returns or sets  the define cam type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DefineCamBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.DefineCamBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: DefineCamBuilder = ...  # unknown typename


class SplitInsertBuilder(NXOpen.Builder):
    """
    Creates split insert builder for progressive die.  
    
    No entity is returned. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateSplitInsertBuilder`
    
    Default values.
    
    ================  =====
    Property          Value
    ================  =====
    KeepOriginal      0 
    ----------------  -----
    RenameComponent   0 
    ================  =====
    
    .. versionadded:: NX12.0.0
    """
    
    def SaveAndGetComponentParent(self, componentTag: NXOpen.NXObject) -> NXOpen.NXObject:
        """
        Suppress child feature.  
        
        Signature ``SaveAndGetComponentParent(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetComponentFullName(self, componentTag: NXOpen.NXObject) -> str:
        """
        Suppress child feature.  
        
        Signature ``GetComponentFullName(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetComponentOrigin(self, componentTag: NXOpen.NXObject) -> NXOpen.Point3d:
        """
        Suppress child feature.  
        
        Signature ``GetComponentOrigin(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetComponentTransform(self, componentTag: NXOpen.NXObject) -> NXOpen.Matrix3x3:
        """
        Suppress child feature.  
        
        Signature ``GetComponentTransform(componentTag)`` 
        
        :param componentTag: 
        :type componentTag: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def PrepairToSplitInsert(self) -> None:
        """
        Suppress child feature.  
        
        Signature ``PrepairToSplitInsert()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def FindLinkedBodyFeatureAndSource(self, featureType: str, featureNameSubString: str) -> None:
        """
        Find linked body feature and source object.  
        
        Signature ``FindLinkedBodyFeatureAndSource(featureType, featureNameSubString)`` 
        
        :param featureType: 
        :type featureType: str 
        :param featureNameSubString: 
        :type featureNameSubString: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def FindLinkedBodyFeatureAndSourceForAll(self) -> None:
        """
        Find linked body feature and source object.  
        
        Signature ``FindLinkedBodyFeatureAndSourceForAll()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ReverseTrimAndRelinkSourceAndCreateUDOForAll(self, sourceObjects: 'list[NXOpen.NXObject]') -> None:
        """
        Reverse trim direction, relink source, and create udo for all.  
        
        Signature ``ReverseTrimAndRelinkSourceAndCreateUDOForAll(sourceObjects)`` 
        
        :param sourceObjects: 
        :type sourceObjects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetLinkFeatureAndSourceObject(self) -> 'list[NXOpen.NXObject]':
        """
        Set link feature and source object.  
        
        Signature ``SetLinkFeatureAndSourceObject()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    KeepOriginal: bool = ...
    """
    Returns or sets  the keep original toggle value 
    
    <hr>
    
    Getter Method
    
    Signature ``KeepOriginal`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepOriginal`` 
    
    :param keepOriginal: 
    :type keepOriginal: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RenameComponent: bool = ...
    """
    Returns or sets  the rename component 
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponent`` 
    
    :param renameComponent: 
    :type renameComponent: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectComponent: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the select component 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SplittingCurves: NXOpen.Section = ...
    """
    Returns  the splitting curves 
    
    <hr>
    
    Getter Method
    
    Signature ``SplittingCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SplittingDirection: bool = ...
    """
    Returns or sets  the splitting direction 
    
    <hr>
    
    Getter Method
    
    Signature ``SplittingDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SplittingDirection`` 
    
    :param splittingDirection: 
    :type splittingDirection: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: SplitInsertBuilder = ...  # unknown typename


class RunSimulationBuilderCollisionCheckOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RunSimulationBuilderCollisionCheckOptions():
    """
    Specifies the collision check method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FacetBodyDistance", "Measure facet bodies distance to do collision check"
       "MeshTriangleIntersection", "Mesh facet body, check the mesh triangle intersection or not"
       "SolidBodyIntersection", "Get the solid body, use intersection boolean result to do collision check"
    """
    FacetBodyDistance = 0  # RunSimulationBuilderCollisionCheckOptionsMemberType
    MeshTriangleIntersection = 1  # RunSimulationBuilderCollisionCheckOptionsMemberType
    SolidBodyIntersection = 2  # RunSimulationBuilderCollisionCheckOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RunSimulationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.RunSimulationBuilder` to animate the model, 
    analyze the collision and reference.  
    
    None is returned 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateRunSimulationBuilder`
    
    Default values.
    
    ========================  ===========================================
    Property                  Value
    ========================  ===========================================
    AngleExpression.Value     0 
    ------------------------  -------------------------------------------
    CheckCollision            0 
    ------------------------  -------------------------------------------
    ClearanceCollision        1.0 (millimeters part), 0.04 (inches part) 
    ------------------------  -------------------------------------------
    CollisionCheckOption      MeshTriangleIntersection 
    ------------------------  -------------------------------------------
    GotoRun                   0 
    ------------------------  -------------------------------------------
    HighlightCollision        0 
    ------------------------  -------------------------------------------
    IgnoreTouching            0 
    ------------------------  -------------------------------------------
    IntervalDimension.Value   2 
    ------------------------  -------------------------------------------
    StopCheckCollision        0 
    ------------------------  -------------------------------------------
    TimeExpression.Value      0 (millimeters part), 0 (inches part) 
    ========================  ===========================================
    
    .. versionadded:: NX10.0.0
    """
    
    class CollisionCheckOptions():
        """
        Specifies the collision check method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FacetBodyDistance", "Measure facet bodies distance to do collision check"
           "MeshTriangleIntersection", "Mesh facet body, check the mesh triangle intersection or not"
           "SolidBodyIntersection", "Get the solid body, use intersection boolean result to do collision check"
        """
        FacetBodyDistance = 0  # RunSimulationBuilderCollisionCheckOptionsMemberType
        MeshTriangleIntersection = 1  # RunSimulationBuilderCollisionCheckOptionsMemberType
        SolidBodyIntersection = 2  # RunSimulationBuilderCollisionCheckOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GotoStart(self) -> None:
        """
        Goto the start of the simulation 
        
        Signature ``GotoStart()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def Previous(self) -> None:
        """
        Previous simulation result 
        
        Signature ``Previous()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def PlayBackwards(self) -> None:
        """
        Play simulation backwards 
        
        Signature ``PlayBackwards()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def Play(self) -> None:
        """
        Play simulation forwards 
        
        Signature ``Play()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def Next(self) -> None:
        """
        Next simulation result 
        
        Signature ``Next()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GotoEnd(self) -> None:
        """
        Run goto end of the simulation 
        
        Signature ``GotoEnd()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def Stop(self) -> None:
        """
        Stop simulation 
        
        Signature ``Stop()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CollisionConfiguration(self) -> None:
        """
        Modify the collision by invoking collision configuration dialog 
        
        Signature ``CollisionConfiguration()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CollisionInformation(self) -> None:
        """
        List collision changes information in the information window 
        
        Signature ``CollisionInformation()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ResetIgnoredCollision(self) -> None:
        """
        Reset all ignored settings of the collision 
        
        Signature ``ResetIgnoredCollision()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AngleExpression: NXOpen.Expression = ...
    """
    Returns  the angle of the cycle position 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    CheckCollision: bool = ...
    """
    Returns or sets  the check collision 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckCollision`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CheckCollision`` 
    
    :param checkCollision: 
    :type checkCollision: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ClearanceCollision: float = ...
    """
    Returns or sets  the clearance value of collision or interference 
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceCollision`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClearanceCollision`` 
    
    :param clearanceCollision: 
    :type clearanceCollision: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    CollisionCheckOption: RunSimulationBuilderCollisionCheckOptions = ...
    """
    Returns or sets  the collision check method option 
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionCheckOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.RunSimulationBuilderCollisionCheckOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CollisionCheckOption`` 
    
    :param collisionCheckMethod: 
    :type collisionCheckMethod: :py:class:`NXOpen.Tooling.RunSimulationBuilderCollisionCheckOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    GotoRun: float = ...
    """
    Returns or sets  the goto run angle stores the position in the cycle 
    
    <hr>
    
    Getter Method
    
    Signature ``GotoRun`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GotoRun`` 
    
    :param gotoRun: 
    :type gotoRun: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HighlightCollision: bool = ...
    """
    Returns or sets  the highlight collision bodies flag 
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightCollision`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightCollision`` 
    
    :param highlightCollision: 
    :type highlightCollision: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IgnoreTouching: bool = ...
    """
    Returns or sets  the ignore touching flag 
    
    <hr>
    
    Getter Method
    
    Signature ``IgnoreTouching`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IgnoreTouching`` 
    
    :param ignoreTouching: 
    :type ignoreTouching: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IntervalDimension: NXOpen.Expression = ...
    """
    Returns  the interval value of refresh 
    
    <hr>
    
    Getter Method
    
    Signature ``IntervalDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    StopCheckCollision: bool = ...
    """
    Returns or sets  the stop check collision if find next collision 
    
    <hr>
    
    Getter Method
    
    Signature ``StopCheckCollision`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StopCheckCollision`` 
    
    :param stopCheckCollision: 
    :type stopCheckCollision: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TimeExpression: NXOpen.Expression = ...
    """
    Returns  the time in the cycle 
    
    <hr>
    
    Getter Method
    
    Signature ``TimeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: RunSimulationBuilder = ...  # unknown typename


class BurringInsertCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.BurringInsertCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBurringInsertBuilder(self) -> BurringInsertBuilder:
        """
        Creates burring insert builder.  
        
        Signature ``CreateBurringInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.BurringInsertBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class MWPartingManagerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of MWPartingManager builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> MWPartingManagerBuilder:
        """
        Creates a MWPartingManager builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`MWPartingManagerBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.MWPartingManagerBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class MWCopySheetsCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of MWCopySheets builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> MWCopySheetsBuilder:
        """
        Creates a MWCopySheets builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`MWCopySheetsBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.MWCopySheetsBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class FastenerAssyModeMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FastenerAssyModeMethod():
    """
    Represents adding and editing modes for the fastener assembly
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Add", "Add fastener assembly"
       "Edit", "Edit fastener assembly"
    """
    Add = 1  # FastenerAssyModeMethodMemberType
    Edit = 2  # FastenerAssyModeMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FastenerAssyStackTypeMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FastenerAssyStackTypeMethod():
    """
    Represents screw_array type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Screw", "Screw type"
       "TopStack", "Top stack type"
       "BottomStack", "Bottom stack type"
       "RootNode", "Root node type"
       "TopNode", "Top node type"
       "BottomNode", "Bottom node type"
    """
    Screw = 0  # FastenerAssyStackTypeMethodMemberType
    TopStack = 1  # FastenerAssyStackTypeMethodMemberType
    BottomStack = 2  # FastenerAssyStackTypeMethodMemberType
    RootNode = 3  # FastenerAssyStackTypeMethodMemberType
    TopNode = 4  # FastenerAssyStackTypeMethodMemberType
    BottomNode = 5  # FastenerAssyStackTypeMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FastenerAssyHoleOperationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FastenerAssyHoleOperation():
    """
    Represents the action on the hole menu of the fastener assembly.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Add", "Click the add hole group menu"
       "Remove", "Click the remove menu"
    """
    Add = 0  # FastenerAssyHoleOperationMemberType
    Remove = 1  # FastenerAssyHoleOperationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FastenerAssySelectionTypeMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FastenerAssySelectionTypeMethod():
    """
    Represents selection type for position and hole
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Hole", "Hole type"
       "Position", "Position type"
    """
    Hole = 0  # FastenerAssySelectionTypeMethodMemberType
    Position = 1  # FastenerAssySelectionTypeMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FastenerAssySelectionObjectMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FastenerAssySelectionObjectMethod():
    """
    Represents selection object type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Top", "Top object"
       "Bottom", "Bottom object"
    """
    Top = 0  # FastenerAssySelectionObjectMethodMemberType
    Bottom = 1  # FastenerAssySelectionObjectMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class FastenerAssy(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.FastenerAssy`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.FastenerAssyCollection.CreateBuilder`
    
    Default values.
    
    =============================================================================================  ==========================================
    Property                                                                                       Value
    =============================================================================================  ==========================================
    ComponentPatternBuilder.PatternService.AlongPathDefinition.XOnPathSpacing.NCopies.Value        2 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.XOnPathSpacing.SpaceType            Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.XPathOption                         Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YDirectionOption                    Section 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YOnPathSpacing.NCopies.Value        1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YPathOption                         Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.NCopies.Value              1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.PitchDistance.Value        10 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.SpaceType                  Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.AlongPathDefinition.YSpacing.SpanDistance.Value         100 (millimeters part), 10 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.NCopies.Value         12 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.PitchAngle.Value      30 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.PitchDistance.Value   10 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.SpaceType             Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.SpanAngle.Value       360 (millimeters part), 360 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.AngularSpacing.UsePitchOption        Angle 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.CreateLastStaggered                  true 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.HorizontalRef.RotationAngle.Value    0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.IncludeSeedToggle                    true 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.RadialSpacing.NCopies.Value          1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.CircularDefinition.StaggerType                          None 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.AnglePitch.Value                        30 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.CountOfInstances.Value                  6 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.DirectionType                           Righthand 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.DistancePitch.Value                     10 (millimeters part), 0.4 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.HelixPitch.Value                        50 (millimeters part), 2 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.HelixSpan.Value                         100 (millimeters part), 4 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.NumberOfTurns.Value                     2 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.HelixDefinition.SizeOption                              CountAngleDistance 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternFill.FillMargin.Value                            0 (millimeters part), 0 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternFill.FillOptions                                 None 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternFill.SimplifiedBoundaryToggle                    False 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.AlongOrientationOption               NormalToPath 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.CircularOrientationOption            FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.FollowFaceProjDirOption              PatternPlaneNormal 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.GeneralOrientationOption             Fixed 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.HelixOrientationOption               FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.LinearOrientationOption              Fixed 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.MirrorOrientationOption              FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.OrientationOption                    Fixed 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.PolygonOrientationOption             FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternOrientation.SpiralOrientationOption              FollowPattern 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PatternType                                             Linear 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.NumberOfSides.Value                   6 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSizeOption                     Inscribed 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.NCopies.Value          4 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.PitchDistance.Value    25 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.SpaceType              Offset 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.PolygonSpacing.SpanAngle.Value        360 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.NCopies.Value           1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.PitchDistance.Value     25 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.PolygonDefinition.RadialSpacing.SpanDistance.Value      100 (millimeters part), 4 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.CreateLastStaggered               true 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.SimplifiedLayoutType              Square 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.StaggerType                       None 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.XSpacing.NCopies.Value            2 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.RectangularDefinition.YSpacing.NCopies.Value            1 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.DirectionType                          Lefthand 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.NumberOfTurns.Value                    1 (millimeters part), 1 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.RadialPitch.Value                      50 (millimeters part), 2 (inches part) 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.SizeSpiralType                         NumberOfTurns 
    ---------------------------------------------------------------------------------------------  ------------------------------------------
    ComponentPatternBuilder.PatternService.SpiralDefinition.TotalAngle.Value                       360 (millimeters part), 360 (inches part) 
    =============================================================================================  ==========================================
    
    .. versionadded:: NX5.0.0
    """
    
    class ModeMethod():
        """
        Represents adding and editing modes for the fastener assembly
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Add", "Add fastener assembly"
           "Edit", "Edit fastener assembly"
        """
        Add = 1  # FastenerAssyModeMethodMemberType
        Edit = 2  # FastenerAssyModeMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StackTypeMethod():
        """
        Represents screw_array type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Screw", "Screw type"
           "TopStack", "Top stack type"
           "BottomStack", "Bottom stack type"
           "RootNode", "Root node type"
           "TopNode", "Top node type"
           "BottomNode", "Bottom node type"
        """
        Screw = 0  # FastenerAssyStackTypeMethodMemberType
        TopStack = 1  # FastenerAssyStackTypeMethodMemberType
        BottomStack = 2  # FastenerAssyStackTypeMethodMemberType
        RootNode = 3  # FastenerAssyStackTypeMethodMemberType
        TopNode = 4  # FastenerAssyStackTypeMethodMemberType
        BottomNode = 5  # FastenerAssyStackTypeMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HoleOperation():
        """
        Represents the action on the hole menu of the fastener assembly.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Add", "Click the add hole group menu"
           "Remove", "Click the remove menu"
        """
        Add = 0  # FastenerAssyHoleOperationMemberType
        Remove = 1  # FastenerAssyHoleOperationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SelectionTypeMethod():
        """
        Represents selection type for position and hole
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Hole", "Hole type"
           "Position", "Position type"
        """
        Hole = 0  # FastenerAssySelectionTypeMethodMemberType
        Position = 1  # FastenerAssySelectionTypeMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SelectionObjectMethod():
        """
        Represents selection object type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Top", "Top object"
           "Bottom", "Bottom object"
        """
        Top = 0  # FastenerAssySelectionObjectMethodMemberType
        Bottom = 1  # FastenerAssySelectionObjectMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddTopNode(self, point: NXOpen.Point3d, direction: NXOpen.Point3d, selObject: NXOpen.NXObject, index: int) -> NXOpen.NXObject:
        """
        Adds top node for the fastener assembly 
        
        Signature ``AddTopNode(point, direction, selObject, index)`` 
        
        :param point:  The point of the fastener to assemble  
        :type point: :py:class:`NXOpen.Point3d` 
        :param direction:  The direciton of the fastener to assemble  
        :type direction: :py:class:`NXOpen.Point3d` 
        :param selObject:  The default cylindrical face of the hole data, selObject type should be FACE 
        :type selObject: :py:class:`NXOpen.NXObject` 
        :param index:  The hole index in the fastener assembly  
        :type index: int 
        :returns:  Output the instance of the parent node 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleDiameter(self, diameter: float, index: int) -> None:
        """
        Sets the diameter for the hole in the fastener assembly
        
        Signature ``SetHoleDiameter(diameter, index)`` 
        
        :param diameter:  The diameter of the hole data  
        :type diameter: float 
        :param index:  The hole index in the fastener assembly 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleDirection(self, direction: NXOpen.Point3d, index: int) -> None:
        """
        Sets the direction for the hole in the fastener assembly
        
        Signature ``SetHoleDirection(direction, index)`` 
        
        :param direction:  The direcion of the hole data  
        :type direction: :py:class:`NXOpen.Point3d` 
        :param index:  The hole index in the fastener assembly 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleSideCylindricalFaces(self, sideCylFace: NXOpen.NXObject, index: int) -> None:
        """
        Sets the side cylindrical faces for the hole in the fastener assembly
        
        Signature ``SetHoleSideCylindricalFaces(sideCylFace, index)`` 
        
        :param sideCylFace:  The side cylinderical Face of the hole data  
        :type sideCylFace: :py:class:`NXOpen.NXObject` 
        :param index:  The hole index in the fastener assembly, sideCylFace type should be FACE  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCreatePocket(self, create: bool) -> None:
        """
        Sets the flag to indicate whether to create pocket when adding the fastener
        
        Signature ``SetCreatePocket(create)`` 
        
        :param create: Whether the fastener assembly is created pocket 
        :type create: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleFaces(self, holeFace: NXOpen.NXObject, index: int) -> None:
        """
        Sets the faces for the hole in the fastener assembly 
        
        Signature ``SetHoleFaces(holeFace, index)`` 
        
        :param holeFace:  The hole face of the hole data, holeFace type is FACE 
        :type holeFace: :py:class:`NXOpen.NXObject` 
        :param index:  The hole index in the fastener assembly  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddScrewArray(self, krxFile: str, lengthMatch: str, libPath: str, libName: str, fullPath: str, index: int, type: FastenerAssyStackTypeMethod) -> None:
        """
        Adds stack array
        
        Signature ``AddScrewArray(krxFile, lengthMatch, libPath, libName, fullPath, index, type)`` 
        
        :param krxFile:  The krx file of the stack  
        :type krxFile: str 
        :param lengthMatch:  The length match from fastener data and given node  
        :type lengthMatch: str 
        :param libPath:  Ask fastener library path  
        :type libPath: str 
        :param libName:  Ask fastener library name  
        :type libName: str 
        :param fullPath:  Stack file full path  
        :type fullPath: str 
        :param index:  The hole index in the fastener assembly  
        :type index: int 
        :param type:  The stack type method 
        :type type: :py:class:`NXOpen.Tooling.FastenerAssyStackTypeMethod` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddParentNewPart(self, fileName: str, index: int, parentNode: bool) -> None:
        """
        Adds new part for the parent node
        
        Signature ``AddParentNewPart(fileName, index, parentNode)`` 
        
        :param fileName: New fastener assembly parent node name 
        :type fileName: str 
        :param index: The hole index in the fastener assembly 
        :type index: int 
        :param parentNode: Whether the fastener assembly node is parent 
        :type parentNode: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetItemName(self, partName: str, itemName: str) -> None:
        """
        Adds item description for the part
        
        Signature ``SetItemName(partName, itemName)`` 
        
        :param partName: The part name 
        :type partName: str 
        :param itemName: Item name 
        :type itemName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHolePosition(self, position: NXOpen.Point3d, index: int) -> None:
        """
        Sets the position for the hole in the fastener assembly
        
        Signature ``SetHolePosition(position, index)`` 
        
        :param position:  The position of the hole data  
        :type position: :py:class:`NXOpen.Point3d` 
        :param index:  The hole index in the fastener assembly  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleDefaultCylindricalFace(self, defaultCylFaces: NXOpen.NXObject, index: int) -> None:
        """
        Sets the default cylindrical face for the hole in the fastener assembly
        
        Signature ``SetHoleDefaultCylindricalFace(defaultCylFaces, index)`` 
        
        :param defaultCylFaces:  The default cylindrical faces of the hole data, defaultCylFaces type should be FACE 
        :type defaultCylFaces: :py:class:`NXOpen.NXObject` 
        :param index:  The hole index in the fastener assembly  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleOriginPosition(self, originposition: NXOpen.Point3d, index: int) -> None:
        """
        Sets the origin position for the hole in the fastener assembly
        
        Signature ``SetHoleOriginPosition(originposition, index)`` 
        
        :param originposition:  The origin position of the hole data  
        :type originposition: :py:class:`NXOpen.Point3d` 
        :param index:  The hole index in the fastener assembly  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleHeight(self, height: float, index: int) -> None:
        """
        Sets the height for the hole in the fastener assembly
        
        Signature ``SetHoleHeight(height, index)`` 
        
        :param height:  The height of the hole data  
        :type height: float 
        :param index:  The hole index in the fastener assembly  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleOriginHeight(self, originheight: float, index: int) -> None:
        """
        Sets the origin height for the hole in the fastener assembly
        
        Signature ``SetHoleOriginHeight(originheight, index)`` 
        
        :param originheight:  The origin height of the hole data  
        :type originheight: float 
        :param index:  The hole index in the fastener assembly  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFastenerExtentLength(self, extentLength: float) -> None:
        """
        Sets the extent length for the hole in the fastener assembly
        
        Signature ``SetFastenerExtentLength(extentLength)`` 
        
        :param extentLength:  The extent Length of the fastener assembly  
        :type extentLength: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleOriginDiameter(self, originDiameter: float, index: int) -> None:
        """
        Sets the origin diameter for the hole in the fastener assembly
        
        Signature ``SetHoleOriginDiameter(originDiameter, index)`` 
        
        :param originDiameter:  The origin diameter of the hole data  
        :type originDiameter: float 
        :param index:  The hole index in the fastener assembly  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFastenerSelectionType(self, selectionType: FastenerAssySelectionTypeMethod) -> None:
        """
        Sets the selection type for the hole in the fastener assembly
        
        Signature ``SetFastenerSelectionType(selectionType)`` 
        
        :param selectionType:  The selection type to add the fastener assembly  
        :type selectionType: :py:class:`NXOpen.Tooling.FastenerAssySelectionTypeMethod` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFastenerSelectionType(self) -> FastenerAssySelectionTypeMethod:
        """
        Gets the selection type for the hole in the fastener assembly 
        
        Signature ``GetFastenerSelectionType()`` 
        
        :returns:  The selection type to add the fastener assembly  
        :rtype: :py:class:`NXOpen.Tooling.FastenerAssySelectionTypeMethod` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleDatumCsys(self, datumCsys: NXOpen.NXObject, index: int) -> None:
        """
        Sets the datum CSYS for the hole in the fastener assembly
        
        Signature ``SetHoleDatumCsys(datumCsys, index)`` 
        
        :param datumCsys:  The datum csys of the hole data  
        :type datumCsys: :py:class:`NXOpen.NXObject` 
        :param index:  The hole index in the fastener assembly, datumCsys type should be Axis  
        :type index: int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateFastenerLength(self, adjustLength: bool) -> None:
        """
        Updates the fastener length
        
        Signature ``UpdateFastenerLength(adjustLength)`` 
        
        :param adjustLength:  Whether to adjust length in the fastener assembly 
        :type adjustLength: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSameAssemblyData(self, addedIndex: int, index: int) -> None:
        """
        Creates the same assembly data type
        
        Signature ``CreateSameAssemblyData(addedIndex, index)`` 
        
        :param addedIndex:  find the the hole index with the same parameter and node type in the fastener assembly  
        :type addedIndex: int 
        :param index:  the hole index in the fastener assembly 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EraseStackArray(self, parentIndex: int, inx: int, type: FastenerAssyStackTypeMethod) -> None:
        """
        Erases stack array
        
        Signature ``EraseStackArray(parentIndex, inx, type)`` 
        
        :param parentIndex:  Parent index  
        :type parentIndex: int 
        :param inx:  Child index  
        :type inx: int 
        :param type:  The stack type method  
        :type type: :py:class:`NXOpen.Tooling.FastenerAssyStackTypeMethod` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EraseFastenerAssembly(self, parentInx: int, removeParent: bool, removeScrew: bool, removeStack: bool, removeArray: bool, removeBuilder: bool, initscrewBuilder: bool, initstackBuilder: bool, removeData: bool) -> None:
        """
        Erases fastener assembly
        
        Signature ``EraseFastenerAssembly(parentInx, removeParent, removeScrew, removeStack, removeArray, removeBuilder, initscrewBuilder, initstackBuilder, removeData)`` 
        
        :param parentInx:  parent index  
        :type parentInx: int 
        :param removeParent:  whether to remove parent instance 
        :type removeParent: bool 
        :param removeScrew:  whether to remove screw 
        :type removeScrew: bool 
        :param removeStack:  whether to remove top stack and bottom stack 
        :type removeStack: bool 
        :param removeArray:  whether to remove component array 
        :type removeArray: bool 
        :param removeBuilder:  whether to remove builder 
        :type removeBuilder: bool 
        :param initscrewBuilder:  whether to initialize screw builder 
        :type initscrewBuilder: bool 
        :param initstackBuilder:  whether to initialize stack builder 
        :type initstackBuilder: bool 
        :param removeData:  whether to remove data 
        :type removeData: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EraseFastenerSetupData(self) -> None:
        """
        Erases the data (hole and assembly data) in fastener assembly 
        
        Signature ``EraseFastenerSetupData()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateFastenerConstraints(self, index: int) -> None:
        """
        Creates fastener assembly constraint
        
        Signature ``CreateFastenerConstraints(index)`` 
        
        :param index:  the hole index in the fastener assembly to create constraints 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveFastenerConstraints(self, index: int) -> None:
        """
        Removes fastener assembly constraint
        
        Signature ``RemoveFastenerConstraints(index)`` 
        
        :param index:  the hole index in the fastener assembly to delete constraints 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSidePlanarFaces(self, sidePlanarFace: NXOpen.NXObject, index: int) -> None:
        """
        Sets the side planar faces for the hole in the fastener assembly
        
        Signature ``SetSidePlanarFaces(sidePlanarFace, index)`` 
        
        :param sidePlanarFace:  The side planar face of the hole data, sidePlanarFace type should be FACE 
        :type sidePlanarFace: :py:class:`NXOpen.NXObject` 
        :param index:  The hole index in the fastener assembly 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDefaultPlanarFaces(self, defaultPlanarFace: NXOpen.NXObject, inx: int) -> None:
        """
        Sets the default planar face for the hole in the fastener assembly
        
        Signature ``SetDefaultPlanarFaces(defaultPlanarFace, inx)`` 
        
        :param defaultPlanarFace:  The default planar face of the hole data, defaultPlanarFace type should be FACE  
        :type defaultPlanarFace: :py:class:`NXOpen.NXObject` 
        :param inx:  The hole index in the fastener assembly 
        :type inx: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetInstanceFeatureFaces(self, instanceFeature: NXOpen.NXObject, inx: int) -> None:
        """
        Sets the instance feature face for the hole in the fastener assembly
        
        Signature ``SetInstanceFeatureFaces(instanceFeature, inx)`` 
        
        :param instanceFeature:  The instance feature face of the hole data, instanceFeature type should be FACE  
        :type instanceFeature: :py:class:`NXOpen.NXObject` 
        :param inx:  The hole index in the fastener assembly 
        :type inx: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AdjustFastenerLength(self, parentIndex: int, childIndex: int, nodeType: FastenerAssyStackTypeMethod) -> None:
        """
        Adjusts the fastener assembly length
        
        Signature ``AdjustFastenerLength(parentIndex, childIndex, nodeType)`` 
        
        :param parentIndex:  parent index  
        :type parentIndex: int 
        :param childIndex:  child index  
        :type childIndex: int 
        :param nodeType:  the stack type method  
        :type nodeType: :py:class:`NXOpen.Tooling.FastenerAssyStackTypeMethod` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateFastenerStacks(self, parentIndex: int, updateScrew: bool, updatePocket: bool) -> None:
        """
        Updates fastener stacks
        
        Signature ``UpdateFastenerStacks(parentIndex, updateScrew, updatePocket)`` 
        
        :param parentIndex:  parent index  
        :type parentIndex: int 
        :param updateScrew:  whether to update screw 
        :type updateScrew: bool 
        :param updatePocket:  whether to update pocket 
        :type updatePocket: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateHoleData(self, inx: int, originheight: float, originPoint: NXOpen.Point3d, threadhole: bool, blindhole: bool) -> None:
        """
        Updates the hole data
        
        Signature ``UpdateHoleData(inx, originheight, originPoint, threadhole, blindhole)`` 
        
        :param inx:  parent index  
        :type inx: int 
        :param originheight:  origin height in hole data  
        :type originheight: float 
        :param originPoint:  origin point in hole data  
        :type originPoint: :py:class:`NXOpen.Point3d` 
        :param threadhole:  whether the hole is thread hole 
        :type threadhole: bool 
        :param blindhole:  whether the hole is blind hole 
        :type blindhole: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateReusablePocket(self, commit: bool) -> None:
        """
        Creates reusable pocket
        
        Signature ``CreateReusablePocket(commit)`` 
        
        :param commit:  whether to create pocket 
        :type commit: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteReusablePocket(self) -> None:
        """
        Deletes reusable pocket
        
        Signature ``DeleteReusablePocket()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SelectScrewSize(self, inx: int, diameter: float, origindiameter: float, selDiameter: bool) -> None:
        """
        Selects the screw size
        
        Signature ``SelectScrewSize(inx, diameter, origindiameter, selDiameter)`` 
        
        :param inx:  parent index  
        :type inx: int 
        :param diameter:  diameter in hole data  
        :type diameter: float 
        :param origindiameter:  origin diameter in hole data  
        :type origindiameter: float 
        :param selDiameter:  whether to select diameter 
        :type selDiameter: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateReusableBuilder(self, parentIndex: int, childIndex: int, nodeType: FastenerAssyStackTypeMethod) -> AddReusablePart:
        """
        Creates new reusable builder 
        
        Signature ``CreateReusableBuilder(parentIndex, childIndex, nodeType)`` 
        
        :param parentIndex:  parent node index in the fastener assembly  
        :type parentIndex: int 
        :param childIndex:  child node index in the fastener assembly  
        :type childIndex: int 
        :param nodeType:  the stack type method  
        :type nodeType: :py:class:`NXOpen.Tooling.FastenerAssyStackTypeMethod` 
        :returns:  the new :py:class:`NXOpen.Tooling.AddReusablePart` instance  
        :rtype: :py:class:`NXOpen.Tooling.AddReusablePart` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SubstituteFastenerStack(self, parentIndex: int, childIndex: int, nodeType: FastenerAssyStackTypeMethod, partFile: str, krxFile: str, libName: str, pathInLib: str, lengthMatch: str, fullPath: str) -> None:
        """
        Substitutes fastener stack
        
        Signature ``SubstituteFastenerStack(parentIndex, childIndex, nodeType, partFile, krxFile, libName, pathInLib, lengthMatch, fullPath)`` 
        
        :param parentIndex:  parent node index in the fastener assembly 
        :type parentIndex: int 
        :param childIndex:  child node index in the fastener assembly 
        :type childIndex: int 
        :param nodeType:  the stack type method  
        :type nodeType: :py:class:`NXOpen.Tooling.FastenerAssyStackTypeMethod` 
        :param partFile:  part file  
        :type partFile: str 
        :param krxFile:  krx file  
        :type krxFile: str 
        :param libName:  library name  
        :type libName: str 
        :param pathInLib:  library path  
        :type pathInLib: str 
        :param lengthMatch:  the length match from fastener data and given node 
        :type lengthMatch: str 
        :param fullPath:  screw file full path  
        :type fullPath: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SaveUdoData(self) -> None:
        """
        Saves UDO data for fastener assembly
        
        Signature ``SaveUdoData()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFastenerMode(self, modeMethod: FastenerAssyModeMethod) -> None:
        """
        Sets the fastener mode
        
        Signature ``SetFastenerMode(modeMethod)`` 
        
        :param modeMethod: 
        :type modeMethod: :py:class:`NXOpen.Tooling.FastenerAssyModeMethod` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFastenerMode(self) -> FastenerAssyModeMethod:
        """
        Gets the fastener mode 
        
        Signature ``GetFastenerMode()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.FastenerAssyModeMethod` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EraseAssemblyData(self, parentIndex: int) -> None:
        """
        Erases the assembly data
        
        Signature ``EraseAssemblyData(parentIndex)`` 
        
        :param parentIndex:  parent index  
        :type parentIndex: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateHolePostion(self, parentIndex: int, dirOne: NXOpen.Point3d, tempPnt: NXOpen.Point3d, pointOne: NXOpen.Point3d, height: float, orignHeight: float, offSetDistance: float) -> None:
        """
        Updates the hole positon for position method
        
        Signature ``UpdateHolePostion(parentIndex, dirOne, tempPnt, pointOne, height, orignHeight, offSetDistance)`` 
        
        :param parentIndex:  parent node index  
        :type parentIndex: int 
        :param dirOne:  direction in hole data  
        :type dirOne: :py:class:`NXOpen.Point3d` 
        :param tempPnt:  position in hole data  
        :type tempPnt: :py:class:`NXOpen.Point3d` 
        :param pointOne:  origin position in hole data  
        :type pointOne: :py:class:`NXOpen.Point3d` 
        :param height:  height in hole data  
        :type height: float 
        :param orignHeight:  origin height in hole data  
        :type orignHeight: float 
        :param offSetDistance:  offset distance in hole data  
        :type offSetDistance: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetReuseBuilder(self, index: int, nodeType: FastenerAssyStackTypeMethod, childIndex: int, partOcc: NXOpen.Assemblies.Component) -> None:
        """
        Sets the reuse builder
        
        Signature ``SetReuseBuilder(index, nodeType, childIndex, partOcc)`` 
        
        :param index:  parent node index in fastener assembly 
        :type index: int 
        :param nodeType:  the stack type method  
        :type nodeType: :py:class:`NXOpen.Tooling.FastenerAssyStackTypeMethod` 
        :param childIndex:  child hole index in fastener assembly 
        :type childIndex: int 
        :param partOcc:  new part occruance  
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RenameParentNode(self, index: int, newname: str) -> None:
        """
        Renames the parent node
        
        Signature ``RenameParentNode(index, newname)`` 
        
        :param index:  parent node index in fastener assembly 
        :type index: int 
        :param newname:  new name for the parent node  
        :type newname: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateArrayHole(self, index: int) -> None:
        """
        Creates array hole data for the fastener assembly
        
        Signature ``CreateArrayHole(index)`` 
        
        :param index:  the hole index in the fastener assembly  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteArrayHole(self, index: int) -> None:
        """
        Deletes array hole data for the fastener assembly
        
        Signature ``DeleteArrayHole(index)`` 
        
        :param index:  the hole index in the fastener assembly  
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def InitPocketBuilder(self) -> None:
        """
        Inits pocket builder
        
        Signature ``InitPocketBuilder()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateTopBottomStacks(self, index: int, type: FastenerAssySelectionObjectMethod, isSameFace: bool, face: NXOpen.NXObject) -> None:
        """
        Updates fastener assembly according to the new extends
        
        Signature ``UpdateTopBottomStacks(index, type, isSameFace, face)`` 
        
        :param index:  parent node index in fastener assembly 
        :type index: int 
        :param type:  top object or bottom object type  
        :type type: :py:class:`NXOpen.Tooling.FastenerAssySelectionObjectMethod` 
        :param isSameFace:  whether the fastener assembly is same face 
        :type isSameFace: bool 
        :param face:  top or bottom face  
        :type face: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ReadAssemblyConfigure(self, holeNum: int, partOcc: NXOpen.Assemblies.Component) -> None:
        """
        Reads fastener assembly configuration data from the hole data
        
        Signature ``ReadAssemblyConfigure(holeNum, partOcc)`` 
        
        :param holeNum: hole num 
        :type holeNum: int 
        :param partOcc: parent node part occurance 
        :type partOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAssemblyExtentLength(self, index: int, extentLength: float) -> None:
        """
        Sets the extent length for the fastener assembly data
        
        Signature ``SetAssemblyExtentLength(index, extentLength)`` 
        
        :param index: hole index in fastener assembly 
        :type index: int 
        :param extentLength:  The extent Length of the fastener assembly  
        :type extentLength: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateDefaultStandard(self, index: int, standard: str, form: str, type: str) -> None:
        """
        Updates default standard hole data for the fastener assembly configuration
        
        Signature ``UpdateDefaultStandard(index, standard, form, type)`` 
        
        :param index:  The hole index in hole map data 
        :type index: int 
        :param standard:  The default hole standard type in the assembly configuration  
        :type standard: str 
        :param form:  The default hole form in the assembly configuration  
        :type form: str 
        :param type:  The default hole screw type in the assembly configuration  
        :type type: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveSelectedHole(self) -> None:
        """
        Removes the selected hole from the fastener setup data
        
        Signature ``RemoveSelectedHole()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddRemovalHoleIndex(self, index: int) -> None:
        """
        Add the removal hole index in the fastener setup data
        
        Signature ``AddRemovalHoleIndex(index)`` 
        
        :param index:  The hole index in the fastener assembly to be removed 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateStackPosition(self, parentIndex: int, childIndex: int, nodeType: FastenerAssyStackTypeMethod, deltaLength: float) -> None:
        """
        Updates the fastener assembly after changing stacks or changing stack properties
        
        Signature ``UpdateStackPosition(parentIndex, childIndex, nodeType, deltaLength)`` 
        
        :param parentIndex: parent index  
        :type parentIndex: int 
        :param childIndex: child index  
        :type childIndex: int 
        :param nodeType:  node type  
        :type nodeType: :py:class:`NXOpen.Tooling.FastenerAssyStackTypeMethod` 
        :param deltaLength:  the stack length to be changed 
        :type deltaLength: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetReusablePocketBuilder(self, pocketTag: ReusablePocketBuilder) -> None:
        """
        Sets the reusable pocket builder
        
        Signature ``SetReusablePocketBuilder(pocketTag)`` 
        
        :param pocketTag:  The reusable component pocket builder 
        :type pocketTag: :py:class:`NXOpen.Tooling.ReusablePocketBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetReusablePocketBuilder(self) -> ReusablePocketBuilder:
        """
        Gets the reusable pocket builder 
        
        Signature ``GetReusablePocketBuilder()`` 
        
        :returns:  The reusable component pocket builder 
        :rtype: :py:class:`NXOpen.Tooling.ReusablePocketBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EraseFastenerAssemblyData(self, index: int) -> None:
        """
        Erases the fastener assembly data, including the hole data and assembly data in the fastener setup data
        
        Signature ``EraseFastenerAssemblyData(index)`` 
        
        :param index:  The hole index in the fastener assembly to be removed 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBlindHole(self, inx: int, blindhole: bool) -> None:
        """
        Sets the blind hole for the hole in the fastener assembly
        
        Signature ``SetBlindHole(inx, blindhole)`` 
        
        :param inx:  parent index  
        :type inx: int 
        :param blindhole:  whether the hole is blind hole 
        :type blindhole: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePatternComponent(self, createPattern: bool) -> None:
        """
        Create the pattern component when the positioining pattern sketch feature is not exsit; edit pattern component when the positioining pattern feature is exsit
        
        Signature ``CreatePatternComponent(createPattern)`` 
        
        :param createPattern:  Flag to decide whether to create pattern component or edit, set flag as true to create and set flag false to edit  
        :type createPattern: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindPositioningFeatureSet(self) -> NXOpen.Features.Feature:
        """
        Find the positioning feature set by pattern sketch  
        
        Signature ``FindPositioningFeatureSet()`` 
        
        :returns:  Positioning feature set  
        :rtype: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SaveDropPointPosition(self, tempPnt: NXOpen.Point3d) -> None:
        """
        Keep the first drop point position 
        
        Signature ``SaveDropPointPosition(tempPnt)`` 
        
        :param tempPnt:  the first drop point position in hole data  
        :type tempPnt: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePositioningFeatureOnPoint(self, selobj: NXOpen.NXObject, inputPosition: NXOpen.Point3d, centerFace: bool) -> None:
        """
        Create positioning feature on the given position
        
        Signature ``CreatePositioningFeatureOnPoint(selobj, inputPosition, centerFace)`` 
        
        :param selobj:  top or bottom face  
        :type selobj: :py:class:`NXOpen.NXObject` 
        :param inputPosition:  The input position 
        :type inputPosition: :py:class:`NXOpen.Point3d` 
        :param centerFace:  whether to use face center as location 
        :type centerFace: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def OffsetPositioningFeature(self, offsetValue: float) -> None:
        """
        Offset the positioning feature
        
        Signature ``OffsetPositioningFeature(offsetValue)`` 
        
        :param offsetValue:  the offset distance of the positionging feature 
        :type offsetValue: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    ComponentPatternBuilder: NXOpen.Assemblies.ComponentPatternBuilder = ...
    """
    Returns or sets  the current component pattern builder
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentPatternBuilder`` 
    
    :returns:  The reusable component pattern builder 
    :rtype: :py:class:`NXOpen.Assemblies.ComponentPatternBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ComponentPatternBuilder`` 
    
    :param patternComponentBuilderTag:  The reusable component pattern builder 
    :type patternComponentBuilderTag: :py:class:`NXOpen.Assemblies.ComponentPatternBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PositioningFeature: NXOpen.Sketch = ...
    """
    Returns or sets  the positioning feature that needed for fastener assembly 
    
    <hr>
    
    Getter Method
    
    Signature ``PositioningFeature`` 
    
    :returns:  Positioning feature  
    :rtype: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositioningFeature`` 
    
    :param sketch:  Positioning feature  
    :type sketch: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: FastenerAssy = ...  # unknown typename


class CoolingDefineChannelBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CoolingDefineChannelBuilderTypes():
    """
    Types to specify how to assign attributes to the created body. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Channel", " - "
       "Baffle", " - "
    """
    Channel = 0  # CoolingDefineChannelBuilderTypesMemberType
    Baffle = 1  # CoolingDefineChannelBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CoolingDefineChannelBuilderExtensionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CoolingDefineChannelBuilderExtensionTypes():
    """
    The extension types of channel
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoExtension", "No extension"
       "AlongExtrusionDirection", "Extend channel to boundary body along the extrusion direction"
       "AlongReverseExtrusionDirection", "Extend channel to boundary body along the reverse extrusion direction"
       "AlongBothDirections", "Extend channel to boundary body along both direction"
    """
    NoExtension = 0  # CoolingDefineChannelBuilderExtensionTypesMemberType
    AlongExtrusionDirection = 1  # CoolingDefineChannelBuilderExtensionTypesMemberType
    AlongReverseExtrusionDirection = 2  # CoolingDefineChannelBuilderExtensionTypesMemberType
    AlongBothDirections = 3  # CoolingDefineChannelBuilderExtensionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CoolingDefineChannelBuilderTipEndTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CoolingDefineChannelBuilderTipEndTypes():
    """
    The tip end types of channel
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No tip angle"
       "Angle", "Angle tip"
       "Round", "Round tip"
    """
    NotSet = 0  # CoolingDefineChannelBuilderTipEndTypesMemberType
    Angle = 1  # CoolingDefineChannelBuilderTipEndTypesMemberType
    Round = 2  # CoolingDefineChannelBuilderTipEndTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CoolingDefineChannelBuilder(NXOpen.Builder):
    """
    The builder class for Cooling Define Channel which assists you
    to create channels directly.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.CoolingDefineChannelCollection.CreateCoolingDefineChannelBuilder`
    
    Default values.
    
    ======================  ===========================================
    Property                Value
    ======================  ===========================================
    AdjustBoundaryChannel   0 
    ----------------------  -------------------------------------------
    Diameter.Value          10 (millimeters part), 0.375 (inches part) 
    ----------------------  -------------------------------------------
    ExtensionSolution       NoExtension 
    ----------------------  -------------------------------------------
    Motion.DeltaEnum        ReferenceWcsWorkPart 
    ----------------------  -------------------------------------------
    Motion.DeltaXc.Value    0.0 
    ----------------------  -------------------------------------------
    Motion.DeltaYc.Value    0.0 
    ----------------------  -------------------------------------------
    Motion.DeltaZc.Value    0.0 
    ----------------------  -------------------------------------------
    RemoveParameter         0 
    ----------------------  -------------------------------------------
    TipAngle.Value          118 
    ----------------------  -------------------------------------------
    TipEndType              None 
    ======================  ===========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Types to specify how to assign attributes to the created body. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Channel", " - "
           "Baffle", " - "
        """
        Channel = 0  # CoolingDefineChannelBuilderTypesMemberType
        Baffle = 1  # CoolingDefineChannelBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ExtensionTypes():
        """
        The extension types of channel
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoExtension", "No extension"
           "AlongExtrusionDirection", "Extend channel to boundary body along the extrusion direction"
           "AlongReverseExtrusionDirection", "Extend channel to boundary body along the reverse extrusion direction"
           "AlongBothDirections", "Extend channel to boundary body along both direction"
        """
        NoExtension = 0  # CoolingDefineChannelBuilderExtensionTypesMemberType
        AlongExtrusionDirection = 1  # CoolingDefineChannelBuilderExtensionTypesMemberType
        AlongReverseExtrusionDirection = 2  # CoolingDefineChannelBuilderExtensionTypesMemberType
        AlongBothDirections = 3  # CoolingDefineChannelBuilderExtensionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TipEndTypes():
        """
        The tip end types of channel
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No tip angle"
           "Angle", "Angle tip"
           "Round", "Round tip"
        """
        NotSet = 0  # CoolingDefineChannelBuilderTipEndTypesMemberType
        Angle = 1  # CoolingDefineChannelBuilderTipEndTypesMemberType
        Round = 2  # CoolingDefineChannelBuilderTipEndTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetBoundaryBody(self, body: NXOpen.Body) -> None:
        """
        Sets the boundary body to do channel extension 
        
        Signature ``SetBoundaryBody(body)`` 
        
        :param body:  the body set as boundary body 
        :type body: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AutoGetBoundaryBody(self) -> None:
        """
        Gets the boundary body automatically
        
        Signature ``AutoGetBoundaryBody()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAutoSelectBoundary(self, autoSelectBoundary: bool) -> None:
        """
        Sets the value that whether the boundary body is automatically got or not
        
        Signature ``SetAutoSelectBoundary(autoSelectBoundary)`` 
        
        :param autoSelectBoundary: 
        :type autoSelectBoundary: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    AdjustBoundaryChannel: bool = ...
    """
    Returns or sets  the flag to indicate whether to extend boundary channel or not 
    
    <hr>
    
    Getter Method
    
    Signature ``AdjustBoundaryChannel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjustBoundaryChannel`` 
    
    :param adjustBoundaryChannel: 
    :type adjustBoundaryChannel: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    ChannelDiameter: float = ...
    """
    Returns or sets  the channel diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``ChannelDiameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChannelDiameter`` 
    
    :param channelDiameter: 
    :type channelDiameter: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Diameter: NXOpen.Expression = ...
    """
    Returns  the channel diameter 
    
    <hr>
    
    Getter Method
    
    Signature ``Diameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ExtensionSolution: CoolingDefineChannelBuilderExtensionTypes = ...
    """
    Returns or sets  the candidate extension types 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionSolution`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CoolingDefineChannelBuilderExtensionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtensionSolution`` 
    
    :param extensionSolution: 
    :type extensionSolution: :py:class:`NXOpen.Tooling.CoolingDefineChannelBuilderExtensionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    LimitBody: NXOpen.SelectBody = ...
    """
    Returns  the boundary body 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Motion: NXOpen.GeometricUtilities.ModlMotion = ...
    """
    Returns  the object which defines the transformation from start point to end point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Motion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.ModlMotion` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RemoveParameter: bool = ...
    """
    Returns or sets  the flag to indicate whether to remove parameters of the created solid or not 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveParameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveParameter`` 
    
    :param removeParameter: 
    :type removeParameter: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    StartPoint: NXOpen.Point = ...
    """
    Returns or sets  the point as the start position of the channel.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartPoint`` 
    
    :param startPoint: 
    :type startPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TipAngle: NXOpen.Expression = ...
    """
    Returns  the value for the tip angle of the channel.  
    
    <hr>
    
    Getter Method
    
    Signature ``TipAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    TipEndType: CoolingDefineChannelBuilderTipEndTypes = ...
    """
    Returns or sets  the candidate of tip end type
    
    <hr>
    
    Getter Method
    
    Signature ``TipEndType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CoolingDefineChannelBuilderTipEndTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TipEndType`` 
    
    :param tipEndType: 
    :type tipEndType: :py:class:`NXOpen.Tooling.CoolingDefineChannelBuilderTipEndTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Type: CoolingDefineChannelBuilderTypes = ...
    """
    Returns or sets  the type of attributes assigned to the created body attribute type values.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CoolingDefineChannelBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.CoolingDefineChannelBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Null: CoolingDefineChannelBuilder = ...  # unknown typename


class OffsetCurve3DBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.OffsetCurve3DBuilder` builder which implements 
    offset curves along a direction with offset distance in three dimension.  
    
    This builder's Commit 
    can produce more than one offset curves, the GetCommittedObjects can be used to get the objects.
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.CAMDataManager.CreateOffsetCurve3dBuilder`
    
    Default values.
    
    ===============================  ===============================================
    Property                         Value
    ===============================  ===============================================
    DistanceTolerance (deprecated)   0.0254 (millimeters part), 0.001 (inches part) 
    -------------------------------  -----------------------------------------------
    OffsetDistance (deprecated)      10 (millimeters part), 0.4 (inches part) 
    ===============================  ===============================================
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:class:`NXOpen.Features.Offset3DCurveBuilder` instead
    """
    
    def GetAllReverseDirectionFlags(self) -> 'list[bool]':
        """
        Gets reverse direction flags for each offset curve.  
        
        Signature ``GetAllReverseDirectionFlags()`` 
        
        :returns:  the reverse direction flags for each offset curve  
        :rtype: list of bool 
        
        .. versionadded:: NX9.0.0
        
        .. deprecated::  NX10.0.0
            
        
        License requirements: None.
        """
        ...
    
    
    def SetAllReverseDirectionFlags(self, allReverseDirectionFlags: 'list[bool]') -> None:
        """
        Sets reverse direction flags for each offset curve.  
        
        Signature ``SetAllReverseDirectionFlags(allReverseDirectionFlags)`` 
        
        :param allReverseDirectionFlags:  the reverse direction flags for each offset curve  
        :type allReverseDirectionFlags: list of bool 
        
        .. versionadded:: NX9.0.0
        
        .. deprecated::  NX10.0.0
            Please use :py:meth:`NXOpen.Features.Offset3DCurveBuilder.FlipOffsetCurveDirection` instead 
        
        License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:meth:`NXOpen.GeometricUtilities.CurveFitData.Tolerance` instead 
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:meth:`NXOpen.GeometricUtilities.CurveFitData.Tolerance` instead 
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    OffsetCurves: NXOpen.Section = ...
    """
    Returns  the curves to offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:meth:`NXOpen.Features.Offset3DCurveBuilder.OffsetCurves` instead 
    
    License requirements: None.
    """
    OffsetDistance: float = ...
    """
    Returns or sets  the offset distance.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:meth:`NXOpen.Features.Offset3DCurveBuilder.OffsetDistance` instead 
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetDistance`` 
    
    :param offsetDistance: 
    :type offsetDistance: float 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:meth:`NXOpen.Features.Offset3DCurveBuilder.OffsetDistance` instead 
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    OffsetViewDirection: NXOpen.Direction = ...
    """
    Returns or sets  the reference direction from which to get the offset direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetViewDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:meth:`NXOpen.Features.Offset3DCurveBuilder.OffsetViewDirection` instead 
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetViewDirection`` 
    
    :param offsetViewDirection: 
    :type offsetViewDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:meth:`NXOpen.Features.Offset3DCurveBuilder.SetOffsetViewDirection` instead 
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the flag of reverse all offset direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:meth:`NXOpen.Features.Offset3DCurveBuilder.ReverseSide` instead 
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
        Please use :py:meth:`NXOpen.Features.Offset3DCurveBuilder.SetReverseSide` instead 
    
    License requirements: nx_freeform_2 ("advanced freeform modeling") OR die_engineering ("DIE ENGINEERING")
    """
    Null: OffsetCurve3DBuilder = ...  # unknown typename


class UnfoldingSimulationBuilder(NXOpen.Builder):
    """
    Unfolding Simulation Builder of PDW and EDW.  
    
    Nothing is returned by this builder. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateUnfoldingSimulationBuilder`
    
    Default values.
    
    ========  =====
    Property  Value
    ========  =====
    Speed     1 
    --------  -----
    State     0 
    ========  =====
    
    .. versionadded:: NX10.0.0
    """
    
    def StepBackward(self) -> None:
        """
        Step backward of animation 
        
        Signature ``StepBackward()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Play(self) -> None:
        """
        Play animation 
        
        Signature ``Play()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Pause(self) -> None:
        """
        Pause animation 
        
        Signature ``Pause()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def StepForward(self) -> None:
        """
        Step animation forward 
        
        Signature ``StepForward()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    BendFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the bend faces 
    
    <hr>
    
    Getter Method
    
    Signature ``BendFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    CheckedBody: NXOpen.ScCollector = ...
    """
    Returns  the body that will do static interference check with selected bend face body 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckedBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ReferenceFaceEdge: NXOpen.ScCollector = ...
    """
    Returns  the reference face edge 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceFaceEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Speed: int = ...
    """
    Returns or sets  the speed 
    
    <hr>
    
    Getter Method
    
    Signature ``Speed`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Speed`` 
    
    :param speed: 
    :type speed: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    State: int = ...
    """
    Returns or sets  the state 
    
    <hr>
    
    Getter Method
    
    Signature ``State`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``State`` 
    
    :param state: 
    :type state: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: UnfoldingSimulationBuilder = ...  # unknown typename


class BendInsertDesignCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.BendInsertDesignCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBendInsertDesignBuilder(self) -> BendInsertDesignBuilder:
        """
        Creates Bend Insert Design  builder.  
        
        Signature ``CreateBendInsertDesignBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.BendInsertDesignBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    


class MoldCsysCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.MoldCsysCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateMoldCsysBuilder(self) -> MoldCsysBuilder:
        """
        Creates mold csys builder  
        
        Signature ``CreateMoldCsysBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.MoldCsysBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class SpreadsheetDataParameterStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpreadsheetDataParameterStatus():
    """
    Represents the different spreadsheet parameter status 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Lock", "User can't change the value in UI"
       "SystemKey", "This is system key parameter"
       "UserKey", "Key parameter analyzed from spreadsheet search"
       "HideStatus", "Not shown in UI"
       "ScaleItem", "This is a scale item"
       "ReadOnly", "This parameter is read only"
       "Modified", "The parameter value is changed"
       "ForceColor", "If the parameter uses user value, normally it shows in UI in a different color. If this status is set, the parameter value will be shown in the same color."
       "HiddenValue", "The parameter has value, but it should be hidden to user"
       "OptionValue", "The parameter has multiple value, but not treated as key parameter"
    """
    Lock = 1  # SpreadsheetDataParameterStatusMemberType
    SystemKey = 2  # SpreadsheetDataParameterStatusMemberType
    UserKey = 4  # SpreadsheetDataParameterStatusMemberType
    HideStatus = 8  # SpreadsheetDataParameterStatusMemberType
    ScaleItem = 16  # SpreadsheetDataParameterStatusMemberType
    ReadOnly = 32  # SpreadsheetDataParameterStatusMemberType
    Modified = 64  # SpreadsheetDataParameterStatusMemberType
    ForceColor = 128  # SpreadsheetDataParameterStatusMemberType
    HiddenValue = 256  # SpreadsheetDataParameterStatusMemberType
    OptionValue = 512  # SpreadsheetDataParameterStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpreadsheetDataParameter(NXOpen.TransientObject):
    """
    Represents parameter in the spreadsheet.  
    
    .. versionadded:: NX8.0.0
    """
    
    class Status():
        """
        Represents the different spreadsheet parameter status 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Lock", "User can't change the value in UI"
           "SystemKey", "This is system key parameter"
           "UserKey", "Key parameter analyzed from spreadsheet search"
           "HideStatus", "Not shown in UI"
           "ScaleItem", "This is a scale item"
           "ReadOnly", "This parameter is read only"
           "Modified", "The parameter value is changed"
           "ForceColor", "If the parameter uses user value, normally it shows in UI in a different color. If this status is set, the parameter value will be shown in the same color."
           "HiddenValue", "The parameter has value, but it should be hidden to user"
           "OptionValue", "The parameter has multiple value, but not treated as key parameter"
           "NonStandardValue", "The current value of this parameter is user's input, not from spreadsheet"
           "ShipRule", "This is used for ship design to trigger design. Syntax is ^$parameterName. 0 not to trigger rule, 1 to trigger rule."
        """
        Lock = 1  # SpreadsheetDataParameterStatusMemberType
        SystemKey = 2  # SpreadsheetDataParameterStatusMemberType
        UserKey = 4  # SpreadsheetDataParameterStatusMemberType
        HideStatus = 8  # SpreadsheetDataParameterStatusMemberType
        ScaleItem = 16  # SpreadsheetDataParameterStatusMemberType
        ReadOnly = 32  # SpreadsheetDataParameterStatusMemberType
        Modified = 64  # SpreadsheetDataParameterStatusMemberType
        ForceColor = 128  # SpreadsheetDataParameterStatusMemberType
        HiddenValue = 256  # SpreadsheetDataParameterStatusMemberType
        OptionValue = 512  # SpreadsheetDataParameterStatusMemberType
        NonStandardValue = 1024  # SpreadsheetDataParameterStatusMemberType
        ShipRule = 2048  # SpreadsheetDataParameterStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Dispose the spreadsheet object 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetValueList(self) -> 'list[str]':
        """
        Get the list of values by giving a parameter name in spreadsheet 
        
        Signature ``GetValueList()`` 
        
        :returns:  The list of values  
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def HasStatus(self, parameterStatus: SpreadsheetDataParameterStatus) -> bool:
        """
        Check if the parameter has the given status  
        
        Signature ``HasStatus(parameterStatus)`` 
        
        :param parameterStatus:  status of the parameter  
        :type parameterStatus: :py:class:`NXOpen.Tooling.SpreadsheetDataParameterStatus` 
        :returns:  true or not  
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    DescriptiveName: str = ...
    """
    Returns or sets  the descriptive name of the parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``DescriptiveName`` 
    
    :returns:  descriptive name of the parameter  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DescriptiveName`` 
    
    :param descriptiveName:  descriptive name of the parameter  
    :type descriptiveName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ParameterName: str = ...
    """
    Returns or sets  the name of the parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterName`` 
    
    :returns:  name of the parameter  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParameterName`` 
    
    :param parameterName:  name of the parameter  
    :type parameterName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ParameterStatus: int = ...
    """
    Returns or sets  the status of the parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterStatus`` 
    
    :returns:  status of the parameter  
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParameterStatus`` 
    
    :param parameterStatus:  status of the parameter  
    :type parameterStatus: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ParameterValue: str = ...
    """
    Returns or sets  the value of the parameter 
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterValue`` 
    
    :returns:  value of the parameter  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParameterValue`` 
    
    :param parameterValue:  value of the parameter  
    :type parameterValue: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """


class TrimRegionBuilderBoundaryOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimRegionBuilderBoundaryOption():
    """
    represents the boundary type option, body/curve type or traverse type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BodyCurve", "select body/edge/curve as boundary object"
       "Traverse", "use traverse loop to select boundary object"
    """
    BodyCurve = 0  # TrimRegionBuilderBoundaryOptionMemberType
    Traverse = 1  # TrimRegionBuilderBoundaryOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimRegionBuilderRegionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimRegionBuilderRegionOption():
    """
    represents the option to keep or discard the selected region. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Keep", "selected region will be kept."
       "Discard", "selected region will be discarded."
    """
    Keep = 0  # TrimRegionBuilderRegionOptionMemberType
    Discard = 1  # TrimRegionBuilderRegionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrimRegionBuilder(NXOpen.Builder):
    """
    Mold Wizard trim region management builder, trims a body to a boundary of edges, curves or bodies.  
    
    Optionally creates output trimmed sheet body as a patch surface. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.TrimRegionCollection.CreateTrimRegionBuilder`
    
    Default values.
    
    ===============  ==========
    Property         Value
    ===============  ==========
    AsPatchSurface   1 
    ---------------  ----------
    BoundaryType     BodyCurve 
    ---------------  ----------
    RegionType       Keep 
    ===============  ==========
    
    .. versionadded:: NX7.5.0
    """
    
    class BoundaryOption():
        """
        represents the boundary type option, body/curve type or traverse type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BodyCurve", "select body/edge/curve as boundary object"
           "Traverse", "use traverse loop to select boundary object"
        """
        BodyCurve = 0  # TrimRegionBuilderBoundaryOptionMemberType
        Traverse = 1  # TrimRegionBuilderBoundaryOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RegionOption():
        """
        represents the option to keep or discard the selected region. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Keep", "selected region will be kept."
           "Discard", "selected region will be discarded."
        """
        Keep = 0  # TrimRegionBuilderRegionOptionMemberType
        Discard = 1  # TrimRegionBuilderRegionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetColorValue(self) -> tuple:
        """
        Returns the value of surface patch color.  
        
        Signature ``GetColorValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (redValue, greenValue, blueValue). redValue is a float.   red value between 0 and 1 greenValue is a float.   green value between 0 and 1 blueValue is a float.   blue value between 0 and 1 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetColorValue(self, redValue: float, greenValue: float, blueValue: float) -> None:
        """
        Sets the value of surface patch color.  
        
        Signature ``SetColorValue(redValue, greenValue, blueValue)`` 
        
        :param redValue:  red value between 0 and 1  
        :type redValue: float 
        :param greenValue:  green value between 0 and 1  
        :type greenValue: float 
        :param blueValue:  blue value between 0 and 1  
        :type blueValue: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTraverseEdges(self, traverseEdges: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the edges from traverse loop to builder data.  
        
        Signature ``SetTraverseEdges(traverseEdges)`` 
        
        :param traverseEdges:  the selected edges  
        :type traverseEdges: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    AsPatchSurface: bool = ...
    """
    Returns or sets  the value of option, which specifies whether to set the result region as patch surface or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``AsPatchSurface`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AsPatchSurface`` 
    
    :param asPatchSurface: 
    :type asPatchSurface: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BodyColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color value of patch surface body.  
    
    <hr>
    
    Getter Method
    
    Signature ``BodyColor`` 
    
    :returns: the color index 
    :rtype: Id 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BodyColor`` 
    
    :param patchColor: the color index 
    :type patchColor: Id 
    
    .. versionadded:: NX8.0.1
    
    License requirements: None.
    """
    BoundaryBody: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selection of boundary body to extract region faces, which are used for create intersection curves with target.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BoundaryType: TrimRegionBuilderBoundaryOption = ...
    """
    Returns or sets  the value of boundary type option, which specifies to use body or edge/curve as boundary object.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimRegionBuilderBoundaryOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryType`` 
    
    :param boundaryType: 
    :type boundaryType: :py:class:`NXOpen.Tooling.TrimRegionBuilderBoundaryOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LoopCollector: NXOpen.ScCollector = ...
    """
    Returns  the loop collector to collect the traverse loops.  
    
    <hr>
    
    Getter Method
    
    Signature ``LoopCollector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RegionPoint: NXOpen.RegionPointList = ...
    """
    Returns  the selection of region point, which will be kept or discarded as the result of trim region.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.RegionPointList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RegionType: TrimRegionBuilderRegionOption = ...
    """
    Returns or sets  the value of the option, which specifies to keep or discard the selected region.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.TrimRegionBuilderRegionOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RegionType`` 
    
    :param regionType: 
    :type regionType: :py:class:`NXOpen.Tooling.TrimRegionBuilderRegionOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TargetBody: NXOpen.SelectBody = ...
    """
    Returns  the selection of target to create trim region, body type only.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: TrimRegionBuilder = ...  # unknown typename


class UnusedFileManagementBuilderFileDirectoryMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UnusedFileManagementBuilderFileDirectory():
    """
    the unused file location. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ProjectDirectory", "project directory"
       "RecycleBin", "recycle bin"
    """
    ProjectDirectory = 0  # UnusedFileManagementBuilderFileDirectoryMemberType
    RecycleBin = 1  # UnusedFileManagementBuilderFileDirectoryMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UnusedFileManagementBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.UnusedFileManagementBuilder`
    Unused File Management is to manage the unused files of the project.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.UnusedFileManagementCollection.CreateUnusedFileManagementBuilder`
    
    Default values.
    
    ==========  =================
    Property    Value
    ==========  =================
    ListDir     ProjectDirectory 
    ----------  -----------------
    SelectAll   0 
    ==========  =================
    
    .. versionadded:: NX8.0.0
    """
    
    class FileDirectory():
        """
        the unused file location. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ProjectDirectory", "project directory"
           "RecycleBin", "recycle bin"
        """
        ProjectDirectory = 0  # UnusedFileManagementBuilderFileDirectoryMemberType
        RecycleBin = 1  # UnusedFileManagementBuilderFileDirectoryMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ListDir: UnusedFileManagementBuilderFileDirectory = ...
    """
    Returns or sets  the listed directory.  
    
    <hr>
    
    Getter Method
    
    Signature ``ListDir`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.UnusedFileManagementBuilderFileDirectory` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ListDir`` 
    
    :param listDir: 
    :type listDir: :py:class:`NXOpen.Tooling.UnusedFileManagementBuilderFileDirectory` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectAll: bool = ...
    """
    Returns or sets  the select all option.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAll`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectAll`` 
    
    :param selectAll: 
    :type selectAll: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: UnusedFileManagementBuilder = ...  # unknown typename


class ElectrodeCopyCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ElectrodeCopy builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateElectrodeCopyBuilder(self) -> ElectrodeCopyBuilder:
        """
        Creates electrode copy builder  
        
        Signature ``CreateElectrodeCopyBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ElectrodeCopyBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderDrawTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderDrawType():
    """
    the enum of draw type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SingleDraw", "For draw die, punch and binder are lower than die."
       "DoubleDraw", "For draw die, punch and binder are higher than die."
    """
    SingleDraw = 0  # LsdynaGeometryPreparationBuilderDrawTypeMemberType
    DoubleDraw = 1  # LsdynaGeometryPreparationBuilderDrawTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderMaterialTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderMaterialType():
    """
    the enum of material type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NXMaterial", "Use NX material for LS-Dyna solver."
       "LSDynaMaterial", "Use LS-Dyna material for LS-Dyna solver."
    """
    NXMaterial = 0  # LsdynaGeometryPreparationBuilderMaterialTypeMemberType
    LSDynaMaterial = 1  # LsdynaGeometryPreparationBuilderMaterialTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderBlankOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderBlankOption():
    """
    the enum of blank option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sheet", "Select a sheet body as blank."
       "Curve", "Select several curves to create a blank."
    """
    Sheet = 0  # LsdynaGeometryPreparationBuilderBlankOptionMemberType
    Curve = 1  # LsdynaGeometryPreparationBuilderBlankOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderBlankPositionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderBlankPosition():
    """
    the enum of blank position. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AboveBinder", "Blank sheet body is above binder."
       "AboveBinderandPunch", "Blank sheet body is above binder and punch."
    """
    AboveBinder = 0  # LsdynaGeometryPreparationBuilderBlankPositionMemberType
    AboveBinderandPunch = 1  # LsdynaGeometryPreparationBuilderBlankPositionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderDrawBeadTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderDrawBeadType():
    """
    the enum of draw bead type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Round", "Draw bead section has round shape."
       "Rectangle", "Draw bead section has rectangle shape."
    """
    Round = 0  # LsdynaGeometryPreparationBuilderDrawBeadTypeMemberType
    Rectangle = 1  # LsdynaGeometryPreparationBuilderDrawBeadTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderContactTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderContactType():
    """
    the enum of contact type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FormingOneWaySurfaceToSurface", "The draw components contact type is forming one way surface to surface."
       "FormingOneWaySurfaceToSurfaceSmooth", "The draw components contact type is forming one way surface to surface smooth."
       "FormingSurfaceToSurface", "The draw components contact type is forming surface to surface."
       "FormingSurfaceToSurfaceSmooth", "The draw components contact type is forming surface to surface smooth."
       "SurfaceToSurface", "The draw components contact type is surface to surface."
       "AutomaticSurfaceToSurface", "The draw components contact type is automatic surface to surface."
    """
    FormingOneWaySurfaceToSurface = 0  # LsdynaGeometryPreparationBuilderContactTypeMemberType
    FormingOneWaySurfaceToSurfaceSmooth = 1  # LsdynaGeometryPreparationBuilderContactTypeMemberType
    FormingSurfaceToSurface = 2  # LsdynaGeometryPreparationBuilderContactTypeMemberType
    FormingSurfaceToSurfaceSmooth = 3  # LsdynaGeometryPreparationBuilderContactTypeMemberType
    SurfaceToSurface = 4  # LsdynaGeometryPreparationBuilderContactTypeMemberType
    AutomaticSurfaceToSurface = 5  # LsdynaGeometryPreparationBuilderContactTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderProcessTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderProcessType():
    """
    the enum of process type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Gravity", "Blank has elastic deformation in flexible status."
       "Closing", "The process of die travels from initial position to binder."
       "Drawing", "The process of die travels from binder to punch."
    """
    Gravity = 0  # LsdynaGeometryPreparationBuilderProcessTypeMemberType
    Closing = 1  # LsdynaGeometryPreparationBuilderProcessTypeMemberType
    Drawing = 2  # LsdynaGeometryPreparationBuilderProcessTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderProcessActionBinderMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderProcessActionBinder():
    """
    the enum of process action binder type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Stationary", "The process action for binder is stationary."
       "ClosureWith", "The process action for binder is closure with other draw components."
       "FollowWith", "The process action for binder is follow with other draw components."
       "Travel", "The process action for binder is travel to other draw components."
       "UntilHome", "The process action for binder is until home."
       "Force", "The process action for binder is by force."
    """
    Stationary = 0  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
    ClosureWith = 1  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
    FollowWith = 2  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
    Travel = 3  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
    UntilHome = 4  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
    Force = 5  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderProcessActionDieMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderProcessActionDie():
    """
    the enum of process action die type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Stationary", "The process action for die is stationary."
       "ClosureWith", "The process action for die is closure with other draw components."
       "FollowWith", "The process action for die is follow with other draw components."
       "Travel", "The process action for die is travel to other draw components."
       "UntilHome", "The process action for die is until home."
       "Force", "The process action for die is by force."
    """
    Stationary = 0  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
    ClosureWith = 1  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
    FollowWith = 2  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
    Travel = 3  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
    UntilHome = 4  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
    Force = 5  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderProcessActionPunchMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderProcessActionPunch():
    """
    the enum of process action punch type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Stationary", "The process action for punch is stationary."
       "ClosureWith", "The process action for punch is closure with other draw components."
       "FollowWith", "The process action for punch is follow with other draw components."
       "Travel", "The process action for punch is travel to other draw components."
       "UntilHome", "The process action for punch is until home."
       "Force", "The process action for punch is by force."
    """
    Stationary = 0  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
    ClosureWith = 1  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
    FollowWith = 2  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
    Travel = 3  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
    UntilHome = 4  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
    Force = 5  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderTargetPunchMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderTargetPunch():
    """
    the enum of target punch type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Punch", "For the process, the target of punch is punch."
       "Binder", "For the process, the target of punch is binder."
       "Die", "For the process, the target of punch is die."
    """
    Punch = 0  # LsdynaGeometryPreparationBuilderTargetPunchMemberType
    Binder = 1  # LsdynaGeometryPreparationBuilderTargetPunchMemberType
    Die = 2  # LsdynaGeometryPreparationBuilderTargetPunchMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderTargetBinderMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderTargetBinder():
    """
    the enum of target binder type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Punch", "For the process, the target of binder is punch."
       "Binder", "For the process, the target of binder is binder."
       "Die", "For the process, the target of binder is die."
    """
    Punch = 0  # LsdynaGeometryPreparationBuilderTargetBinderMemberType
    Binder = 1  # LsdynaGeometryPreparationBuilderTargetBinderMemberType
    Die = 2  # LsdynaGeometryPreparationBuilderTargetBinderMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilderTargetDieMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaGeometryPreparationBuilderTargetDie():
    """
    the enum of target die type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Punch", "For the process, the target of die is punch."
       "Binder", "For the process, the target of die is binder."
       "Die", "For the process, the target of die is die."
    """
    Punch = 0  # LsdynaGeometryPreparationBuilderTargetDieMemberType
    Binder = 1  # LsdynaGeometryPreparationBuilderTargetDieMemberType
    Die = 2  # LsdynaGeometryPreparationBuilderTargetDieMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaGeometryPreparationBuilder(NXOpen.Builder):
    """
    Stamping Die LS-Dyna integration draw geometry preprare builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateLsdynaGeometryPreparationBuilder`
    
    Default values.
    
    ====================  ==============================================
    Property              Value
    ====================  ==============================================
    AutoPositionOption    0 
    --------------------  ----------------------------------------------
    BinderPosition        0 
    --------------------  ----------------------------------------------
    BlankOptionType       Sheet 
    --------------------  ----------------------------------------------
    BlankPositionType     AboveBinder 
    --------------------  ----------------------------------------------
    BlankPositionValue    0 
    --------------------  ----------------------------------------------
    BlankThickness        0 
    --------------------  ----------------------------------------------
    ContactOffset         0 
    --------------------  ----------------------------------------------
    ContactTypeOption     FormingOneWaySurfaceToSurface 
    --------------------  ----------------------------------------------
    DiePosition           0 
    --------------------  ----------------------------------------------
    DrawBeadTypeOption    Round 
    --------------------  ----------------------------------------------
    DrawTypeOption        SingleDraw 
    --------------------  ----------------------------------------------
    Friction              0.15 
    --------------------  ----------------------------------------------
    NormalForce           0 
    --------------------  ----------------------------------------------
    PercentageForce       50 
    --------------------  ----------------------------------------------
    ProcessBinder         0 
    --------------------  ----------------------------------------------
    ProcessBinderOption   0 
    --------------------  ----------------------------------------------
    ProcessBinderType     Stationary 
    --------------------  ----------------------------------------------
    ProcessDie            0 
    --------------------  ----------------------------------------------
    ProcessDieOption      0 
    --------------------  ----------------------------------------------
    ProcessDieType        Stationary 
    --------------------  ----------------------------------------------
    ProcessPunch          0 
    --------------------  ----------------------------------------------
    ProcessPunchOption    0 
    --------------------  ----------------------------------------------
    ProcessPunchType      Stationary 
    --------------------  ----------------------------------------------
    ProcessTypeOption     Closing 
    --------------------  ----------------------------------------------
    PunchPosition         0 
    --------------------  ----------------------------------------------
    RestrainForce.Value   356.5 (millimeters part), 356.5 (inches part) 
    --------------------  ----------------------------------------------
    TargetBinderType      Punch 
    --------------------  ----------------------------------------------
    TargetDieType         Punch 
    --------------------  ----------------------------------------------
    TargetPunchType       Punch 
    --------------------  ----------------------------------------------
    TensileStrength       0 
    ====================  ==============================================
    
    .. versionadded:: NX9.0.0
    """
    
    class DrawType():
        """
        the enum of draw type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SingleDraw", "For draw die, punch and binder are lower than die."
           "DoubleDraw", "For draw die, punch and binder are higher than die."
        """
        SingleDraw = 0  # LsdynaGeometryPreparationBuilderDrawTypeMemberType
        DoubleDraw = 1  # LsdynaGeometryPreparationBuilderDrawTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MaterialType():
        """
        the enum of material type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NXMaterial", "Use NX material for LS-Dyna solver."
           "LSDynaMaterial", "Use LS-Dyna material for LS-Dyna solver."
        """
        NXMaterial = 0  # LsdynaGeometryPreparationBuilderMaterialTypeMemberType
        LSDynaMaterial = 1  # LsdynaGeometryPreparationBuilderMaterialTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BlankOption():
        """
        the enum of blank option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sheet", "Select a sheet body as blank."
           "Curve", "Select several curves to create a blank."
        """
        Sheet = 0  # LsdynaGeometryPreparationBuilderBlankOptionMemberType
        Curve = 1  # LsdynaGeometryPreparationBuilderBlankOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BlankPosition():
        """
        the enum of blank position. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AboveBinder", "Blank sheet body is above binder."
           "AboveBinderandPunch", "Blank sheet body is above binder and punch."
        """
        AboveBinder = 0  # LsdynaGeometryPreparationBuilderBlankPositionMemberType
        AboveBinderandPunch = 1  # LsdynaGeometryPreparationBuilderBlankPositionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DrawBeadType():
        """
        the enum of draw bead type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Round", "Draw bead section has round shape."
           "Rectangle", "Draw bead section has rectangle shape."
        """
        Round = 0  # LsdynaGeometryPreparationBuilderDrawBeadTypeMemberType
        Rectangle = 1  # LsdynaGeometryPreparationBuilderDrawBeadTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ContactType():
        """
        the enum of contact type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FormingOneWaySurfaceToSurface", "The draw components contact type is forming one way surface to surface."
           "FormingOneWaySurfaceToSurfaceSmooth", "The draw components contact type is forming one way surface to surface smooth."
           "FormingSurfaceToSurface", "The draw components contact type is forming surface to surface."
           "FormingSurfaceToSurfaceSmooth", "The draw components contact type is forming surface to surface smooth."
           "SurfaceToSurface", "The draw components contact type is surface to surface."
           "AutomaticSurfaceToSurface", "The draw components contact type is automatic surface to surface."
        """
        FormingOneWaySurfaceToSurface = 0  # LsdynaGeometryPreparationBuilderContactTypeMemberType
        FormingOneWaySurfaceToSurfaceSmooth = 1  # LsdynaGeometryPreparationBuilderContactTypeMemberType
        FormingSurfaceToSurface = 2  # LsdynaGeometryPreparationBuilderContactTypeMemberType
        FormingSurfaceToSurfaceSmooth = 3  # LsdynaGeometryPreparationBuilderContactTypeMemberType
        SurfaceToSurface = 4  # LsdynaGeometryPreparationBuilderContactTypeMemberType
        AutomaticSurfaceToSurface = 5  # LsdynaGeometryPreparationBuilderContactTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProcessType():
        """
        the enum of process type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Gravity", "Blank has elastic deformation in flexible status."
           "Closing", "The process of die travels from initial position to binder."
           "Drawing", "The process of die travels from binder to punch."
        """
        Gravity = 0  # LsdynaGeometryPreparationBuilderProcessTypeMemberType
        Closing = 1  # LsdynaGeometryPreparationBuilderProcessTypeMemberType
        Drawing = 2  # LsdynaGeometryPreparationBuilderProcessTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProcessActionBinder():
        """
        the enum of process action binder type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Stationary", "The process action for binder is stationary."
           "ClosureWith", "The process action for binder is closure with other draw components."
           "FollowWith", "The process action for binder is follow with other draw components."
           "Travel", "The process action for binder is travel to other draw components."
           "UntilHome", "The process action for binder is until home."
           "Force", "The process action for binder is by force."
        """
        Stationary = 0  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
        ClosureWith = 1  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
        FollowWith = 2  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
        Travel = 3  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
        UntilHome = 4  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
        Force = 5  # LsdynaGeometryPreparationBuilderProcessActionBinderMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProcessActionDie():
        """
        the enum of process action die type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Stationary", "The process action for die is stationary."
           "ClosureWith", "The process action for die is closure with other draw components."
           "FollowWith", "The process action for die is follow with other draw components."
           "Travel", "The process action for die is travel to other draw components."
           "UntilHome", "The process action for die is until home."
           "Force", "The process action for die is by force."
        """
        Stationary = 0  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
        ClosureWith = 1  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
        FollowWith = 2  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
        Travel = 3  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
        UntilHome = 4  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
        Force = 5  # LsdynaGeometryPreparationBuilderProcessActionDieMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProcessActionPunch():
        """
        the enum of process action punch type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Stationary", "The process action for punch is stationary."
           "ClosureWith", "The process action for punch is closure with other draw components."
           "FollowWith", "The process action for punch is follow with other draw components."
           "Travel", "The process action for punch is travel to other draw components."
           "UntilHome", "The process action for punch is until home."
           "Force", "The process action for punch is by force."
        """
        Stationary = 0  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
        ClosureWith = 1  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
        FollowWith = 2  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
        Travel = 3  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
        UntilHome = 4  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
        Force = 5  # LsdynaGeometryPreparationBuilderProcessActionPunchMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TargetPunch():
        """
        the enum of target punch type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Punch", "For the process, the target of punch is punch."
           "Binder", "For the process, the target of punch is binder."
           "Die", "For the process, the target of punch is die."
        """
        Punch = 0  # LsdynaGeometryPreparationBuilderTargetPunchMemberType
        Binder = 1  # LsdynaGeometryPreparationBuilderTargetPunchMemberType
        Die = 2  # LsdynaGeometryPreparationBuilderTargetPunchMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TargetBinder():
        """
        the enum of target binder type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Punch", "For the process, the target of binder is punch."
           "Binder", "For the process, the target of binder is binder."
           "Die", "For the process, the target of binder is die."
        """
        Punch = 0  # LsdynaGeometryPreparationBuilderTargetBinderMemberType
        Binder = 1  # LsdynaGeometryPreparationBuilderTargetBinderMemberType
        Die = 2  # LsdynaGeometryPreparationBuilderTargetBinderMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TargetDie():
        """
        the enum of target die type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Punch", "For the process, the target of die is punch."
           "Binder", "For the process, the target of die is binder."
           "Die", "For the process, the target of die is die."
        """
        Punch = 0  # LsdynaGeometryPreparationBuilderTargetDieMemberType
        Binder = 1  # LsdynaGeometryPreparationBuilderTargetDieMemberType
        Die = 2  # LsdynaGeometryPreparationBuilderTargetDieMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ExecuteRestorePosition(self) -> None:
        """
        Restore the position of die, punch and binder.  
        
        Signature ``ExecuteRestorePosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ExecuteMovePosition(self) -> None:
        """
        Move the position of die, punch and binder, according to 
        :py:meth:`Tooling.LsdynaGeometryPreparationBuilder.DiePosition`,
        :py:meth:`Tooling.LsdynaGeometryPreparationBuilder.PunchPosition` ,
        :py:meth:`Tooling.LsdynaGeometryPreparationBuilder.BinderPosition` settings.  
        
        Signature ``ExecuteMovePosition()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPercentageForceArray(self) -> 'list[float]':
        """
        Gets the percentage of force.  
        
        Signature ``GetPercentageForceArray()`` 
        
        :returns: 
        :rtype: list of float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPercentageForceArray(self, doublePercentageForceArray: 'list[float]') -> None:
        """
        Sets the percentage of force.  
        
        Signature ``SetPercentageForceArray(doublePercentageForceArray)`` 
        
        :param doublePercentageForceArray: 
        :type doublePercentageForceArray: list of float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetDrawBeadCurves(self, drawBeadCurves: 'list[NXOpen.Curve]') -> None:
        """
        Sets the draw bead curves.  
        
        Signature ``SetDrawBeadCurves(drawBeadCurves)`` 
        
        :param drawBeadCurves: 
        :type drawBeadCurves: list of :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AutoPositionOption: bool = ...
    """
    Returns or sets  the automatic position for punch, die and binder.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutoPositionOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoPositionOption`` 
    
    :param toggleAutoPosition: 
    :type toggleAutoPosition: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BinderPosition: float = ...
    """
    Returns or sets  the distance value to move binder.  
    
    <hr>
    
    Getter Method
    
    Signature ``BinderPosition`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BinderPosition`` 
    
    :param doubleBinderPosition: 
    :type doubleBinderPosition: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BinderSheet: NXOpen.SelectBody = ...
    """
    Returns  the binder sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``BinderSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    BlankCurve: NXOpen.Section = ...
    """
    Returns  the blank curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    BlankOptionType: LsdynaGeometryPreparationBuilderBlankOption = ...
    """
    Returns or sets  the blank option.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankOptionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderBlankOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankOptionType`` 
    
    :param enumBlankOption: 
    :type enumBlankOption: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderBlankOption` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BlankPositionType: LsdynaGeometryPreparationBuilderBlankPosition = ...
    """
    Returns or sets  the blank position type.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankPositionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderBlankPosition` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankPositionType`` 
    
    :param enumBlankPosition: 
    :type enumBlankPosition: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderBlankPosition` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BlankPositionValue: float = ...
    """
    Returns or sets  the distance value to move blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankPositionValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankPositionValue`` 
    
    :param doubleBlankPosition: 
    :type doubleBlankPosition: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BlankSheet: NXOpen.SelectBody = ...
    """
    Returns  the blank sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    BlankThickness: float = ...
    """
    Returns or sets  the blank thickness.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BlankThickness`` 
    
    :param doubleBlankThickness: 
    :type doubleBlankThickness: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ContactOffset: float = ...
    """
    Returns or sets  the contact offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``ContactOffset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactOffset`` 
    
    :param doubleContactOffset: 
    :type doubleContactOffset: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ContactTypeOption: LsdynaGeometryPreparationBuilderContactType = ...
    """
    Returns or sets  the contact type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ContactTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderContactType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactTypeOption`` 
    
    :param enumContactType: 
    :type enumContactType: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderContactType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DiePosition: float = ...
    """
    Returns or sets  the distance value to move die.  
    
    <hr>
    
    Getter Method
    
    Signature ``DiePosition`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DiePosition`` 
    
    :param doubleDiePosition: 
    :type doubleDiePosition: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DieSheet: NXOpen.SelectBody = ...
    """
    Returns  the die sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``DieSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DrawBeadCurves: NXOpen.SelectCurveList = ...
    """
    Returns  the draw bead profiles.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawBeadCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectCurveList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    DrawBeadTypeOption: LsdynaGeometryPreparationBuilderDrawBeadType = ...
    """
    Returns or sets  the draw bead type.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawBeadTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderDrawBeadType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawBeadTypeOption`` 
    
    :param enumDrawBeadType: 
    :type enumDrawBeadType: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderDrawBeadType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DrawTypeOption: LsdynaGeometryPreparationBuilderDrawType = ...
    """
    Returns or sets  the draw type.  
    
    <hr>
    
    Getter Method
    
    Signature ``DrawTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderDrawType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DrawTypeOption`` 
    
    :param enumDrawType: 
    :type enumDrawType: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderDrawType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Friction: float = ...
    """
    Returns or sets  the friction.  
    
    <hr>
    
    Getter Method
    
    Signature ``Friction`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Friction`` 
    
    :param doubleFriction: 
    :type doubleFriction: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialName: str = ...
    """
    Returns or sets  the material name.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialName`` 
    
    :param materialName: 
    :type materialName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaterialTypeOption: LsdynaGeometryPreparationBuilderMaterialType = ...
    """
    Returns or sets  the material type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaterialTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderMaterialType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaterialTypeOption`` 
    
    :param enumMaterialType: 
    :type enumMaterialType: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderMaterialType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NormalForce: float = ...
    """
    Returns or sets  the normal force.  
    
    <hr>
    
    Getter Method
    
    Signature ``NormalForce`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalForce`` 
    
    :param normalForce: 
    :type normalForce: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PercentageForce: float = ...
    """
    Returns or sets  the percentage of force.  
    
    <hr>
    
    Getter Method
    
    Signature ``PercentageForce`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PercentageForce`` 
    
    :param doublePercentageForce: 
    :type doublePercentageForce: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessBinder: float = ...
    """
    Returns or sets  the value of binder process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessBinder`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessBinder`` 
    
    :param doubleProcessBinder: 
    :type doubleProcessBinder: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessBinderOption: bool = ...
    """
    Returns or sets  the option of binder process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessBinderOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessBinderOption`` 
    
    :param toggleProcessBinder: 
    :type toggleProcessBinder: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessBinderType: LsdynaGeometryPreparationBuilderProcessActionBinder = ...
    """
    Returns or sets  the type of binder process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessBinderType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderProcessActionBinder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessBinderType`` 
    
    :param enumProcessBinder: 
    :type enumProcessBinder: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderProcessActionBinder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessDie: float = ...
    """
    Returns or sets  the value of die process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessDie`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessDie`` 
    
    :param doubleProcessDie: 
    :type doubleProcessDie: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessDieOption: bool = ...
    """
    Returns or sets  the option of die process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessDieOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessDieOption`` 
    
    :param toggleProcessDie: 
    :type toggleProcessDie: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessDieType: LsdynaGeometryPreparationBuilderProcessActionDie = ...
    """
    Returns or sets  the type of die process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessDieType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderProcessActionDie` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessDieType`` 
    
    :param enumProcessDie: 
    :type enumProcessDie: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderProcessActionDie` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessPunch: float = ...
    """
    Returns or sets  the value of punch process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessPunch`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessPunch`` 
    
    :param doubleProcessPunch: 
    :type doubleProcessPunch: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessPunchOption: bool = ...
    """
    Returns or sets  the option of punch process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessPunchOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessPunchOption`` 
    
    :param toggleProcessPunch: 
    :type toggleProcessPunch: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessPunchType: LsdynaGeometryPreparationBuilderProcessActionPunch = ...
    """
    Returns or sets  the type of punch process.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessPunchType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderProcessActionPunch` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessPunchType`` 
    
    :param enumProcessPunch: 
    :type enumProcessPunch: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderProcessActionPunch` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ProcessTypeOption: LsdynaGeometryPreparationBuilderProcessType = ...
    """
    Returns or sets  the process type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessTypeOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderProcessType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessTypeOption`` 
    
    :param enumProcessType: 
    :type enumProcessType: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderProcessType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchPosition: float = ...
    """
    Returns or sets  the distance value to move punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPosition`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPosition`` 
    
    :param doublePunchPosition: 
    :type doublePunchPosition: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchSheet: NXOpen.SelectBody = ...
    """
    Returns  the punch sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RestrainForce: NXOpen.Expression = ...
    """
    Returns  the expression of restraining force.  
    
    <hr>
    
    Getter Method
    
    Signature ``RestrainForce`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    TargetBinderType: LsdynaGeometryPreparationBuilderTargetBinder = ...
    """
    Returns or sets  the type of binder target.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetBinderType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderTargetBinder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetBinderType`` 
    
    :param enumTargetBinder: 
    :type enumTargetBinder: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderTargetBinder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TargetDieType: LsdynaGeometryPreparationBuilderTargetDie = ...
    """
    Returns or sets  the type of die target.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetDieType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderTargetDie` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetDieType`` 
    
    :param enumTargetDie: 
    :type enumTargetDie: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderTargetDie` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TargetPunchType: LsdynaGeometryPreparationBuilderTargetPunch = ...
    """
    Returns or sets  the type of punch target.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetPunchType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderTargetPunch` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetPunchType`` 
    
    :param enumTargetPunch: 
    :type enumTargetPunch: :py:class:`NXOpen.Tooling.LsdynaGeometryPreparationBuilderTargetPunch` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TensileStrength: float = ...
    """
    Returns or sets  the restraining force.  
    
    <hr>
    
    Getter Method
    
    Signature ``TensileStrength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TensileStrength`` 
    
    :param doubleTensileStrength: 
    :type doubleTensileStrength: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: LsdynaGeometryPreparationBuilder = ...  # unknown typename


class FastenerRemoveNodeCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of FastenerRemoveNodeBuilder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFastenerRemoveNodeBuilder(self) -> FastenerRemoveNodeBuilder:
        """
        Creates a FastenerRemoveNode builder  
        
        Signature ``CreateFastenerRemoveNodeBuilder()`` 
        
        :returns:  Fastener Remove Node Builder  
        :rtype: :py:class:`NXOpen.Tooling.FastenerRemoveNodeBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class FeatureReferenceSetBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.FeatureReferenceSetBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateFeatureReferenceSetBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def SetReferenceSet(self, referenceSet: str) -> None:
        """
        Set current selected reference set 
        
        Signature ``SetReferenceSet(referenceSet)`` 
        
        :param referenceSet: 
        :type referenceSet: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    SelectFeatures: NXOpen.Features.SelectFeatureList = ...
    """
    Returns  the select feature 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFeatures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeatureList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: FeatureReferenceSetBuilder = ...  # unknown typename


class ReusableObject(NXOpen.TransientObject):
    """
    Represents a :py:class:`NXOpen.Tooling.ReusableObject`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ToolingManager.CreateReusableObject`
    
    .. versionadded:: NX7.5.2
    """
    
    def Dispose(self) -> None:
        """
        Dispose the part infomation to be cloned 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    
    
    def GetObjects(self) -> 'list[NXOpen.NXObject]':
        """
        Gets the objects  
        
        Signature ``GetObjects()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    
    
    def SetObjects(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the objects 
        
        Signature ``SetObjects(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.2
        
        License requirements: None.
        """
        ...
    
    ContainerFile: str = ...
    """
    Returns or sets  the file which contains the reusable objects, could be part file or XML file 
    
    <hr>
    
    Getter Method
    
    Signature ``ContainerFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContainerFile`` 
    
    :param containerFile: 
    :type containerFile: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    """
    DescriptiveName: str = ...
    """
    Returns or sets  the descriptive name 
    
    <hr>
    
    Getter Method
    
    Signature ``DescriptiveName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DescriptiveName`` 
    
    :param descriptiveName: 
    :type descriptiveName: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    """
    IsSavedInOriginalPart: bool = ...
    """
    Returns or sets  a flag indicating whether this object is saved in original part 
    
    <hr>
    
    Getter Method
    
    Signature ``IsSavedInOriginalPart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsSavedInOriginalPart`` 
    
    :param saveInOriginalPart: 
    :type saveInOriginalPart: bool 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    """
    ObjectGroupName: str = ...
    """
    Returns or sets  the name of the group of objects which are saved through UDO 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectGroupName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectGroupName`` 
    
    :param groupName: 
    :type groupName: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    """
    PartFile: str = ...
    """
    Returns or sets  the part file which owns this reusable object 
    
    <hr>
    
    Getter Method
    
    Signature ``PartFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartFile`` 
    
    :param partFile: 
    :type partFile: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    """
    PreviewImageFile: str = ...
    """
    Returns or sets  the preview image file 
    
    <hr>
    
    Getter Method
    
    Signature ``PreviewImageFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreviewImageFile`` 
    
    :param imageFile: 
    :type imageFile: str 
    
    .. versionadded:: NX7.5.2
    
    License requirements: None.
    """


class StandardPartPositionCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a StandardPartPositionCollection class   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateStandardPartPositionBuilder(self) -> StandardPartPositionBuilder:
        """
        Creates a StandardPartPosition builder  
        
        Signature ``CreateStandardPartPositionBuilder()`` 
        
        :returns: :py:class:`Tooling.StandardPartPositionBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.StandardPartPositionBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    


class CoolingFittingData(NXOpen.TransientObject):
    """
    Represents the cooling fitting data in Add Channel Fitting Builder.  
    
    To create an instance of this object use :py:meth:`Tooling.ChannelFittingBuilder.CreateCoolingFittingData`
    
    .. versionadded:: NX7.5.0
    """
    
    def Dispose(self) -> None:
        """
        Dispose the part infomation to be cloned.  
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AddFittingPoints(self, fittingPoint: NXOpen.Point) -> None:
        """
        Add cooling fitting points to the fitting data.  
        
        Signature ``AddFittingPoints(fittingPoint)`` 
        
        :param fittingPoint: the fitting point to be added.  
        :type fittingPoint: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearFittingPoints(self) -> None:
        """
        Clear cooling fitting points from the fitting data.  
        
        Signature ``ClearFittingPoints()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class ToolingCloneactionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ToolingCloneaction():
    """
    Clone action type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "InNative", "Clone part in native environment"
       "ImportToTeamcenter", "Import part from native to Teamcenter"
       "ExportToNative", "Export part from Teamcenter to native"
       "InTeamcenter", "Clone part in Teamcenter environment"
    """
    InNative = 0  # ToolingCloneactionMemberType
    ImportToTeamcenter = 1  # ToolingCloneactionMemberType
    ExportToNative = 2  # ToolingCloneactionMemberType
    InTeamcenter = 3  # ToolingCloneactionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardPartBuilderEditTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StandardPartBuilderEditType():
    """
    Represents the type to edit a standard part.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AddInstance", " - "
       "NewComponent", " - "
       "Modify", " - "
    """
    AddInstance = 0  # StandardPartBuilderEditTypeMemberType
    NewComponent = 1  # StandardPartBuilderEditTypeMemberType
    Modify = 2  # StandardPartBuilderEditTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardPartBuilderRefsetNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StandardPartBuilderRefsetName():
    """
    Represents the reference set of the standard part when it is added to the assembly. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "True", " - "
       "False", " - "
       "EntirePart", " - "
    """
    TrueValue = 0  # StandardPartBuilderRefsetNameMemberType
    FalseValue = 1  # StandardPartBuilderRefsetNameMemberType
    EntirePart = 2  # StandardPartBuilderRefsetNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardPartBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create Mold Wizard Standard Part.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.StandardPartCollection.CreateStandardPartBuilder`
    
    Default values.
    
    =====================  ============
    Property               Value
    =====================  ============
    AssociativePosition    0 
    ---------------------  ------------
    ConceptDesign          0 
    ---------------------  ------------
    ReferenceSet           True 
    ---------------------  ------------
    RenameComponents       0 
    ---------------------  ------------
    ShowInfoWindow         0 
    ---------------------  ------------
    StandardPartEditType   AddInstance 
    =====================  ============
    
    .. versionadded:: NX8.0.0
    """
    
    class EditType():
        """
        Represents the type to edit a standard part.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AddInstance", " - "
           "NewComponent", " - "
           "Modify", " - "
        """
        AddInstance = 0  # StandardPartBuilderEditTypeMemberType
        NewComponent = 1  # StandardPartBuilderEditTypeMemberType
        Modify = 2  # StandardPartBuilderEditTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RefsetName():
        """
        Represents the reference set of the standard part when it is added to the assembly. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "True", " - "
           "False", " - "
           "EntirePart", " - "
        """
        TrueValue = 0  # StandardPartBuilderRefsetNameMemberType
        FalseValue = 1  # StandardPartBuilderRefsetNameMemberType
        EntirePart = 2  # StandardPartBuilderRefsetNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Help(self) -> None:
        """
        Ask help of the selected standard part component.  
        
        Signature ``Help()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Reposition(self) -> None:
        """
        Repositions the selected standard part component.  
        
        Signature ``Reposition()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Flip(self) -> None:
        """
        Flips the selected standard part component.  
        
        Signature ``Flip()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveComponent(self) -> None:
        """
        Removes the selected standard part component.  
        
        Signature ``RemoveComponent()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditRegister(self) -> None:
        """
        Edits the registering spread sheet file of the standard item selected in Reuse Member View.  
        
        Signature ``EditRegister()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditDataBase(self) -> None:
        """
        Edits the data file of the standard item selected in Reuse Member View 
        
        Signature ``EditDataBase()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    AssociativePosition: bool = ...
    """
    Returns or sets  the flag to indicate whether to use the associative position method.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativePosition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociativePosition`` 
    
    :param associativePosition: 
    :type associativePosition: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ConceptDesign: bool = ...
    """
    Returns or sets  the flag to indicate whether to add concept symbols instead of real standard parts.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConceptDesign`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConceptDesign`` 
    
    :param conceptDesign: 
    :type conceptDesign: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design")
    """
    PointPattern: NXOpen.SelectNXObject = ...
    """
    Returns  the point pattern used to control how to standard parts.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointPattern`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PostioningPlane: NXOpen.SelectNXObject = ...
    """
    Returns  the postioning plane used to position a standard part.  
    
    <hr>
    
    Getter Method
    
    Signature ``PostioningPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReferenceSet: StandardPartBuilderRefsetName = ...
    """
    Returns or sets  the reference set currently used to add a new component to an assembly.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceSet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StandardPartBuilderRefsetName` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceSet`` 
    
    :param referenceSet: 
    :type referenceSet: :py:class:`NXOpen.Tooling.StandardPartBuilderRefsetName` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design")
    """
    RenameComponents: bool = ...
    """
    Returns or sets  the flag to indicate whether to bring up the Part Name Management dialog.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponents`` 
    
    :param renameComponents: 
    :type renameComponents: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design")
    """
    ShowInfoWindow: bool = ...
    """
    Returns or sets  the flag to indicate whether to show the Information Window.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowInfoWindow`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowInfoWindow`` 
    
    :param showInfoWindow: 
    :type showInfoWindow: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design")
    """
    StandardPartComponent: NXOpen.SelectNXObject = ...
    """
    Returns  the standard part component which is selected to be edited.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandardPartComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StandardPartEditType: StandardPartBuilderEditType = ...
    """
    Returns or sets  the standard part edit type of processing the selected component.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandardPartEditType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.StandardPartBuilderEditType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardPartEditType`` 
    
    :param standardPartEditType: 
    :type standardPartEditType: :py:class:`NXOpen.Tooling.StandardPartBuilderEditType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR ug_die_design ("Die Design")
    """
    Null: StandardPartBuilder = ...  # unknown typename


class AutoDimensionBuilderMainTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AutoDimensionBuilderMainType():
    """
    create or edit ordinate dimension
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CreateOrdinateDimension", " - "
       "EditOrdinateDimension", " - "
    """
    CreateOrdinateDimension = 0  # AutoDimensionBuilderMainTypeMemberType
    EditOrdinateDimension = 1  # AutoDimensionBuilderMainTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AutoDimensionBuilderToleranceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AutoDimensionBuilderToleranceType():
    """
    tolerance type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoTolerance", " - "
       "EqualBilateralTolerance", " - "
       "BilateralTolerance", " - "
       "UnilateralPlus", " - "
       "UnilateralMinus", " - "
    """
    NoTolerance = 0  # AutoDimensionBuilderToleranceTypeMemberType
    EqualBilateralTolerance = 1  # AutoDimensionBuilderToleranceTypeMemberType
    BilateralTolerance = 2  # AutoDimensionBuilderToleranceTypeMemberType
    UnilateralPlus = 3  # AutoDimensionBuilderToleranceTypeMemberType
    UnilateralMinus = 4  # AutoDimensionBuilderToleranceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AutoDimensionBuilderValuePrecisionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AutoDimensionBuilderValuePrecisionType():
    """
    value precision type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NominalMinusX", " - "
       "NominalMinusXDotx", " - "
       "NominalMinusXDotxx", " - "
       "NominalMinusXDotxxx", " - "
       "NominalMinusXDotxxxx", " - "
       "NominalMinusXDotxxxxx", " - "
       "NominalMinusXDotxxxxxx", " - "
    """
    NominalMinusX = 0  # AutoDimensionBuilderValuePrecisionTypeMemberType
    NominalMinusXDotx = 1  # AutoDimensionBuilderValuePrecisionTypeMemberType
    NominalMinusXDotxx = 2  # AutoDimensionBuilderValuePrecisionTypeMemberType
    NominalMinusXDotxxx = 3  # AutoDimensionBuilderValuePrecisionTypeMemberType
    NominalMinusXDotxxxx = 4  # AutoDimensionBuilderValuePrecisionTypeMemberType
    NominalMinusXDotxxxxx = 5  # AutoDimensionBuilderValuePrecisionTypeMemberType
    NominalMinusXDotxxxxxx = 6  # AutoDimensionBuilderValuePrecisionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AutoDimensionBuilderTextOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AutoDimensionBuilderTextOrientationType():
    """
    text orientation type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Horizontal", " - "
       "Aligned", " - "
       "TextOverDimensionLine", " - "
       "TextAtAngle", " - "
       "Perpendicular", " - "
    """
    Horizontal = 0  # AutoDimensionBuilderTextOrientationTypeMemberType
    Aligned = 1  # AutoDimensionBuilderTextOrientationTypeMemberType
    TextOverDimensionLine = 2  # AutoDimensionBuilderTextOrientationTypeMemberType
    TextAtAngle = 3  # AutoDimensionBuilderTextOrientationTypeMemberType
    Perpendicular = 4  # AutoDimensionBuilderTextOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AutoDimensionBuilderTextFontTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AutoDimensionBuilderTextFontType():
    """
    text font type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "First", " - "
       "Second", " - "
       "Third", " - "
       "Fourth", " - "
       "Fifth", " - "
    """
    First = 0  # AutoDimensionBuilderTextFontTypeMemberType
    Second = 1  # AutoDimensionBuilderTextFontTypeMemberType
    Third = 2  # AutoDimensionBuilderTextFontTypeMemberType
    Fourth = 3  # AutoDimensionBuilderTextFontTypeMemberType
    Fifth = 4  # AutoDimensionBuilderTextFontTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AutoDimensionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.AutoDimensionBuilder` which is 
    used to create or edit the Auto Dimension.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ToolingDrawingCollection.CreateAutoDimensionBuilder`
    
    Default values.
    
    ==========================  ========================
    Property                    Value
    ==========================  ========================
    DimensionCharacterSize      3.5 
    --------------------------  ------------------------
    InnerDimensionOffsetValue   20 
    --------------------------  ------------------------
    MaxDistanceToOuterMargin    60 
    --------------------------  ------------------------
    OffsetValueForMargin        20 
    --------------------------  ------------------------
    SelectHolesAutomatically    0 
    --------------------------  ------------------------
    TextAngle                   0.0 
    --------------------------  ------------------------
    TextFont                    First 
    --------------------------  ------------------------
    TextOrientation             Horizontal 
    --------------------------  ------------------------
    Tolerance                   NoTolerance 
    --------------------------  ------------------------
    ToleranceCharacterSize      3.5 
    --------------------------  ------------------------
    ToleranceLowerValue         -0.001 
    --------------------------  ------------------------
    ToleranceUpperValue         0.001 
    --------------------------  ------------------------
    ToleranceValue              0.001 
    --------------------------  ------------------------
    Type                        CreateOrdinateDimension 
    --------------------------  ------------------------
    ValuePrecision              NominalMinusX 
    ==========================  ========================
    
    .. versionadded:: NX8.5.0
    """
    
    class MainType():
        """
        create or edit ordinate dimension
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CreateOrdinateDimension", " - "
           "EditOrdinateDimension", " - "
        """
        CreateOrdinateDimension = 0  # AutoDimensionBuilderMainTypeMemberType
        EditOrdinateDimension = 1  # AutoDimensionBuilderMainTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ToleranceType():
        """
        tolerance type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoTolerance", " - "
           "EqualBilateralTolerance", " - "
           "BilateralTolerance", " - "
           "UnilateralPlus", " - "
           "UnilateralMinus", " - "
        """
        NoTolerance = 0  # AutoDimensionBuilderToleranceTypeMemberType
        EqualBilateralTolerance = 1  # AutoDimensionBuilderToleranceTypeMemberType
        BilateralTolerance = 2  # AutoDimensionBuilderToleranceTypeMemberType
        UnilateralPlus = 3  # AutoDimensionBuilderToleranceTypeMemberType
        UnilateralMinus = 4  # AutoDimensionBuilderToleranceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ValuePrecisionType():
        """
        value precision type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NominalMinusX", " - "
           "NominalMinusXDotx", " - "
           "NominalMinusXDotxx", " - "
           "NominalMinusXDotxxx", " - "
           "NominalMinusXDotxxxx", " - "
           "NominalMinusXDotxxxxx", " - "
           "NominalMinusXDotxxxxxx", " - "
        """
        NominalMinusX = 0  # AutoDimensionBuilderValuePrecisionTypeMemberType
        NominalMinusXDotx = 1  # AutoDimensionBuilderValuePrecisionTypeMemberType
        NominalMinusXDotxx = 2  # AutoDimensionBuilderValuePrecisionTypeMemberType
        NominalMinusXDotxxx = 3  # AutoDimensionBuilderValuePrecisionTypeMemberType
        NominalMinusXDotxxxx = 4  # AutoDimensionBuilderValuePrecisionTypeMemberType
        NominalMinusXDotxxxxx = 5  # AutoDimensionBuilderValuePrecisionTypeMemberType
        NominalMinusXDotxxxxxx = 6  # AutoDimensionBuilderValuePrecisionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TextOrientationType():
        """
        text orientation type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Horizontal", " - "
           "Aligned", " - "
           "TextOverDimensionLine", " - "
           "TextAtAngle", " - "
           "Perpendicular", " - "
        """
        Horizontal = 0  # AutoDimensionBuilderTextOrientationTypeMemberType
        Aligned = 1  # AutoDimensionBuilderTextOrientationTypeMemberType
        TextOverDimensionLine = 2  # AutoDimensionBuilderTextOrientationTypeMemberType
        TextAtAngle = 3  # AutoDimensionBuilderTextOrientationTypeMemberType
        Perpendicular = 4  # AutoDimensionBuilderTextOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TextFontType():
        """
        text font type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "First", " - "
           "Second", " - "
           "Third", " - "
           "Fourth", " - "
           "Fifth", " - "
        """
        First = 0  # AutoDimensionBuilderTextFontTypeMemberType
        Second = 1  # AutoDimensionBuilderTextFontTypeMemberType
        Third = 2  # AutoDimensionBuilderTextFontTypeMemberType
        Fourth = 3  # AutoDimensionBuilderTextFontTypeMemberType
        Fifth = 4  # AutoDimensionBuilderTextFontTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateOrdinateOrigin(self, viewTag: NXOpen.NXObject, pointData: NXOpen.Point3d) -> NXOpen.NXObject:
        """
        The method to create ordinate origin  
        
        Signature ``CreateOrdinateOrigin(viewTag, pointData)`` 
        
        :param viewTag: 
        :type viewTag: :py:class:`NXOpen.NXObject` 
        :param pointData: 
        :type pointData: :py:class:`NXOpen.Point3d` 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateOrdinateOriginMargins(self, ordinateOrigin: NXOpen.NXObject, viewTag: NXOpen.NXObject) -> None:
        """
        The method to create ordinate origin margins 
        
        Signature ``CreateOrdinateOriginMargins(ordinateOrigin, viewTag)`` 
        
        :param ordinateOrigin: 
        :type ordinateOrigin: :py:class:`NXOpen.NXObject` 
        :param viewTag: 
        :type viewTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CycleObjectsInView(self, viewTag: NXOpen.NXObject, vseqNumber: int, isDrawing: bool, inObject: NXOpen.NXObject) -> NXOpen.NXObject:
        """
        The method to cycle objects in view  
        
        Signature ``CycleObjectsInView(viewTag, vseqNumber, isDrawing, inObject)`` 
        
        :param viewTag:  The view to cycle  
        :type viewTag: :py:class:`NXOpen.NXObject` 
        :param vseqNumber:  The View Sequence Number of the View must NOT be DSS_ALL_VIEWS or DSS_NO_VIEWS  
        :type vseqNumber: int 
        :param isDrawing:  Is this view a drawing  
        :type isDrawing: bool 
        :param inObject:  Input object  
        :type inObject: :py:class:`NXOpen.NXObject` 
        :returns:  Output object  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    CreateXDimensions: bool = ...
    """
    Returns or sets  the option whether to create X dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateXDimensions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateXDimensions`` 
    
    :param createXDimensions: 
    :type createXDimensions: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    CreateYDimensions: bool = ...
    """
    Returns or sets  the option whether to create Y dimensions 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateYDimensions`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateYDimensions`` 
    
    :param createYDimensions: 
    :type createYDimensions: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    CreatedOrdinateOrigin: NXOpen.NXObject = ...
    """
    Returns or sets  the created ordinate origin tag 
    
    <hr>
    
    Getter Method
    
    Signature ``CreatedOrdinateOrigin`` 
    
    :returns:  Returns the created ordinate origin  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreatedOrdinateOrigin`` 
    
    :param ordinateOriginTag:  Sets the created ordinate origin  
    :type ordinateOriginTag: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DimensionCharacterSize: float = ...
    """
    Returns or sets  the tolerance character size 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionCharacterSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionCharacterSize`` 
    
    :param dimensionCharacterSize: 
    :type dimensionCharacterSize: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DimensionColor: NXOpen.NXColor = ...
    """
    Returns or sets  the dimension color 
    
    <hr>
    
    Getter Method
    
    Signature ``DimensionColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimensionColor`` 
    
    :param dimensionColor: 
    :type dimensionColor: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Dimensions: NXOpen.Annotations.SelectOrdinateDimensionList = ...
    """
    Returns  the selected dimensions to edit 
    
    <hr>
    
    Getter Method
    
    Signature ``Dimensions`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.SelectOrdinateDimensionList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FirstMargin: NXOpen.NXObject = ...
    """
    Returns or sets  the first margin tag 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstMargin`` 
    
    :returns:  Returns the first margin tag  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstMargin`` 
    
    :param firstMarginTag:  Sets the first margin tag  
    :type firstMarginTag: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    FourthMargin: NXOpen.NXObject = ...
    """
    Returns or sets  the fourth margin tag 
    
    <hr>
    
    Getter Method
    
    Signature ``FourthMargin`` 
    
    :returns:  Returns the fourth margin tag  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FourthMargin`` 
    
    :param fourthMarginTag:  Sets the fourth margin tag  
    :type fourthMarginTag: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    InnerDimensionOffsetValue: float = ...
    """
    Returns or sets  the inner dimension offset value 
    
    <hr>
    
    Getter Method
    
    Signature ``InnerDimensionOffsetValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InnerDimensionOffsetValue`` 
    
    :param innerDimensionOffsetValue: 
    :type innerDimensionOffsetValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaxDistanceToOuterMargin: float = ...
    """
    Returns or sets  the max distance to outer margin 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxDistanceToOuterMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaxDistanceToOuterMargin`` 
    
    :param maxDistanceToOuterMargin: 
    :type maxDistanceToOuterMargin: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ObjectToDimension: NXOpen.SelectNXObjectList = ...
    """
    Returns  the objects to dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectToDimension`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    OffsetValueForMargin: float = ...
    """
    Returns or sets  the offset value of margins 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValueForMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetValueForMargin`` 
    
    :param offsetValueForMargin: 
    :type offsetValueForMargin: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OrdinateDimensionStyle: NXOpen.Annotations.StyleBuilder = ...
    """
    Returns  the ordinate dimension style 
    
    <hr>
    
    Getter Method
    
    Signature ``OrdinateDimensionStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    OrdinateView: NXOpen.NXObject = ...
    """
    Returns or sets  the ordinate view tag 
    
    <hr>
    
    Getter Method
    
    Signature ``OrdinateView`` 
    
    :returns:  Returns the ordinate view tag  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrdinateView`` 
    
    :param ordinateViewTag:  Sets the ordinate view tag  
    :type ordinateViewTag: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OriginPoint: NXOpen.SelectNXObject = ...
    """
    Returns  the ordinate origin point 
    
    <hr>
    
    Getter Method
    
    Signature ``OriginPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SecondMargin: NXOpen.NXObject = ...
    """
    Returns or sets  the second margin tag 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondMargin`` 
    
    :returns:  Returns the second margin tag  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondMargin`` 
    
    :param secondMarginTag:  Sets the second margin tag  
    :type secondMarginTag: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectHolesAutomatically: bool = ...
    """
    Returns or sets  the option whether to select holes automatically 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectHolesAutomatically`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectHolesAutomatically`` 
    
    :param selectHolesAutomatically: 
    :type selectHolesAutomatically: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TextAngle: float = ...
    """
    Returns or sets  the text angle 
    
    <hr>
    
    Getter Method
    
    Signature ``TextAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextAngle`` 
    
    :param textAngle: 
    :type textAngle: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TextFont: AutoDimensionBuilderTextFontType = ...
    """
    Returns or sets  the text orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``TextFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AutoDimensionBuilderTextFontType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextFont`` 
    
    :param textFont: 
    :type textFont: :py:class:`NXOpen.Tooling.AutoDimensionBuilderTextFontType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TextOrientation: AutoDimensionBuilderTextOrientationType = ...
    """
    Returns or sets  the text orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``TextOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AutoDimensionBuilderTextOrientationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextOrientation`` 
    
    :param textOrientation: 
    :type textOrientation: :py:class:`NXOpen.Tooling.AutoDimensionBuilderTextOrientationType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ThirdMargin: NXOpen.NXObject = ...
    """
    Returns or sets  the third margin tag 
    
    <hr>
    
    Getter Method
    
    Signature ``ThirdMargin`` 
    
    :returns:  Returns the third margin tag  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThirdMargin`` 
    
    :param thirdMarginTag:  Sets the third margin tag  
    :type thirdMarginTag: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Tolerance: AutoDimensionBuilderToleranceType = ...
    """
    Returns or sets  the tolerance type 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AutoDimensionBuilderToleranceType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param toleranceType: 
    :type toleranceType: :py:class:`NXOpen.Tooling.AutoDimensionBuilderToleranceType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToleranceCharacterSize: float = ...
    """
    Returns or sets  the tolerance character size 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceCharacterSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceCharacterSize`` 
    
    :param toleranceCharacterSize: 
    :type toleranceCharacterSize: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToleranceColor: NXOpen.NXColor = ...
    """
    Returns or sets  the tolerance color 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceColor`` 
    
    :param toleranceColor: 
    :type toleranceColor: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToleranceLowerValue: float = ...
    """
    Returns or sets  the tolerance lower value 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceLowerValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceLowerValue`` 
    
    :param toleranceLowerValue: 
    :type toleranceLowerValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToleranceUpperValue: float = ...
    """
    Returns or sets  the tolerance upper value 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceUpperValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceUpperValue`` 
    
    :param toleranceUpperValue: 
    :type toleranceUpperValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ToleranceValue: float = ...
    """
    Returns or sets  the tolerance value 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceValue`` 
    
    :param toleranceValue: 
    :type toleranceValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: AutoDimensionBuilderMainType = ...
    """
    Returns or sets  the type create or edit ordinate dimension 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AutoDimensionBuilderMainType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.AutoDimensionBuilderMainType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ValuePrecision: AutoDimensionBuilderValuePrecisionType = ...
    """
    Returns or sets  the value precision 
    
    <hr>
    
    Getter Method
    
    Signature ``ValuePrecision`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.AutoDimensionBuilderValuePrecisionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ValuePrecision`` 
    
    :param valuePrecision: 
    :type valuePrecision: :py:class:`NXOpen.Tooling.AutoDimensionBuilderValuePrecisionType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: AutoDimensionBuilder = ...  # unknown typename


class ToolingClonemethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ToolingClonemethod():
    """
    Clone method 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UseLogFile", "Use clone log file method"
       "Rename", "Use part rename method"
       "SaveAs", "Use part save as method"
    """
    UseLogFile = 0  # ToolingClonemethodMemberType
    Rename = 2  # ToolingClonemethodMemberType
    SaveAs = 3  # ToolingClonemethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaFormAnalysisResultDisplayBuilderStressTypeNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaFormAnalysisResultDisplayBuilderStressTypeName():
    """
    Options to set stress type to display for stress analysis result. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MaximumInplaneStress", "Display maximum in-plane stress."
       "MinimumInplaneStress", "Display minimum in-plane stress."
    """
    MaximumInplaneStress = 0  # LsdynaFormAnalysisResultDisplayBuilderStressTypeNameMemberType
    MinimumInplaneStress = 1  # LsdynaFormAnalysisResultDisplayBuilderStressTypeNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaFormAnalysisResultDisplayBuilderStrainTypeNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaFormAnalysisResultDisplayBuilderStrainTypeName():
    """
    Options to set strain type to display for strain analysis result. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopMajorPrincipalStrain", "Display top major principal strain."
       "TopMinorPrincipalStrain", "Display top minor principal strain."
       "BottomMajorPrincipalStrain", "Display bottom major principal strain."
       "BottomMinorPrincipalStrain", "Display bottom minor principal strain."
    """
    TopMajorPrincipalStrain = 0  # LsdynaFormAnalysisResultDisplayBuilderStrainTypeNameMemberType
    TopMinorPrincipalStrain = 1  # LsdynaFormAnalysisResultDisplayBuilderStrainTypeNameMemberType
    BottomMajorPrincipalStrain = 2  # LsdynaFormAnalysisResultDisplayBuilderStrainTypeNameMemberType
    BottomMinorPrincipalStrain = 3  # LsdynaFormAnalysisResultDisplayBuilderStrainTypeNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaFormAnalysisResultDisplayBuilderFormabilityStrainTypeNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaFormAnalysisResultDisplayBuilderFormabilityStrainTypeName():
    """
    Options to set strain type to display for formability analysis result. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopPrincipalStrain", "Display top principal strain."
       "BottomPrincipalStrain", "Display bottom principal strain."
    """
    TopPrincipalStrain = 0  # LsdynaFormAnalysisResultDisplayBuilderFormabilityStrainTypeNameMemberType
    BottomPrincipalStrain = 1  # LsdynaFormAnalysisResultDisplayBuilderFormabilityStrainTypeNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaFormAnalysisResultDisplayBuilder(NXOpen.Builder):
    """
    Represents a Ly-Dyna Formability Analysis - Result Display builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateLsdynaFormAnalysisResultDisplayBuilder`
    
    Default values.
    
    ======================  ========================
    Property                Value
    ======================  ========================
    AllowableThickening     0.01 
    ----------------------  ------------------------
    AllowableThinning       0.15 
    ----------------------  ------------------------
    EssentialThinning       0.05 
    ----------------------  ------------------------
    FormabilityStrainType   TopPrincipalStrain 
    ----------------------  ------------------------
    LimitOfFlc              0 
    ----------------------  ------------------------
    RValue                  1.82 
    ----------------------  ------------------------
    SafetyMarginFromFlc     20 
    ----------------------  ------------------------
    ShowCracks              1 
    ----------------------  ------------------------
    ShowInadequateStretch   1 
    ----------------------  ------------------------
    ShowRiskOfCracks        1 
    ----------------------  ------------------------
    ShowSevereThinning      1 
    ----------------------  ------------------------
    ShowWrinkles            1 
    ----------------------  ------------------------
    ShowWrinklingTendency   1 
    ----------------------  ------------------------
    State                   0 
    ----------------------  ------------------------
    StrainType              TopMajorPrincipalStrain 
    ----------------------  ------------------------
    StressType              MaximumInplaneStress 
    ======================  ========================
    
    .. versionadded:: NX9.0.0
    """
    
    class StressTypeName():
        """
        Options to set stress type to display for stress analysis result. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MaximumInplaneStress", "Display maximum in-plane stress."
           "MinimumInplaneStress", "Display minimum in-plane stress."
        """
        MaximumInplaneStress = 0  # LsdynaFormAnalysisResultDisplayBuilderStressTypeNameMemberType
        MinimumInplaneStress = 1  # LsdynaFormAnalysisResultDisplayBuilderStressTypeNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StrainTypeName():
        """
        Options to set strain type to display for strain analysis result. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopMajorPrincipalStrain", "Display top major principal strain."
           "TopMinorPrincipalStrain", "Display top minor principal strain."
           "BottomMajorPrincipalStrain", "Display bottom major principal strain."
           "BottomMinorPrincipalStrain", "Display bottom minor principal strain."
        """
        TopMajorPrincipalStrain = 0  # LsdynaFormAnalysisResultDisplayBuilderStrainTypeNameMemberType
        TopMinorPrincipalStrain = 1  # LsdynaFormAnalysisResultDisplayBuilderStrainTypeNameMemberType
        BottomMajorPrincipalStrain = 2  # LsdynaFormAnalysisResultDisplayBuilderStrainTypeNameMemberType
        BottomMinorPrincipalStrain = 3  # LsdynaFormAnalysisResultDisplayBuilderStrainTypeNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FormabilityStrainTypeName():
        """
        Options to set strain type to display for formability analysis result. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopPrincipalStrain", "Display top principal strain."
           "BottomPrincipalStrain", "Display bottom principal strain."
        """
        TopPrincipalStrain = 0  # LsdynaFormAnalysisResultDisplayBuilderFormabilityStrainTypeNameMemberType
        BottomPrincipalStrain = 1  # LsdynaFormAnalysisResultDisplayBuilderFormabilityStrainTypeNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetResultFileNames(self, resultFileNames: 'list[str]') -> None:
        """
        Set all the result files of the analysis result.  
        
        If d3plot and its subsequent files is added,
        the subsequent root files with a two letter appendage(d3plotaa, d3plotab, etc.) and their
        subsequent files(d3plotaa01, d3plotaa02, etc.) should also be added. Otherwise, only the root
        file with a two letter appendage and its subsequent files should be added. Only add subsequent
        files is not allowed. 
        
        Signature ``SetResultFileNames(resultFileNames)`` 
        
        :param resultFileNames: 
        :type resultFileNames: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ImportGeometries(self) -> None:
        """
        Import geometries from analysis result files.  
        
        Signature ``ImportGeometries()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DisplayFormability(self) -> None:
        """
        Display formability analysis result.  
        
        Signature ``DisplayFormability()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DisplayStress(self) -> None:
        """
        Display stress analysis result.  
        
        Signature ``DisplayStress()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DisplayStrain(self) -> None:
        """
        Display strain analysis result.  
        
        Signature ``DisplayStrain()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DisplayThickness(self) -> None:
        """
        Display thickness analysis result.  
        
        It shows the thicknesses of all elements. 
        
        Signature ``DisplayThickness()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DisplayThinning(self) -> None:
        """
        Display thinning analysis result.  
        
        It shows the thinning rates of all elements. 
        
        Signature ``DisplayThinning()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AllowableThickening: float = ...
    """
    Returns or sets  the allowable thickening 
    
    <hr>
    
    Getter Method
    
    Signature ``AllowableThickening`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllowableThickening`` 
    
    :param allowableThickening: 
    :type allowableThickening: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    AllowableThinning: float = ...
    """
    Returns or sets  the allowable thinning 
    
    <hr>
    
    Getter Method
    
    Signature ``AllowableThinning`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AllowableThinning`` 
    
    :param allowableThinning: 
    :type allowableThinning: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EssentialThinning: float = ...
    """
    Returns or sets  the essential thinning 
    
    <hr>
    
    Getter Method
    
    Signature ``EssentialThinning`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EssentialThinning`` 
    
    :param essentialThinning: 
    :type essentialThinning: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    FormabilityStrainType: LsdynaFormAnalysisResultDisplayBuilderFormabilityStrainTypeName = ...
    """
    Returns or sets  the formability strain type 
    
    <hr>
    
    Getter Method
    
    Signature ``FormabilityStrainType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaFormAnalysisResultDisplayBuilderFormabilityStrainTypeName` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FormabilityStrainType`` 
    
    :param formabilityStrainType: 
    :type formabilityStrainType: :py:class:`NXOpen.Tooling.LsdynaFormAnalysisResultDisplayBuilderFormabilityStrainTypeName` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    LimitOfFlc: float = ...
    """
    Returns or sets  the limit of formability limit curve 
    
    <hr>
    
    Getter Method
    
    Signature ``LimitOfFlc`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitOfFlc`` 
    
    :param limitOfFlc: 
    :type limitOfFlc: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RValue: float = ...
    """
    Returns or sets  the R-value 
    
    <hr>
    
    Getter Method
    
    Signature ``RValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RValue`` 
    
    :param rValue: 
    :type rValue: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ResultFileFolder: str = ...
    """
    Returns or sets  the result file folder 
    
    <hr>
    
    Getter Method
    
    Signature ``ResultFileFolder`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ResultFileFolder`` 
    
    :param folderName: 
    :type folderName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SafetyMarginFromFlc: float = ...
    """
    Returns or sets  the safety margin from flc 
    
    <hr>
    
    Getter Method
    
    Signature ``SafetyMarginFromFlc`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SafetyMarginFromFlc`` 
    
    :param safetyMarginFromFlc: 
    :type safetyMarginFromFlc: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ShowCracks: bool = ...
    """
    Returns or sets  the option to indicate whether to show crack region or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowCracks`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowCracks`` 
    
    :param showCracks: 
    :type showCracks: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ShowInadequateStretch: bool = ...
    """
    Returns or sets  the option to indicate whether to show lack of stretching region or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowInadequateStretch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowInadequateStretch`` 
    
    :param showInadequateStretch: 
    :type showInadequateStretch: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ShowRiskOfCracks: bool = ...
    """
    Returns or sets  the option to indicate whether to show risk of cracks region or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowRiskOfCracks`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowRiskOfCracks`` 
    
    :param showRiskOfCracks: 
    :type showRiskOfCracks: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ShowSevereThinning: bool = ...
    """
    Returns or sets  the option to indicate whether to show excessive thinning region or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSevereThinning`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSevereThinning`` 
    
    :param showSevereThinning: 
    :type showSevereThinning: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ShowWrinkles: bool = ...
    """
    Returns or sets  the option to indicate whether to show wrinkled region or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowWrinkles`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowWrinkles`` 
    
    :param showWrinkles: 
    :type showWrinkles: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ShowWrinklingTendency: bool = ...
    """
    Returns or sets  the option to indicate whether to show tendency to wrinkle region or not 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowWrinklingTendency`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowWrinklingTendency`` 
    
    :param showWrinklingTendency: 
    :type showWrinklingTendency: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    State: int = ...
    """
    Returns or sets  the index of the state which is currently displayed in graphic window 
    
    <hr>
    
    Getter Method
    
    Signature ``State`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``State`` 
    
    :param state: 
    :type state: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StrainType: LsdynaFormAnalysisResultDisplayBuilderStrainTypeName = ...
    """
    Returns or sets  the strain type 
    
    <hr>
    
    Getter Method
    
    Signature ``StrainType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaFormAnalysisResultDisplayBuilderStrainTypeName` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StrainType`` 
    
    :param strainType: 
    :type strainType: :py:class:`NXOpen.Tooling.LsdynaFormAnalysisResultDisplayBuilderStrainTypeName` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StressType: LsdynaFormAnalysisResultDisplayBuilderStressTypeName = ...
    """
    Returns or sets  the stress type 
    
    <hr>
    
    Getter Method
    
    Signature ``StressType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaFormAnalysisResultDisplayBuilderStressTypeName` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StressType`` 
    
    :param stressType: 
    :type stressType: :py:class:`NXOpen.Tooling.LsdynaFormAnalysisResultDisplayBuilderStressTypeName` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: LsdynaFormAnalysisResultDisplayBuilder = ...  # unknown typename


class SIZERImportBuilderPositionModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SIZERImportBuilderPositionMode():
    """
    Represents the position mode. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "InferredOnly", "Inferred Only"
       "AbsoluteOrigin", "Absolute Origin"
       "SelectOrigin", "Select Origin"
       "ByConstraints", "By Constraints"
       "Move", "Move"
    """
    InferredOnly = 0  # SIZERImportBuilderPositionModeMemberType
    AbsoluteOrigin = 1  # SIZERImportBuilderPositionModeMemberType
    SelectOrigin = 2  # SIZERImportBuilderPositionModeMemberType
    ByConstraints = 3  # SIZERImportBuilderPositionModeMemberType
    Move = 4  # SIZERImportBuilderPositionModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SIZERImportBuilder(NXOpen.Builder):
    """
    Imports results for motor selection from SIZER drive design based on
    the sizing, configuration, and selection of drive components.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.SIZERCollection.CreateImportBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class PositionMode():
        """
        Represents the position mode. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "InferredOnly", "Inferred Only"
           "AbsoluteOrigin", "Absolute Origin"
           "SelectOrigin", "Select Origin"
           "ByConstraints", "By Constraints"
           "Move", "Move"
        """
        InferredOnly = 0  # SIZERImportBuilderPositionModeMemberType
        AbsoluteOrigin = 1  # SIZERImportBuilderPositionModeMemberType
        SelectOrigin = 2  # SIZERImportBuilderPositionModeMemberType
        ByConstraints = 3  # SIZERImportBuilderPositionModeMemberType
        Move = 4  # SIZERImportBuilderPositionModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GenerateMotorModel(self, motorType: str) -> NXOpen.BasePart:
        """
        Generates motor 3D model.  
        
        Signature ``GenerateMotorModel(motorType)`` 
        
        :param motorType:  Motor Type  
        :type motorType: str 
        :returns:  Motor Part object  
        :rtype: :py:class:`NXOpen.BasePart` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateMcdLogical(self, referenceDesignator: str) -> NXOpen.Mechatronics.LogicObject:
        """
        Creates logical node in system navigator.  
        
        Signature ``CreateMcdLogical(referenceDesignator)`` 
        
        :param referenceDesignator:  Multiple Reference Designator  
        :type referenceDesignator: str 
        :returns:  Logical Object Tag  
        :rtype: :py:class:`NXOpen.Mechatronics.LogicObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditMcdLogical(self, logicalNode: NXOpen.Mechatronics.LogicObject, newPartOccs: 'list[NXOpen.Assemblies.Component]', parameterData: 'list[NXOpen.Mechatronics.LogicObjectBuilderParameterData_Struct]') -> None:
        """
        Edits logical node in system navigator.  
        
        Signature ``EditMcdLogical(logicalNode, newPartOccs, parameterData)`` 
        
        :param logicalNode:  Logical Object Tag  
        :type logicalNode: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param newPartOccs:  New Components Array  
        :type newPartOccs: list of :py:class:`NXOpen.Assemblies.Component` 
        :param parameterData:  Parameter Data Array  
        :type parameterData: list of :py:class:`NXOpen.Mechatronics.LogicObjectBuilderParameterData_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    InputFile: str = ...
    """
    Returns or sets  the input *.  
    
    mdex file, which is imported from SIZER. 
    
    <hr>
    
    Getter Method
    
    Signature ``InputFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InputFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PositionMethod: SIZERImportBuilderPositionMode = ...
    """
    Returns or sets  the position method, which is used in adding to assembly.  
    
    <hr>
    
    Getter Method
    
    Signature ``PositionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SIZERImportBuilderPositionMode` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PositionMethod`` 
    
    :param positionMethod: 
    :type positionMethod: :py:class:`NXOpen.Tooling.SIZERImportBuilderPositionMode` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SIZERImportBuilder = ...  # unknown typename


class StandardPartCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a StandardPartCollection class   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateStandardPartBuilder(self) -> StandardPartBuilder:
        """
        Creates a StandardPart builder  
        
        Signature ``CreateStandardPartBuilder()`` 
        
        :returns: :py:class:`Tooling.StandardPartBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.StandardPartBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class TrimMoldComponentsCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a TrimMoldComponentsCollection class   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTrimMoldComponentsBuilder(self) -> TrimMoldComponentsBuilder:
        """
        Creates a TrimMoldComponents builder  
        
        Signature ``CreateTrimMoldComponentsBuilder()`` 
        
        :returns: :py:class:`TrimMoldComponentsBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.TrimMoldComponentsBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class FamilyMoldCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.FamilyMoldCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFamilyMoldBuilder(self) -> FamilyMoldBuilder:
        """
        Creates a Mold Wizard Family Mold builder  
        
        Signature ``CreateFamilyMoldBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.FamilyMoldBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class HemFixerBuilder(NXOpen.Builder):
    """
    Hem Fixer Builder of PDW and EDW.  
    
    A Body is returned by this builder. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateHemFixerBuilder`
    
    .. versionadded:: NX10.0.0
    """
    BendFace: NXOpen.ScCollector = ...
    """
    Returns  the bend face that connects flange and base body 
    
    <hr>
    
    Getter Method
    
    Signature ``BendFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    BendRadius: NXOpen.Expression = ...
    """
    Returns  the bend radius that defines radius of inner bend face 
    
    <hr>
    
    Getter Method
    
    Signature ``BendRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    FlangeFace: NXOpen.ScCollector = ...
    """
    Returns  the flange faces that will be offset for creating gap between flange and base body 
    
    <hr>
    
    Getter Method
    
    Signature ``FlangeFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: HemFixerBuilder = ...  # unknown typename


class ElectrodeComponentBuilderChuckMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ElectrodeComponentBuilderChuck():
    """
    Represents the electrode chuck type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", " - "
       "Holder", " - "
       "Pallet", " - "
    """
    Unknown = -1  # ElectrodeComponentBuilderChuckMemberType
    Holder = 0  # ElectrodeComponentBuilderChuckMemberType
    Pallet = 1  # ElectrodeComponentBuilderChuckMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ElectrodeComponentBuilder(NXOpen.Builder):
    """
    Electrode component builder to install holder and pallet.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ElectrodeDesignCollection.CreateComponentBuilder`
    
    Default values.
    
    ==========  =====
    Property    Value
    ==========  =====
    ReferPart   0 
    ----------  -----
    Rename      0 
    ==========  =====
    
    .. versionadded:: NX8.0.0
    """
    
    class Chuck():
        """
        Represents the electrode chuck type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", " - "
           "Holder", " - "
           "Pallet", " - "
        """
        Unknown = -1  # ElectrodeComponentBuilderChuckMemberType
        Holder = 0  # ElectrodeComponentBuilderChuckMemberType
        Pallet = 1  # ElectrodeComponentBuilderChuckMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetTemplatePartName(self, templatePartName: str) -> None:
        """
        The template part name of holder or pallet.  
        
        Signature ``SetTemplatePartName(templatePartName)`` 
        
        :param templatePartName: 
        :type templatePartName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def SetTemplateDataName(self, templateDataName: str) -> None:
        """
        The template data name of holder or pallet.  
        
        Signature ``SetTemplateDataName(templateDataName)`` 
        
        :param templateDataName: 
        :type templateDataName: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def InstallComponentPart(self, templateData: SpreadsheetData, libraryName: str, catalogName: str, classificationName: str, titleName: str) -> NXOpen.NXObject:
        """
        Install a holder or a pallet part.  
        
        Signature ``InstallComponentPart(templateData, libraryName, catalogName, classificationName, titleName)`` 
        
        :param templateData:  spread sheet data of the standard part 
        :type templateData: :py:class:`NXOpen.Tooling.SpreadsheetData` 
        :param libraryName:  library name of the standard part  
        :type libraryName: str 
        :param catalogName:  catalog name of the standard part 
        :type catalogName: str 
        :param classificationName:  classification name of the standard part 
        :type classificationName: str 
        :param titleName:  title name of the standard part 
        :type titleName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    ChuckType: ElectrodeComponentBuilderChuck = ...
    """
    Returns or sets  the electrode chuck type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ChuckType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ElectrodeComponentBuilderChuck` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChuckType`` 
    
    :param chuck: 
    :type chuck: :py:class:`NXOpen.Tooling.ElectrodeComponentBuilderChuck` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    ComponentMatrix: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the component matrix.  
    
    <hr>
    
    Getter Method
    
    Signature ``ComponentMatrix`` 
    
    :returns:  component matrix  
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ComponentMatrix`` 
    
    :param matrix:  component matrix  
    :type matrix: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Face: NXOpen.SelectFace = ...
    """
    Returns  the face whose center will be the origin of the machine set csys.  
    
    <hr>
    
    Getter Method
    
    Signature ``Face`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Fixture: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the part which is an electrode fixture to be edited.  
    
    <hr>
    
    Getter Method
    
    Signature ``Fixture`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MateCsys: NXOpen.NXObject = ...
    """
    Returns or sets  the current machine set CSYS.  
    
    <hr>
    
    Getter Method
    
    Signature ``MateCsys`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MateCsys`` 
    
    :param csys: 
    :type csys: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Parent: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the part which is the assembly parent to install an electrode chuck.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ReferPart: bool = ...
    """
    Returns or sets  the option to install a chuck by referring to the template part directly or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferPart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferPart`` 
    
    :param referPart: 
    :type referPart: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    ReferenceCenter: NXOpen.Point3d = ...
    """
    Returns or sets  the component reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceCenter`` 
    
    :returns:  component position  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceCenter`` 
    
    :param point:  component position  
    :type point: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Rename: bool = ...
    """
    Returns or sets  the option to use the part name management dialog box or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    StandardData: str = ...
    """
    Returns or sets  the electrode standard data spraedsheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandardData`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardData`` 
    
    :param standardData: 
    :type standardData: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    StandardPart: str = ...
    """
    Returns or sets  the electrode standard part to be installed.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandardPart`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardPart`` 
    
    :param standardPart: 
    :type standardPart: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_electrode_wizard ("NX Electrode Wizard")
    """
    Null: ElectrodeComponentBuilder = ...  # unknown typename


class TrimRegionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Trim Region   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTrimRegionBuilder(self) -> TrimRegionBuilder:
        """
        Creates a Trim Region builder  
        
        Signature ``CreateTrimRegionBuilder()`` 
        
        :returns:  Trim Region Builder object  
        :rtype: :py:class:`NXOpen.Tooling.TrimRegionBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class CoolingDefineChannelCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a CoolingDefineChannel Collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCoolingDefineChannelBuilder(self) -> CoolingDefineChannelBuilder:
        """
        Creates Tooling.  
        
        CoolingDefineChannelBuilder  
        
        Signature ``CreateCoolingDefineChannelBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CoolingDefineChannelBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class ValidCheckCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ValidCheck   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateValidCheckBuilder(self) -> ValidCheckBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.ValidCheckBuilder`  
        
        Signature ``CreateValidCheckBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ValidCheckBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING")
        """
        ...
    


class ReusablePocketBuilderHoleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReusablePocketBuilderHole():
    """
    Represents hole types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Series", "Pocket with hole series"
       "Subtract", "Subtract pocket"
       "NotSet", "None"
    """
    Series = 0  # ReusablePocketBuilderHoleMemberType
    Subtract = 1  # ReusablePocketBuilderHoleMemberType
    NotSet = 2  # ReusablePocketBuilderHoleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReusablePocketBuilder(NXOpen.Builder):
    """
    Reusable pocket builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ReusablePocketCollection.CreateReusablePocketBuilder`
    
    Default values.
    
    ===========  ======
    Property     Value
    ===========  ======
    AutoTarget   true 
    -----------  ------
    ThreadHole   false 
    ===========  ======
    
    .. versionadded:: NX7.5.0
    """
    
    class Hole():
        """
        Represents hole types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Series", "Pocket with hole series"
           "Subtract", "Subtract pocket"
           "NotSet", "None"
        """
        Series = 0  # ReusablePocketBuilderHoleMemberType
        Subtract = 1  # ReusablePocketBuilderHoleMemberType
        NotSet = 2  # ReusablePocketBuilderHoleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddToolComponent(self, component: NXOpen.NXObject) -> None:
        """
        Adds tool component.  
        
        Signature ``AddToolComponent(component)`` 
        
        :param component: Tool component 
        :type component: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeletePocket(self, component: NXOpen.NXObject) -> None:
        """
        Deletes pocket.  
        
        Signature ``DeletePocket(component)`` 
        
        :param component: Component to which pocket is deleted 
        :type component: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def BreakLink(self, component: NXOpen.NXObject) -> None:
        """
        Breaks link.  
        
        Signature ``BreakLink(component)`` 
        
        :param component: Component to which link is broke 
        :type component: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePocket(self, component: NXOpen.NXObject) -> None:
        """
        Creates pocket.  
        
        Signature ``CreatePocket(component)`` 
        
        :param component: Component to which pocket is created 
        :type component: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveToolComponent(self, component: NXOpen.NXObject) -> None:
        """
        Removes tool component.  
        
        Signature ``RemoveToolComponent(component)`` 
        
        :param component: Tool component to remove 
        :type component: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetHoleType(self, component: NXOpen.NXObject, holeType: ReusablePocketBuilderHole) -> None:
        """
        Sets hole type.  
        
        Signature ``SetHoleType(component, holeType)`` 
        
        :param component: Component to which hole type is set 
        :type component: :py:class:`NXOpen.NXObject` 
        :param holeType: Hole type 
        :type holeType: :py:class:`NXOpen.Tooling.ReusablePocketBuilderHole` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def AddTargetBody(self, component: NXOpen.NXObject, targetBody: NXOpen.NXObject) -> None:
        """
        Adds target body.  
        
        Signature ``AddTargetBody(component, targetBody)`` 
        
        :param component: Component to which target body is added 
        :type component: :py:class:`NXOpen.NXObject` 
        :param targetBody: Target body 
        :type targetBody: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveTargetBody(self, component: NXOpen.NXObject, targetBody: NXOpen.NXObject) -> None:
        """
        Removes target body.  
        
        Signature ``RemoveTargetBody(component, targetBody)`` 
        
        :param component: Component to which target body is removed 
        :type component: :py:class:`NXOpen.NXObject` 
        :param targetBody: Target body 
        :type targetBody: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetStandard(self, component: NXOpen.NXObject, standard: str) -> None:
        """
        Sets standard for hole series.  
        
        Signature ``SetStandard(component, standard)`` 
        
        :param component: Component to which standard is set 
        :type component: :py:class:`NXOpen.NXObject` 
        :param standard: Hole series standard 
        :type standard: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetForm(self, component: NXOpen.NXObject, form: str) -> None:
        """
        Sets form for hole series.  
        
        Signature ``SetForm(component, form)`` 
        
        :param component: Component to which form is set 
        :type component: :py:class:`NXOpen.NXObject` 
        :param form: Hole series form 
        :type form: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetScrewType(self, component: NXOpen.NXObject, screwType: str) -> None:
        """
        Sets screw type for hole series.  
        
        Signature ``SetScrewType(component, screwType)`` 
        
        :param component: Component to which screw type is set 
        :type component: :py:class:`NXOpen.NXObject` 
        :param screwType: Hole series screw type 
        :type screwType: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFit(self, component: NXOpen.NXObject, fit: str) -> None:
        """
        Sets fit for hole series.  
        
        Signature ``SetFit(component, fit)`` 
        
        :param component: Component to which fit is set 
        :type component: :py:class:`NXOpen.NXObject` 
        :param fit: Hole series fit 
        :type fit: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetReference(self, component: NXOpen.NXObject, reference: str) -> None:
        """
        Sets reference set.  
        
        Signature ``SetReference(component, reference)`` 
        
        :param component: Component to which reference is set 
        :type component: :py:class:`NXOpen.NXObject` 
        :param reference: Reference set with cut body 
        :type reference: str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCounterboreDiameter(self, component: NXOpen.NXObject, counterboreDiameter: float) -> None:
        """
        Sets counterbore diameter for hole series.  
        
        Signature ``SetCounterboreDiameter(component, counterboreDiameter)`` 
        
        :param component: Component to which counterbore diameter is set 
        :type component: :py:class:`NXOpen.NXObject` 
        :param counterboreDiameter: C-Bore diameter for hole series 
        :type counterboreDiameter: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCountersunkDiameter(self, component: NXOpen.NXObject, countersunkDiameter: float) -> None:
        """
        Sets countersunk diameter for hole series.  
        
        Signature ``SetCountersunkDiameter(component, countersunkDiameter)`` 
        
        :param component: Component to which countersunk diameter is set 
        :type component: :py:class:`NXOpen.NXObject` 
        :param countersunkDiameter: C-Sink diameter for hole series 
        :type countersunkDiameter: float 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDiameter(self, component: NXOpen.NXObject, diameter: float) -> None:
        """
        Sets diameter for hole series.  
        
        Signature ``SetDiameter(component, diameter)`` 
        
        :param component: Component to which diameter is set 
        :type component: :py:class:`NXOpen.NXObject` 
        :param diameter: Diameter for hole series 
        :type diameter: float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def VerifyHoleSeries(self, component: NXOpen.NXObject) -> None:
        """
        Verifies hole series parameters.  
        
        Signature ``VerifyHoleSeries(component)`` 
        
        :param component: Component to verify hole series parameters 
        :type component: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def RecreateHoleSeries(self, component: NXOpen.NXObject, feature: NXOpen.NXObject) -> None:
        """
        Recreates hole series if hole feature is updated.  
        
        Signature ``RecreateHoleSeries(component, feature)`` 
        
        :param component: Component to recreate hole series 
        :type component: :py:class:`NXOpen.NXObject` 
        :param feature: Feature to be recreated 
        :type feature: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    AutoTarget: bool = ...
    """
    Returns or sets  the flag specifying whether target is fetched automatically.  
    
    If true, the target is fetched automatically, 
    else, the target is fetched manually. 
    
    <hr>
    
    Getter Method
    
    Signature ``AutoTarget`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoTarget`` 
    
    :param autoTarget: 
    :type autoTarget: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ThreadHole: bool = ...
    """
    Returns or sets  the flag specifying whether thread hole is used.  
    
    If true, thread hole is used, 
    else, screw clearance hole is used. 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadHole`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadHole`` 
    
    :param threadHole: 
    :type threadHole: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ReusablePocketBuilder = ...  # unknown typename


class DieDesignSettingCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.DieDesignSettingBuilder`.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDieDesignSettingBuilder(self) -> DieDesignSettingBuilder:
        """
        Creates die design setting builder.  
        
        Signature ``CreateDieDesignSettingBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieDesignSettingBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class RemoveHolesBuilderSelectionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RemoveHolesBuilderSelectionTypes():
    """
    select object types, body or face 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Body", "select body type"
       "Face", "select face type"
    """
    Body = 0  # RemoveHolesBuilderSelectionTypesMemberType
    Face = 1  # RemoveHolesBuilderSelectionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RemoveHolesBuilder(NXOpen.Builder):
    """
    Remove Hole is used to patch holes for a solid body.  
    
    It returns a delete face 
    feature tag when success and NULL_TAG when fail. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateRemoveHolesBuilder`
    
    Default values.
    
    ==============  =====
    Property        Value
    ==============  =====
    MergeOutput     0 
    --------------  -----
    SelectionType   Body 
    ==============  =====
    
    .. versionadded:: NX8.5.0
    """
    
    class SelectionTypes():
        """
        select object types, body or face 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Body", "select body type"
           "Face", "select face type"
        """
        Body = 0  # RemoveHolesBuilderSelectionTypesMemberType
        Face = 1  # RemoveHolesBuilderSelectionTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddHolesData(self, edges: 'list[NXOpen.Edge]', faces: 'list[NXOpen.Face]') -> None:
        """
        Add the hole data 
        
        Signature ``AddHolesData(edges, faces)`` 
        
        :param edges:  the edges of the holes information 
        :type edges: list of :py:class:`NXOpen.Edge` 
        :param faces:   the faces of the holes information 
        :type faces: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetHighlight(self, object: NXOpen.NXObject, highlight: bool) -> None:
        """
        Set object highlight or unhighlight.  
        
        Signature ``SetHighlight(object, highlight)`` 
        
        :param object:  the object to highlight or unhighlight.  
        :type object: :py:class:`NXOpen.NXObject` 
        :param highlight:   the status to highlight or unhighlight.  
        :type highlight: bool 
        
        .. versionadded:: NX8.5.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def RemoveHoleData(self, holeName: str) -> None:
        """
        Remove the hole from hole data from builder.  
        
        Signature ``RemoveHoleData(holeName)`` 
        
        :param holeName:  the hole name  
        :type holeName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def ClearHoleData(self) -> None:
        """
        Clear all the hole data that was input to the builder.  
        
        Signature ``ClearHoleData()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    BodySelection: NXOpen.ScCollector = ...
    """
    Returns  the body selection 
    
    <hr>
    
    Getter Method
    
    Signature ``BodySelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    FaceToPatch: NXOpen.ScCollector = ...
    """
    Returns  the face to patch 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceToPatch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    HoleFace: NXOpen.ScCollector = ...
    """
    Returns  the hole faces 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    MergeOutput: bool = ...
    """
    Returns or sets  the reduce number of output features setting 
    
    <hr>
    
    Getter Method
    
    Signature ``MergeOutput`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MergeOutput`` 
    
    :param mergeOutput: 
    :type mergeOutput: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectionType: RemoveHolesBuilderSelectionTypes = ...
    """
    Returns or sets  the selection type 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.RemoveHolesBuilderSelectionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionType`` 
    
    :param selType: 
    :type selType: :py:class:`NXOpen.Tooling.RemoveHolesBuilderSelectionTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: RemoveHolesBuilder = ...  # unknown typename


class DieEngStampingCarryoverBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Stamping Carryover builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieEngStampingCarryoverBuilder`
    
    .. versionadded:: NX10.0.0
    """
    DieTip: NXOpen.Features.SelectFeature = ...
    """
    Returns  the die tip 
    
    <hr>
    
    Getter Method
    
    Signature ``DieTip`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    GenerateOptimizeToggle: bool = ...
    """
    Returns or sets  the genereate optimization stamping output toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``GenerateOptimizeToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GenerateOptimizeToggle`` 
    
    :param generateOptimizeToggle: 
    :type generateOptimizeToggle: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    GenerateOriginalToggle: bool = ...
    """
    Returns or sets  the generate original stamping output toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``GenerateOriginalToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GenerateOriginalToggle`` 
    
    :param generateOriginalToggle: 
    :type generateOriginalToggle: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    StampingOutput: NXOpen.SelectBodyList = ...
    """
    Returns  the stamping output 
    
    <hr>
    
    Getter Method
    
    Signature ``StampingOutput`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: DieEngStampingCarryoverBuilder = ...  # unknown typename


class SplitSolidBuilderOperationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplitSolidBuilderOperationType():
    """
    the split operation type: split, trim. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Split", "split option"
       "Trim", "trim option"
    """
    Split = 0  # SplitSolidBuilderOperationTypeMemberType
    Trim = 1  # SplitSolidBuilderOperationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplitSolidBuilderToolObjectOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SplitSolidBuilderToolObjectOption():
    """
    the split tool selection type: Existing Object, New Plane. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ExistingObject", "Existing Object option"
       "NewPlane", "New Plane option"
    """
    ExistingObject = 0  # SplitSolidBuilderToolObjectOptionMemberType
    NewPlane = 1  # SplitSolidBuilderToolObjectOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SplitSolidBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to split a solid with geometry tools.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.SplitSolidCollection.CreateSplitSolidBuilder`
    
    Default values.
    
    ============================  ===============
    Property                      Value
    ============================  ===============
    IsEnlarge                     0 
    ----------------------------  ---------------
    SurfaceRange.AnchorPosition   Vertex1 
    ----------------------------  ---------------
    ToolOption                    ExistingObject 
    ============================  ===============
    
    .. versionadded:: NX7.5.0
    """
    
    class OperationType():
        """
        the split operation type: split, trim. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Split", "split option"
           "Trim", "trim option"
        """
        Split = 0  # SplitSolidBuilderOperationTypeMemberType
        Trim = 1  # SplitSolidBuilderOperationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ToolObjectOption():
        """
        the split tool selection type: Existing Object, New Plane. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ExistingObject", "Existing Object option"
           "NewPlane", "New Plane option"
        """
        ExistingObject = 0  # SplitSolidBuilderToolObjectOptionMemberType
        NewPlane = 1  # SplitSolidBuilderToolObjectOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetEnlargedSurfaceData(self, enlargedSurfaceData: 'list[float]') -> None:
        """
        Keep enlarged surface data to create enlarged surface.  
        
        Four values passed in represent enlarged parameters 
        in U+, U-, V+ and V-. 
        
        Signature ``SetEnlargedSurfaceData(enlargedSurfaceData)`` 
        
        :param enlargedSurfaceData:  array of u and v range values  
        :type enlargedSurfaceData: list of float 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    IsEnlarge: bool = ...
    """
    Returns or sets  the option to enlarge a split tool or not, the tool should be a face.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsEnlarge`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsEnlarge`` 
    
    :param isEnlarge: 
    :type isEnlarge: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReverseTrimDirection: bool = ...
    """
    Returns or sets  the option to reverse the trim direction or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseTrimDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseTrimDirection`` 
    
    :param reverseTrimDirection: 
    :type reverseTrimDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SplitObject: NXOpen.SelectNXObject = ...
    """
    Returns  the tool object to split the target body.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SplitPlane: NXOpen.Plane = ...
    """
    Returns or sets  the plane to be a split tool.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SplitPlane`` 
    
    :param splitPlane: 
    :type splitPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SplitTarget: NXOpen.SelectBody = ...
    """
    Returns  the target body to be split.  
    
    <hr>
    
    Getter Method
    
    Signature ``SplitTarget`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SurfaceRange: NXOpen.GeometricUtilities.SurfaceRangeBuilder = ...
    """
    Returns  the utility to get enlarged parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``SurfaceRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.GeometricUtilities.SurfaceRangeBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToolOption: SplitSolidBuilderToolObjectOption = ...
    """
    Returns or sets  the tool object selection option 
    
    <hr>
    
    Getter Method
    
    Signature ``ToolOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SplitSolidBuilderToolObjectOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToolOption`` 
    
    :param toolOption: 
    :type toolOption: :py:class:`NXOpen.Tooling.SplitSolidBuilderToolObjectOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: SplitSolidBuilderOperationType = ...
    """
    Returns or sets  the operation type to do split body or trim body.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SplitSolidBuilderOperationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param splitOrTrim: 
    :type splitOrTrim: :py:class:`NXOpen.Tooling.SplitSolidBuilderOperationType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SplitSolidBuilder = ...  # unknown typename


class SmartScrewUpdateBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SmartScrewUpdateBuilderTypes():
    """
    Specify the operation type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UpdateSmartScrew", " - "
       "CopyPartFamilyPart", " - "
       "DeletePartFamilyPart", " - "
    """
    UpdateSmartScrew = 0  # SmartScrewUpdateBuilderTypesMemberType
    CopyPartFamilyPart = 1  # SmartScrewUpdateBuilderTypesMemberType
    DeletePartFamilyPart = 2  # SmartScrewUpdateBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SmartScrewUpdateBuilderParentOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SmartScrewUpdateBuilderParentOption():
    """
    Specify the parent node. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoParent", " - "
    """
    NoParent = 0  # SmartScrewUpdateBuilderParentOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SmartScrewUpdateBuilder(NXOpen.Builder):
    """
    Smart Screw Update of MW, PDW and EDW.  
    
    No entity is returned.
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateSmartScrewUpdateBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class Types():
        """
        Specify the operation type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UpdateSmartScrew", " - "
           "CopyPartFamilyPart", " - "
           "DeletePartFamilyPart", " - "
        """
        UpdateSmartScrew = 0  # SmartScrewUpdateBuilderTypesMemberType
        CopyPartFamilyPart = 1  # SmartScrewUpdateBuilderTypesMemberType
        DeletePartFamilyPart = 2  # SmartScrewUpdateBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParentOption():
        """
        Specify the parent node. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoParent", " - "
        """
        NoParent = 0  # SmartScrewUpdateBuilderParentOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ParentNode: SmartScrewUpdateBuilderParentOption = ...
    """
    Returns or sets  the parent node 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentNode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SmartScrewUpdateBuilderParentOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentNode`` 
    
    :param parentNode: 
    :type parentNode: :py:class:`NXOpen.Tooling.SmartScrewUpdateBuilderParentOption` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: SmartScrewUpdateBuilderTypes = ...
    """
    Returns or sets  the operation type of Tooling Part Family Part Tool.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SmartScrewUpdateBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.SmartScrewUpdateBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: SmartScrewUpdateBuilder = ...  # unknown typename


class StandardPartData(NXOpen.TransientObject):
    """
    Represents the standard part client data.  
    
    .. versionadded:: NX11.0.0
    """
    
    def Dispose(self) -> None:
        """
        Dispose the StandardPartClientData object 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSelectedStandardPartData(self, libName: str, libPath: str) -> None:
        """
        Assign selected standard part data to the client data
        
        Signature ``SetSelectedStandardPartData(libName, libPath)`` 
        
        :param libName: 
        :type libName: str 
        :param libPath: 
        :type libPath: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    


class ElectrodeDesign(NXOpen.Builder):
    """
    Represents an Electrode Design.  
    
    This is an abstruct calss and cannot be instantiated
    
    .. versionadded:: NX8.0.0
    """
    Null: ElectrodeDesign = ...  # unknown typename


class CoolingExtendBuilderTipEndTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CoolingExtendBuilderTipEndTypes():
    """
    The tip end types of channel
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No tip angle"
       "Angle", "Angle tip"
       "Round", "Round tip"
    """
    NotSet = 0  # CoolingExtendBuilderTipEndTypesMemberType
    Angle = 1  # CoolingExtendBuilderTipEndTypesMemberType
    Round = 2  # CoolingExtendBuilderTipEndTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CoolingExtendBuilder(NXOpen.Builder):
    """
    The builder class for Channel Extend which assists you
    to extend the channel.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.CoolingExtendCollection.CreateCoolingExtendBuilder`
    
    Default values.
    
    =========================  ======================================
    Property                   Value
    =========================  ======================================
    AdjustBoundaryChannel      0 
    -------------------------  --------------------------------------
    BoundaryChannelExtension   0 
    -------------------------  --------------------------------------
    ExtensionValue.Value       0 (millimeters part), 0 (inches part) 
    -------------------------  --------------------------------------
    RemoveParameter            0 
    -------------------------  --------------------------------------
    RoundTip                   0 
    -------------------------  --------------------------------------
    TipAngleValue.Value        118 
    -------------------------  --------------------------------------
    TipEndType                 None 
    =========================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    
    class TipEndTypes():
        """
        The tip end types of channel
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No tip angle"
           "Angle", "Angle tip"
           "Round", "Round tip"
        """
        NotSet = 0  # CoolingExtendBuilderTipEndTypesMemberType
        Angle = 1  # CoolingExtendBuilderTipEndTypesMemberType
        Round = 2  # CoolingExtendBuilderTipEndTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AdjustBoundaryChannel: bool = ...
    """
    Returns or sets  the value which specifies whether to extend boundary channel or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjustBoundaryChannel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjustBoundaryChannel`` 
    
    :param adjustBoundaryChannel: 
    :type adjustBoundaryChannel: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BoundaryChannelExtension: float = ...
    """
    Returns or sets  the value of the boundary channel extension.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryChannelExtension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryChannelExtension`` 
    
    :param boundaryChannelExtension: 
    :type boundaryChannelExtension: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ExtendChannel: NXOpen.SelectBodyList = ...
    """
    Returns  the cooling channel to be extended.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendChannel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ExtensionValue: NXOpen.Expression = ...
    """
    Returns  the value of the face extension 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtensionValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LimitBody: NXOpen.SelectBody = ...
    """
    Returns  the body used to be the boundary of the face extension.  
    
    <hr>
    
    Getter Method
    
    Signature ``LimitBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RemoveParameter: bool = ...
    """
    Returns or sets  the flag to indicate whether to remove parameters of the created solid or not 
    
    <hr>
    
    Getter Method
    
    Signature ``RemoveParameter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RemoveParameter`` 
    
    :param removeParameter: 
    :type removeParameter: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the value which specifies whether to reverse the channel direction or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RoundTip: bool = ...
    """
    Returns or sets  the flag to indicate whether to create round tip or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``RoundTip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoundTip`` 
    
    :param adjustBoundaryChannel: 
    :type adjustBoundaryChannel: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TipAngle: float = ...
    """
    Returns or sets  the value for the tip angle of the channel.  
    
    <hr>
    
    Getter Method
    
    Signature ``TipAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TipAngle`` 
    
    :param tipAngle: 
    :type tipAngle: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TipAngleValue: NXOpen.Expression = ...
    """
    Returns  the value for the tip angle of the channel.  
    
    <hr>
    
    Getter Method
    
    Signature ``TipAngleValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    TipEndType: CoolingExtendBuilderTipEndTypes = ...
    """
    Returns or sets  the candidate of tip end type
    
    <hr>
    
    Getter Method
    
    Signature ``TipEndType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CoolingExtendBuilderTipEndTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TipEndType`` 
    
    :param tipEndType: 
    :type tipEndType: :py:class:`NXOpen.Tooling.CoolingExtendBuilderTipEndTypes` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Null: CoolingExtendBuilder = ...  # unknown typename


class ReferenceBlendBuilder(NXOpen.Builder):
    """
    The ReferenceBlend builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ReferenceBlendCollection.CreateReferenceBlendBuilder`
    
    .. versionadded:: NX7.0.0
    """
    
    def CreateReferenceBlend(self) -> NXOpen.TaggedObject:
        """
        Create reference blend  
        
        Signature ``CreateReferenceBlend()`` 
        
        :returns:  cteated edge blend  
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: None.
        """
        ...
    
    SelectionEdge: NXOpen.ScCollector = ...
    """
    Returns  the edge selection 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    SelectionFace: NXOpen.ScCollector = ...
    """
    Returns  the face selection 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.0.0
    
    License requirements: None.
    """
    Null: ReferenceBlendBuilder = ...  # unknown typename


class EjectorPostProcessingBuilderTrimMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EjectorPostProcessingBuilderTrimMethod():
    """
    The processing type: Trim, Adjust length and Untrim. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AdjustLength", "Adjust Length"
       "SheetTrim", "Sheet Trim"
       "Untrim", "Untrim"
    """
    AdjustLength = 0  # EjectorPostProcessingBuilderTrimMethodMemberType
    SheetTrim = 1  # EjectorPostProcessingBuilderTrimMethodMemberType
    Untrim = 2  # EjectorPostProcessingBuilderTrimMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EjectorPostProcessingBuilderTrimPartNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EjectorPostProcessingBuilderTrimPartName():
    """
    The trim part where to find a trim surface as tool to trim ejector pins. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Notrimpart", "No trim part"
    """
    Notrimpart = 0  # EjectorPostProcessingBuilderTrimPartNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EjectorPostProcessingBuilderTrimSufaceNameMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class EjectorPostProcessingBuilderTrimSufaceName():
    """
    The trim surface types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Face", "Select faces"
       "SheetBody", "Select sheet body"
    """
    Face = 0  # EjectorPostProcessingBuilderTrimSufaceNameMemberType
    SheetBody = 1  # EjectorPostProcessingBuilderTrimSufaceNameMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EjectorPostProcessingBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create Mold Wizard ejector post processing.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.EjectorPostProcessingCollection.CreateEjectorPostProcessingBuilder`
    
    Default values.
    
    =================  =============
    Property           Value
    =================  =============
    ActionType         AdjustLength 
    -----------------  -------------
    ForceFitDistance   0 
    -----------------  -------------
    PrecisionValue     0 
    -----------------  -------------
    TrimPart           Notrimpart 
    -----------------  -------------
    TrimSurface        Face 
    =================  =============
    
    .. versionadded:: NX7.5.0
    """
    
    class TrimMethod():
        """
        The processing type: Trim, Adjust length and Untrim. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AdjustLength", "Adjust Length"
           "SheetTrim", "Sheet Trim"
           "Untrim", "Untrim"
        """
        AdjustLength = 0  # EjectorPostProcessingBuilderTrimMethodMemberType
        SheetTrim = 1  # EjectorPostProcessingBuilderTrimMethodMemberType
        Untrim = 2  # EjectorPostProcessingBuilderTrimMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimPartName():
        """
        The trim part where to find a trim surface as tool to trim ejector pins. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Notrimpart", "No trim part"
        """
        Notrimpart = 0  # EjectorPostProcessingBuilderTrimPartNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimSufaceName():
        """
        The trim surface types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Face", "Select faces"
           "SheetBody", "Select sheet body"
        """
        Face = 0  # EjectorPostProcessingBuilderTrimSufaceNameMemberType
        SheetBody = 1  # EjectorPostProcessingBuilderTrimSufaceNameMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetTrimDataDetails(self, surfaceType: int, targets: 'list[NXOpen.NXObject]', tools: 'list[NXOpen.NXObject]') -> None:
        """
        Set details of the trim data.  
        
        Signature ``SetTrimDataDetails(surfaceType, targets, tools)`` 
        
        :param surfaceType:  the surface type.  
        :type surfaceType: int 
        :param targets:  array of target ejector pins.  
        :type targets: list of :py:class:`NXOpen.NXObject` 
        :param tools:  array of tool objects.  
        :type tools: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    ActionType: EjectorPostProcessingBuilderTrimMethod = ...
    """
    Returns or sets  the trim method of ejector pin post processing.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EjectorPostProcessingBuilderTrimMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionType`` 
    
    :param actionType: 
    :type actionType: :py:class:`NXOpen.Tooling.EjectorPostProcessingBuilderTrimMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FitDistance: NXOpen.Expression = ...
    """
    Returns  the distance used to adjust the length of an ejector pin for the false body  
    
    <hr>
    
    Getter Method
    
    Signature ``FitDistance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ForceFitDistance: bool = ...
    """
    Returns or sets  the option is used to determine whether or not to force the use of the fit distance value from the UI, instead of the value from the ejector pin part 
    
    <hr>
    
    Getter Method
    
    Signature ``ForceFitDistance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ForceFitDistance`` 
    
    :param forceFitDistance: 
    :type forceFitDistance: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    OffsetValue: NXOpen.Expression = ...
    """
    Returns  the offset value is used to create offset feature on the trimmed ejector pin true body.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PrecisionValue: float = ...
    """
    Returns or sets  the precision of the fit distance value.  
    
    <hr>
    
    Getter Method
    
    Signature ``PrecisionValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrecisionValue`` 
    
    :param precisionValue: 
    :type precisionValue: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    TargetComponents: NXOpen.SelectNXObjectList = ...
    """
    Returns  the target components which contains the target ejector pins to be trimmed.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToolFace: NXOpen.ScCollector = ...
    """
    Returns  the faces used to trim an ejector pin.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ToolSheetBody: NXOpen.SelectBody = ...
    """
    Returns  the sheet body used to trim an ejector pin.  
    
    <hr>
    
    Getter Method
    
    Signature ``ToolSheetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimPart: EjectorPostProcessingBuilderTrimPartName = ...
    """
    Returns or sets  the trim part in which trim surface features are cycled.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EjectorPostProcessingBuilderTrimPartName` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimPart`` 
    
    :param trimPart: 
    :type trimPart: :py:class:`NXOpen.Tooling.EjectorPostProcessingBuilderTrimPartName` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TrimSurface: EjectorPostProcessingBuilderTrimSufaceName = ...
    """
    Returns or sets  the trim surface used to trim an ejector pin.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimSurface`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.EjectorPostProcessingBuilderTrimSufaceName` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimSurface`` 
    
    :param trimSurface: 
    :type trimSurface: :py:class:`NXOpen.Tooling.EjectorPostProcessingBuilderTrimSufaceName` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: EjectorPostProcessingBuilder = ...  # unknown typename


class CostTableDataProvider(NXOpen.TaggedObject, NXOpen.ITableEditorDataProvider):
    """
    Provides basic data for cost feature table data.  
    
    When :py:meth:`Builder.Commit` is called None will be returned.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateCostFeatureDataProvider`
    
    .. versionadded:: NX11.0.1
    """
    
    @typing.overload
    def SetString(self, rows: int, column: int, stringData: str) -> bool:
        """
        Sets string data at a particular location in the table.  
        
        Signature ``SetString(rows, column, stringData)`` 
        
        :param rows:  the row to set  
        :type rows: int 
        :param column:  the column to set  
        :type column: int 
        :param stringData:  the string data to set  
        :type stringData: str 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetString(self, rows: 'list[int]', column: int, stringData: str) -> bool:
        """
        Sets string data on a range of table cells in a specified column. Returns whether any data was successfully set.  
        
        Signature ``SetString(rows, column, stringData)`` 
        
        :param rows:  the rows to set  
        :type rows: list of int 
        :param column:  the column to be set  
        :type column: int 
        :param stringData:  the string data to set  
        :type stringData: str 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetString(self, row: int, column: int) -> str:
        """
        Gets the string data at a particular location in the table.  
        
        Signature ``GetString(row, column)`` 
        
        :param row:  the rows to query  
        :type row: int 
        :param column:  the column to query  
        :type column: int 
        :returns:  the string data at the row and column specified  
        :rtype: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetInteger(self, rows: int, column: int, integerData: int) -> bool:
        """
        Sets integer data at a particular location in the table.  
        
        Signature ``SetInteger(rows, column, integerData)`` 
        
        :param rows:  the row to set  
        :type rows: int 
        :param column:  the column to set  
        :type column: int 
        :param integerData:  the integer data to set  
        :type integerData: int 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetInteger(self, rows: 'list[int]', column: int, integerData: int) -> bool:
        """
        Sets integer data on a range of table cells in a specified column. Returns whether any data was successfully set.  
        
        Signature ``SetInteger(rows, column, integerData)`` 
        
        :param rows:  the rows to set  
        :type rows: list of int 
        :param column:  the column to be set  
        :type column: int 
        :param integerData:  the integer data to set  
        :type integerData: int 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetInteger(self, row: int, column: int) -> tuple:
        """
        Gets the integer data at a particular location in the table.  
        
        Signature ``GetInteger(row, column)`` 
        
        :param row:  the rows to query  
        :type row: int 
        :param column:  the column to query  
        :type column: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (integerData, isUnassigned). integerData is a int.   the integer data at the row and column specified isUnassigned is a bool.   is the value unassigned 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetDouble(self, rows: int, column: int, doubleData: float) -> bool:
        """
        Sets double data at a particular location in the table.  
        
        Signature ``SetDouble(rows, column, doubleData)`` 
        
        :param rows:  the row to set  
        :type rows: int 
        :param column:  the column to set  
        :type column: int 
        :param doubleData:  the double data to set  
        :type doubleData: float 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetDouble(self, rows: 'list[int]', column: int, doubleData: float) -> bool:
        """
        Sets double data on a range of table cells in a specified column. Returns whether any data was successfully set.  
        
        Signature ``SetDouble(rows, column, doubleData)`` 
        
        :param rows:  the rows to set  
        :type rows: list of int 
        :param column:  the column to be set  
        :type column: int 
        :param doubleData:  the double data to set  
        :type doubleData: float 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDouble(self, row: int, column: int) -> tuple:
        """
        Gets the double data at a particular location in the table.  
        
        Signature ``GetDouble(row, column)`` 
        
        :param row:  the rows to query  
        :type row: int 
        :param column:  the column to query  
        :type column: int 
        :returns: a tuple 
        :rtype: A tuple consisting of (doubleData, isUnassigned). doubleData is a float.   the double data at the row and column specified isUnassigned is a bool.   is the value unassigned 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def SetBoolean(self, rows: int, column: int, booleanData: bool) -> bool:
        """
        Sets boolean data at a particular location in the table.  
        
        Signature ``SetBoolean(rows, column, booleanData)`` 
        
        :param rows:  the row to set  
        :type rows: int 
        :param column:  the column to set  
        :type column: int 
        :param booleanData:  the boolean data to set  
        :type booleanData: bool 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetBoolean(self, rows: 'list[int]', column: int, booleanData: bool) -> bool:
        """
        Sets boolean data on a range of table cells in a specified column. Returns whether any data was successfully set.  
        
        Signature ``SetBoolean(rows, column, booleanData)`` 
        
        :param rows:  the rows to set  
        :type rows: list of int 
        :param column:  the column to be set  
        :type column: int 
        :param booleanData:  the boolean data to set  
        :type booleanData: bool 
        :returns:  whether or not the data was successfully set.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBoolean(self, row: int, column: int) -> bool:
        """
        Gets the boolean data at a particular location in the table.  
        
        Signature ``GetBoolean(row, column)`` 
        
        :param row:  the rows to query  
        :type row: int 
        :param column:  the column to query  
        :type column: int 
        :returns:  the boolean data at the row and column specified  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def UnsetValue(self, row: int, column: int) -> bool:
        """
        Unsets the data at a particular location in the table.  
        
        Signature ``UnsetValue(row, column)`` 
        
        :param row:  the row to unset  
        :type row: int 
        :param column:  the column to unset  
        :type column: int 
        :returns:  whether or not the data was successfully unset.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def UnsetValue(self, rows: 'list[int]', column: int) -> bool:
        """
        Unsets the data on a range of table cells in a specified column. Returns whether any data was successfully unset.  
        
        Signature ``UnsetValue(rows, column)`` 
        
        :param rows:  the rows to unset  
        :type rows: list of int 
        :param column:  the column to be unset  
        :type column: int 
        :returns:  whether or not the data was successfully unset.  
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Destroy(self) -> None:
        """
        Deletes the data provider.  
        
        This method should always be called when the data provider is no longer needed. 
        
        Signature ``Destroy()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    RowCount: int = ...
    """
    Returns or sets  the number of rows in the table 
    
    <hr>
    
    Getter Method
    
    Signature ``RowCount`` 
    
    :returns:  the number of rows in the table  
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RowCount`` 
    
    :param rowCount:  the number of rows in the table  
    :type rowCount: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ColumnCount: int = ...
    """
    Returns or sets  the number of columns in the table 
    
    <hr>
    
    Getter Method
    
    Signature ``ColumnCount`` 
    
    :returns:  the number of columns in the table  
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColumnCount`` 
    
    :param columnCount:  the number of columns in the table  
    :type columnCount: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: CostTableDataProvider = ...  # unknown typename


class QuickDatumCsysBuilderAlignVectorsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class QuickDatumCsysBuilderAlignVectors():
    """
    Represents an index to components list type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "X", "A list includes X vector"
       "NegativeX", "A list includes negative X vector"
       "Y", "A list includes Y vector"
       "NegativeY", "A list includes negative Y vector"
       "Z", "A list includes Z vector"
       "NegativeZ", "A list includes negative Z vector"
    """
    X = 0  # QuickDatumCsysBuilderAlignVectorsMemberType
    NegativeX = 1  # QuickDatumCsysBuilderAlignVectorsMemberType
    Y = 2  # QuickDatumCsysBuilderAlignVectorsMemberType
    NegativeY = 3  # QuickDatumCsysBuilderAlignVectorsMemberType
    Z = 4  # QuickDatumCsysBuilderAlignVectorsMemberType
    NegativeZ = 5  # QuickDatumCsysBuilderAlignVectorsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class QuickDatumCsysBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.QuickDatumCsysBuilder` builder.  
    
    Use the :py:class:`NXOpen.Tooling.ReusableObjectManager` class to create a QuickDatumCsysBuilder.
    
    .. versionadded:: NX12.0.0
    """
    
    class AlignVectors():
        """
        Represents an index to components list type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "X", "A list includes X vector"
           "NegativeX", "A list includes negative X vector"
           "Y", "A list includes Y vector"
           "NegativeY", "A list includes negative Y vector"
           "Z", "A list includes Z vector"
           "NegativeZ", "A list includes negative Z vector"
        """
        X = 0  # QuickDatumCsysBuilderAlignVectorsMemberType
        NegativeX = 1  # QuickDatumCsysBuilderAlignVectorsMemberType
        Y = 2  # QuickDatumCsysBuilderAlignVectorsMemberType
        NegativeY = 3  # QuickDatumCsysBuilderAlignVectorsMemberType
        Z = 4  # QuickDatumCsysBuilderAlignVectorsMemberType
        NegativeZ = 5  # QuickDatumCsysBuilderAlignVectorsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetAlignVector(self) -> QuickDatumCsysBuilderAlignVectors:
        """
        Gets the align vector type.  
        
        Signature ``GetAlignVector()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.QuickDatumCsysBuilderAlignVectors` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAlignVector(self, alignVector: QuickDatumCsysBuilderAlignVectors) -> None:
        """
        Sets the align vector type.  
        
        Signature ``SetAlignVector(alignVector)`` 
        
        :param alignVector: 
        :type alignVector: :py:class:`NXOpen.Tooling.QuickDatumCsysBuilderAlignVectors` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetReferenceDiameter(self) -> float:
        """
        Gets the reference diameter.  
        
        Signature ``GetReferenceDiameter()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetReferenceDiameter(self, referenceDiameter: float) -> None:
        """
        Sets the reference diameter.  
        
        Signature ``SetReferenceDiameter(referenceDiameter)`` 
        
        :param referenceDiameter: 
        :type referenceDiameter: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetOffset(self) -> float:
        """
        Gets the offset value.  
        
        Signature ``GetOffset()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOffset(self, offset: float) -> None:
        """
        Sets the reference diameter.  
        
        Signature ``SetOffset(offset)`` 
        
        :param offset: 
        :type offset: float 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSeedCsys(self) -> NXOpen.CoordinateSystem:
        """
        Gets the seed csys.  
        
        Signature ``GetSeedCsys()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.CoordinateSystem` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSeedCsys(self, seedCsys: NXOpen.CoordinateSystem) -> None:
        """
        Sets the seed csys.  
        
        Signature ``SetSeedCsys(seedCsys)`` 
        
        :param seedCsys: 
        :type seedCsys: :py:class:`NXOpen.CoordinateSystem` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetOffsetCsys(self) -> NXOpen.CoordinateSystem:
        """
        Gets the offset csys.  
        
        Signature ``GetOffsetCsys()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.CoordinateSystem` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOffsetCsys(self, offsetCsys: NXOpen.CoordinateSystem) -> None:
        """
        Sets the offset csys.  
        
        Signature ``SetOffsetCsys(offsetCsys)`` 
        
        :param offsetCsys: 
        :type offsetCsys: :py:class:`NXOpen.CoordinateSystem` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetCsys(self) -> 'list[NXOpen.CoordinateSystem]':
        """
        Gets the csys.  
        
        Signature ``GetCsys()`` 
        
        :returns:  The csys.  
        :rtype: list of :py:class:`NXOpen.CoordinateSystem` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveEdges(self, edges: 'list[NXOpen.Edge]') -> None:
        """
        Romoves the selected edges.  
        
        Signature ``RemoveEdges(edges)`` 
        
        :param edges:  The Edges.  
        :type edges: list of :py:class:`NXOpen.Edge` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetEdges(self, edges: 'list[NXOpen.Edge]') -> None:
        """
        Sets the selected edges.  
        
        Signature ``SetEdges(edges)`` 
        
        :param edges:  The Edges.  
        :type edges: list of :py:class:`NXOpen.Edge` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCsys(self, csys: 'list[NXOpen.CoordinateSystem]') -> None:
        """
        Sets the csys.  
        
        Signature ``SetCsys(csys)`` 
        
        :param csys:  The Csys.  
        :type csys: list of :py:class:`NXOpen.CoordinateSystem` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateOffsetCsys(self) -> None:
        """
        Update the offset csys.  
        
        Signature ``UpdateOffsetCsys()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    Null: QuickDatumCsysBuilder = ...  # unknown typename


class FlowAnalysisBuilder(NXOpen.Builder):
    """
    Represents the builder which is used to create flow analysis.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldDesignCollection.CreateFlowAnalysisBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Description: str = ...
    """
    Returns or sets  the size information of injection gates 
    
    <hr>
    
    Getter Method
    
    Signature ``Description`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Description`` 
    
    :param description: 
    :type description: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    GatePoints: NXOpen.Section = ...
    """
    Returns  the positions of injection gates 
    
    <hr>
    
    Getter Method
    
    Signature ``GatePoints`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ProductBody: NXOpen.SelectBody = ...
    """
    Returns  the product body 
    
    <hr>
    
    Getter Method
    
    Signature ``ProductBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: FlowAnalysisBuilder = ...  # unknown typename


class WireHoleBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class WireHoleBuilderTypes():
    """
    the plane to create wire hole sketch 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SpecifyPoint", " - "
       "SelectEdge", " - "
    """
    SpecifyPoint = 0  # WireHoleBuilderTypesMemberType
    SelectEdge = 1  # WireHoleBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class WireHoleBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.WireHoleBuilder`
    This class is for Wire Hole Design UI
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.WireHoleCollection.CreateWireHoleBuilder`
    
    Default values.
    
    =======================  =====
    Property                 Value
    =======================  =====
    DistanceToEdgeMidpoint   3 
    -----------------------  -----
    HoleDiameter             3 
    =======================  =====
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        the plane to create wire hole sketch 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SpecifyPoint", " - "
           "SelectEdge", " - "
        """
        SpecifyPoint = 0  # WireHoleBuilderTypesMemberType
        SelectEdge = 1  # WireHoleBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CenterlineLength: str = ...
    """
    Returns or sets  the centerline length to create wire hole 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineLength`` 
    
    :returns:  Returns the centerline length to create wire hole  
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineLength`` 
    
    :param centerlineLength:  Sets the centerline length to create wire hole  
    :type centerlineLength: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    CircleCenter: NXOpen.Point = ...
    """
    Returns or sets  the circle center to create wire hole 
    
    <hr>
    
    Getter Method
    
    Signature ``CircleCenter`` 
    
    :returns:  Returns the circle center to create wire hole  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircleCenter`` 
    
    :param circleCenter:  Sets the circle center to create wire hole  
    :type circleCenter: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    DistanceToEdgeMidpoint: float = ...
    """
    Returns or sets  the distance to edge midpoint 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceToEdgeMidpoint`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceToEdgeMidpoint`` 
    
    :param distanceToEdgeMidpoint: 
    :type distanceToEdgeMidpoint: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HoleDepth: float = ...
    """
    Returns or sets  the depth of wire hole.  
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDepth`` 
    
    :returns:  Returns the depth of wire hole.  
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleDepth`` 
    
    :param holeDepth:  Sets the depth of wire hole.  
    :type holeDepth: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HoleDiameter: float = ...
    """
    Returns or sets  the diameter to create wire hole 
    
    <hr>
    
    Getter Method
    
    Signature ``HoleDiameter`` 
    
    :returns:  Returns the diameter to create wire hole  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HoleDiameter`` 
    
    :param holeDiameter:  Sets the diameter to create wire hole  
    :type holeDiameter: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectEdge: NXOpen.SelectEdgeList = ...
    """
    Returns  the select edge 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SketchOrientation: NXOpen.Direction = ...
    """
    Returns or sets  the orientation to create wire hole sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchOrientation`` 
    
    :returns:  Returns the orientation to create wire hole sketch  
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SketchOrientation`` 
    
    :param sketchOrientation:  Sets the orientation to create wire hole sketch  
    :type sketchOrientation: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SketchPlane: NXOpen.ScCollector = ...
    """
    Returns  the plane to create wire hole sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchPlane`` 
    
    :returns:  Returns the plane to create wire hole sketch  
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: WireHoleBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.WireHoleBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.WireHoleBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: WireHoleBuilder = ...  # unknown typename


class FastenerAssemConfigCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of FastenerAssy   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX5.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> FastenerAssemConfigBuilder:
        """
        Creates a FastenerAssemConfig builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.FastenerAssemConfigBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    


class LsdynaKfileGeneratorBuilderOperTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaKfileGeneratorBuilderOperTypes():
    """
    Types of operation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Mesh", "Meshes the forming object"
       "Runsolver", "Runs LS-DYNA solver"
    """
    Mesh = 0  # LsdynaKfileGeneratorBuilderOperTypesMemberType
    Runsolver = 1  # LsdynaKfileGeneratorBuilderOperTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaKfileGeneratorBuilderMeshElementTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaKfileGeneratorBuilderMeshElementType():
    """
    Types of mesh element type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Triangle", "Triangle element"
       "Mixed", "Mixed element of triangle and quadrangle"
    """
    Triangle = 0  # LsdynaKfileGeneratorBuilderMeshElementTypeMemberType
    Mixed = 1  # LsdynaKfileGeneratorBuilderMeshElementTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaKfileGeneratorBuilderMeshDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LsdynaKfileGeneratorBuilderMeshDataType():
    """
    Types of data format. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LongBit", "64 bit format"
       "ShortBit", "32 bit IEEE format"
    """
    LongBit = 0  # LsdynaKfileGeneratorBuilderMeshDataTypeMemberType
    ShortBit = 1  # LsdynaKfileGeneratorBuilderMeshDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class LsdynaKfileGeneratorBuilder(NXOpen.Builder):
    """
    Represents LS-Dyna K file builder - K file generator builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateLsdynaKfileGeneratorBuilder`
    
    Default values.
    
    ===================  =========
    Property             Value
    ===================  =========
    ElementType          Triangle 
    -------------------  ---------
    MaximumAngle         20.0 
    -------------------  ---------
    MaximumDeviation     0.15 
    -------------------  ---------
    MaximumElementSize   24.0 
    -------------------  ---------
    MinimumElementSize   1.0 
    -------------------  ---------
    OutputState          15 
    ===================  =========
    
    .. versionadded:: NX9.0.0
    """
    
    class OperTypes():
        """
        Types of operation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Mesh", "Meshes the forming object"
           "Runsolver", "Runs LS-DYNA solver"
        """
        Mesh = 0  # LsdynaKfileGeneratorBuilderOperTypesMemberType
        Runsolver = 1  # LsdynaKfileGeneratorBuilderOperTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MeshElementType():
        """
        Types of mesh element type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Triangle", "Triangle element"
           "Mixed", "Mixed element of triangle and quadrangle"
        """
        Triangle = 0  # LsdynaKfileGeneratorBuilderMeshElementTypeMemberType
        Mixed = 1  # LsdynaKfileGeneratorBuilderMeshElementTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MeshDataType():
        """
        Types of data format. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LongBit", "64 bit format"
           "ShortBit", "32 bit IEEE format"
        """
        LongBit = 0  # LsdynaKfileGeneratorBuilderMeshDataTypeMemberType
        ShortBit = 1  # LsdynaKfileGeneratorBuilderMeshDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def MeshObject(self) -> None:
        """
        Meshes the part.  
        
        Signature ``MeshObject()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CalculateMeshValue(self) -> None:
        """
        Calculates the default mesh settings values.  
        
        Signature ``CalculateMeshValue()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateLSDynaKFile(self, kFile: str) -> None:
        """
        Creates LS-DYNA K file.  
        
        Signature ``CreateLSDynaKFile(kFile)`` 
        
        :param kFile: 
        :type kFile: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def AnalyzeFormability(self, kFile: str) -> None:
        """
        Analyzes the formability based on the input K file.  
        
        Signature ``AnalyzeFormability(kFile)`` 
        
        :param kFile: 
        :type kFile: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetInputDynaFile(self, fileName: str) -> None:
        """
        Sets the input dyna file.  
        
        Signature ``SetInputDynaFile(fileName)`` 
        
        :param fileName: 
        :type fileName: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetOutputFile(self, outputFile: str) -> None:
        """
        Sets the output file.  
        
        Signature ``SetOutputFile(outputFile)`` 
        
        :param outputFile: 
        :type outputFile: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetOutputPath(self, outputPath: str) -> None:
        """
        Sets the output path.  
        
        Signature ``SetOutputPath(outputPath)`` 
        
        :param outputPath: 
        :type outputPath: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    DataType: LsdynaKfileGeneratorBuilderMeshDataType = ...
    """
    Returns or sets  the data type 
    
    <hr>
    
    Getter Method
    
    Signature ``DataType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaKfileGeneratorBuilderMeshDataType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DataType`` 
    
    :param dataType: 
    :type dataType: :py:class:`NXOpen.Tooling.LsdynaKfileGeneratorBuilderMeshDataType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ElementType: LsdynaKfileGeneratorBuilderMeshElementType = ...
    """
    Returns or sets  the element type 
    
    <hr>
    
    Getter Method
    
    Signature ``ElementType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaKfileGeneratorBuilderMeshElementType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ElementType`` 
    
    :param elementType: 
    :type elementType: :py:class:`NXOpen.Tooling.LsdynaKfileGeneratorBuilderMeshElementType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    InputDynaFile: str = ...
    """
    Returns  the input dyna file 
    
    <hr>
    
    Getter Method
    
    Signature ``InputDynaFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MaximumAngle: float = ...
    """
    Returns or sets  the maximum angle 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumAngle`` 
    
    :param maximumAngle: 
    :type maximumAngle: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaximumDeviation: float = ...
    """
    Returns or sets  the maximum deviation 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumDeviation`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumDeviation`` 
    
    :param maximumDeviation: 
    :type maximumDeviation: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MaximumElementSize: float = ...
    """
    Returns or sets  the maximum element size 
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumElementSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MaximumElementSize`` 
    
    :param maximumElementSize: 
    :type maximumElementSize: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MinimumElementSize: float = ...
    """
    Returns or sets  the minimum element size 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumElementSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumElementSize`` 
    
    :param minimumElementSize: 
    :type minimumElementSize: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OutputFile: str = ...
    """
    Returns  the output file 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OutputPath: str = ...
    """
    Returns  the output path 
    
    <hr>
    
    Getter Method
    
    Signature ``OutputPath`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    OutputState: int = ...
    """
    Returns or sets  the output state which will be used to control the result display.  
    
    <hr>
    
    Getter Method
    
    Signature ``OutputState`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OutputState`` 
    
    :param outputState: 
    :type outputState: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: LsdynaKfileGeneratorBuilderOperTypes = ...
    """
    Returns or sets  the type of operation to be run.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.LsdynaKfileGeneratorBuilderOperTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.LsdynaKfileGeneratorBuilderOperTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: LsdynaKfileGeneratorBuilder = ...  # unknown typename


class EnlargeSurfaceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Enlarge Surface   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateEnlargeSurfaceBuilder(self) -> EnlargeSurfaceBuilder:
        """
        Creates a Enlarge Surface builder  
        
        Signature ``CreateEnlargeSurfaceBuilder()`` 
        
        :returns: Enlarge Surface Builder object  
        :rtype: :py:class:`NXOpen.Tooling.EnlargeSurfaceBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class MoldProcessBuilder(NXOpen.Builder):
    """
    Represents a Tooling::MoldProcessBuilder builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldProcessCollection.CreateMoldProcessBuilder`
    
    Default values.
    
    ========  =====
    Property  Value
    ========  =====
    Rename    0 
    ========  =====
    
    .. versionadded:: NX6.0.0
    """
    CompSelect: NXOpen.SelectPoint = ...
    """
    Returns  the component selected to be edited.  
    
    The edition will start Standard Part Management dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``CompSelect`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPoint` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ConceptObjects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the concept objects selected to be edited.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConceptObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Rename: bool = ...
    """
    Returns or sets  the rename toggle let users choose whether to run Part Name Management dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Rename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Rename`` 
    
    :param rename: 
    :type rename: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: MoldProcessBuilder = ...  # unknown typename


class ReusePositioningObjectBuilderDialogOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReusePositioningObjectBuilderDialogOptions():
    """
    the dialog layout options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromToolbar", "dialog from toolbar"
       "FromDialog", "called by other dialog"
       "ImportPart", "import template part"
       "ToolingTemplate", "tooling template part"
       "FromExpression", "dialog from expression"
    """
    FromToolbar = 0  # ReusePositioningObjectBuilderDialogOptionsMemberType
    FromDialog = 1  # ReusePositioningObjectBuilderDialogOptionsMemberType
    ImportPart = 2  # ReusePositioningObjectBuilderDialogOptionsMemberType
    ToolingTemplate = 3  # ReusePositioningObjectBuilderDialogOptionsMemberType
    FromExpression = 4  # ReusePositioningObjectBuilderDialogOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReusePositioningObjectBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReusePositioningObjectBuilderTypes():
    """
    the positioning types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PatternLinear", "linear type"
       "PatternCircular", "circular type"
       "ImportedData", "imported data type"
       "EditSketch", "edit sketch type"
       "EditMode", "dialog edit mode"
       "QuickCsys", "quick datum csys mode"
       "OffsetCsysPattern", "offset csys pattern mode"
       "PlanarPattern", "planar type"
       "NonPlanarPattern", "non planar type"
       "CurvePattern", "non planar curve type"
    """
    PatternLinear = 0  # ReusePositioningObjectBuilderTypesMemberType
    PatternCircular = 1  # ReusePositioningObjectBuilderTypesMemberType
    ImportedData = 2  # ReusePositioningObjectBuilderTypesMemberType
    EditSketch = 3  # ReusePositioningObjectBuilderTypesMemberType
    EditMode = 9  # ReusePositioningObjectBuilderTypesMemberType
    QuickCsys = 7  # ReusePositioningObjectBuilderTypesMemberType
    OffsetCsysPattern = 8  # ReusePositioningObjectBuilderTypesMemberType
    PlanarPattern = 4  # ReusePositioningObjectBuilderTypesMemberType
    NonPlanarPattern = 5  # ReusePositioningObjectBuilderTypesMemberType
    CurvePattern = 6  # ReusePositioningObjectBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReusePositioningObjectBuilderSubTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReusePositioningObjectBuilderSubTypes():
    """
    the positioning sub types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PlanarPatternLinear", "linear type"
       "PlanarPatternCircular", "circular type"
       "EditSketch", "general type"
       "NonPlanarPattern", "edit sketch type"
       "NonPlanarGeneral", "general type"
    """
    PlanarPatternLinear = 0  # ReusePositioningObjectBuilderSubTypesMemberType
    PlanarPatternCircular = 1  # ReusePositioningObjectBuilderSubTypesMemberType
    EditSketch = 2  # ReusePositioningObjectBuilderSubTypesMemberType
    NonPlanarPattern = 3  # ReusePositioningObjectBuilderSubTypesMemberType
    NonPlanarGeneral = 4  # ReusePositioningObjectBuilderSubTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReusePositioningObjectBuilderCurveTrimMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReusePositioningObjectBuilderCurveTrim():
    """
    trim to each other within section type enum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "no trimming"
       "WithinSection", "allow trimming"
    """
    NotSet = 0  # ReusePositioningObjectBuilderCurveTrimMemberType
    WithinSection = 1  # ReusePositioningObjectBuilderCurveTrimMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReusePositioningObjectBuilderCurveExtendToFaceMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReusePositioningObjectBuilderCurveExtendToFace():
    """
    extend to face edges type enum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "no extentsion"
       "Boundary", "extend till face boundary"
    """
    NotSet = 0  # ReusePositioningObjectBuilderCurveExtendToFaceMemberType
    Boundary = 1  # ReusePositioningObjectBuilderCurveExtendToFaceMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReusePositioningObjectBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilder`   
    
    Use the :py:class:`NXOpen.Tooling.ReusableObjectManager` class to create a ReusePositioningObjectBuilder.
    
    .. versionadded:: NX11.0.0
    """
    
    class DialogOptions():
        """
        the dialog layout options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FromToolbar", "dialog from toolbar"
           "FromDialog", "called by other dialog"
           "ImportPart", "import template part"
           "ToolingTemplate", "tooling template part"
           "FromExpression", "dialog from expression"
        """
        FromToolbar = 0  # ReusePositioningObjectBuilderDialogOptionsMemberType
        FromDialog = 1  # ReusePositioningObjectBuilderDialogOptionsMemberType
        ImportPart = 2  # ReusePositioningObjectBuilderDialogOptionsMemberType
        ToolingTemplate = 3  # ReusePositioningObjectBuilderDialogOptionsMemberType
        FromExpression = 4  # ReusePositioningObjectBuilderDialogOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Types():
        """
        the positioning types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PatternLinear", "linear type"
           "PatternCircular", "circular type"
           "ImportedData", "imported data type"
           "EditSketch", "edit sketch type"
           "EditMode", "dialog edit mode"
           "QuickCsys", "quick datum csys mode"
           "OffsetCsysPattern", "offset csys pattern mode"
           "PlanarPattern", "planar type"
           "NonPlanarPattern", "non planar type"
           "CurvePattern", "non planar curve type"
        """
        PatternLinear = 0  # ReusePositioningObjectBuilderTypesMemberType
        PatternCircular = 1  # ReusePositioningObjectBuilderTypesMemberType
        ImportedData = 2  # ReusePositioningObjectBuilderTypesMemberType
        EditSketch = 3  # ReusePositioningObjectBuilderTypesMemberType
        EditMode = 9  # ReusePositioningObjectBuilderTypesMemberType
        QuickCsys = 7  # ReusePositioningObjectBuilderTypesMemberType
        OffsetCsysPattern = 8  # ReusePositioningObjectBuilderTypesMemberType
        PlanarPattern = 4  # ReusePositioningObjectBuilderTypesMemberType
        NonPlanarPattern = 5  # ReusePositioningObjectBuilderTypesMemberType
        CurvePattern = 6  # ReusePositioningObjectBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SubTypes():
        """
        the positioning sub types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PlanarPatternLinear", "linear type"
           "PlanarPatternCircular", "circular type"
           "EditSketch", "general type"
           "NonPlanarPattern", "edit sketch type"
           "NonPlanarGeneral", "general type"
        """
        PlanarPatternLinear = 0  # ReusePositioningObjectBuilderSubTypesMemberType
        PlanarPatternCircular = 1  # ReusePositioningObjectBuilderSubTypesMemberType
        EditSketch = 2  # ReusePositioningObjectBuilderSubTypesMemberType
        NonPlanarPattern = 3  # ReusePositioningObjectBuilderSubTypesMemberType
        NonPlanarGeneral = 4  # ReusePositioningObjectBuilderSubTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CurveTrim():
        """
        trim to each other within section type enum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "no trimming"
           "WithinSection", "allow trimming"
        """
        NotSet = 0  # ReusePositioningObjectBuilderCurveTrimMemberType
        WithinSection = 1  # ReusePositioningObjectBuilderCurveTrimMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CurveExtendToFace():
        """
        extend to face edges type enum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "no extentsion"
           "Boundary", "extend till face boundary"
        """
        NotSet = 0  # ReusePositioningObjectBuilderCurveExtendToFaceMemberType
        Boundary = 1  # ReusePositioningObjectBuilderCurveExtendToFaceMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def LoadPart(self, partFileName: str) -> None:
        """
        Imports given part file to current work part 
        
        Signature ``LoadPart(partFileName)`` 
        
        :param partFileName:  Part file name without path  
        :type partFileName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RepositionBody(self, target: NXOpen.Point3d, orient: NXOpen.Matrix3x3, twoPickPositionMode: bool, onlyMovePoints: bool) -> None:
        """
        Moves the body to the selected point and orientation 
        
        Signature ``RepositionBody(target, orient, twoPickPositionMode, onlyMovePoints)`` 
        
        :param target:  Destination point  
        :type target: :py:class:`NXOpen.Point3d` 
        :param orient:  Orientation  
        :type orient: :py:class:`NXOpen.Matrix3x3` 
        :param twoPickPositionMode:  Flag specifying whether to reposition the body based on active sketch plane when using two pick position method to drop the body. If True, reposition the body, else, do nothing.  
        :type twoPickPositionMode: bool 
        :param onlyMovePoints:  Flag specifying whether to move the whole sketch or just the sketch points. If True, reposition the sketch points, else, reposition the whole sketch.  
        :type onlyMovePoints: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateSketch(self, dropFace: NXOpen.NXObject, position: NXOpen.Point3d) -> None:
        """
        Creates new sketch on drop face and location 
        
        Signature ``CreateSketch(dropFace, position)`` 
        
        :param dropFace:  tag of drop face of point  
        :type dropFace: :py:class:`NXOpen.NXObject` 
        :param position:  Destination point  
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetSketchFromFeatureSet(self) -> None:
        """
        Gets sketch tag from feature set 
        
        Signature ``GetSketchFromFeatureSet()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeletePoint(self, point: NXOpen.Point) -> None:
        """
        Delete point from sketch 
        
        Signature ``DeletePoint(point)`` 
        
        :param point:  tag of delete point  
        :type point: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def EditPoint(self, point: NXOpen.Point, value: float, isXValue: bool) -> None:
        """
        Edits point from sketch 
        
        Signature ``EditPoint(point, value, isXValue)`` 
        
        :param point:  tag of delete point  
        :type point: :py:class:`NXOpen.Point` 
        :param value:  value point coordinates  
        :type value: float 
        :param isXValue:  is the value x or y coordinate  
        :type isXValue: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def EditPoint(self, point: NXOpen.Point, xvalue: float, yvalue: float) -> None:
        """
        Edits point from sketch 
        
        Signature ``EditPoint(point, xvalue, yvalue)`` 
        
        :param point:  tag of delete point  
        :type point: :py:class:`NXOpen.Point` 
        :param xvalue:  value point x coordinates  
        :type xvalue: float 
        :param yvalue:  value point y coordinates  
        :type yvalue: float 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddPoints(self) -> None:
        """
        Adds points to sketch 
        
        Signature ``AddPoints()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddPoint(self, pointCoords: NXOpen.Point3d) -> NXOpen.Point:
        """
        Create a point, then add it to sketch  
        
        Signature ``AddPoint(pointCoords)`` 
        
        :param pointCoords:  point coordinates  
        :type pointCoords: :py:class:`NXOpen.Point3d` 
        :returns:  point tag  
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreatePointInSketch(self) -> None:
        """
        Creates point pattern in sketch 
        
        Signature ``CreatePointInSketch()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetFeatureSetAttributes(self) -> bool:
        """
        Gets attributes from feature set  
        
        Signature ``GetFeatureSetAttributes()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPointsInSketch(self) -> None:
        """
        Sets points in sketch 
        
        Signature ``SetPointsInSketch()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetNonStandardPoints(self) -> tuple:
        """
        Gets the point coordinates  
        
        Signature ``GetNonStandardPoints()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (isAbsolute, points). isAbsolute is a bool. points is a list of :py:class:`NXOpen.Point3d`. 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetNonStandardPoints(self, points: 'list[NXOpen.Point3d]', isAbsolute: bool) -> None:
        """
        Set the point coordinates 
        
        Signature ``SetNonStandardPoints(points, isAbsolute)`` 
        
        :param points: 
        :type points: list of :py:class:`NXOpen.Point3d` 
        :param isAbsolute:  Flag indicating whether the points is absolute or not  
        :type isAbsolute: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSketchActive(self, sketch: NXOpen.Sketch) -> None:
        """
        Sets the sketch to be active 
        
        Signature ``SetSketchActive(sketch)`` 
        
        :param sketch: 
        :type sketch: :py:class:`NXOpen.Sketch` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddPointOnNonPlanar(self, pointCoords: NXOpen.Point3d) -> NXOpen.Point:
        """
        Create a point on the non-planar face/curve  
        
        Signature ``AddPointOnNonPlanar(pointCoords)`` 
        
        :param pointCoords:  point coordinates  
        :type pointCoords: :py:class:`NXOpen.Point3d` 
        :returns:  point tag  
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def EditPointOnPlanar(self, point: NXOpen.Point, value: float, isUValue: bool) -> NXOpen.Point:
        """
        Edits point on the planar face/curve  
        
        Signature ``EditPointOnPlanar(point, value, isUValue)`` 
        
        :param point:  tag of delete point  
        :type point: :py:class:`NXOpen.Point` 
        :param value:  value point U,V or percentage on the curve  
        :type value: float 
        :param isUValue:  is the value U or V, or percentage on the curve  
        :type isUValue: bool 
        :returns:  point tag  
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def EditPointOnPlanar(self, point: NXOpen.Point, uValue: float, vValue: float) -> NXOpen.Point:
        """
        Edits point on the planar face/curve  
        
        Signature ``EditPointOnPlanar(point, uValue, vValue)`` 
        
        :param point:  tag of delete point  
        :type point: :py:class:`NXOpen.Point` 
        :param uValue:  value point U,V or percentage on the curve  
        :type uValue: float 
        :param vValue:  value point U,V or percentage on the curve  
        :type vValue: float 
        :returns:  point tag  
        :rtype: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateCsysOnNonPlanar(self) -> None:
        """
        Creates datum csys pattern on non planar face/curve 
        
        Signature ``CreateCsysOnNonPlanar()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTrimToFaceEdgesOption(self, trimToFaceEdges: bool) -> None:
        """
        Sets the trim option for curve option.  
        
        Signature ``SetTrimToFaceEdgesOption(trimToFaceEdges)`` 
        
        :param trimToFaceEdges: 
        :type trimToFaceEdges: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetExtendToFaceEdgesOption(self, extendToFaceEdges: ReusePositioningObjectBuilderCurveExtendToFace) -> None:
        """
        Sets the extend option for curve operation.  
        
        Signature ``SetExtendToFaceEdgesOption(extendToFaceEdges)`` 
        
        :param extendToFaceEdges: 
        :type extendToFaceEdges: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilderCurveExtendToFace` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def TrimCurveFaceEdges(self, trimToFaceEdges: bool) -> None:
        """
        Trim curve status accroding to the trim option 
        
        Signature ``TrimCurveFaceEdges(trimToFaceEdges)`` 
        
        :param trimToFaceEdges:  Whether the update the curve face edges when trim option turn on/off  
        :type trimToFaceEdges: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ExtendCurveFaceEdges(self, extendToFaceEdges: bool) -> None:
        """
        Extend curve status accroding to the extend option 
        
        Signature ``ExtendCurveFaceEdges(extendToFaceEdges)`` 
        
        :param extendToFaceEdges:  Whether the update the curve face edges when extend option turn on/off  
        :type extendToFaceEdges: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetBaseFaceForSection(self, collTag: NXOpen.ScCollector) -> None:
        """
        Set base face for section 
        
        Signature ``SetBaseFaceForSection(collTag)`` 
        
        :param collTag:  Base face collector tag  
        :type collTag: :py:class:`NXOpen.ScCollector` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FlipOffsetCurveDirection(self) -> None:
        """
        Flip offset curve direction 
        
        Signature ``FlipOffsetCurveDirection()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def OffsetCurveOnFace(self, offsetValue: str) -> None:
        """
        Offset curve on the face 
        
        Signature ``OffsetCurveOnFace(offsetValue)`` 
        
        :param offsetValue:  offset value  
        :type offsetValue: str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FreeOcfApplicationData(self) -> None:
        """
        Free OCF applicaion data 
        
        Signature ``FreeOcfApplicationData()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetSelectedCurveCollector(self, section: NXOpen.Section) -> None:
        """
        Sets the selected curve for non planar face 
        
        Signature ``SetSelectedCurveCollector(section)`` 
        
        :param section:  the selected curve section tag  
        :type section: :py:class:`NXOpen.Section` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetOffsetCsysPattern(self) -> NXOpen.NXObject:
        """
        Get the offset datum CSYS pattern  
        
        Signature ``GetOffsetCsysPattern()`` 
        
        :returns:  Offset CSYS pattern from quick csys mode  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAllDatumCsys(self) -> 'list[NXOpen.CoordinateSystem]':
        """
        Gets all the datum CSYS tag 
        
        Signature ``GetAllDatumCsys()`` 
        
        :returns:  csys tags  
        :rtype: list of :py:class:`NXOpen.CoordinateSystem` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindSeedCsysFromPattern(self, csysPattern: NXOpen.NXObject) -> NXOpen.CoordinateSystem:
        """
        Find the seed CSYS tag from pattern  
        
        Signature ``FindSeedCsysFromPattern(csysPattern)`` 
        
        :param csysPattern:  Selected csys pattern tag  
        :type csysPattern: :py:class:`NXOpen.NXObject` 
        :returns:  Seed csys tag  
        :rtype: :py:class:`NXOpen.CoordinateSystem` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetCsysFromFeatureSet(self) -> None:
        """
        Get all CSYS tags from positioning feature set 
        
        Signature ``GetCsysFromFeatureSet()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateOffsetCsysFromSeed(self) -> NXOpen.Features.Feature:
        """
        Create offset CSYS from seed CSYS  
        
        Signature ``CreateOffsetCsysFromSeed()`` 
        
        :returns:  Offset csys feature tag  
        :rtype: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateQuickCsysPattern(self) -> None:
        """
        Update quick CSYS pattern 
        
        Signature ``UpdateQuickCsysPattern()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateDatumCsysByType(self) -> None:
        """
        Update datum CSYS when switch the type 
        
        Signature ``UpdateDatumCsysByType()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeselectNonPlanarObject(self, delselectedObjs: 'list[NXOpen.NXObject]') -> None:
        """
        Deselected the edge or non planar face 
        
        Signature ``DeselectNonPlanarObject(delselectedObjs)`` 
        
        :param delselectedObjs:  Edge or non planar face  
        :type delselectedObjs: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    
    Angle: str = ...
    """
    Returns or sets  the angle value of pattern
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ColumnNumber: str = ...
    """
    Returns or sets  the column number of pattern
    
    <hr>
    
    Getter Method
    
    Signature ``ColumnNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ColumnNumber`` 
    
    :param columnNumber: 
    :type columnNumber: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    CurvePercentage: str = ...
    """
    Returns or sets  the percentage value of curve
    
    <hr>
    
    Getter Method
    
    Signature ``CurvePercentage`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurvePercentage`` 
    
    :param curvePercentage: 
    :type curvePercentage: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    DataFile: str = ...
    """
    Returns or sets  the imported data file name 
    
    <hr>
    
    Getter Method
    
    Signature ``DataFile`` 
    
    :returns:  Data file name  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DataFile`` 
    
    :param dataFileName:  Data file name  
    :type dataFileName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    DialogOption: ReusePositioningObjectBuilderDialogOptions = ...
    """
    Returns or sets  the dialog option type that is from toolbar or others 
    
    <hr>
    
    Getter Method
    
    Signature ``DialogOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilderDialogOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DialogOption`` 
    
    :param options: 
    :type options: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilderDialogOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Distribution: bool = ...
    """
    Returns or sets  the distribution mode of pattern point 
    
    <hr>
    
    Getter Method
    
    Signature ``Distribution`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Distribution`` 
    
    :param isSymmetrical: 
    :type isSymmetrical: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    DropObject: NXOpen.NXObject = ...
    """
    Returns or sets  the drop face required for reattach sketch when using one-pick position method  
    
    <hr>
    
    Getter Method
    
    Signature ``DropObject`` 
    
    :returns:  Drop face or point  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DropObject`` 
    
    :param face:  Drop face or point  
    :type face: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    DynamicCsysOrientation: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the orientation of dynamic csys 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCsysOrientation`` 
    
    :returns:  Orientation of dynamic csys  
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicCsysOrientation`` 
    
    :param orientation:  Orientation of dynamic csys  
    :type orientation: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    DynamicCsysOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the origin of dynamic csys 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicCsysOrigin`` 
    
    :returns:  Origin of dynamic csys  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicCsysOrigin`` 
    
    :param origin:  Origin of dynamic csys  
    :type origin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    EditFeatureGroup: NXOpen.Features.Feature = ...
    """
    Returns or sets  the feature group created after reuse paste 
    
    <hr>
    
    Getter Method
    
    Signature ``EditFeatureGroup`` 
    
    :returns:  Repositioning feature group  
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditFeatureGroup`` 
    
    :param featureGroup:  Repositioning feature group  
    :type featureGroup: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    EndingUValue: str = ...
    """
    Returns or sets  the end U value of non planar face pattern
    
    <hr>
    
    Getter Method
    
    Signature ``EndingUValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndingUValue`` 
    
    :param endUValue: 
    :type endUValue: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    EndingVValue: str = ...
    """
    Returns or sets  the end V value of non planar face pattern
    
    <hr>
    
    Getter Method
    
    Signature ``EndingVValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndingVValue`` 
    
    :param endVValue: 
    :type endVValue: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ExtendToFaceEdgesOption: ReusePositioningObjectBuilderCurveExtendToFace = ...
    """
    Returns  the extend option for curve operation.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendToFaceEdgesOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilderCurveExtendToFace` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ImportedSketch: NXOpen.Sketch = ...
    """
    Returns or sets  the imported sketch  
    
    <hr>
    
    Getter Method
    
    Signature ``ImportedSketch`` 
    
    :returns:  Imported sketch  
    :rtype: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ImportedSketch`` 
    
    :param sketch:  Imported sketch  
    :type sketch: :py:class:`NXOpen.Sketch` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    InitialPasteLocation: NXOpen.Point3d = ...
    """
    Returns or sets  the initial paste location.  
    
    This is mainly used to define default paste location of sketch objects 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialPasteLocation`` 
    
    :returns:  The drop location coordinates in absolute  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InitialPasteLocation`` 
    
    :param dropLocation:  The drop location coordinates in absolute  
    :type dropLocation: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Length: str = ...
    """
    Returns or sets  the length value of pattern
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Length`` 
    
    :param length: 
    :type length: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    LibraryName: str = ...
    """
    Returns or sets  the library name that is used for the positioning object 
    
    <hr>
    
    Getter Method
    
    Signature ``LibraryName`` 
    
    :returns:  Library name  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LibraryName`` 
    
    :param libraryName:  Library name  
    :type libraryName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    MultipleFaceCollector: NXOpen.ScCollector = ...
    """
    Returns or sets  the multiple face for non planar face 
    
    <hr>
    
    Getter Method
    
    Signature ``MultipleFaceCollector`` 
    
    :returns:  mutiple face collector tag  
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MultipleFaceCollector`` 
    
    :param collTag:  mutiple face collector tag  
    :type collTag: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    NewPoint: NXOpen.Point = ...
    """
    Returns or sets  the new added point  
    
    <hr>
    
    Getter Method
    
    Signature ``NewPoint`` 
    
    :returns:  New added point tag  
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NewPoint`` 
    
    :param point:  New added point tag  
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    OffsetCsysFromQuick: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the offset datum CSYS from quick csys 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetCsysFromQuick`` 
    
    :returns:  Offset CSYS tag from quick csys mode  
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetCsysFromQuick`` 
    
    :param offsetCsysFromQuick:  Offset CSYS from quick csys mode  
    :type offsetCsysFromQuick: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    OffsetDatumCsys: NXOpen.Features.Feature = ...
    """
    Returns or sets  the offset datum CSYS 
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetDatumCsys`` 
    
    :returns:  Offset datum CSYS feature tag  
    :rtype: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetDatumCsys`` 
    
    :param offsetCsys:  Offset datum CSYS feature tag  
    :type offsetCsys: :py:class:`NXOpen.Features.Feature` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    OffsetValue: str = ...
    """
    Returns or sets  the offset value of pattern
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetValue`` 
    
    :param offsetValue: 
    :type offsetValue: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    QuickCsysData: QuickDatumCsysBuilder = ...
    """
    Returns or sets  the quick CSYS data 
    
    <hr>
    
    Getter Method
    
    Signature ``QuickCsysData`` 
    
    :returns:  Quick Csys builder data  
    :rtype: :py:class:`NXOpen.Tooling.QuickDatumCsysBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``QuickCsysData`` 
    
    :param quickCsysData:  Quick Csys builder data  
    :type quickCsysData: :py:class:`NXOpen.Tooling.QuickDatumCsysBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ReferenceCsysPattern: NXOpen.NXObject = ...
    """
    Returns or sets  the referenced CSYS pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceCsysPattern`` 
    
    :returns:  Reference CSYS pattern tag  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceCsysPattern`` 
    
    :param referCsysPattern:  Reference CSYS pattern tag  
    :type referCsysPattern: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    RowNumber: str = ...
    """
    Returns or sets  the row number of pattern
    
    <hr>
    
    Getter Method
    
    Signature ``RowNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RowNumber`` 
    
    :param rowNumber: 
    :type rowNumber: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SeedDatumCsys: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the seed datum CSYS 
    
    <hr>
    
    Getter Method
    
    Signature ``SeedDatumCsys`` 
    
    :returns:  Seed datum CSYS tag  
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SeedDatumCsys`` 
    
    :param seedCsys:  Seed datum CSYS tag  
    :type seedCsys: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SelectedCurve: bool = ...
    """
    Returns or sets  the flag of the selected curve
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedCurve`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedCurve`` 
    
    :param selected: 
    :type selected: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SelectedCurveCollector: NXOpen.Section = ...
    """
    Returns  the selected curve for non planar face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedCurveCollector`` 
    
    :returns:  selected curve section tag  
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SelectedNonPlanarFace: bool = ...
    """
    Returns or sets  the flag of the selected non-planar face
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedNonPlanarFace`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedNonPlanarFace`` 
    
    :param selected: 
    :type selected: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SketchPoint: NXOpen.Section = ...
    """
    Returns  the part sketch point section 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    StartingUValue: str = ...
    """
    Returns or sets  the start U value of non planar face pattern
    
    <hr>
    
    Getter Method
    
    Signature ``StartingUValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartingUValue`` 
    
    :param startUValue: 
    :type startUValue: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    StartingVValue: str = ...
    """
    Returns or sets  the start V value of non planar face pattern
    
    <hr>
    
    Getter Method
    
    Signature ``StartingVValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartingVValue`` 
    
    :param startVValue: 
    :type startVValue: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    SubType: ReusePositioningObjectBuilderSubTypes = ...
    """
    Returns or sets  the positioning object sub type that is from pattern or imported data 
    
    <hr>
    
    Getter Method
    
    Signature ``SubType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilderSubTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SubType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilderSubTypes` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    TrimToFaceEdgesOption: bool = ...
    """
    Returns  the trim option for curve option.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimToFaceEdgesOption`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Type: ReusePositioningObjectBuilderTypes = ...
    """
    Returns or sets  the positioning object type that is from pattern or imported data 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.ReusePositioningObjectBuilderTypes` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    UPercentage: str = ...
    """
    Returns or sets  the u percentage of non planar face pattern
    
    <hr>
    
    Getter Method
    
    Signature ``UPercentage`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UPercentage`` 
    
    :param uPercentage: 
    :type uPercentage: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    UseFaceCenterAsLocation: bool = ...
    """
    Returns or sets  an option that indicates whether to use face center as location 
    
    <hr>
    
    Getter Method
    
    Signature ``UseFaceCenterAsLocation`` 
    
    :returns:  Flag indicating whether to use face center or not  
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseFaceCenterAsLocation`` 
    
    :param useFaceCenter:  Flag indicating whether to use face center or not  
    :type useFaceCenter: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    UseOnePickPositionMethod: bool = ...
    """
    Returns or sets  the option specifying whether to use one-pick position method for drag/drop 
    
    <hr>
    
    Getter Method
    
    Signature ``UseOnePickPositionMethod`` 
    
    :returns:  Flag indicating whether to use one pick position method or not  
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseOnePickPositionMethod`` 
    
    :param useOnePickPositionMethod:  Flag indicating whether to use one pick position method or not  
    :type useOnePickPositionMethod: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    UseProjectPoint: bool = ...
    """
    Returns or sets  an option that indicates whether to use project point if associative point is not in the same plane as sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``UseProjectPoint`` 
    
    :returns:  Flag indicating whether to use project point or not  
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseProjectPoint`` 
    
    :param useProjectPoint:  Flag indicating whether to use project point or not  
    :type useProjectPoint: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    VPercentage: str = ...
    """
    Returns or sets  the v percentage of non planar face pattern
    
    <hr>
    
    Getter Method
    
    Signature ``VPercentage`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VPercentage`` 
    
    :param vPercentage: 
    :type vPercentage: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Width: str = ...
    """
    Returns or sets  the width value of pattern
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: ReusePositioningObjectBuilder = ...  # unknown typename


class GuidedExtensionBuilderSegmentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GuidedExtensionBuilderSegmentType():
    """
    Segment type for segments 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Normal", "Normal segment type"
       "Transition", "Transition segment type"
       "Bypass", "Bypass segment type"
    """
    Normal = 0  # GuidedExtensionBuilderSegmentTypeMemberType
    Transition = 1  # GuidedExtensionBuilderSegmentTypeMemberType
    Bypass = 2  # GuidedExtensionBuilderSegmentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GuidedExtensionBuilder(NXOpen.Builder):
    """
    Builder for creating Guided Extension surface in NX   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.GuidedExtensionManager.CreateBuilder`
    
    Default values.
    
    ======================  ========================================
    Property                Value
    ======================  ========================================
    AngleTolerance          0.5 
    ----------------------  ----------------------------------------
    CheckSurfaces           0 
    ----------------------  ----------------------------------------
    DistanceTolerance       0.01 
    ----------------------  ----------------------------------------
    ExtendLength.Value      10 (millimeters part), 10 (inches part) 
    ----------------------  ----------------------------------------
    GuideLineAngle1.Value   0 
    ----------------------  ----------------------------------------
    GuideLineAngle2.Value   0 
    ======================  ========================================
    
    .. versionadded:: NX9.0.0
    """
    
    class SegmentType():
        """
        Segment type for segments 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Normal", "Normal segment type"
           "Transition", "Transition segment type"
           "Bypass", "Bypass segment type"
        """
        Normal = 0  # GuidedExtensionBuilderSegmentTypeMemberType
        Transition = 1  # GuidedExtensionBuilderSegmentTypeMemberType
        Bypass = 2  # GuidedExtensionBuilderSegmentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ResetAllSegments(self) -> None:
        """
        The action that resets all the segments in the loop to their original state 
        
        Signature ``ResetAllSegments()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def UpdateSheetEdges(self) -> None:
        """
        Updates the information for the sheet edges of the selected section whenever sheet edges are selected or de-selected.  
        
        Signature ``UpdateSheetEdges()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetSelectedSegmentType(self, segmentType: GuidedExtensionBuilderSegmentType) -> None:
        """
        Sets the segment type for the selected segment.  
        
        Signature ``SetSelectedSegmentType(segmentType)`` 
        
        :param segmentType:  Segment type for the selected segment  
        :type segmentType: :py:class:`NXOpen.Tooling.GuidedExtensionBuilderSegmentType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def MergeSegment(self) -> None:
        """
        Merges the selected segment with its neighboring segments.  
        
        Signature ``MergeSegment()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SplitSegment(self) -> None:
        """
        Splits the selected segment into multiple segments by placing guide lines at end points of the edges for the selected segment.  
        
        Signature ``SplitSegment()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def RestoreSegments(self) -> None:
        """
        Unmerges the selected segment restoring the original segments before the merge using :py:meth:`Tooling.GuidedExtensionBuilder.MergeSegment`.  
        
        Signature ``RestoreSegments()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def CreateGuideLine(self, assocEdge: NXOpen.Edge, guideLinePnt: NXOpen.Point3d, guideLineVector: NXOpen.Vector3d, guideLineLength: float) -> NXOpen.Curve:
        """
        Creates a guide line at one of the end points of the sheet edge in the selection.  
        
        Signature ``CreateGuideLine(assocEdge, guideLinePnt, guideLineVector, guideLineLength)`` 
        
        :param assocEdge:  Associated curve of the guide line to be created  
        :type assocEdge: :py:class:`NXOpen.Edge` 
        :param guideLinePnt:  Guide line point  
        :type guideLinePnt: :py:class:`NXOpen.Point3d` 
        :param guideLineVector:  Guide line vector  
        :type guideLineVector: :py:class:`NXOpen.Vector3d` 
        :param guideLineLength:  Guide line length  
        :type guideLineLength: float 
        :returns:  Guide line created  
        :rtype: :py:class:`NXOpen.Curve` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def UpdateAllGuideLinesLength(self) -> None:
        """
        Updates the length of all the guide lines whenever the user changes the extend length of the surfaces interactively.  
        
        Signature ``UpdateAllGuideLinesLength()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def ChangeGuideLineDirectionAndLength(self, guideLine: NXOpen.Curve, guideLineVector: NXOpen.Vector3d, guideLineLength: float) -> None:
        """
        Changes the direction and length of a guide line.  
        
        Signature ``ChangeGuideLineDirectionAndLength(guideLine, guideLineVector, guideLineLength)`` 
        
        :param guideLine:  Guide line to be changed  
        :type guideLine: :py:class:`NXOpen.Curve` 
        :param guideLineVector:  Direction vector  
        :type guideLineVector: :py:class:`NXOpen.Vector3d` 
        :param guideLineLength:  Length of guide line  
        :type guideLineLength: float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetLastSelectedLoopIndex(self, lastSelectedLoopIndex: int) -> None:
        """
        Sets the loop index for the last selected loop which contains the last selected edge.  
        
        Signature ``SetLastSelectedLoopIndex(lastSelectedLoopIndex)`` 
        
        :param lastSelectedLoopIndex:  Loop index of the last selected loop  
        :type lastSelectedLoopIndex: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetReverseExtendDirection(self, reverseExtendDirection: bool) -> None:
        """
        Reverses surface extend direction 
        
        Signature ``SetReverseExtendDirection(reverseExtendDirection)`` 
        
        :param reverseExtendDirection:  Reverse surface extend direction  
        :type reverseExtendDirection: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance for use in creating the guided extension surfaces 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleTolerance: 
    :type angleTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    """
    CheckSurfaces: bool = ...
    """
    Returns or sets  the option for checking the resulting guided extension surfaces for geometry issues 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckSurfaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CheckSurfaces`` 
    
    :param checkSurfaces: 
    :type checkSurfaces: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    """
    DistanceTolerance: float = ...
    """
    Returns or sets  the distance tolerance for use in creating the guided extension surfaces 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceTolerance`` 
    
    :param distanceTolerance: 
    :type distanceTolerance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    """
    ExtendLength: NXOpen.Expression = ...
    """
    Returns  the extend length for use in creating the guided extension surfaces 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtendLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    """
    GuideLineAngle1: NXOpen.Expression = ...
    """
    Returns  the rotation angle for the first guide line at one of the end points of the selected segment 
    
    <hr>
    
    Getter Method
    
    Signature ``GuideLineAngle1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR free_form_modeling ("FREE-FORM MODELING") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    """
    GuideLineAngle2: NXOpen.Expression = ...
    """
    Returns  the rotation angle for the second guide line at one of the end points of the selected segment 
    
    <hr>
    
    Getter Method
    
    Signature ``GuideLineAngle2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    """
    SegmentEdges: NXOpen.ScCollector = ...
    """
    Returns  the list of segment edges that represent a segment 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    """
    SheetEdges: NXOpen.Section = ...
    """
    Returns  the sheet edges of a sheet body 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: solid_modeling ("SOLIDS MODELING") OR nx_freeform_2 ("advanced freeform modeling") OR ug_mold_design ("UG MOLD") OR die_engineering ("DIE ENGINEERING")
    """
    Null: GuidedExtensionBuilder = ...  # unknown typename


class MoldInsertCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a MoldInsertCollection class   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateMoldInsertBuilder(self) -> MoldInsertBuilder:
        """
        Creates a MoldInsert builder  
        
        Signature ``CreateMoldInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.MoldInsertBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class PiercingInsertMiniToolsBuilderAssociationToolItemsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PiercingInsertMiniToolsBuilderAssociationToolItems():
    """
    Specifies the association tool operation option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AddintoList", " - "
       "RemovefromList", " - "
    """
    AddintoList = 0  # PiercingInsertMiniToolsBuilderAssociationToolItemsMemberType
    RemovefromList = 1  # PiercingInsertMiniToolsBuilderAssociationToolItemsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PiercingInsertMiniToolsBuilder(NXOpen.Builder):
    """
    Represents piercing insert mini tools builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreatePiercingInsertMiniToolsBuilder`
    
    Default values.
    
    ================  ============
    Property          Value
    ================  ============
    AssociationTool   AddintoList 
    ================  ============
    
    .. versionadded:: NX11.0.0
    """
    
    class AssociationToolItems():
        """
        Specifies the association tool operation option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AddintoList", " - "
           "RemovefromList", " - "
        """
        AddintoList = 0  # PiercingInsertMiniToolsBuilderAssociationToolItemsMemberType
        RemovefromList = 1  # PiercingInsertMiniToolsBuilderAssociationToolItemsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def UpdatePosition(self) -> None:
        """
        Update piercing inserts position when clicking the update piercing inserts button 
        
        Signature ``UpdatePosition()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def DeletePiercingInsert(self) -> None:
        """
        Delete piercing inserts which are selected.  
        
        Signature ``DeletePiercingInsert()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    AssociationTool: PiercingInsertMiniToolsBuilderAssociationToolItems = ...
    """
    Returns or sets  the association tool type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssociationTool`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.PiercingInsertMiniToolsBuilderAssociationToolItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociationTool`` 
    
    :param associationTool: 
    :type associationTool: :py:class:`NXOpen.Tooling.PiercingInsertMiniToolsBuilderAssociationToolItems` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    InsertsToDelete: NXOpen.SelectBodyList = ...
    """
    Returns  the inserts to delete.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsertsToDelete`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectAssociationInsert: NXOpen.SelectBodyList = ...
    """
    Returns  the selection of the inserts to create association.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAssociationInsert`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectAssociationScrap: NXOpen.SelectBodyList = ...
    """
    Returns  the selection of the scrap to create association.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAssociationScrap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectScrapOrInsert: NXOpen.SelectFaceList = ...
    """
    Returns  the select scrap or insert for association update.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectScrapOrInsert`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: PiercingInsertMiniToolsBuilder = ...  # unknown typename


class GeneralInsertBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralInsertBuilderTypes():
    """
    Specify the insert operation type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CreateInsert", " - "
       "EditInsert", " - "
       "DeleteInsert", " - "
    """
    CreateInsert = 0  # GeneralInsertBuilderTypesMemberType
    EditInsert = 1  # GeneralInsertBuilderTypesMemberType
    DeleteInsert = 2  # GeneralInsertBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralInsertBuilderParentOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralInsertBuilderParentOption():
    """
    Specify the part parent of insert part. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NoParent", " - "
    """
    NoParent = 0  # GeneralInsertBuilderParentOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralInsertBuilderGenerateMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralInsertBuilderGenerateMethod():
    """
    Specify the creation method of insert. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BoundingBox", " - "
       "UserDefined", " - "
    """
    BoundingBox = 0  # GeneralInsertBuilderGenerateMethodMemberType
    UserDefined = 1  # GeneralInsertBuilderGenerateMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralInsertBuilder(NXOpen.Builder):
    """
    General Insert Design Builder of PDW and EDW.  
    
    A Body is returned by this builder. 
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ProgressiveDieManager.CreateGeneralInsertBuilder`
    
    Default values.
    
    ========================  ======================================
    Property                  Value
    ========================  ======================================
    BoxOffset.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    Clearance.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    GenerateType              BoundingBox 
    ------------------------  --------------------------------------
    Height.Value              0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    NegativeX.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    NegativeY.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    NegativeZ.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    NormalRenameDialog        0 
    ------------------------  --------------------------------------
    ParentPart                NoParent 
    ------------------------  --------------------------------------
    PositiveX.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    PositiveY.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    PositiveZ.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    Radius.Value              0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    SettingWithoutFalseBody   0 
    ------------------------  --------------------------------------
    StartPosition.Value       0 (millimeters part), 0 (inches part) 
    ========================  ======================================
    
    .. versionadded:: NX10.0.0
    """
    
    class Types():
        """
        Specify the insert operation type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CreateInsert", " - "
           "EditInsert", " - "
           "DeleteInsert", " - "
        """
        CreateInsert = 0  # GeneralInsertBuilderTypesMemberType
        EditInsert = 1  # GeneralInsertBuilderTypesMemberType
        DeleteInsert = 2  # GeneralInsertBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParentOption():
        """
        Specify the part parent of insert part. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NoParent", " - "
        """
        NoParent = 0  # GeneralInsertBuilderParentOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GenerateMethod():
        """
        Specify the creation method of insert. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BoundingBox", " - "
           "UserDefined", " - "
        """
        BoundingBox = 0  # GeneralInsertBuilderGenerateMethodMemberType
        UserDefined = 1  # GeneralInsertBuilderGenerateMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateDatum(self) -> None:
        """
        Create datum on selected face 
        
        Signature ``CreateDatum()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddFromSpreadsheetAttributeList(self) -> None:
        """
        Move attribute from Attribute from Spreadsheet to Attribute of Object 
        
        Signature ``AddFromSpreadsheetAttributeList()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def NewAttribute(self) -> None:
        """
        Create new attribute in Attribute of Object 
        
        Signature ``NewAttribute()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteAttribute(self) -> None:
        """
        Remove attribute from Attribute of Object 
        
        Signature ``DeleteAttribute()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAttributeTitleName(self) -> 'list[str]':
        """
        Returns the title name of Attribute Of Object Tree list 
        
        Signature ``GetAttributeTitleName()`` 
        
        :returns: the list of title 
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAttributeTitleName(self, titleName: 'list[str]') -> None:
        """
        Sets the title name of Attribute Of Object Tree list 
        
        Signature ``SetAttributeTitleName(titleName)`` 
        
        :param titleName: the list of title 
        :type titleName: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def GetAttributeValueText(self) -> 'list[str]':
        """
        Returns the value text of Attribute Of Object Tree list 
        
        Signature ``GetAttributeValueText()`` 
        
        :returns: the list of title 
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAttributeValueText(self, valueText: 'list[str]') -> None:
        """
        Sets the title name of Attribute Of Object Tree list 
        
        Signature ``SetAttributeValueText(valueText)`` 
        
        :param valueText: the list of title 
        :type valueText: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def CreateUserDefinedInsert(self, refset: str) -> None:
        """
        Creates user defined insert.  
        
        The refset defines the insert which is TRUE or FALSE body 
        
        Signature ``CreateUserDefinedInsert(refset)`` 
        
        :param refset: 
        :type refset: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    BoxOffset: NXOpen.Expression = ...
    """
    Returns  the box offset 
    
    <hr>
    
    Getter Method
    
    Signature ``BoxOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Clearance: NXOpen.Expression = ...
    """
    Returns  the clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    GenerateType: GeneralInsertBuilderGenerateMethod = ...
    """
    Returns or sets  the generate type 
    
    <hr>
    
    Getter Method
    
    Signature ``GenerateType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.GeneralInsertBuilderGenerateMethod` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GenerateType`` 
    
    :param generateType: 
    :type generateType: :py:class:`NXOpen.Tooling.GeneralInsertBuilderGenerateMethod` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    InsertToDelete: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the insert to delete 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertToDelete`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    InsertToEdit: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the insert to edit 
    
    <hr>
    
    Getter Method
    
    Signature ``InsertToEdit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    NegativeX: NXOpen.Expression = ...
    """
    Returns  the negative x 
    
    <hr>
    
    Getter Method
    
    Signature ``NegativeX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    NegativeY: NXOpen.Expression = ...
    """
    Returns  the negative y 
    
    <hr>
    
    Getter Method
    
    Signature ``NegativeY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    NegativeZ: NXOpen.Expression = ...
    """
    Returns  the negative z 
    
    <hr>
    
    Getter Method
    
    Signature ``NegativeZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    NormalRenameDialog: bool = ...
    """
    Returns or sets  the normal rename dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalRenameDialog`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalRenameDialog`` 
    
    :param normalRenameDialog: 
    :type normalRenameDialog: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OrientationReferenceCSYS: NXOpen.Matrix3x3 = ...
    """
    Returns or sets  the reference CSYS orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationReferenceCSYS`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationReferenceCSYS`` 
    
    :param matrix: 
    :type matrix: :py:class:`NXOpen.Matrix3x3` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OuterProfile: NXOpen.Section = ...
    """
    Returns  the outer profile 
    
    <hr>
    
    Getter Method
    
    Signature ``OuterProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ParentPart: GeneralInsertBuilderParentOption = ...
    """
    Returns or sets  the parent part 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.GeneralInsertBuilderParentOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPart`` 
    
    :param parentPart: 
    :type parentPart: :py:class:`NXOpen.Tooling.GeneralInsertBuilderParentOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name of parent part 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPartName: 
    :type parentPartName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PositiveX: NXOpen.Expression = ...
    """
    Returns  the positive x 
    
    <hr>
    
    Getter Method
    
    Signature ``PositiveX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PositiveY: NXOpen.Expression = ...
    """
    Returns  the positive y 
    
    <hr>
    
    Getter Method
    
    Signature ``PositiveY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PositiveZ: NXOpen.Expression = ...
    """
    Returns  the positive z 
    
    <hr>
    
    Getter Method
    
    Signature ``PositiveZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ReverseInsertDirection: bool = ...
    """
    Returns or sets  the reverse insert direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseInsertDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseInsertDirection`` 
    
    :param reverseInsertDirection: 
    :type reverseInsertDirection: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectFace: NXOpen.SelectFaceList = ...
    """
    Returns  the select face 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SettingWithoutFalseBody: bool = ...
    """
    Returns or sets  the setting without false body 
    
    <hr>
    
    Getter Method
    
    Signature ``SettingWithoutFalseBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SettingWithoutFalseBody`` 
    
    :param settingWithoutFalseBody: 
    :type settingWithoutFalseBody: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StartPosition: NXOpen.Expression = ...
    """
    Returns  the start position 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Type: GeneralInsertBuilderTypes = ...
    """
    Returns or sets  the operation type of general insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.GeneralInsertBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.GeneralInsertBuilderTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UserDefinedExtrudeDirection: NXOpen.Vector3d = ...
    """
    Returns or sets  the user defined extrude direction 
    
    <hr>
    
    Getter Method
    
    Signature ``UserDefinedExtrudeDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UserDefinedExtrudeDirection`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Vector3d` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    WizardType: int = ...
    """
    Returns or sets  the wizard type 
    
    <hr>
    
    Getter Method
    
    Signature ``WizardType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WizardType`` 
    
    :param wizardType: 
    :type wizardType: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: GeneralInsertBuilder = ...  # unknown typename


class DirectUnfoldCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.DirectUnfoldBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDirectUnfoldBuilder(self) -> DirectUnfoldBuilder:
        """
        Creates create direct unfold builder  
        
        Signature ``CreateDirectUnfoldBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DirectUnfoldBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateDirectUnbendBuilder(self) -> DirectUnbendBuilder:
        """
        Creates direct unbend builder  
        
        Signature ``CreateDirectUnbendBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DirectUnbendBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class CoolingPatternCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a CoolingPattern Collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCoolingPatternBuilder(self) -> CoolingPatternBuilder:
        """
        Creates Tooling.  
        
        CoolingPatternBuilder  
        
        Signature ``CreateCoolingPatternBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CoolingPatternBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class SelectReuseLibraryListItemBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SelectReuseLibraryListItemBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SelectReuseLibraryListItemBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SelectReuseLibraryListItemBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SelectReuseLibraryListItemBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SelectReuseLibraryListItemBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SelectReuseLibraryListItemBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SelectReuseLibraryListItemBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SelectReuseLibraryListItemBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SelectReuseLibraryListItemBuilder, object2: SelectReuseLibraryListItemBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SelectReuseLibraryListItemBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Tooling.SelectReuseLibraryListItemBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectReuseLibraryListItemBuilderList = ...  # unknown typename


class BomBuilderTreeListMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BomBuilderTreeList():
    """
    Represents an index to components list type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bom", "A list includes components in BOM"
       "Hide", "A list includes hidden components"
    """
    Bom = 0  # BomBuilderTreeListMemberType
    Hide = 1  # BomBuilderTreeListMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BomBuilderShapeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BomBuilderShape():
    """
    Represents an index to the shape of stock size. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Rectangular", "The rectangular type."
       "Circular", "The circular type."
    """
    Rectangular = 0  # BomBuilderShapeMemberType
    Circular = 1  # BomBuilderShapeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BomBuilderCircleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BomBuilderCircle():
    """
    Represents an index to the base circle type of cylinder shape. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circumcircle", "Circumcircle."
       "InscribedCircle", "Inscribed circle."
    """
    Circumcircle = 0  # BomBuilderCircleMemberType
    InscribedCircle = 1  # BomBuilderCircleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BomBuilder(NXOpen.Builder):
    """
    Represents a Tooling::BomBuilder builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.BomCollection.CreateBomBuilder`
    
    Default values.
    
    =============  =====
    Property       Value
    =============  =====
    EnumCompList   Bom 
    =============  =====
    
    .. versionadded:: NX6.0.0
    """
    
    class TreeList():
        """
        Represents an index to components list type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bom", "A list includes components in BOM"
           "Hide", "A list includes hidden components"
        """
        Bom = 0  # BomBuilderTreeListMemberType
        Hide = 1  # BomBuilderTreeListMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Shape():
        """
        Represents an index to the shape of stock size. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Rectangular", "The rectangular type."
           "Circular", "The circular type."
        """
        Rectangular = 0  # BomBuilderShapeMemberType
        Circular = 1  # BomBuilderShapeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Circle():
        """
        Represents an index to the base circle type of cylinder shape. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circumcircle", "Circumcircle."
           "InscribedCircle", "Inscribed circle."
        """
        Circumcircle = 0  # BomBuilderCircleMemberType
        InscribedCircle = 1  # BomBuilderCircleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    EnumCompList: BomBuilderTreeList = ...
    """
    Returns or sets  the tree list shows which kind of components should be included in 
    
    <hr>
    
    Getter Method
    
    Signature ``EnumCompList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BomBuilderTreeList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnumCompList`` 
    
    :param enumCompList: 
    :type enumCompList: :py:class:`NXOpen.Tooling.BomBuilderTreeList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    EnumCylinderType: BomBuilderCircle = ...
    """
    Returns or sets  the cylinder type may be used to generate a cylinder for the stock size 
    
    <hr>
    
    Getter Method
    
    Signature ``EnumCylinderType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BomBuilderCircle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnumCylinderType`` 
    
    :param enumCylinderType: 
    :type enumCylinderType: :py:class:`NXOpen.Tooling.BomBuilderCircle` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    EnumStockType: BomBuilderShape = ...
    """
    Returns or sets  the stock shape will be generated, it can be a box or cylinder 
    
    <hr>
    
    Getter Method
    
    Signature ``EnumStockType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BomBuilderShape` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnumStockType`` 
    
    :param enumStockType: 
    :type enumStockType: :py:class:`NXOpen.Tooling.BomBuilderShape` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    IntegerPrecision: int = ...
    """
    Returns or sets  the size precision for the stock 
    
    <hr>
    
    Getter Method
    
    Signature ``IntegerPrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntegerPrecision`` 
    
    :param integerPrecision: 
    :type integerPrecision: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SelectComponent: NXOpen.SelectPartList = ...
    """
    Returns  the select component needed to get stocksize
    
    <hr>
    
    Getter Method
    
    Signature ``SelectComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectPartList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: BomBuilder = ...  # unknown typename


class ShimInnerProfileSetBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ShimInnerProfileSetBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ShimInnerProfileSetBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ShimInnerProfileSetBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ShimInnerProfileSetBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ShimInnerProfileSetBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ShimInnerProfileSetBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ShimInnerProfileSetBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ShimInnerProfileSetBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ShimInnerProfileSetBuilder, object2: ShimInnerProfileSetBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ShimInnerProfileSetBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Tooling.ShimInnerProfileSetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ShimInnerProfileSetBuilderList = ...  # unknown typename


class InsertAuxiliaryBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InsertAuxiliaryBuilderTypes():
    """
    Specifies the insert auxiliary type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "InsertFlange", "insert flange"
       "InsertRamp", "insert ramp"
       "InsertHeel", "insert heel"
       "PunchMount", "punch mount"
       "Tools", "tools"
    """
    InsertFlange = 0  # InsertAuxiliaryBuilderTypesMemberType
    InsertRamp = 1  # InsertAuxiliaryBuilderTypesMemberType
    InsertHeel = 2  # InsertAuxiliaryBuilderTypesMemberType
    PunchMount = 3  # InsertAuxiliaryBuilderTypesMemberType
    Tools = 4  # InsertAuxiliaryBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InsertAuxiliaryBuilderShankShapeTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InsertAuxiliaryBuilderShankShapeTypes():
    """
    Specifies the shank shape. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Flange", "flange"
       "Ramp", "ramp"
       "Heel", "heel"
    """
    Flange = 0  # InsertAuxiliaryBuilderShankShapeTypesMemberType
    Ramp = 1  # InsertAuxiliaryBuilderShankShapeTypesMemberType
    Heel = 2  # InsertAuxiliaryBuilderShankShapeTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InsertAuxiliaryBuilderRampStepsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InsertAuxiliaryBuilderRampStepsType():
    """
    Specifies the ramp steps. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AddMaterial", " - "
       "CreateCurvesAndDivideFace", " - "
       "CreateRamp", " - "
       "DeleteRamp", " - "
    """
    AddMaterial = 0  # InsertAuxiliaryBuilderRampStepsTypeMemberType
    CreateCurvesAndDivideFace = 1  # InsertAuxiliaryBuilderRampStepsTypeMemberType
    CreateRamp = 2  # InsertAuxiliaryBuilderRampStepsTypeMemberType
    DeleteRamp = 3  # InsertAuxiliaryBuilderRampStepsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InsertAuxiliaryBuilderUseFaceOrSketchToRevolveMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InsertAuxiliaryBuilderUseFaceOrSketchToRevolve():
    """
    Specifies the use face or sketch to revolve.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Face", " - "
       "Sketch", " - "
    """
    Face = 0  # InsertAuxiliaryBuilderUseFaceOrSketchToRevolveMemberType
    Sketch = 1  # InsertAuxiliaryBuilderUseFaceOrSketchToRevolveMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InsertAuxiliaryBuilderDesignToolOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InsertAuxiliaryBuilderDesignToolOption():
    """
    Specifies the design tool option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Copy", "copy"
       "Array", "array"
       "Delete", "delete"
    """
    Copy = 0  # InsertAuxiliaryBuilderDesignToolOptionMemberType
    Array = 1  # InsertAuxiliaryBuilderDesignToolOptionMemberType
    Delete = 2  # InsertAuxiliaryBuilderDesignToolOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InsertAuxiliaryBuilderRectOperationOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InsertAuxiliaryBuilderRectOperationOption():
    """
    Specifies the rectangular array option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "create"
       "Edit", "edit"
       "Delete", "delete"
    """
    Create = 0  # InsertAuxiliaryBuilderRectOperationOptionMemberType
    Edit = 1  # InsertAuxiliaryBuilderRectOperationOptionMemberType
    Delete = 2  # InsertAuxiliaryBuilderRectOperationOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InsertAuxiliaryBuilderCircOperationTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InsertAuxiliaryBuilderCircOperationTypes():
    """
    Specifies the options of circular array. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "create"
       "Edit", "edit"
       "Delete", "delete"
    """
    Create = 0  # InsertAuxiliaryBuilderCircOperationTypesMemberType
    Edit = 1  # InsertAuxiliaryBuilderCircOperationTypesMemberType
    Delete = 2  # InsertAuxiliaryBuilderCircOperationTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InsertAuxiliaryBuilder(NXOpen.Builder):
    """
    PDW insert auxiliary builder to design various auxiliaries of insert group   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.InsertAuxiliaryCollection.CreateInsertAuxiliaryBuilder`
    
    Default values.
    
    ==========================  ======================================
    Property                    Value
    ==========================  ======================================
    BottomPlateClearance        0 
    --------------------------  --------------------------------------
    CircDeleteAllComponents     0 
    --------------------------  --------------------------------------
    CircularOperation           Create 
    --------------------------  --------------------------------------
    ClearanceValue              1 
    --------------------------  --------------------------------------
    DesignTool                  Copy 
    --------------------------  --------------------------------------
    FalseBodyHeight.Value       0 (millimeters part), 0 (inches part) 
    --------------------------  --------------------------------------
    HeelHeight                  5 
    --------------------------  --------------------------------------
    HeelLength                  10 
    --------------------------  --------------------------------------
    HeelRadian                  1 
    --------------------------  --------------------------------------
    HeelWidth                   5 
    --------------------------  --------------------------------------
    OffsetAngle                 0 
    --------------------------  --------------------------------------
    OffsetX                     0 
    --------------------------  --------------------------------------
    OffsetY                     0 
    --------------------------  --------------------------------------
    PunchPlateClearance         0 
    --------------------------  --------------------------------------
    PunchShankParaC             1 
    --------------------------  --------------------------------------
    PunchShankParaFL            45 
    --------------------------  --------------------------------------
    PunchShankParaL1            6 
    --------------------------  --------------------------------------
    PunchShankParaLength        8 
    --------------------------  --------------------------------------
    PunchShankParaPL            40 
    --------------------------  --------------------------------------
    PunchShankParaR             13 
    --------------------------  --------------------------------------
    PunchShankParaWidth         8 
    --------------------------  --------------------------------------
    RampShankHeight.Value       0 (millimeters part), 0 (inches part) 
    --------------------------  --------------------------------------
    RampSteps                   AddMaterial 
    --------------------------  --------------------------------------
    RectDeleteAllComponents     0 
    --------------------------  --------------------------------------
    RectangularOperation        Create 
    --------------------------  --------------------------------------
    ShankShape                  Flange 
    --------------------------  --------------------------------------
    StripperPlateClearance      0 
    --------------------------  --------------------------------------
    TotalAlongX                 1 
    --------------------------  --------------------------------------
    TotalAlongY                 1 
    --------------------------  --------------------------------------
    TotalNumber                 1 
    --------------------------  --------------------------------------
    UseBottomPlateClearance     0 
    --------------------------  --------------------------------------
    UseClearance                1 
    --------------------------  --------------------------------------
    UseFaceOrSketch             Face 
    --------------------------  --------------------------------------
    UsePunchPlateClearance      0 
    --------------------------  --------------------------------------
    UseStripperPlateClearance   0 
    ==========================  ======================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Specifies the insert auxiliary type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "InsertFlange", "insert flange"
           "InsertRamp", "insert ramp"
           "InsertHeel", "insert heel"
           "PunchMount", "punch mount"
           "Tools", "tools"
        """
        InsertFlange = 0  # InsertAuxiliaryBuilderTypesMemberType
        InsertRamp = 1  # InsertAuxiliaryBuilderTypesMemberType
        InsertHeel = 2  # InsertAuxiliaryBuilderTypesMemberType
        PunchMount = 3  # InsertAuxiliaryBuilderTypesMemberType
        Tools = 4  # InsertAuxiliaryBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShankShapeTypes():
        """
        Specifies the shank shape. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Flange", "flange"
           "Ramp", "ramp"
           "Heel", "heel"
        """
        Flange = 0  # InsertAuxiliaryBuilderShankShapeTypesMemberType
        Ramp = 1  # InsertAuxiliaryBuilderShankShapeTypesMemberType
        Heel = 2  # InsertAuxiliaryBuilderShankShapeTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RampStepsType():
        """
        Specifies the ramp steps. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AddMaterial", " - "
           "CreateCurvesAndDivideFace", " - "
           "CreateRamp", " - "
           "DeleteRamp", " - "
        """
        AddMaterial = 0  # InsertAuxiliaryBuilderRampStepsTypeMemberType
        CreateCurvesAndDivideFace = 1  # InsertAuxiliaryBuilderRampStepsTypeMemberType
        CreateRamp = 2  # InsertAuxiliaryBuilderRampStepsTypeMemberType
        DeleteRamp = 3  # InsertAuxiliaryBuilderRampStepsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class UseFaceOrSketchToRevolve():
        """
        Specifies the use face or sketch to revolve.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Face", " - "
           "Sketch", " - "
        """
        Face = 0  # InsertAuxiliaryBuilderUseFaceOrSketchToRevolveMemberType
        Sketch = 1  # InsertAuxiliaryBuilderUseFaceOrSketchToRevolveMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DesignToolOption():
        """
        Specifies the design tool option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Copy", "copy"
           "Array", "array"
           "Delete", "delete"
        """
        Copy = 0  # InsertAuxiliaryBuilderDesignToolOptionMemberType
        Array = 1  # InsertAuxiliaryBuilderDesignToolOptionMemberType
        Delete = 2  # InsertAuxiliaryBuilderDesignToolOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RectOperationOption():
        """
        Specifies the rectangular array option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "create"
           "Edit", "edit"
           "Delete", "delete"
        """
        Create = 0  # InsertAuxiliaryBuilderRectOperationOptionMemberType
        Edit = 1  # InsertAuxiliaryBuilderRectOperationOptionMemberType
        Delete = 2  # InsertAuxiliaryBuilderRectOperationOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CircOperationTypes():
        """
        Specifies the options of circular array. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "create"
           "Edit", "edit"
           "Delete", "delete"
        """
        Create = 0  # InsertAuxiliaryBuilderCircOperationTypesMemberType
        Edit = 1  # InsertAuxiliaryBuilderCircOperationTypesMemberType
        Delete = 2  # InsertAuxiliaryBuilderCircOperationTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DesignMountHead(self) -> None:
        """
        Design mount head for insert.  
        
        Signature ``DesignMountHead()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    BottomPlateClearance: float = ...
    """
    Returns or sets  the bottom plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``BottomPlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BottomPlateClearance`` 
    
    :param bottomPlateClr: 
    :type bottomPlateClr: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CircDeleteAllComponents: bool = ...
    """
    Returns or sets  the option to delete all components in circular array.  
    
    <hr>
    
    Getter Method
    
    Signature ``CircDeleteAllComponents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircDeleteAllComponents`` 
    
    :param circDeleteAllComponents: 
    :type circDeleteAllComponents: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CircularInsert: NXOpen.SelectBody = ...
    """
    Returns  the insert to do circular array.  
    
    <hr>
    
    Getter Method
    
    Signature ``CircularInsert`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CircularOperation: InsertAuxiliaryBuilderCircOperationTypes = ...
    """
    Returns or sets  the circular array operation.  
    
    <hr>
    
    Getter Method
    
    Signature ``CircularOperation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderCircOperationTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircularOperation`` 
    
    :param circOperationType: 
    :type circOperationType: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderCircOperationTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CircularVector: NXOpen.Direction = ...
    """
    Returns or sets  the specified vector for defining circular array axis.  
    
    <hr>
    
    Getter Method
    
    Signature ``CircularVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircularVector`` 
    
    :param circSpecifyVector: 
    :type circSpecifyVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ClearanceValue: float = ...
    """
    Returns or sets  the clearance value.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClearanceValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClearanceValue`` 
    
    :param clearanceValue: 
    :type clearanceValue: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ControlPoint: NXOpen.Point = ...
    """
    Returns or sets  the control point for the copy operation.  
    
    <hr>
    
    Getter Method
    
    Signature ``ControlPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ControlPoint`` 
    
    :param specifyControlPoint: 
    :type specifyControlPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CopySelectInsert: NXOpen.SelectBodyList = ...
    """
    Returns  the insert to be copied.  
    
    <hr>
    
    Getter Method
    
    Signature ``CopySelectInsert`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CreateCurvesToDivideFace: NXOpen.Section = ...
    """
    Returns  the curves created to divid the face 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateCurvesToDivideFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    DesignTool: InsertAuxiliaryBuilderDesignToolOption = ...
    """
    Returns or sets  the design tool.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignTool`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderDesignToolOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignTool`` 
    
    :param designTool: 
    :type designTool: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderDesignToolOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DestinationPoint: NXOpen.Point = ...
    """
    Returns or sets  the destination point for the copy operation.  
    
    <hr>
    
    Getter Method
    
    Signature ``DestinationPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DestinationPoint`` 
    
    :param specifyDestinationPoint: 
    :type specifyDestinationPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FaceForRamp: NXOpen.ScCollector = ...
    """
    Returns  the sweep face for editing ramp.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceForRamp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    FalseBodyHeight: NXOpen.Expression = ...
    """
    Returns  the false body height.  
    
    <hr>
    
    Getter Method
    
    Signature ``FalseBodyHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HeelHeight: float = ...
    """
    Returns or sets  the heel height.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeelHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeelHeight`` 
    
    :param heelHeight: 
    :type heelHeight: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HeelLength: float = ...
    """
    Returns or sets  the heel length.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeelLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeelLength`` 
    
    :param heelLength: 
    :type heelLength: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HeelRadian: float = ...
    """
    Returns or sets  the heel radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeelRadian`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeelRadian`` 
    
    :param heelRadian: 
    :type heelRadian: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HeelWidth: float = ...
    """
    Returns or sets  the heel width.  
    
    <hr>
    
    Getter Method
    
    Signature ``HeelWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HeelWidth`` 
    
    :param heelWidth: 
    :type heelWidth: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InsertEdge: NXOpen.SelectEdge = ...
    """
    Returns  the insert edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsertEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InsertShankFace: NXOpen.ScCollector = ...
    """
    Returns  the insert shank face.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsertShankFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    InsertsToDelete: NXOpen.SelectBodyList = ...
    """
    Returns  the insert objects to be deleted.  
    
    <hr>
    
    Getter Method
    
    Signature ``InsertsToDelete`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MountPunchEdge: NXOpen.SelectEdge = ...
    """
    Returns  the punch edge to place the mount.  
    
    <hr>
    
    Getter Method
    
    Signature ``MountPunchEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MountPunchFace: NXOpen.ScCollector = ...
    """
    Returns  the punch face to place the mount.  
    
    <hr>
    
    Getter Method
    
    Signature ``MountPunchFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OffsetAngle: float = ...
    """
    Returns or sets  the offset angle of circular array.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetAngle`` 
    
    :param offsetAngle: 
    :type offsetAngle: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OffsetX: float = ...
    """
    Returns or sets  the offset value along X.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetX`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetX`` 
    
    :param offsetX: 
    :type offsetX: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    OffsetY: float = ...
    """
    Returns or sets  the offset value along Y.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetY`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetY`` 
    
    :param offsetY: 
    :type offsetY: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PointForRamp: NXOpen.Point = ...
    """
    Returns or sets  the tangent point for the sweep guide curve 
    
    <hr>
    
    Getter Method
    
    Signature ``PointForRamp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PointForRamp`` 
    
    :param pointForRamp: 
    :type pointForRamp: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Punch: NXOpen.SelectBody = ...
    """
    Returns  the selected punch.  
    
    <hr>
    
    Getter Method
    
    Signature ``Punch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchEdge: NXOpen.SelectEdge = ...
    """
    Returns  the punch edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchEdge`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdge` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchPlateClearance: float = ...
    """
    Returns or sets  the punch plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchPlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchPlateClearance`` 
    
    :param punchPlateClr: 
    :type punchPlateClr: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchShankFace: NXOpen.ScCollector = ...
    """
    Returns  the punch shank.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchShankFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchShankParaC: float = ...
    """
    Returns or sets  the punch shank parameter for clearance between true body and false body.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchShankParaC`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchShankParaC`` 
    
    :param punchShankParaC: 
    :type punchShankParaC: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchShankParaFL: float = ...
    """
    Returns or sets  the punch shank parameter false body height.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchShankParaFL`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchShankParaFL`` 
    
    :param punchShankParaFL: 
    :type punchShankParaFL: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchShankParaL1: float = ...
    """
    Returns or sets  the punch shank parameter for true body and false body length.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchShankParaL1`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchShankParaL1`` 
    
    :param punchShankParaL1: 
    :type punchShankParaL1: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchShankParaLength: float = ...
    """
    Returns or sets  the punch shank parameter length.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchShankParaLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchShankParaLength`` 
    
    :param punchShankParaL: 
    :type punchShankParaL: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchShankParaPL: float = ...
    """
    Returns or sets  the punch shank parameter for true body height.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchShankParaPL`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchShankParaPL`` 
    
    :param punchShankParaPL: 
    :type punchShankParaPL: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchShankParaR: float = ...
    """
    Returns or sets  the punch shank parameter for true body radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchShankParaR`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchShankParaR`` 
    
    :param punchShankParaR: 
    :type punchShankParaR: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PunchShankParaWidth: float = ...
    """
    Returns or sets  the punch shank parameter width.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchShankParaWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PunchShankParaWidth`` 
    
    :param punchShankParaW: 
    :type punchShankParaW: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RadiusForRamp: NXOpen.Expression = ...
    """
    Returns  the the sweep guide curve radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``RadiusForRamp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RampShankHeight: NXOpen.Expression = ...
    """
    Returns  the ramp shank height.  
    
    <hr>
    
    Getter Method
    
    Signature ``RampShankHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RampSteps: InsertAuxiliaryBuilderRampStepsType = ...
    """
    Returns or sets  the ramp steps 
    
    <hr>
    
    Getter Method
    
    Signature ``RampSteps`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderRampStepsType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RampSteps`` 
    
    :param rampSteps: 
    :type rampSteps: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderRampStepsType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RectDeleteAllComponents: bool = ...
    """
    Returns or sets  the option to delete all components in rectangular array.  
    
    <hr>
    
    Getter Method
    
    Signature ``RectDeleteAllComponents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RectDeleteAllComponents`` 
    
    :param rectDeleteAllComponents: 
    :type rectDeleteAllComponents: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RectangularInsert: NXOpen.SelectBody = ...
    """
    Returns  the insert to do rectangular array .  
    
    <hr>
    
    Getter Method
    
    Signature ``RectangularInsert`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RectangularOperation: InsertAuxiliaryBuilderRectOperationOption = ...
    """
    Returns or sets  the rectangular array operation.  
    
    <hr>
    
    Getter Method
    
    Signature ``RectangularOperation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderRectOperationOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RectangularOperation`` 
    
    :param rectOperationType: 
    :type rectOperationType: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderRectOperationOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RectangularXVector: NXOpen.Direction = ...
    """
    Returns or sets  the X vector for rectangular array.  
    
    <hr>
    
    Getter Method
    
    Signature ``RectangularXVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RectangularXVector`` 
    
    :param rectSpecifyVectorX: 
    :type rectSpecifyVectorX: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RectangularYVector: NXOpen.Direction = ...
    """
    Returns or sets  the Y vector for rectangular array.  
    
    <hr>
    
    Getter Method
    
    Signature ``RectangularYVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RectangularYVector`` 
    
    :param rectSpecifyVectorY: 
    :type rectSpecifyVectorY: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectFaceToDivide: NXOpen.SelectFace = ...
    """
    Returns  the select face to divide 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFaceToDivide`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectInsertToDeleteRamp: NXOpen.SelectBody = ...
    """
    Returns  the select insert to delete ramp 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectInsertToDeleteRamp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectRampFeature: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select ramp feature 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectRampFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectShankProfile: NXOpen.Section = ...
    """
    Returns  the selected shank profile.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectShankProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ShankShape: InsertAuxiliaryBuilderShankShapeTypes = ...
    """
    Returns or sets  the shank shape.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShankShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderShankShapeTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShankShape`` 
    
    :param shankShape: 
    :type shankShape: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderShankShapeTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ShanksToDelete: NXOpen.ScCollector = ...
    """
    Returns  the faces of those to be deleted shanks.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShanksToDelete`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SketchToRevolve: NXOpen.Section = ...
    """
    Returns  the sketch to revolve 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchToRevolve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    StripperPlateClearance: float = ...
    """
    Returns or sets  the stripper plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``StripperPlateClearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StripperPlateClearance`` 
    
    :param stripperPlateClr: 
    :type stripperPlateClr: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TotalAlongX: int = ...
    """
    Returns or sets  the total number of insert along X.  
    
    <hr>
    
    Getter Method
    
    Signature ``TotalAlongX`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TotalAlongX`` 
    
    :param totalNumberX: 
    :type totalNumberX: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TotalAlongY: int = ...
    """
    Returns or sets  the total number of insert along Y.  
    
    <hr>
    
    Getter Method
    
    Signature ``TotalAlongY`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TotalAlongY`` 
    
    :param totalNumberY: 
    :type totalNumberY: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TotalNumber: int = ...
    """
    Returns or sets  the total number of insert for circular array.  
    
    <hr>
    
    Getter Method
    
    Signature ``TotalNumber`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TotalNumber`` 
    
    :param totalNumber: 
    :type totalNumber: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: InsertAuxiliaryBuilderTypes = ...
    """
    Returns or sets  the insert auxiliary type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseBottomPlateClearance: bool = ...
    """
    Returns or sets  the option to use bottoming plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseBottomPlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseBottomPlateClearance`` 
    
    :param useBPClearance: 
    :type useBPClearance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseClearance: bool = ...
    """
    Returns or sets  the option to use clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseClearance`` 
    
    :param useClearance: 
    :type useClearance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseFaceOrSketch: InsertAuxiliaryBuilderUseFaceOrSketchToRevolve = ...
    """
    Returns or sets  the use face or sketch option 
    
    <hr>
    
    Getter Method
    
    Signature ``UseFaceOrSketch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderUseFaceOrSketchToRevolve` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseFaceOrSketch`` 
    
    :param useFaceOrSketch: 
    :type useFaceOrSketch: :py:class:`NXOpen.Tooling.InsertAuxiliaryBuilderUseFaceOrSketchToRevolve` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePunchPlateClearance: bool = ...
    """
    Returns or sets  the option to use punch plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePunchPlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePunchPlateClearance`` 
    
    :param usePPClearance: 
    :type usePPClearance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    UseStripperPlateClearance: bool = ...
    """
    Returns or sets  the option to stripper plate clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseStripperPlateClearance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseStripperPlateClearance`` 
    
    :param useSPClearance: 
    :type useSPClearance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    VectorForRamp: NXOpen.Direction = ...
    """
    Returns or sets  the vector to determintate the datum plane normal that the sweep guide curve in.  
    
    <hr>
    
    Getter Method
    
    Signature ``VectorForRamp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VectorForRamp`` 
    
    :param vectorForRamp: 
    :type vectorForRamp: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: InsertAuxiliaryBuilder = ...  # unknown typename


class DieDesignSettingBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.DieDesignSettingBuilder`
    This class is for Die Design Setting UI
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.DieDesignSettingCollection.CreateDieDesignSettingBuilder`
    
    Default values.
    
    =========================  =====
    Property                   Value
    =========================  =====
    RoundoffInsertXYPosition   1 
    =========================  =====
    
    .. versionadded:: NX7.5.0
    """
    
    def SetParameters(self, paraNames: 'list[str]', paraValues: 'list[str]') -> None:
        """
        Set the parameter number, names and values in the tree list into builder attribute.  
        
        Signature ``SetParameters(paraNames, paraValues)`` 
        
        :param paraNames:  an array of names  
        :type paraNames: list of str 
        :param paraValues:  an array of values  
        :type paraValues: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    RoundoffInsertXYPosition: bool = ...
    """
    Returns or sets  the option to roundoff insert X and Y position 
    
    <hr>
    
    Getter Method
    
    Signature ``RoundoffInsertXYPosition`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RoundoffInsertXYPosition`` 
    
    :param roundoffInsertXYPosition: 
    :type roundoffInsertXYPosition: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: DieDesignSettingBuilder = ...  # unknown typename


class DieBaseCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.DieBaseCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDieBaseBuilder(self) -> DieBaseBuilder:
        """
        Creates Die Base builder.  
        
        Signature ``CreateDieBaseBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.DieBaseBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class BurringInsertBuilderBurringDirectionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BurringInsertBuilderBurringDirections():
    """
    Specifies the burring direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BurringUpwards", "design the burring upwards"
       "BurringDownwards", "design the burring downwards"
    """
    BurringUpwards = 0  # BurringInsertBuilderBurringDirectionsMemberType
    BurringDownwards = 1  # BurringInsertBuilderBurringDirectionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BurringInsertBuilderDesignOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BurringInsertBuilderDesignOptions():
    """
    Specifies the design type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BurringPunch", "design the burring punch"
       "BurringDie", "design the burring die"
    """
    BurringPunch = 0  # BurringInsertBuilderDesignOptionsMemberType
    BurringDie = 1  # BurringInsertBuilderDesignOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BurringInsertBuilderCircularOrNonCircularTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BurringInsertBuilderCircularOrNonCircularType():
    """
    Specifies the circular or non-circular type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circular", " - "
       "NonCircular", " - "
    """
    Circular = 0  # BurringInsertBuilderCircularOrNonCircularTypeMemberType
    NonCircular = 1  # BurringInsertBuilderCircularOrNonCircularTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BurringInsertBuilderParentTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BurringInsertBuilderParentTypes():
    """
    Specifies the parent part type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Control", "use PDW project's control part as parent part"
       "DieBase", "use PDW project's die base part as parent part"
       "SubDie", "use PDW project's sub-die base as parent part"
       "Die", "use PDW project's die part as parent part"
    """
    Control = 0  # BurringInsertBuilderParentTypesMemberType
    DieBase = 1  # BurringInsertBuilderParentTypesMemberType
    SubDie = 2  # BurringInsertBuilderParentTypesMemberType
    Die = 3  # BurringInsertBuilderParentTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BurringInsertBuilderBurringPunchTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BurringInsertBuilderBurringPunchTypes():
    """
    Specifies the burring punch type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "First", "use first type"
       "Second", "use second type"
       "Third", "use third type"
    """
    First = 0  # BurringInsertBuilderBurringPunchTypesMemberType
    Second = 1  # BurringInsertBuilderBurringPunchTypesMemberType
    Third = 2  # BurringInsertBuilderBurringPunchTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BurringInsertBuilder(NXOpen.Builder):
    """
    Progressive Die Wizard  builder to design burring punch and die insert   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.BurringInsertCollection.CreateBurringInsertBuilder`
    
    Default values.
    
    ========================  ======================================
    Property                  Value
    ========================  ======================================
    ArcRadius.Value           0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    BurringDirection          BurringDownwards 
    ------------------------  --------------------------------------
    CircularOrNonCircular     Circular 
    ------------------------  --------------------------------------
    DesignOption              BurringPunch 
    ------------------------  --------------------------------------
    EndValue.Value            0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    ParentPart                DieBase 
    ------------------------  --------------------------------------
    PlateClearanceFirst       0 
    ------------------------  --------------------------------------
    PlateClearanceSecond      0 
    ------------------------  --------------------------------------
    PlateClearanceThird       0 
    ------------------------  --------------------------------------
    PunchHeadHeight.Value     0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    StartValue.Value          0 (millimeters part), 0 (inches part) 
    ------------------------  --------------------------------------
    UsePlateClearanceFirst    0 
    ------------------------  --------------------------------------
    UsePlateClearanceSecond   0 
    ------------------------  --------------------------------------
    UsePlateClearanceThird    0 
    ========================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class BurringDirections():
        """
        Specifies the burring direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BurringUpwards", "design the burring upwards"
           "BurringDownwards", "design the burring downwards"
        """
        BurringUpwards = 0  # BurringInsertBuilderBurringDirectionsMemberType
        BurringDownwards = 1  # BurringInsertBuilderBurringDirectionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DesignOptions():
        """
        Specifies the design type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BurringPunch", "design the burring punch"
           "BurringDie", "design the burring die"
        """
        BurringPunch = 0  # BurringInsertBuilderDesignOptionsMemberType
        BurringDie = 1  # BurringInsertBuilderDesignOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CircularOrNonCircularType():
        """
        Specifies the circular or non-circular type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circular", " - "
           "NonCircular", " - "
        """
        Circular = 0  # BurringInsertBuilderCircularOrNonCircularTypeMemberType
        NonCircular = 1  # BurringInsertBuilderCircularOrNonCircularTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParentTypes():
        """
        Specifies the parent part type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Control", "use PDW project's control part as parent part"
           "DieBase", "use PDW project's die base part as parent part"
           "SubDie", "use PDW project's sub-die base as parent part"
           "Die", "use PDW project's die part as parent part"
        """
        Control = 0  # BurringInsertBuilderParentTypesMemberType
        DieBase = 1  # BurringInsertBuilderParentTypesMemberType
        SubDie = 2  # BurringInsertBuilderParentTypesMemberType
        Die = 3  # BurringInsertBuilderParentTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BurringPunchTypes():
        """
        Specifies the burring punch type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "First", "use first type"
           "Second", "use second type"
           "Third", "use third type"
        """
        First = 0  # BurringInsertBuilderBurringPunchTypesMemberType
        Second = 1  # BurringInsertBuilderBurringPunchTypesMemberType
        Third = 2  # BurringInsertBuilderBurringPunchTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CreateNewComponent(self, parentTag: NXOpen.TaggedObject, origin: NXOpen.Point3d) -> NXOpen.TaggedObject:
        """
        Create new component.  
        
        Signature ``CreateNewComponent(parentTag, origin)`` 
        
        :param parentTag:  the parent part  
        :type parentTag: :py:class:`NXOpen.TaggedObject` 
        :param origin:  the origin point to add  
        :type origin: :py:class:`NXOpen.Point3d` 
        :returns:  the new part instance  
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RevolveSketchedCurve(self) -> None:
        """
        Extract burring region.  
        
        Signature ``RevolveSketchedCurve()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeletePunchOrDieComponent(self) -> None:
        """
        The action to delete the selected punch or die component 
        
        Signature ``DeletePunchOrDieComponent()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    ArcRadius: NXOpen.Expression = ...
    """
    Returns  the arc radius value.  
    
    <hr>
    
    Getter Method
    
    Signature ``ArcRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BlankProfile: NXOpen.Section = ...
    """
    Returns  the blank profile to extrude the punch or die.  
    
    <hr>
    
    Getter Method
    
    Signature ``BlankProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    BurringDirection: BurringInsertBuilderBurringDirections = ...
    """
    Returns or sets  the burring direction downwards or upwards.  
    
    <hr>
    
    Getter Method
    
    Signature ``BurringDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BurringInsertBuilderBurringDirections` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BurringDirection`` 
    
    :param burringDirection: 
    :type burringDirection: :py:class:`NXOpen.Tooling.BurringInsertBuilderBurringDirections` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    BurringPunchType: BurringInsertBuilderBurringPunchTypes = ...
    """
    Returns or sets  the burring punch type to create.  
    
    <hr>
    
    Getter Method
    
    Signature ``BurringPunchType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BurringInsertBuilderBurringPunchTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BurringPunchType`` 
    
    :param burringPunchType: 
    :type burringPunchType: :py:class:`NXOpen.Tooling.BurringInsertBuilderBurringPunchTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    CircularOrNonCircular: BurringInsertBuilderCircularOrNonCircularType = ...
    """
    Returns or sets  the circular or non circular type.  
    
    <hr>
    
    Getter Method
    
    Signature ``CircularOrNonCircular`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BurringInsertBuilderCircularOrNonCircularType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CircularOrNonCircular`` 
    
    :param circularOrNonCircular: 
    :type circularOrNonCircular: :py:class:`NXOpen.Tooling.BurringInsertBuilderCircularOrNonCircularType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DesignOption: BurringInsertBuilderDesignOptions = ...
    """
    Returns or sets  the design option to design punch or die.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BurringInsertBuilderDesignOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignOption`` 
    
    :param designOption: 
    :type designOption: :py:class:`NXOpen.Tooling.BurringInsertBuilderDesignOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EndValue: NXOpen.Expression = ...
    """
    Returns  the end height value of blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ParentPart: BurringInsertBuilderParentTypes = ...
    """
    Returns or sets  the parent part to create blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.BurringInsertBuilderParentTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPart`` 
    
    :param parentPart: 
    :type parentPart: :py:class:`NXOpen.Tooling.BurringInsertBuilderParentTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ParentPartName: str = ...
    """
    Returns or sets  the parent part name to create blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentPartName`` 
    
    :returns:  Retruns parent part name  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentPartName`` 
    
    :param parentPart:  Specifies the parent part name  
    :type parentPart: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceFirst: float = ...
    """
    Returns or sets  the value of plate clearance first.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceFirst`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceFirst`` 
    
    :param plateClearanceFirst: 
    :type plateClearanceFirst: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceSecond: float = ...
    """
    Returns or sets  the value of plate clearance second.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceSecond`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceSecond`` 
    
    :param plateClearanceSecond: 
    :type plateClearanceSecond: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PlateClearanceThird: float = ...
    """
    Returns or sets  the value of plate clearance third.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlateClearanceThird`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlateClearanceThird`` 
    
    :param plateClearanceThird: 
    :type plateClearanceThird: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    PunchHeadHeight: NXOpen.Expression = ...
    """
    Returns  the punch head height value of blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``PunchHeadHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    PunchOrDieToEdit: NXOpen.SelectBody = ...
    """
    Returns  the punch or die to edit 
    
    <hr>
    
    Getter Method
    
    Signature ``PunchOrDieToEdit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    RenameComponent: bool = ...
    """
    Returns or sets  the option whether rename component.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponent`` 
    
    :param renameComponent: 
    :type renameComponent: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    SelectFaces: NXOpen.ScCollector = ...
    """
    Returns  the burring face of burring region.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    StartValue: NXOpen.Expression = ...
    """
    Returns  the start height value of blank.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    UsePlateClearanceFirst: bool = ...
    """
    Returns or sets  the option to use plate clearance first.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceFirst`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceFirst`` 
    
    :param usePlateClearanceFirst: 
    :type usePlateClearanceFirst: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceSecond: bool = ...
    """
    Returns or sets  the option to use plate clearance second.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceSecond`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceSecond`` 
    
    :param usePlateClearanceSecond: 
    :type usePlateClearanceSecond: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    UsePlateClearanceThird: bool = ...
    """
    Returns or sets  the option to use plate clearance third.  
    
    <hr>
    
    Getter Method
    
    Signature ``UsePlateClearanceThird`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UsePlateClearanceThird`` 
    
    :param usePlateClearanceThird: 
    :type usePlateClearanceThird: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: BurringInsertBuilder = ...  # unknown typename


class MWPartingManagerBuilderDataStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWPartingManagerBuilderDataStatus():
    """
    The status of the parting manager data. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotFreed", "Data not freed yet."
       "Freed", "Data already freed."
       "ForceUpdate", "Data needs force update."
    """
    NotFreed = 0  # MWPartingManagerBuilderDataStatusMemberType
    Freed = 1  # MWPartingManagerBuilderDataStatusMemberType
    ForceUpdate = 2  # MWPartingManagerBuilderDataStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWPartingManagerBuilderRegisterTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWPartingManagerBuilderRegisterType():
    """
    The type of registering UNDO identifier. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Init", "Initialize registration for UNDO identifiers."
       "Current", "Register current UNDO mark."
       "Clear", "Clear all registered UNDO identifiers."
    """
    Init = 0  # MWPartingManagerBuilderRegisterTypeMemberType
    Current = 1  # MWPartingManagerBuilderRegisterTypeMemberType
    Clear = 2  # MWPartingManagerBuilderRegisterTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWPartingManagerBuilder(NXOpen.Builder):
    """
    Builder for the Parting Manager in the Mold Wizard application   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWPartingManagerCollection.CreateBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    class DataStatus():
        """
        The status of the parting manager data. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotFreed", "Data not freed yet."
           "Freed", "Data already freed."
           "ForceUpdate", "Data needs force update."
        """
        NotFreed = 0  # MWPartingManagerBuilderDataStatusMemberType
        Freed = 1  # MWPartingManagerBuilderDataStatusMemberType
        ForceUpdate = 2  # MWPartingManagerBuilderDataStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RegisterType():
        """
        The type of registering UNDO identifier. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Init", "Initialize registration for UNDO identifiers."
           "Current", "Register current UNDO mark."
           "Clear", "Clear all registered UNDO identifiers."
        """
        Init = 0  # MWPartingManagerBuilderRegisterTypeMemberType
        Current = 1  # MWPartingManagerBuilderRegisterTypeMemberType
        Clear = 2  # MWPartingManagerBuilderRegisterTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InitModule(self) -> int:
        """
        Perform the module initialization tasks when entering the Mold Wizard Parting environment.  
        
        Signature ``InitModule()`` 
        
        :returns:  Return the error flag indicating the type of error  
        :rtype: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def InitPartingSettings(self) -> None:
        """
        Perform initialization of the settings for parting when entering the Mold Wizard Parting environment.  
        
        Signature ``InitPartingSettings()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def PerformSyncTasks(self) -> None:
        """
        Perform the syncronization tasks when entering the Parting Manager environment.  
        
        Signature ``PerformSyncTasks()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def PerformSyncTasksOnExit(self) -> None:
        """
        Perform the syncronization tasks when exiting the Parting Manager environment.  
        
        Signature ``PerformSyncTasksOnExit()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetUpdateLock(self) -> None:
        """
        Set the update lock.  
        
        Signature ``SetUpdateLock()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def ResetUpdateLock(self, doUpdate: int) -> None:
        """
        Reset the update lock.  
        
        Signature ``ResetUpdateLock(doUpdate)`` 
        
        :param doUpdate:  indicates whether to perform update after resetting the update lock  
        :type doUpdate: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetPartingManagerDataStatus(self) -> int:
        """
        Get the status of the parting manager data.  
        
        Signature ``GetPartingManagerDataStatus()`` 
        
        :returns:  Return the status of the parting manager data   
        :rtype: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetPartingManagerDataStatus(self, pmDataStatus: int) -> None:
        """
        Set the status of the parting manager data.  
        
        Signature ``SetPartingManagerDataStatus(pmDataStatus)`` 
        
        :param pmDataStatus:  Set the status of the parting manager data  
        :type pmDataStatus: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetInPartingCommand(self) -> int:
        """
        Get if it is within a parting command.  
        
        Signature ``GetInPartingCommand()`` 
        
        :returns:  Return if it is within a parting command  
        :rtype: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetInPartingCommand(self, inPartingCommand: int) -> None:
        """
        Set if it is within a parting command.  
        
        Signature ``SetInPartingCommand(inPartingCommand)`` 
        
        :param inPartingCommand:  Set if it is within a parting command  
        :type inPartingCommand: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdatePartingNavigator(self) -> None:
        """
        Update the Parting Navigator.  
        
        Signature ``UpdatePartingNavigator()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def RegisterUndoIds(self, registerType: int) -> None:
        """
        Register the UNDO identifiers.  
        
        Signature ``RegisterUndoIds(registerType)`` 
        
        :param registerType:  The register type for UNDO identifiers  
        :type registerType: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def RegisterWtcPostUndoCallback(self, registerPostUNDO: int) -> None:
        """
        Register or unregister the post UNDO callback function for the Wall Thickness Checker.  
        
        Signature ``RegisterWtcPostUndoCallback(registerPostUNDO)`` 
        
        :param registerPostUNDO:  Indicate if it is to register:1 or unregister:0 the post UNDO callback function.  
        :type registerPostUNDO: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteTransientMeshes(self, deleteMesh: int) -> None:
        """
        Initialize, reset or delete the transient meshes created in the Wall Thickness Checker.  
        
        Signature ``DeleteTransientMeshes(deleteMesh)`` 
        
        :param deleteMesh:  Indicate if it is to initialize:0; reset:1; or delete:2 the transient meshes.  
        :type deleteMesh: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    Null: MWPartingManagerBuilder = ...  # unknown typename


class SpreadsheetDataKeywordTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpreadsheetDataKeywordType():
    """
    Represents the different attribute or expression section in spreadsheet 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ObjectAttribute", "Object attribute defined in spreadsheet"
       "PartAttribute", "Part attribute defined in spreadsheet"
       "Expression", "Expression defined in spreadsheet"
    """
    ObjectAttribute = 1  # SpreadsheetDataKeywordTypeMemberType
    PartAttribute = 2  # SpreadsheetDataKeywordTypeMemberType
    Expression = 4  # SpreadsheetDataKeywordTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpreadsheetData(NXOpen.TransientObject):
    """
    Represents the spreadsheet data which could be standalone spreadsheet file 
    with special format or be the spreadsheet data from part family template part,
    the latter format will not have any other data except the name and value in
    class :py:class:`NXOpen.Tooling.SpreadsheetDataParameter`, that means
    it might not return any result in some methods such as "GetDefinedAttributesExpressions".  
    
    About the standalone file format, it can refer to the sections below in NX Help: 
    CAD->Shipbuilding->Installing templates and customizing the Ship Structure applications->Customizing the ship steel feature library->Steel feature parameter spreadsheet format
    CAD->Shipbuilding->Installing templates and customizing the Ship Structure applications->Customizing the standard parts library->Standard parts spreadsheet symbols
    
    or the example files as below:
    $UGII_BASE_DIR/NXPARTS/Reuse Library/Reusable Object Library/Metric/Boss/Cross_Boss_01.xlsx
    $UGII_BASE_DIR/NXPARTS/Reuse Library/Reuse Examples/Standard Parts/DIN/Profile/Pipe-Tube/Cold-worked Welded Rect Steel Tube, DIN.xls
    
    To create an instance of this class, call the method :py:meth:`NXOpen.Tooling.ToolingSession.CreateSpreadsheetData`.
    
    .. versionadded:: NX8.0.0
    """
    
    class ParameterStatus():
        """
        Represents the different spreadsheet parameter status 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Lock", "User can't change the value in UI"
           "SystemKey", "This is system key parameter"
           "UserKey", "Key parameter analyzed from spreadsheet search"
           "HideStatus", "Not shown in UI"
           "ScaleItem", "This is a scale item"
           "ReadOnly", "This parameter is read only"
           "Modified", "The parameter value is changed"
           "ForceColor", "If the parameter uses user value, normally it shows in UI in a different color. If this status is set, the parameter value will be shown in the same color."
           "HiddenValue", "The parameter has value, but it should be hidden to user"
           "OptionValue", "The parameter has multiple value, but not treated as key parameter"
        """
        Lock = 1  # SpreadsheetDataParameterStatusMemberType
        SystemKey = 2  # SpreadsheetDataParameterStatusMemberType
        UserKey = 4  # SpreadsheetDataParameterStatusMemberType
        HideStatus = 8  # SpreadsheetDataParameterStatusMemberType
        ScaleItem = 16  # SpreadsheetDataParameterStatusMemberType
        ReadOnly = 32  # SpreadsheetDataParameterStatusMemberType
        Modified = 64  # SpreadsheetDataParameterStatusMemberType
        ForceColor = 128  # SpreadsheetDataParameterStatusMemberType
        HiddenValue = 256  # SpreadsheetDataParameterStatusMemberType
        OptionValue = 512  # SpreadsheetDataParameterStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class KeywordType():
        """
        Represents the different attribute or expression section in spreadsheet 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ObjectAttribute", "Object attribute defined in spreadsheet"
           "PartAttribute", "Part attribute defined in spreadsheet"
           "Expression", "Expression defined in spreadsheet"
        """
        ObjectAttribute = 1  # SpreadsheetDataKeywordTypeMemberType
        PartAttribute = 2  # SpreadsheetDataKeywordTypeMemberType
        Expression = 4  # SpreadsheetDataKeywordTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Dispose the spreadsheet object 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Close(self) -> None:
        """
        Close the spreadsheet and exit excel App 
        
        Signature ``Close()`` 
        
        .. versionadded:: NX8.0.1
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def ReadData(self, spreadsheetFileName: str) -> None:
        """
        Load the data from given spreadsheet file 
        
        Signature ``ReadData(spreadsheetFileName)`` 
        
        :param spreadsheetFileName:  Spreadsheet file name, give CLI name in NX/Manager environment  
        :type spreadsheetFileName: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def ReadData(self, familyPart: NXOpen.NXObject) -> None:
        """
        Load the data from part family part 
        
        Signature ``ReadData(familyPart)`` 
        
        :param familyPart:  the part family part  
        :type familyPart: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetParameterValue(self) -> 'list[SpreadsheetDataParameter]':
        """
        Get the parameters with current select/input value  
        
        Signature ``GetParameterValue()`` 
        
        :returns:  Array of structures with the parameter data.  
        :rtype: list of :py:class:`NXOpen.Tooling.SpreadsheetDataParameter` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SelectPrimaryParameter(self, parameterName: str, parameterValue: str) -> None:
        """
        Change the primary parameter of the spreadsheet 
        
        Signature ``SelectPrimaryParameter(parameterName, parameterValue)`` 
        
        :param parameterName:  the parameter name  
        :type parameterName: str 
        :param parameterValue:  the parameter value  
        :type parameterValue: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditParameter(self, parameterName: str, parameterValue: str) -> None:
        """
        Modify the spreadsheet parameter.  
        
        Signature ``EditParameter(parameterName, parameterValue)`` 
        
        :param parameterName:  the parameter name  
        :type parameterName: str 
        :param parameterValue:  the parameter value  
        :type parameterValue: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetParameterStatus(self, parameterName: str, parameterStatus: int, isAdd: bool) -> None:
        """
        Sets the Lock/Hide or other status of spreadsheet parameter.  
        
        Signature ``SetParameterStatus(parameterName, parameterStatus, isAdd)`` 
        
        :param parameterName:  the parameter name  
        :type parameterName: str 
        :param parameterStatus:  the parameter status as defined in :py:class:`SpreadsheetDataParameterStatus`.  
        :type parameterStatus: int 
        :param isAdd:  Specifies whether the parameter status should be added or removed. If true, then the status is added, else it is removed. 
        :type isAdd: bool 
        
        .. versionadded:: NX8.0.1
        
        License requirements: None.
        """
        ...
    
    
    def SearchRecords(self, searchConditions: str) -> None:
        """
        Search the spreadsheet by the given conditions.  
        
        Signature ``SearchRecords(searchConditions)`` 
        
        :param searchConditions:  the search conditions  
        :type searchConditions: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddAssociatedObject(self, associatedObject: NXOpen.NXObject) -> None:
        """
        Add object to be updated according to the spreadsheet data 
        
        Signature ``AddAssociatedObject(associatedObject)`` 
        
        :param associatedObject:  the object to be updated according to the spreadsheet data  
        :type associatedObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Update(self) -> None:
        """
        Update the associated objects according to the spreadsheet data 
        
        Signature ``Update()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def UpdateModel(self, doUpdateImmediately: bool, updatePartAttribute: bool) -> None:
        """
        Update the associated objects according to the spreadsheet data with the options 
        
        Signature ``UpdateModel(doUpdateImmediately, updatePartAttribute)`` 
        
        :param doUpdateImmediately:  Specifies whether to perform an update immediately.  
        :type doUpdateImmediately: bool 
        :param updatePartAttribute:  Specifies whether part attributes should be updated.  
        :type updatePartAttribute: bool 
        
        .. versionadded:: NX9.0.3
        
        License requirements: None.
        """
        ...
    
    
    def GetDefinedAttributesExpressions(self, keywordType: SpreadsheetDataKeywordType) -> tuple:
        """
        Get the object, part attributes or expressions defined in spreadsheet 
        
        Signature ``GetDefinedAttributesExpressions(keywordType)`` 
        
        :param keywordType: 
        :type keywordType: :py:class:`NXOpen.Tooling.SpreadsheetDataKeywordType` 
        :returns: a tuple 
        :rtype: A tuple consisting of (objOrPartAttrNames, attrNames, attrValues). objOrPartAttrNames is a list of str.   Object name or part attribute to find part attrNames is a list of str. attrValues is a list of str.   Array of structures with the object attributes data. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetParameterValueList(self, parameterName: str) -> 'list[str]':
        """
        Get the list of values by giving a parameter name in spreadsheet 
        
        Signature ``GetParameterValueList(parameterName)`` 
        
        :param parameterName: 
        :type parameterName: str 
        :returns:  The list of values  
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    


class DefineNeutralFactorBuilderFormulaOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DefineNeutralFactorBuilderFormulaOptions():
    """
    Specifies the formula used to calculate the neutral factor value
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "General", "General formula use the ratio of inner bend radius and thickness"
       "BendAllowance", "Bend allowance formula use different formula according to inner bend radius and thickness"
    """
    General = 0  # DefineNeutralFactorBuilderFormulaOptionsMemberType
    BendAllowance = 1  # DefineNeutralFactorBuilderFormulaOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DefineNeutralFactorBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represeents a :py:class:`NXOpen.Tooling.DefineNeutralFactorBuilder` to define
    neutral factor according to material and formula in the spreadsheet table.  
    
    .. versionadded:: NX10.0.0
    """
    
    class FormulaOptions():
        """
        Specifies the formula used to calculate the neutral factor value
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "General", "General formula use the ratio of inner bend radius and thickness"
           "BendAllowance", "Bend allowance formula use different formula according to inner bend radius and thickness"
        """
        General = 0  # DefineNeutralFactorBuilderFormulaOptionsMemberType
        BendAllowance = 1  # DefineNeutralFactorBuilderFormulaOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BendDevelopedLength: float = ...
    """
    Returns or sets  the bend developed length, the length of a unfolded bend feature 
    
    <hr>
    
    Getter Method
    
    Signature ``BendDevelopedLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendDevelopedLength`` 
    
    :param bendDevelopedLength: 
    :type bendDevelopedLength: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    NeutralFactor: str = ...
    """
    Returns or sets  the neutral factor used to calculate bend developed length 
    
    <hr>
    
    Getter Method
    
    Signature ``NeutralFactor`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeutralFactor`` 
    
    :param neutralFactor: 
    :type neutralFactor: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    NeutralFactorFormula: DefineNeutralFactorBuilderFormulaOptions = ...
    """
    Returns or sets  the neutral factor formula option, decides which method used to calculate the neutral factor 
    
    <hr>
    
    Getter Method
    
    Signature ``NeutralFactorFormula`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DefineNeutralFactorBuilderFormulaOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NeutralFactorFormula`` 
    
    :param neutralFactorFormula: 
    :type neutralFactorFormula: :py:class:`NXOpen.Tooling.DefineNeutralFactorBuilderFormulaOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PartMaterial: str = ...
    """
    Returns or sets  the part material 
    
    <hr>
    
    Getter Method
    
    Signature ``PartMaterial`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartMaterial`` 
    
    :param partMaterial: 
    :type partMaterial: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: DefineNeutralFactorBuilder = ...  # unknown typename


class DesignTrimToolCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a DesignTrimToolCollection class   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDesignTrimToolBuilder(self) -> DesignTrimToolBuilder:
        """
        Creates a DesignTrimTool builder  
        
        Signature ``CreateDesignTrimToolBuilder()`` 
        
        :returns: :py:class:`DesignTrimToolBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.DesignTrimToolBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class ChannelFittingCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a ChannelFitting Collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateChannelFittingBuilder(self) -> ChannelFittingBuilder:
        """
        Creates a Tooling.  
        
        ChannelFittingBuilder  
        
        Signature ``CreateChannelFittingBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.ChannelFittingBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class DirectUnbendBuilderBendtypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DirectUnbendBuilderBendtypes():
    """
    unbend operations. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unbend", "unbend operation"
       "Rebend", "rebend operation"
       "Prebend", "prebend operation"
       "Overbend", "overbend operation"
    """
    Unbend = 0  # DirectUnbendBuilderBendtypesMemberType
    Rebend = 1  # DirectUnbendBuilderBendtypesMemberType
    Prebend = 2  # DirectUnbendBuilderBendtypesMemberType
    Overbend = 3  # DirectUnbendBuilderBendtypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DirectUnbendBuilder(NXOpen.Builder):
    """
    The builder contains all inputs for direct unbend.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.DirectUnfoldCollection.CreateDirectUnbendBuilder`
    
    Default values.
    
    ==================  =====
    Property            Value
    ==================  =====
    AlterResult         0 
    ------------------  -----
    BendAngle1          30 
    ------------------  -----
    BendAngle2          30 
    ------------------  -----
    BendAngle3          30 
    ------------------  -----
    BendAngle4          30 
    ------------------  -----
    BendAngle5          30 
    ------------------  -----
    BendAngle6          30 
    ------------------  -----
    BendDevLength       0.0 
    ------------------  -----
    BendNeutralFactor   0.4 
    ------------------  -----
    BendNumPrebends     Two 
    ------------------  -----
    KeepRadFixed        0 
    ------------------  -----
    OverbendAngle       0 
    ==================  =====
    
    .. versionadded:: NX6.0.0
    """
    
    class Bendtypes():
        """
        unbend operations. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unbend", "unbend operation"
           "Rebend", "rebend operation"
           "Prebend", "prebend operation"
           "Overbend", "overbend operation"
        """
        Unbend = 0  # DirectUnbendBuilderBendtypesMemberType
        Rebend = 1  # DirectUnbendBuilderBendtypesMemberType
        Prebend = 2  # DirectUnbendBuilderBendtypesMemberType
        Overbend = 3  # DirectUnbendBuilderBendtypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AlterResult: bool = ...
    """
    Returns or sets  the switch to set if use an alternate result.  
    
    <hr>
    
    Getter Method
    
    Signature ``AlterResult`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlterResult`` 
    
    :param alterResult: 
    :type alterResult: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BaseBody: NXOpen.Body = ...
    """
    Returns or sets  the base body.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseBody`` 
    
    :param baseBody: 
    :type baseBody: :py:class:`NXOpen.Body` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    BendAngle1: float = ...
    """
    Returns or sets  the first angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle1`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle1`` 
    
    :param angle1: 
    :type angle1: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BendAngle2: float = ...
    """
    Returns or sets  the second angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle2`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle2`` 
    
    :param angle2: 
    :type angle2: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BendAngle3: float = ...
    """
    Returns or sets  the third angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle3`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle3`` 
    
    :param angle3: 
    :type angle3: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BendAngle4: float = ...
    """
    Returns or sets  the fourth angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle4`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle4`` 
    
    :param angle4: 
    :type angle4: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BendAngle5: float = ...
    """
    Returns or sets  the fifth angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle5`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle5`` 
    
    :param angle5: 
    :type angle5: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BendAngle6: float = ...
    """
    Returns or sets  the sixth angle of prebend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendAngle6`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAngle6`` 
    
    :param angle6: 
    :type angle6: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BendDevLength: float = ...
    """
    Returns or sets  the operation to developed length of a bend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendDevLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendDevLength`` 
    
    :param devLength: 
    :type devLength: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BendNeutralFactor: float = ...
    """
    Returns or sets  the operation of k factor for a single bend.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendNeutralFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendNeutralFactor`` 
    
    :param kFactor: 
    :type kFactor: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BendNumPrebends: DirectUnfoldBuilderBend = ...
    """
    Returns or sets  the number of prebends.  
    
    <hr>
    
    Getter Method
    
    Signature ``BendNumPrebends`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderBend` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendNumPrebends`` 
    
    :param numBends: 
    :type numBends: :py:class:`NXOpen.Tooling.DirectUnfoldBuilderBend` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    KeepRadFixed: bool = ...
    """
    Returns or sets  the keep radius fixed.  
    
    <hr>
    
    Getter Method
    
    Signature ``KeepRadFixed`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``KeepRadFixed`` 
    
    :param keepRadFixed: 
    :type keepRadFixed: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    OverbendAngle: float = ...
    """
    Returns or sets  the overbend angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``OverbendAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverbendAngle`` 
    
    :param overbendAngle: 
    :type overbendAngle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    RefObject: NXOpen.SelectEdgeList = ...
    """
    Returns  the reference objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``RefObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectEdgeList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ResizeRadius: bool = ...
    """
    Returns or sets  the resize radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``ResizeRadius`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ResizeRadius`` 
    
    :param resizeRadius: 
    :type resizeRadius: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelBend: NXOpen.SelectFaceList = ...
    """
    Returns  the selection of bends.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelBend`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: DirectUnbendBuilderBendtypes = ...
    """
    Returns or sets  the type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DirectUnbendBuilderBendtypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.DirectUnbendBuilderBendtypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    WorkPart: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the work part.  
    
    <hr>
    
    Getter Method
    
    Signature ``WorkPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DirectUnbendBuilder = ...  # unknown typename


class ReliefDesignBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReliefDesignBuilderTypes():
    """
    The relief design type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "Create operation"
       "Edit", "Edit operation"
       "Copy", "Copy operation"
       "Delete", "Delete operation"
    """
    Create = 0  # ReliefDesignBuilderTypesMemberType
    Edit = 1  # ReliefDesignBuilderTypesMemberType
    Copy = 2  # ReliefDesignBuilderTypesMemberType
    Delete = 3  # ReliefDesignBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReliefDesignBuilderMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReliefDesignBuilderMethod():
    """
    The relief design creation method. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BBox", "Boundbox method"
       "UDef", "User Defined method"
    """
    BBox = 0  # ReliefDesignBuilderMethodMemberType
    UDef = 1  # ReliefDesignBuilderMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReliefDesignBuilderMethodOfDeleteMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReliefDesignBuilderMethodOfDelete():
    """
    The relief design delete method. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DeleteSelectedInstance", "Delete selected instance"
       "DeleteAllInstances", "Delete all instances"
    """
    DeleteSelectedInstance = 0  # ReliefDesignBuilderMethodOfDeleteMemberType
    DeleteAllInstances = 1  # ReliefDesignBuilderMethodOfDeleteMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReliefDesignBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.ReliefDesignBuilder`
    Relief Design is to cut relief pocket for forming region .  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.ReliefDesignCollection.CreateReliefDesignBuilder`
    
    Default values.
    
    ===================  ========================================
    Property             Value
    ===================  ========================================
    Clearance            0.1 
    -------------------  ----------------------------------------
    CreateEditMethod     BBox 
    -------------------  ----------------------------------------
    CreateLocation       1 
    -------------------  ----------------------------------------
    DeleteMethod         DeleteSelectedInstance 
    -------------------  ----------------------------------------
    HideReliefStatus     0 
    -------------------  ----------------------------------------
    NumberOfCopy         1 
    -------------------  ----------------------------------------
    ReliefHeight.Value   5 (millimeters part), 1 (inches part) 
    -------------------  ----------------------------------------
    ReliefRadius.Value   1 (millimeters part), 0.1 (inches part) 
    ===================  ========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        The relief design type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "Create operation"
           "Edit", "Edit operation"
           "Copy", "Copy operation"
           "Delete", "Delete operation"
        """
        Create = 0  # ReliefDesignBuilderTypesMemberType
        Edit = 1  # ReliefDesignBuilderTypesMemberType
        Copy = 2  # ReliefDesignBuilderTypesMemberType
        Delete = 3  # ReliefDesignBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Method():
        """
        The relief design creation method. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BBox", "Boundbox method"
           "UDef", "User Defined method"
        """
        BBox = 0  # ReliefDesignBuilderMethodMemberType
        UDef = 1  # ReliefDesignBuilderMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MethodOfDelete():
        """
        The relief design delete method. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DeleteSelectedInstance", "Delete selected instance"
           "DeleteAllInstances", "Delete all instances"
        """
        DeleteSelectedInstance = 0  # ReliefDesignBuilderMethodOfDeleteMemberType
        DeleteAllInstances = 1  # ReliefDesignBuilderMethodOfDeleteMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetFaces(self, faceOccs: 'list[NXOpen.Face]') -> None:
        """
        Sets the face occurrences into builder attribute.  
        
        Signature ``SetFaces(faceOccs)`` 
        
        :param faceOccs:  array of face occurrences  
        :type faceOccs: list of :py:class:`NXOpen.Face` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def WaveFaces(self) -> None:
        """
        Wave face to work part for creating user defined relief as reference.  
        
        Signature ``WaveFaces()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteLinkedFace(self) -> None:
        """
        Delete the linked face feature.  
        
        Signature ``DeleteLinkedFace()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    Clearance: float = ...
    """
    Returns or sets  the clearance of KF bounding box.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Clearance`` 
    
    :param clearance: 
    :type clearance: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Clearance1: NXOpen.Expression = ...
    """
    Returns  the first clearance to create handle to control -X direction clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Clearance2: NXOpen.Expression = ...
    """
    Returns  the second clearance to create handle to control -Y direction clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Clearance3: NXOpen.Expression = ...
    """
    Returns  the third clearance to create handle to control -Z direction clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance3`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Clearance4: NXOpen.Expression = ...
    """
    Returns  the fourth clearance to create handle to control +X direction clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance4`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Clearance5: NXOpen.Expression = ...
    """
    Returns  the fifth clearance to create handle to control +Y direction clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance5`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Clearance6: NXOpen.Expression = ...
    """
    Returns  the sixth clearance to create handle to control +Z direction clearance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance6`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CopyRelief: NXOpen.SelectBodyList = ...
    """
    Returns  the relief used to copy.  
    
    <hr>
    
    Getter Method
    
    Signature ``CopyRelief`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CreateEditMethod: ReliefDesignBuilderMethod = ...
    """
    Returns or sets  the create and edit method.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateEditMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReliefDesignBuilderMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateEditMethod`` 
    
    :param createEditMethod: 
    :type createEditMethod: :py:class:`NXOpen.Tooling.ReliefDesignBuilderMethod` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CreateLocation: bool = ...
    """
    Returns or sets  the location option to create relief, true: create relief at the location of forming region, false: create relief at the next station(offset one pitch).  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateLocation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateLocation`` 
    
    :param createLocation: 
    :type createLocation: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CurveSuperSelect: NXOpen.Section = ...
    """
    Returns  the sketched curve profile used for creating or editing user defined relief.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurveSuperSelect`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DeleteMethod: ReliefDesignBuilderMethodOfDelete = ...
    """
    Returns or sets  the delete method.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeleteMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReliefDesignBuilderMethodOfDelete` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DeleteMethod`` 
    
    :param deleteMethod: 
    :type deleteMethod: :py:class:`NXOpen.Tooling.ReliefDesignBuilderMethodOfDelete` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    HideReliefStatus: bool = ...
    """
    Returns or sets  the option to hide (true) or show (false) the relief.  
    
    <hr>
    
    Getter Method
    
    Signature ``HideReliefStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HideReliefStatus`` 
    
    :param hideReliefStatus: 
    :type hideReliefStatus: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    NumberOfCopy: int = ...
    """
    Returns or sets  the number of relief to be copied.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberOfCopy`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberOfCopy`` 
    
    :param numberOfCopy: 
    :type numberOfCopy: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Pitch: float = ...
    """
    Returns or sets  the pitch.  
    
    <hr>
    
    Getter Method
    
    Signature ``Pitch`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Pitch`` 
    
    :param pitch: 
    :type pitch: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReliefFace: NXOpen.ScCollector = ...
    """
    Returns  the face used to create bounding box or wave to workpart as reference for creating user defined relief.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReliefHeight: NXOpen.Expression = ...
    """
    Returns  the relief height.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReliefRadius: NXOpen.Expression = ...
    """
    Returns  the relief radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ReliefStart: NXOpen.Expression = ...
    """
    Returns  the extrude start of the user defined relief.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReliefStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    SelectionReliefToEdit: NXOpen.SelectNXObject = ...
    """
    Returns  the selected relief to edit.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionReliefToEdit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: ReliefDesignBuilderTypes = ...
    """
    Returns or sets  the type of relief design.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.ReliefDesignBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.ReliefDesignBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ReliefDesignBuilder = ...  # unknown typename


class MotionSimulationBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionSimulationBuilderTypes():
    """
    Specifies the operation options of motion simulation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AddKinematicModel", "Adds kinematic model"
       "MountComponent", "Mounts die components to kinematic components"
    """
    AddKinematicModel = 0  # MotionSimulationBuilderTypesMemberType
    MountComponent = 1  # MotionSimulationBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionSimulationBuilderMoldbaseStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionSimulationBuilderMoldbaseStyleType():
    """
    Specifies the style type of moldbase, two-plate style or three-plate style 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Two", "Specifies two-plate style moldbase"
       "Three", "Specifies three-plate style moldbase"
    """
    Two = 0  # MotionSimulationBuilderMoldbaseStyleTypeMemberType
    Three = 1  # MotionSimulationBuilderMoldbaseStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionSimulationBuilderEjectorMoveOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionSimulationBuilderEjectorMoveOptions():
    """
    Specifies the ejector move type, after or while 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "After", "Eject product after mold fully opened"
       "While", "Eject product while mold opening"
    """
    After = 0  # MotionSimulationBuilderEjectorMoveOptionsMemberType
    While = 1  # MotionSimulationBuilderEjectorMoveOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionSimulationBuilderCamDefinitionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionSimulationBuilderCamDefinitionType():
    """
    Specifies the way to define cam, automatically or manually. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AutomaticalDefinedCam", "Defines cam automatically"
       "UserDefinedCam", "Defines cam interactively"
    """
    AutomaticalDefinedCam = 0  # MotionSimulationBuilderCamDefinitionTypeMemberType
    UserDefinedCam = 1  # MotionSimulationBuilderCamDefinitionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionSimulationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.MotionSimulationBuilder` to support dynamic interference check.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MotionSimulationCollection.CreateMotionSimulationBuilder`
    
    Default values.
    
    =================================  ===========================================
    Property                           Value
    =================================  ===========================================
    CamDefinitionMethod (deprecated)   AutomaticalDefinedCam 
    ---------------------------------  -------------------------------------------
    CrankRadius.Value                  0 
    ---------------------------------  -------------------------------------------
    CsysVisibility                     0 
    ---------------------------------  -------------------------------------------
    DiePitch.Value                     0 
    ---------------------------------  -------------------------------------------
    DiePitch02.Value                   10.0 (millimeters part), 1.0 (inches part) 
    ---------------------------------  -------------------------------------------
    EjectionStartAngle                 0 
    ---------------------------------  -------------------------------------------
    EjectorMoveOption                  After 
    ---------------------------------  -------------------------------------------
    HideMotionItem                     0 
    ---------------------------------  -------------------------------------------
    IncludeBlank                       0 
    ---------------------------------  -------------------------------------------
    LiftHeight.Value                   0 
    ---------------------------------  -------------------------------------------
    LiftHeight02.Value                 10.0 (millimeters part), 1.0 (inches part) 
    ---------------------------------  -------------------------------------------
    MachineStroke.Value                0 
    ---------------------------------  -------------------------------------------
    MoldOpenAngle                      0 
    ---------------------------------  -------------------------------------------
    RelativeMotion                     0 
    ---------------------------------  -------------------------------------------
    RenameComponents                   0 
    ---------------------------------  -------------------------------------------
    StripTravel.Value                  0 
    ---------------------------------  -------------------------------------------
    StrokeAngleStep.Value              1 
    ---------------------------------  -------------------------------------------
    StrokePerMinute                    0 
    ---------------------------------  -------------------------------------------
    TransferEndAngle.Value             250 
    ---------------------------------  -------------------------------------------
    TransferStartAngle.Value           110 
    =================================  ===========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class Types():
        """
        Specifies the operation options of motion simulation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AddKinematicModel", "Adds kinematic model"
           "MountComponent", "Mounts die components to kinematic components"
        """
        AddKinematicModel = 0  # MotionSimulationBuilderTypesMemberType
        MountComponent = 1  # MotionSimulationBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MoldbaseStyleType():
        """
        Specifies the style type of moldbase, two-plate style or three-plate style 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Two", "Specifies two-plate style moldbase"
           "Three", "Specifies three-plate style moldbase"
        """
        Two = 0  # MotionSimulationBuilderMoldbaseStyleTypeMemberType
        Three = 1  # MotionSimulationBuilderMoldbaseStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EjectorMoveOptions():
        """
        Specifies the ejector move type, after or while 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "After", "Eject product after mold fully opened"
           "While", "Eject product while mold opening"
        """
        After = 0  # MotionSimulationBuilderEjectorMoveOptionsMemberType
        While = 1  # MotionSimulationBuilderEjectorMoveOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CamDefinitionType():
        """
        Specifies the way to define cam, automatically or manually. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AutomaticalDefinedCam", "Defines cam automatically"
           "UserDefinedCam", "Defines cam interactively"
        """
        AutomaticalDefinedCam = 0  # MotionSimulationBuilderCamDefinitionTypeMemberType
        UserDefinedCam = 1  # MotionSimulationBuilderCamDefinitionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CamDefinitionMethod: MotionSimulationBuilderCamDefinitionType = ...
    """
    Returns or sets  the cam definition method, automatically or manually.  
    
    <hr>
    
    Getter Method
    
    Signature ``CamDefinitionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MotionSimulationBuilderCamDefinitionType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CamDefinitionMethod`` 
    
    :param camDefinitionMethod: 
    :type camDefinitionMethod: :py:class:`NXOpen.Tooling.MotionSimulationBuilderCamDefinitionType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    Component: NXOpen.SelectBodyList = ...
    """
    Returns  the component to assign die components mounted to a kinematic component.  
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns:  Specifies components mounted to a kinematic component  
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ControlDataFile: str = ...
    """
    Returns or sets  the constrol data to import to kinematic model 
    
    <hr>
    
    Getter Method
    
    Signature ``ControlDataFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ControlDataFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CrankRadius: NXOpen.Expression = ...
    """
    Returns  the crank radius to calculate controller data.  
    
    <hr>
    
    Getter Method
    
    Signature ``CrankRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CsysVisibility: bool = ...
    """
    Returns or sets  the csys visibility to specify if hide csys in kinematic model 
    
    <hr>
    
    Getter Method
    
    Signature ``CsysVisibility`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CsysVisibility`` 
    
    :param csysVisibility: 
    :type csysVisibility: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DiePitch: NXOpen.Expression = ...
    """
    Returns  the die pitch to calculate controller data.  
    
    <hr>
    
    Getter Method
    
    Signature ``DiePitch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DiePitch02: NXOpen.Expression = ...
    """
    Returns  the die pitch value for second strip, it's used to calculate controller data.  
    
    <hr>
    
    Getter Method
    
    Signature ``DiePitch02`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    EjectionStartAngle: float = ...
    """
    Returns or sets  the hydraulic motion angle 
    
    <hr>
    
    Getter Method
    
    Signature ``EjectionStartAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EjectionStartAngle`` 
    
    :param ejectionStartAngle: 
    :type ejectionStartAngle: float 
    
    .. versionadded:: NX10.0.3
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EjectorMoveOption: MotionSimulationBuilderEjectorMoveOptions = ...
    """
    Returns or sets  the ejector move option 
    
    <hr>
    
    Getter Method
    
    Signature ``EjectorMoveOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MotionSimulationBuilderEjectorMoveOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EjectorMoveOption`` 
    
    :param ejectorMoveOption: 
    :type ejectorMoveOption: :py:class:`NXOpen.Tooling.MotionSimulationBuilderEjectorMoveOptions` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ExportControlData: str = ...
    """
    Returns or sets  the export file of kinematic model control data 
    
    <hr>
    
    Getter Method
    
    Signature ``ExportControlData`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExportControlData`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    HideMotionItem: bool = ...
    """
    Returns or sets  the hide motion item toggle, which specifies whether to remove the motion item from the tree list if there is no mounted component in it 
    
    <hr>
    
    Getter Method
    
    Signature ``HideMotionItem`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HideMotionItem`` 
    
    :param hideMotionItem: 
    :type hideMotionItem: bool 
    
    .. versionadded:: NX10.0.3
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IncludeBlank: bool = ...
    """
    Returns or sets  the include blank flag to specify if blanked bodies need to be mounted to kinematic model 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeBlank`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeBlank`` 
    
    :param includeBlank: 
    :type includeBlank: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    KinematicModel: NXOpen.SelectBody = ...
    """
    Returns  the kinematic model to specify whose parameters need to be modified.  
    
    <hr>
    
    Getter Method
    
    Signature ``KinematicModel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LiftHeight: NXOpen.Expression = ...
    """
    Returns  the lift height to calculate controller data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LiftHeight`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    LiftHeight02: NXOpen.Expression = ...
    """
    Returns  the lift height for second strip, it's used to calculate controller data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LiftHeight02`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    MachineStroke: NXOpen.Expression = ...
    """
    Returns  the machine stroke to calculate controller data.  
    
    <hr>
    
    Getter Method
    
    Signature ``MachineStroke`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MoldOpenAngle: float = ...
    """
    Returns or sets  the hydraulic motion option 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldOpenAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoldOpenAngle`` 
    
    :param moldOpenAngle: 
    :type moldOpenAngle: float 
    
    .. versionadded:: NX10.0.3
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    MoldbaseStyle: MotionSimulationBuilderMoldbaseStyleType = ...
    """
    Returns or sets  the moldbase style to control the visibility of process parameters for mold 
    
    <hr>
    
    Getter Method
    
    Signature ``MoldbaseStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MotionSimulationBuilderMoldbaseStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoldbaseStyle`` 
    
    :param moldbaseStyle: 
    :type moldbaseStyle: :py:class:`NXOpen.Tooling.MotionSimulationBuilderMoldbaseStyleType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    RelativeMotion: bool = ...
    """
    Returns or sets  the hide motion item toggle, which specifies whether to remove the motion item from the tree list if there is no mounted component in it 
    
    <hr>
    
    Getter Method
    
    Signature ``RelativeMotion`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RelativeMotion`` 
    
    :param relativeMotion: 
    :type relativeMotion: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    RenameComponents: bool = ...
    """
    Returns or sets  the rename kinematic model components.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenameComponents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameComponents`` 
    
    :param renameComponents: 
    :type renameComponents: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    RenameRule: str = ...
    """
    Returns or sets  the renaming rule to clone kinematic model.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenameRule`` 
    
    :returns:  Specifies the renaming rule  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenameRule`` 
    
    :param renameRule: 
    :type renameRule: str 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX10.0.0
       This functionality is no longer supported.
    
    License requirements: None.
    """
    StripTravel: NXOpen.Expression = ...
    """
    Returns  the strip travel to calculate controller data.  
    
    <hr>
    
    Getter Method
    
    Signature ``StripTravel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StripVector: NXOpen.Direction = ...
    """
    Returns or sets  the strip feeding direction 
    
    <hr>
    
    Getter Method
    
    Signature ``StripVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StripVector`` 
    
    :param stripVector: 
    :type stripVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StrokeAngleStep: NXOpen.Expression = ...
    """
    Returns  the stroke angle step to calculate controller data.  
    
    <hr>
    
    Getter Method
    
    Signature ``StrokeAngleStep`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    StrokePerMinute: float = ...
    """
    Returns or sets  the stroke per minute 
    
    <hr>
    
    Getter Method
    
    Signature ``StrokePerMinute`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StrokePerMinute`` 
    
    :param strokePerMinute: 
    :type strokePerMinute: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    TargetDirectory: str = ...
    """
    Returns or sets  the target directory to save cloned kinematic model.  
    
    <hr>
    
    Getter Method
    
    Signature ``TargetDirectory`` 
    
    :returns:  Specifies the target folder name  
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TargetDirectory`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TransferEndAngle: NXOpen.Expression = ...
    """
    Returns  the angle to specify when transfer stops moving.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransferEndAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    TransferStartAngle: NXOpen.Expression = ...
    """
    Returns  the angle to specify when transfer starts moving.  
    
    <hr>
    
    Getter Method
    
    Signature ``TransferStartAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Type: MotionSimulationBuilderTypes = ...
    """
    Returns or sets  the type to specify which operation of motion simulation takes effect.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MotionSimulationBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.MotionSimulationBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: MotionSimulationBuilder = ...  # unknown typename


class CreateBoxBuilderBoxTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CreateBoxBuilderBoxType():
    """
    the type for creating box
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "General", "general box"
       "Bounding", "bounding box"
    """
    General = 0  # CreateBoxBuilderBoxTypeMemberType
    Bounding = 1  # CreateBoxBuilderBoxTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CreateBoxBuilder(NXOpen.Builder):
    """
    Represents a box creation operation  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.CreateBoxCollection.CreateBoxBuilder`
    
    Default values.
    
    ======================  ==========================================
    Property                Value
    ======================  ==========================================
    Clearance.Value         1.0 (millimeters part), 0.1 (inches part) 
    ----------------------  ------------------------------------------
    OffsetNegativeX.Value   1.0 (millimeters part), 0.1 (inches part) 
    ----------------------  ------------------------------------------
    OffsetNegativeY.Value   1.0 (millimeters part), 0.1 (inches part) 
    ----------------------  ------------------------------------------
    OffsetNegativeZ.Value   1.0 (millimeters part), 0.1 (inches part) 
    ----------------------  ------------------------------------------
    OffsetPositiveX.Value   1.0 (millimeters part), 0.1 (inches part) 
    ----------------------  ------------------------------------------
    OffsetPositiveY.Value   1.0 (millimeters part), 0.1 (inches part) 
    ----------------------  ------------------------------------------
    OffsetPositiveZ.Value   1.0 (millimeters part), 0.1 (inches part) 
    ----------------------  ------------------------------------------
    XValue.Value            10 (millimeters part), 1.0 (inches part) 
    ----------------------  ------------------------------------------
    YValue.Value            10 (millimeters part), 1.0 (inches part) 
    ----------------------  ------------------------------------------
    ZValue.Value            10 (millimeters part), 1.0 (inches part) 
    ======================  ==========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class BoxType():
        """
        the type for creating box
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "General", "general box"
           "Bounding", "bounding box"
        """
        General = 0  # CreateBoxBuilderBoxTypeMemberType
        Bounding = 1  # CreateBoxBuilderBoxTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetBoxMatrixAndPosition(self, matrix: NXOpen.Matrix3x3, position: NXOpen.Point3d) -> None:
        """
        Sets box csys matrix.  
        
        Signature ``SetBoxMatrixAndPosition(matrix, position)`` 
        
        :param matrix: 
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        :param position: 
        :type position: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR studio_free_form ("STUDIO FREE FORM") OR features_modeling ("FEATURES MODELING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def ConvertFrecToBuilderData(self, featTag: NXOpen.NXObject) -> None:
        """
        Convert feature record data to builder.  
        
        Signature ``ConvertFrecToBuilderData(featTag)`` 
        
        :param featTag:  bounding box kf feature tag  
        :type featTag: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR studio_free_form ("STUDIO FREE FORM") OR features_modeling ("FEATURES MODELING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetBoxColorValue(self, value: NXOpen.Point3d) -> None:
        """
        Sets box color.  
        
        Signature ``SetBoxColorValue(value)`` 
        
        :param value: 
        :type value: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR studio_free_form ("STUDIO FREE FORM") OR features_modeling ("FEATURES MODELING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def SetBoxCsysPosition(self, value: NXOpen.Point3d) -> None:
        """
        Sets point position of csys for box.  
        
        Signature ``SetBoxCsysPosition(value)`` 
        
        :param value: 
        :type value: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR studio_free_form ("STUDIO FREE FORM") OR features_modeling ("FEATURES MODELING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetBoxCsysPosition(self) -> NXOpen.Point3d:
        """
        Gets point position of csys for box.  
        
        Signature ``GetBoxCsysPosition()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    
    def SetSelectedOccs(self, selections: 'list[NXOpen.NXObject]', deselections: 'list[NXOpen.NXObject]') -> None:
        """
        Sets selected object occurrences.  
        
        Signature ``SetSelectedOccs(selections, deselections)`` 
        
        :param selections:  Last selected objects.  
        :type selections: list of :py:class:`NXOpen.NXObject` 
        :param deselections:  Last deselected objects.  
        :type deselections: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR studio_free_form ("STUDIO FREE FORM") OR features_modeling ("FEATURES MODELING") OR solid_modeling ("SOLIDS MODELING")
        """
        ...
    
    
    def GetBoxFeatTag(self) -> NXOpen.NXObject:
        """
        Gets kf box feature tag.  
        
        Signature ``GetBoxFeatTag()`` 
        
        :returns:  bounding box kf feature  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    
    BoxColor: int = ...
    """
    Returns or sets  the box color.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoxColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``BoxColor`` 
    
    :param colorValue: 
    :type colorValue: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR studio_free_form ("STUDIO FREE FORM") OR features_modeling ("FEATURES MODELING") OR solid_modeling ("SOLIDS MODELING")
    """
    Clearance: NXOpen.Expression = ...
    """
    Returns  the clearance value for box in six directions.  
    
    <hr>
    
    Getter Method
    
    Signature ``Clearance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Objects: NXOpen.ScCollector = ...
    """
    Returns  the objects used for bounding box creation.  
    
    <hr>
    
    Getter Method
    
    Signature ``Objects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetNegativeX: NXOpen.Expression = ...
    """
    Returns  the offset value for box in -X direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetNegativeX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetNegativeY: NXOpen.Expression = ...
    """
    Returns  the offset value for box in -Y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetNegativeY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetNegativeZ: NXOpen.Expression = ...
    """
    Returns  the offset value for box in -Z direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetNegativeZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetPositiveX: NXOpen.Expression = ...
    """
    Returns  the offset value for box in +X direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPositiveX`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetPositiveY: NXOpen.Expression = ...
    """
    Returns  the offset value for box in +Y direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPositiveY`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OffsetPositiveZ: NXOpen.Expression = ...
    """
    Returns  the offset value for box in +Z direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetPositiveZ`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Type: CreateBoxBuilderBoxType = ...
    """
    Returns or sets  the box type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.CreateBoxBuilderBoxType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Tooling.CreateBoxBuilderBoxType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard") OR studio_free_form ("STUDIO FREE FORM") OR features_modeling ("FEATURES MODELING") OR solid_modeling ("SOLIDS MODELING")
    """
    XValue: NXOpen.Expression = ...
    """
    Returns  the edge length in X direction for general box.  
    
    <hr>
    
    Getter Method
    
    Signature ``XValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    YValue: NXOpen.Expression = ...
    """
    Returns  the edge length in Y direction for general box.  
    
    <hr>
    
    Getter Method
    
    Signature ``YValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    ZValue: NXOpen.Expression = ...
    """
    Returns  the edge length in Z direction for general box.  
    
    <hr>
    
    Getter Method
    
    Signature ``ZValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR nx_electrode_wizard ("NX Electrode Wizard") OR prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: CreateBoxBuilder = ...  # unknown typename


class MWTraversePartingLinesCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of the MWTraversePartingLines builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self) -> MWTraversePartingLinesBuilder:
        """
        Creates a MWTraversePartingLines builder  
        
        Signature ``CreateBuilder()`` 
        
        :returns: :py:class:`MWTraversePartingLinesBuilder` object object  
        :rtype: :py:class:`NXOpen.Tooling.MWTraversePartingLinesBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class UndersizeCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a undersize builder   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateUndersizeBuilder(self) -> UndersizeBuilder:
        """
        Creates undersize object  
        
        Signature ``CreateUndersizeBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.UndersizeBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    


class SheetMetalFeatureRecognitionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.SheetMetalFeatureRecognitionBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MoldwizardManager.CreateSheetMetalFeatureRecognitionBuilder`
    
    .. versionadded:: NX11.0.1
    """
    
    def AnalyzeBody(self) -> None:
        """
        Analyze selected body 
        
        Signature ``AnalyzeBody()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def ExportResult(self) -> None:
        """
        Export analysis result 
        
        Signature ``ExportResult()`` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def SetProductOrientation(self, matrix: NXOpen.Matrix3x3) -> None:
        """
        Set the product orientation 
        
        Signature ``SetProductOrientation(matrix)`` 
        
        :param matrix: 
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    
    def GetProductOrientation(self) -> NXOpen.Matrix3x3:
        """
        Get the product orientation  
        
        Signature ``GetProductOrientation()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX11.0.1
        
        License requirements: None.
        """
        ...
    
    BodySurfaceArea: float = ...
    """
    Returns or sets  the surface area value 
    
    <hr>
    
    Getter Method
    
    Signature ``BodySurfaceArea`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BodySurfaceArea`` 
    
    :param surfaceArea: 
    :type surfaceArea: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    CuttingLength: float = ...
    """
    Returns or sets  the cutting length 
    
    <hr>
    
    Getter Method
    
    Signature ``CuttingLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CuttingLength`` 
    
    :param length: 
    :type length: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MinimumXDimension: float = ...
    """
    Returns or sets  the minimum x dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumXDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumXDimension`` 
    
    :param minxLength: 
    :type minxLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MinimumYDimension: float = ...
    """
    Returns or sets  the minimum y dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumYDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumYDimension`` 
    
    :param minyLength: 
    :type minyLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    MinimumZDimension: float = ...
    """
    Returns or sets  the minimum z dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumZDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumZDimension`` 
    
    :param minzLength: 
    :type minzLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    PartFolderBrowser: str = ...
    """
    Returns or sets  the folder of part file to be saved 
    
    <hr>
    
    Getter Method
    
    Signature ``PartFolderBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartFolderBrowser`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    PartVolume: float = ...
    """
    Returns or sets  the product body volume 
    
    <hr>
    
    Getter Method
    
    Signature ``PartVolume`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartVolume`` 
    
    :param partVolume: 
    :type partVolume: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    SaveAndExportStatus: bool = ...
    """
    Returns or sets  the value that indicates whether to save part and export analysis data or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``SaveAndExportStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveAndExportStatus`` 
    
    :param status: 
    :type status: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    SelectionBaseFace: NXOpen.SelectFace = ...
    """
    Returns  the selected base face for analysis 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionBaseFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    SheetMetalThickness: float = ...
    """
    Returns or sets  the project area 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMetalThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetMetalThickness`` 
    
    :param thickness: 
    :type thickness: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    UnfoldedLength: float = ...
    """
    Returns or sets  the minimum wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``UnfoldedLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnfoldedLength`` 
    
    :param len: 
    :type len: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    UnfoldedWidth: float = ...
    """
    Returns or sets  the maximum wall thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``UnfoldedWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UnfoldedWidth`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    XDimension: float = ...
    """
    Returns or sets  the x dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``XDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XDimension`` 
    
    :param xLength: 
    :type xLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    XmlFolderBrowser: str = ...
    """
    Returns or sets  the folder in which output XML results can be found 
    
    <hr>
    
    Getter Method
    
    Signature ``XmlFolderBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XmlFolderBrowser`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    YDimension: float = ...
    """
    Returns or sets  the y dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``YDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YDimension`` 
    
    :param yLength: 
    :type yLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    ZDimension: float = ...
    """
    Returns or sets  the z dimension of product body 
    
    <hr>
    
    Getter Method
    
    Signature ``ZDimension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZDimension`` 
    
    :param zLength: 
    :type zLength: float 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    """
    Null: SheetMetalFeatureRecognitionBuilder = ...  # unknown typename


class SpecifyBaffleBuilderAttributeTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpecifyBaffleBuilderAttributeTypes():
    """
    Types to specify how to assign attributes to the selected body. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BodyAsChannel", "Cooling channel attributes assigned to the selected body."
       "BodyAsBaffle", "Cooling baffle attributes assigned to the selected body."
    """
    BodyAsChannel = 0  # SpecifyBaffleBuilderAttributeTypesMemberType
    BodyAsBaffle = 1  # SpecifyBaffleBuilderAttributeTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpecifyBaffleBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create specify baffle.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.SpecifyBaffleCollection.CreateBuilder`
    
    Default values.
    
    ==============  ==============
    Property        Value
    ==============  ==============
    AttributeType   BodyAsChannel 
    --------------  --------------
    Layer           1 
    ==============  ==============
    
    .. versionadded:: NX8.0.0
    """
    
    class AttributeTypes():
        """
        Types to specify how to assign attributes to the selected body. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BodyAsChannel", "Cooling channel attributes assigned to the selected body."
           "BodyAsBaffle", "Cooling baffle attributes assigned to the selected body."
        """
        BodyAsChannel = 0  # SpecifyBaffleBuilderAttributeTypesMemberType
        BodyAsBaffle = 1  # SpecifyBaffleBuilderAttributeTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    @typing.overload
    def GetChannelColor(self) -> None:
        """Returns or sets  the selected channel body color."""
        ...
    
    @typing.overload
    def GetChannelColor(self) -> NXOpen.NXColor:
        """
        Getter Method
        
        Signature ``ChannelColor`` 
        
        :returns: 
        :rtype: Id 
        
        .. versionadded:: NX8.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    @typing.overload
    def GetChannelColor(self, channelColor: NXOpen.NXColor) -> None:
        """
        Setter Method
        
        Signature ``ChannelColor`` 
        
        :param channelColor: 
        :type channelColor: Id 
        
        .. versionadded:: NX8.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    @typing.overload
    def GetChannelColor(self) -> tuple:
        """
        Returns color value for the selected channels. 
        
        Signature ``GetChannelColor()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (redValue, greenValue, blueValue). redValue is a float.   red value between 0 and 1 greenValue is a float.   green value between 0 and 1 blueValue is a float.   blue value between 0 and 1 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`Tooling.SpecifyBaffleBuilder.ChannelColor` instead.
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    @typing.overload
    def SetChannelColor(self) -> None:
        """Returns or sets  the selected channel body color."""
        ...
    
    @typing.overload
    def SetChannelColor(self, channelColor: NXOpen.NXColor) -> None:
        """
        Getter Method
        
        Signature ``ChannelColor`` 
        
        :param channelColor: 
        :type channelColor: Id 
        
        .. versionadded:: NX8.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    @typing.overload
    def SetChannelColor(self, channelColor: NXOpen.NXColor) -> None:
        """
        Setter Method
        
        Signature ``ChannelColor`` 
        
        :param channelColor: 
        :type channelColor: Id 
        
        .. versionadded:: NX8.0.1
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    @typing.overload
    def SetChannelColor(self, redValue: float, greenValue: float, blueValue: float) -> None:
        """
        Sets the channel color. 
        
        Signature ``SetChannelColor(redValue, greenValue, blueValue)`` 
        
        :param redValue:  red value between 0 and 1  
        :type redValue: float 
        :param greenValue:  green value between 0 and 1  
        :type greenValue: float 
        :param blueValue:  blue value between 0 and 1  
        :type blueValue: float 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.5.0
           Use :py:meth:`Tooling.SpecifyBaffleBuilder.ChannelColor` instead.
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    
    def SetColorModified(self, modified: bool) -> None:
        """
        Sets the color value modified or not.  
        
        Signature ``SetColorModified(modified)`` 
        
        :param modified: 
        :type modified: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD")
        """
        ...
    
    AttributeType: SpecifyBaffleBuilderAttributeTypes = ...
    """
    Returns or sets  the type of attributes conversion type values.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttributeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SpecifyBaffleBuilderAttributeTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    
    <hr>
    
    Setter Method
    
    Signature ``AttributeType`` 
    
    :param attrType: 
    :type attrType: :py:class:`NXOpen.Tooling.SpecifyBaffleBuilderAttributeTypes` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    ChannelColor: NXOpen.NXColor = ...
    """
    Returns or sets  the selected channel body color.  
    
    <hr>
    
    Getter Method
    
    Signature ``ChannelColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.1
    
    License requirements: ug_mold_design ("UG MOLD")
    
    <hr>
    
    Setter Method
    
    Signature ``ChannelColor`` 
    
    :param channelColor: 
    :type channelColor: Id 
    
    .. versionadded:: NX8.0.1
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    ChannelType: str = ...
    """
    Returns or sets  the type to specify the Cooling fittings types: oil, air or water.  
    
    <hr>
    
    Getter Method
    
    Signature ``ChannelType`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChannelType`` 
    
    :param channelType: 
    :type channelType: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Channels: NXOpen.SelectBodyList = ...
    """
    Returns  the channel or body to assign new attributes.  
    
    <hr>
    
    Getter Method
    
    Signature ``Channels`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Layer: int = ...
    """
    Returns or sets  the layer value for the selected channels.  
    
    <hr>
    
    Getter Method
    
    Signature ``Layer`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    
    <hr>
    
    Setter Method
    
    Signature ``Layer`` 
    
    :param layer: 
    :type layer: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD")
    """
    Null: SpecifyBaffleBuilder = ...  # unknown typename


class StripLayoutCollection(NXOpen.TaggedObjectCollection):
    """
    Contains the create functions for builders.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateStripLayoutBuilder(self) -> StripLayoutBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.StripLayoutBuilder`  
        
        Signature ``CreateStripLayoutBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.StripLayoutBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateStripLayoutStationInformationBuilder(self) -> StripLayoutStationInformationBuilder:
        """
        Creates a :py:class:`NXOpen.Tooling.StripLayoutStationInformationBuilder`  
        
        Signature ``CreateStripLayoutStationInformationBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.StripLayoutStationInformationBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    


class BlankLayoutCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.BlankLayoutBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBlankLayoutBuilder(self) -> BlankLayoutBuilder:
        """
        Creates create blank layout builder  
        
        Signature ``CreateBlankLayoutBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.BlankLayoutBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class MWMoldedPartValidationBuilderCalculateOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWMoldedPartValidationBuilderCalculateOption():
    """
    Calculation options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "KeepExisting", "calculate and keep existing properties on the faces"
       "EditRegionsOnly", "edit properties of region faces only"
       "ResetAll", "calculate and replace all properties for region faces"
    """
    KeepExisting = 0  # MWMoldedPartValidationBuilderCalculateOptionMemberType
    EditRegionsOnly = 1  # MWMoldedPartValidationBuilderCalculateOptionMemberType
    ResetAll = 2  # MWMoldedPartValidationBuilderCalculateOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWMoldedPartValidationBuilderAssignToRegionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWMoldedPartValidationBuilderAssignToRegion():
    """
    Options for assigning faces to the Cavity or Core region 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CavityRegion", "assign selected region faces to the Cavity region"
       "CoreRegion", "assign selected region faces to the Core region"
    """
    CavityRegion = 0  # MWMoldedPartValidationBuilderAssignToRegionMemberType
    CoreRegion = 1  # MWMoldedPartValidationBuilderAssignToRegionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWMoldedPartValidationBuilderCheckScopeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWMoldedPartValidationBuilderCheckScope():
    """
    Check scope for information 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FaceProperties", "face properties"
       "ModelProperties", "model properties"
       "SharpCorners", "sharp corners"
    """
    FaceProperties = 0  # MWMoldedPartValidationBuilderCheckScopeMemberType
    ModelProperties = 1  # MWMoldedPartValidationBuilderCheckScopeMemberType
    SharpCorners = 2  # MWMoldedPartValidationBuilderCheckScopeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWMoldedPartValidationBuilderRangeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MWMoldedPartValidationBuilderRangeType():
    """
    Range type for displaying small corner radius faces 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Uniform", "uniform range limit values"
       "Range", "user-defined range limit values"
       "Plain", "range limit values defined by tolerances"
    """
    Uniform = 0  # MWMoldedPartValidationBuilderRangeTypeMemberType
    Range = 1  # MWMoldedPartValidationBuilderRangeTypeMemberType
    Plain = 2  # MWMoldedPartValidationBuilderRangeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MWMoldedPartValidationBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to perform Molded Part Validation analysis.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.MWMoldedPartValidationManager.CreateMWMoldedPartValidationBuilder`
    
    Default values.
    
    ===================================  ===============
    Property                             Value
    ===================================  ===============
    CalculationOption                    KeepExisting 
    -----------------------------------  ---------------
    FaceDraftAngleLimit                  3 
    -----------------------------------  ---------------
    FaceHighlightSelectedFaces           1 
    -----------------------------------  ---------------
    FaceNonSelectedFacesTranslucency     0 
    -----------------------------------  ---------------
    FaceSelectAllFaces                   0 
    -----------------------------------  ---------------
    FaceSelectCrossoverFaces             0 
    -----------------------------------  ---------------
    FaceSelectNegativeFaces1             0 
    -----------------------------------  ---------------
    FaceSelectNegativeFaces2             0 
    -----------------------------------  ---------------
    FaceSelectPositiveFaces1             0 
    -----------------------------------  ---------------
    FaceSelectPositiveFaces2             0 
    -----------------------------------  ---------------
    FaceSelectUndercutAreas              0 
    -----------------------------------  ---------------
    FaceSelectUndercutEdges              0 
    -----------------------------------  ---------------
    FaceSelectVerticalFaces              0 
    -----------------------------------  ---------------
    FaceSelectedFacesTranslucency        0 
    -----------------------------------  ---------------
    InformationCheckScope                FaceProperties 
    -----------------------------------  ---------------
    InformationLowerLimit                0 
    -----------------------------------  ---------------
    InformationLowerLimitR01             5.5 
    -----------------------------------  ---------------
    InformationLowerLimitR02             5 
    -----------------------------------  ---------------
    InformationLowerLimitR03             4.5 
    -----------------------------------  ---------------
    InformationLowerLimitR04             4 
    -----------------------------------  ---------------
    InformationLowerLimitR05             3.5 
    -----------------------------------  ---------------
    InformationLowerLimitR06             3 
    -----------------------------------  ---------------
    InformationLowerLimitR07             2.5 
    -----------------------------------  ---------------
    InformationLowerLimitR08             2 
    -----------------------------------  ---------------
    InformationLowerLimitR09             1.5 
    -----------------------------------  ---------------
    InformationLowerLimitR10             1 
    -----------------------------------  ---------------
    InformationLowerLimitR11             0.5 
    -----------------------------------  ---------------
    InformationLowerLimitR12             0 
    -----------------------------------  ---------------
    InformationRangeType                 Uniform 
    -----------------------------------  ---------------
    InformationSharpAngleLimit           6 
    -----------------------------------  ---------------
    InformationShowBoundaryEdges         0 
    -----------------------------------  ---------------
    InformationShowRangeR01              0 
    -----------------------------------  ---------------
    InformationShowRangeR02              0 
    -----------------------------------  ---------------
    InformationShowRangeR03              0 
    -----------------------------------  ---------------
    InformationShowRangeR04              0 
    -----------------------------------  ---------------
    InformationShowRangeR05              0 
    -----------------------------------  ---------------
    InformationShowRangeR06              0 
    -----------------------------------  ---------------
    InformationShowRangeR07              0 
    -----------------------------------  ---------------
    InformationShowRangeR08              0 
    -----------------------------------  ---------------
    InformationShowRangeR09              0 
    -----------------------------------  ---------------
    InformationShowRangeR10              0 
    -----------------------------------  ---------------
    InformationShowRangeR11              0 
    -----------------------------------  ---------------
    InformationShowRangeR12              0 
    -----------------------------------  ---------------
    InformationShowSharpEdges            0 
    -----------------------------------  ---------------
    InformationUpperLimit                6 
    -----------------------------------  ---------------
    InformationUpperLimitR01             6 
    -----------------------------------  ---------------
    InformationUpperLimitR02             5.5 
    -----------------------------------  ---------------
    InformationUpperLimitR03             5 
    -----------------------------------  ---------------
    InformationUpperLimitR04             4.5 
    -----------------------------------  ---------------
    InformationUpperLimitR05             4 
    -----------------------------------  ---------------
    InformationUpperLimitR06             3.5 
    -----------------------------------  ---------------
    InformationUpperLimitR07             3 
    -----------------------------------  ---------------
    InformationUpperLimitR08             2.5 
    -----------------------------------  ---------------
    InformationUpperLimitR09             2 
    -----------------------------------  ---------------
    InformationUpperLimitR10             0.5 
    -----------------------------------  ---------------
    InformationUpperLimitR11             1 
    -----------------------------------  ---------------
    InformationUpperLimitR12             0.5 
    -----------------------------------  ---------------
    InformationUseSingleTolerance        0 
    -----------------------------------  ---------------
    RegionAssignToRegionOption           CavityRegion 
    -----------------------------------  ---------------
    RegionCavityRegionTranslucency       0 
    -----------------------------------  ---------------
    RegionCoreRegionTranslucency         0 
    -----------------------------------  ---------------
    RegionSelectCrossoverRegionFaces     0 
    -----------------------------------  ---------------
    RegionSelectCrossoverVerticalFaces   0 
    -----------------------------------  ---------------
    RegionSelectUnknownFaces             0 
    -----------------------------------  ---------------
    RegionShowIncompleteLoops            1 
    -----------------------------------  ---------------
    RegionShowInternalLoops              1 
    -----------------------------------  ---------------
    RegionShowPartingEdges               1 
    ===================================  ===============
    
    .. versionadded:: NX8.0.0
    """
    
    class CalculateOption():
        """
        Calculation options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "KeepExisting", "calculate and keep existing properties on the faces"
           "EditRegionsOnly", "edit properties of region faces only"
           "ResetAll", "calculate and replace all properties for region faces"
        """
        KeepExisting = 0  # MWMoldedPartValidationBuilderCalculateOptionMemberType
        EditRegionsOnly = 1  # MWMoldedPartValidationBuilderCalculateOptionMemberType
        ResetAll = 2  # MWMoldedPartValidationBuilderCalculateOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AssignToRegion():
        """
        Options for assigning faces to the Cavity or Core region 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CavityRegion", "assign selected region faces to the Cavity region"
           "CoreRegion", "assign selected region faces to the Core region"
        """
        CavityRegion = 0  # MWMoldedPartValidationBuilderAssignToRegionMemberType
        CoreRegion = 1  # MWMoldedPartValidationBuilderAssignToRegionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CheckScope():
        """
        Check scope for information 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FaceProperties", "face properties"
           "ModelProperties", "model properties"
           "SharpCorners", "sharp corners"
        """
        FaceProperties = 0  # MWMoldedPartValidationBuilderCheckScopeMemberType
        ModelProperties = 1  # MWMoldedPartValidationBuilderCheckScopeMemberType
        SharpCorners = 2  # MWMoldedPartValidationBuilderCheckScopeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RangeType():
        """
        Range type for displaying small corner radius faces 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Uniform", "uniform range limit values"
           "Range", "user-defined range limit values"
           "Plain", "range limit values defined by tolerances"
        """
        Uniform = 0  # MWMoldedPartValidationBuilderRangeTypeMemberType
        Range = 1  # MWMoldedPartValidationBuilderRangeTypeMemberType
        Plain = 2  # MWMoldedPartValidationBuilderRangeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Calculate(self) -> None:
        """
        Calculate button on the Calculate Tab page.  
        
        Signature ``Calculate()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def FaceSetAllFacesColor(self) -> None:
        """
        Action button for setting color on all faces on the Face Tab page.  
        
        Signature ``FaceSetAllFacesColor()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def ProcessFaceSplit(self) -> None:
        """
        Action button for invoking the Split Face command on the Face Tab page.  
        
        Signature ``ProcessFaceSplit()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def RegionSetRegionsColor(self) -> None:
        """
        Action button for setting color on the cavity, core and undefined region faces on the Region Tab page.  
        
        Signature ``RegionSetRegionsColor()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def UpdateEjectDirection(self) -> None:
        """
        Update the eject direction.  
        
        Signature ``UpdateEjectDirection()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def InitMpvData(self, changeBody: int) -> None:
        """
        Initialize the MPV data for performing analysis in Molded Part Validation.  
        
        Signature ``InitMpvData(changeBody)`` 
        
        :param changeBody:  0: No change in the selected body; 1: Change in the selected body; 2: Change in direction for the selected body.  
        :type changeBody: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def UpdateMpvData(self) -> None:
        """
        Update the MPV data used in performing analysis in Molded Part Validation whenever there are changes in data on dialog.  
        
        Signature ``UpdateMpvData()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def PerformModelPropertiesCalculation(self) -> None:
        """
        Perform model properties calculation if the calculation has not been performed before.  
        
        Signature ``PerformModelPropertiesCalculation()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def PerformSharpCornersCalculation(self) -> None:
        """
        Perform the sharp corners calculation if the calculation has not been performed before.  
        
        Signature ``PerformSharpCornersCalculation()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def UpdateSharpEdgesInformation(self) -> None:
        """
        Update the sharp edges information based on the new sharp angle limit which has been changed by the user.  
        
        Signature ``UpdateSharpEdgesInformation()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def UpdateSmallRadiusFacesInformation(self) -> None:
        """
        Update the small radius faces information based on the new range limits of the radius which has been changed by the user.  
        
        Signature ``UpdateSmallRadiusFacesInformation()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    
    def SetCalculationProductBody(self, calculationProductBody: NXOpen.Body) -> None:
        """
        Set the product body to be analyzed on the Calculate Tab page.  
        
        Signature ``SetCalculationProductBody(calculationProductBody)`` 
        
        :param calculationProductBody:  The product body  
        :type calculationProductBody: :py:class:`NXOpen.Body` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
        """
        ...
    
    ActiveTabPage: int = ...
    """
    Returns or sets  the active tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveTabPage`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveTabPage`` 
    
    :param activeTabPage: 
    :type activeTabPage: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    CalculationDrawDirection: NXOpen.Direction = ...
    """
    Returns or sets  the draw direction on the Calculate Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationDrawDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationDrawDirection`` 
    
    :param calculationDrawDirection: 
    :type calculationDrawDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    CalculationOption: MWMoldedPartValidationBuilderCalculateOption = ...
    """
    Returns or sets  the calculation option on the Calculate Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWMoldedPartValidationBuilderCalculateOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``CalculationOption`` 
    
    :param calculationOption: 
    :type calculationOption: :py:class:`NXOpen.Tooling.MWMoldedPartValidationBuilderCalculateOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    CalculationProductBody: NXOpen.SelectBody = ...
    """
    Returns  the product body to be analyzed on the Calculate Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``CalculationProductBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceAllFacesColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to all faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceAllFacesColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceAllFacesColor`` 
    
    :param faceAllFacesColor: 
    :type faceAllFacesColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceCrossoverFacesColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the crossover faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceCrossoverFacesColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceCrossoverFacesColor`` 
    
    :param faceCrossoverFacesColor: 
    :type faceCrossoverFacesColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceDraftAngleLimit: float = ...
    """
    Returns or sets  the draft angle limit on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceDraftAngleLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceDraftAngleLimit`` 
    
    :param faceDraftAngleLimit: 
    :type faceDraftAngleLimit: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceHighlightSelectedFaces: bool = ...
    """
    Returns or sets  the option for highlighting the selected faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceHighlightSelectedFaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceHighlightSelectedFaces`` 
    
    :param faceHighlightSelectedFaces: 
    :type faceHighlightSelectedFaces: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceNegativeFacesColor1: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the negative small radius faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceNegativeFacesColor1`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceNegativeFacesColor1`` 
    
    :param faceNegativeFacesColor1: 
    :type faceNegativeFacesColor1: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceNegativeFacesColor2: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the negative faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceNegativeFacesColor2`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceNegativeFacesColor2`` 
    
    :param faceNegativeFacesColor2: 
    :type faceNegativeFacesColor2: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceNonSelectedFacesTranslucency: int = ...
    """
    Returns or sets  the translucency for the non-selected faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceNonSelectedFacesTranslucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceNonSelectedFacesTranslucency`` 
    
    :param faceNonSelectedFacesTranslucency: 
    :type faceNonSelectedFacesTranslucency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FacePositiveFacesColor1: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the positive faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FacePositiveFacesColor1`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FacePositiveFacesColor1`` 
    
    :param facePositiveFacesColor1: 
    :type facePositiveFacesColor1: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FacePositiveFacesColor2: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the positive small radius faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FacePositiveFacesColor2`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FacePositiveFacesColor2`` 
    
    :param facePositiveFacesColor2: 
    :type facePositiveFacesColor2: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectAllFaces: bool = ...
    """
    Returns or sets  the option for turning on/off the selection of all faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectAllFaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectAllFaces`` 
    
    :param faceSelectAllFaces: 
    :type faceSelectAllFaces: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectCrossoverFaces: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the crossover faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectCrossoverFaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectCrossoverFaces`` 
    
    :param faceSelectCrossoverFaces: 
    :type faceSelectCrossoverFaces: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectNegativeFaces1: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the negative small radius faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectNegativeFaces1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectNegativeFaces1`` 
    
    :param faceSelectNegativeFaces1: 
    :type faceSelectNegativeFaces1: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectNegativeFaces2: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the negative faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectNegativeFaces2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectNegativeFaces2`` 
    
    :param faceSelectNegativeFaces2: 
    :type faceSelectNegativeFaces2: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectPositiveFaces1: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the positive faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectPositiveFaces1`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectPositiveFaces1`` 
    
    :param faceSelectPositiveFaces1: 
    :type faceSelectPositiveFaces1: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectPositiveFaces2: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the positive small radius faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectPositiveFaces2`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectPositiveFaces2`` 
    
    :param faceSelectPositiveFaces2: 
    :type faceSelectPositiveFaces2: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectUndercutAreas: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the undercut area faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectUndercutAreas`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectUndercutAreas`` 
    
    :param faceSelectUndercutAreas: 
    :type faceSelectUndercutAreas: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectUndercutEdges: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the undercut edges on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectUndercutEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectUndercutEdges`` 
    
    :param faceSelectUndercutEdges: 
    :type faceSelectUndercutEdges: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectVerticalFaces: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the vertical faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectVerticalFaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectVerticalFaces`` 
    
    :param faceSelectVerticalFaces: 
    :type faceSelectVerticalFaces: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceSelectedFacesTranslucency: int = ...
    """
    Returns or sets  the translucency for the selected faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceSelectedFacesTranslucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceSelectedFacesTranslucency`` 
    
    :param faceSelectedFacesTranslucency: 
    :type faceSelectedFacesTranslucency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceUndercutAreasColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the undercut area faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceUndercutAreasColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceUndercutAreasColor`` 
    
    :param faceUndercutAreasColor: 
    :type faceUndercutAreasColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceUndercutEdgesColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the undercut edges on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceUndercutEdgesColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceUndercutEdgesColor`` 
    
    :param faceUndercutEdgesColor: 
    :type faceUndercutEdgesColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    FaceVerticalFacesColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the vertical faces on the Face Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``FaceVerticalFacesColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``FaceVerticalFacesColor`` 
    
    :param faceVerticalFacesColor: 
    :type faceVerticalFacesColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InApplyStatus: int = ...
    """
    Returns or sets  the flag that indicates the Apply status of the command, needed only in the interactive environment.  
    
    0: "Apply" has not been done before; 1: "Apply" has been done before. 
    
    <hr>
    
    Getter Method
    
    Signature ``InApplyStatus`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InApplyStatus`` 
    
    :param inApplyStatus: 
    :type inApplyStatus: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationCheckScope: MWMoldedPartValidationBuilderCheckScope = ...
    """
    Returns or sets  the check scope on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationCheckScope`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWMoldedPartValidationBuilderCheckScope` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationCheckScope`` 
    
    :param informationCheckScope: 
    :type informationCheckScope: :py:class:`NXOpen.Tooling.MWMoldedPartValidationBuilderCheckScope` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR01: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 1 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR01`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR01`` 
    
    :param informationColorR01: 
    :type informationColorR01: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR02: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 2 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR02`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR02`` 
    
    :param informationColorR02: 
    :type informationColorR02: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR03: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 3 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR03`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR03`` 
    
    :param informationColorR03: 
    :type informationColorR03: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR04: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 4 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR04`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR04`` 
    
    :param informationColorR04: 
    :type informationColorR04: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR05: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 5 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR05`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR05`` 
    
    :param informationColorR05: 
    :type informationColorR05: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR06: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 6 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR06`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR06`` 
    
    :param informationColorR06: 
    :type informationColorR06: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR07: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 7 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR07`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR07`` 
    
    :param informationColorR07: 
    :type informationColorR07: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR08: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 8 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR08`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR08`` 
    
    :param informationColorR08: 
    :type informationColorR08: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR09: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 9 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR09`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR09`` 
    
    :param informationColorR09: 
    :type informationColorR09: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR10: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 10 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR10`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR10`` 
    
    :param informationColorR10: 
    :type informationColorR10: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR11: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 11 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR11`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR11`` 
    
    :param informationColorR11: 
    :type informationColorR11: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationColorR12: NXOpen.NXColor = ...
    """
    Returns or sets  the color of row 12 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationColorR12`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationColorR12`` 
    
    :param informationColorR12: 
    :type informationColorR12: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationInspectFace: NXOpen.SelectFace = ...
    """
    Returns  the face selected face for displaying the face properties.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationInspectFace`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFace` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimit: float = ...
    """
    Returns or sets  the lower limit of the range limit values on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimit`` 
    
    :param informationLowerLimit: 
    :type informationLowerLimit: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR01: float = ...
    """
    Returns or sets  the lower limit of row 1 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR01`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR01`` 
    
    :param informationLowerLimitR01: 
    :type informationLowerLimitR01: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR02: float = ...
    """
    Returns or sets  the lower limit of row 2 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR02`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR02`` 
    
    :param informationLowerLimitR02: 
    :type informationLowerLimitR02: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR03: float = ...
    """
    Returns or sets  the lower limit of row 3 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR03`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR03`` 
    
    :param informationLowerLimitR03: 
    :type informationLowerLimitR03: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR04: float = ...
    """
    Returns or sets  the lower limit of row 4 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR04`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR04`` 
    
    :param informationLowerLimitR04: 
    :type informationLowerLimitR04: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR05: float = ...
    """
    Returns or sets  the lower limit of row 5 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR05`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR05`` 
    
    :param informationLowerLimitR05: 
    :type informationLowerLimitR05: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR06: float = ...
    """
    Returns or sets  the lower limit of row 6 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR06`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR06`` 
    
    :param informationLowerLimitR06: 
    :type informationLowerLimitR06: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR07: float = ...
    """
    Returns or sets  the lower limit of row 7 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR07`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR07`` 
    
    :param informationLowerLimitR07: 
    :type informationLowerLimitR07: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR08: float = ...
    """
    Returns or sets  the lower limit of row 8 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR08`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR08`` 
    
    :param informationLowerLimitR08: 
    :type informationLowerLimitR08: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR09: float = ...
    """
    Returns or sets  the lower limit of row 9 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR09`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR09`` 
    
    :param informationLowerLimitR09: 
    :type informationLowerLimitR09: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR10: float = ...
    """
    Returns or sets  the lower limit of row 10 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR10`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR10`` 
    
    :param informationLowerLimitR10: 
    :type informationLowerLimitR10: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR11: float = ...
    """
    Returns or sets  the lower limit of row 11 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR11`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR11`` 
    
    :param informationLowerLimitR11: 
    :type informationLowerLimitR11: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationLowerLimitR12: float = ...
    """
    Returns or sets  the lower limit of row 12 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationLowerLimitR12`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationLowerLimitR12`` 
    
    :param informationLowerLimitR12: 
    :type informationLowerLimitR12: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationRangeType: MWMoldedPartValidationBuilderRangeType = ...
    """
    Returns or sets  the range type on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationRangeType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWMoldedPartValidationBuilderRangeType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationRangeType`` 
    
    :param informationRangeType: 
    :type informationRangeType: :py:class:`NXOpen.Tooling.MWMoldedPartValidationBuilderRangeType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationSharpAngleLimit: float = ...
    """
    Returns or sets  the sharp angle limit on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationSharpAngleLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationSharpAngleLimit`` 
    
    :param informationSharpAngleLimit: 
    :type informationSharpAngleLimit: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowBoundaryEdges: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the boundary edges of the sheet body on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowBoundaryEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowBoundaryEdges`` 
    
    :param informationShowBoundaryEdges: 
    :type informationShowBoundaryEdges: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR01: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 1 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR01`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR01`` 
    
    :param informationShowRangeR01: 
    :type informationShowRangeR01: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR02: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 2 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR02`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR02`` 
    
    :param informationShowRangeR02: 
    :type informationShowRangeR02: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR03: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 3 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR03`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR03`` 
    
    :param informationShowRangeR03: 
    :type informationShowRangeR03: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR04: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 4 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR04`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR04`` 
    
    :param informationShowRangeR04: 
    :type informationShowRangeR04: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR05: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 5 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR05`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR05`` 
    
    :param informationShowRangeR05: 
    :type informationShowRangeR05: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR06: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 6 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR06`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR06`` 
    
    :param informationShowRangeR06: 
    :type informationShowRangeR06: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR07: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 7 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR07`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR07`` 
    
    :param informationShowRangeR07: 
    :type informationShowRangeR07: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR08: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 8 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR08`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR08`` 
    
    :param informationShowRangeR08: 
    :type informationShowRangeR08: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR09: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 9 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR09`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR09`` 
    
    :param informationShowRangeR09: 
    :type informationShowRangeR09: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR10: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 10 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR10`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR10`` 
    
    :param informationShowRangeR10: 
    :type informationShowRangeR10: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR11: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 11 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR11`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR11`` 
    
    :param informationShowRangeR11: 
    :type informationShowRangeR11: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowRangeR12: bool = ...
    """
    Returns or sets  the option of selecting the small radius faces within the range limit values of row 12 on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowRangeR12`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowRangeR12`` 
    
    :param informationShowRangeR12: 
    :type informationShowRangeR12: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationShowSharpEdges: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the sharp edges of the sheet body on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationShowSharpEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationShowSharpEdges`` 
    
    :param informationShowSharpEdges: 
    :type informationShowSharpEdges: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimit: float = ...
    """
    Returns or sets  the upper limit on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimit`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimit`` 
    
    :param informationUpperLimit: 
    :type informationUpperLimit: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR01: float = ...
    """
    Returns or sets  the upper limit of row 1 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR01`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR01`` 
    
    :param informationUpperLimitR01: 
    :type informationUpperLimitR01: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR02: float = ...
    """
    Returns or sets  the upper limit of row 2 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR02`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR02`` 
    
    :param informationUpperLimitR02: 
    :type informationUpperLimitR02: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR03: float = ...
    """
    Returns or sets  the upper limit of row 3 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR03`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR03`` 
    
    :param informationUpperLimitR03: 
    :type informationUpperLimitR03: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR04: float = ...
    """
    Returns or sets  the upper limit of row 4 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR04`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR04`` 
    
    :param informationUpperLimitR04: 
    :type informationUpperLimitR04: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR05: float = ...
    """
    Returns or sets  the upper limit of row 5 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR05`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR05`` 
    
    :param informationUpperLimitR05: 
    :type informationUpperLimitR05: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR06: float = ...
    """
    Returns or sets  the upper limit of row 6 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR06`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR06`` 
    
    :param informationUpperLimitR06: 
    :type informationUpperLimitR06: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR07: float = ...
    """
    Returns or sets  the upper limit of row 7 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR07`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR07`` 
    
    :param informationUpperLimitR07: 
    :type informationUpperLimitR07: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR08: float = ...
    """
    Returns or sets  the upper limit of row 8 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR08`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR08`` 
    
    :param informationUpperLimitR08: 
    :type informationUpperLimitR08: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR09: float = ...
    """
    Returns or sets  the upper limit of row 9 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR09`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR09`` 
    
    :param informationUpperLimitR09: 
    :type informationUpperLimitR09: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR10: float = ...
    """
    Returns or sets  the upper limit of row 10 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR10`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR10`` 
    
    :param informationUpperLimitR10: 
    :type informationUpperLimitR10: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR11: float = ...
    """
    Returns or sets  the upper limit of row 11 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR11`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR11`` 
    
    :param informationUpperLimitR11: 
    :type informationUpperLimitR11: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUpperLimitR12: float = ...
    """
    Returns or sets  the upper limit of row 12 for the small radius faces on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUpperLimitR12`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUpperLimitR12`` 
    
    :param informationUpperLimitR12: 
    :type informationUpperLimitR12: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    InformationUseSingleTolerance: bool = ...
    """
    Returns or sets  the option for using a single tolerance for defining the range limit values on the Information Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``InformationUseSingleTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``InformationUseSingleTolerance`` 
    
    :param informationUseSingleTolerance: 
    :type informationUseSingleTolerance: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionAssignToRegionOption: MWMoldedPartValidationBuilderAssignToRegion = ...
    """
    Returns or sets  the option for assigning the selected region faces to the cavity or core region on the Region Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionAssignToRegionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.MWMoldedPartValidationBuilderAssignToRegion` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionAssignToRegionOption`` 
    
    :param regionAssignToRegionOption: 
    :type regionAssignToRegionOption: :py:class:`NXOpen.Tooling.MWMoldedPartValidationBuilderAssignToRegion` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionCavityRegionColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the cavity region faces on the Region Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionCavityRegionColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionCavityRegionColor`` 
    
    :param regionCavityRegionColor: 
    :type regionCavityRegionColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionCavityRegionTranslucency: int = ...
    """
    Returns or sets  the translucency for applying to the cavity region faces on the Region Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionCavityRegionTranslucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionCavityRegionTranslucency`` 
    
    :param regionCavityRegionTranslucency: 
    :type regionCavityRegionTranslucency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionCoreRegionColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the core region faces on the Region Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionCoreRegionColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionCoreRegionColor`` 
    
    :param regionCoreRegionColor: 
    :type regionCoreRegionColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionCoreRegionTranslucency: int = ...
    """
    Returns or sets  the translucency for applying to the core region faces on the Region Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionCoreRegionTranslucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionCoreRegionTranslucency`` 
    
    :param regionCoreRegionTranslucency: 
    :type regionCoreRegionTranslucency: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the faces selected for assigning to the cavity or core region.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionSelectCrossoverRegionFaces: bool = ...
    """
    Returns or sets  the option for including or removing the crossover region faces in the selection on the Region Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionSelectCrossoverRegionFaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionSelectCrossoverRegionFaces`` 
    
    :param regionSelectCrossoverRegionFaces: 
    :type regionSelectCrossoverRegionFaces: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionSelectCrossoverVerticalFaces: bool = ...
    """
    Returns or sets  the option for including or removing the crossover vertical faces in the selection on the Region Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionSelectCrossoverVerticalFaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionSelectCrossoverVerticalFaces`` 
    
    :param regionSelectCrossoverVerticalFaces: 
    :type regionSelectCrossoverVerticalFaces: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionSelectUnknownFaces: bool = ...
    """
    Returns or sets  the option for including or removing the unknown faces in the selection on the Region Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionSelectUnknownFaces`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionSelectUnknownFaces`` 
    
    :param regionSelectUnknownFaces: 
    :type regionSelectUnknownFaces: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionShowIncompleteLoops: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the incomplete loop edges.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionShowIncompleteLoops`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionShowIncompleteLoops`` 
    
    :param regionShowIncompleteLoops: 
    :type regionShowIncompleteLoops: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionShowInternalLoops: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the internal loop edges.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionShowInternalLoops`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionShowInternalLoops`` 
    
    :param regionShowInternalLoops: 
    :type regionShowInternalLoops: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionShowPartingEdges: bool = ...
    """
    Returns or sets  the option for turning on/off the highlight of the parting edges.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionShowPartingEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionShowPartingEdges`` 
    
    :param regionShowPartingEdges: 
    :type regionShowPartingEdges: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    RegionUndefinedRegionColor: NXOpen.NXColor = ...
    """
    Returns or sets  the color for applying to the undefined region faces on the Region Tab page.  
    
    <hr>
    
    Getter Method
    
    Signature ``RegionUndefinedRegionColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    
    <hr>
    
    Setter Method
    
    Signature ``RegionUndefinedRegionColor`` 
    
    :param regionUndefinedRegionColor: 
    :type regionUndefinedRegionColor: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: ug_mold_design ("UG MOLD") OR ug_prod_des_advisor ("Product Design Advisor") OR prog_die_wizard ("UG/Progressive Die Wizard") OR die_engineering ("DIE ENGINEERING") OR ug_die_design ("Die Design") OR nx_electrode_wizard ("NX Electrode Wizard")
    """
    Null: MWMoldedPartValidationBuilder = ...  # unknown typename


class IntermediateStageBuilderDesignSequencesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class IntermediateStageBuilderDesignSequences():
    """
    The types of design sequences  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PartToBlank", "design sequence from part to blank"
       "BlankToPart", "design sequence from blank to part"
    """
    PartToBlank = 0  # IntermediateStageBuilderDesignSequencesMemberType
    BlankToPart = 1  # IntermediateStageBuilderDesignSequencesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IntermediateStageBuilderOrientationsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class IntermediateStageBuilderOrientations():
    """
    The types of orientation of intermediate stages  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "X", "orientation X"
       "Y", "orientation Y"
       "Z", "orientation Z"
    """
    X = 0  # IntermediateStageBuilderOrientationsMemberType
    Y = 1  # IntermediateStageBuilderOrientationsMemberType
    Z = 2  # IntermediateStageBuilderOrientationsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IntermediateStageBuilderEditOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class IntermediateStageBuilderEditOptions():
    """
    The types of changed intermediate stages  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Insert", "Insert new intermediate stage type"
       "Delete", "Delete current intermediate stage type"
    """
    Insert = 0  # IntermediateStageBuilderEditOptionsMemberType
    Delete = 1  # IntermediateStageBuilderEditOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class IntermediateStageBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Tooling.IntermediateStageBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.IntermediateStageCollection.CreateIntermediateStageBuilder`
    
    Default values.
    
    ===================  ============
    Property             Value
    ===================  ============
    DesignSequence       PartToBlank 
    -------------------  ------------
    EditOption           Insert 
    -------------------  ------------
    IntermediateRename   0 
    -------------------  ------------
    LinkSheetBody        0 
    -------------------  ------------
    NumberIntermediate   1 
    -------------------  ------------
    OrientPitch          X 
    -------------------  ------------
    Pitch                0 
    -------------------  ------------
    StartStation         2 
    ===================  ============
    
    .. versionadded:: NX8.5.0
    """
    
    class DesignSequences():
        """
        The types of design sequences  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PartToBlank", "design sequence from part to blank"
           "BlankToPart", "design sequence from blank to part"
        """
        PartToBlank = 0  # IntermediateStageBuilderDesignSequencesMemberType
        BlankToPart = 1  # IntermediateStageBuilderDesignSequencesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Orientations():
        """
        The types of orientation of intermediate stages  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "X", "orientation X"
           "Y", "orientation Y"
           "Z", "orientation Z"
        """
        X = 0  # IntermediateStageBuilderOrientationsMemberType
        Y = 1  # IntermediateStageBuilderOrientationsMemberType
        Z = 2  # IntermediateStageBuilderOrientationsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EditOptions():
        """
        The types of changed intermediate stages  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Insert", "Insert new intermediate stage type"
           "Delete", "Delete current intermediate stage type"
        """
        Insert = 0  # IntermediateStageBuilderEditOptionsMemberType
        Delete = 1  # IntermediateStageBuilderEditOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CreateCopyPart: bool = ...
    """
    Returns or sets  the switch of whether to create a copy part.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateCopyPart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateCopyPart`` 
    
    :param createCopyPart: 
    :type createCopyPart: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    DesignSequence: IntermediateStageBuilderDesignSequences = ...
    """
    Returns or sets  the design sequence.  
    
    <hr>
    
    Getter Method
    
    Signature ``DesignSequence`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.IntermediateStageBuilderDesignSequences` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DesignSequence`` 
    
    :param designSequence: 
    :type designSequence: :py:class:`NXOpen.Tooling.IntermediateStageBuilderDesignSequences` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    EditOption: IntermediateStageBuilderEditOptions = ...
    """
    Returns or sets  the edit intermediate stage option.  
    
    <hr>
    
    Getter Method
    
    Signature ``EditOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.IntermediateStageBuilderEditOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditOption`` 
    
    :param editOption: 
    :type editOption: :py:class:`NXOpen.Tooling.IntermediateStageBuilderEditOptions` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IntermediateNamingRule: str = ...
    """
    Returns or sets  the naming rule of intermediate stages.  
    
    <hr>
    
    Getter Method
    
    Signature ``IntermediateNamingRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntermediateNamingRule`` 
    
    :param intermediateNamingRule: 
    :type intermediateNamingRule: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IntermediateRename: bool = ...
    """
    Returns or sets  the switch of rename components.  
    
    <hr>
    
    Getter Method
    
    Signature ``IntermediateRename`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IntermediateRename`` 
    
    :param intermediateRename: 
    :type intermediateRename: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    IntermediateStage: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the intermediate stages selected as the reference of insert.  
    
    <hr>
    
    Getter Method
    
    Signature ``IntermediateStage`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    LinkSheetBody: bool = ...
    """
    Returns or sets  the switch of link sheet body to intermediate stage.  
    
    <hr>
    
    Getter Method
    
    Signature ``LinkSheetBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinkSheetBody`` 
    
    :param linkSheetBody: 
    :type linkSheetBody: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    NumberIntermediate: int = ...
    """
    Returns or sets  the number of intermediate stages.  
    
    <hr>
    
    Getter Method
    
    Signature ``NumberIntermediate`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NumberIntermediate`` 
    
    :param numberIntermediate: 
    :type numberIntermediate: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    OrientPitch: IntermediateStageBuilderOrientations = ...
    """
    Returns or sets  the orientation of pitch.  
    
    <hr>
    
    Getter Method
    
    Signature ``OrientPitch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.IntermediateStageBuilderOrientations` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientPitch`` 
    
    :param orientPitch: 
    :type orientPitch: :py:class:`NXOpen.Tooling.IntermediateStageBuilderOrientations` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Pitch: float = ...
    """
    Returns or sets  the pitch.  
    
    <hr>
    
    Getter Method
    
    Signature ``Pitch`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Pitch`` 
    
    :param pitch: 
    :type pitch: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    StartStation: int = ...
    """
    Returns or sets  the start station.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartStation`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StartStation`` 
    
    :param startStation: 
    :type startStation: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    TopPartName: str = ...
    """
    Returns or sets  the top part name.  
    
    <hr>
    
    Getter Method
    
    Signature ``TopPartName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TopPartName`` 
    
    :param topPartName: 
    :type topPartName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
    """
    Null: IntermediateStageBuilder = ...  # unknown typename


class SplitSolidCollection(NXOpen.TaggedObjectCollection):
    """
    Creates SplitSolid builder collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSplitSolidBuilder(self) -> SplitSolidBuilder:
        """
        Creates split solid builder  
        
        Signature ``CreateSplitSolidBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.SplitSolidBuilder` 
        
        .. versionadded:: NX7.0.0
        
        License requirements: None.
        """
        ...
    


class DieDesignTrimPostBuilder(NXOpen.Builder):
    """
    Represents a Trim Post builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieDesignTrimPostBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def SeedPointInfo(self, seedPoint: 'list[float]', seedTangent: 'list[float]') -> None:
        """
        Sets seed point information.  
        
        Signature ``SeedPointInfo(seedPoint, seedTangent)`` 
        
        :param seedPoint: 
        :type seedPoint: list of float 
        :param seedTangent: 
        :type seedTangent: list of float 
        
        .. versionadded:: NX9.0.0
        
        License requirements: ug_die_design ("Die Design")
        """
        ...
    
    BasePlane: NXOpen.Plane = ...
    """
    Returns or sets  the base plane used to create Trim Post
    
    <hr>
    
    Getter Method
    
    Signature ``BasePlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BasePlane`` 
    
    :param basePlane: 
    :type basePlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BeltThickness: float = ...
    """
    Returns or sets  the belt thickness parameter of Trim Post section 
    
    <hr>
    
    Getter Method
    
    Signature ``BeltThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``BeltThickness`` 
    
    :param beltThickness: 
    :type beltThickness: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    BoundaryCurves: NXOpen.Section = ...
    """
    Returns  the boundary curves used to create Trim Post
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryCurves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CAMRelief: float = ...
    """
    Returns or sets  the cam relief parameter of Trim Post section 
    
    <hr>
    
    Getter Method
    
    Signature ``CAMRelief`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CAMRelief`` 
    
    :param camRelief: 
    :type camRelief: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    CamDirection: NXOpen.Direction = ...
    """
    Returns or sets  the cam direction used to create Trim Post 
    
    <hr>
    
    Getter Method
    
    Signature ``CamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``CamDirection`` 
    
    :param camDirection: 
    :type camDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    MachineAllowance: float = ...
    """
    Returns or sets  the machine allowance used to rough offset product sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``MachineAllowance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``MachineAllowance`` 
    
    :param machineAllowance: 
    :type machineAllowance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Product: NXOpen.SelectBody = ...
    """
    Returns  the product selection 
    
    <hr>
    
    Getter Method
    
    Signature ``Product`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Profiles: NXOpen.SelectNXObjectList = ...
    """
    Returns  the trim profiles used to create Trim Post 
    
    <hr>
    
    Getter Method
    
    Signature ``Profiles`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    ProfilesDirection: bool = ...
    """
    Returns or sets  the trim profiles direction used to determine which side the Trim Post will be built,
    is true in the direction and false in the opposite direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ProfilesDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``ProfilesDirection`` 
    
    :param profilesDirection: 
    :type profilesDirection: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    UseApproxSheetBody: bool = ...
    """
    Returns or sets  the option to use the original sheet body or the rough offset sheet instead.  
    
    The original sheet body is the user specified product body, which will be
    used to create the trim post features.
    When value is true, the original sheet body will be used,
    when value is false, the rough offset sheet will be used.
    
    <hr>
    
    Getter Method
    
    Signature ``UseApproxSheetBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    
    <hr>
    
    Setter Method
    
    Signature ``UseApproxSheetBody`` 
    
    :param useExtractSheetBody: 
    :type useExtractSheetBody: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: ug_die_design ("Die Design")
    """
    Null: DieDesignTrimPostBuilder = ...  # unknown typename


class PiercingInsertCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a :py:class:`NXOpen.Tooling.PiercingInsertBuilder`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePiercingInsertBuilder(self) -> PiercingInsertBuilder:
        """
        Creates create piercing insert builder  
        
        Signature ``CreatePiercingInsertBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.PiercingInsertBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: prog_die_wizard ("UG/Progressive Die Wizard")
        """
        ...
    


class DieEngTrimTaskBuilderTrimTaskCamTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngTrimTaskBuilderTrimTaskCamType():
    """
    the trim task cam type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AerialCam", " - "
       "BaseMountedCam", " - "
       "Direct", " - "
    """
    AerialCam = 0  # DieEngTrimTaskBuilderTrimTaskCamTypeMemberType
    BaseMountedCam = 1  # DieEngTrimTaskBuilderTrimTaskCamTypeMemberType
    Direct = 2  # DieEngTrimTaskBuilderTrimTaskCamTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngTrimTaskBuilderTrimTaskMatchCutTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngTrimTaskBuilderTrimTaskMatchCutType():
    """
    the trim task match cut type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Start", " - "
       "End", " - "
       "Both", " - "
    """
    NotSet = 0  # DieEngTrimTaskBuilderTrimTaskMatchCutTypeMemberType
    Start = 1  # DieEngTrimTaskBuilderTrimTaskMatchCutTypeMemberType
    End = 2  # DieEngTrimTaskBuilderTrimTaskMatchCutTypeMemberType
    Both = 3  # DieEngTrimTaskBuilderTrimTaskMatchCutTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngTrimTaskBuilder(NXOpen.Features.FeatureBuilder):
    """
    Die Engineer trim task management builder, create a trim task by selected die tip, trim bounds,
    start plane and end plane.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieEngTrimTaskBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class TrimTaskCamType():
        """
        the trim task cam type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AerialCam", " - "
           "BaseMountedCam", " - "
           "Direct", " - "
        """
        AerialCam = 0  # DieEngTrimTaskBuilderTrimTaskCamTypeMemberType
        BaseMountedCam = 1  # DieEngTrimTaskBuilderTrimTaskCamTypeMemberType
        Direct = 2  # DieEngTrimTaskBuilderTrimTaskCamTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TrimTaskMatchCutType():
        """
        the trim task match cut type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Start", " - "
           "End", " - "
           "Both", " - "
        """
        NotSet = 0  # DieEngTrimTaskBuilderTrimTaskMatchCutTypeMemberType
        Start = 1  # DieEngTrimTaskBuilderTrimTaskMatchCutTypeMemberType
        End = 2  # DieEngTrimTaskBuilderTrimTaskMatchCutTypeMemberType
        Both = 3  # DieEngTrimTaskBuilderTrimTaskMatchCutTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SwitchTrimSide(self) -> None:
        """
        Switch trim side.  
        
        When trim profile and trim planes are selected, there will be a default trim side,
        if the other side want to be trimmed out, should call this to switch it.
        
        Signature ``SwitchTrimSide()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetMatchCutNotchOffset(self, notchOffset: float) -> None:
        """
        Sets the match cut dimension notch offset value.  
        
        Signature ``SetMatchCutNotchOffset(notchOffset)`` 
        
        :param notchOffset: 
        :type notchOffset: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetMatchCutFirstRadius(self, firstRadius: float) -> None:
        """
        Sets the match cut dimension first radius value.  
        
        Signature ``SetMatchCutFirstRadius(firstRadius)`` 
        
        :param firstRadius: 
        :type firstRadius: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetMatchCutSecondRadius(self, secondRadius: float) -> None:
        """
        Sets the match cut dimension second radius value.  
        
        Signature ``SetMatchCutSecondRadius(secondRadius)`` 
        
        :param secondRadius: 
        :type secondRadius: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetMatchCutThirdRadius(self, thirdRadius: float) -> None:
        """
        Sets the match cut dimension third radius value.  
        
        Signature ``SetMatchCutThirdRadius(thirdRadius)`` 
        
        :param thirdRadius: 
        :type thirdRadius: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetMatchCutOffsetLength(self, offsetLength: float) -> None:
        """
        Sets the match cut dimension offset length value.  
        
        Signature ``SetMatchCutOffsetLength(offsetLength)`` 
        
        :param offsetLength: 
        :type offsetLength: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetMatchCutAngle(self, angle: float) -> None:
        """
        Sets the match cut dimension angle value.  
        
        Signature ``SetMatchCutAngle(angle)`` 
        
        :param angle: 
        :type angle: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetMatchCutScrapCutterLength(self, scrapCutterLength: float) -> None:
        """
        Sets the match cut dimension scrap cutter length value.  
        
        Signature ``SetMatchCutScrapCutterLength(scrapCutterLength)`` 
        
        :param scrapCutterLength: 
        :type scrapCutterLength: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetMatchCutOffsetFromPlane(self, offsetFromPlane: float) -> None:
        """
        Sets the match cut dimension offset from plane value.  
        
        Signature ``SetMatchCutOffsetFromPlane(offsetFromPlane)`` 
        
        :param offsetFromPlane: 
        :type offsetFromPlane: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetUsePlaneOffset(self, useOffset: bool) -> None:
        """
        Sets the match cut dimension use plane offset value.  
        
        Signature ``SetUsePlaneOffset(useOffset)`` 
        
        :param useOffset: 
        :type useOffset: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    CamType: DieEngTrimTaskBuilderTrimTaskCamType = ...
    """
    Returns or sets  the cam type.  
    
    <hr>
    
    Getter Method
    
    Signature ``CamType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieEngTrimTaskBuilderTrimTaskCamType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CamType`` 
    
    :param camType: 
    :type camType: :py:class:`NXOpen.Tooling.DieEngTrimTaskBuilderTrimTaskCamType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    CreateScrap: bool = ...
    """
    Returns or sets  the create scrap.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateScrap`` 
    
    :returns:  if trim task create scrap, this will be true, or else this will be false.  
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``CreateScrap`` 
    
    :param createScrap:  if set to true, trim task will create scrap, or else not create scrap.  
    :type createScrap: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    EndPlaneSelected: bool = ...
    """
    Returns or sets  the end plane selected.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndPlaneSelected`` 
    
    :returns:  if end plane is selected, this will be true, or else this will be false.  
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``EndPlaneSelected`` 
    
    :param endPlaneSelected:  if set to true, hints that end plane is selected, or else not selected.  
    :type endPlaneSelected: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    FinishOperation: bool = ...
    """
    Returns or sets  the finish operation.  
    
    <hr>
    
    Getter Method
    
    Signature ``FinishOperation`` 
    
    :returns:  if trim task is finish operation, this will be true, or else this will be false.  
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``FinishOperation`` 
    
    :param finishOperation:  if set to true, trim task will be finish operation, or else it is not finish operation.  
    :type finishOperation: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    LayoutFlange: bool = ...
    """
    Returns or sets  the layout flange.  
    
    <hr>
    
    Getter Method
    
    Signature ``LayoutFlange`` 
    
    :returns:  if trim task layout flange, this will be true, or else this will be false.  
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``LayoutFlange`` 
    
    :param layoutFlange:  if set to true, trim task will layout flange, or else not layout flange.  
    :type layoutFlange: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    MatchCut: DieEngTrimTaskBuilderTrimTaskMatchCutType = ...
    """
    Returns or sets  the match cut.  
    
    <hr>
    
    Getter Method
    
    Signature ``MatchCut`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieEngTrimTaskBuilderTrimTaskMatchCutType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``MatchCut`` 
    
    :param matchCut: 
    :type matchCut: :py:class:`NXOpen.Tooling.DieEngTrimTaskBuilderTrimTaskMatchCutType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SelectCamDirection: NXOpen.Direction = ...
    """
    Returns or sets  the selected cam direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectCamDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectCamDirection`` 
    
    :param selectCamDirection: 
    :type selectCamDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SelectDieTip: NXOpen.Features.SelectFeature = ...
    """
    Returns  the selected die tip.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectDieTip`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Features.SelectFeature` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SelectEndPlane: NXOpen.Plane = ...
    """
    Returns or sets  the selected end plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectEndPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectEndPlane`` 
    
    :param selectEndPlane: 
    :type selectEndPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SelectScrapCutters: NXOpen.SelectIBasePlaneList = ...
    """
    Returns  the selected scrap cutters.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectScrapCutters`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectIBasePlaneList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SelectStartPlane: NXOpen.Plane = ...
    """
    Returns or sets  the selected start plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectStartPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectStartPlane`` 
    
    :param selectStartPlane: 
    :type selectStartPlane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SelectTrimBounds: NXOpen.ScCollector = ...
    """
    Returns  the selected trim bounds.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectTrimBounds`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    StartPlaneSelected: bool = ...
    """
    Returns or sets  the start plane selected.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartPlaneSelected`` 
    
    :returns:  if start plane is selected, this will be true, or else this will be false.  
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``StartPlaneSelected`` 
    
    :param startPlaneSelected:  if set to true, hints that start plane is selected, or else not selected.  
    :type startPlaneSelected: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimDirection: bool = ...
    """
    Returns or sets  the trim direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimDirection`` 
    
    :param trimDirection: 
    :type trimDirection: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimNewDieFace: bool = ...
    """
    Returns or sets  the trim new die face, from NX10.  
    
    0 new stamping output can import one new die face to die engineer process.
    If this trim task will trim this new die face, set trimNewDieFace to true, or else set it to false. 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimNewDieFace`` 
    
    :returns:  if pierce task performs on new die face, this will be true, or else this will be false.  
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimNewDieFace`` 
    
    :param trimNewDieFace:  if set to true, pierce task performs on new die face, or else it will perform on original die face.  
    :type trimNewDieFace: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TrimTolerance: float = ...
    """
    Returns or sets  the trim task tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``TrimTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    
    <hr>
    
    Setter Method
    
    Signature ``TrimTolerance`` 
    
    :param trimTolerance: 
    :type trimTolerance: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    Null: DieEngTrimTaskBuilder = ...  # unknown typename


class SolidPatchBuilderSolidPatchTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SolidPatchBuilderSolidPatchType():
    """
    Settings of the solid patch creation types.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SolidPatch", "Solid patch type indicates to create solid patch"
       "LinkBody", "Link body type indicates to create link body"
    """
    SolidPatch = 0  # SolidPatchBuilderSolidPatchTypeMemberType
    LinkBody = 1  # SolidPatchBuilderSolidPatchTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SolidPatchBuilder(NXOpen.Builder):
    """
    Represents a builder to be used to create a solid patch.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.SolidPatchCollection.CreateBuilder`
    
    Default values.
    
    ==========  ===========
    Property    Value
    ==========  ===========
    PatchType   SolidPatch 
    ----------  -----------
    Subtract    0 
    ==========  ===========
    
    .. versionadded:: NX7.5.0
    """
    
    class SolidPatchType():
        """
        Settings of the solid patch creation types.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SolidPatch", "Solid patch type indicates to create solid patch"
           "LinkBody", "Link body type indicates to create link body"
        """
        SolidPatch = 0  # SolidPatchBuilderSolidPatchTypeMemberType
        LinkBody = 1  # SolidPatchBuilderSolidPatchTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ShowResult(self) -> None:
        """
        Show result button to write the patch and link this information to the list window.  
        
        Signature ``ShowResult()`` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    Patch: NXOpen.SelectBodyList = ...
    """
    Returns  the tool bodies selected as linked source bodies for patching up the target body.  
    
    <hr>
    
    Getter Method
    
    Signature ``Patch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    PatchType: SolidPatchBuilderSolidPatchType = ...
    """
    Returns or sets  the patch type of the solid patch creation.  
    
    <hr>
    
    Getter Method
    
    Signature ``PatchType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.SolidPatchBuilderSolidPatchType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PatchType`` 
    
    :param patchType: 
    :type patchType: :py:class:`NXOpen.Tooling.SolidPatchBuilderSolidPatchType` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Product: NXOpen.SelectBody = ...
    """
    Returns  the product body selected as the target body for unite with tool bodies.  
    
    <hr>
    
    Getter Method
    
    Signature ``Product`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Subtract: bool = ...
    """
    Returns or sets  the toggle for indicating if the tool is subtracted by the target or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``Subtract`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Subtract`` 
    
    :param isSubtract: 
    :type isSubtract: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: SolidPatchBuilder = ...  # unknown typename


class CoolingConnectCollection(NXOpen.TaggedObjectCollection):
    """
    Creates a CoolingConnect Collection   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Tooling.ToolingManager`
    
    .. versionadded:: NX7.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCoolingConnectBuilder(self) -> CoolingConnectBuilder:
        """
        Creates a Tooling.  
        
        CoolingConnectBuilder  
        
        Signature ``CreateCoolingConnectBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Tooling.CoolingConnectBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class DieEngStampingOutputBuilderDisplayProductTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngStampingOutputBuilderDisplayProductType():
    """
    Types of product display. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OriginalProduct", " - "
       "NewProduct", " - "
       "Both", " - "
    """
    OriginalProduct = 0  # DieEngStampingOutputBuilderDisplayProductTypeMemberType
    NewProduct = 1  # DieEngStampingOutputBuilderDisplayProductTypeMemberType
    Both = 2  # DieEngStampingOutputBuilderDisplayProductTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngStampingOutputBuilderSpringbackMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DieEngStampingOutputBuilderSpringbackMethodType():
    """
    Types of springback method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "UniformMembraneExpansion", " - "
       "OvercrownbyFunction", " - "
       "OvercrownbySurface", " - "
    """
    NotSet = 0  # DieEngStampingOutputBuilderSpringbackMethodTypeMemberType
    UniformMembraneExpansion = 1  # DieEngStampingOutputBuilderSpringbackMethodTypeMemberType
    OvercrownbyFunction = 2  # DieEngStampingOutputBuilderSpringbackMethodTypeMemberType
    OvercrownbySurface = 3  # DieEngStampingOutputBuilderSpringbackMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DieEngStampingOutputBuilder(NXOpen.Features.FeatureBuilder):
    """
    Represents a Stamping Output builder
    
    To create a new instance of this class, use :py:meth:`NXOpen.Tooling.AutoDieCollection.CreateDieEngStampingOutputBuilder`
    
    Default values.
    
    =================  =======
    Property           Value
    =================  =======
    SewTolerance       0.0254 
    -----------------  -------
    SpringbackMethod   None 
    =================  =======
    
    .. versionadded:: NX10.0.0
    """
    
    class DisplayProductType():
        """
        Types of product display. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OriginalProduct", " - "
           "NewProduct", " - "
           "Both", " - "
        """
        OriginalProduct = 0  # DieEngStampingOutputBuilderDisplayProductTypeMemberType
        NewProduct = 1  # DieEngStampingOutputBuilderDisplayProductTypeMemberType
        Both = 2  # DieEngStampingOutputBuilderDisplayProductTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SpringbackMethodType():
        """
        Types of springback method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "UniformMembraneExpansion", " - "
           "OvercrownbyFunction", " - "
           "OvercrownbySurface", " - "
        """
        NotSet = 0  # DieEngStampingOutputBuilderSpringbackMethodTypeMemberType
        UniformMembraneExpansion = 1  # DieEngStampingOutputBuilderSpringbackMethodTypeMemberType
        OvercrownbyFunction = 2  # DieEngStampingOutputBuilderSpringbackMethodTypeMemberType
        OvercrownbySurface = 3  # DieEngStampingOutputBuilderSpringbackMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def DefineSpringback(self) -> None:
        """
        The define springback method 
        
        Signature ``DefineSpringback()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    
    def SetProperty(self) -> None:
        """
        The set stamping output display property method 
        
        Signature ``SetProperty()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: die_engineering ("DIE ENGINEERING")
        """
        ...
    
    SewTolerance: float = ...
    """
    Returns or sets  the sew tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``SewTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SewTolerance`` 
    
    :param sewTolerance: 
    :type sewTolerance: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SourceBody: NXOpen.SelectBodyList = ...
    """
    Returns  the select die engineering sheet bodies 
    
    <hr>
    
    Getter Method
    
    Signature ``SourceBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBodyList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    SpringbackMethod: DieEngStampingOutputBuilderSpringbackMethodType = ...
    """
    Returns or sets  the springback method 
    
    <hr>
    
    Getter Method
    
    Signature ``SpringbackMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Tooling.DieEngStampingOutputBuilderSpringbackMethodType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpringbackMethod`` 
    
    :param springbackMethod: 
    :type springbackMethod: :py:class:`NXOpen.Tooling.DieEngStampingOutputBuilderSpringbackMethodType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: die_engineering ("DIE ENGINEERING")
    """
    TargetBody: NXOpen.SelectBody = ...
    """
    Returns  the select target body 
    
    <hr>
    
    Getter Method
    
    Signature ``TargetBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectBody` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: DieEngStampingOutputBuilder = ...  # unknown typename


