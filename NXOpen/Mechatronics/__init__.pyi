# module 'NXOpen.Mechatronics'
#
# Automatically generated 2025-06-09T14:38:46.903284
#
"""Default documentation for NXOpen.Mechatronics."""

import typing

import NXOpen
import NXOpen.Assemblies
import NXOpen.Display
import NXOpen.Features
import NXOpen.GeometricUtilities
import NXOpen.Positioning
import NXOpen.Tooling



def _handle_import() -> None:
    """internal method to handle importing an NXOpen Python module"""
    ...


class ExternalConnectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of External Connection.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateExternalConnectionBuilder(self, exteral: ExternalConnection) -> ExternalConnectionBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ExternalConnectionBuilder`.  
        
        Signature ``CreateExternalConnectionBuilder(exteral)`` 
        
        :param exteral:  :py:class:`NXOpen.Mechatronics.ExternalConnection` to be edited, if None then create a new one  
        :type exteral: :py:class:`NXOpen.Mechatronics.ExternalConnection` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnectionBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ExternalConnection:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ExternalConnection` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ExternalConnection`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ExternalConnection` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnection` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateExternalConnectionElementBuilder(self, element: ExternalConnectionElement) -> ExternalConnectionElementBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder`  
        
        Signature ``CreateExternalConnectionElementBuilder(element)`` 
        
        :param element:  :py:class:`NXOpen.Mechatronics.ExternalConnectionElement` to be edited, if None then create a new one  
        :type element: :py:class:`NXOpen.Mechatronics.ExternalConnectionElement` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        
        .. versionadded:: NX8.0.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SelectCollisionSensor(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: CollisionSensor) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: CollisionSensor) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: CollisionSensor, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: CollisionSensor, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: CollisionSensor, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: CollisionSensor, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> CollisionSensor:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: CollisionSensor) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Mechatronics.CollisionSensor`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Mechatronics.CollisionSensor`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Mechatronics.CollisionSensor`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Mechatronics.CollisionSensor`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: CollisionSensor = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectCollisionSensor = ...  # unknown typename


class ReplacePhysicsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ReplacePhysicsBuilder` builder.  
    
    This class migrates physics objects from replaced component to replacement component
    in MCD environment, and regeneration of every physics object is done by its own JA interface. 
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateReplacePhysicsBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def ScanPhysicsObject(self, replacedPartOcc: NXOpen.Assemblies.Component) -> None:
        """
        Scans physics objects in context
        
        Signature ``ScanPhysicsObject(replacedPartOcc)`` 
        
        :param replacedPartOcc: The replaced part occurence 
        :type replacedPartOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def MappingNewphysicsFileid(self, originalPhysicsObjectPrototypeFileId: str, newFileId: str) -> None:
        """
        Maps new physics file id according to the original file id
        
        Signature ``MappingNewphysicsFileid(originalPhysicsObjectPrototypeFileId, newFileId)`` 
        
        :param originalPhysicsObjectPrototypeFileId: The original physics object file id 
        :type originalPhysicsObjectPrototypeFileId: str 
        :param newFileId: The new file id 
        :type newFileId: str 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           Use :py:meth:`NXOpen.Mechatronics.ReplacePhysicsBuilder.MappingNewphysicsObject` instead.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def MappingNewphysicsObject(self, originalPhysicsObjectPrototypeFileId: str, newPhysicsObj: NXOpen.NXObject) -> None:
        """
        Maps new physics object according to the original file id
        
        Signature ``MappingNewphysicsObject(originalPhysicsObjectPrototypeFileId, newPhysicsObj)`` 
        
        :param originalPhysicsObjectPrototypeFileId: The original physics object file id 
        :type originalPhysicsObjectPrototypeFileId: str 
        :param newPhysicsObj: The new physics object to replace 
        :type newPhysicsObj: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetReplacementStatus(self, status: bool) -> None:
        """
        Set the replacement status
        
        Signature ``SetReplacementStatus(status)`` 
        
        :param status: The replacement status 
        :type status: bool 
        
        .. versionadded:: NX8.5.2
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Null: ReplacePhysicsBuilder = ...  # unknown typename


class PlanarJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Planar Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePlanarJointBuilder(self, cylinJoint: PlanarJoint) -> PlanarJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PlanarJointBuilder`.
        
        Signature ``CreatePlanarJointBuilder(cylinJoint)`` 
        
        :param cylinJoint:  :py:class:`NXOpen.Mechatronics.PlanarJoint` to be edited, if None then create a new one  
        :type cylinJoint: :py:class:`NXOpen.Mechatronics.PlanarJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PlanarJointBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> PlanarJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PlanarJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PlanarJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PlanarJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PlanarJoint` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class HydraulicCylinderCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Hydraulic Cylinder.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateHydraulicCylinderBuilder(self, hydraulicCylinder: HydraulicCylinder) -> HydraulicCylinderBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.HydraulicCylinderBuilder`.  
        
        Signature ``CreateHydraulicCylinderBuilder(hydraulicCylinder)`` 
        
        :param hydraulicCylinder:  :py:class:`NXOpen.Mechatronics.HydraulicCylinder` to be edited, if None then create a new one  
        :type hydraulicCylinder: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.HydraulicCylinderBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> HydraulicCylinder:
        """
        Finds the :py:class:`NXOpen.Mechatronics.HydraulicCylinder` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.HydraulicCylinder`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.HydraulicCylinder` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PhysicsConstraintBuilder(NXOpen.Builder):
    """
    This is an abstract class, and cannot be created.  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX7.5.1
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PhysicsConstraintBuilder = ...  # unknown typename


class PhysicsJointBuilder(NXOpen.Builder):
    """
    Represents a base builder for Physics Joints.  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX7.5.1
    """
    
    def SetAttachment(self, attachment: NXOpen.NXObject) -> None:
        """
        Sets the attachment.  
        
        Signature ``SetAttachment(attachment)`` 
        
        :param attachment: 
        :type attachment: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetBase(self, base: NXOpen.NXObject) -> None:
        """
        Sets the base.  
        
        Signature ``SetBase(base)`` 
        
        :param base: 
        :type base: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Attachment: NXOpen.SelectNXObject = ...
    """
    Returns  the attachment of joint.  
    
    This can be a :py:class:`NXOpen.Mechatronics.RigidBody` 
    or objects which can create a rigid body by. 
    
    <hr>
    
    Getter Method
    
    Signature ``Attachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Base: NXOpen.SelectNXObject = ...
    """
    Returns  the base of joint.  
    
    This can be a :py:class:`NXOpen.Mechatronics.RigidBody` 
    or objects which can create a rigid body by. 
    
    <hr>
    
    Getter Method
    
    Signature ``Base`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    BaseAnchorPoint: NXOpen.Point = ...
    """
    Returns or sets  the anchor point of base.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseAnchorPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseAnchorPoint`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    BaseAxisVector: NXOpen.Direction = ...
    """
    Returns or sets  the axis vector of base.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseAxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseAxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Positioning: bool = ...
    """
    Returns or sets  a boolean value that indicates whether to create an assembly joint.  
    
    <hr>
    
    Getter Method
    
    Signature ``Positioning`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Positioning`` 
    
    :param usePositioning: 
    :type usePositioning: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PhysicsJointBuilder = ...  # unknown typename


class ScrewJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ScrewJoint` builder. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ScrewJointCollection.CreateScrewJointBuilder`
    
    .. versionadded:: NX11.0.0
    """
    AxisVector: NXOpen.Direction = ...
    """
    Returns or sets  a value that specifies axis vector. 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExpressionRatio: NXOpen.Expression = ...
    """
    Returns  a value that indicates ratio value for the screw joint.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionRatio`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PointOrigin: NXOpen.Point = ...
    """
    Returns or sets  a value that indicates the origin point.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PointOrigin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ScrewJointBuilder = ...  # unknown typename


class GanttOperationParameterBuilderOperatorOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GanttOperationParameterBuilderOperatorOption():
    """
    the Operator options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Increment", "Increment operator '+='"
       "Decrement", "Decrement operator '-='"
       "Multiply", "Multiply operator '*='"
       "Not", "Not operator"
    """
    NotSet = 0  # GanttOperationParameterBuilderOperatorOptionMemberType
    Increment = 1  # GanttOperationParameterBuilderOperatorOptionMemberType
    Decrement = 2  # GanttOperationParameterBuilderOperatorOptionMemberType
    Multiply = 3  # GanttOperationParameterBuilderOperatorOptionMemberType
    Not = 4  # GanttOperationParameterBuilderOperatorOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GanttOperationParameterBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.GanttCollection.CreateGanttOperationParameterBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class OperatorOption():
        """
        the Operator options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Increment", "Increment operator '+='"
           "Decrement", "Decrement operator '-='"
           "Multiply", "Multiply operator '*='"
           "Not", "Not operator"
        """
        NotSet = 0  # GanttOperationParameterBuilderOperatorOptionMemberType
        Increment = 1  # GanttOperationParameterBuilderOperatorOptionMemberType
        Decrement = 2  # GanttOperationParameterBuilderOperatorOptionMemberType
        Multiply = 3  # GanttOperationParameterBuilderOperatorOptionMemberType
        Not = 4  # GanttOperationParameterBuilderOperatorOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def PutExpressionValue(self, exp: NXOpen.Expression) -> None:
        """
        Set the expression value for double and interger parameters 
        
        Signature ``PutExpressionValue(exp)`` 
        
        :param exp: 
        :type exp: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ExpressionValue: NXOpen.Expression = ...
    """
    Returns  the expression value for double and interger parameters 
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    IOStatus: bool = ...
    """
    Returns or sets  the io status 
    
    <hr>
    
    Getter Method
    
    Signature ``IOStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``IOStatus`` 
    
    :param io: 
    :type io: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ObjectValue: NXOpen.NXObject = ...
    """
    Returns or sets  the parameter value which will be set to the input physics object during runtime.  
    
    If property value type is not object, this property should be null, it can be a physics 
    object(Rigid Body, Collision, Constraints, Joints etc.), Function Table, Material etc. 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectValue`` 
    
    :param objValue: 
    :type objValue: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Operator: GanttOperationParameterBuilderOperatorOption = ...
    """
    Returns or sets  the operator value.  
    
    <hr>
    
    Getter Method
    
    Signature ``Operator`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilderOperatorOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Operator`` 
    
    :param optr: 
    :type optr: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilderOperatorOption` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParameterName: str = ...
    """
    Returns or sets  the parameter name 
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ParameterName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParameterValue: str = ...
    """
    Returns or sets  the parameter value which will be set to the input physics object during runtime.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ParameterValue`` 
    
    :param strValue: 
    :type strValue: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PropertyId: int = ...
    """
    Returns or sets  the id of property in physics object 
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PropertyId`` 
    
    :param prop: 
    :type prop: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: GanttOperationParameterBuilder = ...  # unknown typename


class GanttOperationObject(NXOpen.NXObject):
    """
    Represents the Gantt Operation object.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.GanttOperationBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: GanttOperationObject = ...  # unknown typename


class AlignBodyBuilderRoleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AlignBodyBuilderRoleType():
    """
    the Snap role types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Source", "Source"
       "Target", "Target"
    """
    Source = 0  # AlignBodyBuilderRoleTypeMemberType
    Target = 1  # AlignBodyBuilderRoleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AlignBodyBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.AlignBody` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.AlignBodyCollection.CreateAlignBodyBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class RoleType():
        """
        the Snap role types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Source", "Source"
           "Target", "Target"
        """
        Source = 0  # AlignBodyBuilderRoleTypeMemberType
        Target = 1  # AlignBodyBuilderRoleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetAttachbody(self, rigid: NXOpen.NXObject) -> None:
        """
        Sets the attached rigid body.  
        
        Signature ``SetAttachbody(rigid)`` 
        
        :param rigid: 
        :type rigid: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AttachBody: SelectRigidBody = ...
    """
    Returns  the rigid body which snap point attaches on. This should be a :py:class:`NXOpen.Mechatronics.RigidBody`  
    
    <hr>
    
    Getter Method
    
    Signature ``AttachBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectRigidBody` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AttachPoint: NXOpen.Point = ...
    """
    Returns or sets  the positioning of snap point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttachPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AttachPoint`` 
    
    :param attachPoint: 
    :type attachPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Category: int = ...
    """
    Returns or sets  the category. It should be an integer bigger or equal to zero.  
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    JunctionName: str = ...
    """
    Returns or sets  the junction name converted from MTB.  
    
    <hr>
    
    Getter Method
    
    Signature ``JunctionName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``JunctionName`` 
    
    :param junction: 
    :type junction: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Orientation: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the orientation of snap point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Proximity: NXOpen.Expression = ...
    """
    Returns  the proximity for distance detection.  
    
    <hr>
    
    Getter Method
    
    Signature ``Proximity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SnapRole: AlignBodyBuilderRoleType = ...
    """
    Returns or sets  the role type  
    
    <hr>
    
    Getter Method
    
    Signature ``SnapRole`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.AlignBodyBuilderRoleType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SnapRole`` 
    
    :param roleType: 
    :type roleType: :py:class:`NXOpen.Mechatronics.AlignBodyBuilderRoleType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: AlignBodyBuilder = ...  # unknown typename


class PositionSensorBuilderAxisJointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PositionSensorBuilderAxisJointType():
    """
    the Axis Joint types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angular", "Angular"
       "Linear", "Linear"
    """
    Angular = 0  # PositionSensorBuilderAxisJointTypeMemberType
    Linear = 1  # PositionSensorBuilderAxisJointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PositionSensorBuilderOutputMeasureTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PositionSensorBuilderOutputMeasureType():
    """
    the Measure types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "MEASURE_UNITLESS"
       "Voltage", "MEASURE_VOLTAGE"
       "Current", "MEASURE_ELECTRIC_CURRENT"
    """
    Constant = 0  # PositionSensorBuilderOutputMeasureTypeMemberType
    Voltage = 1  # PositionSensorBuilderOutputMeasureTypeMemberType
    Current = 2  # PositionSensorBuilderOutputMeasureTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PositionSensorBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PositionSensor` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PositionSensorCollection.CreatePositionSensorBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class AxisJointType():
        """
        the Axis Joint types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angular", "Angular"
           "Linear", "Linear"
        """
        Angular = 0  # PositionSensorBuilderAxisJointTypeMemberType
        Linear = 1  # PositionSensorBuilderAxisJointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OutputMeasureType():
        """
        the Measure types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "MEASURE_UNITLESS"
           "Voltage", "MEASURE_VOLTAGE"
           "Current", "MEASURE_ELECTRIC_CURRENT"
        """
        Constant = 0  # PositionSensorBuilderOutputMeasureTypeMemberType
        Voltage = 1  # PositionSensorBuilderOutputMeasureTypeMemberType
        Current = 2  # PositionSensorBuilderOutputMeasureTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisJoint: NXOpen.SelectNXObject = ...
    """
    Returns  the joint select. This can be a :py:class:`NXOpen.Mechatronics.HingeJoint`, :py:class:`NXOpen.Mechatronics.SlidingJoint`
    , :py:class:`NXOpen.Mechatronics.CylindricalJoint`, :py:class:`NXOpen.Mechatronics.PointOnCurveJoint`
    and :py:class:`NXOpen.Mechatronics.PositionControl`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AxisType: PositionSensorBuilderAxisJointType = ...
    """
    Returns or sets  the axis type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PositionSensorBuilderAxisJointType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Mechatronics.PositionSensorBuilderAxisJointType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerOutputRange: NXOpen.Expression = ...
    """
    Returns  the lower output range used to scale the position data. Its measure type contains constant, voltage, current  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerTrimRange: NXOpen.Expression = ...
    """
    Returns  the lower trim range used to trim the position data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MeasureType: PositionSensorBuilderOutputMeasureType = ...
    """
    Returns or sets  the measure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeasureType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PositionSensorBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MeasureType`` 
    
    :param measureType: 
    :type measureType: :py:class:`NXOpen.Mechatronics.PositionSensorBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperOutputRange: NXOpen.Expression = ...
    """
    Returns  the upper output range used to scale the position data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperTrimRange: NXOpen.Expression = ...
    """
    Returns  the upper trim range used to trim the position data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseScale: bool = ...
    """
    Returns or sets  the use scale flag, which is used to control if the position sensor includes scale parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseScale`` 
    
    :param useScale: 
    :type useScale: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseTrim: bool = ...
    """
    Returns or sets  the use trim flag, which is used to control if the position sensor includes trim parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseTrim`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseTrim`` 
    
    :param useTrim: 
    :type useTrim: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PositionSensorBuilder = ...  # unknown typename


class VirtualAxisCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Virtual Axis.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX10.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateVirtualAxisBuilder(self, objectSrc: VirtualAxis) -> VirtualAxisBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.VirtualAxisBuilder`.  
        
        Signature ``CreateVirtualAxisBuilder(objectSrc)`` 
        
        :param objectSrc:  :py:class:`NXOpen.Mechatronics.VirtualAxis` to be edited, if None then create a new one  
        :type objectSrc: :py:class:`NXOpen.Mechatronics.VirtualAxis` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.VirtualAxisBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> VirtualAxis:
        """
        Finds the :py:class:`NXOpen.Mechatronics.VirtualAxis` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.VirtualAxis`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.VirtualAxis` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.VirtualAxis` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ComparisonResultBase(NXOpen.TransientObject):
    """
    Represents base object of comparison result   
    
    .. versionadded:: NX9.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called, it is illegal to use the object. In .NET, this method is automatically called when the object is deleted by the garbage collector. 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    Ignored: bool = ...
    """
    Returns or sets  the flag marked if the object will be ingored when applying it to logical model 
    
    <hr>
    
    Getter Method
    
    Signature ``Ignored`` 
    
    :returns:  Mark if the object will be ingored when applying it to logical model  
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Ignored`` 
    
    :param isIgnored:  Mark if the object will be ingored when applying it to logical model  
    :type isIgnored: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """


class ComparisonResultCategoryMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ComparisonResultCategory():
    """
    Defines categories of comparison results 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "Create category"
       "UpdateAttributes", "Update Attributes category"
       "UpdateParts", "Update Parts category"
       "Move", "Move category"
       "Delete", "Delete category"
       "CreateConflict", "Conflict from Create category"
       "MoveConflict", "Conflict from Move category"
       "NotFoundConflict", "Conflict due to the original logical object was deleted"
       "NoAction", "No Action Required"
    """
    Create = 0  # ComparisonResultCategoryMemberType
    UpdateAttributes = 1  # ComparisonResultCategoryMemberType
    UpdateParts = 2  # ComparisonResultCategoryMemberType
    Move = 3  # ComparisonResultCategoryMemberType
    Delete = 4  # ComparisonResultCategoryMemberType
    CreateConflict = 5  # ComparisonResultCategoryMemberType
    MoveConflict = 6  # ComparisonResultCategoryMemberType
    NotFoundConflict = 7  # ComparisonResultCategoryMemberType
    NoAction = 8  # ComparisonResultCategoryMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ComparisonResult(ComparisonResultBase):
    """
    Represents comparison result   
    
    .. versionadded:: NX9.0.0
    """
    
    class Category():
        """
        Defines categories of comparison results 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "Create category"
           "UpdateAttributes", "Update Attributes category"
           "UpdateParts", "Update Parts category"
           "Move", "Move category"
           "Delete", "Delete category"
           "CreateConflict", "Conflict from Create category"
           "MoveConflict", "Conflict from Move category"
           "NotFoundConflict", "Conflict due to the original logical object was deleted"
           "NoAction", "No Action Required"
        """
        Create = 0  # ComparisonResultCategoryMemberType
        UpdateAttributes = 1  # ComparisonResultCategoryMemberType
        UpdateParts = 2  # ComparisonResultCategoryMemberType
        Move = 3  # ComparisonResultCategoryMemberType
        Delete = 4  # ComparisonResultCategoryMemberType
        CreateConflict = 5  # ComparisonResultCategoryMemberType
        MoveConflict = 6  # ComparisonResultCategoryMemberType
        NotFoundConflict = 7  # ComparisonResultCategoryMemberType
        NoAction = 8  # ComparisonResultCategoryMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called, it is illegal to use the object. In .NET, this method is automatically called when the object is deleted by the garbage collector. 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAttributes(self) -> 'list[ComparisonResultAttribute]':
        """
        Gets a list of attributes from the comparison result 
        
        Signature ``GetAttributes()`` 
        
        :returns:  Array of attributes  
        :rtype: list of :py:class:`NXOpen.Mechatronics.ComparisonResultAttribute` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetElectricalParts(self) -> 'list[ComparisonResultElectricalPart]':
        """
        Gets a list of electrical parts from the comparison result 
        
        Signature ``GetElectricalParts()`` 
        
        :returns:  Array of electrical parts  
        :rtype: list of :py:class:`NXOpen.Mechatronics.ComparisonResultElectricalPart` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    ConflictLogicalObject: LogicObject = ...
    """
    Returns or sets  the conflict logical object from the comparison result 
    
    <hr>
    
    Getter Method
    
    Signature ``ConflictLogicalObject`` 
    
    :returns:  Conflict logical object of comparison result  
    :rtype: :py:class:`NXOpen.Mechatronics.LogicObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConflictLogicalObject`` 
    
    :param conflictLogicalObject:  Conflict logical object of comparison result  
    :type conflictLogicalObject: :py:class:`NXOpen.Mechatronics.LogicObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LogicalObject: LogicObject = ...
    """
    Returns or sets  the logical object from the comparison result 
    
    <hr>
    
    Getter Method
    
    Signature ``LogicalObject`` 
    
    :returns:  Logical object of comparison result  
    :rtype: :py:class:`NXOpen.Mechatronics.LogicObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LogicalObject`` 
    
    :param logicalObject:  Logical object of comparison result  
    :type logicalObject: :py:class:`NXOpen.Mechatronics.LogicObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ResultCategory: ComparisonResultCategory = ...
    """
    Returns or sets  the category from the comparison result 
    
    <hr>
    
    Getter Method
    
    Signature ``ResultCategory`` 
    
    :returns:  Category of comparison result  
    :rtype: :py:class:`NXOpen.Mechatronics.ComparisonResultCategory` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ResultCategory`` 
    
    :param category:  Category of comparison result  
    :type category: :py:class:`NXOpen.Mechatronics.ComparisonResultCategory` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ResultName: str = ...
    """
    Returns  the name from the comparison result 
    
    <hr>
    
    Getter Method
    
    Signature ``ResultName`` 
    
    :returns:  Name of comparison result  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ResultType: str = ...
    """
    Returns  the type from the comparison result 
    
    <hr>
    
    Getter Method
    
    Signature ``ResultType`` 
    
    :returns:  Type of comparison result  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """


class PhysicsJoint(NXOpen.DisplayableObject):
    """
    Represents the mechatronics joint class.  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX7.5.1
    """
    Null: PhysicsJoint = ...  # unknown typename


class CylindricalJoint(PhysicsJoint):
    """
    Represents the Cylindrical Joint.  
    
    A Cylindrical Joint is a connection that 
    can move both linearly and rotationally. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.CylindricalJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: CylindricalJoint = ...  # unknown typename


class ObjectSinkCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Object Sink.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateObjectSinkBuilder(self, objectSrc: ObjectSink) -> ObjectSinkBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ObjectSinkBuilder`.  
        
        Signature ``CreateObjectSinkBuilder(objectSrc)`` 
        
        :param objectSrc:  :py:class:`NXOpen.Mechatronics.ObjectSink` to be edited, if None then create a new one  
        :type objectSrc: :py:class:`NXOpen.Mechatronics.ObjectSink` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ObjectSinkBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ObjectSink:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ObjectSink` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ObjectSink`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ObjectSink` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ObjectSink` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class TracerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Tracer.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTracerBuilder(self, tracer: Tracer) -> TracerBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.TracerBuilder`.  
        
        Signature ``CreateTracerBuilder(tracer)`` 
        
        :param tracer:  :py:class:`NXOpen.Mechatronics.Tracer` to be edited, if None then create a new one  
        :type tracer: :py:class:`NXOpen.Mechatronics.Tracer` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.TracerBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> Tracer:
        """
        Finds the :py:class:`NXOpen.Mechatronics.Tracer` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.Tracer`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.Tracer` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.Tracer` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ExternalSignalConfigurationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationBuilder`..  
    
    It is used to maintain all client builders for external signals. Such as OPC DA, OPC UA, SHM, TCP/UDP, PLCSIMAdv, etc....
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ExternalSignalConfigurationCollection.CreateExternalSignalConfigurationBuilder`
    
    .. versionadded:: NX12.0.0
    """
    MatlabClient: MATLABClientBuilder = ...
    """
    Returns  the Matlab builder that holds the configuration for Matlab clients.  
    
    <hr>
    
    Getter Method
    
    Signature ``MatlabClient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MATLABClientBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    OPCDAClient: OPCClientBuilder = ...
    """
    Returns  the OPC DA builder that holds the configuration for OPC DA clients.  
    
    <hr>
    
    Getter Method
    
    Signature ``OPCDAClient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.OPCClientBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    OPCUAClient: OPCUAClientBuilder = ...
    """
    Returns  the OPC UA builder that holds the configuration for OPC UA clients.  
    
    <hr>
    
    Getter Method
    
    Signature ``OPCUAClient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.OPCUAClientBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    PlcSimAdvClient: PlcSimAdvClientBuilder = ...
    """
    Returns  the PLCSIMAdv builder that holds the configuration for PLCSIMAdv clients.  
    
    <hr>
    
    Getter Method
    
    Signature ``PlcSimAdvClient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PlcSimAdvClientBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ProfinetClient: ProfinetClientBuilder = ...
    """
    Returns  the Profinet builder that holds the configuration for Profinet clients.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProfinetClient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ProfinetClientBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    ShmClient: SHMSignalClientBuilder = ...
    """
    Returns  the SHM builder that holds the configuration for SHM clients.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShmClient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalClientBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    TcpClient: TCPClientBuilder = ...
    """
    Returns  the TCP builder that holds the configuration for TCP clients.  
    
    <hr>
    
    Getter Method
    
    Signature ``TcpClient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TCPClientBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    UdpClient: UDPSignalClientBuilder = ...
    """
    Returns  the UDP builder that holds the configuration for UDP clients.  
    
    <hr>
    
    Getter Method
    
    Signature ``UdpClient`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.UDPSignalClientBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: ExternalSignalConfigurationBuilder = ...  # unknown typename


class PneumaticCylinderCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Pneumatic Cylinder.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePneumaticCylinderBuilder(self, pneumaticCylinder: PneumaticCylinder) -> PneumaticCylinderBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PneumaticCylinderBuilder`.  
        
        Signature ``CreatePneumaticCylinderBuilder(pneumaticCylinder)`` 
        
        :param pneumaticCylinder:  :py:class:`NXOpen.Mechatronics.PneumaticCylinder` to be edited, if None then create a new one  
        :type pneumaticCylinder: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PneumaticCylinderBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> PneumaticCylinder:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PneumaticCylinder` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PneumaticCylinder`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PneumaticCylinder` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PhysicsConstraint(NXOpen.DisplayableObject):
    """
    Represents the mechatronics constraint class.  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX7.5.1
    """
    Null: PhysicsConstraint = ...  # unknown typename


class PositionControl(PhysicsConstraint):
    """
    Represents the Position Control.  
    
    A Position Control causes objects attached to an axis to 
    move along that axis to a given position. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.PositionControlBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: PositionControl = ...  # unknown typename


class BreakingConstraintCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Breaking Constraint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBreakingConstraintBuilder(self, hinge: BreakingConstraint) -> BreakingConstraintBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.BreakingConstraintBuilder`.  
        
        Signature ``CreateBreakingConstraintBuilder(hinge)`` 
        
        :param hinge:  :py:class:`NXOpen.Mechatronics.BreakingConstraint` to be edited, if None then create a new one  
        :type hinge: :py:class:`NXOpen.Mechatronics.BreakingConstraint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.BreakingConstraintBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> BreakingConstraint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.BreakingConstraint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.BreakingConstraint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.BreakingConstraint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.BreakingConstraint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class CollisionShapeBuilder(NXOpen.Builder):
    """
    This is an abstract class, and cannot be created.  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX7.5.1
    """
    CenterPoint: NXOpen.Point = ...
    """
    Returns or sets  the center point.  
    
    Valid to all collsion shape types except 
    :py:meth:`NXOpen.Mechatronics.CollisionBodyBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Convex <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CenterPoint`` 
    
    :param centerPoint: 
    :type centerPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height.  
    
    Valid if :py:meth:`NXOpen.Mechatronics.CollisionBodyBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Box <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>` 
    or :py:meth:`NXOpen.Mechatronics.CollisionSensorBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes.Box <NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length.  
    
    Valid if :py:meth:`NXOpen.Mechatronics.CollisionBodyBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Box <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>` 
    or :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Capsule <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>`
    or :py:meth:`NXOpen.Mechatronics.CollisionSensorBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes.Box <NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes>`
    or :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes.Line <NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Orientation: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the orientation.  
    
    Valid if :py:meth:`NXOpen.Mechatronics.CollisionBodyBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Box <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>` 
    or :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Capsule <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>`
    or :py:meth:`NXOpen.Mechatronics.CollisionSensorBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes.Box <NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes>`
    or :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes.Line <NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  the radius.  
    
    Valid if :py:meth:`NXOpen.Mechatronics.CollisionBodyBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Sphere <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>` 
    or :py:meth:`NXOpen.Mechatronics.CollisionSensorBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes.Sphere <NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Width: NXOpen.Expression = ...
    """
    Returns  the width.  
    
    Valid if :py:meth:`NXOpen.Mechatronics.CollisionBodyBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Box <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>` 
    or :py:meth:`NXOpen.Mechatronics.CollisionSensorBuilder.CollisionShape` is set 
    to :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes.Box <NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes>`.
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: CollisionShapeBuilder = ...  # unknown typename


class TCPSignalServerBuilderSignal_Struct():
    """
    Represents the data type  
    
    .
    Constructor: 
    NXOpen.Mechatronics.TCPSignalServerBuilder.Signal()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    SignalTag: NXOpen.NXObject = ...
    """
    Signal Object         
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    BChecked: bool = ...
    """
    Signal Checked Status  
    <hr>
    
    Field Value
    Type:bool
    """
    Offset: str = ...
    """
    Adress value          
    <hr>
    
    Field Value
    Type:str
    """


class RuntimeBehaviorBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.RuntimeBehaviorBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.RuntimeBehaviorCollection.CreateRuntimeBehaviorBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    def StoreExecutableCode(self, fileSpec: str, source: str) -> None:
        """
        Stores executable code for source 
        
        Signature ``StoreExecutableCode(fileSpec, source)`` 
        
        :param fileSpec:  The file specification  
        :type fileSpec: str 
        :param source:  The runtime behavior code  
        :type source: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetPhysicsObject(self, className: str, propIndex: int, physicsObject: NXOpen.NXObject) -> None:
        """
        Sets physics object 
        
        Signature ``SetPhysicsObject(className, propIndex, physicsObject)`` 
        
        :param className: 
        :type className: str 
        :param propIndex: 
        :type propIndex: int 
        :param physicsObject: 
        :type physicsObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetReplacementCode(self, physicsObject: NXOpen.NXObject) -> None:
        """
        Sets byte code for replacement 
        
        Signature ``SetReplacementCode(physicsObject)`` 
        
        :param physicsObject: 
        :type physicsObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Source: str = ...
    """
    Returns or sets  the source.  
    
    <hr>
    
    Getter Method
    
    Signature ``Source`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Source`` 
    
    :param source: 
    :type source: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: RuntimeBehaviorBuilder = ...  # unknown typename


class Coupling(PhysicsConstraint):
    """
    Represents the mechatronics coupling class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.CouplingBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: Coupling = ...  # unknown typename


class ThreeJointCoupler(Coupling):
    """
    Represents the ThreeJointCoupler.  
    
    A ThreeJointCoupler can make three axises move 
    with specific multiple factor. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ThreeJointCouplerBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: ThreeJointCoupler = ...  # unknown typename


class AngularLimitJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.AngularLimitJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.AngularLimitJointCollection.CreateAngularLimitJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    AttachmentVector: NXOpen.Direction = ...
    """
    Returns or sets  the attachment vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttachmentVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AttachmentVector`` 
    
    :param attachmentVector: 
    :type attachmentVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    BaseVector: NXOpen.Direction = ...
    """
    Returns or sets  the base vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseVector`` 
    
    :param baseVector: 
    :type baseVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FeedbackPoint: NXOpen.Point = ...
    """
    Returns or sets  the position of visual feedback point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FeedbackPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FeedbackPoint`` 
    
    :param feedback: 
    :type feedback: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MaximumPosition: NXOpen.Expression = ...
    """
    Returns  the maximum position:
    The maximum allowable angle, stops objects moving beyond this degree.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MinimumPosition: NXOpen.Expression = ...
    """
    Returns  the minimum position:
    The minimum allowable angle, stops objects moving too close together.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: AngularLimitJointBuilder = ...  # unknown typename


class RuntimeNCCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Runtime NC.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRuntimeNcBuilder(self, runtimeNCObject: RuntimeNCObject) -> RuntimeNCBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.RuntimeNCBuilder`.  
        
        Signature ``CreateRuntimeNcBuilder(runtimeNCObject)`` 
        
        :param runtimeNCObject:  :py:class:`NXOpen.Mechatronics.RuntimeNCObject` to be edited, if None then create a new one  
        :type runtimeNCObject: :py:class:`NXOpen.Mechatronics.RuntimeNCObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.RuntimeNCBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> RuntimeNCObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.RuntimeNCObject` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.RuntimeNCObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.RuntimeNCObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.RuntimeNCObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SystemObjectReorderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SystemObjectReorderType():
    """
    Reorder object type to specify the relative position. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Before", "Before"
       "After", "After"
    """
    Before = 1  # SystemObjectReorderTypeMemberType
    After = 2  # SystemObjectReorderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SystemObjectRelationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SystemObjectRelationType():
    """
    Relation type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ecad", "ECAD relation type"
    """
    Ecad = 1  # SystemObjectRelationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SystemObject(NXOpen.NXObject):
    """
    Represents the System Object.  
    
    System Object is the entity displaying in
    System Navigator. 
    This is an abstract class and cannot be created.
    
    .. versionadded:: NX8.5.0
    """
    
    class ReorderType():
        """
        Reorder object type to specify the relative position. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Before", "Before"
           "After", "After"
        """
        Before = 1  # SystemObjectReorderTypeMemberType
        After = 2  # SystemObjectReorderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RelationType():
        """
        Relation type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ecad", "ECAD relation type"
        """
        Ecad = 1  # SystemObjectRelationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddComponent(self, comps: 'list[NXOpen.Assemblies.Component]') -> None:
        """
        Adds :py:class:`Assemblies.Component`.  
        
        Signature ``AddComponent(comps)`` 
        
        :param comps: 
        :type comps: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RemoveComponent(self, comps: 'list[NXOpen.Assemblies.Component]') -> None:
        """
        Removes :py:class:`Assemblies.Component`.  
        
        Signature ``RemoveComponent(comps)`` 
        
        :param comps: 
        :type comps: list of :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddOperation(self, opers: 'list[NXOpen.NXObject]') -> None:
        """
        Adds operation object.  
        
        Signature ``AddOperation(opers)`` 
        
        :param opers: 
        :type opers: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RemoveOperation(self, opers: 'list[NXOpen.NXObject]') -> None:
        """
        Removes operation object.  
        
        Signature ``RemoveOperation(opers)`` 
        
        :param opers: 
        :type opers: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddSignalAdapters(self, adapters: 'list[NXOpen.NXObject]') -> None:
        """
        Adds signal adapter objects.  
        
        Signature ``AddSignalAdapters(adapters)`` 
        
        :param adapters: 
        :type adapters: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RemoveSignalAdapters(self, adapters: 'list[NXOpen.NXObject]') -> None:
        """
        Removes signal adapter objects.  
        
        Signature ``RemoveSignalAdapters(adapters)`` 
        
        :param adapters: 
        :type adapters: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RestructureObject(self, pDestination: SystemObject) -> None:
        """
        Restructure system object.  
        
        Signature ``RestructureObject(pDestination)`` 
        
        :param pDestination: 
        :type pDestination: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddPhysicsObjects(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Adds behavioral physics objects.  
        
        Signature ``AddPhysicsObjects(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RemovePhysicsObjects(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Removes behavioral physics objects.  
        
        Signature ``RemovePhysicsObjects(objects)`` 
        
        :param objects: 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetPhysicsObjects(self) -> 'list[NXOpen.NXObject]':
        """
        Gets behavioral physics objects.  
        
        Signature ``GetPhysicsObjects()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ReorderObject(self, pDestination: SystemObject, beforeOrAfter: SystemObjectReorderType) -> None:
        """
        Reorders system objects.  
        
        The method will reorder the objects in the same level
        of the structure. The source object will be moved to the destination and the
        sibling will update the order accordingly. 
        
        Signature ``ReorderObject(pDestination, beforeOrAfter)`` 
        
        :param pDestination: 
        :type pDestination: :py:class:`NXOpen.Mechatronics.SystemObject` 
        :param beforeOrAfter:  Reorder Before/After  
        :type beforeOrAfter: :py:class:`NXOpen.Mechatronics.SystemObjectReorderType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RenameInstance(self, name: str) -> None:
        """
        Renames system object instance.  
        
        Signature ``RenameInstance(name)`` 
        
        :param name: 
        :type name: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateTraceLink(self, pComplying: SystemObject) -> None:
        """
        Creates the trace link for system objects.  
        
        This method only makes sense in NX Manager mode. 
        
        Signature ``CreateTraceLink(pComplying)`` 
        
        :param pComplying: 
        :type pComplying: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RemoveTraceLink(self, pComplying: SystemObject) -> None:
        """
        Removes the trace link for system objects.  
        
        This method only makes sense in NX Manager mode. 
        
        Signature ``RemoveTraceLink(pComplying)`` 
        
        :param pComplying: 
        :type pComplying: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetSingleDesignation(self) -> str:
        """
        Get the single designation including aspect, letter code and index.  
        
        Signature ``GetSingleDesignation()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSingleDesignation(self, designation: str) -> None:
        """
        Set the single designation including aspect, letter code and index.  
        
        The aspect, letter code
        and index are joined together and comply with the rules defined in the configuration file. 
        
        Signature ``SetSingleDesignation(designation)`` 
        
        :param designation: 
        :type designation: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ApplyNamingRule(self) -> None:
        """
        Perform naming rule check and update the designation.  
        
        Signature ``ApplyNamingRule()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AssociateItem(self, type: SystemObjectRelationType, itemMFKID: str, revisionID: str) -> None:
        """
        Associate a specified item to this system object.  
        
        This method only makes sense in NX Manager mode. 
        
        Signature ``AssociateItem(type, itemMFKID, revisionID)`` 
        
        :param type:  The relation type.  
        :type type: :py:class:`NXOpen.Mechatronics.SystemObjectRelationType` 
        :param itemMFKID:  The item MFK ID of association item.  
        :type itemMFKID: str 
        :param revisionID:  The revision ID of association item.  
        :type revisionID: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetAssociateItem(self, type: SystemObjectRelationType) -> tuple:
        """
        Query the associated item with a specified type.  
        
        This method only makes sense in NX Manager mode. 
        
        Signature ``GetAssociateItem(type)`` 
        
        :param type:  The relation type.  
        :type type: :py:class:`NXOpen.Mechatronics.SystemObjectRelationType` 
        :returns: a tuple 
        :rtype: A tuple consisting of (itemMFKID, revisionID). itemMFKID is a str.   The item MFK ID of association item. revisionID is a str.   The revision ID of association item. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def DissociateItem(self, itemMFKID: str, revisionID: str) -> None:
        """
        Dissociate a specified item from this system object.  
        
        This method only makes sense in NX Manager mode. 
        
        Signature ``DissociateItem(itemMFKID, revisionID)`` 
        
        :param itemMFKID:  The item MFK ID of dissociation item.  
        :type itemMFKID: str 
        :param revisionID:  The revision ID of dissociation item.  
        :type revisionID: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Null: SystemObject = ...  # unknown typename


class Requirement(SystemObject):
    """
    Represents the Requirement class.  
    
    A Requirement defines objects
    which can be attached to Functions. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.RequirementBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: Requirement = ...  # unknown typename


class SelectHydraulicCylinderList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: HydraulicCylinder) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[HydraulicCylinder]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: HydraulicCylinder, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: HydraulicCylinder, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: HydraulicCylinder, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: HydraulicCylinder, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: HydraulicCylinder) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: HydraulicCylinder, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: HydraulicCylinder, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: HydraulicCylinder, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[HydraulicCylinder]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: HydraulicCylinder) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[HydraulicCylinder]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[HydraulicCylinder]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectHydraulicCylinderList = ...  # unknown typename


class AngularLimitJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Angular Limit Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateAngularLimitJointBuilder(self, angularLimit: AngularLimitJoint) -> AngularLimitJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.AngularLimitJointBuilder`.  
        
        Signature ``CreateAngularLimitJointBuilder(angularLimit)`` 
        
        :param angularLimit:  :py:class:`NXOpen.Mechatronics.AngularLimitJoint` to be edited, if None then create a new one  
        :type angularLimit: :py:class:`NXOpen.Mechatronics.AngularLimitJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.AngularLimitJointBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> AngularLimitJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.AngularLimitJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.AngularLimitJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.AngularLimitJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.AngularLimitJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ExportSensorsActuatorsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ExportSensorsActuatorsBuilder`.                    
    When the builder is committed, a text file specified by :py:meth:`NXOpen.Mechatronics.ExportSensorsActuatorsBuilder.ExportFile` is output. 
    This text file is used to instantiate SIMIT template. The format explanation can be found in SIMIT manual of 'SMD table import' with 'Placeholder listed individually option'.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateExportSensorsActuatorsBuilder`
    
    .. versionadded:: NX11.0.0
    """
    ExportFile: str = ...
    """
    Returns or sets  the export file name  
    
    <hr>
    
    Getter Method
    
    Signature ``ExportFile`` 
    
    :returns:  The export file name  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ExportFile`` 
    
    :param exportFile:  The export file name  
    :type exportFile: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SensorActuatorList: SensorsActuatorsListBuilderList = ...
    """
    Returns  the sensor actuator builder list  
    
    <hr>
    
    Getter Method
    
    Signature ``SensorActuatorList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilderList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ExportSensorsActuatorsBuilder = ...  # unknown typename


class LinearLimitJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Linear Limit Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLinearLimitJointBuilder(self, linearLimit: LinearLimitJoint) -> LinearLimitJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.LinearLimitJointBuilder`.  
        
        Signature ``CreateLinearLimitJointBuilder(linearLimit)`` 
        
        :param linearLimit:  :py:class:`NXOpen.Mechatronics.LinearLimitJoint` to be edited, if None then create a new one  
        :type linearLimit: :py:class:`NXOpen.Mechatronics.LinearLimitJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.LinearLimitJointBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> LinearLimitJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.LinearLimitJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.LinearLimitJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.LinearLimitJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.LinearLimitJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class AlignBody(NXOpen.NXObject):
    """
    Represents the Align Body.  
    
    An align body can make one body positioning or two bodies
    exactly lie upon each other. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.AlignBodyBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: AlignBody = ...  # unknown typename


class PositionSensor(NXOpen.DisplayableObject):
    """
    Represents the Position Sensor. A Position Sensor is able to detect the position of joint or controller.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.PositionSensorBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: PositionSensor = ...  # unknown typename


class RelayCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Relay.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRelayBuilder(self, relay: Relay) -> RelayBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.RelayBuilder`.  
        
        Signature ``CreateRelayBuilder(relay)`` 
        
        :param relay:  :py:class:`NXOpen.Mechatronics.Relay` to be edited, if None then create a new one  
        :type relay: :py:class:`NXOpen.Mechatronics.Relay` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.RelayBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> Relay:
        """
        Finds the :py:class:`NXOpen.Mechatronics.Relay` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.Relay`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.Relay` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.Relay` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SelectClassificationBuilder(NXOpen.Tooling.SelectReuseLibraryItemBuilder):
    """
    Select a classification from the reuse library.  
    
    .. versionadded:: NX11.0.0
    """
    ClassId: str = ...
    """
    Returns or sets  the Teamcenter storage class id.  
    
    It is the storage class ID of Teamcenter classification reuse library. 
    
    <hr>
    
    Getter Method
    
    Signature ``ClassId`` 
    
    :returns:  the class id  
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ClassId`` 
    
    :param classId:  the class id  
    :type classId: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SelectClassificationBuilder = ...  # unknown typename


class AlignBodyCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Align Body.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateAlignBodyBuilder(self, snapPoint: AlignBody) -> AlignBodyBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.AlignBodyBuilder`.  
        
        Signature ``CreateAlignBodyBuilder(snapPoint)`` 
        
        :param snapPoint:  :py:class:`NXOpen.Mechatronics.AlignBody` to be edited, if None then create a new one  
        :type snapPoint: :py:class:`NXOpen.Mechatronics.AlignBody` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.AlignBodyBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> AlignBody:
        """
        Finds the :py:class:`NXOpen.Mechatronics.AlignBody` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.AlignBody`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.AlignBody` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.AlignBody` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PositionSensorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Position Sensor.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePositionSensorBuilder(self, positionSensor: PositionSensor) -> PositionSensorBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PositionSensorBuilder`.  
        
        Signature ``CreatePositionSensorBuilder(positionSensor)`` 
        
        :param positionSensor:  :py:class:`NXOpen.Mechatronics.PositionSensor` to be edited, if None then create a new one  
        :type positionSensor: :py:class:`NXOpen.Mechatronics.PositionSensor` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PositionSensorBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> PositionSensor:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PositionSensor` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PositionSensor`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PositionSensor` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PositionSensor` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ECADExportBuilderExportFileTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ECADExportBuilderExportFileType():
    """
    Represents the export file type.   
    
    .. deprecated::  NX9.0.0
       This enum type has no replacement. It is no longer supported.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Xml", "XML File"
       "Csv", "CSV File"
       "Eplan", "EPLAN File"
    """
    Xml = 0  # ECADExportBuilderExportFileTypeMemberType
    Csv = 1  # ECADExportBuilderExportFileTypeMemberType
    Eplan = 2  # ECADExportBuilderExportFileTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ECADExportBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ECADExportBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateECADExportBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class ExportFileType():
        """
        Represents the export file type.   
        
        .. deprecated::  NX9.0.0
           This enum type has no replacement. It is no longer supported.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Xml", "XML File"
           "Csv", "CSV File"
           "Eplan", "EPLAN File"
        """
        Xml = 0  # ECADExportBuilderExportFileTypeMemberType
        Csv = 1  # ECADExportBuilderExportFileTypeMemberType
        Eplan = 2  # ECADExportBuilderExportFileTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetExportAttributesName(self) -> 'list[str]':
        """
        Gets the exported attributes name  
        
        Signature ``GetExportAttributesName()`` 
        
        :returns:  Exported attributes name  
        :rtype: list of str 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           This method has no replacement. It is no longer supported.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetExportAttributesName(self, exportAttributesName: 'list[str]') -> None:
        """
        Sets the exported attributes name 
        
        Signature ``SetExportAttributesName(exportAttributesName)`` 
        
        :param exportAttributesName:  Exported attributes name  
        :type exportAttributesName: list of str 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           This method has no replacement. It is no longer supported.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ExportFile: str = ...
    """
    Returns or sets  the export file name 
    
    <hr>
    
    Getter Method
    
    Signature ``ExportFile`` 
    
    :returns:  The export file name  
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExportFile`` 
    
    :param exportFile:  The export file name  
    :type exportFile: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExportFileFormat: ECADExportBuilderExportFileType = ...
    """
    Returns or sets  the export file format.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExportFileFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ECADExportBuilderExportFileType` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX9.0.0
       This method has no replacement. It is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ExportFileFormat`` 
    
    :param exportFileFormat: 
    :type exportFileFormat: :py:class:`NXOpen.Mechatronics.ECADExportBuilderExportFileType` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX9.0.0
       This method has no replacement. It is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectLogicals: SelectLogicObjectList = ...
    """
    Returns  the selected logical objects.  
    
    This can be a :py:class:`NXOpen.Mechatronics.LogicObject`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLogicals`` 
    
    :returns:  Array of selected logical objects  
    :rtype: :py:class:`NXOpen.Mechatronics.SelectLogicObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: ECADExportBuilder = ...  # unknown typename


class ProfinetClientBuilderTagInfo_Struct():
    """
    Represents Profinet signal  definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.ProfinetClientBuilder.TagInfo()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    StrName: str = ...
    """
    Signal Object       
    <hr>
    
    Field Value
    Type:str
    """
    EDataType: SignalBuilderDataType = ...
    """
    Signal Data Type     
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
    """
    EIOType: SignalBuilderExternalSignalIOType = ...
    """
    Signal IO Type       
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
    """
    Address: str = ...
    """
    Adress value        
    <hr>
    
    Field Value
    Type:str
    """
    BDint: bool = ...
    """
    A mark for int DataType ,if true means int32 
    <hr>
    
    Field Value
    Type:bool
    """


class ProfinetClientBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.ProfinetClientBuilder` builder   
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    class TagInfo():
        """
        Represents Profinet signal  definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.ProfinetClientBuilder.TagInfo()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        StrName: str = ...
        """
        Signal Object       
        <hr>
        
        Field Value
        Type:str
        """
        EDataType: SignalBuilderDataType = ...
        """
        Signal Data Type     
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
        """
        EIOType: SignalBuilderExternalSignalIOType = ...
        """
        Signal IO Type       
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
        """
        Address: str = ...
        """
        Adress value        
        <hr>
        
        Field Value
        Type:str
        """
        BDint: bool = ...
        """
        A mark for int DataType ,if true means int32 
        <hr>
        
        Field Value
        Type:bool
        """
    
    
    def SetTags(self, tagInfos: 'list[ProfinetClientBuilderTagInfo_Struct]') -> None:
        """
        Set Profinet Client Infomation  
        
        Signature ``SetTags(tagInfos)`` 
        
        :param tagInfos:  Array of TagInfos  
        :type tagInfos: list of :py:class:`NXOpen.Mechatronics.ProfinetClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetTags(self) -> 'list[ProfinetClientBuilderTagInfo_Struct]':
        """
        Get Profinet Client Infomation  
        
        Signature ``GetTags()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Mechatronics.ProfinetClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    InstanceName: str = ...
    """
    Returns or sets  the instance name  
    
    <hr>
    
    Getter Method
    
    Signature ``InstanceName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``InstanceName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationPart: NXOpen.Part = ...
    """
    Returns or sets  the selected configuration part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :param ownerPart: 
    :type ownerPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ProfinetClientBuilder = ...  # unknown typename


class PhysicsPreference(NXOpen.NXObject):
    """
    Represents the Physics Preference class.  
    
    A Physics Preference defines parameter
    about the physics. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.PreferencesBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: PhysicsPreference = ...  # unknown typename


class GanttOperationParameterBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[GanttOperationParameterBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: GanttOperationParameterBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: GanttOperationParameterBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> GanttOperationParameterBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: GanttOperationParameterBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: GanttOperationParameterBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[GanttOperationParameterBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[GanttOperationParameterBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: GanttOperationParameterBuilder, object2: GanttOperationParameterBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: GanttOperationParameterBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: GanttOperationParameterBuilderList = ...  # unknown typename


class ComparisonResultContextResolveConflictActionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ComparisonResultContextResolveConflictAction():
    """
    Defines actions for resolving conflicts 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ignore", "Ignore action"
       "Create", "Create action"
       "Update", "Update action"
    """
    Ignore = 0  # ComparisonResultContextResolveConflictActionMemberType
    Create = 1  # ComparisonResultContextResolveConflictActionMemberType
    Update = 2  # ComparisonResultContextResolveConflictActionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ComparisonResultContext(ComparisonResultBase):
    """
    Represents context of comparison results   
    
    .. versionadded:: NX9.0.0
    """
    
    class ResolveConflictAction():
        """
        Defines actions for resolving conflicts 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ignore", "Ignore action"
           "Create", "Create action"
           "Update", "Update action"
        """
        Ignore = 0  # ComparisonResultContextResolveConflictActionMemberType
        Create = 1  # ComparisonResultContextResolveConflictActionMemberType
        Update = 2  # ComparisonResultContextResolveConflictActionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called, it is illegal to use the object. In .NET, this method is automatically called when the object is deleted by the garbage collector. 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetResults(self) -> 'list[ComparisonResult]':
        """
        Gets a list of comparison results from the context 
        
        Signature ``GetResults()`` 
        
        :returns:  Array of results  
        :rtype: list of :py:class:`NXOpen.Mechatronics.ComparisonResult` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ResolveConflictResult(self, conflictResult: ComparisonResult, action: ComparisonResultContextResolveConflictAction) -> 'list[ComparisonResult]':
        """
        Generates some new results to resolve the conflict 
        
        Signature ``ResolveConflictResult(conflictResult, action)`` 
        
        :param conflictResult: 
        :type conflictResult: :py:class:`NXOpen.Mechatronics.ComparisonResult` 
        :param action: 
        :type action: :py:class:`NXOpen.Mechatronics.ComparisonResultContextResolveConflictAction` 
        :returns:  Array of new generated results  
        :rtype: list of :py:class:`NXOpen.Mechatronics.ComparisonResult` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    EcadProjectId: str = ...
    """
    Returns  the ECAD project ID from the comparison context 
    
    <hr>
    
    Getter Method
    
    Signature ``EcadProjectId`` 
    
    :returns:  Project ID of ECAD model  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PartName: str = ...
    """
    Returns  the part name from the comparison context 
    
    <hr>
    
    Getter Method
    
    Signature ``PartName`` 
    
    :returns:  Name of logical model part  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """


class MotionProfileCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Motion Profile.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateMotionProfileBuilder(self, functionTable: MotionProfile) -> MotionProfileBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.MotionProfileBuilder`.  
        
        Signature ``CreateMotionProfileBuilder(functionTable)`` 
        
        :param functionTable:  :py:class:`NXOpen.Mechatronics.MotionProfile` to be edited, if None then create a new one  
        :type functionTable: :py:class:`NXOpen.Mechatronics.MotionProfile` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.MotionProfileBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> MotionProfile:
        """
        Finds the :py:class:`NXOpen.Mechatronics.MotionProfile` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.MotionProfile`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.MotionProfile` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.MotionProfile` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class RuntimeFormulaParameterBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[RuntimeFormulaParameterBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: RuntimeFormulaParameterBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: RuntimeFormulaParameterBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> RuntimeFormulaParameterBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: RuntimeFormulaParameterBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: RuntimeFormulaParameterBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[RuntimeFormulaParameterBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[RuntimeFormulaParameterBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: RuntimeFormulaParameterBuilder, object2: RuntimeFormulaParameterBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: RuntimeFormulaParameterBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: RuntimeFormulaParameterBuilderList = ...  # unknown typename


class TransmitterExit(PhysicsConstraint):
    """
    Represents the Transmitter Exit. A Transmitter Exit is able to receive rigid bodies sending by an entry.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.TransmitterExitBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: TransmitterExit = ...  # unknown typename


class CouplingBuilder(PhysicsConstraintBuilder):
    """
    This is an abstract class, and cannot be created.  
    
    This is an abstract class, and cannot be created.
    
    .. versionadded:: NX7.5.1
    """
    
    def SetMasterAxisJoint(self, master: PhysicsJoint) -> None:
        """
        Sets the master axis.  
        
        Signature ``SetMasterAxisJoint(master)`` 
        
        :param master: 
        :type master: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSlaveAxisJoint(self, slave: PhysicsJoint) -> None:
        """
        Sets the slave axis.  
        
        Signature ``SetSlaveAxisJoint(slave)`` 
        
        :param slave: 
        :type slave: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AllowSlip: bool = ...
    """
    Returns or sets  the coulping can slip or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``AllowSlip`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AllowSlip`` 
    
    :param allowSlip: 
    :type allowSlip: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterAxisJoint: SelectPhysicsJoint = ...
    """
    Returns  the master axis joint.  
    
    This can be a :py:class:`NXOpen.Mechatronics.HingeJoint`, :py:class:`NXOpen.Mechatronics.SlidingJoint` 
    and :py:class:`NXOpen.Mechatronics.CylindricalJoint`.
    
    <hr>
    
    Getter Method
    
    Signature ``MasterAxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveAxisJoint: SelectPhysicsJoint = ...
    """
    Returns  the slave axis joint.  
    
    This can be a :py:class:`NXOpen.Mechatronics.HingeJoint`, :py:class:`NXOpen.Mechatronics.SlidingJoint` 
    and :py:class:`NXOpen.Mechatronics.CylindricalJoint`.
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveAxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: CouplingBuilder = ...  # unknown typename


class GearBuilderAxisJointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GearBuilderAxisJointType():
    """
    the axis joint types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Angular", "Angular"
    """
    Linear = 0  # GearBuilderAxisJointTypeMemberType
    Angular = 1  # GearBuilderAxisJointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GearBuilder(CouplingBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.Gear` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.GearCollection.CreateGearBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class AxisJointType():
        """
        the axis joint types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Angular", "Angular"
        """
        Linear = 0  # GearBuilderAxisJointTypeMemberType
        Angular = 1  # GearBuilderAxisJointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisType: GearBuilderAxisJointType = ...
    """
    Returns or sets  the axis joint type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GearBuilderAxisJointType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Mechatronics.GearBuilderAxisJointType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExpressionMasterMultiple: NXOpen.Expression = ...
    """
    Returns  the master multiple expression.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionMasterMultiple`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExpressionSlaveMultiple: NXOpen.Expression = ...
    """
    Returns  the slave multiple expression.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionSlaveMultiple`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterMultiple: float = ...
    """
    Returns or sets  the master multiple.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterMultiple`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MasterMultiple`` 
    
    :param masterMultiple: 
    :type masterMultiple: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveMultiple: float = ...
    """
    Returns or sets  the slave multiple.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveMultiple`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SlaveMultiple`` 
    
    :param slaveMultiple: 
    :type slaveMultiple: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: GearBuilder = ...  # unknown typename


class OPCClientBuilderServerOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OPCClientBuilderServerOption():
    """
    the server option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Local", "local server"
       "Remote", "remote server"
       "InProc", "in proc server"
    """
    Local = 0  # OPCClientBuilderServerOptionMemberType
    Remote = 1  # OPCClientBuilderServerOptionMemberType
    InProc = 2  # OPCClientBuilderServerOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OPCClientBuilderTagDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OPCClientBuilderTagDataType():
    """
    the data type of OPC item. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "unknown type"
       "Integer", "integer type"
       "Float", "float type"
       "Boolean", "boolean type"
    """
    Unknown = 0  # OPCClientBuilderTagDataTypeMemberType
    Integer = 1  # OPCClientBuilderTagDataTypeMemberType
    Float = 2  # OPCClientBuilderTagDataTypeMemberType
    Boolean = 3  # OPCClientBuilderTagDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OPCClientBuilderTagAccessMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class OPCClientBuilderTagAccess():
    """
    the access right of OPC item. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ReadOnly", "read only"
       "WriteOnly", "write only"
       "ReadWrite", "read and write"
    """
    ReadOnly = 1  # OPCClientBuilderTagAccessMemberType
    WriteOnly = 2  # OPCClientBuilderTagAccessMemberType
    ReadWrite = 3  # OPCClientBuilderTagAccessMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class OPCClientBuilderTagAttribute_Struct():
    """
    the attribute of OPC item.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.OPCClientBuilder.TagAttribute()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    TagName: str = ...
    """
    item Name 
    <hr>
    
    Field Value
    Type:str
    """
    TagType: OPCClientBuilderTagDataType = ...
    """
    Data Type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.OPCClientBuilderTagDataType`
    """
    TagAccess: OPCClientBuilderTagAccess = ...
    """
    Access Right 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.OPCClientBuilderTagAccess`
    """


class OPCClientBuilderTagInfo_Struct():
    """
    Represents OPCUATag info definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.OPCClientBuilder.TagInfo()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    PLCTag Name          
    <hr>
    
    Field Value
    Type:str
    """
    EIOType: SignalBuilderExternalSignalIOType = ...
    """
    IO type              
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
    """
    EDataType: SignalBuilderDataType = ...
    """
    Data type            
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
    """


class OPCClientBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.OPCClientBuilder`   
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX8.0.0
    """
    
    class ServerOption():
        """
        the server option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Local", "local server"
           "Remote", "remote server"
           "InProc", "in proc server"
        """
        Local = 0  # OPCClientBuilderServerOptionMemberType
        Remote = 1  # OPCClientBuilderServerOptionMemberType
        InProc = 2  # OPCClientBuilderServerOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TagDataType():
        """
        the data type of OPC item. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", "unknown type"
           "Integer", "integer type"
           "Float", "float type"
           "Boolean", "boolean type"
        """
        Unknown = 0  # OPCClientBuilderTagDataTypeMemberType
        Integer = 1  # OPCClientBuilderTagDataTypeMemberType
        Float = 2  # OPCClientBuilderTagDataTypeMemberType
        Boolean = 3  # OPCClientBuilderTagDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TagAccess():
        """
        the access right of OPC item. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ReadOnly", "read only"
           "WriteOnly", "write only"
           "ReadWrite", "read and write"
        """
        ReadOnly = 1  # OPCClientBuilderTagAccessMemberType
        WriteOnly = 2  # OPCClientBuilderTagAccessMemberType
        ReadWrite = 3  # OPCClientBuilderTagAccessMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TagAttribute():
        """
        the attribute of OPC item.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.OPCClientBuilder.TagAttribute()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        TagName: str = ...
        """
        item Name 
        <hr>
        
        Field Value
        Type:str
        """
        TagType: OPCClientBuilderTagDataType = ...
        """
        Data Type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.OPCClientBuilderTagDataType`
        """
        TagAccess: OPCClientBuilderTagAccess = ...
        """
        Access Right 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.OPCClientBuilderTagAccess`
        """
    
    
    class TagInfo():
        """
        Represents OPCUATag info definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.OPCClientBuilder.TagInfo()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        PLCTag Name          
        <hr>
        
        Field Value
        Type:str
        """
        EIOType: SignalBuilderExternalSignalIOType = ...
        """
        IO type              
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
        """
        EDataType: SignalBuilderDataType = ...
        """
        Data type            
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
        """
    
    
    def DeleteTags(self) -> None:
        """
        Delete item from the list.  
        
        Signature ``DeleteTags()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddTags(self) -> None:
        """
        Add item to the list.  
        
        Signature ``AddTags()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetAvailableItems(self) -> tuple:
        """
        Get the available OPC items.  
        
        Signature ``GetAvailableItems()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (tagName, tagType). tagName is a list of str. tagType is a list of :py:class:`NXOpen.Mechatronics.OPCClientBuilderTagDataType`. 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetAvailableItems(self, tagName: 'list[str]', tagType: 'list[OPCClientBuilderTagDataType]') -> None:
        """
        Set the available OPC items.  
        
        Signature ``SetAvailableItems(tagName, tagType)`` 
        
        :param tagName: 
        :type tagName: list of str 
        :param tagType: 
        :type tagType: list of :py:class:`NXOpen.Mechatronics.OPCClientBuilderTagDataType` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetItemAttributes(self) -> 'list[OPCClientBuilderTagAttribute_Struct]':
        """
        Get the attribute of OPC items 
        
        Signature ``GetItemAttributes()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Mechatronics.OPCClientBuilderTagAttribute_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetItemAttributes(self, attr: 'list[OPCClientBuilderTagAttribute_Struct]') -> None:
        """
        Set the attribute of OPC items 
        
        Signature ``SetItemAttributes(attr)`` 
        
        :param attr: 
        :type attr: list of :py:class:`NXOpen.Mechatronics.OPCClientBuilderTagAttribute_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetServerNames(self) -> 'list[str]':
        """
        Gets OPC instance names  
        
        Signature ``GetServerNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetServerTags(self, serverName: str) -> 'list[OPCClientBuilderTagInfo_Struct]':
        """
        Gets OPC instance Tags  
        
        Signature ``GetServerTags(serverName)`` 
        
        :param serverName: 
        :type serverName: str 
        :returns:  Array of TagInfos  
        :rtype: list of :py:class:`NXOpen.Mechatronics.OPCClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    HostName: str = ...
    """
    Returns or sets  the host name.  
    
    <hr>
    
    Getter Method
    
    Signature ``HostName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HostName`` 
    
    :param hostName: 
    :type hostName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OpcFileBrowser: str = ...
    """
    Returns or sets  the opc file browser.  
    
    <hr>
    
    Getter Method
    
    Signature ``OpcFileBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OpcFileBrowser`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationPart: NXOpen.Part = ...
    """
    Returns or sets  the selected configuration part  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :param ownerPart: 
    :type ownerPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ServerProgID: str = ...
    """
    Returns or sets  the server prog ID.  
    
    <hr>
    
    Getter Method
    
    Signature ``ServerProgID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ServerProgID`` 
    
    :param serverProgID: 
    :type serverProgID: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ServerType: OPCClientBuilderServerOption = ...
    """
    Returns or sets  the server type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ServerType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.OPCClientBuilderServerOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ServerType`` 
    
    :param serverType: 
    :type serverType: :py:class:`NXOpen.Mechatronics.OPCClientBuilderServerOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpdateTime: NXOpen.Expression = ...
    """
    Returns  the update time.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateTime`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: OPCClientBuilder = ...  # unknown typename


class VelocitySensor(NXOpen.DisplayableObject):
    """
    Represents the Velocity Sensor. A Velocity Sensor is able to detect the velocity of joint or controller.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.VelocitySensorBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: VelocitySensor = ...  # unknown typename


class RuntimeFormulaParameter(NXOpen.NXObject):
    """
    Represents the Runtime Formula Parameter class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.RuntimeFormulaBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: RuntimeFormulaParameter = ...  # unknown typename


class ElectricalPartBuilderAttribute_Struct():
    """
    Defined Attribute Structure .  
    
    Constructor: 
    NXOpen.Mechatronics.ElectricalPartBuilder.Attribute()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    AttributeName: str = ...
    """
    Attribute name 
    <hr>
    
    Field Value
    Type:str
    """
    AttributeValue: str = ...
    """
    Attribute value 
    <hr>
    
    Field Value
    Type:str
    """


class ElectricalPartBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ElectricalPart` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ElectricalPartCollection.CreateElectricalPartBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class Attribute():
        """
        Defined Attribute Structure .  
        
        Constructor: 
        NXOpen.Mechatronics.ElectricalPartBuilder.Attribute()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        AttributeName: str = ...
        """
        Attribute name 
        <hr>
        
        Field Value
        Type:str
        """
        AttributeValue: str = ...
        """
        Attribute value 
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetOwner(self) -> SystemObject:
        """
        Get the owner system object.  
        
        Signature ``GetOwner()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOwner(self, owner: SystemObject) -> None:
        """
        Set the owner system object.  
        
        Signature ``SetOwner(owner)`` 
        
        :param owner: 
        :type owner: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetAttributes(self) -> 'list[ElectricalPartBuilderAttribute_Struct]':
        """
        Get the attributes data.  
        
        Signature ``GetAttributes()`` 
        
        :returns:  attribute array 
        :rtype: list of :py:class:`NXOpen.Mechatronics.ElectricalPartBuilderAttribute_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetAttributes(self, attribute: 'list[ElectricalPartBuilderAttribute_Struct]') -> None:
        """
        Set the attributes data.  
        
        Signature ``SetAttributes(attribute)`` 
        
        :param attribute:  attribute array  
        :type attribute: list of :py:class:`NXOpen.Mechatronics.ElectricalPartBuilderAttribute_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    PartNumber: str = ...
    """
    Returns or sets  the part number 
    
    <hr>
    
    Getter Method
    
    Signature ``PartNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartNumber`` 
    
    :param partNumber: 
    :type partNumber: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ElectricalPartBuilder = ...  # unknown typename


class ObjectSourceBuilderCopyEventTriggerOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ObjectSourceBuilderCopyEventTriggerOption():
    """
    Trigger Option in copy event. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TimeBased", "TimeBased"
       "OncePerActivation", "OncePerActivation"
    """
    TimeBased = 0  # ObjectSourceBuilderCopyEventTriggerOptionMemberType
    OncePerActivation = 1  # ObjectSourceBuilderCopyEventTriggerOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ObjectSourceBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ObjectSource` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ObjectSourceCollection.CreateObjectSourceBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class CopyEventTriggerOption():
        """
        Trigger Option in copy event. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TimeBased", "TimeBased"
           "OncePerActivation", "OncePerActivation"
        """
        TimeBased = 0  # ObjectSourceBuilderCopyEventTriggerOptionMemberType
        OncePerActivation = 1  # ObjectSourceBuilderCopyEventTriggerOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetObjectsToCopy(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the objects to be copied.  
        
        Signature ``SetObjectsToCopy(objects)`` 
        
        :param objects:  Objects to be copied 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    CopyEventTrigger: ObjectSourceBuilderCopyEventTriggerOption = ...
    """
    Returns or sets  the event option.  
    
    <hr>
    
    Getter Method
    
    Signature ``CopyEventTrigger`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ObjectSourceBuilderCopyEventTriggerOption` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CopyEventTrigger`` 
    
    :param copyEventTrigger: 
    :type copyEventTrigger: :py:class:`NXOpen.Mechatronics.ObjectSourceBuilderCopyEventTriggerOption` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ObjectToCopy: NXOpen.SelectNXObjectList = ...
    """
    Returns  the object select.  
    
    This can be a :py:class:`NXOpen.Mechatronics.RigidBody` or :py:class:`NXOpen.Assemblies.ComponentAssembly`.
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectToCopy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StartOffset: NXOpen.Expression = ...
    """
    Returns  the start offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    TimeInterval: NXOpen.Expression = ...
    """
    Returns  the time interval.  
    
    <hr>
    
    Getter Method
    
    Signature ``TimeInterval`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ObjectSourceBuilder = ...  # unknown typename


class SpringDamper(PhysicsConstraint):
    """
    Represents the Spring Damper.  
    
    A Spring Damper causes spring force and damping to an axis joint. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.SpringDamperBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: SpringDamper = ...  # unknown typename


class ProxyObjectCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Proxy Object.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateProxyObjectBuilder(self, proxyObject: ProxyObject) -> ProxyObjectBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ProxyObjectBuilder`.  
        
        Signature ``CreateProxyObjectBuilder(proxyObject)`` 
        
        :param proxyObject:  :py:class:`NXOpen.Mechatronics.ProxyObject` to be edited, if None then create a new one  
        :type proxyObject: :py:class:`NXOpen.Mechatronics.ProxyObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ProxyObjectBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateProxyObjectParameterBuilder(self) -> ProxyObjectParameterBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder`  
        
        Signature ``CreateProxyObjectParameterBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ProxyObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ProxyObject` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ProxyObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ProxyObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ProxyObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class CollisionSensor(NXOpen.DisplayableObject):
    """
    Represents the Collision Sensor.  
    
    A Collision Sensor is able to detect the presence
    of objects that intersect with its volume. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.CollisionSensorBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: CollisionSensor = ...  # unknown typename


class DistanceSensor(NXOpen.DisplayableObject):
    """
    Represents the Distance Sensor. A Distance Sensor is able to detect the shortest distance between the sensor and collision body
    of objects that intersect with its volume.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.DistanceSensorBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: DistanceSensor = ...  # unknown typename


class DynamicObjectTableBuilderInstance_Struct():
    """
    Represents Instance definition structure.  
    
    The Instance name must be unique in the context of Instance Table.
    .
    Constructor: 
    NXOpen.Mechatronics.DynamicObjectTableBuilder.Instance()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    Table Name             
    <hr>
    
    Field Value
    Type:str
    """
    TDefiningSnap: NXOpen.NXObject = ...
    """
    Defining SnapPoint tag 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    TDynamicObject: NXOpen.NXObject = ...
    """
    Dynamic Object         
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    TComplyingSnap: NXOpen.NXObject = ...
    """
    Complying SnapPoint tag
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """


class SHMSignalConnectionBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SHMSignalConnectionBuilderDataType():
    """
    Represents the data type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bool", "bool"
       "Int", "int"
       "Double", "double"
    """
    Bool = 0  # SHMSignalConnectionBuilderDataTypeMemberType
    Int = 1  # SHMSignalConnectionBuilderDataTypeMemberType
    Double = 2  # SHMSignalConnectionBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SHMSignalConnectionBuilderSHMSignalAccessTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SHMSignalConnectionBuilderSHMSignalAccessType():
    """
    Represents the SHM Signal access type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Read", "read"
       "Write", "write"
    """
    Read = 0  # SHMSignalConnectionBuilderSHMSignalAccessTypeMemberType
    Write = 1  # SHMSignalConnectionBuilderSHMSignalAccessTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SHMSignalConnectionBuilderStreamIOTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SHMSignalConnectionBuilderStreamIOType():
    """
    Represents the mapping data sream direction. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Tomcd", "write to MCD"
       "Toshm", "write to SHM"
    """
    Tomcd = 0  # SHMSignalConnectionBuilderStreamIOTypeMemberType
    Toshm = 1  # SHMSignalConnectionBuilderStreamIOTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SHMSignalConnectionBuilderEndianTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SHMSignalConnectionBuilderEndianType():
    """
    Represents the endian type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Little", "little endian"
       "Big", "big endian"
    """
    Little = 0  # SHMSignalConnectionBuilderEndianTypeMemberType
    Big = 1  # SHMSignalConnectionBuilderEndianTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SHMSignalConnectionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.SHMSignalConnectionCollection.CreateSHMSignalConnectionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class DataType():
        """
        Represents the data type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bool", "bool"
           "Int", "int"
           "Double", "double"
        """
        Bool = 0  # SHMSignalConnectionBuilderDataTypeMemberType
        Int = 1  # SHMSignalConnectionBuilderDataTypeMemberType
        Double = 2  # SHMSignalConnectionBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SHMSignalAccessType():
        """
        Represents the SHM Signal access type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Read", "read"
           "Write", "write"
        """
        Read = 0  # SHMSignalConnectionBuilderSHMSignalAccessTypeMemberType
        Write = 1  # SHMSignalConnectionBuilderSHMSignalAccessTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StreamIOType():
        """
        Represents the mapping data sream direction. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Tomcd", "write to MCD"
           "Toshm", "write to SHM"
        """
        Tomcd = 0  # SHMSignalConnectionBuilderStreamIOTypeMemberType
        Toshm = 1  # SHMSignalConnectionBuilderStreamIOTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EndianType():
        """
        Represents the endian type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Little", "little endian"
           "Big", "big endian"
        """
        Little = 0  # SHMSignalConnectionBuilderEndianTypeMemberType
        Big = 1  # SHMSignalConnectionBuilderEndianTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AdapterObject: SignalAdapter = ...
    """
    Returns or sets  the adapter object.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdapterObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AdapterObject`` 
    
    :param adapterObject: 
    :type adapterObject: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Endian: SHMSignalConnectionBuilderEndianType = ...
    """
    Returns or sets  the endian type.  
    
    <hr>
    
    Getter Method
    
    Signature ``Endian`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderEndianType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Endian`` 
    
    :param endian: 
    :type endian: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderEndianType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ResultName: str = ...
    """
    Returns or sets  the mapping result name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ResultName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ResultName`` 
    
    :param resultName: 
    :type resultName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SHMName: str = ...
    """
    Returns or sets  the SHM name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SHMName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SHMName`` 
    
    :param shmName: 
    :type shmName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SHMSignalAccess: SHMSignalConnectionBuilderSHMSignalAccessType = ...
    """
    Returns or sets  the SHM access previlege type.  
    
    <hr>
    
    Getter Method
    
    Signature ``SHMSignalAccess`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderSHMSignalAccessType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SHMSignalAccess`` 
    
    :param shmSignalAccess: 
    :type shmSignalAccess: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderSHMSignalAccessType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SHMSignalName: str = ...
    """
    Returns or sets  the SHM signal name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SHMSignalName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SHMSignalName`` 
    
    :param shmsignalName: 
    :type shmsignalName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SHMSignalType: SHMSignalConnectionBuilderDataType = ...
    """
    Returns or sets  the SHM signal type.  
    
    <hr>
    
    Getter Method
    
    Signature ``SHMSignalType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderDataType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SHMSignalType`` 
    
    :param shmSignalType: 
    :type shmSignalType: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderDataType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SignalObject: NXOpen.NXObject = ...
    """
    Returns or sets  the signal object.  
    
    <hr>
    
    Getter Method
    
    Signature ``SignalObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SignalObject`` 
    
    :param signalObject: 
    :type signalObject: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StreamIO: SHMSignalConnectionBuilderStreamIOType = ...
    """
    Returns or sets  the data stream direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``StreamIO`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderStreamIOType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``StreamIO`` 
    
    :param streamIO: 
    :type streamIO: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderStreamIOType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SHMSignalConnectionBuilder = ...  # unknown typename


class SignalMappingConnection(NXOpen.DisplayableObject):
    """
    Represents the Signal Mapping Connection class. Signal Mapping connection objects are able 
    to connect MCD signals with external signals. 
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: SignalMappingConnection = ...  # unknown typename


class CamProfile(NXOpen.NXObject):
    """
    Represents the CamProfile class.  
    
    A Cam Profile consists of several segments.
    It is used to define a new profile for a cam constraint. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.CamProfileBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: CamProfile = ...  # unknown typename


class ProxyObjectParameterBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ProxyObjectCollection.CreateProxyObjectParameterBuilder`
    
    .. versionadded:: NX8.5.0
    """
    AttrName: str = ...
    """
    Returns or sets  the name of parameter attribute in proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``AttrName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AttrName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AttrType: int = ...
    """
    Returns or sets  the data type of parameter attribute in proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``AttrType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AttrType`` 
    
    :param type: 
    :type type: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    BoolValue: NXOpen.Expression = ...
    """
    Returns or sets  the bool value of parameter attribute in proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``BoolValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BoolValue`` 
    
    :param boolValueExp: 
    :type boolValueExp: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    IntValue: NXOpen.Expression = ...
    """
    Returns or sets  the int value of parameter attribute in proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``IntValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``IntValue`` 
    
    :param intValueExp: 
    :type intValueExp: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParamId: int = ...
    """
    Returns or sets  the maximum parameter id of parameter attribute in proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``ParamId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ParamId`` 
    
    :param paramId: 
    :type paramId: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RealValue: NXOpen.Expression = ...
    """
    Returns or sets  the real value of parameter attribute in proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``RealValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``RealValue`` 
    
    :param realValueExp: 
    :type realValueExp: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ProxyObjectParameterBuilder = ...  # unknown typename


class FixedJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Fixed Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFixedJointBuilder(self, slide: FixedJoint) -> FixedJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.FixedJointBuilder`.  
        
        Signature ``CreateFixedJointBuilder(slide)`` 
        
        :param slide:  :py:class:`NXOpen.Mechatronics.FixedJoint` to be edited, if None then create a new one  
        :type slide: :py:class:`NXOpen.Mechatronics.FixedJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.FixedJointBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> FixedJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.FixedJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.FixedJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.FixedJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.FixedJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class CamBuilderAxisJointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CamBuilderAxisJointType():
    """
    Represents the axis joint type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Angular", "Angular"
    """
    Linear = 0  # CamBuilderAxisJointTypeMemberType
    Angular = 1  # CamBuilderAxisJointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CamBuilderCreateCamDiskTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CamBuilderCreateCamDiskType():
    """
    Represents the cam disk type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Curve", "Curve"
       "Solid", "Solid"
    """
    Curve = 0  # CamBuilderCreateCamDiskTypeMemberType
    Solid = 1  # CamBuilderCreateCamDiskTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CamBuilderAddCamDiskToMasterOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CamBuilderAddCamDiskToMasterOption():
    """
    Represents the option of add cam disk. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Edit", "Edit"
       "Replace", "Replace"
    """
    NotSet = 0  # CamBuilderAddCamDiskToMasterOptionMemberType
    Edit = 1  # CamBuilderAddCamDiskToMasterOptionMemberType
    Replace = 2  # CamBuilderAddCamDiskToMasterOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CamBuilder(CouplingBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.Cam` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.CamCollection.CreateCamBuilder`
    
    Default values.
    
    ==========================  =====
    Property                    Value
    ==========================  =====
    LayerSettings.LayerOption   Work 
    ==========================  =====
    
    .. versionadded:: NX7.5.1
    """
    
    class AxisJointType():
        """
        Represents the axis joint type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Angular", "Angular"
        """
        Linear = 0  # CamBuilderAxisJointTypeMemberType
        Angular = 1  # CamBuilderAxisJointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CreateCamDiskType():
        """
        Represents the cam disk type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Curve", "Curve"
           "Solid", "Solid"
        """
        Curve = 0  # CamBuilderCreateCamDiskTypeMemberType
        Solid = 1  # CamBuilderCreateCamDiskTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AddCamDiskToMasterOption():
        """
        Represents the option of add cam disk. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Edit", "Edit"
           "Replace", "Replace"
        """
        NotSet = 0  # CamBuilderAddCamDiskToMasterOptionMemberType
        Edit = 1  # CamBuilderAddCamDiskToMasterOptionMemberType
        Replace = 2  # CamBuilderAddCamDiskToMasterOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetCurveFeatures(self) -> 'list[NXOpen.Features.Feature]':
        """
        Returns the curve feature  
        
        Signature ``GetCurveFeatures()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetCurveFeatures(self, curveFeatures: 'list[NXOpen.Features.Feature]') -> None:
        """
        Sets the curve features 
        
        Signature ``SetCurveFeatures(curveFeatures)`` 
        
        :param curveFeatures: 
        :type curveFeatures: list of :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddCurveFeature(self, curveFeature: NXOpen.Features.Feature) -> None:
        """
        Sets one curve feature 
        
        Signature ``AddCurveFeature(curveFeature)`` 
        
        :param curveFeature: 
        :type curveFeature: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetExtrudeFeature(self) -> NXOpen.Features.Feature:
        """
        Returns the extrude feature  
        
        Signature ``GetExtrudeFeature()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetExtrudeFeature(self, extrudeFeature: NXOpen.Features.Feature) -> None:
        """
        Sets the extrude feature 
        
        Signature ``SetExtrudeFeature(extrudeFeature)`` 
        
        :param extrudeFeature: 
        :type extrudeFeature: :py:class:`NXOpen.Features.Feature` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddCamDiskToMasterAxis(self, update: bool) -> bool:
        """
        Add cam disk to master axis by ja  
        
        Signature ``AddCamDiskToMasterAxis(update)`` 
        
        :param update: 
        :type update: bool 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AddCamDiskToMasterJointOption: CamBuilderAddCamDiskToMasterOption = ...
    """
    Returns or sets  the add cam disk to master joint option.  
    
    <hr>
    
    Getter Method
    
    Signature ``AddCamDiskToMasterJointOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamBuilderAddCamDiskToMasterOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AddCamDiskToMasterJointOption`` 
    
    :param addOption: 
    :type addOption: :py:class:`NXOpen.Mechatronics.CamBuilderAddCamDiskToMasterOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CamDiskRefPoint: NXOpen.Point = ...
    """
    Returns or sets  the cam disk reference point.  
    
    <hr>
    
    Getter Method
    
    Signature ``CamDiskRefPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CamDiskRefPoint`` 
    
    :param refPoint: 
    :type refPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CamDiskType: CamBuilderCreateCamDiskType = ...
    """
    Returns or sets  the cam disk type.  
    
    <hr>
    
    Getter Method
    
    Signature ``CamDiskType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamBuilderCreateCamDiskType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CamDiskType`` 
    
    :param camDiskType: 
    :type camDiskType: :py:class:`NXOpen.Mechatronics.CamBuilderCreateCamDiskType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CamProfile: CamProfile = ...
    """
    Returns or sets  the cam profile.  
    
    This can be :py:class:`NXOpen.Mechatronics.CamProfile`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CamProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamProfile` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CamProfile`` 
    
    :param profile: 
    :type profile: :py:class:`NXOpen.Mechatronics.CamProfile` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CreateCamDisk: bool = ...
    """
    Returns or sets  the toggle of create cam disk.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateCamDisk`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CreateCamDisk`` 
    
    :param createOption: 
    :type createOption: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExtrudeLength: NXOpen.Expression = ...
    """
    Returns  the extrude length.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LayerSettings: NXOpen.Display.LayerSettingsBuilder = ...
    """
    Returns  the layer  setting builder 
    
    <hr>
    
    Getter Method
    
    Signature ``LayerSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Display.LayerSettingsBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterAxisType: CamBuilderAxisJointType = ...
    """
    Returns or sets  the master axis type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterAxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamBuilderAxisJointType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MasterAxisType`` 
    
    :param masterAxisType: 
    :type masterAxisType: :py:class:`NXOpen.Mechatronics.CamBuilderAxisJointType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterOffset: NXOpen.Expression = ...
    """
    Returns  the master offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterScaleFactor: NXOpen.Expression = ...
    """
    Returns  the master scale factor.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterScaleFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MotionProfile: MotionProfile = ...
    """
    Returns or sets  the motion profile.  
    
    This can be :py:class:`NXOpen.Mechatronics.MotionProfile`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MotionProfile` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MotionProfile`` 
    
    :param profile: 
    :type profile: :py:class:`NXOpen.Mechatronics.MotionProfile` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RefPointOption: int = ...
    """
    Returns or sets  the cam disk reference point option.  
    
    <hr>
    
    Getter Method
    
    Signature ``RefPointOption`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``RefPointOption`` 
    
    :param refPointOption: 
    :type refPointOption: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveAxisType: CamBuilderAxisJointType = ...
    """
    Returns or sets  the slave axis type.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveAxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamBuilderAxisJointType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SlaveAxisType`` 
    
    :param slaveAxisType: 
    :type slaveAxisType: :py:class:`NXOpen.Mechatronics.CamBuilderAxisJointType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveOffset: NXOpen.Expression = ...
    """
    Returns  the slave offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveScaleFactor: NXOpen.Expression = ...
    """
    Returns the slave scale factor.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveScaleFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: CamBuilder = ...  # unknown typename


class PlanarJoint(PhysicsJoint):
    """
    Represents the Planar Joint. A Planar Joint is a connection that can rotate and move only in three directions. 
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.PlanarJointBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: PlanarJoint = ...  # unknown typename


class SymbolTableBuilderIOTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SymbolTableBuilderIOType():
    """
    Represents the IO type.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Input", "Input"
       "Output", "Output"
       "Inout", "Input/Output"
    """
    Input = 0  # SymbolTableBuilderIOTypeMemberType
    Output = 1  # SymbolTableBuilderIOTypeMemberType
    Inout = 2  # SymbolTableBuilderIOTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SymbolTableBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SymbolTableBuilderDataType():
    """
    Represents the data type.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bool", "bool"
       "Int", "int"
       "Double", "double"
    """
    Bool = 0  # SymbolTableBuilderDataTypeMemberType
    Int = 1  # SymbolTableBuilderDataTypeMemberType
    Double = 2  # SymbolTableBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SymbolTableBuilderSymbol_Struct():
    """
    Represents Symbol definition structure.  
    
    The Symbol name must be unique in the context of Symbol Table. The comment is optional. 
    .
    Constructor: 
    NXOpen.Mechatronics.SymbolTableBuilder.Symbol()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    Symbol Name          
    <hr>
    
    Field Value
    Type:str
    """
    EIOType: SymbolTableBuilderIOType = ...
    """
    IO type              
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SymbolTableBuilderIOType`
    """
    EDataType: SymbolTableBuilderDataType = ...
    """
    Data type            
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SymbolTableBuilderDataType`
    """
    Address: str = ...
    """
    Address              
    <hr>
    
    Field Value
    Type:str
    """
    Comment: str = ...
    """
    Comment Text         
    <hr>
    
    Field Value
    Type:str
    """


class SymbolTableBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SymbolTableBuilder` builder.  
    
    SymbolTableBuilder is used to maintain the :py:class:`NXOpen.Mechatronics.SymbolTable` 
    which is used for Signal creation. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.SymbolTableCollection.CreateSymbolTableBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class IOType():
        """
        Represents the IO type.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Input", "Input"
           "Output", "Output"
           "Inout", "Input/Output"
        """
        Input = 0  # SymbolTableBuilderIOTypeMemberType
        Output = 1  # SymbolTableBuilderIOTypeMemberType
        Inout = 2  # SymbolTableBuilderIOTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DataType():
        """
        Represents the data type.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bool", "bool"
           "Int", "int"
           "Double", "double"
        """
        Bool = 0  # SymbolTableBuilderDataTypeMemberType
        Int = 1  # SymbolTableBuilderDataTypeMemberType
        Double = 2  # SymbolTableBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Symbol():
        """
        Represents Symbol definition structure.  
        
        The Symbol name must be unique in the context of Symbol Table. The comment is optional. 
        .
        Constructor: 
        NXOpen.Mechatronics.SymbolTableBuilder.Symbol()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        Symbol Name          
        <hr>
        
        Field Value
        Type:str
        """
        EIOType: SymbolTableBuilderIOType = ...
        """
        IO type              
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SymbolTableBuilderIOType`
        """
        EDataType: SymbolTableBuilderDataType = ...
        """
        Data type            
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SymbolTableBuilderDataType`
        """
        Address: str = ...
        """
        Address              
        <hr>
        
        Field Value
        Type:str
        """
        Comment: str = ...
        """
        Comment Text         
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetSymbols(self) -> 'list[SymbolTableBuilderSymbol_Struct]':
        """
        Gets all Symbols.  
        
        Signature ``GetSymbols()`` 
        
        :returns:  Array of Symbols  
        :rtype: list of :py:class:`NXOpen.Mechatronics.SymbolTableBuilderSymbol_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSymbols(self, symbols: 'list[SymbolTableBuilderSymbol_Struct]') -> None:
        """
        Sets all Symbols.  
        
        Each Symbol name must be unique in the context of input Symbol list. Or the builder will raise an exception. 
        
        Signature ``SetSymbols(symbols)`` 
        
        :param symbols:  Array of Symbols  
        :type symbols: list of :py:class:`NXOpen.Mechatronics.SymbolTableBuilderSymbol_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SymbolTableBuilder = ...  # unknown typename


class GenericSensor(NXOpen.DisplayableObject):
    """
    Represents the Generic Sensor. A Generic Sensor is able to detect the parameter of physics object.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.GenericSensorBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: GenericSensor = ...  # unknown typename


class ObjectTransformerBuilderTransformSourceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ObjectTransformerBuilderTransformSourceType():
    """
    the transform option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AnyObject", "Any copied objects"
       "OnlySelected", "Selected sources"
    """
    AnyObject = 0  # ObjectTransformerBuilderTransformSourceTypeMemberType
    OnlySelected = 1  # ObjectTransformerBuilderTransformSourceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ObjectTransformerBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ObjectTransformer` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ObjectTransformerCollection.CreateObjectTransformerBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class TransformSourceType():
        """
        the transform option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AnyObject", "Any copied objects"
           "OnlySelected", "Selected sources"
        """
        AnyObject = 0  # ObjectTransformerBuilderTransformSourceTypeMemberType
        OnlySelected = 1  # ObjectTransformerBuilderTransformSourceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CollisionSensor: SelectCollisionSensorList = ...
    """
    Returns  the object select.  
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionSensor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectCollisionSensorList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExecuteOnce: bool = ...
    """
    Returns or sets  the execute once per activation.  
    
    If the executeOnce is true, then the transformation will
    only happen once. 
    
    <hr>
    
    Getter Method
    
    Signature ``ExecuteOnce`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ExecuteOnce`` 
    
    :param executeOnce: 
    :type executeOnce: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RigidBody: SelectRigidBody = ...
    """
    Returns  the rigid body object.  
    
    <hr>
    
    Getter Method
    
    Signature ``RigidBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectRigidBody` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Source: NXOpen.SelectNXObjectList = ...
    """
    Returns  the source select.  
    
    This can be a :py:class:`NXOpen.Mechatronics.ObjectTransformer`
    or :py:class:`NXOpen.Mechatronics.ObjectSource`.
    
    <hr>
    
    Getter Method
    
    Signature ``Source`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SourceType: ObjectTransformerBuilderTransformSourceType = ...
    """
    Returns or sets  the option to transform source.  
    
    <hr>
    
    Getter Method
    
    Signature ``SourceType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ObjectTransformerBuilderTransformSourceType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SourceType`` 
    
    :param srcType: 
    :type srcType: :py:class:`NXOpen.Mechatronics.ObjectTransformerBuilderTransformSourceType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ObjectTransformerBuilder = ...  # unknown typename


class OPCUAClientBuilderTagInfo_Struct():
    """
    Represents OPCUATag info definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.OPCUAClientBuilder.TagInfo()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    PLCTag Name          
    <hr>
    
    Field Value
    Type:str
    """
    EIOType: SignalBuilderExternalSignalIOType = ...
    """
    IO type              
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
    """
    EDataType: SignalBuilderDataType = ...
    """
    Data type            
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
    """


class OPCUAClientBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.OPCUAClientBuilder` builder.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    class TagInfo():
        """
        Represents OPCUATag info definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.OPCUAClientBuilder.TagInfo()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        PLCTag Name          
        <hr>
        
        Field Value
        Type:str
        """
        EIOType: SignalBuilderExternalSignalIOType = ...
        """
        IO type              
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
        """
        EDataType: SignalBuilderDataType = ...
        """
        Data type            
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
        """
    
    
    def GetServerNames(self) -> 'list[str]':
        """
        Gets OPC UA instance names  
        
        Signature ``GetServerNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetServerTags(self, serverName: str) -> 'list[OPCUAClientBuilderTagInfo_Struct]':
        """
        Gets OPC UA instance Tags  
        
        Signature ``GetServerTags(serverName)`` 
        
        :param serverName: 
        :type serverName: str 
        :returns:  Array of TagInfos  
        :rtype: list of :py:class:`NXOpen.Mechatronics.OPCUAClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetServerTags(self, serverName: str, tagInfos: 'list[OPCUAClientBuilderTagInfo_Struct]') -> None:
        """
        Sets OPC UA instance Tags  
        
        Signature ``SetServerTags(serverName, tagInfos)`` 
        
        :param serverName: 
        :type serverName: str 
        :param tagInfos:  Array of TagInfos  
        :type tagInfos: list of :py:class:`NXOpen.Mechatronics.OPCUAClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationPart: NXOpen.Part = ...
    """
    Returns or sets  the selected configuration part  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :param ownerPart: 
    :type ownerPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: OPCUAClientBuilder = ...  # unknown typename


class ProxyObjectBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProxyObjectBuilderType():
    """
    the Builder types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RuntimeParameters", "Runtime Parameters"
       "ProxyObject", "Proxy Object"
    """
    RuntimeParameters = 0  # ProxyObjectBuilderTypeMemberType
    ProxyObject = 1  # ProxyObjectBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProxyObjectBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ProxyObjectBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ProxyObjectCollection.CreateProxyObjectBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class Type():
        """
        the Builder types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RuntimeParameters", "Runtime Parameters"
           "ProxyObject", "Proxy Object"
        """
        RuntimeParameters = 0  # ProxyObjectBuilderTypeMemberType
        ProxyObject = 1  # ProxyObjectBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BuilderType: ProxyObjectBuilderType = ...
    """
    Returns or sets  the use type of this builder.  
    
    <hr>
    
    Getter Method
    
    Signature ``BuilderType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ProxyObjectBuilderType` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BuilderType`` 
    
    :param useType: 
    :type useType: :py:class:`NXOpen.Mechatronics.ProxyObjectBuilderType` 
    
    .. versionadded:: NX9.0.2
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Context: NXOpen.BasePart = ...
    """
    Returns or sets  the context part of the proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``Context`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.BasePart` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Context`` 
    
    :param context: 
    :type context: :py:class:`NXOpen.BasePart` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MaxParamId: int = ...
    """
    Returns or sets  the maximum parameter id used in the proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxParamId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MaxParamId`` 
    
    :param paramId: 
    :type paramId: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParameterList: ProxyObjectParameterBuilderList = ...
    """
    Returns  the parameter data 
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilderList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ProxyObjectName: str = ...
    """
    Returns or sets  the name of the proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``ProxyObjectName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ProxyObjectName`` 
    
    :param proxyObjectName: 
    :type proxyObjectName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectGeomObject: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select geometry object that describes the proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectGeomObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectPhysicsObject: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select physics objects that are encapsulated in the proxy object 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPhysicsObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseType: int = ...
    """
    Returns or sets  the use type used in the proxy object.  
    
    Use :py:meth:`NXOpen.Mechatronics.ProxyObjectBuilder.BuilderType`` instead. 
    
    <hr>
    
    Getter Method
    
    Signature ``UseType`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseType`` 
    
    :param useType: 
    :type useType: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ProxyObjectBuilder = ...  # unknown typename


class TCPClientBuilderSignal_Struct():
    """
    Represents TCP signal definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.TCPClientBuilder.Signal()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    Signal Name 
    <hr>
    
    Field Value
    Type:str
    """
    EIOType: SignalBuilderExternalSignalIOType = ...
    """
    Signal IO type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
    """
    EDataType: SignalBuilderDataType = ...
    """
    Signal Data type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
    """
    Offset: str = ...
    """
    Signal offset 
    <hr>
    
    Field Value
    Type:str
    """


class TCPClientBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.TCPClientBuilder` builder.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    class Signal():
        """
        Represents TCP signal definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.TCPClientBuilder.Signal()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        Signal Name 
        <hr>
        
        Field Value
        Type:str
        """
        EIOType: SignalBuilderExternalSignalIOType = ...
        """
        Signal IO type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
        """
        EDataType: SignalBuilderDataType = ...
        """
        Signal Data type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
        """
        Offset: str = ...
        """
        Signal offset 
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetConnectionNames(self) -> tuple:
        """
        Gets TCP connection names  
        
        Signature ``GetConnectionNames()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (ownerParts, names). ownerParts is a list of :py:class:`NXOpen.Part`. names is a list of str. 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectionNames(self, ownerParts: 'list[NXOpen.Part]', names: 'list[str]') -> None:
        """
        Sets TCP connection names  
        
        Signature ``SetConnectionNames(ownerParts, names)`` 
        
        :param ownerParts: 
        :type ownerParts: list of :py:class:`NXOpen.Part` 
        :param names: 
        :type names: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetConnectionInformation(self, instanceName: str, ownerPart: NXOpen.Part) -> tuple:
        """
        Gets TCP connection information  
        
        Signature ``GetConnectionInformation(instanceName, ownerPart)`` 
        
        :param instanceName: 
        :type instanceName: str 
        :param ownerPart: 
        :type ownerPart: :py:class:`NXOpen.Part` 
        :returns: a tuple 
        :rtype: A tuple consisting of (remoteIP, remotePort, localIP, rcvBufSize, sendBufSize, updateTime, signals). remoteIP is a str. remotePort is a int. localIP is a str. rcvBufSize is a int. sendBufSize is a int. updateTime is a float. signals is a list of :py:class:`NXOpen.Mechatronics.TCPClientBuilderSignal_Struct`.   Array of Signal 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectionInformation(self, instanceName: str, ownerPart: NXOpen.Part, remoteIP: str, remotePort: int, localIP: str, rcvBufSize: int, sendBufSize: int, updateTime: float, signals: 'list[TCPClientBuilderSignal_Struct]') -> None:
        """
        Sets TCP connection information  
        
        Signature ``SetConnectionInformation(instanceName, ownerPart, remoteIP, remotePort, localIP, rcvBufSize, sendBufSize, updateTime, signals)`` 
        
        :param instanceName: 
        :type instanceName: str 
        :param ownerPart: 
        :type ownerPart: :py:class:`NXOpen.Part` 
        :param remoteIP: 
        :type remoteIP: str 
        :param remotePort: 
        :type remotePort: int 
        :param localIP: 
        :type localIP: str 
        :param rcvBufSize: 
        :type rcvBufSize: int 
        :param sendBufSize: 
        :type sendBufSize: int 
        :param updateTime: 
        :type updateTime: float 
        :param signals:  Array of Signal  
        :type signals: list of :py:class:`NXOpen.Mechatronics.TCPClientBuilderSignal_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationPart: NXOpen.Part = ...
    """
    Returns or sets  the selected configuration part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :param ownerPart: 
    :type ownerPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: TCPClientBuilder = ...  # unknown typename


class SignalMappingConnectionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.SignalMappingConnectionBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.SignalMappingConnectionCollection.CreateConnectionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Adapter: SignalAdapter = ...
    """
    Returns or sets  the signal adapter object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Adapter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Adapter`` 
    
    :param adapter: 
    :type adapter: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ClientType: SignalMappingBuilderAppOption = ...
    """
    Returns or sets  the external signal client type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ClientType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalMappingBuilderAppOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ClientType`` 
    
    :param eClientType: 
    :type eClientType: :py:class:`NXOpen.Mechatronics.SignalMappingBuilderAppOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ConfigurationName: str = ...
    """
    Returns or sets  the external signal configuration name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ConfigurationPart: NXOpen.NXObject = ...
    """
    Returns or sets  the external signal configuration part.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConfigurationPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ConfigurationPart`` 
    
    :param configurationPart: 
    :type configurationPart: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ConnectionName: str = ...
    """
    Returns or sets  the connection name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectionName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ConnectionName`` 
    
    :param connectionName: 
    :type connectionName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExternalSignalName: str = ...
    """
    Returns or sets  the external signal name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExternalSignalName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ExternalSignalName`` 
    
    :param externalSignalName: 
    :type externalSignalName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Signal: NXOpen.NXObject = ...
    """
    Returns or sets  the signal object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Signal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Signal`` 
    
    :param signal: 
    :type signal: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SignalMappingConnectionBuilder = ...  # unknown typename


class ProxyObjectParameterBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ProxyObjectParameterBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ProxyObjectParameterBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ProxyObjectParameterBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ProxyObjectParameterBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ProxyObjectParameterBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ProxyObjectParameterBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ProxyObjectParameterBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ProxyObjectParameterBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ProxyObjectParameterBuilder, object2: ProxyObjectParameterBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ProxyObjectParameterBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ProxyObjectParameterBuilderList = ...  # unknown typename


class SelectSystemObject(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: SystemObject) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: SystemObject) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: SystemObject, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.SystemObject` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: SystemObject, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: SystemObject, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.SystemObject` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.SystemObject` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: SystemObject, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.SystemObject` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> SystemObject:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: SystemObject) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Mechatronics.SystemObject`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Mechatronics.SystemObject`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Mechatronics.SystemObject`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Mechatronics.SystemObject`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: SystemObject = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Mechatronics.SystemObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Mechatronics.SystemObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectSystemObject = ...  # unknown typename


class RuntimeFormulaBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.RuntimeFormulaBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.RuntimeFormulaCollection.CreateRuntimeFormulaBuilder`
    
    .. versionadded:: NX8.5.0
    """
    DestPropertyId: int = ...
    """
    Returns or sets  the dest property id 
    
    <hr>
    
    Getter Method
    
    Signature ``DestPropertyId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``DestPropertyId`` 
    
    :param destPropertyId: 
    :type destPropertyId: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FormulaName: str = ...
    """
    Returns or sets  the formula name 
    
    <hr>
    
    Getter Method
    
    Signature ``FormulaName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FormulaName`` 
    
    :param formulaName: 
    :type formulaName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FormulaString: str = ...
    """
    Returns or sets  the formula string 
    
    <hr>
    
    Getter Method
    
    Signature ``FormulaString`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FormulaString`` 
    
    :param formulaString: 
    :type formulaString: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ObjectToAssignParamSelection: NXOpen.SelectNXObject = ...
    """
    Returns  the object to assign param selection 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectToAssignParamSelection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParameterBuilderList: RuntimeFormulaParameterBuilderList = ...
    """
    Returns  the formula parameter list.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterBuilderList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilderList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectionInputObject: NXOpen.SelectNXObjectList = ...
    """
    Returns  the inuput object selection 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionInputObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: RuntimeFormulaBuilder = ...  # unknown typename


class ExpressionBlockFormulaBuilder(RuntimeFormulaBuilder):
    """
    Represents a :py:class:`Mechatronics.ExpressionBlockFormulaBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ExpressionBlockFormulaCollection.CreateExpressionBlockFormulaBuilder`
    
    .. versionadded:: NX11.0.0
    """
    FormulaComment: str = ...
    """
    Returns or sets  the formula comment.  
    
    <hr>
    
    Getter Method
    
    Signature ``FormulaComment`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FormulaComment`` 
    
    :param formulaComment: 
    :type formulaComment: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ExpressionBlockFormulaBuilder = ...  # unknown typename


class RuntimeBehavior(NXOpen.NXObject):
    """
    Represents the Runtime Behavior class.  
    
    Runtime Behavior is a generic runtime
    behavior that uses CLR code like C# to act with physical objects. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.RuntimeBehaviorBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: RuntimeBehavior = ...  # unknown typename


class TransportSurface(PhysicsJoint):
    """
    Represents the Transport Surface class.  
    
    Transport Surface causes a face on a geometric object to 
    behave like it is moving even if the object it is attached to is not. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.TransportSurfaceBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: TransportSurface = ...  # unknown typename


class ForceTorqueControl(PhysicsConstraint):
    """
    Represents the ForceTorque Control. The force or torque is applied to both connected
    rigid bodies with respect to the axis joint  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ForceTorqueControlBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: ForceTorqueControl = ...  # unknown typename


class AccelerometerBuilderOutputMeasureTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AccelerometerBuilderOutputMeasureType():
    """
    the Measure types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "MEASURE_UNITLESS"
       "Voltage", "MEASURE_VOLTAGE"
       "Current", "MEASURE_ELECTRIC_CURRENT"
    """
    Constant = 0  # AccelerometerBuilderOutputMeasureTypeMemberType
    Voltage = 1  # AccelerometerBuilderOutputMeasureTypeMemberType
    Current = 2  # AccelerometerBuilderOutputMeasureTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AccelerometerBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.Accelerometer` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.AccelerometerCollection.CreateAccelerometerBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class OutputMeasureType():
        """
        the Measure types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "MEASURE_UNITLESS"
           "Voltage", "MEASURE_VOLTAGE"
           "Current", "MEASURE_ELECTRIC_CURRENT"
        """
        Constant = 0  # AccelerometerBuilderOutputMeasureTypeMemberType
        Voltage = 1  # AccelerometerBuilderOutputMeasureTypeMemberType
        Current = 2  # AccelerometerBuilderOutputMeasureTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    LowerAngularTrimRange: NXOpen.Expression = ...
    """
    Returns  the lower angular trim range used to trim the Accelerometer data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerAngularTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerOutputRange: NXOpen.Expression = ...
    """
    Returns  the lower output range used to scale the Accelerometer data. Its measure type contains constant, voltage, current  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerTrimRange: NXOpen.Expression = ...
    """
    Returns  the lower trim range used to trim the Accelerometer data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MeasureType: AccelerometerBuilderOutputMeasureType = ...
    """
    Returns or sets  the measure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeasureType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.AccelerometerBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MeasureType`` 
    
    :param measureType: 
    :type measureType: :py:class:`NXOpen.Mechatronics.AccelerometerBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RigidBody: SelectRigidBody = ...
    """
    Returns  the Rigid Body. This can be a :py:class:`NXOpen.Mechatronics.RigidBody`. 
    
    <hr>
    
    Getter Method
    
    Signature ``RigidBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectRigidBody` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperAngularTrimRange: NXOpen.Expression = ...
    """
    Returns  the upper angular trim range used to trim the Accelerometer data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperAngularTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperOutputRange: NXOpen.Expression = ...
    """
    Returns  the upper output range used to scale the Accelerometer data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperTrimRange: NXOpen.Expression = ...
    """
    Returns  the upper trim range used to trim the Accelerometer data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseScale: bool = ...
    """
    Returns or sets  the use scale flag, which is used to control if the accelerometer includes scale parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseScale`` 
    
    :param useScale: 
    :type useScale: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseTrim: bool = ...
    """
    Returns or sets  the use trim flag, which is used to control if the accelerometer includes trim parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseTrim`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseTrim`` 
    
    :param useTrim: 
    :type useTrim: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: AccelerometerBuilder = ...  # unknown typename


class CollisionBodyCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Collision Bodies.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCollisionBodyBuilder(self, collideBody: CollisionBody) -> CollisionBodyBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.CollisionBodyBuilder`.  
        
        Signature ``CreateCollisionBodyBuilder(collideBody)`` 
        
        :param collideBody:  :py:class:`NXOpen.Mechatronics.CollisionBody` to be edited, if None then create a new one  
        :type collideBody: :py:class:`NXOpen.Mechatronics.CollisionBody` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.CollisionBodyBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> CollisionBody:
        """
        Finds the :py:class:`NXOpen.Mechatronics.CollisionBody` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.CollisionBody`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.CollisionBody` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.CollisionBody` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class TransmitterEntryCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Transmitter Entry.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTransmitterEntryBuilder(self, transmitterEntry: TransmitterEntry) -> TransmitterEntryBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.TransmitterEntryBuilder`.  
        
        Signature ``CreateTransmitterEntryBuilder(transmitterEntry)`` 
        
        :param transmitterEntry:  :py:class:`NXOpen.Mechatronics.TransmitterEntry` to be edited, if None then create a new one  
        :type transmitterEntry: :py:class:`NXOpen.Mechatronics.TransmitterEntry` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.TransmitterEntryBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> TransmitterEntry:
        """
        Finds the :py:class:`NXOpen.Mechatronics.TransmitterEntry` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.TransmitterEntry`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.TransmitterEntry` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.TransmitterEntry` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class GanttOperationConditionBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[GanttOperationConditionBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: GanttOperationConditionBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: GanttOperationConditionBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> GanttOperationConditionBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: GanttOperationConditionBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: GanttOperationConditionBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[GanttOperationConditionBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[GanttOperationConditionBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: GanttOperationConditionBuilder, object2: GanttOperationConditionBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: GanttOperationConditionBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: GanttOperationConditionBuilderList = ...  # unknown typename


class CurveOnCurveJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.CurveOnCurveJoint` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.CurveOnCurveJointCollection.CreateCurveOnCurveJointBuilder`
    
    Default values.
    
    =============  ======================================
    Property       Value
    =============  ======================================
    Offset.Value   0 (millimeters part), 0 (inches part) 
    -------------  --------------------------------------
    Sliding        0 
    =============  ======================================
    
    .. versionadded:: NX9.0.0
    """
    
    def GetSectionCurve(self) -> 'list[NXOpen.NXObject]':
        """
        Get the section curve which belong to the attachment 
        
        Signature ``GetSectionCurve()`` 
        
        :returns:  curve or edge 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSectionCurve(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Set the section curve which belong to the attachment
        
        Signature ``SetSectionCurve(curves)`` 
        
        :param curves:  curve or edge 
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetConnectedCurve(self) -> 'list[NXOpen.NXObject]':
        """
        Get the connected curve which the attachment will move along  
        
        Signature ``GetConnectedCurve()`` 
        
        :returns:  curve or edge 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectedCurve(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Set the connected curve which the attachment will move along 
        
        Signature ``SetConnectedCurve(curves)`` 
        
        :param curves:  curve or edge 
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EvaluatePath(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Evaluate the path.  
        
        If there is no path, create it, otherwise evaluate it.
        
        Signature ``EvaluatePath(curves)`` 
        
        :param curves:  curve or edge 
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AxisVector: NXOpen.Direction = ...
    """
    Returns or sets  the axis vector which is tangent to the connected curve at the selected point 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset specifies the "Zero Point" on the curve whose distance to the point along the curve is the offset value.  
    
    Zero Point is on the opposite direction of the axis with respect to the point on the curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PointOnCurve: NXOpen.Point = ...
    """
    Returns or sets  the selected point on curve 
    
    <hr>
    
    Getter Method
    
    Signature ``PointOnCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PointOnCurve`` 
    
    :param pointOnCurve: 
    :type pointOnCurve: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Sliding: bool = ...
    """
    Returns or sets  the sliding 
    
    <hr>
    
    Getter Method
    
    Signature ``Sliding`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Sliding`` 
    
    :param sliding: 
    :type sliding: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: CurveOnCurveJointBuilder = ...  # unknown typename


class DynamicObjectTableBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.DynamicObjectTableBuilder` builder.  
    
    DynamicObjectTableBuilder is used to maintain the :py:class:`NXOpen.Mechatronics.DynamicObjectTable` 
    which is used for dynamic object instantiation. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.DynamicObjectTableCollection.CreateDynamicObjectTableBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class Instance():
        """
        Represents Instance definition structure.  
        
        The Instance name must be unique in the context of Instance Table.
        .
        Constructor: 
        NXOpen.Mechatronics.DynamicObjectTableBuilder.Instance()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        Table Name             
        <hr>
        
        Field Value
        Type:str
        """
        TDefiningSnap: NXOpen.NXObject = ...
        """
        Defining SnapPoint tag 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        TDynamicObject: NXOpen.NXObject = ...
        """
        Dynamic Object         
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        TComplyingSnap: NXOpen.NXObject = ...
        """
        Complying SnapPoint tag
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
    
    
    def GetInstances(self) -> 'list[DynamicObjectTableBuilderInstance_Struct]':
        """
        Gets all Instances.  
        
        Signature ``GetInstances()`` 
        
        :returns:  Array of Instances  
        :rtype: list of :py:class:`NXOpen.Mechatronics.DynamicObjectTableBuilderInstance_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetInstances(self, instances: 'list[DynamicObjectTableBuilderInstance_Struct]') -> None:
        """
        Sets all Instances.  
        
        Each Instance name must be unique in the context of input Instance list. Or the builder will raise an exception. 
        
        Signature ``SetInstances(instances)`` 
        
        :param instances:  Array of Instances  
        :type instances: list of :py:class:`NXOpen.Mechatronics.DynamicObjectTableBuilderInstance_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: DynamicObjectTableBuilder = ...  # unknown typename


class MotionProfileBuilderMasterValueUnitMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionProfileBuilderMasterValueUnit():
    """
    the Master Unit types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Rotary", "Rotary"
       "Time", "Time"
    """
    Linear = 0  # MotionProfileBuilderMasterValueUnitMemberType
    Rotary = 1  # MotionProfileBuilderMasterValueUnitMemberType
    Time = 2  # MotionProfileBuilderMasterValueUnitMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionProfileBuilderSlaveValueUnitMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionProfileBuilderSlaveValueUnit():
    """
    the Slave Unit types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LinearPosition", "Linear Position"
       "RotaryPosition", "Rotary Position"
       "LinearSpeed", "Linear Speed"
       "RotarySpeed", "Rotary Speed"
    """
    LinearPosition = 0  # MotionProfileBuilderSlaveValueUnitMemberType
    RotaryPosition = 1  # MotionProfileBuilderSlaveValueUnitMemberType
    LinearSpeed = 2  # MotionProfileBuilderSlaveValueUnitMemberType
    RotarySpeed = 3  # MotionProfileBuilderSlaveValueUnitMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionProfileBuilderProfileCyclicTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MotionProfileBuilderProfileCyclicType():
    """
    Indicates which cyclic type should be take.The type of Cam Profile can be switched between non-cyclic,
    cyclic and relative cyclic. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RelativeCyclic", "Relative Cyclic"
       "Cyclic", "Cyclic"
       "NonCyclic", "Non-cyclic"
    """
    RelativeCyclic = 0  # MotionProfileBuilderProfileCyclicTypeMemberType
    Cyclic = 1  # MotionProfileBuilderProfileCyclicTypeMemberType
    NonCyclic = 2  # MotionProfileBuilderProfileCyclicTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MotionProfileBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.MotionProfile` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.MotionProfileCollection.CreateMotionProfileBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class MasterValueUnit():
        """
        the Master Unit types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Rotary", "Rotary"
           "Time", "Time"
        """
        Linear = 0  # MotionProfileBuilderMasterValueUnitMemberType
        Rotary = 1  # MotionProfileBuilderMasterValueUnitMemberType
        Time = 2  # MotionProfileBuilderMasterValueUnitMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SlaveValueUnit():
        """
        the Slave Unit types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LinearPosition", "Linear Position"
           "RotaryPosition", "Rotary Position"
           "LinearSpeed", "Linear Speed"
           "RotarySpeed", "Rotary Speed"
        """
        LinearPosition = 0  # MotionProfileBuilderSlaveValueUnitMemberType
        RotaryPosition = 1  # MotionProfileBuilderSlaveValueUnitMemberType
        LinearSpeed = 2  # MotionProfileBuilderSlaveValueUnitMemberType
        RotarySpeed = 3  # MotionProfileBuilderSlaveValueUnitMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProfileCyclicType():
        """
        Indicates which cyclic type should be take.The type of Cam Profile can be switched between non-cyclic,
        cyclic and relative cyclic. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RelativeCyclic", "Relative Cyclic"
           "Cyclic", "Cyclic"
           "NonCyclic", "Non-cyclic"
        """
        RelativeCyclic = 0  # MotionProfileBuilderProfileCyclicTypeMemberType
        Cyclic = 1  # MotionProfileBuilderProfileCyclicTypeMemberType
        NonCyclic = 2  # MotionProfileBuilderProfileCyclicTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddElement(self, part: NXOpen.NXObject, name: str, masterPos: float, slavePos: float, vin: float, vout: float, ain: float, aout: float, vinEqVout: bool, ainEqAout: bool, constantSpeed: bool) -> None:
        """
        Add element to builder.  
        
        Signature ``AddElement(part, name, masterPos, slavePos, vin, vout, ain, aout, vinEqVout, ainEqAout, constantSpeed)`` 
        
        :param part: 
        :type part: :py:class:`NXOpen.NXObject` 
        :param name: 
        :type name: str 
        :param masterPos: 
        :type masterPos: float 
        :param slavePos: 
        :type slavePos: float 
        :param vin: 
        :type vin: float 
        :param vout: 
        :type vout: float 
        :param ain: 
        :type ain: float 
        :param aout: 
        :type aout: float 
        :param vinEqVout: 
        :type vinEqVout: bool 
        :param ainEqAout: 
        :type ainEqAout: bool 
        :param constantSpeed: 
        :type constantSpeed: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    CyclicType: MotionProfileBuilderProfileCyclicType = ...
    """
    Returns or sets  the cyclic type of a cam profile 
    
    <hr>
    
    Getter Method
    
    Signature ``CyclicType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MotionProfileBuilderProfileCyclicType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CyclicType`` 
    
    :param cyclicType: 
    :type cyclicType: :py:class:`NXOpen.Mechatronics.MotionProfileBuilderProfileCyclicType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    IsForElecCam: bool = ...
    """
    Returns or sets  the indicator that a motion profile is designed for a electronic cam
    
    <hr>
    
    Getter Method
    
    Signature ``IsForElecCam`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsForElecCam`` 
    
    :param isForElecCam: 
    :type isForElecCam: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterMaximum: NXOpen.Expression = ...
    """
    Returns  the masterMax.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterMaximum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterMinimum: NXOpen.Expression = ...
    """
    Returns  the masterMin.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterMinimum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterUnit: MotionProfileBuilderMasterValueUnit = ...
    """
    Returns or sets  the masterUnit.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterUnit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MotionProfileBuilderMasterValueUnit` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MasterUnit`` 
    
    :param masterUnit: 
    :type masterUnit: :py:class:`NXOpen.Mechatronics.MotionProfileBuilderMasterValueUnit` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveMaximum: NXOpen.Expression = ...
    """
    Returns  the slaveMax.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveMaximum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveMinimum: NXOpen.Expression = ...
    """
    Returns  the slaveMin.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveMinimum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveUnit: MotionProfileBuilderSlaveValueUnit = ...
    """
    Returns or sets  the slaveUnit.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveUnit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MotionProfileBuilderSlaveValueUnit` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SlaveUnit`` 
    
    :param slaveUnit: 
    :type slaveUnit: :py:class:`NXOpen.Mechatronics.MotionProfileBuilderSlaveValueUnit` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: MotionProfileBuilder = ...  # unknown typename


class Tracer(NXOpen.DisplayableObject):
    """
    Represents the Tracer class.  
    
    A Tracer can make an object be able
    to trace an point on it. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.TracerBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: Tracer = ...  # unknown typename


class SelectPhysicsJoint(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: PhysicsJoint) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: PhysicsJoint) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: PhysicsJoint, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: PhysicsJoint, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: PhysicsJoint, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: PhysicsJoint, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> PhysicsJoint:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: PhysicsJoint) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Mechatronics.PhysicsJoint`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Mechatronics.PhysicsJoint`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Mechatronics.PhysicsJoint`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Mechatronics.PhysicsJoint`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: PhysicsJoint = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectPhysicsJoint = ...  # unknown typename


class ReadWriteDeviceBuilderDeviceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReadWriteDeviceBuilderDeviceType():
    """
    the device types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Reader", "Reader"
       "Writer", "Writer"
    """
    Reader = 0  # ReadWriteDeviceBuilderDeviceTypeMemberType
    Writer = 1  # ReadWriteDeviceBuilderDeviceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReadWriteDeviceBuilderExecuteModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReadWriteDeviceBuilderExecuteMode():
    """
    the execute modes. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Never execute"
       "Always", "Always execute"
       "OnceOnly", "Only execute once"
    """
    NotSet = 0  # ReadWriteDeviceBuilderExecuteModeMemberType
    Always = 1  # ReadWriteDeviceBuilderExecuteModeMemberType
    OnceOnly = 2  # ReadWriteDeviceBuilderExecuteModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ReadWriteDeviceBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ReadWriteDeviceBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ReadWriteDeviceCollection.CreateReadWriteDeviceBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class DeviceType():
        """
        the device types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Reader", "Reader"
           "Writer", "Writer"
        """
        Reader = 0  # ReadWriteDeviceBuilderDeviceTypeMemberType
        Writer = 1  # ReadWriteDeviceBuilderDeviceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ExecuteMode():
        """
        the execute modes. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Never execute"
           "Always", "Always execute"
           "OnceOnly", "Only execute once"
        """
        NotSet = 0  # ReadWriteDeviceBuilderExecuteModeMemberType
        Always = 1  # ReadWriteDeviceBuilderExecuteModeMemberType
        OnceOnly = 2  # ReadWriteDeviceBuilderExecuteModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetForm(self) -> TagFormObject:
        """
        Gets the form :py:class:`NXOpen.Mechatronics.TagFormObject` object.  
        
        Signature ``GetForm()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetForm(self, form: TagFormObject) -> None:
        """
        Sets the form :py:class:`NXOpen.Mechatronics.TagFormObject` object.  
        
        Signature ``SetForm(form)`` 
        
        :param form: 
        :type form: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetTable(self) -> TagTableObject:
        """
        Gets the table :py:class:`NXOpen.Mechatronics.TagTableObject` object.  
        
        Signature ``GetTable()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.TagTableObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetTable(self, table: TagTableObject) -> None:
        """
        Sets the table :py:class:`NXOpen.Mechatronics.TagTableObject` object.  
        
        Signature ``SetTable(table)`` 
        
        :param table: 
        :type table: :py:class:`NXOpen.Mechatronics.TagTableObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetDeviceType(self) -> ReadWriteDeviceBuilderDeviceType:
        """
        Gets device type.  
        
        Signature ``GetDeviceType()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ReadWriteDeviceBuilderDeviceType` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDeviceType(self, type: ReadWriteDeviceBuilderDeviceType) -> None:
        """
        Sets device type.  
        
        Signature ``SetDeviceType(type)`` 
        
        :param type: 
        :type type: :py:class:`NXOpen.Mechatronics.ReadWriteDeviceBuilderDeviceType` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetExecuteMode(self) -> ReadWriteDeviceBuilderExecuteMode:
        """
        Gets execute mode.  
        
        Signature ``GetExecuteMode()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ReadWriteDeviceBuilderExecuteMode` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetExecuteMode(self, mode: ReadWriteDeviceBuilderExecuteMode) -> None:
        """
        Sets execute mode.  
        
        Signature ``SetExecuteMode(mode)`` 
        
        :param mode: 
        :type mode: :py:class:`NXOpen.Mechatronics.ReadWriteDeviceBuilderExecuteMode` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Sensor: SelectCollisionSensor = ...
    """
    Returns  the selected sensor :py:class:`NXOpen.Mechatronics.CollisionSensor` object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Sensor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectCollisionSensor` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ReadWriteDeviceBuilder = ...  # unknown typename


class MATLABClientBuilderTagInfo_Struct():
    """
    Represents MATLABTag info definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.MATLABClientBuilder.TagInfo()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    Tag Name          
    <hr>
    
    Field Value
    Type:str
    """
    EIOType: SignalBuilderExternalSignalIOType = ...
    """
    IO type              
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
    """
    EDataType: SignalBuilderDataType = ...
    """
    Data type            
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
    """


class MATLABClientBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MATLABClientBuilderDataType():
    """
    Represents the data type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bool", "bool"
       "Int", "int"
       "Double", "double"
    """
    Bool = 0  # MATLABClientBuilderDataTypeMemberType
    Int = 1  # MATLABClientBuilderDataTypeMemberType
    Double = 2  # MATLABClientBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MATLABClientBuilderDataPortTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MATLABClientBuilderDataPortType():
    """
    Represents the data port type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Input", "Input"
       "Output", "Output"
    """
    Input = 0  # MATLABClientBuilderDataPortTypeMemberType
    Output = 1  # MATLABClientBuilderDataPortTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MATLABClientBuilderTagAttribute_Struct():
    """
    the attribute of MATLAB item.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.MATLABClientBuilder.TagAttribute()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    SignalName: str = ...
    """
    item Name 
    <hr>
    
    Field Value
    Type:str
    """
    SignalType: MATLABClientBuilderDataType = ...
    """
    Data Type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.MATLABClientBuilderDataType`
    """
    SignalportType: MATLABClientBuilderDataPortType = ...
    """
    Port Type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.MATLABClientBuilderDataPortType`
    """


class MATLABClientBuilderSignalData_Struct():
    """
    Defines the signal data.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.MATLABClientBuilder.SignalData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    Name                
    <hr>
    
    Field Value
    Type:str
    """
    DataType: str = ...
    """
    Data Type           
    <hr>
    
    Field Value
    Type:str
    """
    PortType: str = ...
    """
    Data Port Type      
    <hr>
    
    Field Value
    Type:str
    """


class MATLABClientBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.MATLABClientBuilder`   
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX11.0.0
    """
    
    class TagInfo():
        """
        Represents MATLABTag info definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.MATLABClientBuilder.TagInfo()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        Tag Name          
        <hr>
        
        Field Value
        Type:str
        """
        EIOType: SignalBuilderExternalSignalIOType = ...
        """
        IO type              
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
        """
        EDataType: SignalBuilderDataType = ...
        """
        Data type            
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
        """
    
    
    class DataType():
        """
        Represents the data type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bool", "bool"
           "Int", "int"
           "Double", "double"
        """
        Bool = 0  # MATLABClientBuilderDataTypeMemberType
        Int = 1  # MATLABClientBuilderDataTypeMemberType
        Double = 2  # MATLABClientBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DataPortType():
        """
        Represents the data port type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Input", "Input"
           "Output", "Output"
        """
        Input = 0  # MATLABClientBuilderDataPortTypeMemberType
        Output = 1  # MATLABClientBuilderDataPortTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TagAttribute():
        """
        the attribute of MATLAB item.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.MATLABClientBuilder.TagAttribute()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        SignalName: str = ...
        """
        item Name 
        <hr>
        
        Field Value
        Type:str
        """
        SignalType: MATLABClientBuilderDataType = ...
        """
        Data Type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.MATLABClientBuilderDataType`
        """
        SignalportType: MATLABClientBuilderDataPortType = ...
        """
        Port Type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.MATLABClientBuilderDataPortType`
        """
    
    
    class SignalData():
        """
        Defines the signal data.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.MATLABClientBuilder.SignalData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        Name                
        <hr>
        
        Field Value
        Type:str
        """
        DataType: str = ...
        """
        Data Type           
        <hr>
        
        Field Value
        Type:str
        """
        PortType: str = ...
        """
        Data Port Type      
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetServerTags(self, serverName: str) -> 'list[MATLABClientBuilderTagInfo_Struct]':
        """
        Gets MATLAB instance Tags  
        
        Signature ``GetServerTags(serverName)`` 
        
        :param serverName: 
        :type serverName: str 
        :returns:  Array of TagInfos  
        :rtype: list of :py:class:`NXOpen.Mechatronics.MATLABClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetAvailableItems(self) -> tuple:
        """
        Get the available MATLAB items.  
        
        Signature ``GetAvailableItems()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (signalName, signalType). signalName is a list of str. signalType is a list of :py:class:`NXOpen.Mechatronics.MATLABClientBuilderDataType`. 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetAvailableItems(self, signalName: 'list[str]', signalType: 'list[MATLABClientBuilderDataType]') -> None:
        """
        Set the available MATLAB items.  
        
        Signature ``SetAvailableItems(signalName, signalType)`` 
        
        :param signalName: 
        :type signalName: list of str 
        :param signalType: 
        :type signalType: list of :py:class:`NXOpen.Mechatronics.MATLABClientBuilderDataType` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetItemAttributes(self) -> 'list[MATLABClientBuilderTagAttribute_Struct]':
        """
        Get the attribute of MATLAB items 
        
        Signature ``GetItemAttributes()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Mechatronics.MATLABClientBuilderTagAttribute_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetItemAttributes(self, attr: 'list[MATLABClientBuilderTagAttribute_Struct]') -> None:
        """
        Set the attribute of MATLAB items 
        
        Signature ``SetItemAttributes(attr)`` 
        
        :param attr: 
        :type attr: list of :py:class:`NXOpen.Mechatronics.MATLABClientBuilderTagAttribute_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetMATLABInformation(self, instanceName: str) -> 'list[MATLABClientBuilderTagInfo_Struct]':
        """
        Get the object information into MATLAB Data 
        
        Signature ``GetMATLABInformation(instanceName)`` 
        
        :param instanceName: 
        :type instanceName: str 
        :returns:  Array of TagInfos  
        :rtype: list of :py:class:`NXOpen.Mechatronics.MATLABClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetMATLABInformation(self, instanceName: str, tagInfos: 'list[MATLABClientBuilderTagInfo_Struct]') -> None:
        """
        Set the object information into MATLAB Data  
        
        Signature ``SetMATLABInformation(instanceName, tagInfos)`` 
        
        :param instanceName: 
        :type instanceName: str 
        :param tagInfos:  Array of TagInfos  
        :type tagInfos: list of :py:class:`NXOpen.Mechatronics.MATLABClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    MATLABServerProgID: str = ...
    """
    Returns or sets  the MATLAB server prog ID.  
    
    <hr>
    
    Getter Method
    
    Signature ``MATLABServerProgID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MATLABServerProgID`` 
    
    :param matlabServerProgID: 
    :type matlabServerProgID: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MatlabFileBrowser: str = ...
    """
    Returns or sets  the simulink file browser.  
    
    <hr>
    
    Getter Method
    
    Signature ``MatlabFileBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MatlabFileBrowser`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationPart: NXOpen.Part = ...
    """
    Returns or sets  the selected configuration part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :param ownerPart: 
    :type ownerPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpdateTime: NXOpen.Expression = ...
    """
    Returns  the update time.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpdateTime`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: MATLABClientBuilder = ...  # unknown typename


class SHMSignalProviderBuilderSignalInfo_Struct():
    """
    Represents SHMProviderSignal info definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.SHMSignalProviderBuilder.SignalInfo()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    SignalTag: NXOpen.NXObject = ...
    """
    Signal Object         
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    BChecked: bool = ...
    """
    Signal Checked Status  
    <hr>
    
    Field Value
    Type:bool
    """
    Address: str = ...
    """
    Adress value          
    <hr>
    
    Field Value
    Type:str
    """


class SHMSignalProviderBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SHMSignalProviderBuilder`   
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    class SignalInfo():
        """
        Represents SHMProviderSignal info definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.SHMSignalProviderBuilder.SignalInfo()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        SignalTag: NXOpen.NXObject = ...
        """
        Signal Object         
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        BChecked: bool = ...
        """
        Signal Checked Status  
        <hr>
        
        Field Value
        Type:bool
        """
        Address: str = ...
        """
        Adress value          
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetSHMSignals(self) -> 'list[SHMSignalProviderBuilderSignalInfo_Struct]':
        """
        Get SHMProvider Signals Infomation  
        
        Signature ``GetSHMSignals()`` 
        
        :returns:  Array of SignalInfos  
        :rtype: list of :py:class:`NXOpen.Mechatronics.SHMSignalProviderBuilderSignalInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSHMSignals(self, signalInfos: 'list[SHMSignalProviderBuilderSignalInfo_Struct]') -> None:
        """
        Set SHMProvider Signals Infomation  
        
        Signature ``SetSHMSignals(signalInfos)`` 
        
        :param signalInfos:  Array of SignalInfos  
        :type signalInfos: list of :py:class:`NXOpen.Mechatronics.SHMSignalProviderBuilderSignalInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    CreateShm: bool = ...
    """
    Returns or sets  get the Ceate SHM toggle status.  
    
    <hr>
    
    Getter Method
    
    Signature ``CreateShm`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CreateShm`` 
    
    :param createSHM: 
    :type createSHM: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    IsLittleEndian: bool = ...
    """
    Returns or sets  the endian type.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsLittleEndian`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``IsLittleEndian`` 
    
    :param isLittleEndian: 
    :type isLittleEndian: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ShmMutex: str = ...
    """
    Returns or sets  ge the SHM Mutex.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShmMutex`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ShmMutex`` 
    
    :param shmmutex: 
    :type shmmutex: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ShmName: str = ...
    """
    Returns or sets  get the SHM Name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShmName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ShmName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SHMSignalProviderBuilder = ...  # unknown typename


class TCPSignalServerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.TCPSignalServerBuilder` builder.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    class Signal():
        """
        Represents the data type  
        
        .
        Constructor: 
        NXOpen.Mechatronics.TCPSignalServerBuilder.Signal()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        SignalTag: NXOpen.NXObject = ...
        """
        Signal Object         
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        BChecked: bool = ...
        """
        Signal Checked Status  
        <hr>
        
        Field Value
        Type:bool
        """
        Offset: str = ...
        """
        Adress value          
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetConnectionNames(self) -> 'list[str]':
        """
        Gets TCP connection names  
        
        Signature ``GetConnectionNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectionNames(self, names: 'list[str]') -> None:
        """
        Sets TCP connection names  
        
        Signature ``SetConnectionNames(names)`` 
        
        :param names: 
        :type names: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetConnectionInformation(self, connectionName: str) -> tuple:
        """
        Gets connection information  
        
        Signature ``GetConnectionInformation(connectionName)`` 
        
        :param connectionName: 
        :type connectionName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (remoteIP, remotePort, localIP, localPort, rcvBufSize, sendBufSize, updateTime, signals). remoteIP is a str. remotePort is a int. localIP is a str. localPort is a int. rcvBufSize is a int. sendBufSize is a int. updateTime is a float. signals is a list of :py:class:`NXOpen.Mechatronics.TCPSignalServerBuilderSignal_Struct`.   Array of Signal 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectionInformation(self, connectionName: str, remoteIP: str, remotePort: int, localIP: str, localPort: int, rcvBufSize: int, sendBufSize: int, updateTime: float, signals: 'list[TCPSignalServerBuilderSignal_Struct]') -> None:
        """
        Sets connection information  
        
        Signature ``SetConnectionInformation(connectionName, remoteIP, remotePort, localIP, localPort, rcvBufSize, sendBufSize, updateTime, signals)`` 
        
        :param connectionName: 
        :type connectionName: str 
        :param remoteIP: 
        :type remoteIP: str 
        :param remotePort: 
        :type remotePort: int 
        :param localIP: 
        :type localIP: str 
        :param localPort: 
        :type localPort: int 
        :param rcvBufSize: 
        :type rcvBufSize: int 
        :param sendBufSize: 
        :type sendBufSize: int 
        :param updateTime: 
        :type updateTime: float 
        :param signals:  Array of Signal  
        :type signals: list of :py:class:`NXOpen.Mechatronics.TCPSignalServerBuilderSignal_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: TCPSignalServerBuilder = ...  # unknown typename


class CurveOnCurveJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of CurveOnCurve Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCurveOnCurveJointBuilder(self, joint: CurveOnCurveJoint) -> CurveOnCurveJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.CurveOnCurveJointBuilder`.  
        
        Signature ``CreateCurveOnCurveJointBuilder(joint)`` 
        
        :param joint:  :py:class:`NXOpen.Mechatronics.CurveOnCurveJoint` to be edited, if None then create a new one  
        :type joint: :py:class:`NXOpen.Mechatronics.CurveOnCurveJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.CurveOnCurveJointBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> CurveOnCurveJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.CurveOnCurveJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.CurveOnCurveJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.CurveOnCurveJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.CurveOnCurveJoint` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class TransmitterExitBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.TransmitterExit` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.TransmitterExitCollection.CreateTransmitterExitBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def QueryPorts(self) -> 'list[int]':
        """
        Query the available ports in the owning part.  
        
        Signature ``QueryPorts()`` 
        
        :returns:  Array of available ports.  
        :rtype: list of int 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Orientation: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the initial orientation of receiving objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Port: int = ...
    """
    Returns or sets  the port of the receiver.  
    
    <hr>
    
    Getter Method
    
    Signature ``Port`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Port`` 
    
    :param port: 
    :type port: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Position: NXOpen.Point = ...
    """
    Returns or sets  the initial position of receiving objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``Position`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Position`` 
    
    :param position: 
    :type position: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RigidBody: SelectRigidBody = ...
    """
    Returns  the referenced moving rigid body. This can be a :py:class:`NXOpen.Mechatronics.RigidBody`.  
    
    <hr>
    
    Getter Method
    
    Signature ``RigidBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectRigidBody` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: TransmitterExitBuilder = ...  # unknown typename


class PositionControlCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Position Control.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePositionControlBuilder(self, positionControl: PositionControl) -> PositionControlBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PositionControlBuilder`.  
        
        Signature ``CreatePositionControlBuilder(positionControl)`` 
        
        :param positionControl:  :py:class:`NXOpen.Mechatronics.PositionControl` to be edited, if None then create a new one  
        :type positionControl: :py:class:`NXOpen.Mechatronics.PositionControl` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PositionControlBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> PositionControl:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PositionControl` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PositionControl`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PositionControl` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PositionControl` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SlidingJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SlidingJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.SlidingJointCollection.CreateSlidingJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    AttachPoint: NXOpen.Point = ...
    """
    Returns or sets  the anchor point of attach.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttachPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AttachPoint`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableLowerLimit: bool = ...
    """
    Returns or sets  the lower limit option.  
    
    If the enable is true, then the joint will be applied
    a lower limit in movement.
    
    <hr>
    
    Getter Method
    
    Signature ``EnableLowerLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableLowerLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableUpperLimit: bool = ...
    """
    Returns or sets  the upper limit option.  
    
    If the enable is true, then the joint will be applied
    an upper limit in movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableUpperLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableUpperLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FeedbackPoint: NXOpen.Point = ...
    """
    Returns or sets  the position of visual feedback point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FeedbackPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FeedbackPoint`` 
    
    :param feedback: 
    :type feedback: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerLimit: NXOpen.Expression = ...
    """
    Returns  the lower limit.  
    
    The lower limit setup for joint movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset value.  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperLimit: NXOpen.Expression = ...
    """
    Returns  the upper limit.  
    
    The upper limit setup for joint movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Vector: NXOpen.Direction = ...
    """
    Returns or sets  the vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``Vector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Vector`` 
    
    :param specifyVector: 
    :type specifyVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SlidingJointBuilder = ...  # unknown typename


class MotionProfile(NXOpen.NXObject):
    """
    Represents the MotionProfile class.  
    
    A Motion Profile is used to define
    motion profile for a cam constraint. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.MotionProfileBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: MotionProfile = ...  # unknown typename


class DisplayChanger(NXOpen.DisplayableObject):
    """
    Represents the Display Changer which is used to change the display properties (Color, Translucency, and Visibility) 
    of rigid body during simulation.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.DisplayChangerBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: DisplayChanger = ...  # unknown typename


class RelayBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.Relay` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.RelayCollection.CreateRelayBuilder`
    
    .. versionadded:: NX11.0.0
    """
    LowerLimit: NXOpen.Expression = ...
    """
    Returns  the lower switch point used to judge whether need to switch the state.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PersistentTag: int = ...
    """
    Returns or sets  the Persistent Tag used in the physics object  
    
    <hr>
    
    Getter Method
    
    Signature ``PersistentTag`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PersistentTag`` 
    
    :param persistentTag: 
    :type persistentTag: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedPhysicsObject: NXOpen.SelectNXObject = ...
    """
    Returns  the physics select. This can be a physics object. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedPhysicsObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperLimit: NXOpen.Expression = ...
    """
    Returns  the upper switch point used to judge whether need to switch the state.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: RelayBuilder = ...  # unknown typename


class PneumaticValveBuilderOutputValveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PneumaticValveBuilderOutputValveType():
    """
    the Valve types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FourWay", "4-way valve"
       "ThreeWay", "3-way valve"
    """
    FourWay = 0  # PneumaticValveBuilderOutputValveTypeMemberType
    ThreeWay = 1  # PneumaticValveBuilderOutputValveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PneumaticValveBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PneumaticValve` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PneumaticValveCollection.CreatePneumaticValveBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class OutputValveType():
        """
        the Valve types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FourWay", "4-way valve"
           "ThreeWay", "3-way valve"
        """
        FourWay = 0  # PneumaticValveBuilderOutputValveTypeMemberType
        ThreeWay = 1  # PneumaticValveBuilderOutputValveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetCylinders(self, cylinders: 'list[PneumaticCylinder]') -> None:
        """
        the Cylinders. Sets the cylinder array. 
        
        Signature ``SetCylinders(cylinders)`` 
        
        :param cylinders:  Input geometries 
        :type cylinders: list of :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ControlInput: NXOpen.Expression = ...
    """
    Returns  the initial control input.  
    
    <hr>
    
    Getter Method
    
    Signature ``ControlInput`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Cylinders: SelectPneumaticCylinderList = ...
    """
    Returns  the Cylinders. This can be a :py:class:`PneumaticCylinder`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Cylinders`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPneumaticCylinderList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExhaustPressure: NXOpen.Expression = ...
    """
    Returns  the initial exhaust pressure.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExhaustPressure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    NominalFlow: NXOpen.Expression = ...
    """
    Returns  the initial nominal flow.  
    
    <hr>
    
    Getter Method
    
    Signature ``NominalFlow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    NominalPressure: NXOpen.Expression = ...
    """
    Returns  the initial nominal pressure.  
    
    <hr>
    
    Getter Method
    
    Signature ``NominalPressure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SupplyPressure: NXOpen.Expression = ...
    """
    Returns  the initial supply pressure.  
    
    <hr>
    
    Getter Method
    
    Signature ``SupplyPressure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ValveType: PneumaticValveBuilderOutputValveType = ...
    """
    Returns or sets  the valve type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ValveType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PneumaticValveBuilderOutputValveType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ValveType`` 
    
    :param valveType: 
    :type valveType: :py:class:`NXOpen.Mechatronics.PneumaticValveBuilderOutputValveType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PneumaticValveBuilder = ...  # unknown typename


class SelectCollisionSensorList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: CollisionSensor) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[CollisionSensor]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: CollisionSensor, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: CollisionSensor, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: CollisionSensor, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: CollisionSensor, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: CollisionSensor) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: CollisionSensor, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: CollisionSensor, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: CollisionSensor, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[CollisionSensor]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: CollisionSensor) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[CollisionSensor]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[CollisionSensor]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectCollisionSensorList = ...  # unknown typename


class TagFormObject(NXOpen.NXObject):
    """
    Represents the TagFormObject class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.TagFormBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: TagFormObject = ...  # unknown typename


class BallJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Ball Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBallJointBuilder(self, slide: BallJoint) -> BallJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.BallJointBuilder`.  
        
        Signature ``CreateBallJointBuilder(slide)`` 
        
        :param slide:  :py:class:`NXOpen.Mechatronics.BallJoint` to be edited, if None then create a new one  
        :type slide: :py:class:`NXOpen.Mechatronics.BallJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.BallJointBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> BallJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.BallJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.BallJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.BallJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.BallJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class CamProfileBuilderElement_Struct():
    """
    Contains segment information of a motion segment .  
    
    Constructor: 
    NXOpen.Mechatronics.CamProfileBuilder.Element()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Id: int = ...
    """
    segment id                     
    <hr>
    
    Field Value
    Type:int
    """
    SegmentName: str = ...
    """
    segment name                   
    <hr>
    
    Field Value
    Type:str
    """
    SegmentType: int = ...
    """
    segment type                   
    <hr>
    
    Field Value
    Type:int
    """
    CurveType: int = ...
    """
    curve type                     
    <hr>
    
    Field Value
    Type:int
    """
    Slope: float = ...
    """
    point slope                    
    <hr>
    
    Field Value
    Type:float
    """
    Curvature: float = ...
    """
    point curvature                
    <hr>
    
    Field Value
    Type:float
    """
    MasterMin: float = ...
    """
    segment master min             
    <hr>
    
    Field Value
    Type:float
    """
    MasterMax: float = ...
    """
    segment master max             
    <hr>
    
    Field Value
    Type:float
    """
    SlaveMin: float = ...
    """
    segment slave min              
    <hr>
    
    Field Value
    Type:float
    """
    SlaveMax: float = ...
    """
    segment slave max              
    <hr>
    
    Field Value
    Type:float
    """
    Xn1: float = ...
    """
    segment nomalize lower define range 
    <hr>
    
    Field Value
    Type:float
    """
    Xn2: float = ...
    """
    segment nomalize higher define range
    <hr>
    
    Field Value
    Type:float
    """
    A0: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    A1: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    A2: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    A3: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    A4: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    A5: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    A6: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    Amplitude: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    AngularFrequency: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    Phase: float = ...
    """
    segment polynomial coefficient 
    <hr>
    
    Field Value
    Type:float
    """
    SlopeEqualPrev: bool = ...
    """
    if the segment slope equal with the previous segment
    <hr>
    
    Field Value
    Type:bool
    """
    SlopeEqualNext: bool = ...
    """
    if the segment slope equal with the next segment
    <hr>
    
    Field Value
    Type:bool
    """
    CurveEqualPrev: bool = ...
    """
    if the segment curvature equal with the previous segment
    <hr>
    
    Field Value
    Type:bool
    """
    CurveEqualNext: bool = ...
    """
    if the segment curvature equal with the next segment
    <hr>
    
    Field Value
    Type:bool
    """
    Slope2: float = ...
    """
    segment slope of upper end 
    <hr>
    
    Field Value
    Type:float
    """
    Jerk: float = ...
    """
    segment jerk 
    <hr>
    
    Field Value
    Type:float
    """
    FormulaType: int = ...
    """
    traversal segments type
    <hr>
    
    Field Value
    Type:int
    """
    LambdaValue: float = ...
    """
    traversal segment turning point factor 
    <hr>
    
    Field Value
    Type:float
    """
    OptimizeType: int = ...
    """
    traversal segment optimization type of traverse type
    <hr>
    
    Field Value
    Type:int
    """
    YnMin: float = ...
    """
    segment minimum slave value in normalized range
    <hr>
    
    Field Value
    Type:float
    """
    YnMax: float = ...
    """
    segment maximum slave value in normalized range
    <hr>
    
    Field Value
    Type:float
    """


class ProxyOverrideObjectBuilderAttrTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProxyOverrideObjectBuilderAttrType():
    """
    the parameter attribute option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bool", " - "
       "Int", " - "
       "Double", " - "
    """
    Bool = 0  # ProxyOverrideObjectBuilderAttrTypeMemberType
    Int = 1  # ProxyOverrideObjectBuilderAttrTypeMemberType
    Double = 2  # ProxyOverrideObjectBuilderAttrTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProxyOverrideObjectBuilderAttrBoolValueMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ProxyOverrideObjectBuilderAttrBoolValue():
    """
    the value for the boolean option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "False", " - "
       "True", " - "
    """
    FalseValue = 0  # ProxyOverrideObjectBuilderAttrBoolValueMemberType
    TrueValue = 1  # ProxyOverrideObjectBuilderAttrBoolValueMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProxyOverrideObjectBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ProxyOverrideObjectBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ProxyOverrideObjectCollection.CreateBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    class AttrType():
        """
        the parameter attribute option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bool", " - "
           "Int", " - "
           "Double", " - "
        """
        Bool = 0  # ProxyOverrideObjectBuilderAttrTypeMemberType
        Int = 1  # ProxyOverrideObjectBuilderAttrTypeMemberType
        Double = 2  # ProxyOverrideObjectBuilderAttrTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AttrBoolValue():
        """
        the value for the boolean option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "False", " - "
           "True", " - "
        """
        FalseValue = 0  # ProxyOverrideObjectBuilderAttrBoolValueMemberType
        TrueValue = 1  # ProxyOverrideObjectBuilderAttrBoolValueMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Attachment: NXOpen.SelectNXObject = ...
    """
    Returns  the attachment that is encapsulated in the proxy override object 
    
    <hr>
    
    Getter Method
    
    Signature ``Attachment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Context: NXOpen.BasePart = ...
    """
    Returns or sets  the context part of the proxy override object 
    
    <hr>
    
    Getter Method
    
    Signature ``Context`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.BasePart` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Context`` 
    
    :param context: 
    :type context: :py:class:`NXOpen.BasePart` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    HasAttachment: bool = ...
    """
    Returns or sets  the flag for whether the proxy override object has an attachment 
    
    <hr>
    
    Getter Method
    
    Signature ``HasAttachment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``HasAttachment`` 
    
    :param hasAttachment: 
    :type hasAttachment: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParameterList: ProxyObjectParameterBuilderList = ...
    """
    Returns  the parameter data 
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilderList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ProxyObject: NXOpen.NXObject = ...
    """
    Returns  the proxy object that is encapsulated in the proxy override object 
    
    <hr>
    
    Getter Method
    
    Signature ``ProxyObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ProxyOverrideObjectName: str = ...
    """
    Returns or sets  the name of the proxy override object 
    
    <hr>
    
    Getter Method
    
    Signature ``ProxyOverrideObjectName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ProxyOverrideObjectName`` 
    
    :param proxyOverrideObjectName: 
    :type proxyOverrideObjectName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ProxyOverrideObjectBuilder = ...  # unknown typename


class AdapterSignalBuilder(ProxyObjectBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.AdapterSignalBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.AdapterSignalCollection.CreateAdapterSignalBuilder`
    
    .. versionadded:: NX8.5.0
    """
    AssignedFormula: AdapterFormula = ...
    """
    Returns or sets  the assigned formula.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssignedFormula`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.AdapterFormula` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AssignedFormula`` 
    
    :param assignedFormula: 
    :type assignedFormula: :py:class:`NXOpen.Mechatronics.AdapterFormula` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InputOutput: int = ...
    """
    Returns or sets  the input/output (0 - Input, 1 - Output).  
    
    <hr>
    
    Getter Method
    
    Signature ``InputOutput`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``InputOutput`` 
    
    :param inputOutput: 
    :type inputOutput: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: AdapterSignalBuilder = ...  # unknown typename


class SensorsActuatorsListBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SensorsActuatorsListBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SensorsActuatorsListBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SensorsActuatorsListBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SensorsActuatorsListBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SensorsActuatorsListBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SensorsActuatorsListBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SensorsActuatorsListBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SensorsActuatorsListBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SensorsActuatorsListBuilder, object2: SensorsActuatorsListBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SensorsActuatorsListBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SensorsActuatorsListBuilderList = ...  # unknown typename


class FunctionObject(SystemObject):
    """
    Represents the Function object.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.FunctionObjectBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: FunctionObject = ...  # unknown typename


class VirtualAxis(NXOpen.DisplayableObject):
    """
    Represents the Virtual Axis.  
    
    A virtual Axis defines the object that has kinematics attributes 
    without geometry. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.VirtualAxisBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: VirtualAxis = ...  # unknown typename


class CamProfileCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Cam Profile.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCamProfileBuilder(self, segmentTable: CamProfile) -> CamProfileBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.CamProfileBuilder`.  
        
        Signature ``CreateCamProfileBuilder(segmentTable)`` 
        
        :param segmentTable:  :py:class:`NXOpen.Mechatronics.CamProfile` to be edited, if None then create a new one  
        :type segmentTable: :py:class:`NXOpen.Mechatronics.CamProfile` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.CamProfileBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> CamProfile:
        """
        Finds the :py:class:`NXOpen.Mechatronics.CamProfile` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.CamProfile`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.CamProfile` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.CamProfile` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class MCDSignalServerConfigurationObject(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationObject`..  
    
    It is used to maintain all servers configuration for external signals. Such as SHM, TCP/UDP etc....
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: MCDSignalServerConfigurationObject = ...  # unknown typename


class ExternalConnectionElement(NXOpen.NXObject):
    """
    Represents the External Connection Element class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder`
    
    .. versionadded:: NX8.0.1
    """
    Null: ExternalConnectionElement = ...  # unknown typename


class LogicObjectBuilderParameterData_Struct():
    """
    Defined Parameter Data Structure .  
    
    Constructor: 
    NXOpen.Mechatronics.LogicObjectBuilder.ParameterData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    ParameterName: str = ...
    """
    Parameter name 
    <hr>
    
    Field Value
    Type:str
    """
    ParameterValue: str = ...
    """
    Parameter value 
    <hr>
    
    Field Value
    Type:str
    """


class ExpressionBlockObject(NXOpen.NXObject):
    """
    Represents the ExpressionBlockObject class  
    
    ExpressionBlockObject encapsulates all related expressions that work for same task.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ExpressionBlockBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: ExpressionBlockObject = ...  # unknown typename


class SystemObjectBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SystemObject` builder   
    
    This is an abstract class and cannot be created.
    
    .. versionadded:: NX9.0.0
    """
    InstanceName: str = ...
    """
    Returns or sets  the name of instance.  
    
    <hr>
    
    Getter Method
    
    Signature ``InstanceName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InstanceName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SystemObjectBuilder = ...  # unknown typename


class GraphControlCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Graph Control.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateGraphControlBuilder(self, graphControl: GraphControl) -> GraphControlBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.GraphControlBuilder`.  
        
        Signature ``CreateGraphControlBuilder(graphControl)`` 
        
        :param graphControl:  :py:class:`NXOpen.Mechatronics.GraphControl` to be edited, if None then create a new one  
        :type graphControl: :py:class:`NXOpen.Mechatronics.GraphControl` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.GraphControlBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> GraphControl:
        """
        Finds the :py:class:`NXOpen.Mechatronics.GraphControl` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.GraphControl`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.GraphControl` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.GraphControl` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class TracerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.Tracer` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.TracerCollection.CreateTracerBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectPoint: NXOpen.Point = ...
    """
    Returns or sets  the origin point.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectPoint`` 
    
    :param selectPoint: 
    :type selectPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Selection: SelectRigidBody = ...
    """
    Returns  the body selection.  
    
    This should be a :py:class:`NXOpen.Mechatronics.RigidBody` 
    
    <hr>
    
    Getter Method
    
    Signature ``Selection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectRigidBody` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    TraceRateSetting: NXOpen.Expression = ...
    """
    Returns  the trace rate setting 
    
    <hr>
    
    Getter Method
    
    Signature ``TraceRateSetting`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: TracerBuilder = ...  # unknown typename


class DependencyCreatorBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.DependencyCreatorBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.MechatronicsManager.CreateDependencyCreatorBuilder`
    
    .. versionadded:: NX9.0.0
    """
    DependentObject: NXOpen.SelectNXObjectList = ...
    """
    Returns  the dependent object.  
    
    <hr>
    
    Getter Method
    
    Signature ``DependentObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ParentObject: SelectSystemObject = ...
    """
    Returns  the parent object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectSystemObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: DependencyCreatorBuilder = ...  # unknown typename


class ParameterStockBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ParameterStockBuilderDataType():
    """
    the data type for parameter value. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bool", "Bool"
       "Int", "Int"
       "Real", "Real"
       "String", "String"
       "List", "Enumeration"
    """
    Bool = 0  # ParameterStockBuilderDataTypeMemberType
    Int = 1  # ParameterStockBuilderDataTypeMemberType
    Real = 2  # ParameterStockBuilderDataTypeMemberType
    String = 3  # ParameterStockBuilderDataTypeMemberType
    List = 4  # ParameterStockBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ParameterStockBuilderAssignmentMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ParameterStockBuilderAssignment():
    """
    the assignment for runtime property. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "ByOrder", "By order"
       "Random", "Random"
    """
    NotSet = 0  # ParameterStockBuilderAssignmentMemberType
    ByOrder = 1  # ParameterStockBuilderAssignmentMemberType
    Random = 2  # ParameterStockBuilderAssignmentMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ParameterStockBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ParameterStockBuilder` builder.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX10.0.0
    """
    
    class DataType():
        """
        the data type for parameter value. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bool", "Bool"
           "Int", "Int"
           "Real", "Real"
           "String", "String"
           "List", "Enumeration"
        """
        Bool = 0  # ParameterStockBuilderDataTypeMemberType
        Int = 1  # ParameterStockBuilderDataTypeMemberType
        Real = 2  # ParameterStockBuilderDataTypeMemberType
        String = 3  # ParameterStockBuilderDataTypeMemberType
        List = 4  # ParameterStockBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Assignment():
        """
        the assignment for runtime property. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "ByOrder", "By order"
           "Random", "Random"
        """
        NotSet = 0  # ParameterStockBuilderAssignmentMemberType
        ByOrder = 1  # ParameterStockBuilderAssignmentMemberType
        Random = 2  # ParameterStockBuilderAssignmentMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddBoolParameter(self, name: str, value: bool, predefined: bool, readOnly: bool) -> None:
        """
        Adds Bool parameter.  
        
        Signature ``AddBoolParameter(name, value, predefined, readOnly)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: bool 
        :param predefined: 
        :type predefined: bool 
        :param readOnly: 
        :type readOnly: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddIntParameter(self, name: str, value: int, predefined: bool, readOnly: bool) -> None:
        """
        Adds Int parameter.  
        
        Signature ``AddIntParameter(name, value, predefined, readOnly)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        :param predefined: 
        :type predefined: bool 
        :param readOnly: 
        :type readOnly: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddRealParameter(self, name: str, value: float, unit: NXOpen.Unit, predefined: bool, readOnly: bool) -> None:
        """
        Adds Real parameter.  
        
        Signature ``AddRealParameter(name, value, unit, predefined, readOnly)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        :param unit: 
        :type unit: :py:class:`NXOpen.Unit` 
        :param predefined: 
        :type predefined: bool 
        :param readOnly: 
        :type readOnly: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddStringParameter(self, name: str, value: str, predefined: bool, readOnly: bool) -> None:
        """
        Adds String parameter.  
        
        Signature ``AddStringParameter(name, value, predefined, readOnly)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        :param predefined: 
        :type predefined: bool 
        :param readOnly: 
        :type readOnly: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddListParameter(self, name: str, values: 'list[str]', eAssignment: ParameterStockBuilderAssignment, predefined: bool, readOnly: bool) -> None:
        """
        Adds List parameter.  
        
        Signature ``AddListParameter(name, values, eAssignment, predefined, readOnly)`` 
        
        :param name: 
        :type name: str 
        :param values: 
        :type values: list of str 
        :param eAssignment: 
        :type eAssignment: :py:class:`NXOpen.Mechatronics.ParameterStockBuilderAssignment` 
        :param predefined: 
        :type predefined: bool 
        :param readOnly: 
        :type readOnly: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetParameterNamesAndTypes(self) -> tuple:
        """
        Gets parameter names and types.  
        
        Signature ``GetParameterNamesAndTypes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (names, types). names is a list of str. types is a list of :py:class:`NXOpen.Mechatronics.ParameterStockBuilderDataType`. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBoolParameter(self, name: str) -> tuple:
        """
        Gets bool parameter value.  
        
        Signature ``GetBoolParameter(name)`` 
        
        :param name: 
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (value, predefined, readOnly). value is a bool. predefined is a bool. readOnly is a bool. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetIntParameter(self, name: str) -> tuple:
        """
        Gets int parameter value.  
        
        Signature ``GetIntParameter(name)`` 
        
        :param name: 
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (value, predefined, readOnly). value is a int. predefined is a bool. readOnly is a bool. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetRealParameter(self, name: str) -> tuple:
        """
        Gets real parameter value.  
        
        Signature ``GetRealParameter(name)`` 
        
        :param name: 
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (value, unit, predefined, readOnly). value is a float. unit is a :py:class:`NXOpen.Unit`. predefined is a bool. readOnly is a bool. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetStringParameter(self, name: str) -> tuple:
        """
        Gets string parameter value.  
        
        Signature ``GetStringParameter(name)`` 
        
        :param name: 
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (value, predefined, readOnly). value is a str. predefined is a bool. readOnly is a bool. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetListParameter(self, name: str) -> tuple:
        """
        Gets list parameter value.  
        
        Signature ``GetListParameter(name)`` 
        
        :param name: 
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (values, eAssignment, predefined, readOnly). values is a list of str. eAssignment is a :py:class:`NXOpen.Mechatronics.ParameterStockBuilderAssignment`. predefined is a bool. readOnly is a bool. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditBoolParameter(self, name: str, value: bool) -> None:
        """
        Edits bool parameter value.  
        
        Signature ``EditBoolParameter(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditIntParameter(self, name: str, value: int) -> None:
        """
        Edits Int parameter.  
        
        Signature ``EditIntParameter(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditRealParameter(self, name: str, value: float, unit: NXOpen.Unit) -> None:
        """
        Edits Real parameter.  
        
        Signature ``EditRealParameter(name, value, unit)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        :param unit: 
        :type unit: :py:class:`NXOpen.Unit` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditStringParameter(self, name: str, value: str) -> None:
        """
        Edits String parameter.  
        
        Signature ``EditStringParameter(name, value)`` 
        
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditListParameter(self, name: str, values: 'list[str]', eAssignment: ParameterStockBuilderAssignment) -> None:
        """
        Edits List parameter.  
        
        Signature ``EditListParameter(name, values, eAssignment)`` 
        
        :param name: 
        :type name: str 
        :param values: 
        :type values: list of str 
        :param eAssignment: 
        :type eAssignment: :py:class:`NXOpen.Mechatronics.ParameterStockBuilderAssignment` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def DeleteParameter(self, name: str) -> None:
        """
        Delete parameter.  
        
        Signature ``DeleteParameter(name)`` 
        
        :param name: 
        :type name: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ApplicationName: str = ...
    """
    Returns or sets  the application name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ApplicationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplicationName`` 
    
    :param applicationName: 
    :type applicationName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ParameterStockBuilder = ...  # unknown typename


class LinearSpringJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Linear Spring Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLinearSpringJointBuilder(self, linearSpringJoint: LinearSpringJoint) -> LinearSpringJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.LinearSpringJointBuilder`.  
        
        Signature ``CreateLinearSpringJointBuilder(linearSpringJoint)`` 
        
        :param linearSpringJoint:  :py:class:`NXOpen.Mechatronics.LinearSpringJoint` to be edited, if None then create a new one  
        :type linearSpringJoint: :py:class:`NXOpen.Mechatronics.LinearSpringJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.LinearSpringJointBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> LinearSpringJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.LinearSpringJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.LinearSpringJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.LinearSpringJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.LinearSpringJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class FixedJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.FixedJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.FixedJointCollection.CreateFixedJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    FeedbackPoint: NXOpen.Point = ...
    """
    Returns or sets  the position of visual feedback point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FeedbackPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FeedbackPoint`` 
    
    :param feedback: 
    :type feedback: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: FixedJointBuilder = ...  # unknown typename


class ProxyOverrideObject(NXOpen.NXObject):
    """
    Represents the Proxy Override Object class.  
    
    A Proxy Override Object
    defines the object to be the override of the proxy definition object.
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ProxyOverrideObjectBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: ProxyOverrideObject = ...  # unknown typename


class PMNavFolderLocatorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PMNavFolderLocatorCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> PMNavFolderLocator:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PMNavFolderLocator` object with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PMNavFolderLocator`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PMNavFolderLocator` object with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PMNavFolderLocator` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ComparisonResultAttribute(ComparisonResultBase):
    """
    Represents attribute of comparison result   
    
    .. versionadded:: NX9.0.0
    """
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called, it is illegal to use the object. In .NET, this method is automatically called when the object is deleted by the garbage collector. 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    EcadValue: str = ...
    """
    Returns or sets  the value of imported ECAD device object 
    
    <hr>
    
    Getter Method
    
    Signature ``EcadValue`` 
    
    :returns:  Value of imported ECAD device object  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EcadValue`` 
    
    :param ecadValue:  Value of imported ECAD device object  
    :type ecadValue: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LogicalValue: str = ...
    """
    Returns or sets  the value of matched logical object 
    
    <hr>
    
    Getter Method
    
    Signature ``LogicalValue`` 
    
    :returns:  Value of matched logical object  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LogicalValue`` 
    
    :param logicalValue:  Value of matched logical object  
    :type logicalValue: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns  the name of the attribute 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns:  Name of attribute  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """


class SHMSignalClientBuilderSHMSignal_Struct():
    """
    Represents SHMTag info definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.SHMSignalClientBuilder.SHMSignal()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    SignalName: str = ...
    """
    Signal Name          
    <hr>
    
    Field Value
    Type:str
    """
    EDataType: SignalBuilderDataType = ...
    """
    Signal dataType              
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
    """
    Value: str = ...
    """
    Signal value            
    <hr>
    
    Field Value
    Type:str
    """
    EIOType: SignalBuilderExternalSignalIOType = ...
    """
    Signal IO Type            
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
    """


class RuntimeFormulaCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of RuntimeFormula.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRuntimeFormulaBuilder(self, formula: RuntimeFormula) -> RuntimeFormulaBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.RuntimeFormulaBuilder`.  
        
        Signature ``CreateRuntimeFormulaBuilder(formula)`` 
        
        :param formula:  :py:class:`NXOpen.Mechatronics.RuntimeFormula` to be edited, if None then create a new one  
        :type formula: :py:class:`NXOpen.Mechatronics.RuntimeFormula` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.RuntimeFormulaBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateRuntimeFormulaParameterBuilder(self, obj: RuntimeFormulaParameter) -> RuntimeFormulaParameterBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder`  
        
        Signature ``CreateRuntimeFormulaParameterBuilder(obj)`` 
        
        :param obj:  :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameter` to be edited, if None then create a new one  
        :type obj: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameter` 
        :returns:  :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` to be edited, if None then create a new one  
        :rtype: :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> RuntimeFormula:
        """
        Finds the :py:class:`NXOpen.Mechatronics.RuntimeFormula` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.RuntimeFormula`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.RuntimeFormula` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.RuntimeFormula` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ExpressionBlockBuilderSlot_Struct():
    """
    Represents Slot definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.ExpressionBlockBuilder.Slot()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    ESlotType: ExpressionBlockBuilderSlotType = ...
    """
    Slot type that indicate the data structure is used for 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.ExpressionBlockBuilderSlotType`
    """
    Name: str = ...
    """
    Slot Name 
    <hr>
    
    Field Value
    Type:str
    """
    EDataType: ExpressionBlockBuilderDataType = ...
    """
    Data type 
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.ExpressionBlockBuilderDataType`
    """
    BoolValue: bool = ...
    """
    Data Value (bool)   
    <hr>
    
    Field Value
    Type:bool
    """
    IntValue: int = ...
    """
    Data Value (int)    
    <hr>
    
    Field Value
    Type:int
    """
    DoubleValue: float = ...
    """
    Data Value (double) 
    <hr>
    
    Field Value
    Type:float
    """
    Unit: NXOpen.Unit = ...
    """
    Data Unit           
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Unit`
    """
    Formula: str = ...
    """
    Formula              
    <hr>
    
    Field Value
    Type:str
    """
    Comment: str = ...
    """
    Comment Text         
    <hr>
    
    Field Value
    Type:str
    """
    TgPhysicsObject: NXOpen.NXObject = ...
    """
    Connnected Physics Object       
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    NPhysicsPropTag: int = ...
    """
    Connnected Physics Property Persisent index 
    <hr>
    
    Field Value
    Type:int
    """


class CylindricalJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Cylindrical Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCylindricalJointBuilder(self, cylinJoint: CylindricalJoint) -> CylindricalJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.CylindricalJointBuilder`.  
        
        Signature ``CreateCylindricalJointBuilder(cylinJoint)`` 
        
        :param cylinJoint:  :py:class:`NXOpen.Mechatronics.CylindricalJoint` to be edited, if None then create a new one  
        :type cylinJoint: :py:class:`NXOpen.Mechatronics.CylindricalJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.CylindricalJointBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> CylindricalJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.CylindricalJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.CylindricalJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.CylindricalJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.CylindricalJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SelectPneumaticCylinderList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: PneumaticCylinder) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[PneumaticCylinder]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: PneumaticCylinder, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: PneumaticCylinder, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: PneumaticCylinder, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: PneumaticCylinder, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: PneumaticCylinder) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: PneumaticCylinder, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: PneumaticCylinder, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: PneumaticCylinder, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[PneumaticCylinder]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: PneumaticCylinder) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[PneumaticCylinder]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[PneumaticCylinder]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Mechatronics.PneumaticCylinder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectPneumaticCylinderList = ...  # unknown typename


class GanttOperationBuilderSimpleOperationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GanttOperationBuilderSimpleOperationType():
    """
    the pause operation Type enum
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Simple", " - "
       "Pause", " - "
    """
    Simple = 0  # GanttOperationBuilderSimpleOperationTypeMemberType
    Pause = 1  # GanttOperationBuilderSimpleOperationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GanttOperationBuilderOperationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GanttOperationBuilderOperationType():
    """
    the operation Type enum
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Simple", "Simple operation"
       "Commpound", "Compound operation"
       "Trigger", "Trigger operation"
       "Pause", "Pause operation"
    """
    Simple = 0  # GanttOperationBuilderOperationTypeMemberType
    Commpound = 16  # GanttOperationBuilderOperationTypeMemberType
    Trigger = 32  # GanttOperationBuilderOperationTypeMemberType
    Pause = 64  # GanttOperationBuilderOperationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GanttOperationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.GanttOperationBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.GanttCollection.CreateGanttOperationBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class SimpleOperationType():
        """
        the pause operation Type enum
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Simple", " - "
           "Pause", " - "
        """
        Simple = 0  # GanttOperationBuilderSimpleOperationTypeMemberType
        Pause = 1  # GanttOperationBuilderSimpleOperationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OperationType():
        """
        the operation Type enum
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Simple", "Simple operation"
           "Commpound", "Compound operation"
           "Trigger", "Trigger operation"
           "Pause", "Pause operation"
        """
        Simple = 0  # GanttOperationBuilderOperationTypeMemberType
        Commpound = 16  # GanttOperationBuilderOperationTypeMemberType
        Trigger = 32  # GanttOperationBuilderOperationTypeMemberType
        Pause = 64  # GanttOperationBuilderOperationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AddParameterList(self, parameters: 'list[GanttOperationParameterBuilder]') -> None:
        """
        Sets the parameter data 
        
        Signature ``AddParameterList(parameters)`` 
        
        :param parameters:  Input parameters 
        :type parameters: list of :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddConditionList(self, conditions: 'list[GanttOperationConditionBuilder]') -> None:
        """
        Sets the condition data 
        
        Signature ``AddConditionList(conditions)`` 
        
        :param conditions:  Input conditions 
        :type conditions: list of :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ActiveStatus: bool = ...
    """
    Returns or sets  the active status 
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveStatus`` 
    
    :param status: 
    :type status: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ConditionList: GanttOperationConditionBuilderList = ...
    """
    Returns  the condition data 
    
    <hr>
    
    Getter Method
    
    Signature ``ConditionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilderList` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Context: NXOpen.BasePart = ...
    """
    Returns or sets  the owner part of operation 
    
    <hr>
    
    Getter Method
    
    Signature ``Context`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.BasePart` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Context`` 
    
    :param context: 
    :type context: :py:class:`NXOpen.BasePart` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Duration: float = ...
    """
    Returns or sets  the operation duration 
    
    <hr>
    
    Getter Method
    
    Signature ``Duration`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Duration`` 
    
    :param duration: 
    :type duration: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExpressionDuration: NXOpen.Expression = ...
    """
    Returns  the operation duration expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionDuration`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OperationID: str = ...
    """
    Returns or sets  the operation id 
    
    <hr>
    
    Getter Method
    
    Signature ``OperationID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``OperationID`` 
    
    :param id: 
    :type id: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OperationName: str = ...
    """
    Returns or sets  the operation name 
    
    <hr>
    
    Getter Method
    
    Signature ``OperationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``OperationName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OperationTypes: GanttOperationBuilderOperationType = ...
    """
    Returns or sets  the operation type 
    
    <hr>
    
    Getter Method
    
    Signature ``OperationTypes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationBuilderOperationType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``OperationTypes`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Mechatronics.GanttOperationBuilderOperationType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParameterList: GanttOperationParameterBuilderList = ...
    """
    Returns  the parameter data 
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilderList` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParentID: str = ...
    """
    Returns or sets  the parent operation id in sequence editor tree 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ParentID`` 
    
    :param parent: 
    :type parent: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Physics: NXOpen.NXObject = ...
    """
    Returns or sets  the input of the operation : it can be a physics object(Rigid Body, 
    Collision, Constraints, Joints etc.  
    
    ), FunctionTable, part occurrence. 
    
    <hr>
    
    Getter Method
    
    Signature ``Physics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Physics`` 
    
    :param physics: 
    :type physics: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StartTime: float = ...
    """
    Returns or sets  the start time of operation 
    
    <hr>
    
    Getter Method
    
    Signature ``StartTime`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``StartTime`` 
    
    :param start: 
    :type start: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Type: GanttOperationBuilderSimpleOperationType = ...
    """
    Returns or sets  the type of simple operation.  
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:  Indicates the current type value of the dialog's types block  
    :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationBuilderSimpleOperationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type:  Indicates the type value of the dialog's types block to be set to  
    :type type: :py:class:`NXOpen.Mechatronics.GanttOperationBuilderSimpleOperationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: GanttOperationBuilder = ...  # unknown typename


class SHMSignalConnectionBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SHMSignalConnectionBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SHMSignalConnectionBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SHMSignalConnectionBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SHMSignalConnectionBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SHMSignalConnectionBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SHMSignalConnectionBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SHMSignalConnectionBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SHMSignalConnectionBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SHMSignalConnectionBuilder, object2: SHMSignalConnectionBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SHMSignalConnectionBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SHMSignalConnectionBuilderList = ...  # unknown typename


class Accelerometer(NXOpen.DisplayableObject):
    """
    Represents the Accelerometer. An Accelerometer is able to detect the linear accelerometer and angular accelerometer of the rigid body.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.AccelerometerBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: Accelerometer = ...  # unknown typename


class TransportSurfaceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Transport Surface.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTransportSurfaceBuilder(self, transportSurface: TransportSurface) -> TransportSurfaceBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.TransportSurfaceBuilder`.  
        
        Signature ``CreateTransportSurfaceBuilder(transportSurface)`` 
        
        :param transportSurface:  :py:class:`NXOpen.Mechatronics.TransportSurface` to be edited, if None then create a new one  
        :type transportSurface: :py:class:`NXOpen.Mechatronics.TransportSurface` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.TransportSurfaceBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> TransportSurface:
        """
        Finds the :py:class:`NXOpen.Mechatronics.TransportSurface` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.TransportSurface`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.TransportSurface` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.TransportSurface` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ForceTorqueControlCollection(NXOpen.TaggedObjectCollection):
    """
    Represents the ForceTorque collection for ForceTorque constraint.
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateForceTorqueControlBuilder(self, forceControl: ForceTorqueControl) -> ForceTorqueControlBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ForceTorqueControlBuilder`.
        
        Signature ``CreateForceTorqueControlBuilder(forceControl)`` 
        
        :param forceControl:  :py:class:`NXOpen.Mechatronics.ForceTorqueControl` to be edited, if None then create a new one  
        :type forceControl: :py:class:`NXOpen.Mechatronics.ForceTorqueControl` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ForceTorqueControlBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ForceTorqueControl:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ForceTorqueControl` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.SpeedControl`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ForceTorqueControl` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ForceTorqueControl` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class LogicObjectBuilder(SystemObjectBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.LogicObject` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.LogicObjectCollection.CreateLogicObjectBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class ParameterData():
        """
        Defined Parameter Data Structure .  
        
        Constructor: 
        NXOpen.Mechatronics.LogicObjectBuilder.ParameterData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        ParameterName: str = ...
        """
        Parameter name 
        <hr>
        
        Field Value
        Type:str
        """
        ParameterValue: str = ...
        """
        Parameter value 
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetParameterData(self) -> 'list[LogicObjectBuilderParameterData_Struct]':
        """
        Gets the parameter data.  
        
        Signature ``GetParameterData()`` 
        
        :returns:  Parameter data array 
        :rtype: list of :py:class:`NXOpen.Mechatronics.LogicObjectBuilderParameterData_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetParameterData(self, parameterData: 'list[LogicObjectBuilderParameterData_Struct]') -> None:
        """
        Sets the parameter data.  
        
        Signature ``SetParameterData(parameterData)`` 
        
        :param parameterData:  Parameter data array  
        :type parameterData: list of :py:class:`NXOpen.Mechatronics.LogicObjectBuilderParameterData_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Aspect: str = ...
    """
    Returns or sets  the Aspect.  
    
    <hr>
    
    Getter Method
    
    Signature ``Aspect`` 
    
    :returns:  aspect  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Aspect`` 
    
    :param aspect:  aspect  
    :type aspect: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ClassificationItem: SelectClassificationBuilder = ...
    """
    Returns  the classification item 
    
    <hr>
    
    Getter Method
    
    Signature ``ClassificationItem`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectClassificationBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    LetterDescription: str = ...
    """
    Returns or sets  the letter description.  
    
    <hr>
    
    Getter Method
    
    Signature ``LetterDescription`` 
    
    :returns:  Letter Description  
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LetterDescription`` 
    
    :param letterDescription:  Letter Description  
    :type letterDescription: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LetterName: str = ...
    """
    Returns or sets  the letter name.  
    
    <hr>
    
    Getter Method
    
    Signature ``LetterName`` 
    
    :returns:  Letter name  
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LetterName`` 
    
    :param letterName:  Letter name  
    :type letterName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Modified: bool = ...
    """
    Returns or sets  the modified status.  
    
    <hr>
    
    Getter Method
    
    Signature ``Modified`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Modified`` 
    
    :param modified: 
    :type modified: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    NavigatorObject: NXOpen.NXObject = ...
    """
    Returns  the navigator object which holds the teamcenter attributes.  
    
    <hr>
    
    Getter Method
    
    Signature ``NavigatorObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ObjectInformation: ObjectInformationBuilder = ...
    """
    Returns  the object information builder, used to specify the information of logic object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectInformation`` 
    
    :returns:  object information Builder  
    :rtype: :py:class:`NXOpen.Mechatronics.ObjectInformationBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Parent: NXOpen.NXObject = ...
    """
    Returns or sets  the parent object.  
    
    <hr>
    
    Getter Method
    
    Signature ``Parent`` 
    
    :returns:  Parent object  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Parent`` 
    
    :param parent:  Parent object  
    :type parent: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    TypeName: str = ...
    """
    Returns or sets  the Type Name used for.  
    
    <hr>
    
    Getter Method
    
    Signature ``TypeName`` 
    
    :returns:  type name  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TypeName`` 
    
    :param typeName:  type name  
    :type typeName: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: LogicObjectBuilder = ...  # unknown typename


class UDPSignalClientBuilderSignal_Struct():
    """
    Represents the data type. 
    
    .
    Constructor: 
    NXOpen.Mechatronics.UDPSignalClientBuilder.Signal()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    Signal Name          
    <hr>
    
    Field Value
    Type:str
    """
    EIOType: SignalBuilderIOType = ...
    """
    IO type              
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderIOType`
    """
    EDataType: SignalBuilderDataType = ...
    """
    Data type            
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
    """
    Offset: str = ...
    """
    signal offset        
    <hr>
    
    Field Value
    Type:str
    """


class UDPSignalClientBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.UDPSignalClientBuilder` builder.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    class Signal():
        """
        Represents the data type. 
        
        .
        Constructor: 
        NXOpen.Mechatronics.UDPSignalClientBuilder.Signal()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        Signal Name          
        <hr>
        
        Field Value
        Type:str
        """
        EIOType: SignalBuilderIOType = ...
        """
        IO type              
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderIOType`
        """
        EDataType: SignalBuilderDataType = ...
        """
        Data type            
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
        """
        Offset: str = ...
        """
        signal offset        
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetConnectionNames(self) -> tuple:
        """
        Gets UDP connection names  
        
        Signature ``GetConnectionNames()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (names, ownerParts). names is a list of str. ownerParts is a list of :py:class:`NXOpen.Part`. 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectionNames(self, ownerParts: 'list[NXOpen.Part]', names: 'list[str]') -> None:
        """
        Sets UDP connection names  
        
        Signature ``SetConnectionNames(ownerParts, names)`` 
        
        :param ownerParts: 
        :type ownerParts: list of :py:class:`NXOpen.Part` 
        :param names: 
        :type names: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetConnectionInformation(self, connectionName: str, ownerPart: NXOpen.Part) -> tuple:
        """
        Gets UDP connection information  
        
        Signature ``GetConnectionInformation(connectionName, ownerPart)`` 
        
        :param connectionName: 
        :type connectionName: str 
        :param ownerPart: 
        :type ownerPart: :py:class:`NXOpen.Part` 
        :returns: a tuple 
        :rtype: A tuple consisting of (castMode, remoteIP, remotePort, localIP, localPort, groupIP, rcvBufSize, sendBufSize, updateTime, signals). castMode is a int. remoteIP is a str. remotePort is a int. localIP is a str. localPort is a int. groupIP is a str. rcvBufSize is a int. sendBufSize is a int. updateTime is a float. signals is a list of :py:class:`NXOpen.Mechatronics.UDPSignalClientBuilderSignal_Struct`.   Array of Signal 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectionInformation(self, connectionName: str, ownerPart: NXOpen.Part, castMode: int, remoteIP: str, remotePort: int, localIP: str, localPort: int, groupIP: str, rcvBufSize: int, sendBufSize: int, updateTime: float, signals: 'list[UDPSignalClientBuilderSignal_Struct]') -> None:
        """
        Sets UDP connection information  
        
        Signature ``SetConnectionInformation(connectionName, ownerPart, castMode, remoteIP, remotePort, localIP, localPort, groupIP, rcvBufSize, sendBufSize, updateTime, signals)`` 
        
        :param connectionName: 
        :type connectionName: str 
        :param ownerPart: 
        :type ownerPart: :py:class:`NXOpen.Part` 
        :param castMode: 
        :type castMode: int 
        :param remoteIP: 
        :type remoteIP: str 
        :param remotePort: 
        :type remotePort: int 
        :param localIP: 
        :type localIP: str 
        :param localPort: 
        :type localPort: int 
        :param groupIP: 
        :type groupIP: str 
        :param rcvBufSize: 
        :type rcvBufSize: int 
        :param sendBufSize: 
        :type sendBufSize: int 
        :param updateTime: 
        :type updateTime: float 
        :param signals:  Array of Signal  
        :type signals: list of :py:class:`NXOpen.Mechatronics.UDPSignalClientBuilderSignal_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationPart: NXOpen.Part = ...
    """
    Returns or sets  the selected configuration part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :param ownerPart: 
    :type ownerPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: UDPSignalClientBuilder = ...  # unknown typename


class Signal(NXOpen.NXObject):
    """
    Represents the Signal class  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.SignalBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: Signal = ...  # unknown typename


class LimitSwitchBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.LimitSwitch` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.LimitSwitchCollection.CreateLimitSwitchBuilder`
    
    .. versionadded:: NX11.0.0
    """
    EnableLowerLimit: bool = ...
    """
    Returns or sets  the lower limit option. If the enable is true, then the physics object will be applied
    a lower limit.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnableLowerLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableLowerLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableUpperLimit: bool = ...
    """
    Returns or sets  the upper limit option. If the enable is true, then the physics object will be applied
    an upper limit.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnableUpperLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableUpperLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerLimit: NXOpen.Expression = ...
    """
    Returns  the lower limit used to judge whether need to switch the state.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PersistentTag: int = ...
    """
    Returns or sets  the Persistent Tag used in the physics object  
    
    <hr>
    
    Getter Method
    
    Signature ``PersistentTag`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PersistentTag`` 
    
    :param persistentTag: 
    :type persistentTag: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedPhysicsObject: NXOpen.SelectNXObject = ...
    """
    Returns  the physics select. This can be a physics object. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedPhysicsObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperLimit: NXOpen.Expression = ...
    """
    Returns  the upper limit used to judge whether need to switch the state.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: LimitSwitchBuilder = ...  # unknown typename


class GanttLinkerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a :py:class:`NXOpen.Mechatronics.GanttCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX10.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateGanttLinkerBuilder(self, other: GanttLinker) -> GanttLinkerBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.GanttLinkerBuilder`  
        
        Signature ``CreateGanttLinkerBuilder(other)`` 
        
        :param other: 
        :type other: :py:class:`NXOpen.Mechatronics.GanttLinker` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.GanttLinkerBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> GanttLinker:
        """
        Finds the :py:class:`NXOpen.Mechatronics.GanttLinker` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.GanttLinker`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.GanttLinker` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.GanttLinker` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SHMSignalConnectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of SHM Signal Connection.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> SHMSignalConnection:
        """
        Finds the :py:class:`NXOpen.Mechatronics.SHMSignalConnection` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.SHMSignalConnection`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.SHMSignalConnection` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnection` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateSHMSignalConnectionBuilder(self, connection: SHMSignalConnection) -> SHMSignalConnectionBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder`  
        
        Signature ``CreateSHMSignalConnectionBuilder(connection)`` 
        
        :param connection:  :py:class:`NXOpen.Mechatronics.SHMSignalConnection` to be edited, if None then create a new one  
        :type connection: :py:class:`NXOpen.Mechatronics.SHMSignalConnection` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ScrewJoint(PhysicsJoint):
    """
    Represents the Screw Joint. A Screw Joint is a connection that 
    can move both linearly and rotationally. 
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ScrewJointBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: ScrewJoint = ...  # unknown typename


class TagTableObject(NXOpen.NXObject):
    """
    Represents the TagTableObject class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.TagTableBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: TagTableObject = ...  # unknown typename


class CollisionSensorBuilderCollisionShapeTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CollisionSensorBuilderCollisionShapeTypes():
    """
    the Trigger Shape Types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Box", "Box"
       "Sphere", "Sphere"
       "Line", "Line"
    """
    Box = 0  # CollisionSensorBuilderCollisionShapeTypesMemberType
    Sphere = 1  # CollisionSensorBuilderCollisionShapeTypesMemberType
    Line = 2  # CollisionSensorBuilderCollisionShapeTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CollisionSensorBuilderShapePropertiesOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CollisionSensorBuilderShapePropertiesOption():
    """
    the Trigger Shape Option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "Automatic"
       "UserDefined", "UserDefined"
    """
    Automatic = 0  # CollisionSensorBuilderShapePropertiesOptionMemberType
    UserDefined = 1  # CollisionSensorBuilderShapePropertiesOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CollisionSensorBuilder(CollisionShapeBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.CollisionSensor` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.CollisionSensorCollection.CreateCollisionSensorBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class CollisionShapeTypes():
        """
        the Trigger Shape Types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Box", "Box"
           "Sphere", "Sphere"
           "Line", "Line"
        """
        Box = 0  # CollisionSensorBuilderCollisionShapeTypesMemberType
        Sphere = 1  # CollisionSensorBuilderCollisionShapeTypesMemberType
        Line = 2  # CollisionSensorBuilderCollisionShapeTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShapePropertiesOption():
        """
        the Trigger Shape Option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "Automatic"
           "UserDefined", "UserDefined"
        """
        Automatic = 0  # CollisionSensorBuilderShapePropertiesOptionMemberType
        UserDefined = 1  # CollisionSensorBuilderShapePropertiesOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetGeometry(self, geometries: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the geometries.  
        
        Signature ``SetGeometry(geometries)`` 
        
        :param geometries:  Input geometries 
        :type geometries: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Category: int = ...
    """
    Returns or sets  the category.  
    
    It should be between 0 and 16. 
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CollisionShape: CollisionSensorBuilderCollisionShapeTypes = ...
    """
    Returns or sets  the collision shape type.  
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CollisionShape`` 
    
    :param collisionShape: 
    :type collisionShape: :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderCollisionShapeTypes` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Geometry: NXOpen.SelectNXObjectList = ...
    """
    Returns  the geometries.  
    
    This can be a :py:class:`NXOpen.Assemblies.ComponentAssembly`, :py:class:`NXOpen.Point`
    , bodies and curves. 
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    HighlightOnCollision: bool = ...
    """
    Returns or sets  the option of highlight on collision.  
    
    If the highlight is true, then the sensor will
    be highlighted when it is collided or triggered during simulation. 
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightOnCollision`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightOnCollision`` 
    
    :param highlight: 
    :type highlight: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ShapeProperties: CollisionSensorBuilderShapePropertiesOption = ...
    """
    Returns or sets  the trigger shape option.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeProperties`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderShapePropertiesOption` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ShapeProperties`` 
    
    :param shapeProperties: 
    :type shapeProperties: :py:class:`NXOpen.Mechatronics.CollisionSensorBuilderShapePropertiesOption` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: CollisionSensorBuilder = ...  # unknown typename


class ElectricalPartCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ElectricalPartCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.MechatronicsManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateElectricalPartBuilder(self, object: ElectricalPart) -> ElectricalPartBuilder:
        """
        Create builder for ElectricalPart class  
        
        Signature ``CreateElectricalPartBuilder(object)`` 
        
        :param object:  :py:class:`NXOpen.Mechatronics.ElectricalPart` to be edited, if None then create a new one  
        :type object: :py:class:`NXOpen.Mechatronics.ElectricalPart` 
        :returns: :py:class:`NXOpen.Mechatronics.ElectricalPart` object  
        :rtype: :py:class:`NXOpen.Mechatronics.ElectricalPartBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ElectricalPart:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ElectricalPart` object with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the object, actually it shall be handle.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ElectricalPart` object with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ElectricalPart` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class GenericSensorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Generic Sensor.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateGenericSensorBuilder(self, genericSensor: GenericSensor) -> GenericSensorBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.GenericSensorBuilder`.  
        
        Signature ``CreateGenericSensorBuilder(genericSensor)`` 
        
        :param genericSensor:  :py:class:`NXOpen.Mechatronics.GenericSensor` to be edited, if None then create a new one  
        :type genericSensor: :py:class:`NXOpen.Mechatronics.GenericSensor` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.GenericSensorBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> GenericSensor:
        """
        Finds the :py:class:`NXOpen.Mechatronics.GenericSensor` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.GenericSensor`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.GenericSensor` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.GenericSensor` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PositionControlBuilderAxisMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PositionControlBuilderAxis():
    """
    the axis types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angular", "angular"
       "Linear", "linear"
       "Mixed", "Mix angular and linear"
    """
    Angular = 0  # PositionControlBuilderAxisMemberType
    Linear = 1  # PositionControlBuilderAxisMemberType
    Mixed = 2  # PositionControlBuilderAxisMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PositionControlBuilderAngularPathOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PositionControlBuilderAngularPathOptions():
    """
    the angular path options. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FollowShortestPath", "follow shortest path"
       "RotateClockwise", "rotate clockwise"
       "RotateCounterclockwise", "rotate counter-clockwise"
       "TrackMultipleTurns", "track multiple turns"
    """
    FollowShortestPath = 0  # PositionControlBuilderAngularPathOptionsMemberType
    RotateClockwise = 1  # PositionControlBuilderAngularPathOptionsMemberType
    RotateCounterclockwise = 2  # PositionControlBuilderAngularPathOptionsMemberType
    TrackMultipleTurns = 3  # PositionControlBuilderAngularPathOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PositionControlBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PositionControlBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PositionControlCollection.CreatePositionControlBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class Axis():
        """
        the axis types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angular", "angular"
           "Linear", "linear"
           "Mixed", "Mix angular and linear"
        """
        Angular = 0  # PositionControlBuilderAxisMemberType
        Linear = 1  # PositionControlBuilderAxisMemberType
        Mixed = 2  # PositionControlBuilderAxisMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AngularPathOptions():
        """
        the angular path options. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FollowShortestPath", "follow shortest path"
           "RotateClockwise", "rotate clockwise"
           "RotateCounterclockwise", "rotate counter-clockwise"
           "TrackMultipleTurns", "track multiple turns"
        """
        FollowShortestPath = 0  # PositionControlBuilderAngularPathOptionsMemberType
        RotateClockwise = 1  # PositionControlBuilderAngularPathOptionsMemberType
        RotateCounterclockwise = 2  # PositionControlBuilderAngularPathOptionsMemberType
        TrackMultipleTurns = 3  # PositionControlBuilderAngularPathOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetAxisJoint(self, axisJoint: NXOpen.NXObject) -> None:
        """
        Sets the joint.  
        
        Signature ``SetAxisJoint(axisJoint)`` 
        
        :param axisJoint: 
        :type axisJoint: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AngularPath: PositionControlBuilderAngularPathOptions = ...
    """
    Returns or sets  the angular path.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularPath`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PositionControlBuilderAngularPathOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngularPath`` 
    
    :param angularPath: 
    :type angularPath: :py:class:`NXOpen.Mechatronics.PositionControlBuilderAngularPathOptions` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AxisJoint: SelectPhysicsJoint = ...
    """
    Returns  the joint select.  
    
    This can be a :py:class:`NXOpen.Mechatronics.HingeJoint`, :py:class:`NXOpen.Mechatronics.SlidingJoint`
    , :py:class:`NXOpen.Mechatronics.CylindricalJoint` and :py:class:`NXOpen.Mechatronics.TransportSurface`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    AxisType: PositionControlBuilderAxis = ...
    """
    Returns or sets  the axis type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PositionControlBuilderAxis` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Mechatronics.PositionControlBuilderAxis` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Destination: NXOpen.Expression = ...
    """
    Returns  the destination.  
    
    <hr>
    
    Getter Method
    
    Signature ``Destination`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    DirectionType: SpeedPositionControlDirectiontype = ...
    """
    Returns or sets  the direction type, which works only when the position control is used to
    drive :py:class:`NXOpen.Mechatronics.TransportSurface` 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SpeedPositionControlDirectiontype` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionType`` 
    
    :param directionType: 
    :type directionType: :py:class:`NXOpen.Mechatronics.SpeedPositionControlDirectiontype` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableLimitForce: bool = ...
    """
    Returns or sets  whether or not to enable the limit force.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnableLimitForce`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableLimitForce`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ForwardForce: NXOpen.Expression = ...
    """
    Returns  the max force that speed control can apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardForce`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    LimitJerk: bool = ...
    """
    Returns or sets  the limit jerk flag, which is used to control if the position control includes jerk data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LimitJerk`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitJerk`` 
    
    :param limitJerk: 
    :type limitJerk: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MaxAcceleration: NXOpen.Expression = ...
    """
    Returns  the max acceleration, which is used to set the maximum acceleration for position control.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaxAcceleration`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MaxDeceleration: NXOpen.Expression = ...
    """
    Returns  the max deceleration, which is used to set the maximum deceleration for position control.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaxDeceleration`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MaxJerk: NXOpen.Expression = ...
    """
    Returns  the max jerk, which is used to set the maximum jerk for position control.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaxJerk`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReverseForce: NXOpen.Expression = ...
    """
    Returns  the min force that speed control can apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseForce`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Signal: NXOpen.SelectNXObject = ...
    """
    Returns  the signal select.  
    
    This can be a :py:class:`NXOpen.Mechatronics.Signal`
    or :py:class:`NXOpen.Mechatronics.AdapterSignal`.
    
    <hr>
    
    Getter Method
    
    Signature ``Signal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Speed: NXOpen.Expression = ...
    """
    Returns  the speed.  
    
    <hr>
    
    Getter Method
    
    Signature ``Speed`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    UseAcceleration: bool = ...
    """
    Returns or sets  the use acceleration flag, which is used to control if the position control includes acceleration data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseAcceleration`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseAcceleration`` 
    
    :param useAcceleration: 
    :type useAcceleration: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PositionControlBuilder = ...  # unknown typename


class FunctionObjectBuilderParameterData_Struct():
    """
    Defined Parameter Data Structure .  
    
    Constructor: 
    NXOpen.Mechatronics.FunctionObjectBuilder.ParameterData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    ParameterName: str = ...
    """
    Parameter name 
    <hr>
    
    Field Value
    Type:str
    """
    ParameterValue: str = ...
    """
    Parameter value 
    <hr>
    
    Field Value
    Type:str
    """


class FunctionObjectBuilderRequirementData_Struct():
    """
    Defined Requirement Data Structure .  
    
    Constructor: 
    NXOpen.Mechatronics.FunctionObjectBuilder.RequirementData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    RequirementName: str = ...
    """
    Requirement name 
    <hr>
    
    Field Value
    Type:str
    """
    RequirementDesc: str = ...
    """
    Requirement description 
    <hr>
    
    Field Value
    Type:str
    """
    RequirementId: str = ...
    """
    Requirement Id, only makes sense in NX/Manager mode 
    <hr>
    
    Field Value
    Type:str
    """


class FunctionObjectBuilder(SystemObjectBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.FunctionObjectBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.FunctionObjectCollection.CreateFunctionObjectBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class ParameterData():
        """
        Defined Parameter Data Structure .  
        
        Constructor: 
        NXOpen.Mechatronics.FunctionObjectBuilder.ParameterData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        ParameterName: str = ...
        """
        Parameter name 
        <hr>
        
        Field Value
        Type:str
        """
        ParameterValue: str = ...
        """
        Parameter value 
        <hr>
        
        Field Value
        Type:str
        """
    
    
    class RequirementData():
        """
        Defined Requirement Data Structure .  
        
        Constructor: 
        NXOpen.Mechatronics.FunctionObjectBuilder.RequirementData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        RequirementName: str = ...
        """
        Requirement name 
        <hr>
        
        Field Value
        Type:str
        """
        RequirementDesc: str = ...
        """
        Requirement description 
        <hr>
        
        Field Value
        Type:str
        """
        RequirementId: str = ...
        """
        Requirement Id, only makes sense in NX/Manager mode 
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetChildren(self) -> 'list[NXOpen.NXObject]':
        """
        Gets the children 
        
        Signature ``GetChildren()`` 
        
        :returns:  Children object array  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetChildren(self, children: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the children 
        
        Signature ``SetChildren(children)`` 
        
        :param children:  Children object array  
        :type children: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetOccurrences(self) -> 'list[NXOpen.NXObject]':
        """
        Gets the occurrences 
        
        Signature ``GetOccurrences()`` 
        
        :returns:  Occurrences object array  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetOccurrences(self, occurrences: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the occurrences 
        
        Signature ``SetOccurrences(occurrences)`` 
        
        :param occurrences:  Occurrences object array  
        :type occurrences: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetOperations(self) -> 'list[NXOpen.NXObject]':
        """
        Gets the operations 
        
        Signature ``GetOperations()`` 
        
        :returns:  Operations object array  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetOperations(self, operations: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the operations 
        
        Signature ``SetOperations(operations)`` 
        
        :param operations:  Operations object array  
        :type operations: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetParameterData(self) -> 'list[FunctionObjectBuilderParameterData_Struct]':
        """
        Gets the parameter data  
        
        Signature ``GetParameterData()`` 
        
        :returns:  Parameter data array 
        :rtype: list of :py:class:`NXOpen.Mechatronics.FunctionObjectBuilderParameterData_Struct` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetParameterData(self, parameterData: 'list[FunctionObjectBuilderParameterData_Struct]') -> None:
        """
        Sets the parameter data 
        
        Signature ``SetParameterData(parameterData)`` 
        
        :param parameterData:  Parameter data array  
        :type parameterData: list of :py:class:`NXOpen.Mechatronics.FunctionObjectBuilderParameterData_Struct` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetRequirementData(self) -> 'list[FunctionObjectBuilderRequirementData_Struct]':
        """
        Gets the requirement data  
        
        Signature ``GetRequirementData()`` 
        
        :returns:  Requirement data array 
        :rtype: list of :py:class:`NXOpen.Mechatronics.FunctionObjectBuilderRequirementData_Struct` 
        
        .. versionadded:: NX7.5.1
        
        .. deprecated::  NX8.5.0
           Please use :py:class:`NXOpen.Mechatronics.RequirementBuilder` instead.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetRequirementData(self, requirementData: 'list[FunctionObjectBuilderRequirementData_Struct]') -> None:
        """
        Sets the requirement data 
        
        Signature ``SetRequirementData(requirementData)`` 
        
        :param requirementData:  Requirement data array  
        :type requirementData: list of :py:class:`NXOpen.Mechatronics.FunctionObjectBuilderRequirementData_Struct` 
        
        .. versionadded:: NX7.5.1
        
        .. deprecated::  NX8.5.0
           Please use :py:class:`NXOpen.Mechatronics.RequirementBuilder` instead.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ExampleDesc: str = ...
    """
    Returns or sets  the example description 
    
    <hr>
    
    Getter Method
    
    Signature ``ExampleDesc`` 
    
    :returns:  Example description  
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ExampleDesc`` 
    
    :param exampleDesc:  Example description  
    :type exampleDesc: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FunctionItemRevisionId: str = ...
    """
    Returns or sets  the part id 
    
    <hr>
    
    Getter Method
    
    Signature ``FunctionItemRevisionId`` 
    
    :returns:  Function Revision Item id  
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX8.5.0
       Please use :py:class:`NXOpen.Mechatronics.ObjectInformationBuilder` instead.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FunctionItemRevisionId`` 
    
    :param functionItemId:  Function Revision Item id  
    :type functionItemId: str 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX8.5.0
       Please use :py:class:`NXOpen.Mechatronics.ObjectInformationBuilder` instead.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FunctionOptionSet: str = ...
    """
    Returns or sets  the option set 
    
    <hr>
    
    Getter Method
    
    Signature ``FunctionOptionSet`` 
    
    :returns:  Function Option Set  
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FunctionOptionSet`` 
    
    :param functionOptionSet:  Function Option Set  
    :type functionOptionSet: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LetterName: str = ...
    """
    Returns or sets  the letter name 
    
    <hr>
    
    Getter Method
    
    Signature ``LetterName`` 
    
    :returns:  Letter name  
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``LetterName`` 
    
    :param letterName:  Letter name  
    :type letterName: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Modified: bool = ...
    """
    Returns or sets  the modified status.  
    
    <hr>
    
    Getter Method
    
    Signature ``Modified`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Modified`` 
    
    :param modified: 
    :type modified: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    NavigatorObject: NXOpen.NXObject = ...
    """
    Returns  the navigator object which holds the teamcenter attributes.  
    
    <hr>
    
    Getter Method
    
    Signature ``NavigatorObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ObjectInformation: ObjectInformationBuilder = ...
    """
    Returns  the object information builder, used to specify the information of function object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectInformation`` 
    
    :returns:  object information Builder  
    :rtype: :py:class:`NXOpen.Mechatronics.ObjectInformationBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ObjectName: str = ...
    """
    Returns or sets  the object name 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectName`` 
    
    :returns:  Object name  
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX8.5.0
       Please use :py:class:`NXOpen.Mechatronics.ObjectInformationBuilder` instead.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectName`` 
    
    :param objectName:  Object name  
    :type objectName: str 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX8.5.0
       Please use :py:class:`NXOpen.Mechatronics.ObjectInformationBuilder` instead.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Parent: NXOpen.NXObject = ...
    """
    Returns or sets  the parent 
    
    <hr>
    
    Getter Method
    
    Signature ``Parent`` 
    
    :returns:  Parent function object  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Parent`` 
    
    :param children:  Parent function object  
    :type children: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PlmxmlFileName: str = ...
    """
    Returns or sets  the plmxml file name 
    
    <hr>
    
    Getter Method
    
    Signature ``PlmxmlFileName`` 
    
    :returns:  PLMXML file name  
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PlmxmlFileName`` 
    
    :param plmxmlFileName:  PLMXML file name  
    :type plmxmlFileName: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    TypeDesc: str = ...
    """
    Returns or sets  the type description 
    
    <hr>
    
    Getter Method
    
    Signature ``TypeDesc`` 
    
    :returns:  Type description  
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``TypeDesc`` 
    
    :param typeDesc:  Type description  
    :type typeDesc: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: FunctionObjectBuilder = ...  # unknown typename


class ThreeJointCouplerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ThreeJointCouplers.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateThreeJointCouplerBuilder(self, threeJointCouplerConstraint: ThreeJointCoupler) -> ThreeJointCouplerBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ThreeJointCouplerBuilder`.  
        
        Signature ``CreateThreeJointCouplerBuilder(threeJointCouplerConstraint)`` 
        
        :param threeJointCouplerConstraint:  :py:class:`NXOpen.Mechatronics.ThreeJointCoupler` to be edited, if None then create a new one  
        :type threeJointCouplerConstraint: :py:class:`NXOpen.Mechatronics.ThreeJointCoupler` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ThreeJointCouplerBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ThreeJointCoupler:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ThreeJointCoupler` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ThreeJointCoupler`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ThreeJointCoupler` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ThreeJointCoupler` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PathConstraintJointBuilderPathTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PathConstraintJointBuilderPathTypes():
    """
    the path types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FromCoordinateSystems", "from coordinate systems"
       "FromCurves", "from curves"
    """
    FromCoordinateSystems = 0  # PathConstraintJointBuilderPathTypesMemberType
    FromCurves = 1  # PathConstraintJointBuilderPathTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PathConstraintJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PathConstraintJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PathConstraintJointCollection.CreatePathConstraintJointBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class PathTypes():
        """
        the path types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FromCoordinateSystems", "from coordinate systems"
           "FromCurves", "from curves"
        """
        FromCoordinateSystems = 0  # PathConstraintJointBuilderPathTypesMemberType
        FromCurves = 1  # PathConstraintJointBuilderPathTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetPathCurves(self) -> 'list[NXOpen.NXObject]':
        """
        Get the path curves that constrain the movement of the attachment 
        
        Signature ``GetPathCurves()`` 
        
        :returns:  curve or edge 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetPathCurvesFromCurves(self, pathCurves: 'list[NXOpen.NXObject]') -> None:
        """
        Set the path curves that constrain the movement of the attachment
        
        Signature ``SetPathCurvesFromCurves(pathCurves)`` 
        
        :param pathCurves:  curve or edge 
        :type pathCurves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EvaluatePath(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Evaluate the composited path with the curves.  
        
        Signature ``EvaluatePath(curves)`` 
        
        :param curves:  curve or edge 
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def NewPathFrame(self) -> PathConstraintFrameBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` object.  
        
        Signature ``NewPathFrame()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GeneratePathCurves(self) -> None:
        """
        Generate the path curves from the coordinates systems.  
        
        Signature ``GeneratePathCurves()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AxisVector: NXOpen.Direction = ...
    """
    Returns or sets  the axis vector which is tangent to the path curve at the selected point 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FrameList: PathConstraintFrameBuilderList = ...
    """
    Returns  the list containing the defined frames.  
    
    <hr>
    
    Getter Method
    
    Signature ``FrameList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilderList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PathPreview: bool = ...
    """
    Returns or sets  the path preview 
    
    <hr>
    
    Getter Method
    
    Signature ``PathPreview`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PathPreview`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PathType: PathConstraintJointBuilderPathTypes = ...
    """
    Returns or sets  the path type.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PathConstraintJointBuilderPathTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PathType`` 
    
    :param pathType: 
    :type pathType: :py:class:`NXOpen.Mechatronics.PathConstraintJointBuilderPathTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PointOnCurve: NXOpen.Point = ...
    """
    Returns or sets  the selected point on curve 
    
    <hr>
    
    Getter Method
    
    Signature ``PointOnCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PointOnCurve`` 
    
    :param pointOnCurve: 
    :type pointOnCurve: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PathConstraintJointBuilder = ...  # unknown typename


class ChangeOwnerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ChangeOwnerBuilder`.  
    
    Which is
    able to move physics objects to a specific component.
    When :py:meth:`Builder.Commit` is called None will be returned.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateChangeOwnerBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    def CheckButton(self) -> None:
        """
        Check the action is valid or not, and give the report in an information window.  
        
        Signature ``CheckButton()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Component: NXOpen.Assemblies.SelectComponent = ...
    """
    Returns  the component which is expected to be the owner of physics objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``Component`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponent` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    PhysicsObject: NXOpen.SelectNXObjectList = ...
    """
    Returns  the physics object.  
    
    This can be :py:class:`NXOpen.Mechatronics.RigidBody`, :py:class:`NXOpen.Mechatronics.PhysicsJoint`,
    :py:class:`NXOpen.Mechatronics.PhysicsConstraint` or other type of physics object. 
    
    <hr>
    
    Getter Method
    
    Signature ``PhysicsObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: ChangeOwnerBuilder = ...  # unknown typename


class SpeedPositionControlDirectiontypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpeedPositionControlDirectiontype():
    """
    the control direction types 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Parallel", "parallel"
       "Perpendicular", "perpendicular"
    """
    Parallel = 0  # SpeedPositionControlDirectiontypeMemberType
    Perpendicular = 1  # SpeedPositionControlDirectiontypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExternalSignalConfigurationCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ExternalSignalConfigurationObject.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateExternalSignalConfigurationBuilder(self, externalSignalConfigurationObject: ExternalSignalConfigurationObject) -> ExternalSignalConfigurationBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationBuilder`.  
        
        Signature ``CreateExternalSignalConfigurationBuilder(externalSignalConfigurationObject)`` 
        
        :param externalSignalConfigurationObject:  :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationObject` to be edited, if None then create a new one  
        :type externalSignalConfigurationObject: :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ExternalSignalConfigurationObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationObject` with the given name.
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ECADImportBuilderPositionModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ECADImportBuilderPositionMode():
    """
    Represents the position mode.   
    
    .. deprecated::  NX9.0.0
       This enum type has no replacement. It is no longer supported.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "InferredOnly", "Inferred Only"
       "AbsoluteOrigin", "Absolute Origin"
       "SelectOrigin", "Select Origin"
       "ByConstraints", "By Constraints"
       "Move", "Move"
    """
    InferredOnly = 0  # ECADImportBuilderPositionModeMemberType
    AbsoluteOrigin = 1  # ECADImportBuilderPositionModeMemberType
    SelectOrigin = 2  # ECADImportBuilderPositionModeMemberType
    ByConstraints = 3  # ECADImportBuilderPositionModeMemberType
    Move = 4  # ECADImportBuilderPositionModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ECADImportBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ECADImportBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateECADImportBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class PositionMode():
        """
        Represents the position mode.   
        
        .. deprecated::  NX9.0.0
           This enum type has no replacement. It is no longer supported.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "InferredOnly", "Inferred Only"
           "AbsoluteOrigin", "Absolute Origin"
           "SelectOrigin", "Select Origin"
           "ByConstraints", "By Constraints"
           "Move", "Move"
        """
        InferredOnly = 0  # ECADImportBuilderPositionModeMemberType
        AbsoluteOrigin = 1  # ECADImportBuilderPositionModeMemberType
        SelectOrigin = 2  # ECADImportBuilderPositionModeMemberType
        ByConstraints = 3  # ECADImportBuilderPositionModeMemberType
        Move = 4  # ECADImportBuilderPositionModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def CompareObjects(self) -> ComparisonResultContext:
        """
        Compares imported ECAD objects with logical objects.  
        
        Signature ``CompareObjects()`` 
        
        :returns:  The comparison result context  
        :rtype: :py:class:`NXOpen.Mechatronics.ComparisonResultContext` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GenerateEcadModelComponent(self, partName: str) -> NXOpen.BasePart:
        """
        Generates ECAD model component.  
        
        Signature ``GenerateEcadModelComponent(partName)`` 
        
        :param partName:  ECAD Model Part Name  
        :type partName: str 
        :returns: 
        :rtype: :py:class:`NXOpen.BasePart` 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           This method has no replacement. It is no longer supported.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateLogicalNode(self, referenceDesignator: str) -> LogicObject:
        """
        Creates logical node in system navigator.  
        
        Signature ``CreateLogicalNode(referenceDesignator)`` 
        
        :param referenceDesignator:  Multiple Reference Designator  
        :type referenceDesignator: str 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.LogicObject` 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           This method has no replacement. It is no longer supported.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditLogicalNode(self, logicalNode: LogicObject, itemName: str, itemId: str, oldPartOcc: NXOpen.Assemblies.Component, newPartOcc: NXOpen.Assemblies.Component, parameterData: 'list[LogicObjectBuilderParameterData_Struct]') -> None:
        """
        Edits logical node in system navigator.  
        
        Signature ``EditLogicalNode(logicalNode, itemName, itemId, oldPartOcc, newPartOcc, parameterData)`` 
        
        :param logicalNode: 
        :type logicalNode: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param itemName:  Logical Item Name   
        :type itemName: str 
        :param itemId:  Logical Item ID     
        :type itemId: str 
        :param oldPartOcc:  Old Component       
        :type oldPartOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param newPartOcc:  New Component       
        :type newPartOcc: :py:class:`NXOpen.Assemblies.Component` 
        :param parameterData:  Parameter Data Array  
        :type parameterData: list of :py:class:`NXOpen.Mechatronics.LogicObjectBuilderParameterData_Struct` 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           This method has no replacement. It is no longer supported.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ImportFile: str = ...
    """
    Returns or sets  the import file name 
    
    <hr>
    
    Getter Method
    
    Signature ``ImportFile`` 
    
    :returns:  The import file name  
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ImportFile`` 
    
    :param importFile:  The import file name  
    :type importFile: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PositionMethod: ECADImportBuilderPositionMode = ...
    """
    Returns or sets  the position method, which is used in adding to assembly.  
    
    <hr>
    
    Getter Method
    
    Signature ``PositionMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ECADImportBuilderPositionMode` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX9.0.0
       This method has no replacement. It is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PositionMethod`` 
    
    :param positionMethod: 
    :type positionMethod: :py:class:`NXOpen.Mechatronics.ECADImportBuilderPositionMode` 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX9.0.0
       This method has no replacement. It is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ECADImportBuilder = ...  # unknown typename


class AngularLimitJoint(PhysicsJoint):
    """
    Represents the Angular Limit Joint.  
    
    Angular limit joint causes objects to stop 
    moving when their relative position moves beyond a certain degree or get too close together. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.AngularLimitJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: AngularLimitJoint = ...  # unknown typename


class CollisionMaterialBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.CollisionMaterial` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.CollisionMaterialCollection.CreateCollisionMaterialBuilder`
    
    .. versionadded:: NX7.5.1
    """
    DynamicFriction: NXOpen.Expression = ...
    """
    Returns  the dynamic friction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicFriction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Restitution: NXOpen.Expression = ...
    """
    Returns  the restitution.  
    
    <hr>
    
    Getter Method
    
    Signature ``Restitution`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RollingFriction: NXOpen.Expression = ...
    """
    Returns  the rolling friciton.  
    
    <hr>
    
    Getter Method
    
    Signature ``RollingFriction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StaticFriction: NXOpen.Expression = ...
    """
    Returns  the static friction.  
    
    <hr>
    
    Getter Method
    
    Signature ``StaticFriction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: CollisionMaterialBuilder = ...  # unknown typename


class DistanceSensorBuilderOutputMeasureTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DistanceSensorBuilderOutputMeasureType():
    """
    the Measure types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "MEASURE_UNITLESS"
       "Voltage", "MEASURE_VOLTAGE"
       "Current", "MEASURE_ELECTRIC_CURRENT"
    """
    Constant = 0  # DistanceSensorBuilderOutputMeasureTypeMemberType
    Voltage = 1  # DistanceSensorBuilderOutputMeasureTypeMemberType
    Current = 2  # DistanceSensorBuilderOutputMeasureTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DistanceSensorBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.DistanceSensor` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.DistanceSensorCollection.CreateDistanceSensorBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class OutputMeasureType():
        """
        the Measure types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "MEASURE_UNITLESS"
           "Voltage", "MEASURE_VOLTAGE"
           "Current", "MEASURE_ELECTRIC_CURRENT"
        """
        Constant = 0  # DistanceSensorBuilderOutputMeasureTypeMemberType
        Voltage = 1  # DistanceSensorBuilderOutputMeasureTypeMemberType
        Current = 2  # DistanceSensorBuilderOutputMeasureTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the open angle. The angle between the cone surface and the Direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Category: int = ...
    """
    Returns or sets  the category. It should be between 0 and 16.  
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Direction: NXOpen.Direction = ...
    """
    Returns or sets  the direction. The Distance Sensor has the scope of a cone. The direction is the vector of the cone.  
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    HighlightOnCollision: bool = ...
    """
    Returns or sets  the option of highlight on collision. If the highlight is true, then the sensor will
    be highlighted when it is collided or triggered during simulation.  
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightOnCollision`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightOnCollision`` 
    
    :param highlight: 
    :type highlight: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerOutputRange: NXOpen.Expression = ...
    """
    Returns  the lower output range used to scale the distance data. Its measure type contains constant, voltage, current  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MeasureType: DistanceSensorBuilderOutputMeasureType = ...
    """
    Returns or sets  the measure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeasureType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.DistanceSensorBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MeasureType`` 
    
    :param measureType: 
    :type measureType: :py:class:`NXOpen.Mechatronics.DistanceSensorBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the point. Sensor Reference Point, also used as start point to measure the distance  
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Range: NXOpen.Expression = ...
    """
    Returns  the range of distance sensor. Also as the height of the cone  
    
    <hr>
    
    Getter Method
    
    Signature ``Range`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RigidBody: SelectRigidBody = ...
    """
    Returns  the Rigid Body. This can be a :py:class:`NXOpen.Mechatronics.RigidBody` If there is a rigid body, then the sensor will move with the rigid body. 
    
    <hr>
    
    Getter Method
    
    Signature ``RigidBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectRigidBody` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperOutputRange: NXOpen.Expression = ...
    """
    Returns  the upper output range used to scale the distance data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseScale: bool = ...
    """
    Returns or sets  the use scale flag, which is used to control if the distance sensor includes scale parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseScale`` 
    
    :param useScale: 
    :type useScale: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: DistanceSensorBuilder = ...  # unknown typename


class McdSignalServerConfigurationtypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class McdSignalServerConfigurationtype():
    """
    Represents configration data access type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Shm", " - "
       "Tcp", " - "
       "Udp", " - "
    """
    Shm = 0  # McdSignalServerConfigurationtypeMemberType
    Tcp = 1  # McdSignalServerConfigurationtypeMemberType
    Udp = 2  # McdSignalServerConfigurationtypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransmitterExitCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Transmitter Exit.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTransmitterExitBuilder(self, transmitterExit: TransmitterExit) -> TransmitterExitBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.TransmitterExitBuilder`.  
        
        Signature ``CreateTransmitterExitBuilder(transmitterExit)`` 
        
        :param transmitterExit:  :py:class:`NXOpen.Mechatronics.TransmitterExit` to be edited, if None then create a new one  
        :type transmitterExit: :py:class:`NXOpen.Mechatronics.TransmitterExit` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.TransmitterExitBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> TransmitterExit:
        """
        Finds the :py:class:`NXOpen.Mechatronics.TransmitterExit` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.TransmitterExit`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.TransmitterExit` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.TransmitterExit` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PMNavFolderLocator(NXOpen.NXObject):
    """
    Represents the PMNav Folder Locator.  
    
    No Creator
    
    .. versionadded:: NX9.0.0
    """
    
    def AddFolderObjects(self, objects: 'list[PMNavFolderObject]') -> None:
        """
        Add folder objects
        
        Signature ``AddFolderObjects(objects)`` 
        
        :param objects:  The folder Objects to be added  
        :type objects: list of :py:class:`NXOpen.Mechatronics.PMNavFolderObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def MoveFolderObject(self, draggedObject: PMNavFolderObject, targetObject: PMNavFolderObject) -> None:
        """
        Move the folder object
        
        Signature ``MoveFolderObject(draggedObject, targetObject)`` 
        
        :param draggedObject:  The dragged Folder Object  
        :type draggedObject: :py:class:`NXOpen.Mechatronics.PMNavFolderObject` 
        :param targetObject:  The Target Folder Object  
        :type targetObject: :py:class:`NXOpen.Mechatronics.PMNavFolderObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Null: PMNavFolderLocator = ...  # unknown typename


class InclinometerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Inclinometer.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateInclinometerBuilder(self, inclinometer: Inclinometer) -> InclinometerBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.InclinometerBuilder`.  
        
        Signature ``CreateInclinometerBuilder(inclinometer)`` 
        
        :param inclinometer:  :py:class:`NXOpen.Mechatronics.Inclinometer` to be edited, if None then create a new one  
        :type inclinometer: :py:class:`NXOpen.Mechatronics.Inclinometer` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.InclinometerBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> Inclinometer:
        """
        Finds the :py:class:`NXOpen.Mechatronics.Inclinometer` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.Inclinometer`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.Inclinometer` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.Inclinometer` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class LimitSwitch(NXOpen.DisplayableObject):
    """
    Represents the Limit Switch. A Limit Switch is able to detect whether the parameter of physics object
    exceeds either the upper or lower limit.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.LimitSwitchBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: LimitSwitch = ...  # unknown typename


class SelectPhysicsConstraint(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: PhysicsConstraint) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: PhysicsConstraint) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: PhysicsConstraint, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: PhysicsConstraint, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: PhysicsConstraint, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: PhysicsConstraint, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> PhysicsConstraint:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: PhysicsConstraint) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Mechatronics.PhysicsConstraint`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Mechatronics.PhysicsConstraint`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Mechatronics.PhysicsConstraint`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Mechatronics.PhysicsConstraint`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: PhysicsConstraint = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Mechatronics.PhysicsConstraint` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectPhysicsConstraint = ...  # unknown typename


class Cam(Coupling):
    """
    Represents the Cam Constraint.  
    
    Cam Constraint like a gear but the relationship 
    between object motions is determined by the function table that is created by the user.
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.CamBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: Cam = ...  # unknown typename


class TransmitterEntry(PhysicsConstraint):
    """
    Represents the Transmitter Entry. A Transmitter Entry is able to send rigid bodies by a specific port.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.TransmitterEntryBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: TransmitterEntry = ...  # unknown typename


class CamCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Cam.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCamBuilder(self, camConstraint: Cam) -> CamBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.CamBuilder`.  
        
        Signature ``CreateCamBuilder(camConstraint)`` 
        
        :param camConstraint:  :py:class:`NXOpen.Mechatronics.Cam` to be edited, if None then create a new one  
        :type camConstraint: :py:class:`NXOpen.Mechatronics.Cam` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.CamBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> Cam:
        """
        Finds the :py:class:`NXOpen.Mechatronics.Cam` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.Cam`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.Cam` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.Cam` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class DisplayChangerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Object Transformer.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX10.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDisplayChangerBuilder(self, objectSrc: DisplayChanger) -> DisplayChangerBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.DisplayChangerBuilder`.  
        
        Signature ``CreateDisplayChangerBuilder(objectSrc)`` 
        
        :param objectSrc:  :py:class:`NXOpen.Mechatronics.DisplayChanger` to be edited, if None then create a new one  
        :type objectSrc: :py:class:`NXOpen.Mechatronics.DisplayChanger` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.DisplayChangerBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> DisplayChanger:
        """
        Finds the :py:class:`NXOpen.Mechatronics.DisplayChanger` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.DisplayChanger`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.DisplayChanger` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.DisplayChanger` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class AdapterFormula(NXOpen.NXObject):
    """
    Represents the Adapter Formula class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.AdapterFormulaBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: AdapterFormula = ...  # unknown typename


class AddComponentBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.AddComponentBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.FunctionObjectCollection.CreateAddComponentBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: AddComponentBuilder = ...  # unknown typename


class PreferencesBuilderMasterTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PreferencesBuilderMasterTypes():
    """
    the Co-Simulation master type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Mcd", "MCD"
       "Simit", "SIMIT"
    """
    Mcd = 0  # PreferencesBuilderMasterTypesMemberType
    Simit = 1  # PreferencesBuilderMasterTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PreferencesBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PreferencesBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsPreferenceCollection.CreatePreferenceBuilder`
    
    Default values.
    
    ======================================  =====================================================
    Property                                Value
    ======================================  =====================================================
    AngularDampingExpression.Value          3490.6585 (millimeters part), 0.030895 (inches part) 
    --------------------------------------  -----------------------------------------------------
    CoSimulation                            false 
    --------------------------------------  -----------------------------------------------------
    CollisionPrecisionExpression.Value      0.1 (millimeters part), 0.0039 (inches part) 
    --------------------------------------  -----------------------------------------------------
    ConnectURL                              
    --------------------------------------  -----------------------------------------------------
    DynamicFrictionExpression.Value         0.7 
    --------------------------------------  -----------------------------------------------------
    EnablePlcSimAdvTimeSyn                  false 
    --------------------------------------  -----------------------------------------------------
    EnableTimeSync                          false 
    --------------------------------------  -----------------------------------------------------
    ErrorReductionExpression.Value          50 
    --------------------------------------  -----------------------------------------------------
    Gx.Value                                0 (millimeters part), 0 (inches part) 
    --------------------------------------  -----------------------------------------------------
    Gy.Value                                0 (millimeters part), 0 (inches part) 
    --------------------------------------  -----------------------------------------------------
    Gz.Value                                -9806.65 (millimeters part), -386.09 (inches part) 
    --------------------------------------  -----------------------------------------------------
    LinearDampingExpression.Value           0.05 (millimeters part), 0.0002855 (inches part) 
    --------------------------------------  -----------------------------------------------------
    MaxIterationExpression.Value            100 
    --------------------------------------  -----------------------------------------------------
    RestitutionExpression.Value             0.01 
    --------------------------------------  -----------------------------------------------------
    RollingFrictionExpression.Value         0.0 
    --------------------------------------  -----------------------------------------------------
    SpringForceMultiplierExpression.Value   100 
    --------------------------------------  -----------------------------------------------------
    StaticFrictionExpression.Value          0.7 
    --------------------------------------  -----------------------------------------------------
    StepTimeExpression.Value                0.001 
    --------------------------------------  -----------------------------------------------------
    ToleranceExpression.Value               0.1 (millimeters part), 0.0039 (inches part) 
    ======================================  =====================================================
    
    .. versionadded:: NX7.5.1
    """
    
    class MasterTypes():
        """
        the Co-Simulation master type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Mcd", "MCD"
           "Simit", "SIMIT"
        """
        Mcd = 0  # PreferencesBuilderMasterTypesMemberType
        Simit = 1  # PreferencesBuilderMasterTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngularDampingExpression: NXOpen.Expression = ...
    """
    Returns  the angular damping expression
    
    <hr>
    
    Getter Method
    
    Signature ``AngularDampingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CoSimulation: bool = ...
    """
    Returns or sets  the co-simulation option 
    
    <hr>
    
    Getter Method
    
    Signature ``CoSimulation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CoSimulation`` 
    
    :param coSimulation: 
    :type coSimulation: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CollisionPrecision: float = ...
    """
    Returns or sets  the collision precision.  
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionPrecision`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.CollisionPrecisionExpression` instead
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CollisionPrecision`` 
    
    :param collisionPrecision: 
    :type collisionPrecision: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CollisionPrecisionExpression: NXOpen.Expression = ...
    """
    Returns  the Collision Precision Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionPrecisionExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ConnectURL: str = ...
    """
    Returns or sets  the Simit Connect URL string 
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectURL`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ConnectURL`` 
    
    :param connectURL: 
    :type connectURL: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    DynamicFriction: float = ...
    """
    Returns or sets  the dynamic friction.  
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicFriction`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.DynamicFrictionExpression` instead
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``DynamicFriction`` 
    
    :param dynamicFriction: 
    :type dynamicFriction: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    DynamicFrictionExpression: NXOpen.Expression = ...
    """
    Returns  the Dynamic Friction Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``DynamicFrictionExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnablePlcSimAdvTimeSyn: bool = ...
    """
    Returns or sets  the plcsim adv time synchronization option 
    
    <hr>
    
    Getter Method
    
    Signature ``EnablePlcSimAdvTimeSyn`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnablePlcSimAdvTimeSyn`` 
    
    :param enablePlcSimAdvTimeSyn: 
    :type enablePlcSimAdvTimeSyn: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableTimeSync: bool = ...
    """
    Returns or sets  the time synchronization option 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableTimeSync`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableTimeSync`` 
    
    :param enableTimeSync: 
    :type enableTimeSync: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ErrorReduction: float = ...
    """
    Returns or sets  the error reduction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ErrorReduction`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.ErrorReductionExpression` instead
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ErrorReduction`` 
    
    :param errorReduction: 
    :type errorReduction: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ErrorReductionExpression: NXOpen.Expression = ...
    """
    Returns  the Error Reduction Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ErrorReductionExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FilePicker: str = ...
    """
    Returns or sets  the export timing chart file path 
    
    <hr>
    
    Getter Method
    
    Signature ``FilePicker`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FilePicker`` 
    
    :param exportFile: 
    :type exportFile: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ForwardStepTime: NXOpen.Expression = ...
    """
    Returns  the Forward Step Time Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardStepTime`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    GeometryHighlight: bool = ...
    """
    Returns or sets  the geometry highlight on collsion.  
    
    <hr>
    
    Getter Method
    
    Signature ``GeometryHighlight`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``GeometryHighlight`` 
    
    :param highlight: 
    :type highlight: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Gx: NXOpen.Expression = ...
    """
    Returns  the gx.  
    
    <hr>
    
    Getter Method
    
    Signature ``Gx`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Gy: NXOpen.Expression = ...
    """
    Returns  the gy.  
    
    <hr>
    
    Getter Method
    
    Signature ``Gy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Gz: NXOpen.Expression = ...
    """
    Returns  the gz.  
    
    <hr>
    
    Getter Method
    
    Signature ``Gz`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InvokeExport: bool = ...
    """
    Returns or sets  the toggle value for the invoke timing chart after import 
    
    <hr>
    
    Getter Method
    
    Signature ``InvokeExport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``InvokeExport`` 
    
    :param param: 
    :type param: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LinearDampingExpression: NXOpen.Expression = ...
    """
    Returns  the linear damping expression
    
    <hr>
    
    Getter Method
    
    Signature ``LinearDampingExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LoadAsSaved: bool = ...
    """
    Returns or sets  the load as saved option for MCD Objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``LoadAsSaved`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``LoadAsSaved`` 
    
    :param loadAsSaved: 
    :type loadAsSaved: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterType: PreferencesBuilderMasterTypes = ...
    """
    Returns or sets  the master type option 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PreferencesBuilderMasterTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MasterType`` 
    
    :param masterType: 
    :type masterType: :py:class:`NXOpen.Mechatronics.PreferencesBuilderMasterTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MaxIteration: int = ...
    """
    Returns or sets  the max iteration.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaxIteration`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.MaxIterationExpression` instead
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MaxIteration`` 
    
    :param maxIter: 
    :type maxIter: int 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MaxIterationExpression: NXOpen.Expression = ...
    """
    Returns  the Maximum Iteration Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``MaxIterationExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RefreshPrecision: float = ...
    """
    Returns or sets  the inspector refresh precision.  
    
    This option specifies the refresh precision to be used by the inspector to determine whether to update property values in UI or not. 
    
    <hr>
    
    Getter Method
    
    Signature ``RefreshPrecision`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``RefreshPrecision`` 
    
    :param refreshPrecision: 
    :type refreshPrecision: float 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Restitution: float = ...
    """
    Returns or sets  the restitution.  
    
    <hr>
    
    Getter Method
    
    Signature ``Restitution`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.RestitutionExpression` instead
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Restitution`` 
    
    :param restitution: 
    :type restitution: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RestitutionExpression: NXOpen.Expression = ...
    """
    Returns  the Restitution Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``RestitutionExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RevisionRule: str = ...
    """
    Returns or sets  the revision rule for MCD Objects.  
    
    <hr>
    
    Getter Method
    
    Signature ``RevisionRule`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``RevisionRule`` 
    
    :param revisionRule: 
    :type revisionRule: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RollingFrictionExpression: NXOpen.Expression = ...
    """
    Returns  the rolling Friction Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``RollingFrictionExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ShapeHighlight: bool = ...
    """
    Returns or sets  the shape highlight on collsion.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShapeHighlight`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ShapeHighlight`` 
    
    :param highlight: 
    :type highlight: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SpringForceMultiplier: float = ...
    """
    Returns or sets  the spring force multiplier.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpringForceMultiplier`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.SpringForceMultiplierExpression` instead
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SpringForceMultiplier`` 
    
    :param springForceMultiplier: 
    :type springForceMultiplier: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SpringForceMultiplierExpression: NXOpen.Expression = ...
    """
    Returns  the Spring Force Multiplier Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``SpringForceMultiplierExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StaticFriction: float = ...
    """
    Returns or sets  the static friction.  
    
    <hr>
    
    Getter Method
    
    Signature ``StaticFriction`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.StaticFrictionExpression` instead
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``StaticFriction`` 
    
    :param staticFriction: 
    :type staticFriction: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StaticFrictionExpression: NXOpen.Expression = ...
    """
    Returns  the static Friction Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StaticFrictionExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StepSize: NXOpen.Expression = ...
    """
    Returns  the Step Size Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StepSize`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StepTime: float = ...
    """
    Returns or sets  the step time.  
    
    <hr>
    
    Getter Method
    
    Signature ``StepTime`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.StepTimeExpression` instead
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``StepTime`` 
    
    :param stepTime: 
    :type stepTime: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StepTimeExpression: NXOpen.Expression = ...
    """
    Returns  the Step Time Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StepTimeExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StickyFactor: float = ...
    """
    Returns or sets  the sticky factor.  
    
    <hr>
    
    Getter Method
    
    Signature ``StickyFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.StickyForce` instead.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``StickyFactor`` 
    
    :param factor: 
    :type factor: float 
    
    .. versionadded:: NX10.0.0
    
    .. deprecated::  NX11.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StickyForce: NXOpen.Expression = ...
    """
    Returns  the sticky factor Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``StickyForce`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SynchronizationTime: NXOpen.Expression = ...
    """
    Returns  the time interval to do synchronization with SIMIT
    
    <hr>
    
    Getter Method
    
    Signature ``SynchronizationTime`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    TimeScaleFactor: float = ...
    """
    Returns or sets  the time scale factor 
    
    <hr>
    
    Getter Method
    
    Signature ``TimeScaleFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``TimeScaleFactor`` 
    
    :param scaleFactor: 
    :type scaleFactor: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       Use :py:meth:`NXOpen.Mechatronics.PreferencesBuilder.ToleranceExpression` instead
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX7.5.1
    
    .. deprecated::  NX9.0.0
       This functionality is no longer supported.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ToleranceExpression: NXOpen.Expression = ...
    """
    Returns  the Tolerance Expression 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceExpression`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PreferencesBuilder = ...  # unknown typename


class SHMConfigurationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SHMConfigurationBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateSHMConfigurationBuilder`
    
    .. versionadded:: NX9.0.0
    """
    SHMSignalConnectionList: SHMSignalConnectionBuilderList = ...
    """
    Returns  the SHM Signal Connection Builder list 
    
    <hr>
    
    Getter Method
    
    Signature ``SHMSignalConnectionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: SHMConfigurationBuilder = ...  # unknown typename


class RuntimeNCBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.RuntimeNCBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.RuntimeNCCollection.CreateRuntimeNcBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def LoadNCFile(self, ncFile: str) -> None:
        """
        This method is used to load NC file.  
        
        Signature ``LoadNCFile(ncFile)`` 
        
        :param ncFile: 
        :type ncFile: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def UpdateNCCode(self, ncCodeLines: 'list[str]') -> None:
        """
        This method is used to update NC code.  
        
        Signature ``UpdateNCCode(ncCodeLines)`` 
        
        :param ncCodeLines: 
        :type ncCodeLines: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ExportNCCode(self, ncFile: str) -> None:
        """
        This method is used to export current loaded NC Code to disk file.  
        
        Signature ``ExportNCCode(ncFile)`` 
        
        :param ncFile: 
        :type ncFile: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RunCSE(self) -> tuple:
        """
        This method is used to run NC Code via CSE in order to get output events 
        
        Signature ``RunCSE()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (isRunningOK, errMsg, lineNum, ncLine). isRunningOK is a bool.   True means CSE returns succeed result, or failure. errMsg is a str.   Error message if CSE return false. lineNum is a int.   The NC line number at which CSE failed. ncLine is a str.   The NC Code for which CSE failed. 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetAxesAndMachineEvents(self) -> tuple:
        """
        This method is used to get the axes that involved the motion of CSE output event, and 
        the machine event (e.  
        
        g. ToolChange) that fired by CSE.
        These axes and machine events are used to connect with MCD objects, so in the MCD simulation stage,
        the CSE will know which MCD runtime object will be driven.
        
        Signature ``GetAxesAndMachineEvents()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (axisNames, machineEventNames). axisNames is a list of str.   The axis names which involved in CSE motion. machineEventNames is a list of str.   The name of events fired by CSE. 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetMCDConnection(self, isAxis: bool, axisOrEventName: str) -> NXOpen.TaggedObject:
        """
        This method is used to get the MCD connected object to the specified axis or machine event  
        
        Signature ``GetMCDConnection(isAxis, axisOrEventName)`` 
        
        :param isAxis:  Flag indicates whether the MCD object is set to connect with axis or machine event.  
        :type isAxis: bool 
        :param axisOrEventName:  Axis or machine event name.  
        :type axisOrEventName: str 
        :returns:  MCD connected object. 
        The object type can be Mechatronics.PositionControl for the motion axis;
        or Mechatronics.SpeedControl for the spinde axis;
        or Mechatronics.GanttOperationObject for the machine event.  
        :rtype: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetMCDConnection(self, isAxis: bool, axisOrEventName: str, mcdConnectedTag: NXOpen.TaggedObject) -> None:
        """
        This method is used to set the MCD connected object to the specified axis or machine event 
        
        Signature ``SetMCDConnection(isAxis, axisOrEventName, mcdConnectedTag)`` 
        
        :param isAxis:  Flag indicates whether the MCD object is set to connect with axis or machine event.  
        :type isAxis: bool 
        :param axisOrEventName:  Axis or machine event name.  
        :type axisOrEventName: str 
        :param mcdConnectedTag:  MCD connected object.                                                                             The object type can be Mechatronics.PositionControl for the motion axis;                                                                            or Mechatronics.SpeedControl for the spinde axis;                                                                            or Mechatronics.GanttOperationObject for the machine event.  
        :type mcdConnectedTag: :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    FlagOfUsingContainer: bool = ...
    """
    Returns or sets  the flag which indicates whether to put the MCD connected objects to the specific 'Runtime NC' container or not.  
    
    true means put the MCD connected objects to the specific container (creates the container if it is not exist);
    false means restore the MCD connected objects to the original default folder, and remove the 'Runtime NC' container.
    
    <hr>
    
    Getter Method
    
    Signature ``FlagOfUsingContainer`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlagOfUsingContainer`` 
    
    :param flagOfUsingContainer: 
    :type flagOfUsingContainer: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FlagOfUsingSpecifiedMCF: bool = ...
    """
    Returns or sets  the flag which indicates whether use the specified MCF or not.  
    
    True means use user specified MCF file for running CSE, or use the Standard MCF file in MCD kits.
    
    <hr>
    
    Getter Method
    
    Signature ``FlagOfUsingSpecifiedMCF`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FlagOfUsingSpecifiedMCF`` 
    
    :param flagOfUsingSpecifiedMCF: 
    :type flagOfUsingSpecifiedMCF: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SpecifiedMCF: str = ...
    """
    Returns or sets  the user specified MCF File.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifiedMCF`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifiedMCF`` 
    
    :param specifiedMCF: 
    :type specifiedMCF: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: RuntimeNCBuilder = ...  # unknown typename


class PathConstraintFrameBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[PathConstraintFrameBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: PathConstraintFrameBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: PathConstraintFrameBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> PathConstraintFrameBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PathConstraintFrameBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: PathConstraintFrameBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[PathConstraintFrameBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[PathConstraintFrameBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: PathConstraintFrameBuilder, object2: PathConstraintFrameBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: PathConstraintFrameBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: PathConstraintFrameBuilderList = ...  # unknown typename


class GanttLinker(NXOpen.NXObject):
    """
    Represents the Gantt Linker class.  
    
    A Gantt Linker object defines the linker
    between two adjacent operations. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.GanttLinkerBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: GanttLinker = ...  # unknown typename


class ThreeJointCouplerBuilderAxisJointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ThreeJointCouplerBuilderAxisJointType():
    """
    the axis joint types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Angular", "Angular"
    """
    Linear = 0  # ThreeJointCouplerBuilderAxisJointTypeMemberType
    Angular = 1  # ThreeJointCouplerBuilderAxisJointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ThreeJointCouplerBuilder(CouplingBuilder):
    """
    Represents the builder class to create or edit a :py:class:`NXOpen.Mechatronics.ThreeJointCoupler` object.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ThreeJointCouplerCollection.CreateThreeJointCouplerBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class AxisJointType():
        """
        the axis joint types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Angular", "Angular"
        """
        Linear = 0  # ThreeJointCouplerBuilderAxisJointTypeMemberType
        Angular = 1  # ThreeJointCouplerBuilderAxisJointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisType: ThreeJointCouplerBuilderAxisJointType = ...
    """
    Returns or sets  the axis joint type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ThreeJointCouplerBuilderAxisJointType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Mechatronics.ThreeJointCouplerBuilderAxisJointType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExpressionMasterMultiple: NXOpen.Expression = ...
    """
    Returns  the master multiple expression.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionMasterMultiple`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExpressionSlaveMultiple: NXOpen.Expression = ...
    """
    Returns  the slave multiple expression.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionSlaveMultiple`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExpressionThirdJointMultiple: NXOpen.Expression = ...
    """
    Returns  the third joint multiple expression.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionThirdJointMultiple`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveAxisType: ThreeJointCouplerBuilderAxisJointType = ...
    """
    Returns or sets  the axis joint type.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveAxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ThreeJointCouplerBuilderAxisJointType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SlaveAxisType`` 
    
    :param slaveAxisType: 
    :type slaveAxisType: :py:class:`NXOpen.Mechatronics.ThreeJointCouplerBuilderAxisJointType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ThirdAxisJoint: SelectPhysicsJoint = ...
    """
    Returns  the third axis joint.  
    
    This can be a :py:class:`NXOpen.Mechatronics.HingeJoint`, :py:class:`NXOpen.Mechatronics.SlidingJoint` 
    and :py:class:`NXOpen.Mechatronics.CylindricalJoint`.
    
    <hr>
    
    Getter Method
    
    Signature ``ThirdAxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ThirdJointAxisType: ThreeJointCouplerBuilderAxisJointType = ...
    """
    Returns or sets  the axis joint type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ThirdJointAxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ThreeJointCouplerBuilderAxisJointType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ThirdJointAxisType`` 
    
    :param thirdAxisType: 
    :type thirdAxisType: :py:class:`NXOpen.Mechatronics.ThreeJointCouplerBuilderAxisJointType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ThreeJointCouplerBuilder = ...  # unknown typename


class PointOnCurveJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of PointOnCurve Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePointOnCurveJointBuilder(self, joint: PointOnCurveJoint) -> PointOnCurveJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PointOnCurveJointBuilder`.  
        
        Signature ``CreatePointOnCurveJointBuilder(joint)`` 
        
        :param joint:  :py:class:`NXOpen.Mechatronics.PointOnCurveJoint` to be edited, if None then create a new one  
        :type joint: :py:class:`NXOpen.Mechatronics.PointOnCurveJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PointOnCurveJointBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> PointOnCurveJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PointOnCurveJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PointOnCurveJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PointOnCurveJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PointOnCurveJoint` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SelectAdapterSignal(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: AdapterSignal) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: AdapterSignal) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: AdapterSignal, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: AdapterSignal, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: AdapterSignal, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: AdapterSignal, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> AdapterSignal:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: AdapterSignal) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Mechatronics.AdapterSignal`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Mechatronics.AdapterSignal`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Mechatronics.AdapterSignal`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Mechatronics.AdapterSignal`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: AdapterSignal = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectAdapterSignal = ...  # unknown typename


class BreakingConstraintBuilderBreakingModeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BreakingConstraintBuilderBreakingModeType():
    """
    Represents the breaking mode. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Force", "Force"
       "Torque", "Torque"
    """
    Force = 0  # BreakingConstraintBuilderBreakingModeTypeMemberType
    Torque = 1  # BreakingConstraintBuilderBreakingModeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BreakingConstraintBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.BreakingConstraint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.BreakingConstraintCollection.CreateBreakingConstraintBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class BreakingModeType():
        """
        Represents the breaking mode. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Force", "Force"
           "Torque", "Torque"
        """
        Force = 0  # BreakingConstraintBuilderBreakingModeTypeMemberType
        Torque = 1  # BreakingConstraintBuilderBreakingModeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetJoint(self, joint: PhysicsJoint) -> None:
        """
        Sets the joint.  
        
        Signature ``SetJoint(joint)`` 
        
        :param joint: 
        :type joint: :py:class:`NXOpen.Mechatronics.PhysicsJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    BreakingMode: BreakingConstraintBuilderBreakingModeType = ...
    """
    Returns or sets  the breaking mode.  
    
    <hr>
    
    Getter Method
    
    Signature ``BreakingMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.BreakingConstraintBuilderBreakingModeType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BreakingMode`` 
    
    :param breakingMode: 
    :type breakingMode: :py:class:`NXOpen.Mechatronics.BreakingConstraintBuilderBreakingModeType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Direction: NXOpen.Direction = ...
    """
    Returns or sets  the direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FixedDirection: bool = ...
    """
    Returns or sets  the direction is fixed or not.  
    
    <hr>
    
    Getter Method
    
    Signature ``FixedDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FixedDirection`` 
    
    :param fixedDirection: 
    :type fixedDirection: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Joint: SelectPhysicsJoint = ...
    """
    Returns  the joint object.  
    
    It can be any type of joints. 
    
    <hr>
    
    Getter Method
    
    Signature ``Joint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MaximumMagnitude: NXOpen.Expression = ...
    """
    Returns  the maximum allowable magnitude, the joint will be broken if it exceeds this value.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumMagnitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: BreakingConstraintBuilder = ...  # unknown typename


class RuntimeFormula(NXOpen.NXObject):
    """
    Represents the Runtime Formula class.  
    
    Runtime Formula objects are
    able to connect physics runtime properties to Runtime Formula. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.RuntimeFormulaBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: RuntimeFormula = ...  # unknown typename


class ReadWriteDeviceObject(NXOpen.NXObject):
    """
    Represents the ReadWriteDeviceObject class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ReadWriteDeviceBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: ReadWriteDeviceObject = ...  # unknown typename


class BreakingConstraint(PhysicsConstraint):
    """
    Represents the Breaking Constraint.  
    
    Breaking constraint specifies that a joint can be broken
    if the force applied to it exceeds a certain value.
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.BreakingConstraintBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: BreakingConstraint = ...  # unknown typename


class MechatronicsSessionSimulationActionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MechatronicsSessionSimulationAction():
    """
    Represents the action of simulation. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Start", "Start"
       "Restart", "Restart"
       "Pause", "Pause"
       "Resume", "Resume"
       "Stop", "Stop"
    """
    Start = 0  # MechatronicsSessionSimulationActionMemberType
    Restart = 1  # MechatronicsSessionSimulationActionMemberType
    Pause = 2  # MechatronicsSessionSimulationActionMemberType
    Resume = 3  # MechatronicsSessionSimulationActionMemberType
    Stop = 4  # MechatronicsSessionSimulationActionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MechatronicsSession():
    """
    Represents Mechatronics session   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Session`
    
    .. versionadded:: NX9.0.0
    """
    
    class SimulationAction():
        """
        Represents the action of simulation. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Start", "Start"
           "Restart", "Restart"
           "Pause", "Pause"
           "Resume", "Resume"
           "Stop", "Stop"
        """
        Start = 0  # MechatronicsSessionSimulationActionMemberType
        Restart = 1  # MechatronicsSessionSimulationActionMemberType
        Pause = 2  # MechatronicsSessionSimulationActionMemberType
        Resume = 3  # MechatronicsSessionSimulationActionMemberType
        Stop = 4  # MechatronicsSessionSimulationActionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def PerformSimulation(self, action: MechatronicsSessionSimulationAction) -> None:
        """
        Control the Simulation.  
        
        Signature ``PerformSimulation(action)`` 
        
        :param action: 
        :type action: :py:class:`NXOpen.Mechatronics.MechatronicsSessionSimulationAction` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetLogicalTypes(self) -> tuple:
        """
        Gets defined logical types in configuration file 
        
        Signature ``GetLogicalTypes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (logicalTypeNames, logicalTypeBitmaps). logicalTypeNames is a list of str.   Array of type names logicalTypeBitmaps is a list of str.   Array of type bitmaps 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLogicalAttributeNames(self) -> 'list[str]':
        """
        Gets defined logical attribute names in configuration file 
        
        Signature ``GetLogicalAttributeNames()`` 
        
        :returns:  Array of defined attribute names  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLogicalAttributeValues(self, logicalObject: LogicObject, attributeNames: 'list[str]') -> 'list[str]':
        """
        Gets attribute values of logical object  
        
        Signature ``GetLogicalAttributeValues(logicalObject, attributeNames)`` 
        
        :param logicalObject:  Logical object  
        :type logicalObject: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param attributeNames:  Array of logical attribute names  
        :type attributeNames: list of str 
        :returns:  Array of logical attribute values  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetExportableLogicalObjects(self, logicalObject: LogicObject) -> 'list[LogicObject]':
        """
        Gets exportable logical objects  
        
        Signature ``GetExportableLogicalObjects(logicalObject)`` 
        
        :param logicalObject:  Logical object  
        :type logicalObject: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :returns:  Array of exportable logical objects  
        :rtype: list of :py:class:`NXOpen.Mechatronics.LogicObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    


class PointOnCurveJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PointOnCurveJoint` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PointOnCurveJointCollection.CreatePointOnCurveJointBuilder`
    
    Default values.
    
    =============  ======================================
    Property       Value
    =============  ======================================
    Offset.Value   0 (millimeters part), 0 (inches part) 
    =============  ======================================
    
    .. versionadded:: NX9.0.0
    """
    
    def GetConnectedCurves(self) -> 'list[NXOpen.NXObject]':
        """
        Get the connected curves which the attachment will move along  
        
        Signature ``GetConnectedCurves()`` 
        
        :returns:  curve or edge 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectedCurves(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Set the connected curves which the attachment will move along 
        
        Signature ``SetConnectedCurves(curves)`` 
        
        :param curves:  curve or edge 
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EvaluatePath(self, curves: 'list[NXOpen.NXObject]') -> None:
        """
        Evaluate the path.  
        
        If there is no path, create it, otherwise evaluate it.
        
        Signature ``EvaluatePath(curves)`` 
        
        :param curves:  curve or edge 
        :type curves: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AxisVector: NXOpen.Direction = ...
    """
    Returns or sets  the axis vector which is tangent to the connected curve at the selected point 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset specifies the "Zero Point" on the curve whose distance to the point along the curve is the offset value.  
    
    Zero Point is on the opposite direction of the axis with respect to the point on the curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PointOnCurve: NXOpen.Point = ...
    """
    Returns or sets  the selected point on curve 
    
    <hr>
    
    Getter Method
    
    Signature ``PointOnCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PointOnCurve`` 
    
    :param pointOnCurve: 
    :type pointOnCurve: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PointOnCurveJointBuilder = ...  # unknown typename


class SignalAdapter(NXOpen.DisplayableObject):
    """
    Represents the Signal Adapter class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.SignalAdapterBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: SignalAdapter = ...  # unknown typename


class ConvertFromMTBBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ConvertFromMTBBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateConvertFromMtbbuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: ConvertFromMTBBuilder = ...  # unknown typename


class ChangeMaterialBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ChangeMaterial` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ChangeMaterialCollection.CreateChangeMaterialBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    def SetFirstBody(self, firstBody: NXOpen.DisplayableObject) -> None:
        """
        Sets the first object.  
        
        This can be :py:class:`NXOpen.Mechatronics.RigidBody`,
        :py:class:`NXOpen.Mechatronics.CollisionBody` or :py:class:`NXOpen.Mechatronics.TransportSurface`.
        
        Signature ``SetFirstBody(firstBody)`` 
        
        :param firstBody: 
        :type firstBody: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSecondBody(self, secondBody: NXOpen.DisplayableObject) -> None:
        """
        Sets the second object.  
        
        This can be :py:class:`NXOpen.Mechatronics.RigidBody`,
        :py:class:`NXOpen.Mechatronics.CollisionBody` or :py:class:`NXOpen.Mechatronics.TransportSurface`.
        
        Signature ``SetSecondBody(secondBody)`` 
        
        :param secondBody: 
        :type secondBody: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    CollisionMaterial: CollisionMaterial = ...
    """
    Returns or sets  the material.  
    
    This can be :py:class:`NXOpen.Mechatronics.CollisionMaterial`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionMaterial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionMaterial` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CollisionMaterial`` 
    
    :param collisionMaterial: 
    :type collisionMaterial: :py:class:`NXOpen.Mechatronics.CollisionMaterial` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FirstBody: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first body of collision pair.  
    
    This can be :py:class:`NXOpen.Mechatronics.RigidBody`,
    :py:class:`NXOpen.Mechatronics.CollisionBody` or :py:class:`NXOpen.Mechatronics.TransportSurface`. 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SecondBody: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the second body of collision pair.  
    
    This can be :py:class:`NXOpen.Mechatronics.RigidBody`,
    :py:class:`NXOpen.Mechatronics.CollisionBody` or :py:class:`NXOpen.Mechatronics.TransportSurface`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ChangeMaterialBuilder = ...  # unknown typename


class ObjectSinkBuilderDeleteSourceTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ObjectSinkBuilderDeleteSourceType():
    """
    the delete option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Anycopiedobjects", "Any copied objects"
       "Selectedsources", "Selected sources"
    """
    Anycopiedobjects = 0  # ObjectSinkBuilderDeleteSourceTypeMemberType
    Selectedsources = 1  # ObjectSinkBuilderDeleteSourceTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ObjectSinkBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ObjectSink` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ObjectSinkCollection.CreateObjectSinkBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class DeleteSourceType():
        """
        the delete option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Anycopiedobjects", "Any copied objects"
           "Selectedsources", "Selected sources"
        """
        Anycopiedobjects = 0  # ObjectSinkBuilderDeleteSourceTypeMemberType
        Selectedsources = 1  # ObjectSinkBuilderDeleteSourceTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetCollisionSensor(self, objects: 'list[CollisionSensor]') -> None:
        """
        Sets the collision sensor object.  
        
        Signature ``SetCollisionSensor(objects)`` 
        
        :param objects:  Collision Sensor objects 
        :type objects: list of :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSource(self, objects: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the source.  
        
        Signature ``SetSource(objects)`` 
        
        :param objects: Source objects 
        :type objects: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    CollisionSensor: SelectCollisionSensorList = ...
    """
    Returns  the object select.  
    
    This can be a :py:class:`NXOpen.Mechatronics.CollisionSensor`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionSensor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectCollisionSensorList` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    DeleteSource: ObjectSinkBuilderDeleteSourceType = ...
    """
    Returns or sets  the option to delete source.  
    
    <hr>
    
    Getter Method
    
    Signature ``DeleteSource`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ObjectSinkBuilderDeleteSourceType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``DeleteSource`` 
    
    :param deleteSource: 
    :type deleteSource: :py:class:`NXOpen.Mechatronics.ObjectSinkBuilderDeleteSourceType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Source: NXOpen.SelectNXObjectList = ...
    """
    Returns  the source select.  
    
    <hr>
    
    Getter Method
    
    Signature ``Source`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ObjectSinkBuilder = ...  # unknown typename


class ExternalSignalConfigurationObject(NXOpen.NXObject):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationObject`..  
    
    It is used to maintain all clients configuration for external signals. Such as OPC DA, OPC UA, SHM, TCP/UDP, PLCSIMAdv, etc....
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: ExternalSignalConfigurationObject = ...  # unknown typename


class PneumaticValveCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Pneumatic Valve.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePneumaticValveBuilder(self, pneumaticValve: PneumaticValve) -> PneumaticValveBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PneumaticValveBuilder`.  
        
        Signature ``CreatePneumaticValveBuilder(pneumaticValve)`` 
        
        :param pneumaticValve:  :py:class:`NXOpen.Mechatronics.PneumaticValve` to be edited, if None then create a new one  
        :type pneumaticValve: :py:class:`NXOpen.Mechatronics.PneumaticValve` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PneumaticValveBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> PneumaticValve:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PneumaticValve` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PneumaticValve`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PneumaticValve` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PneumaticValve` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class UDPSignalServerBuilderSignal_Struct():
    """
    Represents the data type.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.UDPSignalServerBuilder.Signal()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    SignalTag: NXOpen.NXObject = ...
    """
    Signal Object         
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    BChecked: bool = ...
    """
    Signal Checked Status  
    <hr>
    
    Field Value
    Type:bool
    """
    Offset: str = ...
    """
    Adress value          
    <hr>
    
    Field Value
    Type:str
    """


class TagFormCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of TagForm.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX10.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTagFormBuilder(self, tagFormObject: TagFormObject) -> TagFormBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.TagFormBuilder`.  
        
        Signature ``CreateTagFormBuilder(tagFormObject)`` 
        
        :param tagFormObject:  :py:class:`NXOpen.Mechatronics.TagFormObject` to be edited, if None then create a new one  
        :type tagFormObject: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.TagFormBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> TagFormObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.TagFormObject` with the given name.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.TagFormObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.TagFormObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PreventCollisionBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PreventCollision` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PreventCollisionCollection.CreatePreventCollisionBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    def SetFirstBody(self, firstBody: NXOpen.DisplayableObject) -> None:
        """
        Sets the first object.  
        
        This can be a :py:class:`NXOpen.Mechatronics.RigidBody`, :py:class:`NXOpen.Mechatronics.CollisionBody` 
        or :py:class:`NXOpen.Mechatronics.CollisionSensor`. 
        
        Signature ``SetFirstBody(firstBody)`` 
        
        :param firstBody: 
        :type firstBody: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSecondBody(self, secondBody: NXOpen.DisplayableObject) -> None:
        """
        Sets the second object.  
        
        This can be a :py:class:`NXOpen.Mechatronics.RigidBody`, :py:class:`NXOpen.Mechatronics.CollisionBody` 
        or :py:class:`NXOpen.Mechatronics.CollisionSensor`. 
        
        Signature ``SetSecondBody(secondBody)`` 
        
        :param secondBody: 
        :type secondBody: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    FirstBody: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the first object.  
    
    This can be a :py:class:`NXOpen.Mechatronics.RigidBody`, :py:class:`NXOpen.Mechatronics.CollisionBody` 
    or :py:class:`NXOpen.Mechatronics.CollisionSensor`. 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SecondBody: NXOpen.SelectDisplayableObject = ...
    """
    Returns  the second object.  
    
    This can be a :py:class:`NXOpen.Mechatronics.RigidBody`, :py:class:`NXOpen.Mechatronics.CollisionBody` 
    or :py:class:`NXOpen.Mechatronics.CollisionSensor`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectDisplayableObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PreventCollisionBuilder = ...  # unknown typename


class PathConstraintJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Path Constraint Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX10.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePathConstraintJointBuilder(self, slide: PathConstraintJoint) -> PathConstraintJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PathConstraintJointBuilder`.  
        
        Signature ``CreatePathConstraintJointBuilder(slide)`` 
        
        :param slide:  :py:class:`NXOpen.Mechatronics.PathConstraintJoint` to be edited, if None then create a new one  
        :type slide: :py:class:`NXOpen.Mechatronics.PathConstraintJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PathConstraintJointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> PathConstraintJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PathConstraintJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PathConstraintJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PathConstraintJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PathConstraintJoint` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class GanttOperationConditionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.GanttCollection.CreateGanttOperationConditionBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    def PutExpressionValue(self, exp: NXOpen.Expression) -> None:
        """
        Set the expression value for double and interger parameters 
        
        Signature ``PutExpressionValue(exp)`` 
        
        :param exp: 
        :type exp: :py:class:`NXOpen.Expression` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Condition: str = ...
    """
    Returns or sets  the judging condition from current condition,the value can be 'And' or 'Or' 
    
    <hr>
    
    Getter Method
    
    Signature ``Condition`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Condition`` 
    
    :param strCondition: 
    :type strCondition: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ConditionId: str = ...
    """
    Returns or sets  the id of condition 
    
    <hr>
    
    Getter Method
    
    Signature ``ConditionId`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ConditionId`` 
    
    :param id: 
    :type id: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ConditionValue: str = ...
    """
    Returns or sets  the condition value use to evaluate this condition for the selected property in condition object 
    
    <hr>
    
    Getter Method
    
    Signature ``ConditionValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ConditionValue`` 
    
    :param strValue: 
    :type strValue: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExpressionValue: NXOpen.Expression = ...
    """
    Returns  the expression value for double and interger parameters 
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Index: int = ...
    """
    Returns or sets  the sequence number of condition 
    
    <hr>
    
    Getter Method
    
    Signature ``Index`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Index`` 
    
    :param ind: 
    :type ind: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    IsGroup: bool = ...
    """
    Returns or sets  the condition type, if the condition is a group, the value is 'true' 
    
    <hr>
    
    Getter Method
    
    Signature ``IsGroup`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``IsGroup`` 
    
    :param isGroup: 
    :type isGroup: bool 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ObjectValue: NXOpen.NXObject = ...
    """
    Returns or sets  the condition value use to evaluate this condition for the selected property in condition object.  
    
    If selected property value type is not object, this property should be null, it can be a physics 
    object(Rigid Body, Collision, Constraints, Joints etc.), Function Table, Material etc.
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectValue`` 
    
    :param objValue: 
    :type objValue: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OperatorValue: str = ...
    """
    Returns or sets  the operator of current condition 
    
    <hr>
    
    Getter Method
    
    Signature ``OperatorValue`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``OperatorValue`` 
    
    :param strOperator: 
    :type strOperator: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParentId: str = ...
    """
    Returns or sets  the parent id of condition 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentId`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ParentId`` 
    
    :param parentId: 
    :type parentId: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PhysicsObject: NXOpen.NXObject = ...
    """
    Returns or sets  the conditin object :it can be a physics object(Rigid Body, 
    Collision, Constraints, Joints etc.  
    
    ), FunctionTable. 
    
    <hr>
    
    Getter Method
    
    Signature ``PhysicsObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PhysicsObject`` 
    
    :param physObj: 
    :type physObj: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PropertyId: int = ...
    """
    Returns or sets  the selected property id in physics object 
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PropertyId`` 
    
    :param prop: 
    :type prop: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PropertyName: str = ...
    """
    Returns or sets  the name of selected property 
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PropertyName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SignalObject: NXOpen.NXObject = ...
    """
    Returns or sets  the signal use to evaluate this condition for the selected property in condition object.  
    
    <hr>
    
    Getter Method
    
    Signature ``SignalObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SignalObject`` 
    
    :param signalObj: 
    :type signalObj: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: GanttOperationConditionBuilder = ...  # unknown typename


class DisplayChangerBuilderExecuteModesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DisplayChangerBuilderExecuteModes():
    """
    the execute modes. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "Never execute"
       "Always", "Always execute"
       "OnceOnly", "Only execute once"
    """
    NotSet = 0  # DisplayChangerBuilderExecuteModesMemberType
    Always = 1  # DisplayChangerBuilderExecuteModesMemberType
    OnceOnly = 2  # DisplayChangerBuilderExecuteModesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DisplayChangerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.DisplayChanger` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.DisplayChangerCollection.CreateDisplayChangerBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class ExecuteModes():
        """
        the execute modes. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "Never execute"
           "Always", "Always execute"
           "OnceOnly", "Only execute once"
        """
        NotSet = 0  # DisplayChangerBuilderExecuteModesMemberType
        Always = 1  # DisplayChangerBuilderExecuteModesMemberType
        OnceOnly = 2  # DisplayChangerBuilderExecuteModesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CollisionSensor: SelectCollisionSensor = ...
    """
    Returns  the object select.  
    
    This can be a :py:class:`NXOpen.Mechatronics.CollisionSensor`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionSensor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectCollisionSensor` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Color: int = ...
    """
    Returns or sets  the initial color display property 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExecuteMode: DisplayChangerBuilderExecuteModes = ...
    """
    Returns or sets  the execute mode.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExecuteMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.DisplayChangerBuilderExecuteModes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExecuteMode`` 
    
    :param mode: 
    :type mode: :py:class:`NXOpen.Mechatronics.DisplayChangerBuilderExecuteModes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InitVisibility: bool = ...
    """
    Returns or sets  the initial visibility display property.  
    
    <hr>
    
    Getter Method
    
    Signature ``InitVisibility`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InitVisibility`` 
    
    :param visibility: 
    :type visibility: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Translucency: int = ...
    """
    Returns or sets  the initial translucency display property.  
    
    <hr>
    
    Getter Method
    
    Signature ``Translucency`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Translucency`` 
    
    :param translucency: 
    :type translucency: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: DisplayChangerBuilder = ...  # unknown typename


class AdapterFormulaBuilder(RuntimeFormulaBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.AdapterFormulaBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.AdapterFormulaCollection.CreateAdapterFormulaBuilder`
    
    .. versionadded:: NX8.5.0
    """
    FormulaComment: str = ...
    """
    Returns or sets  the formula comment.  
    
    <hr>
    
    Getter Method
    
    Signature ``FormulaComment`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FormulaComment`` 
    
    :param formulaComment: 
    :type formulaComment: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: AdapterFormulaBuilder = ...  # unknown typename


class Relay(NXOpen.DisplayableObject):
    """
    Represents the Relay. A Relay is able to detect whether the parameter of physics object is between the upper and lower limit.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.RelayBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: Relay = ...  # unknown typename


class SpeedControl(PhysicsConstraint):
    """
    Represents the Speed Control.  
    
    A Speed Control causes objects attached to an axis to move 
    continuously on that axis with a given speed. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.SpeedControlBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: SpeedControl = ...  # unknown typename


class PlanarJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PlanarJoint` builder. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PlanarJointCollection.CreatePlanarJointBuilder`
    
    .. versionadded:: NX11.0.1
    """
    AxisVector: NXOpen.Direction = ...
    """
    Returns or sets  a value that specifies axis vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PointOrigin: NXOpen.Point = ...
    """
    Returns or sets  a value that indicates the origin point.  
    
    <hr>
    
    Getter Method
    
    Signature ``PointOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PointOrigin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PlanarJointBuilder = ...  # unknown typename


class SignalMappingConnectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Signal Connection.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> SignalMappingConnection:
        """
        Finds the :py:class:`NXOpen.Mechatronics.SignalMappingConnection` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.SignalMappingConnection`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.SignalMappingConnection` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.SignalMappingConnection` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateConnectionBuilder(self, connection: SignalMappingConnection) -> SignalMappingConnectionBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder`  
        
        Signature ``CreateConnectionBuilder(connection)`` 
        
        :param connection:  :py:class:`NXOpen.Mechatronics.SignalMappingConnection` to be edited, if None then create a new one  
        :type connection: :py:class:`NXOpen.Mechatronics.SignalMappingConnection` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class LimitSwitchCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Limit Switch.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLimitSwitchBuilder(self, limitSwitch: LimitSwitch) -> LimitSwitchBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.LimitSwitchBuilder`.  
        
        Signature ``CreateLimitSwitchBuilder(limitSwitch)`` 
        
        :param limitSwitch:  :py:class:`NXOpen.Mechatronics.LimitSwitch` to be edited, if None then create a new one  
        :type limitSwitch: :py:class:`NXOpen.Mechatronics.LimitSwitch` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.LimitSwitchBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> LimitSwitch:
        """
        Finds the :py:class:`NXOpen.Mechatronics.LimitSwitch` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.LimitSwitch`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.LimitSwitch` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.LimitSwitch` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SignalConnection(NXOpen.DisplayableObject):
    """
    Represents the Signal connection class.  
    
    Signal connection objects are able
    to connect MCD singals with OPC signals. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: SignalConnection = ...  # unknown typename


class PreventCollisionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Prevent Collision Constraint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePreventCollisionBuilder(self, preventCollision: PreventCollision) -> PreventCollisionBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PreventCollisionBuilder`.  
        
        Signature ``CreatePreventCollisionBuilder(preventCollision)`` 
        
        :param preventCollision:  :py:class:`NXOpen.Mechatronics.PreventCollision` to be edited, if None then create a new one  
        :type preventCollision: :py:class:`NXOpen.Mechatronics.PreventCollision` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PreventCollisionBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> PreventCollision:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PreventCollision` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PreventCollision`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PreventCollision` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PreventCollision` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SignalAdapterCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Signal Adapter.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSignalAdapterBuilder(self, object: SignalAdapter) -> SignalAdapterBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SignalAdapterBuilder`.  
        
        Signature ``CreateSignalAdapterBuilder(object)`` 
        
        :param object:  :py:class:`NXOpen.Mechatronics.SignalAdapter` to be edited, if None then create a new one  
        :type object: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SignalAdapterBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> SignalAdapter:
        """
        Finds the :py:class:`NXOpen.Mechatronics.SignalAdapter` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.SignalAdapter`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.SignalAdapter` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ChangeMaterial(PhysicsConstraint):
    """
    Represents the Change material constraint.  
    
    Change material constraint changes
    the collision properties between a specific pair of bodies. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ChangeMaterialBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: ChangeMaterial = ...  # unknown typename


class CylindricalJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.CylindricalJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.CylindricalJointCollection.CreateCylindricalJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    AnchorPoint: NXOpen.Point = ...
    """
    Returns or sets  the anchor point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPoint`` 
    
    :param anchorPoint: 
    :type anchorPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AngularLowerLimit: NXOpen.Expression = ...
    """
    Returns  the angular lower limit.  
    
    The lower limit setup for joint angular movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularLowerLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AngularUpperLimit: NXOpen.Expression = ...
    """
    Returns  the angular upper limit.  
    
    The upper limit setup for joint angular movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularUpperLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AxisVector: NXOpen.Direction = ...
    """
    Returns or sets  the axis vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableAngularLowerLimit: bool = ...
    """
    Returns or sets  the angular lower limit option.  
    
    If the enable is true, then this joint will be
    applied the lower limit in angular direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableAngularLowerLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableAngularLowerLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableAngularUpperLimit: bool = ...
    """
    Returns or sets  the angular upper limit option.  
    
    If the enable is true, then this joint will be
    applied the upper limit in angular direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableAngularUpperLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableAngularUpperLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableLinearLowerLimit: bool = ...
    """
    Returns or sets  the linear lower limit option.  
    
    If the enable is true, then this joint will be
    applied the lower limit in linear direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableLinearLowerLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableLinearLowerLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableLinearUpperLimit: bool = ...
    """
    Returns or sets  the linear upper limit option.  
    
    If the enable is true, then this joint will be
    applied the upper limit in linear direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableLinearUpperLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableLinearUpperLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LinearLowerLimit: NXOpen.Expression = ...
    """
    Returns  the linear lower limit.  
    
    The lower limit setup for joint linear movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearLowerLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LinearUpperLimit: NXOpen.Expression = ...
    """
    Returns  the linear upper limit.  
    
    The upper limit setup for joint linear movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearUpperLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the offset value.  
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StartAngle: NXOpen.Expression = ...
    """
    Returns  the start angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: CylindricalJointBuilder = ...  # unknown typename


class ChangeMaterialCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Change Material Constraint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateChangeMaterialBuilder(self, changeMaterial: ChangeMaterial) -> ChangeMaterialBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ChangeMaterialBuilder`.  
        
        Signature ``CreateChangeMaterialBuilder(changeMaterial)`` 
        
        :param changeMaterial:  :py:class:`NXOpen.Mechatronics.ChangeMaterial` to be edited, if None then create a new one  
        :type changeMaterial: :py:class:`NXOpen.Mechatronics.ChangeMaterial` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ChangeMaterialBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ChangeMaterial:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ChangeMaterial` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ChangeMaterial`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ChangeMaterial` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ChangeMaterial` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SignalCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Signal.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSignalBuilder(self, symbolTable: Signal) -> SignalBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SignalBuilder`.  
        
        Signature ``CreateSignalBuilder(symbolTable)`` 
        
        :param symbolTable:  :py:class:`NXOpen.Mechatronics.Signal` to be edited, if None then create a new one  
        :type symbolTable: :py:class:`NXOpen.Mechatronics.Signal` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SignalBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> Signal:
        """
        Finds the :py:class:`NXOpen.Mechatronics.Signal` with the given name.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.Signal`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.Signal` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.Signal` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class GearCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Gears.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateGearBuilder(self, gearConstraint: Gear) -> GearBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.GearBuilder`.  
        
        Signature ``CreateGearBuilder(gearConstraint)`` 
        
        :param gearConstraint:  :py:class:`NXOpen.Mechatronics.Gear` to be edited, if None then create a new one  
        :type gearConstraint: :py:class:`NXOpen.Mechatronics.Gear` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.GearBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> Gear:
        """
        Finds the :py:class:`NXOpen.Mechatronics.Gear` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.Gear`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.Gear` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.Gear` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class InclinometerBuilderOutputAngleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InclinometerBuilderOutputAngleType():
    """
    the Angle types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "YawPitchRoll", "yaw/pitch/roll"
       "Euler", "Euler"
    """
    YawPitchRoll = 0  # InclinometerBuilderOutputAngleTypeMemberType
    Euler = 1  # InclinometerBuilderOutputAngleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InclinometerBuilderOutputMeasureTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class InclinometerBuilderOutputMeasureType():
    """
    the Measure types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "MEASURE_UNITLESS"
       "Voltage", "MEASURE_VOLTAGE"
       "Current", "MEASURE_ELECTRIC_CURRENT"
    """
    Constant = 0  # InclinometerBuilderOutputMeasureTypeMemberType
    Voltage = 1  # InclinometerBuilderOutputMeasureTypeMemberType
    Current = 2  # InclinometerBuilderOutputMeasureTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class InclinometerBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.Inclinometer` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.InclinometerCollection.CreateInclinometerBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class OutputAngleType():
        """
        the Angle types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "YawPitchRoll", "yaw/pitch/roll"
           "Euler", "Euler"
        """
        YawPitchRoll = 0  # InclinometerBuilderOutputAngleTypeMemberType
        Euler = 1  # InclinometerBuilderOutputAngleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OutputMeasureType():
        """
        the Measure types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "MEASURE_UNITLESS"
           "Voltage", "MEASURE_VOLTAGE"
           "Current", "MEASURE_ELECTRIC_CURRENT"
        """
        Constant = 0  # InclinometerBuilderOutputMeasureTypeMemberType
        Voltage = 1  # InclinometerBuilderOutputMeasureTypeMemberType
        Current = 2  # InclinometerBuilderOutputMeasureTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AngleType: InclinometerBuilderOutputAngleType = ...
    """
    Returns or sets  the angle type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.InclinometerBuilderOutputAngleType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AngleType`` 
    
    :param angleType: 
    :type angleType: :py:class:`NXOpen.Mechatronics.InclinometerBuilderOutputAngleType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerOutputRange: NXOpen.Expression = ...
    """
    Returns  the lower output range used to scale the Inclinometer data. Its measure type contains constant, voltage, current  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerTrimRange: NXOpen.Expression = ...
    """
    Returns  the lower trim range used to trim the Inclinometer data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MeasureType: InclinometerBuilderOutputMeasureType = ...
    """
    Returns or sets  the measure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeasureType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.InclinometerBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MeasureType`` 
    
    :param measureType: 
    :type measureType: :py:class:`NXOpen.Mechatronics.InclinometerBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Orientation: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the orientation.  
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RigidBody: SelectRigidBody = ...
    """
    Returns  the Rigid Body. This can be a :py:class:`NXOpen.Mechatronics.RigidBody`. 
    
    <hr>
    
    Getter Method
    
    Signature ``RigidBody`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectRigidBody` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperOutputRange: NXOpen.Expression = ...
    """
    Returns  the upper output range used to scale the Inclinometer data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperTrimRange: NXOpen.Expression = ...
    """
    Returns  the upper trim range used to trim the Inclinometer data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseScale: bool = ...
    """
    Returns or sets  the use scale flag, which is used to control if the inclinometer includes scale parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseScale`` 
    
    :param useScale: 
    :type useScale: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseTrim: bool = ...
    """
    Returns or sets  the use trim flag, which is used to control if the inclinometer includes trim parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseTrim`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseTrim`` 
    
    :param useTrim: 
    :type useTrim: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: InclinometerBuilder = ...  # unknown typename


class ObjectInformationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ObjectInformationBuilder`   
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX8.5.0
    """
    
    def GetDescription(self) -> 'list[str]':
        """
        Gets the description.  
        
        Signature ``GetDescription()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    
    
    def SetDescription(self, description: 'list[str]') -> None:
        """
        Sets the description.  
        
        Signature ``SetDescription(description)`` 
        
        :param description: 
        :type description: list of str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ItemID: str = ...
    """
    Returns or sets  the item ID.  
    
    <hr>
    
    Getter Method
    
    Signature ``ItemID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemID`` 
    
    :param itemID: 
    :type itemID: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ItemName: str = ...
    """
    Returns or sets  the name of item.  
    
    <hr>
    
    Getter Method
    
    Signature ``ItemName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ItemTypes: str = ...
    """
    Returns or sets  the item types.  
    
    <hr>
    
    Getter Method
    
    Signature ``ItemTypes`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemTypes`` 
    
    :param itemTypes: 
    :type itemTypes: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RevisionID: str = ...
    """
    Returns or sets  the revision ID.  
    
    <hr>
    
    Getter Method
    
    Signature ``RevisionID`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RevisionID`` 
    
    :param revID: 
    :type revID: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ObjectInformationBuilder = ...  # unknown typename


class HingeJoint(PhysicsJoint):
    """
    Represents the Hinge Joint.  
    
    A Hinge Joint causes objects to 
    be connected along an axis of rotation. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.HingeJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: HingeJoint = ...  # unknown typename


class TagFormBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.TagFormBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.TagFormCollection.CreateTagFormBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParameterStock: ParameterStockBuilder = ...
    """
    Returns  the parameter stock builder that holds the parameter data.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterStock`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ParameterStockBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: TagFormBuilder = ...  # unknown typename


class AdapterSignalCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Adapter Signal.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateAdapterSignalBuilder(self, object: AdapterSignal) -> AdapterSignalBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.AdapterSignalBuilder`.  
        
        Signature ``CreateAdapterSignalBuilder(object)`` 
        
        :param object:  :py:class:`NXOpen.Mechatronics.AdapterSignal` to be edited, if None then create a new one  
        :type object: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.AdapterSignalBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> AdapterSignal:
        """
        Finds the :py:class:`NXOpen.Mechatronics.AdapterSignal` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.AdapterSignal`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.AdapterSignal` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.AdapterSignal` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class MechatronicsManager():
    """
    Contains the collection objects for creating and iterating over Mechatronics Designer System Navigator objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX7.5.1
    """
    
    def LogEntityToDelete(self, object: NXOpen.NXObject) -> None:
        """
        Log entity to delete.  
        
        Use this method to log entity to delete if the root part
        is not work part.
        
        Signature ``LogEntityToDelete(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    @typing.overload
    def ExportModel(self, path: str, bFunction: bool, bLogical: bool) -> None:
        """
        Exports function and(or) logical model to XML file. 
        
        Signature ``ExportModel(path, bFunction, bLogical)`` 
        
        :param path: 
        :type path: str 
        :param bFunction: 
        :type bFunction: bool 
        :param bLogical: 
        :type bLogical: bool 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           Please use another method with the same name instead.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    @typing.overload
    def ExportModel(self, path: str, requirement: bool, function: bool, logic: bool) -> None:
        """
        Exports data model to XML file. 
        
        Signature ``ExportModel(path, requirement, function, logic)`` 
        
        :param path:  The path of XML file  
        :type path: str 
        :param requirement:  Export the Requirement Model?  
        :type requirement: bool 
        :param function:  Export the Function Model?  
        :type function: bool 
        :param logic:  Export the Logical Model?  
        :type logic: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    @typing.overload
    def ImportModel(self, path: str, bFunction: bool, bLogical: bool) -> None:
        """
        Imports function and(or) logical model via XML file. 
        
        Signature ``ImportModel(path, bFunction, bLogical)`` 
        
        :param path: 
        :type path: str 
        :param bFunction: 
        :type bFunction: bool 
        :param bLogical: 
        :type bLogical: bool 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           Please use another method with the same name instead.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    @typing.overload
    def ImportModel(self, path: str, overrideModel: bool, requirement: bool, function: bool, logic: bool) -> None:
        """
        Imports data model from XML file. 
        
        Signature ``ImportModel(path, overrideModel, requirement, function, logic)`` 
        
        :param path:  The path of XML file  
        :type path: str 
        :param overrideModel:  Override the existing model?  
        :type overrideModel: bool 
        :param requirement:  Import the Requirement Model?  
        :type requirement: bool 
        :param function:  Import the Function Model?  
        :type function: bool 
        :param logic:  Import the Logical Model?  
        :type logic: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    @typing.overload
    def SaveToTeamcenter(self) -> None:
        """
        Saves the data model to teamcenter. 
        
        Signature ``SaveToTeamcenter()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    @typing.overload
    def SaveToTeamcenter(self, requirement: bool, function: bool, logic: bool) -> None:
        """
        Saves the data model to teamcenter. 
        
        Signature ``SaveToTeamcenter(requirement, function, logic)`` 
        
        :param requirement:  Save the Requirement Model?  
        :type requirement: bool 
        :param function:  Save the Function Model?  
        :type function: bool 
        :param logic:  Save the Logical Model?  
        :type logic: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    @typing.overload
    def RefreshFromTeamcenter(self, bFunction: bool, bLogical: bool) -> None:
        """
        Refreshes function and(or) logical model from teamcenter. 
        
        Signature ``RefreshFromTeamcenter(bFunction, bLogical)`` 
        
        :param bFunction: 
        :type bFunction: bool 
        :param bLogical: 
        :type bLogical: bool 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           Please use another method with the same name instead.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    @typing.overload
    def RefreshFromTeamcenter(self, requirement: bool, function: bool, logic: bool) -> None:
        """
        Refreshes data model in system navigator from teamcenter. 
        
        Signature ``RefreshFromTeamcenter(requirement, function, logic)`` 
        
        :param requirement:  Refresh the Requirement Model?  
        :type requirement: bool 
        :param function:  Refresh the Function Model?  
        :type function: bool 
        :param logic:  Refresh the Logical Model?  
        :type logic: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def OpenFunctionModel(self, itemMFKID: str, variantRule: str) -> None:
        """
        Opens the specified function model.  
        
        Signature ``OpenFunctionModel(itemMFKID, variantRule)`` 
        
        :param itemMFKID:  The Item MFK ID of root function  
        :type itemMFKID: str 
        :param variantRule:  The variant rule of root function  
        :type variantRule: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def OpenLogicalModel(self, itemMFKID: str, variantRule: str) -> None:
        """
        Opens the specified logical model.  
        
        Signature ``OpenLogicalModel(itemMFKID, variantRule)`` 
        
        :param itemMFKID:  The Item MFK ID of root logical  
        :type itemMFKID: str 
        :param variantRule:  The variant rule of root logical  
        :type variantRule: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def OpenRequirementModel(self, itemMFKID: str, variantRule: str) -> None:
        """
        Opens the specified requirement model.  
        
        Signature ``OpenRequirementModel(itemMFKID, variantRule)`` 
        
        :param itemMFKID:  The Item MFK ID of root requirement  
        :type itemMFKID: str 
        :param variantRule:  The variant rule of root requirement  
        :type variantRule: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddExistingFunction(self, object: SystemObject, itemMFKID: str, instanceName: str) -> None:
        """
        Adds existing function as children of specified object.  
        
        Signature ``AddExistingFunction(object, itemMFKID, instanceName)`` 
        
        :param object:  The parent object  
        :type object: :py:class:`NXOpen.Mechatronics.SystemObject` 
        :param itemMFKID:  The Item MFK ID of child function item  
        :type itemMFKID: str 
        :param instanceName:  The instance name of child function item  
        :type instanceName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddExistingLogical(self, object: SystemObject, itemMFKID: str, instanceName: str) -> None:
        """
        Adds existing logical as children of specified object.  
        
        Signature ``AddExistingLogical(object, itemMFKID, instanceName)`` 
        
        :param object:  The parent object  
        :type object: :py:class:`NXOpen.Mechatronics.SystemObject` 
        :param itemMFKID:  The Item MFK ID of child logical item  
        :type itemMFKID: str 
        :param instanceName:  The instance name of child logical item  
        :type instanceName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddExistingRequirement(self, object: SystemObject, itemMFKID: str, instanceName: str) -> None:
        """
        Adds existing requirement as children of specified object.  
        
        Signature ``AddExistingRequirement(object, itemMFKID, instanceName)`` 
        
        :param object:  The parent object  
        :type object: :py:class:`NXOpen.Mechatronics.SystemObject` 
        :param itemMFKID:  The Item MFK ID of child requirement item  
        :type itemMFKID: str 
        :param instanceName:  The instance name of child requirement item  
        :type instanceName: str 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def PasteTraceLink(self, object: SystemObject) -> None:
        """
        Adds existing requirement as tracelink of specified object.  
        
        Signature ``PasteTraceLink(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX8.5.0
        
        .. deprecated::  NX9.0.0
           Please use :py:meth:`SystemObject.CreateTraceLink` instead.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateSystemRoot(self, rootType: SystemRootType) -> SystemRoot:
        """
        Creates a system root object in specified part.  
        
        Signature ``CreateSystemRoot(rootType)`` 
        
        :param rootType:  The type of system root  
        :type rootType: :py:class:`NXOpen.Mechatronics.SystemRootType` 
        :returns:  Return the system root  
        :rtype: :py:class:`NXOpen.Mechatronics.SystemRoot` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateDependencyCreatorBuilder(self) -> DependencyCreatorBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.DependencyCreatorBuilder` object.  
        
        Signature ``CreateDependencyCreatorBuilder()`` 
        
        :returns:  DependencyCreator Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.DependencyCreatorBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def LoadAsSaved(self) -> str:
        """
        Loads the data models as saved in last time.  
        
        Signature ``LoadAsSaved()`` 
        
        :returns:  Return information if some item revisions are deleted  
        :rtype: str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetSystemRoot(self, rootType: SystemRootType) -> SystemRoot:
        """
        Gets the system root object in the specified part.  
        
        Signature ``GetSystemRoot(rootType)`` 
        
        :param rootType:  The type of system root  
        :type rootType: :py:class:`NXOpen.Mechatronics.SystemRootType` 
        :returns:  Return the system root  
        :rtype: :py:class:`NXOpen.Mechatronics.SystemRoot` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CopySystemObject(self, objects: 'list[SystemObject]') -> None:
        """
        Copies the system engeering objects to the clipboard.  
        
        Signature ``CopySystemObject(objects)`` 
        
        :param objects:  The objects to be copied  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CutSystemObject(self, objects: 'list[SystemObject]') -> None:
        """
        Cuts the system engeering objects.  
        
        Signature ``CutSystemObject(objects)`` 
        
        :param objects:  The objects to be cutted  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def PasteSystemObject(self, parent: SystemObject) -> None:
        """
        Pastes the system engeering objects from the clipboard.  
        
        Signature ``PasteSystemObject(parent)`` 
        
        :param parent: 
        :type parent: :py:class:`NXOpen.Mechatronics.SystemObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    FunctionObjectCollection: FunctionObjectCollection = ...
    """
    Returns the FunctionObjectCollection instance belonging to this part 
    
    Signature ``FunctionObjectCollection`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.FunctionObjectCollection`
    """
    LogicObjectCollection: LogicObjectCollection = ...
    """
    Returns the LogicObjectCollection instance belonging to this part 
    
    Signature ``LogicObjectCollection`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.LogicObjectCollection`
    """
    RequirementCollection: RequirementCollection = ...
    """
    Returns the RequirementCollection instance belonging to this part 
    
    Signature ``RequirementCollection`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.RequirementCollection`
    """
    ElectricalPartCollection: ElectricalPartCollection = ...
    """
    Returns the ElectricalPartCollection instance belonging to this part 
    
    Signature ``ElectricalPartCollection`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ElectricalPartCollection`
    """


class MCDSignalServerConfigurationBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationBuilder`..  
    
    It is used to maintain all server builders for MCD signals. Such as  SHM, TCP/UDP, etc....
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.MCDSignalServerConfigurationCollection.CreateMCDSignalServerConfigurationBuilder`
    
    .. versionadded:: NX12.0.0
    """
    SHMSignalProvider: SHMSignalProviderBuilder = ...
    """
    Returns  the SHMSignalProviderBuilder that holds the configuration for SHMSignalProvider.  
    
    <hr>
    
    Getter Method
    
    Signature ``SHMSignalProvider`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalProviderBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    TCPSignalServer: TCPSignalServerBuilder = ...
    """
    Returns  the TCPSignalServerBuilder that holds the configuration for TCPSignalServer.  
    
    <hr>
    
    Getter Method
    
    Signature ``TCPSignalServer`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TCPSignalServerBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    UDPSignalServer: UDPSignalServerBuilder = ...
    """
    Returns  the UDPSignalServer builder that holds the configuration for UDPSignalServer.  
    
    <hr>
    
    Getter Method
    
    Signature ``UDPSignalServer`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.UDPSignalServerBuilder` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    Null: MCDSignalServerConfigurationBuilder = ...  # unknown typename


class ElectricalPart(NXOpen.NXObject):
    """
    Electrical Part holds the part attributes for communicating
    with EPLAN.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ElectricalPartBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def GetComponent(self) -> NXOpen.Assemblies.Component:
        """
        Get the related :py:class:`NXOpen.Assemblies.Component`.  
        
        Signature ``GetComponent()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetComponent(self, component: NXOpen.Assemblies.Component) -> None:
        """
        Set the related :py:class:`NXOpen.Assemblies.Component`.  
        
        Signature ``SetComponent(component)`` 
        
        :param component: 
        :type component: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Null: ElectricalPart = ...  # unknown typename


class VelocitySensorBuilderAxisJointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VelocitySensorBuilderAxisJointType():
    """
    the Axis Joint types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angular", "Angular"
       "Linear", "Linear"
    """
    Angular = 0  # VelocitySensorBuilderAxisJointTypeMemberType
    Linear = 1  # VelocitySensorBuilderAxisJointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VelocitySensorBuilderOutputMeasureTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VelocitySensorBuilderOutputMeasureType():
    """
    the Measure types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "MEASURE_UNITLESS"
       "Voltage", "MEASURE_VOLTAGE"
       "Current", "MEASURE_ELECTRIC_CURRENT"
    """
    Constant = 0  # VelocitySensorBuilderOutputMeasureTypeMemberType
    Voltage = 1  # VelocitySensorBuilderOutputMeasureTypeMemberType
    Current = 2  # VelocitySensorBuilderOutputMeasureTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VelocitySensorBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.VelocitySensor` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.VelocitySensorCollection.CreateVelocitySensorBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class AxisJointType():
        """
        the Axis Joint types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angular", "Angular"
           "Linear", "Linear"
        """
        Angular = 0  # VelocitySensorBuilderAxisJointTypeMemberType
        Linear = 1  # VelocitySensorBuilderAxisJointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OutputMeasureType():
        """
        the Measure types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "MEASURE_UNITLESS"
           "Voltage", "MEASURE_VOLTAGE"
           "Current", "MEASURE_ELECTRIC_CURRENT"
        """
        Constant = 0  # VelocitySensorBuilderOutputMeasureTypeMemberType
        Voltage = 1  # VelocitySensorBuilderOutputMeasureTypeMemberType
        Current = 2  # VelocitySensorBuilderOutputMeasureTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisJoint: NXOpen.SelectNXObject = ...
    """
    Returns  the joint select. This can be a :py:class:`NXOpen.Mechatronics.HingeJoint`, :py:class:`NXOpen.Mechatronics.SlidingJoint`
    , :py:class:`NXOpen.Mechatronics.CylindricalJoint`, :py:class:`NXOpen.Mechatronics.PointOnCurveJoint`,
    :py:class:`NXOpen.Mechatronics.PositionControl` and :py:class:`NXOpen.Mechatronics.SpeedControl`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AxisType: VelocitySensorBuilderAxisJointType = ...
    """
    Returns or sets  the axis type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.VelocitySensorBuilderAxisJointType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Mechatronics.VelocitySensorBuilderAxisJointType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerOutputRange: NXOpen.Expression = ...
    """
    Returns  the lower output range used to scale the velocity data. Its measure type contains constant, voltage, current  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerTrimRange: NXOpen.Expression = ...
    """
    Returns  the lower trim range used to trim the velocity data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MeasureType: VelocitySensorBuilderOutputMeasureType = ...
    """
    Returns or sets  the measure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeasureType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.VelocitySensorBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MeasureType`` 
    
    :param measureType: 
    :type measureType: :py:class:`NXOpen.Mechatronics.VelocitySensorBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperOutputRange: NXOpen.Expression = ...
    """
    Returns  the upper output range used to scale the velocity data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperTrimRange: NXOpen.Expression = ...
    """
    Returns  the upper trim range used to trim the velocity data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseScale: bool = ...
    """
    Returns or sets  the use scale flag, which is used to control if the velocity sensor includes scale parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseScale`` 
    
    :param useScale: 
    :type useScale: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseTrim: bool = ...
    """
    Returns or sets  the use trim flag, which is used to control if the velocity sensor includes trim parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseTrim`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseTrim`` 
    
    :param useTrim: 
    :type useTrim: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: VelocitySensorBuilder = ...  # unknown typename


class RuntimeNCObject(NXOpen.NXObject):
    """
    Represents the RuntimeNCObject class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.RuntimeNCBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: RuntimeNCObject = ...  # unknown typename


class RuntimeFormulaParameterBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.RuntimeFormulaParameterBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.RuntimeFormulaCollection.CreateRuntimeFormulaParameterBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Alias: str = ...
    """
    Returns or sets  the Alias
    
    <hr>
    
    Getter Method
    
    Signature ``Alias`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Alias`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParameterPhysics: NXOpen.NXObject = ...
    """
    Returns or sets  the ParameterPhysics
    
    <hr>
    
    Getter Method
    
    Signature ``ParameterPhysics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ParameterPhysics`` 
    
    :param praram: 
    :type praram: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RuntimePropertyTag: int = ...
    """
    Returns or sets  the RuntimePropertyIndex
    
    <hr>
    
    Getter Method
    
    Signature ``RuntimePropertyTag`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``RuntimePropertyTag`` 
    
    :param tagProp: 
    :type tagProp: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: RuntimeFormulaParameterBuilder = ...  # unknown typename


class PhysicsPreferenceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Physics Preference.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreatePreferenceBuilder(self, physicsPreference: PhysicsPreference) -> PreferencesBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PreferencesBuilder`.  
        
        Signature ``CreatePreferenceBuilder(physicsPreference)`` 
        
        :param physicsPreference:  :py:class:`NXOpen.Mechatronics.PhysicsPreference` to be edited, if None then create a new one  
        :type physicsPreference: :py:class:`NXOpen.Mechatronics.PhysicsPreference` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.PreferencesBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> PhysicsPreference:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PhysicsPreference` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PhysicsPreference`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PhysicsPreference` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PhysicsPreference` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SignalAdapterBuilderSignalData_Struct():
    """
    Defines the signal data.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.SignalAdapterBuilder.SignalData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    Name                
    <hr>
    
    Field Value
    Type:str
    """
    DataType: SignalAdapterBuilderDataType = ...
    """
    Data Type           
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalAdapterBuilderDataType`
    """
    PortType: SignalAdapterBuilderDataPortType = ...
    """
    Data Port Type      
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalAdapterBuilderDataPortType`
    """
    BoolValue: bool = ...
    """
    Data Value (bool)   
    <hr>
    
    Field Value
    Type:bool
    """
    IntValue: int = ...
    """
    Data Value (int)    
    <hr>
    
    Field Value
    Type:int
    """
    DoubleValue: float = ...
    """
    Data Value (double) 
    <hr>
    
    Field Value
    Type:float
    """
    Unit: NXOpen.Unit = ...
    """
    Data Unit           
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Unit`
    """
    SignalId: int = ...
    """
    Signal Id           
    <hr>
    
    Field Value
    Type:int
    """
    EditedSignal: AdapterSignal = ...
    """
    Edited Signal       
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.AdapterSignal`
    """
    AssignedFormula: AdapterFormula = ...
    """
    Assigned Formula    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.AdapterFormula`
    """
    Formula: str = ...
    """
    Formula Text        
    <hr>
    
    Field Value
    Type:str
    """
    Comment: str = ...
    """
    Comment Text        
    <hr>
    
    Field Value
    Type:str
    """


class CollisionBody(NXOpen.DisplayableObject):
    """
    Represents the Collision Body class.  
    
    A Collision Body defines objects
    to be able to collide with one another. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.CollisionBodyBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: CollisionBody = ...  # unknown typename


class RuntimeBehaviorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Runtime Behavior.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRuntimeBehaviorBuilder(self, codeObj: RuntimeBehavior) -> RuntimeBehaviorBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.RuntimeBehaviorBuilder`.  
        
        Signature ``CreateRuntimeBehaviorBuilder(codeObj)`` 
        
        :param codeObj:  :py:class:`NXOpen.Mechatronics.RuntimeBehavior` to be edited, if None then create a new one  
        :type codeObj: :py:class:`NXOpen.Mechatronics.RuntimeBehavior` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.RuntimeBehaviorBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> RuntimeBehavior:
        """
        Finds the :py:class:`NXOpen.Mechatronics.RuntimeBehavior` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.RuntimeBehavior`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.RuntimeBehavior` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.RuntimeBehavior` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class BallJoint(PhysicsJoint):
    """
    Represents the Ball Joint.  
    
    Objects are connected at a shared point and
    can move all ways rotationally. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.BallJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: BallJoint = ...  # unknown typename


class MATLABSignalConnectionBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[MATLABSignalConnectionBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: MATLABSignalConnectionBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: MATLABSignalConnectionBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> MATLABSignalConnectionBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: MATLABSignalConnectionBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: MATLABSignalConnectionBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[MATLABSignalConnectionBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[MATLABSignalConnectionBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: MATLABSignalConnectionBuilder, object2: MATLABSignalConnectionBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: MATLABSignalConnectionBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: MATLABSignalConnectionBuilderList = ...  # unknown typename


class ExternalConnectionElementBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ExternalConnectionElementBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ExternalConnectionElementBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ExternalConnectionElementBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ExternalConnectionElementBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ExternalConnectionElementBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ExternalConnectionElementBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ExternalConnectionElementBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ExternalConnectionElementBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ExternalConnectionElementBuilder, object2: ExternalConnectionElementBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ExternalConnectionElementBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ExternalConnectionElementBuilderList = ...  # unknown typename


class MATLABSignalConnectionBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MATLABSignalConnectionBuilderDataType():
    """
    Represents the OPC signal data type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "unknown"
       "Int", "integer"
       "Double", "float"
       "Bool", "boolean"
       "String", "string"
    """
    Unknown = 0  # MATLABSignalConnectionBuilderDataTypeMemberType
    Int = 1  # MATLABSignalConnectionBuilderDataTypeMemberType
    Double = 2  # MATLABSignalConnectionBuilderDataTypeMemberType
    Bool = 3  # MATLABSignalConnectionBuilderDataTypeMemberType
    String = 4  # MATLABSignalConnectionBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MATLABSignalConnectionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.MATLABSignalConnectionBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.MATLABSignalConnectionCollection.CreateSignalConnectionBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class DataType():
        """
        Represents the OPC signal data type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", "unknown"
           "Int", "integer"
           "Double", "float"
           "Bool", "boolean"
           "String", "string"
        """
        Unknown = 0  # MATLABSignalConnectionBuilderDataTypeMemberType
        Int = 1  # MATLABSignalConnectionBuilderDataTypeMemberType
        Double = 2  # MATLABSignalConnectionBuilderDataTypeMemberType
        Bool = 3  # MATLABSignalConnectionBuilderDataTypeMemberType
        String = 4  # MATLABSignalConnectionBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AdapterIdentify: SignalAdapter = ...
    """
    Returns or sets  the adapter object.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdapterIdentify`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AdapterIdentify`` 
    
    :param adapterIdentify: 
    :type adapterIdentify: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MATLABSignalName: str = ...
    """
    Returns or sets  the MATLAB signal name.  
    
    <hr>
    
    Getter Method
    
    Signature ``MATLABSignalName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MATLABSignalName`` 
    
    :param matlabsignalName: 
    :type matlabsignalName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MATLABSignalPort: MATLABClientBuilderDataPortType = ...
    """
    Returns or sets  the MATLAB signal port type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MATLABSignalPort`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MATLABClientBuilderDataPortType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MATLABSignalPort`` 
    
    :param matlabSignalPort: 
    :type matlabSignalPort: :py:class:`NXOpen.Mechatronics.MATLABClientBuilderDataPortType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MATLABSignalType: MATLABSignalConnectionBuilderDataType = ...
    """
    Returns or sets  the MATLAB signal type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MATLABSignalType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilderDataType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MATLABSignalType`` 
    
    :param matlabSignalType: 
    :type matlabSignalType: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilderDataType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ModelName: str = ...
    """
    Returns or sets  the matlab model name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ModelName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ModelName`` 
    
    :param modelName: 
    :type modelName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ResultName: str = ...
    """
    Returns or sets  the mapping result name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ResultName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ResultName`` 
    
    :param resultName: 
    :type resultName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SignalIdentify: NXOpen.NXObject = ...
    """
    Returns or sets  the signal object.  
    
    <hr>
    
    Getter Method
    
    Signature ``SignalIdentify`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SignalIdentify`` 
    
    :param signalIdentify: 
    :type signalIdentify: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StreamIO: int = ...
    """
    Returns or sets  the mapping direction.  
    
    0 represent input, 1 represent output 
    
    <hr>
    
    Getter Method
    
    Signature ``StreamIO`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``StreamIO`` 
    
    :param streamIO: 
    :type streamIO: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: MATLABSignalConnectionBuilder = ...  # unknown typename


class SCOUTExportBuilderExportFileTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SCOUTExportBuilderExportFileType():
    """
    Represents the export file type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Csv", "CSV File"
       "Xml", "XML File"
       "Vdi", "VDI File"
    """
    Csv = 0  # SCOUTExportBuilderExportFileTypeMemberType
    Xml = 1  # SCOUTExportBuilderExportFileTypeMemberType
    Vdi = 2  # SCOUTExportBuilderExportFileTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SCOUTExportBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SCOUTExportBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateSCOUTExportBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class ExportFileType():
        """
        Represents the export file type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Csv", "CSV File"
           "Xml", "XML File"
           "Vdi", "VDI File"
        """
        Csv = 0  # SCOUTExportBuilderExportFileTypeMemberType
        Xml = 1  # SCOUTExportBuilderExportFileTypeMemberType
        Vdi = 2  # SCOUTExportBuilderExportFileTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ExportToScout(self, camProfile: NXOpen.Builder) -> None:
        """
        Write elements to SCOUT 44.  
        
        Signature ``ExportToScout(camProfile)`` 
        
        :param camProfile: Cam Profile Builder 
        :type camProfile: :py:class:`NXOpen.Builder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ExportToScoutWithFormula(self, camProfile: CamProfileBuilder) -> None:
        """
        Write elements to SCOUT with more traverses type.  
        
        Signature ``ExportToScoutWithFormula(camProfile)`` 
        
        :param camProfile: Cam Profile Builder 
        :type camProfile: :py:class:`NXOpen.Mechatronics.CamProfileBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ExportToPointXyValue(self, camProfile: CamProfileBuilder) -> None:
        """
        Write elements to Generic XY point.  
        
        Signature ``ExportToPointXyValue(camProfile)`` 
        
        :param camProfile: Cam Profile Builder 
        :type camProfile: :py:class:`NXOpen.Mechatronics.CamProfileBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ExportFile: str = ...
    """
    Returns or sets  the export file name 
    
    <hr>
    
    Getter Method
    
    Signature ``ExportFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExportFile`` 
    
    :param exportFile: 
    :type exportFile: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExportFileFormat: SCOUTExportBuilderExportFileType = ...
    """
    Returns or sets  the export file format.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExportFileFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SCOUTExportBuilderExportFileType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExportFileFormat`` 
    
    :param exportFileFormat: 
    :type exportFileFormat: :py:class:`NXOpen.Mechatronics.SCOUTExportBuilderExportFileType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SCOUTExportBuilder = ...  # unknown typename


class CollisionMaterial(NXOpen.NXObject):
    """
    Represents the Collision Material class.  
    
    A Collision Material defines the material property
    of objects for physics simulation. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.CollisionMaterialBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: CollisionMaterial = ...  # unknown typename


class Gear(Coupling):
    """
    Represents the Gear.  
    
    A Gear causes objects 
    attached to the axes to move in unison at a fixed ratio. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.GearBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: Gear = ...  # unknown typename


class DynamicObjectTableCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of DynamicObjectTable.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDynamicObjectTableBuilder(self, dynamicObjectTable: DynamicObjectTable) -> DynamicObjectTableBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.DynamicObjectTableBuilder`.  
        
        Signature ``CreateDynamicObjectTableBuilder(dynamicObjectTable)`` 
        
        :param dynamicObjectTable:  :py:class:`NXOpen.Mechatronics.DynamicObjectTable` to be edited, if None then create a new one  
        :type dynamicObjectTable: :py:class:`NXOpen.Mechatronics.DynamicObjectTable` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.DynamicObjectTableBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> DynamicObjectTable:
        """
        Finds the :py:class:`NXOpen.Mechatronics.DynamicObjectTable` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.DynamicObjectTable`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.DynamicObjectTable` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.DynamicObjectTable` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ObjectTransformer(NXOpen.DisplayableObject):
    """
    Represents the Object Transformer.  
    
    An Object Transformer defines objects to be able to
    transform copies of rigid objects to another during simulation. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ObjectTransformerBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: ObjectTransformer = ...  # unknown typename


class SpringDamperBuilderAxisJointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpringDamperBuilderAxisJointType():
    """
    the Axis Joint types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angular", "Angular"
       "Linear", "Linear"
    """
    Angular = 0  # SpringDamperBuilderAxisJointTypeMemberType
    Linear = 1  # SpringDamperBuilderAxisJointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpringDamperBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SpringDamper` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.SpringDamperCollection.CreateSpringDamperBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class AxisJointType():
        """
        the Axis Joint types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angular", "Angular"
           "Linear", "Linear"
        """
        Angular = 0  # SpringDamperBuilderAxisJointTypeMemberType
        Linear = 1  # SpringDamperBuilderAxisJointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisJoint: SelectPhysicsJoint = ...
    """
    Returns  the joint select.  
    
    This can be a :py:class:`NXOpen.Mechatronics.HingeJoint`, :py:class:`NXOpen.Mechatronics.SlidingJoint` 
    and :py:class:`NXOpen.Mechatronics.CylindricalJoint`.
    
    <hr>
    
    Getter Method
    
    Signature ``AxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    AxisType: SpringDamperBuilderAxisJointType = ...
    """
    Returns or sets  the axis joint type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SpringDamperBuilderAxisJointType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Mechatronics.SpringDamperBuilderAxisJointType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Damping: NXOpen.Expression = ...
    """
    Returns  the damping.  
    
    <hr>
    
    Getter Method
    
    Signature ``Damping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RelaxedPosition: NXOpen.Expression = ...
    """
    Returns  the relaxed position.  
    
    <hr>
    
    Getter Method
    
    Signature ``RelaxedPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SpringConstant: NXOpen.Expression = ...
    """
    Returns  the spring constant.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpringConstant`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SpringDamperBuilder = ...  # unknown typename


class FunctionObjectCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a :py:class:`NXOpen.Mechatronics.FunctionObjectCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.MechatronicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateFunctionObjectBuilder(self, object: FunctionObject) -> FunctionObjectBuilder:
        """
        Create builder for FunctionObject class  
        
        Signature ``CreateFunctionObjectBuilder(object)`` 
        
        :param object:  :py:class:`NXOpen.Mechatronics.FunctionObject` to be edited, if None then create a new one  
        :type object: :py:class:`NXOpen.Mechatronics.FunctionObject` 
        :returns: :py:class:`NXOpen.Mechatronics.FunctionObjectBuilder` object  
        :rtype: :py:class:`NXOpen.Mechatronics.FunctionObjectBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateAddComponentBuilder(self) -> AddComponentBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.AddComponentBuilder`  
        
        Signature ``CreateAddComponentBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.AddComponentBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> FunctionObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.FunctionObject` object with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the Function object, actually it shall be handle.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.FunctionObject` object with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.FunctionObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def DeleteFunction(self, functionObject: FunctionObject) -> None:
        """
        Dlete a :py:class:`NXOpen.Mechatronics.FunctionObject` object 
        
        Signature ``DeleteFunction(functionObject)`` 
        
        :param functionObject:  :py:class:`NXOpen.Mechatronics.FunctionObject` object with this name.  
        
        :type functionObject: :py:class:`NXOpen.Mechatronics.FunctionObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RenameFunction(self, newName: str, functionObject: FunctionObject) -> None:
        """
        Rename a :py:class:`NXOpen.Mechatronics.FunctionObject` object 
        
        Signature ``RenameFunction(newName, functionObject)`` 
        
        :param newName:  New name of the Function object.  
        
        :type newName: str 
        :param functionObject:  :py:class:`NXOpen.Mechatronics.FunctionObject` object.  
        :type functionObject: :py:class:`NXOpen.Mechatronics.FunctionObject` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class TagTableBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.TagTableBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.TagTableCollection.CreateTagTableBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    def Getform(self) -> TagFormObject:
        """
        Gets selected form :py:class:`NXOpen.Mechatronics.TagFormObject`.  
        
        Signature ``Getform()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetForm(self, form: TagFormObject) -> None:
        """
        Sets the form :py:class:`NXOpen.Mechatronics.TagFormObject` object.  
        
        Signature ``SetForm(form)`` 
        
        :param form: 
        :type form: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GenerateNewValue(self) -> str:
        """
        Generates new value.  
        
        Signature ``GenerateNewValue()`` 
        
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ChangeId(self, oldId: str, newId: str) -> None:
        """
        Changes ID.  
        
        Signature ``ChangeId(oldId, newId)`` 
        
        :param oldId: 
        :type oldId: str 
        :param newId: 
        :type newId: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetIds(self) -> 'list[str]':
        """
        Gets Ids of all values .  
        
        Signature ``GetIds()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetParameterNamesAndTypesByID(self, id: str) -> tuple:
        """
        Gets parameter names and types by value ID.  
        
        Signature ``GetParameterNamesAndTypesByID(id)`` 
        
        :param id: 
        :type id: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (names, types). names is a list of str. types is a list of :py:class:`NXOpen.Mechatronics.ParameterStockBuilderDataType`. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBoolParameter(self, id: str, name: str) -> bool:
        """
        Gets bool parameter value.  
        
        Signature ``GetBoolParameter(id, name)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetIntParameter(self, id: str, name: str) -> int:
        """
        Gets int parameter value.  
        
        Signature ``GetIntParameter(id, name)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetRealParameter(self, id: str, name: str) -> tuple:
        """
        Gets real parameter value.  
        
        Signature ``GetRealParameter(id, name)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (value, unit). value is a float. unit is a :py:class:`NXOpen.Unit`. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetStringParameter(self, id: str, name: str) -> str:
        """
        Gets string parameter value.  
        
        Signature ``GetStringParameter(id, name)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetListParameter(self, id: str, name: str) -> tuple:
        """
        Gets list parameter value.  
        
        Signature ``GetListParameter(id, name)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (values, selectedIndex). values is a list of str. selectedIndex is a int. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def EditBoolParameter(self, id: str, name: str, value: bool) -> None:
        """
        Edits bool parameter value.  
        
        Signature ``EditBoolParameter(id, name, value)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :param value: 
        :type value: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditIntParameter(self, id: str, name: str, value: int) -> None:
        """
        Edits Int parameter.  
        
        Signature ``EditIntParameter(id, name, value)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :param value: 
        :type value: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditRealParameter(self, id: str, name: str, value: float) -> None:
        """
        Edits Real parameter.  
        
        Signature ``EditRealParameter(id, name, value)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :param value: 
        :type value: float 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditStringParameter(self, id: str, name: str, value: str) -> None:
        """
        Edits String parameter.  
        
        Signature ``EditStringParameter(id, name, value)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :param value: 
        :type value: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditListParameter(self, id: str, name: str, newSelectedIndex: int) -> None:
        """
        Edits List parameter.  
        
        Signature ``EditListParameter(id, name, newSelectedIndex)`` 
        
        :param id: 
        :type id: str 
        :param name: 
        :type name: str 
        :param newSelectedIndex: 
        :type newSelectedIndex: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def MoveParameterUp(self, id: str) -> None:
        """
        Move parameter up.  
        
        Signature ``MoveParameterUp(id)`` 
        
        :param id: 
        :type id: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def MoveParameterDown(self, id: str) -> None:
        """
        Move parameter down.  
        
        Signature ``MoveParameterDown(id)`` 
        
        :param id: 
        :type id: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def DeleteParameter(self, id: str) -> None:
        """
        Delete parameter.  
        
        Signature ``DeleteParameter(id)`` 
        
        :param id: 
        :type id: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def DeleteAllParameters(self) -> None:
        """
        Delete all parameters.  
        
        Signature ``DeleteAllParameters()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: TagTableBuilder = ...  # unknown typename


class SensorsActuatorsListBuilderParameterData_Struct():
    """
    Defines the parameter data.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.SensorsActuatorsListBuilder.ParameterData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    Parameter Name Text   
    <hr>
    
    Field Value
    Type:str
    """
    Value: str = ...
    """
    Parameter Value Text  
    <hr>
    
    Field Value
    Type:str
    """


class SensorsActuatorsListBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateSensorsActuatorsListBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class ParameterData():
        """
        Defines the parameter data.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.SensorsActuatorsListBuilder.ParameterData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        Parameter Name Text   
        <hr>
        
        Field Value
        Type:str
        """
        Value: str = ...
        """
        Parameter Value Text  
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetParameterData(self) -> 'list[SensorsActuatorsListBuilderParameterData_Struct]':
        """
        Gets all parameter data.  
        
        Signature ``GetParameterData()`` 
        
        :returns:  Array of Parameter data  
        :rtype: list of :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilderParameterData_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetParameterData(self, parameterData: 'list[SensorsActuatorsListBuilderParameterData_Struct]') -> None:
        """
        Sets all parameter data.  
        
        Signature ``SetParameterData(parameterData)`` 
        
        :param parameterData:  Array of Parameter data  
        :type parameterData: list of :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilderParameterData_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ObjectName: str = ...
    """
    Returns or sets  the object name  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectName`` 
    
    :param objectName: 
    :type objectName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SimitFolder: str = ...
    """
    Returns or sets  the simit folder name  
    
    <hr>
    
    Getter Method
    
    Signature ``SimitFolder`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SimitFolder`` 
    
    :param simitTemplate: 
    :type simitTemplate: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SimitTemplate: str = ...
    """
    Returns or sets  the simit template name  
    
    <hr>
    
    Getter Method
    
    Signature ``SimitTemplate`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SimitTemplate`` 
    
    :param simitTemplate: 
    :type simitTemplate: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SensorsActuatorsListBuilder = ...  # unknown typename


class AnimationConversionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.AnimationConversionBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateAnimationConversionBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    def GetTentativePhysics(self) -> 'list[NXOpen.NXObject]':
        """
        Returns the tentatively converting physics objects.  
        
        Signature ``GetTentativePhysics()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EnableObjectsConversion(self, physics: 'list[NXOpen.NXObject]', enable: bool) -> None:
        """
        Enables the conversion of objects. If it is impossible, the objects will keep unable status.  
        
        Signature ``EnableObjectsConversion(physics, enable)`` 
        
        :param physics: 
        :type physics: list of :py:class:`NXOpen.NXObject` 
        :param enable: 
        :type enable: bool 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Associative: bool = ...
    """
    Returns or sets  the associative.  
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: AnimationConversionBuilder = ...  # unknown typename


class SHMSignalClientBuilderSHMInfo_Struct():
    """
    Represents SHMInstance info definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.SHMSignalClientBuilder.SHMInfo()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    SHM Name          
    <hr>
    
    Field Value
    Type:str
    """
    EndianType: SHMSignalClientBuilderEndianType = ...
    """
    Endian type              
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SHMSignalClientBuilderEndianType`
    """
    Status: str = ...
    """
    Status            
    <hr>
    
    Field Value
    Type:str
    """


class CollisionSensorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Collision Sensor.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCollisionSensorBuilder(self, triggerBody: CollisionSensor) -> CollisionSensorBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.CollisionSensorBuilder`.  
        
        Signature ``CreateCollisionSensorBuilder(triggerBody)`` 
        
        :param triggerBody:  :py:class:`NXOpen.Mechatronics.CollisionSensor` to be edited, if None then create a new one  
        :type triggerBody: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.CollisionSensorBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> CollisionSensor:
        """
        Finds the :py:class:`NXOpen.Mechatronics.CollisionSensor` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.CollisionSensor`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.CollisionSensor` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.CollisionSensor` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ObjectTransformerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Object Transformer.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX10.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateObjectTransformerBuilder(self, objectSrc: ObjectTransformer) -> ObjectTransformerBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ObjectTransformerBuilder`.  
        
        Signature ``CreateObjectTransformerBuilder(objectSrc)`` 
        
        :param objectSrc:  :py:class:`NXOpen.Mechatronics.ObjectTransformer` to be edited, if None then create a new one  
        :type objectSrc: :py:class:`NXOpen.Mechatronics.ObjectTransformer` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ObjectTransformerBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ObjectTransformer:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ObjectTransformer` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ObjectTransformer`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ObjectTransformer` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ObjectTransformer` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class LogicObjectCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a :py:class:`NXOpen.Mechatronics.LogicObjectCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.MechatronicsManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateLogicObjectBuilder(self, object: LogicObject) -> LogicObjectBuilder:
        """
        Create builder for LogicObject class  
        
        Signature ``CreateLogicObjectBuilder(object)`` 
        
        :param object:  :py:class:`NXOpen.Mechatronics.LogicObject` to be edited, if None then create a new one  
        :type object: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :returns: :py:class:`NXOpen.Mechatronics.LogicObjectBuilder` object  
        :rtype: :py:class:`NXOpen.Mechatronics.LogicObjectBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> LogicObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.LogicObject` object with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the Logic object, actually it shall be handle.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.LogicObject` object with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.LogicObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PlcSimAdvClientBuilderTagInfo_Struct():
    """
    Represents PLCTag info definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.PlcSimAdvClientBuilder.TagInfo()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    Name: str = ...
    """
    PLCTag Name          
    <hr>
    
    Field Value
    Type:str
    """
    EAreaType: PlcSimAdvClientBuilderAreaType = ...
    """
    Area type            
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.PlcSimAdvClientBuilderAreaType`
    """
    EIOType: SignalBuilderExternalSignalIOType = ...
    """
    IO type              
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
    """
    EDataType: SignalBuilderDataType = ...
    """
    Data type            
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
    """
    BChecked: bool = ...
    """
    Checked status       
    <hr>
    
    Field Value
    Type:bool
    """


class SignalAdapterBuilderParameterData_Struct():
    """
    Defines the parameter data.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.SignalAdapterBuilder.ParameterData()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    AliasName: str = ...
    """
    Alias Name           
    <hr>
    
    Field Value
    Type:str
    """
    PhysicsObject: NXOpen.NXObject = ...
    """
    Physics Object       
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    PhysicsPropTag: int = ...
    """
    Physics Property Tag 
    <hr>
    
    Field Value
    Type:int
    """
    AssignedFormula: AdapterFormula = ...
    """
    Assigned Formula     
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.AdapterFormula`
    """
    Formula: str = ...
    """
    Formula Text         
    <hr>
    
    Field Value
    Type:str
    """
    Comment: str = ...
    """
    Comment Text         
    <hr>
    
    Field Value
    Type:str
    """


class PneumaticCylinderBuilderOutputRodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PneumaticCylinderBuilderOutputRodType():
    """
    the Rod types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Single", "single rod"
       "Double", "double rod"
    """
    Single = 0  # PneumaticCylinderBuilderOutputRodTypeMemberType
    Double = 1  # PneumaticCylinderBuilderOutputRodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PneumaticCylinderBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PneumaticCylinder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PneumaticCylinderCollection.CreatePneumaticCylinderBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class OutputRodType():
        """
        the Rod types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Single", "single rod"
           "Double", "double rod"
        """
        Single = 0  # PneumaticCylinderBuilderOutputRodTypeMemberType
        Double = 1  # PneumaticCylinderBuilderOutputRodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisJoint: SelectPhysicsJoint = ...
    """
    Returns  the Axis Joint. This can be a :py:class:`PhysicsJoint`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    GasR: NXOpen.Expression = ...
    """
    Returns  the specific gas constant Rbar.  
    
    <hr>
    
    Getter Method
    
    Signature ``GasR`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Kappa: NXOpen.Expression = ...
    """
    Returns  constant Kappa, the ratio of specific heats.  
    
    <hr>
    
    Getter Method
    
    Signature ``Kappa`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PistonDiameter: NXOpen.Expression = ...
    """
    Returns  the diameter of the piston.  
    
    <hr>
    
    Getter Method
    
    Signature ``PistonDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PistonRodDiameter: NXOpen.Expression = ...
    """
    Returns  the diameter of the piston rod.  
    
    <hr>
    
    Getter Method
    
    Signature ``PistonRodDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PressureA: NXOpen.Expression = ...
    """
    Returns  the initial pressure of chamber A.  
    
    <hr>
    
    Getter Method
    
    Signature ``PressureA`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PressureB: NXOpen.Expression = ...
    """
    Returns  the initial pressure of chamber B.  
    
    <hr>
    
    Getter Method
    
    Signature ``PressureB`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RodType: PneumaticCylinderBuilderOutputRodType = ...
    """
    Returns or sets  the rod type.  
    
    <hr>
    
    Getter Method
    
    Signature ``RodType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PneumaticCylinderBuilderOutputRodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``RodType`` 
    
    :param rodType: 
    :type rodType: :py:class:`NXOpen.Mechatronics.PneumaticCylinderBuilderOutputRodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StrokeLength: NXOpen.Expression = ...
    """
    Returns  the overall stroke length of the cylinder.  
    
    <hr>
    
    Getter Method
    
    Signature ``StrokeLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Temperature: NXOpen.Expression = ...
    """
    Returns  the gas temperature (assumed constant).  
    
    <hr>
    
    Getter Method
    
    Signature ``Temperature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    VolumeExtendA: NXOpen.Expression = ...
    """
    Returns  the length of the volume extension on chamber A.  
    
    <hr>
    
    Getter Method
    
    Signature ``VolumeExtendA`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    VolumeExtendB: NXOpen.Expression = ...
    """
    Returns  the length of the volume extension on chamber B.  
    
    <hr>
    
    Getter Method
    
    Signature ``VolumeExtendB`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PneumaticCylinderBuilder = ...  # unknown typename


class SymbolTable(NXOpen.NXObject):
    """
    Represents the SymbolTable class  
    
    SymbolTable contains Symbols that are used for Signal creation. Each Signal has to be assigned to 
    an unique Symbol from Symbol Table. 
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.SymbolTableBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: SymbolTable = ...  # unknown typename


class PhysicsManager():
    """
    A manager to deal with all physics objects.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX7.5.1
    """
    
    def CreatePreferenceBuilder(self) -> PreferencesBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.PreferencesBuilder` object.  
        
        Signature ``CreatePreferenceBuilder()`` 
        
        :returns:  Mechatronics Preferences builder 
        :rtype: :py:class:`NXOpen.Mechatronics.PreferencesBuilder` 
        
        .. versionadded:: NX7.5.1
        
        .. deprecated::  NX9.0.0
           Use :py:meth:`NXOpen.Mechatronics.PhysicsPreferenceCollection.CreatePreferenceBuilder` instead
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateReplacePhysicsBuilder(self) -> ReplacePhysicsBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ReplacePhysicsBuilder` object.  
        
        Signature ``CreateReplacePhysicsBuilder()`` 
        
        :returns:  Mechatronics Replace Physics builder 
        :rtype: :py:class:`NXOpen.Mechatronics.ReplacePhysicsBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateOpcclientBuilder(self) -> OPCClientBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.OPCClientBuilder` object.  
        
        Signature ``CreateOpcclientBuilder()`` 
        
        :returns:  OPCClient Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.OPCClientBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateMatlabclientBuilder(self) -> MATLABClientBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.MATLABClientBuilder` object.  
        
        Signature ``CreateMatlabclientBuilder()`` 
        
        :returns:  MATLABClient Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.MATLABClientBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RemapPhysicsReferences(self, replacedPartOcc: NXOpen.Assemblies.Component) -> None:
        """
        Remap the physics references in context
        
        Signature ``RemapPhysicsReferences(replacedPartOcc)`` 
        
        :param replacedPartOcc:  :py:class:`NXOpen.Assemblies.Component` object.  
        :type replacedPartOcc: :py:class:`NXOpen.Assemblies.Component` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def LogPhysicsToDelete(self, physicsObject: NXOpen.NXObject) -> None:
        """
        Log to delete
        
        Signature ``LogPhysicsToDelete(physicsObject)`` 
        
        :param physicsObject: 
        :type physicsObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetName(self, physicsObject: NXOpen.NXObject, name: str) -> None:
        """
        Physics to rename
        
        Signature ``SetName(physicsObject, name)`` 
        
        :param physicsObject: 
        :type physicsObject: :py:class:`NXOpen.NXObject` 
        :param name:  the new name 
        :type name: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ExportToCsv(self, path: str, signal: bool, connection: bool) -> None:
        """
        Export MCD Signals, OPC Signal Connections and(or) SHM Signal Connections to csv file
        
        Signature ``ExportToCsv(path, signal, connection)`` 
        
        :param path: 
        :type path: str 
        :param signal:  If true MCD Signals will be export to csv file. 
        :type signal: bool 
        :param connection:  If true Signal Connections will be export to csv file. 
        :type connection: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ExportSignalsToCsv(self, path: str, names: 'list[str]', owners: 'list[str]', ioTypes: 'list[SignalBuilderIOType]', dataTypes: 'list[SignalBuilderDataType]', bValues: 'list[bool]', nValues: 'list[int]', dValues: 'list[float]', connectionNames: 'list[str]', signal: bool, connection: bool) -> None:
        """
        Export specified MCD Signals, OPC Signal Connections and(or) SHM Signal Connections to csv file.  
        
        Signature ``ExportSignalsToCsv(path, names, owners, ioTypes, dataTypes, bValues, nValues, dValues, connectionNames, signal, connection)`` 
        
        :param path: 
        :type path: str 
        :param names: 
        :type names: list of str 
        :param owners: 
        :type owners: list of str 
        :param ioTypes: 
        :type ioTypes: list of :py:class:`NXOpen.Mechatronics.SignalBuilderIOType` 
        :param dataTypes: 
        :type dataTypes: list of :py:class:`NXOpen.Mechatronics.SignalBuilderDataType` 
        :param bValues: 
        :type bValues: list of bool 
        :param nValues: 
        :type nValues: list of int 
        :param dValues: 
        :type dValues: list of float 
        :param connectionNames: 
        :type connectionNames: list of str 
        :param signal: 
        :type signal: bool 
        :param connection: 
        :type connection: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ExportToTxt(self, path: str) -> None:
        """
        Export MCD Signals to txt file
        
        Signature ``ExportToTxt(path)`` 
        
        :param path: 
        :type path: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ExportSignalsToTxt(self, path: str, names: 'list[str]', ioTypes: 'list[SignalBuilderIOType]', dataTypes: 'list[SignalBuilderDataType]', bValues: 'list[bool]', nValues: 'list[int]', dValues: 'list[float]', addresses: 'list[str]', comments: 'list[str]') -> None:
        """
        Export specified MCD Signals to txt file (compatible with SIMIT format).  
        
        Signature ``ExportSignalsToTxt(path, names, ioTypes, dataTypes, bValues, nValues, dValues, addresses, comments)`` 
        
        :param path: 
        :type path: str 
        :param names: 
        :type names: list of str 
        :param ioTypes: 
        :type ioTypes: list of :py:class:`NXOpen.Mechatronics.SignalBuilderIOType` 
        :param dataTypes: 
        :type dataTypes: list of :py:class:`NXOpen.Mechatronics.SignalBuilderDataType` 
        :param bValues: 
        :type bValues: list of bool 
        :param nValues: 
        :type nValues: list of int 
        :param dValues: 
        :type dValues: list of float 
        :param addresses: 
        :type addresses: list of str 
        :param comments: 
        :type comments: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ExportSignalsToExcel(self, path: str, names: 'list[str]', ioTypes: 'list[SignalBuilderIOType]', dataTypes: 'list[SignalBuilderDataType]', bValues: 'list[bool]', nValues: 'list[int]', dValues: 'list[float]', addresses: 'list[str]', comments: 'list[str]') -> None:
        """
        Export specified MCD Signals to excel file (compatible with TIA portal format).  
        
        Signature ``ExportSignalsToExcel(path, names, ioTypes, dataTypes, bValues, nValues, dValues, addresses, comments)`` 
        
        :param path: 
        :type path: str 
        :param names: 
        :type names: list of str 
        :param ioTypes: 
        :type ioTypes: list of :py:class:`NXOpen.Mechatronics.SignalBuilderIOType` 
        :param dataTypes: 
        :type dataTypes: list of :py:class:`NXOpen.Mechatronics.SignalBuilderDataType` 
        :param bValues: 
        :type bValues: list of bool 
        :param nValues: 
        :type nValues: list of int 
        :param dValues: 
        :type dValues: list of float 
        :param addresses: 
        :type addresses: list of str 
        :param comments: 
        :type comments: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateECADExportBuilder(self) -> ECADExportBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ECADExportBuilder` object.  
        
        Signature ``CreateECADExportBuilder()`` 
        
        :returns:  ECADExport Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.ECADExportBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateECADImportBuilder(self) -> ECADImportBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ECADImportBuilder` object.  
        
        Signature ``CreateECADImportBuilder()`` 
        
        :returns:  ECADImport Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.ECADImportBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateSignalMappingBuilder(self) -> SignalMappingBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SignalMappingBuilder`.  
        
        Signature ``CreateSignalMappingBuilder()`` 
        
        :returns:  SignalMapping Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.SignalMappingBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateSHMConfigurationBuilder(self) -> SHMConfigurationBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SHMConfigurationBuilder` object.  
        
        Signature ``CreateSHMConfigurationBuilder()`` 
        
        :returns:  SHMConfiguration Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.SHMConfigurationBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateConvertFromMtbbuilder(self) -> ConvertFromMTBBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ConvertFromMTBBuilder` object.  
        
        Signature ``CreateConvertFromMtbbuilder()`` 
        
        :returns:  ConvertFromMTB Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.ConvertFromMTBBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateSCOUTExportBuilder(self) -> SCOUTExportBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SCOUTExportBuilder` object.  
        
        Signature ``CreateSCOUTExportBuilder()`` 
        
        :returns:  SCOUTExport Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.SCOUTExportBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateSCOUTImportBuilder(self) -> SCOUTImportBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SCOUTImportBuilder` object.  
        
        Signature ``CreateSCOUTImportBuilder()`` 
        
        :returns:  SCOUTImport Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.SCOUTImportBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateChangeOwnerBuilder(self) -> ChangeOwnerBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ChangeOwnerBuilder` object.  
        
        Signature ``CreateChangeOwnerBuilder()`` 
        
        :returns:  ChangeOwner Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.ChangeOwnerBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateExportSensorsActuatorsBuilder(self) -> ExportSensorsActuatorsBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ExportSensorsActuatorsBuilder` object.  
        
        Signature ``CreateExportSensorsActuatorsBuilder()`` 
        
        :returns:  ExportSensorsActuators Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.ExportSensorsActuatorsBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateSensorsActuatorsListBuilder(self) -> SensorsActuatorsListBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` object.  
        
        Signature ``CreateSensorsActuatorsListBuilder()`` 
        
        :returns:  SensorsActuatorsList Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.SensorsActuatorsListBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    @typing.overload
    def AdoptAssemblyJoint(self) -> None:
        """
        Adopts all the :py:class:`NXOpen.Positioning.Constraint` in part to :py:class:`NXOpen.Mechatronics.PhysicsJoint`
        and :py:class:`NXOpen.Mechatronics.PhysicsConstraint`.  
        
        Signature ``AdoptAssemblyJoint()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    @typing.overload
    def AdoptAssemblyJoint(self, joint: NXOpen.Positioning.Constraint) -> None:
        """
        <summary> Adopts one :py:class:`NXOpen.Positioning.Constraint` to :py:class:`NXOpen.Mechatronics.PhysicsJoint`
        and(or) :py:class:`NXOpen.Mechatronics.PhysicsConstraint`. </summary> 
        
        Signature ``AdoptAssemblyJoint(joint)`` 
        
        :param joint:  The :py:class:`NXOpen.Positioning.Constraint` to be adopted. 
        :type joint: :py:class:`NXOpen.Positioning.Constraint` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def QueryAdoption(self, joint: NXOpen.Positioning.Constraint) -> NXOpen.DisplayableObject:
        """
        Returns the adoption of the :py:class:`NXOpen.Positioning.Constraint`.  
        
        Signature ``QueryAdoption(joint)`` 
        
        :param joint: 
        :type joint: :py:class:`NXOpen.Positioning.Constraint` 
        :returns:  The adoption can be :py:class:`NXOpen.Mechatronics.PhysicsJoint`
        or :py:class:`NXOpen.Mechatronics.PhysicsConstraint`  
        :rtype: :py:class:`NXOpen.DisplayableObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateChainJointBuilder(self) -> ChainJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ChainJointBuilder` object.  
        
        Signature ``CreateChainJointBuilder()`` 
        
        :returns:  ChainJoint Builder  
        :rtype: :py:class:`NXOpen.Mechatronics.ChainJointBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateAnimationConversionBuilder(self) -> AnimationConversionBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.AnimationConversionBuilder` object.  
        
        Signature ``CreateAnimationConversionBuilder()`` 
        
        :returns:  AnimationConversion Builder 
        :rtype: :py:class:`NXOpen.Mechatronics.AnimationConversionBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    RigidBodies: RigidBodyCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.RigidBodyCollection` belonging to this part 
    
    Signature ``RigidBodies`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.RigidBodyCollection`
    """
    CollisionBodies: CollisionBodyCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.CollisionBodyCollection` belonging to this part 
    
    Signature ``CollisionBodies`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionBodyCollection`
    """
    MotionProfiles: MotionProfileCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.MotionProfileCollection` belonging to this part 
    
    Signature ``MotionProfiles`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MotionProfileCollection`
    """
    RuntimeBehaviors: RuntimeBehaviorCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.RuntimeBehaviorCollection` belonging to this part 
    
    Signature ``RuntimeBehaviors`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.RuntimeBehaviorCollection`
    """
    RuntimeNCs: RuntimeNCCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.RuntimeNCCollection` belonging to this part 
    
    Signature ``RuntimeNCs`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.RuntimeNCCollection`
    """
    CollisionMaterials: CollisionMaterialCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.CollisionMaterialCollection` belonging to this part 
    
    Signature ``CollisionMaterials`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionMaterialCollection`
    """
    TransportSurfaces: TransportSurfaceCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.TransportSurfaceCollection` belonging to this part 
    
    Signature ``TransportSurfaces`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TransportSurfaceCollection`
    """
    HingeJoints: HingeJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.HingeJointCollection` belonging to this part 
    
    Signature ``HingeJoints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.HingeJointCollection`
    """
    SpeedControls: SpeedControlCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.SpeedControlCollection` belonging to this part 
    
    Signature ``SpeedControls`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SpeedControlCollection`
    """
    PositionControls: PositionControlCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PositionControlCollection` belonging to this part 
    
    Signature ``PositionControls`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PositionControlCollection`
    """
    ForceTorqueControls: ForceTorqueControlCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ForceTorqueControlCollection` belonging to this part 
    
    Signature ``ForceTorqueControls`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ForceTorqueControlCollection`
    """
    SlidingJoints: SlidingJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.SlidingJointCollection` belonging to this part 
    
    Signature ``SlidingJoints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SlidingJointCollection`
    """
    CollisionSensors: CollisionSensorCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.CollisionSensorCollection` belonging to this part 
    
    Signature ``CollisionSensors`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionSensorCollection`
    """
    CylindricalJoints: CylindricalJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.CylindricalJointCollection` belonging to this part 
    
    Signature ``CylindricalJoints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CylindricalJointCollection`
    """
    ScrewJoints: ScrewJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ScrewJointCollection` belonging to this part 
    
    Signature ``ScrewJoints`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ScrewJointCollection`
    """
    PlanarJoints: PlanarJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PlanarJointCollection` belonging to this part 
    
    Signature ``PlanarJoints`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PlanarJointCollection`
    """
    RackPinions: RackPinionCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.RackPinionCollection` belonging to this part 
    
    Signature ``RackPinions`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.RackPinionCollection`
    """
    FixedJoints: FixedJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.FixedJointCollection` belonging to this part 
    
    Signature ``FixedJoints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.FixedJointCollection`
    """
    BallJoints: BallJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.BallJointCollection` belonging to this part 
    
    Signature ``BallJoints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.BallJointCollection`
    """
    AngularSpringJoints: AngularSpringJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.AngularSpringJointCollection` belonging to this part 
    
    Signature ``AngularSpringJoints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.AngularSpringJointCollection`
    """
    LinearSpringJoints: LinearSpringJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.LinearSpringJointCollection` belonging to this part 
    
    Signature ``LinearSpringJoints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.LinearSpringJointCollection`
    """
    Gears: GearCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.GearCollection` belonging to this part 
    
    Signature ``Gears`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GearCollection`
    """
    ThreeJointCouplers: ThreeJointCouplerCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ThreeJointCouplerCollection` belonging to this part 
    
    Signature ``ThreeJointCouplers`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ThreeJointCouplerCollection`
    """
    Cams: CamCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.CamCollection` belonging to this part 
    
    Signature ``Cams`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamCollection`
    """
    AngularLimitJoints: AngularLimitJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.AngularLimitJointCollection` belonging to this part 
    
    Signature ``AngularLimitJoints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.AngularLimitJointCollection`
    """
    LinearLimitJoints: LinearLimitJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.LinearLimitJointCollection` belonging to this part 
    
    Signature ``LinearLimitJoints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.LinearLimitJointCollection`
    """
    BreakingConstraints: BreakingConstraintCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.BreakingConstraintCollection` belonging to this part 
    
    Signature ``BreakingConstraints`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.BreakingConstraintCollection`
    """
    PreventCollisions: PreventCollisionCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PreventCollisionCollection` belonging to this part 
    
    Signature ``PreventCollisions`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PreventCollisionCollection`
    """
    ChangeMaterials: ChangeMaterialCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ChangeMaterialCollection` belonging to this part 
    
    Signature ``ChangeMaterials`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ChangeMaterialCollection`
    """
    VirtualAxis: VirtualAxisCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.VirtualAxisCollection` belonging to this part 
    
    Signature ``VirtualAxis`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.VirtualAxisCollection`
    """
    ObjectSources: ObjectSourceCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ObjectSourceCollection` belonging to this part 
    
    Signature ``ObjectSources`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ObjectSourceCollection`
    """
    ObjectSinks: ObjectSinkCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ObjectSinkCollection` belonging to this part 
    
    Signature ``ObjectSinks`` 
    
    .. versionadded:: NX7.5.1
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ObjectSinkCollection`
    """
    GraphControls: GraphControlCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.GraphControlCollection` belonging to this part 
    
    Signature ``GraphControls`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GraphControlCollection`
    """
    ExternalConnections: ExternalConnectionCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ExternalConnectionCollection` belonging to this part 
    
    Signature ``ExternalConnections`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnectionCollection`
    """
    RuntimeFormulas: RuntimeFormulaCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.RuntimeFormulaCollection` belonging to this part 
    
    Signature ``RuntimeFormulas`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.RuntimeFormulaCollection`
    """
    SignalAdapters: SignalAdapterCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.SignalAdapterCollection` belonging to this part 
    
    Signature ``SignalAdapters`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalAdapterCollection`
    """
    AdapterSignals: AdapterSignalCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.AdapterSignalCollection` belonging to this part 
    
    Signature ``AdapterSignals`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.AdapterSignalCollection`
    """
    AdapterFormulas: AdapterFormulaCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.AdapterFormulaCollection` belonging to this part 
    
    Signature ``AdapterFormulas`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.AdapterFormulaCollection`
    """
    Signals: SignalCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.SignalCollection` belonging to this part 
    
    Signature ``Signals`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalCollection`
    """
    ExpressionBlocks: ExpressionBlockCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ExpressionBlockCollection` belonging to this part 
    
    Signature ``ExpressionBlocks`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ExpressionBlockCollection`
    """
    ExpressionBlockFormulas: ExpressionBlockFormulaCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ExpressionBlockFormulaCollection` belonging to this part 
    
    Signature ``ExpressionBlockFormulas`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ExpressionBlockFormulaCollection`
    """
    SignalConnections: SignalConnectionCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.SignalConnectionCollection` belonging to this part 
    
    Signature ``SignalConnections`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalConnectionCollection`
    """
    SHMSignalConnections: SHMSignalConnectionCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.SHMSignalConnectionCollection` belonging to this part 
    
    Signature ``SHMSignalConnections`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionCollection`
    """
    MATLABSignalConnections: MATLABSignalConnectionCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionCollection` belonging to this part 
    
    Signature ``MATLABSignalConnections`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionCollection`
    """
    SignalMappingConnections: SignalMappingConnectionCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.SignalMappingConnectionCollection` belonging to this part 
    
    Signature ``SignalMappingConnections`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionCollection`
    """
    PointOnCurveJoints: PointOnCurveJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PointOnCurveJointCollection` belonging to this part 
    
    Signature ``PointOnCurveJoints`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PointOnCurveJointCollection`
    """
    CurveOnCurveJoints: CurveOnCurveJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.CurveOnCurveJointCollection` belonging to this part 
    
    Signature ``CurveOnCurveJoints`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CurveOnCurveJointCollection`
    """
    PhysicsPreference: PhysicsPreferenceCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PhysicsPreferenceCollection` belonging to this part 
    
    Signature ``PhysicsPreference`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PhysicsPreferenceCollection`
    """
    PMNavFolderObject: PMNavFolderObjectCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PMNavFolderObjectCollection` belonging to this part 
    
    Signature ``PMNavFolderObject`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PMNavFolderObjectCollection`
    """
    PMNavFolderLocator: PMNavFolderLocatorCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PMNavFolderLocatorCollection` belonging to this part 
    
    Signature ``PMNavFolderLocator`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PMNavFolderLocatorCollection`
    """
    CamProfiles: CamProfileCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.CamProfileCollection` belonging to this part 
    
    Signature ``CamProfiles`` 
    
    .. versionadded:: NX9.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamProfileCollection`
    """
    ObjectTransformer: ObjectTransformerCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ObjectTransformerCollection` belonging to this part 
    
    Signature ``ObjectTransformer`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ObjectTransformerCollection`
    """
    SpringDampers: SpringDamperCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.SpringDamperCollection` belonging to this part 
    
    Signature ``SpringDampers`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SpringDamperCollection`
    """
    TagForms: TagFormCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.TagFormCollection` belonging to this part 
    
    Signature ``TagForms`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TagFormCollection`
    """
    TagTables: TagTableCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.TagTableCollection` belonging to this part 
    
    Signature ``TagTables`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TagTableCollection`
    """
    ReadWriteDevices: ReadWriteDeviceCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ReadWriteDeviceCollection` belonging to this part 
    
    Signature ``ReadWriteDevices`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ReadWriteDeviceCollection`
    """
    DisplayChanger: DisplayChangerCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.DisplayChangerCollection` belonging to this part 
    
    Signature ``DisplayChanger`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.DisplayChangerCollection`
    """
    PathConstraintJoints: PathConstraintJointCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PathConstraintJointCollection` belonging to this part 
    
    Signature ``PathConstraintJoints`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PathConstraintJointCollection`
    """
    SymbolTables: SymbolTableCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.SymbolTableCollection` belonging to this part 
    
    Signature ``SymbolTables`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SymbolTableCollection`
    """
    DistanceSensors: DistanceSensorCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.DistanceSensorCollection` belonging to this part  
    
    Signature ``DistanceSensors`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.DistanceSensorCollection`
    """
    PositionSensors: PositionSensorCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PositionSensorCollection` belonging to this part  
    
    Signature ``PositionSensors`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PositionSensorCollection`
    """
    VelocitySensors: VelocitySensorCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.VelocitySensorCollection` belonging to this part  
    
    Signature ``VelocitySensors`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.VelocitySensorCollection`
    """
    GenericSensors: GenericSensorCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.GenericSensorCollection` belonging to this part  
    
    Signature ``GenericSensors`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GenericSensorCollection`
    """
    LimitSwitchs: LimitSwitchCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.LimitSwitchCollection` belonging to this part  
    
    Signature ``LimitSwitchs`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.LimitSwitchCollection`
    """
    Relays: RelayCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.RelayCollection` belonging to this part  
    
    Signature ``Relays`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.RelayCollection`
    """
    Inclinometers: InclinometerCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.InclinometerCollection` belonging to this part  
    
    Signature ``Inclinometers`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.InclinometerCollection`
    """
    Accelerometers: AccelerometerCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.AccelerometerCollection` belonging to this part  
    
    Signature ``Accelerometers`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.AccelerometerCollection`
    """
    PneumaticCylinders: PneumaticCylinderCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PneumaticCylinderCollection` belonging to this part  
    
    Signature ``PneumaticCylinders`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PneumaticCylinderCollection`
    """
    PneumaticValves: PneumaticValveCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PneumaticValveCollection` belonging to this part  
    
    Signature ``PneumaticValves`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PneumaticValveCollection`
    """
    HydraulicCylinders: HydraulicCylinderCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.HydraulicCylinderCollection` belonging to this part  
    
    Signature ``HydraulicCylinders`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.HydraulicCylinderCollection`
    """
    HydraulicValves: HydraulicValveCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.PneumaticValveCollection` belonging to this part  
    
    Signature ``HydraulicValves`` 
    
    .. versionadded:: NX11.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.HydraulicValveCollection`
    """
    TransmitterEntry: TransmitterEntryCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.TransmitterEntryCollection` belonging to this part  
    
    Signature ``TransmitterEntry`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TransmitterEntryCollection`
    """
    TransmitterExit: TransmitterExitCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.TransmitterExitCollection` belonging to this part  
    
    Signature ``TransmitterExit`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TransmitterExitCollection`
    """
    AlignBodies: AlignBodyCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.AlignBodyCollection` belonging to this part 
    
    Signature ``AlignBodies`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.AlignBodyCollection`
    """
    DynamicObjectTables: DynamicObjectTableCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.DynamicObjectTableCollection` belonging to this part 
    
    Signature ``DynamicObjectTables`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.DynamicObjectTableCollection`
    """
    Tracers: TracerCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.TracerCollection` belonging to this part  
    
    Signature ``Tracers`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TracerCollection`
    """
    ExternalSignalConfigurations: ExternalSignalConfigurationCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationCollection` belonging to this part  
    
    Signature ``ExternalSignalConfigurations`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ExternalSignalConfigurationCollection`
    """
    MCDSignalServerConfigurations: MCDSignalServerConfigurationCollection = ...
    """
    Returns the :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationCollection` belonging to this part  
    
    Signature ``MCDSignalServerConfigurations`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationCollection`
    """


class Inclinometer(NXOpen.DisplayableObject):
    """
    Represents the Inclinometer. An Inclinometer is able to detect the angle of the rigid body.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.InclinometerBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: Inclinometer = ...  # unknown typename


class HingeJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.HingeJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.HingeJointCollection.CreateHingeJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    AxisVector: NXOpen.Direction = ...
    """
    Returns or sets  the axis vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableLowerLimit: bool = ...
    """
    Returns or sets  the lower limit option.  
    
    If the enable is true, then the joint will be applied
    a lower limit in movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableLowerLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableLowerLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableUpperLimit: bool = ...
    """
    Returns or sets  the upper limit option.  
    
    If the enable is true, then the joint will be applied
    an upper limit in movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableUpperLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableUpperLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerLimit: NXOpen.Expression = ...
    """
    Returns  the lower limit.  
    
    The lower limit setup for joint movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``LowerLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the origin point.  
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StartAngle: NXOpen.Expression = ...
    """
    Returns  the start angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperLimit: NXOpen.Expression = ...
    """
    Returns  the upper limit.  
    
    The upper limit setup for joint movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``UpperLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: HingeJointBuilder = ...  # unknown typename


class ProxyOverrideObjectCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Proxy Override Object.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateBuilder(self, proxyObjectOcc: NXOpen.NXObject) -> ProxyOverrideObjectBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ProxyOverrideObjectBuilder`.  
        
        Signature ``CreateBuilder(proxyObjectOcc)`` 
        
        :param proxyObjectOcc:  input occurrence of the proxy definition object or proxy override object. NULL_TAG is not allowed  
        :type proxyObjectOcc: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ProxyOverrideObjectBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateProxyObjectParameterBuilder(self) -> ProxyObjectParameterBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder`  
        
        Signature ``CreateProxyObjectParameterBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ProxyObjectParameterBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ProxyOverrideObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ProxyOverrideObject` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ProxyOverrideObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ProxyOverrideObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ProxyOverrideObject` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PlcSimAdvClientBuilderAreaTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PlcSimAdvClientBuilderAreaType():
    """
    Represents the plc signal area type.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknow", "Unknow"
       "Input", "Input"
       "Output", "Output"
       "Marker", "Marker"
       "Datablock", "DataBlock"
    """
    Unknow = -1  # PlcSimAdvClientBuilderAreaTypeMemberType
    Input = 1  # PlcSimAdvClientBuilderAreaTypeMemberType
    Output = 2  # PlcSimAdvClientBuilderAreaTypeMemberType
    Marker = 4  # PlcSimAdvClientBuilderAreaTypeMemberType
    Datablock = 8  # PlcSimAdvClientBuilderAreaTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PlcSimAdvClientBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PlcSimAdvClientBuilder` builder.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    class AreaType():
        """
        Represents the plc signal area type.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknow", "Unknow"
           "Input", "Input"
           "Output", "Output"
           "Marker", "Marker"
           "Datablock", "DataBlock"
        """
        Unknow = -1  # PlcSimAdvClientBuilderAreaTypeMemberType
        Input = 1  # PlcSimAdvClientBuilderAreaTypeMemberType
        Output = 2  # PlcSimAdvClientBuilderAreaTypeMemberType
        Marker = 4  # PlcSimAdvClientBuilderAreaTypeMemberType
        Datablock = 8  # PlcSimAdvClientBuilderAreaTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TagInfo():
        """
        Represents PLCTag info definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.PlcSimAdvClientBuilder.TagInfo()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        PLCTag Name          
        <hr>
        
        Field Value
        Type:str
        """
        EAreaType: PlcSimAdvClientBuilderAreaType = ...
        """
        Area type            
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.PlcSimAdvClientBuilderAreaType`
        """
        EIOType: SignalBuilderExternalSignalIOType = ...
        """
        IO type              
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
        """
        EDataType: SignalBuilderDataType = ...
        """
        Data type            
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
        """
        BChecked: bool = ...
        """
        Checked status       
        <hr>
        
        Field Value
        Type:bool
        """
    
    
    def RefreshRegisteredInstances(self) -> None:
        """
        Refresh registered PLCSIMAdv instances.  
        
        Signature ``RefreshRegisteredInstances()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetInstanceNames(self) -> tuple:
        """
        Gets PLCSIMAdv instance names  
        
        Signature ``GetInstanceNames()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (names, ownerParts). names is a list of str. ownerParts is a list of :py:class:`NXOpen.Part`. 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetInstanceNames(self, ownerParts: 'list[NXOpen.Part]', names: 'list[str]') -> None:
        """
        Sets PLCSIMAdv instance names  
        
        Signature ``SetInstanceNames(ownerParts, names)`` 
        
        :param ownerParts: 
        :type ownerParts: list of :py:class:`NXOpen.Part` 
        :param names: 
        :type names: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetInstanceInformation(self, instanceName: str, ownerPart: NXOpen.Part) -> 'list[PlcSimAdvClientBuilderTagInfo_Struct]':
        """
        Gets PLCSIMAdv instance information  
        
        Signature ``GetInstanceInformation(instanceName, ownerPart)`` 
        
        :param instanceName: 
        :type instanceName: str 
        :param ownerPart: 
        :type ownerPart: :py:class:`NXOpen.Part` 
        :returns:  Array of TagInfos  
        :rtype: list of :py:class:`NXOpen.Mechatronics.PlcSimAdvClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetInstanceInformation(self, instanceName: str, ownerPart: NXOpen.Part, tagInfos: 'list[PlcSimAdvClientBuilderTagInfo_Struct]') -> None:
        """
        Sets PLCSIMAdv instance information  
        
        Signature ``SetInstanceInformation(instanceName, ownerPart, tagInfos)`` 
        
        :param instanceName: 
        :type instanceName: str 
        :param ownerPart: 
        :type ownerPart: :py:class:`NXOpen.Part` 
        :param tagInfos:  Array of TagInfos  
        :type tagInfos: list of :py:class:`NXOpen.Mechatronics.PlcSimAdvClientBuilderTagInfo_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationPart: NXOpen.Part = ...
    """
    Returns or sets  the selected configuration part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :param ownerPart: 
    :type ownerPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PlcSimAdvClientBuilder = ...  # unknown typename


class VirtualAxisBuilderVirtualAxisTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VirtualAxisBuilderVirtualAxisType():
    """
    the Axis Type option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", " - "
       "Angular", " - "
    """
    Linear = 0  # VirtualAxisBuilderVirtualAxisTypeMemberType
    Angular = 1  # VirtualAxisBuilderVirtualAxisTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VirtualAxisBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.VirtualAxis` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.VirtualAxisCollection.CreateVirtualAxisBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class VirtualAxisType():
        """
        the Axis Type option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", " - "
           "Angular", " - "
        """
        Linear = 0  # VirtualAxisBuilderVirtualAxisTypeMemberType
        Angular = 1  # VirtualAxisBuilderVirtualAxisTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AnchorPoint: NXOpen.Point = ...
    """
    Returns or sets  the anchor point 
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPoint`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AxisType: VirtualAxisBuilderVirtualAxisType = ...
    """
    Returns or sets  the axis type 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.VirtualAxisBuilderVirtualAxisType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Mechatronics.VirtualAxisBuilderVirtualAxisType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Direction: NXOpen.Direction = ...
    """
    Returns or sets  the direction 
    
    <hr>
    
    Getter Method
    
    Signature ``Direction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Direction`` 
    
    :param direction: 
    :type direction: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StartPosition: NXOpen.Expression = ...
    """
    Returns  the initial position of virtual axis 
    
    <hr>
    
    Getter Method
    
    Signature ``StartPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: VirtualAxisBuilder = ...  # unknown typename


class SignalConnectionBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SignalConnectionBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SignalConnectionBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SignalConnectionBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SignalConnectionBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SignalConnectionBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SignalConnectionBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SignalConnectionBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SignalConnectionBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SignalConnectionBuilder, object2: SignalConnectionBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SignalConnectionBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SignalConnectionBuilderList = ...  # unknown typename


class PMNavFolderObjectCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a :py:class:`NXOpen.Mechatronics.PMNavFolderObjectCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX9.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> PMNavFolderObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PMNavFolderObject` object with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PMNavFolderObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PMNavFolderObject` object with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PMNavFolderObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindByObject(self, object: NXOpen.TaggedObject) -> PMNavFolderObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.PMNavFolderObject` object with the given physics object.  
        
        Signature ``FindByObject(object)`` 
        
        :param object:  The physics object belonging to the :py:class:`NXOpen.Mechatronics.PMNavFolderObject`.  
        :type object: :py:class:`NXOpen.TaggedObject` 
        :returns:  :py:class:`NXOpen.Mechatronics.PMNavFolderObject` object with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PMNavFolderObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def Create(self, name: str) -> PMNavFolderObject:
        """
        Creates the :py:class:`NXOpen.Mechatronics.PMNavFolderObject` object with the given name.  
        
        Signature ``Create(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.PMNavFolderObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.PMNavFolderObject` object with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.PMNavFolderObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def Delete(self, folder: PMNavFolderObject, isDeleteMember: bool) -> None:
        """
        Deletes the :py:class:`NXOpen.Mechatronics.PMNavFolderObject` object.  
        
        Signature ``Delete(folder, isDeleteMember)`` 
        
        :param folder: 
        :type folder: :py:class:`NXOpen.Mechatronics.PMNavFolderObject` 
        :param isDeleteMember:  Delete its members or not 
        :type isDeleteMember: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class RackPinionBuilder(CouplingBuilder):
    """
    Represents a :py:class:`Mechatronics.RackPinion` builder 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.RackPinionCollection.CreateRackPinionBuilder`
    
    .. versionadded:: NX11.0.0
    """
    ContactPoint: NXOpen.Point = ...
    """
    Returns or sets  a value that indicates the contact point value.  
    
    <hr>
    
    Getter Method
    
    Signature ``ContactPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContactPoint`` 
    
    :param contactPoint: 
    :type contactPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Radius: NXOpen.Expression = ...
    """
    Returns  a value that indicates radius value for the pinion.  
    
    <hr>
    
    Getter Method
    
    Signature ``Radius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: RackPinionBuilder = ...  # unknown typename


class CurveOnCurveJoint(PhysicsJoint):
    """
    Represents the CurveOnCurve Joint.  
    
    A CurveOnCurve Joint causes objects including section curve1 to 
    be connected to a connected curve2 at a point on the curve2. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.CurveOnCurveJointBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: CurveOnCurveJoint = ...  # unknown typename


class GanttExportPLCopenBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.GanttOperationObject` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.GanttCollection.CreateGanttExportPlcopenBuilder`
    
    Default values.
    
    ===============  =====
    Property         Value
    ===============  =====
    ToggleLongName   0 
    ===============  =====
    
    .. versionadded:: NX8.5.0
    """
    NativeFileBrowser: str = ...
    """
    Returns or sets  the native file browser 
    
    <hr>
    
    Getter Method
    
    Signature ``NativeFileBrowser`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NativeFileBrowser`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ToggleLongName: bool = ...
    """
    Returns or sets  the toggle long name 
    
    <hr>
    
    Getter Method
    
    Signature ``ToggleLongName`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToggleLongName`` 
    
    :param toggleLongName: 
    :type toggleLongName: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: GanttExportPLCopenBuilder = ...  # unknown typename


class PreventCollision(PhysicsConstraint):
    """
    Represents the Prevent Collision Constraint.  
    
    Prevent Collision Constraint changes 
    the collision properties between a specific pair of bodies. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.PreventCollisionBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: PreventCollision = ...  # unknown typename


class AngularSpringJoint(PhysicsJoint):
    """
    Represents the Angular Spring Joint.  
    
    Angular spring joint causes objects to behave as though 
    there is a spring-like force between them that grows as the object become farther apart or closer together. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.AngularSpringJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: AngularSpringJoint = ...  # unknown typename


class SelectRigidBody(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: RigidBody) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.RigidBody` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: RigidBody) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.RigidBody` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: RigidBody, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.RigidBody` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: RigidBody, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: RigidBody, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.RigidBody` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.RigidBody` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: RigidBody, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.RigidBody` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> RigidBody:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Mechatronics.RigidBody` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: RigidBody) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.RigidBody` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Mechatronics.RigidBody`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Mechatronics.RigidBody`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Mechatronics.RigidBody`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Mechatronics.RigidBody`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: RigidBody = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Mechatronics.RigidBody` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Mechatronics.RigidBody` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectRigidBody = ...  # unknown typename


class RequirementCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a :py:class:`NXOpen.Mechatronics.RequirementCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.MechatronicsManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRequirementBuilder(self, object: Requirement) -> RequirementBuilder:
        """
        Create builder for Requirement class  
        
        Signature ``CreateRequirementBuilder(object)`` 
        
        :param object:  :py:class:`NXOpen.Mechatronics.Requirement` to be edited, if None then create a new one  
        :type object: :py:class:`NXOpen.Mechatronics.Requirement` 
        :returns: :py:class:`NXOpen.Mechatronics.RequirementBuilder` object  
        :rtype: :py:class:`NXOpen.Mechatronics.RequirementBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> Requirement:
        """
        Finds the :py:class:`NXOpen.Mechatronics.Requirement` object with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Name of the requirement object, actually it shall be handle.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.Requirement` object with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.Requirement` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SlidingJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Sliding Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSlidingJointBuilder(self, slide: SlidingJoint) -> SlidingJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SlidingJointBuilder`.  
        
        Signature ``CreateSlidingJointBuilder(slide)`` 
        
        :param slide:  :py:class:`NXOpen.Mechatronics.SlidingJoint` to be edited, if None then create a new one  
        :type slide: :py:class:`NXOpen.Mechatronics.SlidingJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SlidingJointBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> SlidingJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.SlidingJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.SlidingJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.SlidingJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.SlidingJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class RigidBodyBuilderMassPropertiesOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RigidBodyBuilderMassPropertiesOption():
    """
    the mass property option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "automatic"
       "UserDefined", "user defined"
    """
    Automatic = 0  # RigidBodyBuilderMassPropertiesOptionMemberType
    UserDefined = 1  # RigidBodyBuilderMassPropertiesOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class RigidBodyBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.RigidBodyBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.RigidBodyCollection.CreateRigidBodyBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class MassPropertiesOption():
        """
        the mass property option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "automatic"
           "UserDefined", "user defined"
        """
        Automatic = 0  # RigidBodyBuilderMassPropertiesOptionMemberType
        UserDefined = 1  # RigidBodyBuilderMassPropertiesOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetGeometry(self, geometries: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the geometry
        
        Signature ``SetGeometry(geometries)`` 
        
        :param geometries:  Input geometries 
        :type geometries: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AngularVelocityDirection: NXOpen.Direction = ...
    """
    Returns or sets  the angular velocity direction.  
    
    It is only used when angular velocity is not zero. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularVelocityDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AngularVelocityDirection`` 
    
    :param dir: 
    :type dir: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AngularVelocityMagnitude: NXOpen.Expression = ...
    """
    Returns  the angular velocity magnitude.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngularVelocityMagnitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Geometry: NXOpen.SelectNXObjectList = ...
    """
    Returns  the geometries.  
    
    This can be a :py:class:`NXOpen.Assemblies.ComponentAssembly`, :py:class:`NXOpen.Point`
    , bodies and curve. 
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InertiaIxx: NXOpen.Expression = ...
    """
    Returns  the inertia Ixx.  
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIxx`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InertiaIxy: NXOpen.Expression = ...
    """
    Returns  the inertia Ixy.  
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIxy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InertiaIxz: NXOpen.Expression = ...
    """
    Returns  the inertia Ixz.  
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIxz`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InertiaIyy: NXOpen.Expression = ...
    """
    Returns  the inertia Iyy.  
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIyy`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InertiaIyz: NXOpen.Expression = ...
    """
    Returns  the inertia Iyz.  
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIyz`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InertiaIzz: NXOpen.Expression = ...
    """
    Returns  the inertia Izz.  
    
    <hr>
    
    Getter Method
    
    Signature ``InertiaIzz`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LinearVelocityDirection: NXOpen.Direction = ...
    """
    Returns or sets  the linear velocity.  
    
    It is only used when linear velocity is not zero. 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearVelocityDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``LinearVelocityDirection`` 
    
    :param dir: 
    :type dir: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LinearVelocityMagnitude: NXOpen.Expression = ...
    """
    Returns  the linear velocity magnitude.  
    
    <hr>
    
    Getter Method
    
    Signature ``LinearVelocityMagnitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Mass: NXOpen.Expression = ...
    """
    Returns  the mass.  
    
    <hr>
    
    Getter Method
    
    Signature ``Mass`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MassCenterPoint: NXOpen.Point = ...
    """
    Returns or sets  the mass center point.  
    
    <hr>
    
    Getter Method
    
    Signature ``MassCenterPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MassCenterPoint`` 
    
    :param center: 
    :type center: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MassProperty: RigidBodyBuilderMassPropertiesOption = ...
    """
    Returns or sets  the auto-calculate mass property flag which is used to indicate whether all mass 
    properties are calculated by system.  
    
    <hr>
    
    Getter Method
    
    Signature ``MassProperty`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.RigidBodyBuilderMassPropertiesOption` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MassProperty`` 
    
    :param massProperty: 
    :type massProperty: :py:class:`NXOpen.Mechatronics.RigidBodyBuilderMassPropertiesOption` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Orientation: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the orientation.  
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    TagForm: SelectTagFormObject = ...
    """
    Returns  the tagform.  
    
    This is a :py:class:`NXOpen.Mechatronics.TagFormObject` object. 
    
    <hr>
    
    Getter Method
    
    Signature ``TagForm`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectTagFormObject` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: RigidBodyBuilder = ...  # unknown typename


class TransportSurfaceBuilderMoveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransportSurfaceBuilderMoveType():
    """
    the motion types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Straight", "Straight"
       "Circle", "Circle"
    """
    Straight = 0  # TransportSurfaceBuilderMoveTypeMemberType
    Circle = 1  # TransportSurfaceBuilderMoveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransportSurfaceBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.TransportSurfaceBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.TransportSurfaceCollection.CreateTransportSurfaceBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class MoveType():
        """
        the motion types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Straight", "Straight"
           "Circle", "Circle"
        """
        Straight = 0  # TransportSurfaceBuilderMoveTypeMemberType
        Circle = 1  # TransportSurfaceBuilderMoveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetFaces(self, faces: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the faces.  
        
        Signature ``SetFaces(faces)`` 
        
        :param faces: 
        :type faces: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AxisVector: NXOpen.Direction = ...
    """
    Returns or sets  the specify axis vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CenterPoint: NXOpen.Point = ...
    """
    Returns or sets  the center point 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CenterPoint`` 
    
    :param centerPoint: 
    :type centerPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Faces: NXOpen.SelectFaceList = ...
    """
    Returns  the faces.  
    
    This can be a :py:class:`NXOpen.Face`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Faces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Material: CollisionMaterial = ...
    """
    Returns or sets  the material.  
    
    This can be a :py:class:`NXOpen.Mechatronics.CollisionMaterial`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Material`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionMaterial` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Material`` 
    
    :param material: 
    :type material: :py:class:`NXOpen.Mechatronics.CollisionMaterial` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MedianRadius: NXOpen.Expression = ...
    """
    Returns  the median radius.  
    
    <hr>
    
    Getter Method
    
    Signature ``MedianRadius`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MedianStartPosition: NXOpen.Expression = ...
    """
    Returns  the median start position.  
    
    <hr>
    
    Getter Method
    
    Signature ``MedianStartPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MedianVelocity: NXOpen.Expression = ...
    """
    Returns  the median velocity.  
    
    <hr>
    
    Getter Method
    
    Signature ``MedianVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MotionType: TransportSurfaceBuilderMoveType = ...
    """
    Returns or sets  the motion type 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TransportSurfaceBuilderMoveType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MotionType`` 
    
    :param motionType: 
    :type motionType: :py:class:`NXOpen.Mechatronics.TransportSurfaceBuilderMoveType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParallelInitialPosition: NXOpen.Expression = ...
    """
    Returns  the initial position in parallel direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParallelInitialPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ParallelVelocity: NXOpen.Expression = ...
    """
    Returns  the parallel velocity.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParallelVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PerpendicularInitialPosition: NXOpen.Expression = ...
    """
    Returns  the initial position in perpendicular direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``PerpendicularInitialPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PerpendicularVelocity: NXOpen.Expression = ...
    """
    Returns  the perpendicular velocity.  
    
    <hr>
    
    Getter Method
    
    Signature ``PerpendicularVelocity`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    VelocityVector: NXOpen.Direction = ...
    """
    Returns or sets  the specify vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``VelocityVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``VelocityVector`` 
    
    :param velocityVector: 
    :type velocityVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: TransportSurfaceBuilder = ...  # unknown typename


class ForceTorqueControlBuilderAxisJointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ForceTorqueControlBuilderAxisJointType():
    """
    The axis type for ForceTorque control.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angular", "Angular"
       "Linear", "Linear"
       "Mixed", "Mix angular and linear"
    """
    Angular = 0  # ForceTorqueControlBuilderAxisJointTypeMemberType
    Linear = 1  # ForceTorqueControlBuilderAxisJointTypeMemberType
    Mixed = 2  # ForceTorqueControlBuilderAxisJointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ForceTorqueControlBuilder(PhysicsConstraintBuilder):
    """
    ForceTorque control builder for building a ForceTorque object.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ForceTorqueControlCollection.CreateForceTorqueControlBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class AxisJointType():
        """
        The axis type for ForceTorque control.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angular", "Angular"
           "Linear", "Linear"
           "Mixed", "Mix angular and linear"
        """
        Angular = 0  # ForceTorqueControlBuilderAxisJointTypeMemberType
        Linear = 1  # ForceTorqueControlBuilderAxisJointTypeMemberType
        Mixed = 2  # ForceTorqueControlBuilderAxisJointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisJoint: SelectPhysicsJoint = ...
    """
    Returns  the joint select. This can be a :py:class:`NXOpen.Mechatronics.HingeJoint`, :py:class:`NXOpen.Mechatronics.SlidingJoint`
    , :py:class:`NXOpen.Mechatronics.CylindricalJoint` and :py:class:`NXOpen.Mechatronics.TransportSurface`.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    AxisType: ForceTorqueControlBuilderAxisJointType = ...
    """
    Returns or sets  a value that indicates which type of axis joint.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ForceTorqueControlBuilderAxisJointType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Mechatronics.ForceTorqueControlBuilderAxisJointType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ForceTorque: NXOpen.Expression = ...
    """
    Returns  the value that indicates the value for force/torque for the control.  
    
    <hr>
    
    Getter Method
    
    Signature ``ForceTorque`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: ForceTorqueControlBuilder = ...  # unknown typename


class ScrewJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Screw Joint. 
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateScrewJointBuilder(self, cylinJoint: ScrewJoint) -> ScrewJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ScrewJointBuilder`.
        
        Signature ``CreateScrewJointBuilder(cylinJoint)`` 
        
        :param cylinJoint:  :py:class:`NXOpen.Mechatronics.ScrewJoint` to be edited, if None then create a new one  
        :type cylinJoint: :py:class:`NXOpen.Mechatronics.ScrewJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ScrewJointBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ScrewJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ScrewJoint` with the given name.
        An exception will be thrown if no object can be found with given name. 
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ScrewJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ScrewJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ScrewJoint` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class DistanceSensorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Distance Sensor.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDistanceSensorBuilder(self, distanceSensor: DistanceSensor) -> DistanceSensorBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.DistanceSensorBuilder`.  
        
        Signature ``CreateDistanceSensorBuilder(distanceSensor)`` 
        
        :param distanceSensor:  :py:class:`NXOpen.Mechatronics.DistanceSensor` to be edited, if None then create a new one  
        :type distanceSensor: :py:class:`NXOpen.Mechatronics.DistanceSensor` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.DistanceSensorBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> DistanceSensor:
        """
        Finds the :py:class:`NXOpen.Mechatronics.DistanceSensor` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.DistanceSensor`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.DistanceSensor` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.DistanceSensor` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class RackPinion(Coupling):
    """
    Represents the Rack and Pinion. A Rack and Pinion causes objects 
    attached to the linear and rotary axes to move in unison at a fixed ratio. 
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.RackPinionBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: RackPinion = ...  # unknown typename


class SignalConnectionBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalConnectionBuilderDataType():
    """
    Represents the OPC signal data type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "unknown"
       "Integer", "integer"
       "Float", "float"
       "Boolean", "boolean"
       "String", "string"
    """
    Unknown = 0  # SignalConnectionBuilderDataTypeMemberType
    Integer = 1  # SignalConnectionBuilderDataTypeMemberType
    Float = 2  # SignalConnectionBuilderDataTypeMemberType
    Boolean = 3  # SignalConnectionBuilderDataTypeMemberType
    String = 4  # SignalConnectionBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalConnectionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.SignalConnectionCollection.CreateSignalConnectionBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class DataType():
        """
        Represents the OPC signal data type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", "unknown"
           "Integer", "integer"
           "Float", "float"
           "Boolean", "boolean"
           "String", "string"
        """
        Unknown = 0  # SignalConnectionBuilderDataTypeMemberType
        Integer = 1  # SignalConnectionBuilderDataTypeMemberType
        Float = 2  # SignalConnectionBuilderDataTypeMemberType
        Boolean = 3  # SignalConnectionBuilderDataTypeMemberType
        String = 4  # SignalConnectionBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AdapterTag: SignalAdapter = ...
    """
    Returns or sets  the adapter object.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdapterTag`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AdapterTag`` 
    
    :param adapterTag: 
    :type adapterTag: :py:class:`NXOpen.Mechatronics.SignalAdapter` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OPCServerName: str = ...
    """
    Returns or sets  the opc Server 
    
    <hr>
    
    Getter Method
    
    Signature ``OPCServerName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``OPCServerName`` 
    
    :param opcServerName: 
    :type opcServerName: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OPCSignalAccess: OPCClientBuilderTagAccess = ...
    """
    Returns or sets  the OPC access previlege type.  
    
    <hr>
    
    Getter Method
    
    Signature ``OPCSignalAccess`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.OPCClientBuilderTagAccess` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``OPCSignalAccess`` 
    
    :param oPCSignalAccess: 
    :type oPCSignalAccess: :py:class:`NXOpen.Mechatronics.OPCClientBuilderTagAccess` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OPCSignalName: str = ...
    """
    Returns or sets  the OPC signal name.  
    
    <hr>
    
    Getter Method
    
    Signature ``OPCSignalName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``OPCSignalName`` 
    
    :param oPCsignalName: 
    :type oPCsignalName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OPCSignalType: SignalConnectionBuilderDataType = ...
    """
    Returns or sets  the OPC signal type.  
    
    <hr>
    
    Getter Method
    
    Signature ``OPCSignalType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilderDataType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``OPCSignalType`` 
    
    :param oPCSignalType: 
    :type oPCSignalType: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilderDataType` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ResultName: str = ...
    """
    Returns or sets  the mapping result name.  
    
    <hr>
    
    Getter Method
    
    Signature ``ResultName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ResultName`` 
    
    :param resultName: 
    :type resultName: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SignalTag: NXOpen.NXObject = ...
    """
    Returns or sets  the signal object.  
    
    <hr>
    
    Getter Method
    
    Signature ``SignalTag`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SignalTag`` 
    
    :param signalTag: 
    :type signalTag: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StreamIO: int = ...
    """
    Returns or sets  the mapping direction.  
    
    <hr>
    
    Getter Method
    
    Signature ``StreamIO`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``StreamIO`` 
    
    :param streamIO: 
    :type streamIO: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SignalConnectionBuilder = ...  # unknown typename


class ExternalConnection(NXOpen.DisplayableObject):
    """
    Represents the External Connection class.  
    
    External Connection objects are
    able to connect physics runtime properties to OPC signals. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ExternalConnectionBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: ExternalConnection = ...  # unknown typename


class SHMSignalConnection(NXOpen.DisplayableObject):
    """
    Represents the SHM Signal connection class.  
    
    Signal connection objects are able
    to connect MCD singals with SHM signals. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: SHMSignalConnection = ...  # unknown typename


class SignalConnectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Signal Connection.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> SignalConnection:
        """
        Finds the :py:class:`NXOpen.Mechatronics.SignalConnection` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.SignalConnection`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.SignalConnection` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.SignalConnection` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateSignalConnectionBuilder(self, connection: SignalConnection) -> SignalConnectionBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder`  
        
        Signature ``CreateSignalConnectionBuilder(connection)`` 
        
        :param connection:  :py:class:`NXOpen.Mechatronics.SignalConnection` to be edited, if None then create a new one  
        :type connection: :py:class:`NXOpen.Mechatronics.SignalConnection` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ExternalConnectionElementBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExternalConnectionElementBuilderDataType():
    """
    the data type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unknown", "unknown"
       "Integer", "integer"
       "Float", "float"
       "Boolean", "boolean"
    """
    Unknown = 0  # ExternalConnectionElementBuilderDataTypeMemberType
    Integer = 1  # ExternalConnectionElementBuilderDataTypeMemberType
    Float = 2  # ExternalConnectionElementBuilderDataTypeMemberType
    Boolean = 3  # ExternalConnectionElementBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExternalConnectionElementBuilderConditionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExternalConnectionElementBuilderConditionType():
    """
    the condition type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Eq", "equal"
       "Gt", "greater than"
       "Lt", "less than"
       "Ge", "greater than or equal"
       "Le", "less than or equal"
       "Ne", "not equal"
    """
    Eq = 0  # ExternalConnectionElementBuilderConditionTypeMemberType
    Gt = 1  # ExternalConnectionElementBuilderConditionTypeMemberType
    Lt = 2  # ExternalConnectionElementBuilderConditionTypeMemberType
    Ge = 3  # ExternalConnectionElementBuilderConditionTypeMemberType
    Le = 4  # ExternalConnectionElementBuilderConditionTypeMemberType
    Ne = 5  # ExternalConnectionElementBuilderConditionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExternalConnectionElementBuilderStreamTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExternalConnectionElementBuilderStreamType():
    """
    the stream type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "R", "read"
       "W", "write"
       "Rw", "read and write"
    """
    R = 0  # ExternalConnectionElementBuilderStreamTypeMemberType
    W = 1  # ExternalConnectionElementBuilderStreamTypeMemberType
    Rw = 2  # ExternalConnectionElementBuilderStreamTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExternalConnectionElementBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ExternalConnectionCollection.CreateExternalConnectionElementBuilder`
    
    .. versionadded:: NX8.0.1
    """
    
    class DataType():
        """
        the data type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unknown", "unknown"
           "Integer", "integer"
           "Float", "float"
           "Boolean", "boolean"
        """
        Unknown = 0  # ExternalConnectionElementBuilderDataTypeMemberType
        Integer = 1  # ExternalConnectionElementBuilderDataTypeMemberType
        Float = 2  # ExternalConnectionElementBuilderDataTypeMemberType
        Boolean = 3  # ExternalConnectionElementBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ConditionType():
        """
        the condition type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Eq", "equal"
           "Gt", "greater than"
           "Lt", "less than"
           "Ge", "greater than or equal"
           "Le", "less than or equal"
           "Ne", "not equal"
        """
        Eq = 0  # ExternalConnectionElementBuilderConditionTypeMemberType
        Gt = 1  # ExternalConnectionElementBuilderConditionTypeMemberType
        Lt = 2  # ExternalConnectionElementBuilderConditionTypeMemberType
        Ge = 3  # ExternalConnectionElementBuilderConditionTypeMemberType
        Le = 4  # ExternalConnectionElementBuilderConditionTypeMemberType
        Ne = 5  # ExternalConnectionElementBuilderConditionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StreamType():
        """
        the stream type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "R", "read"
           "W", "write"
           "Rw", "read and write"
        """
        R = 0  # ExternalConnectionElementBuilderStreamTypeMemberType
        W = 1  # ExternalConnectionElementBuilderStreamTypeMemberType
        Rw = 2  # ExternalConnectionElementBuilderStreamTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ConditionOption: ExternalConnectionElementBuilderConditionType = ...
    """
    Returns or sets  the condition type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConditionOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilderConditionType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ConditionOption`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilderConditionType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ConditionValue: float = ...
    """
    Returns or sets  the condition value.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConditionValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ConditionValue`` 
    
    :param conditionValue: 
    :type conditionValue: float 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Inverse: bool = ...
    """
    Returns or sets  whether to inverse the logic value.  
    
    <hr>
    
    Getter Method
    
    Signature ``Inverse`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Inverse`` 
    
    :param inverse: 
    :type inverse: bool 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Multiplier: float = ...
    """
    Returns or sets  the multiplier.  
    
    <hr>
    
    Getter Method
    
    Signature ``Multiplier`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Multiplier`` 
    
    :param multiplier: 
    :type multiplier: float 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    OffsetValue: float = ...
    """
    Returns or sets  the offset value.  
    
    <hr>
    
    Getter Method
    
    Signature ``OffsetValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``OffsetValue`` 
    
    :param offset: 
    :type offset: float 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PropertyDataType: ExternalConnectionElementBuilderDataType = ...
    """
    Returns or sets  the data type of physics property.  
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyDataType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilderDataType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PropertyDataType`` 
    
    :param dataType: 
    :type dataType: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilderDataType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PropertyId: int = ...
    """
    Returns or sets  the property ID of physics object.  
    
    <hr>
    
    Getter Method
    
    Signature ``PropertyId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PropertyId`` 
    
    :param propId: 
    :type propId: int 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SignalDataType: ExternalConnectionElementBuilderDataType = ...
    """
    Returns or sets  the data type of signal.  
    
    <hr>
    
    Getter Method
    
    Signature ``SignalDataType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilderDataType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SignalDataType`` 
    
    :param dataType: 
    :type dataType: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilderDataType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SignalName: str = ...
    """
    Returns or sets  the name of signal.  
    
    <hr>
    
    Getter Method
    
    Signature ``SignalName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SignalName`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StreamOption: ExternalConnectionElementBuilderStreamType = ...
    """
    Returns or sets  the data stream type.  
    
    <hr>
    
    Getter Method
    
    Signature ``StreamOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilderStreamType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``StreamOption`` 
    
    :param streamType: 
    :type streamType: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilderStreamType` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ExternalConnectionElementBuilder = ...  # unknown typename


class LinearLimitJoint(PhysicsJoint):
    """
    Represents the Linear Limit Joint.  
    
    Linear Limit Joint causes objects to stop moving
    when their relative position moves beyond a certain distance or get too close together. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.LinearLimitJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: LinearLimitJoint = ...  # unknown typename


class AccelerometerCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Accelerometer.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateAccelerometerBuilder(self, accelerometer: Accelerometer) -> AccelerometerBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.AccelerometerBuilder`.  
        
        Signature ``CreateAccelerometerBuilder(accelerometer)`` 
        
        :param accelerometer:  :py:class:`NXOpen.Mechatronics.Accelerometer` to be edited, if None then create a new one  
        :type accelerometer: :py:class:`NXOpen.Mechatronics.Accelerometer` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.AccelerometerBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> Accelerometer:
        """
        Finds the :py:class:`NXOpen.Mechatronics.Accelerometer` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.Accelerometer`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.Accelerometer` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.Accelerometer` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class ExternalConnectionBuilderConditionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExternalConnectionBuilderConditionType():
    """
    the condition type.   
    
    .. deprecated::  NX8.0.1
       Please use :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Eq", "equal"
       "Gt", "greater than"
       "Lt", "less than"
       "Ge", "greater than or equal"
       "Le", "less than or equal"
       "Ne", "not equal"
    """
    Eq = 0  # ExternalConnectionBuilderConditionTypeMemberType
    Gt = 1  # ExternalConnectionBuilderConditionTypeMemberType
    Lt = 2  # ExternalConnectionBuilderConditionTypeMemberType
    Ge = 3  # ExternalConnectionBuilderConditionTypeMemberType
    Le = 4  # ExternalConnectionBuilderConditionTypeMemberType
    Ne = 5  # ExternalConnectionBuilderConditionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExternalConnectionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ExternalConnection` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ExternalConnectionCollection.CreateExternalConnectionBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    class ConditionType():
        """
        the condition type.   
        
        .. deprecated::  NX8.0.1
           Please use :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Eq", "equal"
           "Gt", "greater than"
           "Lt", "less than"
           "Ge", "greater than or equal"
           "Le", "less than or equal"
           "Ne", "not equal"
        """
        Eq = 0  # ExternalConnectionBuilderConditionTypeMemberType
        Gt = 1  # ExternalConnectionBuilderConditionTypeMemberType
        Lt = 2  # ExternalConnectionBuilderConditionTypeMemberType
        Ge = 3  # ExternalConnectionBuilderConditionTypeMemberType
        Le = 4  # ExternalConnectionBuilderConditionTypeMemberType
        Ne = 5  # ExternalConnectionBuilderConditionTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def RemoveAllElements(self) -> None:
        """
        Remove all elements.  
        
        Signature ``RemoveAllElements()`` 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.0.1
           Please use :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` instead.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddElement(self, propTag: int, signalType: int, signalName: str, propertyType: int, streamIO: int, conditionType: int, conditionValue: float, multiplier: float, offsetValue: float, boolOperator: int) -> None:
        """
        Add one element.  
        
        Signature ``AddElement(propTag, signalType, signalName, propertyType, streamIO, conditionType, conditionValue, multiplier, offsetValue, boolOperator)`` 
        
        :param propTag: 
        :type propTag: int 
        :param signalType: 
        :type signalType: int 
        :param signalName: 
        :type signalName: str 
        :param propertyType: 
        :type propertyType: int 
        :param streamIO: 
        :type streamIO: int 
        :param conditionType: 
        :type conditionType: int 
        :param conditionValue: 
        :type conditionValue: float 
        :param multiplier: 
        :type multiplier: float 
        :param offsetValue: 
        :type offsetValue: float 
        :param boolOperator: 
        :type boolOperator: int 
        
        .. versionadded:: NX8.0.0
        
        .. deprecated::  NX8.0.1
           Please use :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilder` instead.
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ConnectionList: ExternalConnectionElementBuilderList = ...
    """
    Returns  the connection element list.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.ExternalConnectionElementBuilderList` 
    
    .. versionadded:: NX8.0.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectPhysics: NXOpen.SelectNXObject = ...
    """
    Returns  the select physics.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectPhysics`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ExternalConnectionBuilder = ...  # unknown typename


class HydraulicValveCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Hydraulic Valve.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateHydraulicValveBuilder(self, hydraulicValve: HydraulicValve) -> HydraulicValveBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.HydraulicValveBuilder`.  
        
        Signature ``CreateHydraulicValveBuilder(hydraulicValve)`` 
        
        :param hydraulicValve:  :py:class:`NXOpen.Mechatronics.HydraulicValve` to be edited, if None then create a new one  
        :type hydraulicValve: :py:class:`NXOpen.Mechatronics.HydraulicValve` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.HydraulicValveBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> HydraulicValve:
        """
        Finds the :py:class:`NXOpen.Mechatronics.HydraulicValve` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.HydraulicValve`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.HydraulicValve` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.HydraulicValve` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PneumaticValve(NXOpen.DisplayableObject):
    """
    Represents the Pneumatic Valve. An Pneumatic Valve is able to control a pneumatic cylinder.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.PneumaticValveBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: PneumaticValve = ...  # unknown typename


class SignalBuilderSignal_Struct():
    """
    Represents Signal definition structure.  
    
    .
    Constructor: 
    NXOpen.Mechatronics.SignalBuilder.Signal()
    """
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    TgPhysicsObject: NXOpen.NXObject = ...
    """
    Physics Object       
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.NXObject`
    """
    NPhysicsPropTag: int = ...
    """
    Physics Property Peristent Index  
    <hr>
    
    Field Value
    Type:int
    """
    EIOType: SignalBuilderIOType = ...
    """
    IO type              
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderIOType`
    """
    EDataType: SignalBuilderDataType = ...
    """
    Data type            
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
    """
    BoolValueExp: NXOpen.Expression = ...
    """
    Data Value (bool)    
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Expression`
    """
    IntValueExp: NXOpen.Expression = ...
    """
    Data Value (int)     
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Expression`
    """
    DoubleValueExp: NXOpen.Expression = ...
    """
    Data Value (double)  
    <hr>
    
    Field Value
    Type::py:class:`NXOpen.Expression`
    """


class AdapterSignal(NXOpen.DisplayableObject):
    """
    Represents the Adapter Signal class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.AdapterSignalBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: AdapterSignal = ...  # unknown typename


class SelectLogicObjectList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: LogicObject) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[LogicObject]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Mechatronics.LogicObject` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: LogicObject, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: LogicObject, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: LogicObject, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: LogicObject, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: LogicObject) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: LogicObject, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: LogicObject, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: LogicObject, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[LogicObject]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Mechatronics.LogicObject` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: LogicObject) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Mechatronics.LogicObject` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[LogicObject]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Mechatronics.LogicObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[LogicObject]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Mechatronics.LogicObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectLogicObjectList = ...  # unknown typename


class ObjectSourceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Object Source.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateObjectSourceBuilder(self, objectSrc: ObjectSource) -> ObjectSourceBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ObjectSourceBuilder`.  
        
        Signature ``CreateObjectSourceBuilder(objectSrc)`` 
        
        :param objectSrc:  :py:class:`NXOpen.Mechatronics.ObjectSource` to be edited, if None then create a new one  
        :type objectSrc: :py:class:`NXOpen.Mechatronics.ObjectSource` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ObjectSourceBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ObjectSource:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ObjectSource` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ObjectSource`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ObjectSource` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ObjectSource` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class LinearSpringJoint(PhysicsJoint):
    """
    Represents the Linear Spring Joint.  
    
    A Linear Spring Joint causes objects to behave as though
    there is a spring-like force between them that grows as the object become farther apart or closer together. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.LinearSpringJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: LinearSpringJoint = ...  # unknown typename


class ExpressionBlockBuilderSlotTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExpressionBlockBuilderSlotType():
    """
    Represents the Slot type.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Input", "Input that should connect to runtime parameter as input value."
       "Output", "Output that should connect to runtime parameter to output value"
       "Param", "Param that is used to configure the block to differentiate mode"
       "State", "State that is change during runtime based on internal data"
       "Custom", "Custom that represents the user created temporary variable"
       "Num", "Total Num"
    """
    NotSet = -1  # ExpressionBlockBuilderSlotTypeMemberType
    Input = 0  # ExpressionBlockBuilderSlotTypeMemberType
    Output = 1  # ExpressionBlockBuilderSlotTypeMemberType
    Param = 2  # ExpressionBlockBuilderSlotTypeMemberType
    State = 3  # ExpressionBlockBuilderSlotTypeMemberType
    Custom = 4  # ExpressionBlockBuilderSlotTypeMemberType
    Num = 5  # ExpressionBlockBuilderSlotTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExpressionBlockBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ExpressionBlockBuilderDataType():
    """
    Represents the data type.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bool", "bool"
       "Int", "int"
       "Double", "double"
    """
    Bool = 0  # ExpressionBlockBuilderDataTypeMemberType
    Int = 1  # ExpressionBlockBuilderDataTypeMemberType
    Double = 2  # ExpressionBlockBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ExpressionBlockBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ExpressionBlockBuilder` builder.  
    
    ExpressionBlockBuilder is used to maintain the :py:class:`NXOpen.Mechatronics.ExpressionBlockObject` 
    which is used store related expressions that work for same task. 
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.ExpressionBlockCollection.CreateExpressionBlockBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class SlotType():
        """
        Represents the Slot type.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Input", "Input that should connect to runtime parameter as input value."
           "Output", "Output that should connect to runtime parameter to output value"
           "Param", "Param that is used to configure the block to differentiate mode"
           "State", "State that is change during runtime based on internal data"
           "Custom", "Custom that represents the user created temporary variable"
           "Num", "Total Num"
        """
        NotSet = -1  # ExpressionBlockBuilderSlotTypeMemberType
        Input = 0  # ExpressionBlockBuilderSlotTypeMemberType
        Output = 1  # ExpressionBlockBuilderSlotTypeMemberType
        Param = 2  # ExpressionBlockBuilderSlotTypeMemberType
        State = 3  # ExpressionBlockBuilderSlotTypeMemberType
        Custom = 4  # ExpressionBlockBuilderSlotTypeMemberType
        Num = 5  # ExpressionBlockBuilderSlotTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DataType():
        """
        Represents the data type.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bool", "bool"
           "Int", "int"
           "Double", "double"
        """
        Bool = 0  # ExpressionBlockBuilderDataTypeMemberType
        Int = 1  # ExpressionBlockBuilderDataTypeMemberType
        Double = 2  # ExpressionBlockBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Slot():
        """
        Represents Slot definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.ExpressionBlockBuilder.Slot()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        ESlotType: ExpressionBlockBuilderSlotType = ...
        """
        Slot type that indicate the data structure is used for 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.ExpressionBlockBuilderSlotType`
        """
        Name: str = ...
        """
        Slot Name 
        <hr>
        
        Field Value
        Type:str
        """
        EDataType: ExpressionBlockBuilderDataType = ...
        """
        Data type 
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.ExpressionBlockBuilderDataType`
        """
        BoolValue: bool = ...
        """
        Data Value (bool)   
        <hr>
        
        Field Value
        Type:bool
        """
        IntValue: int = ...
        """
        Data Value (int)    
        <hr>
        
        Field Value
        Type:int
        """
        DoubleValue: float = ...
        """
        Data Value (double) 
        <hr>
        
        Field Value
        Type:float
        """
        Unit: NXOpen.Unit = ...
        """
        Data Unit           
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Unit`
        """
        Formula: str = ...
        """
        Formula              
        <hr>
        
        Field Value
        Type:str
        """
        Comment: str = ...
        """
        Comment Text         
        <hr>
        
        Field Value
        Type:str
        """
        TgPhysicsObject: NXOpen.NXObject = ...
        """
        Connnected Physics Object       
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        NPhysicsPropTag: int = ...
        """
        Connnected Physics Property Persisent index 
        <hr>
        
        Field Value
        Type:int
        """
    
    
    def GetDescription(self) -> 'list[str]':
        """
        Gets description lines.  
        
        Signature ``GetDescription()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetDescription(self, descLines: 'list[str]') -> None:
        """
        Sets description lines.  
        
        Signature ``SetDescription(descLines)`` 
        
        :param descLines: 
        :type descLines: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetSlots(self) -> 'list[ExpressionBlockBuilderSlot_Struct]':
        """
        Gets all Slots.  
        
        Signature ``GetSlots()`` 
        
        :returns:  Array of Slots  
        :rtype: list of :py:class:`NXOpen.Mechatronics.ExpressionBlockBuilderSlot_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSlots(self, slots: 'list[ExpressionBlockBuilderSlot_Struct]') -> None:
        """
        Sets all Slots.  
        
        Signature ``SetSlots(slots)`` 
        
        :param slots:  Array of Slots  
        :type slots: list of :py:class:`NXOpen.Mechatronics.ExpressionBlockBuilderSlot_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SaveToXmlFile(self, templateFile: str) -> None:
        """
        Save data to xml file.  
        
        Signature ``SaveToXmlFile(templateFile)`` 
        
        :param templateFile: 
        :type templateFile: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def LoadFromXmlFile(self, templateFile: str) -> None:
        """
        Load data from xml file.  
        
        Signature ``LoadFromXmlFile(templateFile)`` 
        
        :param templateFile: 
        :type templateFile: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ExpressionBlockBuilder = ...  # unknown typename


class ObjectSink(NXOpen.DisplayableObject):
    """
    Represents the Object Sink.  
    
    Object Sink is used to define some objects that 
    delete copies of physics objects during simulation. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ObjectSinkBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: ObjectSink = ...  # unknown typename


class LinearSpringJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.LinearSpringJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.LinearSpringJointCollection.CreateLinearSpringJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    AttachmentPoint: NXOpen.Point = ...
    """
    Returns or sets  the attachment point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttachmentPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AttachmentPoint`` 
    
    :param attachmentPoint: 
    :type attachmentPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    BasePoint: NXOpen.Point = ...
    """
    Returns or sets  the base point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BasePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BasePoint`` 
    
    :param basePoint: 
    :type basePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Damping: NXOpen.Expression = ...
    """
    Returns  the damping.  
    
    <hr>
    
    Getter Method
    
    Signature ``Damping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RelaxedPosition: NXOpen.Expression = ...
    """
    Returns  the relaxed position.  
    
    <hr>
    
    Getter Method
    
    Signature ``RelaxedPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SpringConstant: NXOpen.Expression = ...
    """
    Returns  the spring constant.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpringConstant`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: LinearSpringJointBuilder = ...  # unknown typename


class SlidingJoint(PhysicsJoint):
    """
    Represents the Sliding Joint.  
    
    A Sliding Joint causes objects to be 
    connected along a fixed linear axis. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.SlidingJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: SlidingJoint = ...  # unknown typename


class RequirementBuilder(SystemObjectBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.Requirement` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.RequirementCollection.CreateRequirementBuilder`
    
    .. versionadded:: NX8.5.0
    """
    ObjectInformation: ObjectInformationBuilder = ...
    """
    Returns  the object information builder, used to specify the information of requirement object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectInformation`` 
    
    :returns:  object information Builder  
    :rtype: :py:class:`NXOpen.Mechatronics.ObjectInformationBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ParentFunction: NXOpen.NXObject = ...
    """
    Returns or sets  the parent object.  
    
    <hr>
    
    Getter Method
    
    Signature ``ParentFunction`` 
    
    :returns:  Parent function object  
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ParentFunction`` 
    
    :param parent:  Parent function object  
    :type parent: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: RequirementBuilder = ...  # unknown typename


class ComparisonResultElectricalPartStatusMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ComparisonResultElectricalPartStatus():
    """
    Defines statuses of electrical parts 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Added", "Added status"
       "Removed", "Removed status"
       "Updated", "Updated status"
       "Identical", "Identical status"
    """
    Added = 0  # ComparisonResultElectricalPartStatusMemberType
    Removed = 1  # ComparisonResultElectricalPartStatusMemberType
    Updated = 2  # ComparisonResultElectricalPartStatusMemberType
    Identical = 3  # ComparisonResultElectricalPartStatusMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ComparisonResultElectricalPart(ComparisonResultBase):
    """
    Represents electrical part of comparison result   
    
    .. versionadded:: NX9.0.0
    """
    
    class Status():
        """
        Defines statuses of electrical parts 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Added", "Added status"
           "Removed", "Removed status"
           "Updated", "Updated status"
           "Identical", "Identical status"
        """
        Added = 0  # ComparisonResultElectricalPartStatusMemberType
        Removed = 1  # ComparisonResultElectricalPartStatusMemberType
        Updated = 2  # ComparisonResultElectricalPartStatusMemberType
        Identical = 3  # ComparisonResultElectricalPartStatusMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called, it is illegal to use the object. In .NET, this method is automatically called when the object is deleted by the garbage collector. 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetAttributes(self) -> tuple:
        """
        Gets a list of attributes from the electrical part 
        
        Signature ``GetAttributes()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (attributeNames, attributeValues). attributeNames is a list of str.   Array of attribute names attributeValues is a list of str.   Array of attribute values 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    ComparisonStatus: ComparisonResultElectricalPartStatus = ...
    """
    Returns  the status from the electrical part 
    
    <hr>
    
    Getter Method
    
    Signature ``ComparisonStatus`` 
    
    :returns:  Status of electrical part  
    :rtype: :py:class:`NXOpen.Mechatronics.ComparisonResultElectricalPartStatus` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    PartNumber: str = ...
    """
    Returns  the part number from the electrical part 
    
    <hr>
    
    Getter Method
    
    Signature ``PartNumber`` 
    
    :returns:  Part number of electrical part  
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """


class LinearLimitJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.LinearLimitJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.LinearLimitJointCollection.CreateLinearLimitJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    AttachmentPoint: NXOpen.Point = ...
    """
    Returns or sets  the attachment point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttachmentPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AttachmentPoint`` 
    
    :param attachmentPoint: 
    :type attachmentPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    BasePoint: NXOpen.Point = ...
    """
    Returns or sets  the base point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BasePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BasePoint`` 
    
    :param basePoint: 
    :type basePoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MaximumPosition: NXOpen.Expression = ...
    """
    Returns  the maximum position.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaximumPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MinimumPosition: NXOpen.Expression = ...
    """
    Returns  the minimum position.  
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: LinearLimitJointBuilder = ...  # unknown typename


class TagTableCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of TagTable.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX10.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateTagTableBuilder(self, tagTableObject: TagTableObject) -> TagTableBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.TagTableBuilder`.  
        
        Signature ``CreateTagTableBuilder(tagTableObject)`` 
        
        :param tagTableObject:  :py:class:`NXOpen.Mechatronics.TagTableObject` to be edited, if None then create a new one  
        :type tagTableObject: :py:class:`NXOpen.Mechatronics.TagTableObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.TagTableBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> TagTableObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.TagTableObject` with the given name.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.TagTableObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.TagTableObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.TagTableObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class GraphControlBuilderEndActionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphControlBuilderEndAction():
    """
    the action in the end of graph. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RestartfromBeginning", "restart from the beginning of graph."
       "DeactivateGraphControl", "deactivate this graph control."
    """
    RestartfromBeginning = 0  # GraphControlBuilderEndActionMemberType
    DeactivateGraphControl = 1  # GraphControlBuilderEndActionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphControlBuilderMasterValueUnitMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphControlBuilderMasterValueUnit():
    """
    the Master Unit types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Rotary", "Rotary"
       "Time", "Time"
    """
    Linear = 0  # GraphControlBuilderMasterValueUnitMemberType
    Rotary = 1  # GraphControlBuilderMasterValueUnitMemberType
    Time = 2  # GraphControlBuilderMasterValueUnitMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphControlBuilderSlaveValueUnitMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphControlBuilderSlaveValueUnit():
    """
    the Slave Unit types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LinearPosition", "Linear Position"
       "RotaryPosition", "Rotary Position"
       "LinearSpeed", "Linear Speed"
       "RotarySpeed", "Rotary Speed"
    """
    LinearPosition = 0  # GraphControlBuilderSlaveValueUnitMemberType
    RotaryPosition = 1  # GraphControlBuilderSlaveValueUnitMemberType
    LinearSpeed = 2  # GraphControlBuilderSlaveValueUnitMemberType
    RotarySpeed = 3  # GraphControlBuilderSlaveValueUnitMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphControlBuilderMasterJointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphControlBuilderMasterJointType():
    """
    the Master axis types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Rotary", "Rotary"
    """
    Linear = 0  # GraphControlBuilderMasterJointTypeMemberType
    Rotary = 1  # GraphControlBuilderMasterJointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphControlBuilderMasterTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GraphControlBuilderMasterType():
    """
    the Master types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Time", "Time"
       "Axis", "Axis"
       "Signal", "Signal"
    """
    Time = 0  # GraphControlBuilderMasterTypeMemberType
    Axis = 1  # GraphControlBuilderMasterTypeMemberType
    Signal = 2  # GraphControlBuilderMasterTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GraphControlBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.GraphControl` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.GraphControlCollection.CreateGraphControlBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    class EndAction():
        """
        the action in the end of graph. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RestartfromBeginning", "restart from the beginning of graph."
           "DeactivateGraphControl", "deactivate this graph control."
        """
        RestartfromBeginning = 0  # GraphControlBuilderEndActionMemberType
        DeactivateGraphControl = 1  # GraphControlBuilderEndActionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MasterValueUnit():
        """
        the Master Unit types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Rotary", "Rotary"
           "Time", "Time"
        """
        Linear = 0  # GraphControlBuilderMasterValueUnitMemberType
        Rotary = 1  # GraphControlBuilderMasterValueUnitMemberType
        Time = 2  # GraphControlBuilderMasterValueUnitMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SlaveValueUnit():
        """
        the Slave Unit types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LinearPosition", "Linear Position"
           "RotaryPosition", "Rotary Position"
           "LinearSpeed", "Linear Speed"
           "RotarySpeed", "Rotary Speed"
        """
        LinearPosition = 0  # GraphControlBuilderSlaveValueUnitMemberType
        RotaryPosition = 1  # GraphControlBuilderSlaveValueUnitMemberType
        LinearSpeed = 2  # GraphControlBuilderSlaveValueUnitMemberType
        RotarySpeed = 3  # GraphControlBuilderSlaveValueUnitMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MasterJointType():
        """
        the Master axis types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Rotary", "Rotary"
        """
        Linear = 0  # GraphControlBuilderMasterJointTypeMemberType
        Rotary = 1  # GraphControlBuilderMasterJointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class MasterType():
        """
        the Master types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Time", "Time"
           "Axis", "Axis"
           "Signal", "Signal"
        """
        Time = 0  # GraphControlBuilderMasterTypeMemberType
        Axis = 1  # GraphControlBuilderMasterTypeMemberType
        Signal = 2  # GraphControlBuilderMasterTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CamProfile: CamProfile = ...
    """
    Returns or sets  a cam profile that contains a number of curves that describes the dependency of 
    the motion of a Slave Axis with respect to the Master Axis.  
    
    This can be :py:class:`NXOpen.Mechatronics.CamProfile`.
    
    <hr>
    
    Getter Method
    
    Signature ``CamProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamProfile` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CamProfile`` 
    
    :param profile: 
    :type profile: :py:class:`NXOpen.Mechatronics.CamProfile` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    GraphEndAction: GraphControlBuilderEndAction = ...
    """
    Returns or sets  the graph end action.  
    
    <hr>
    
    Getter Method
    
    Signature ``GraphEndAction`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GraphControlBuilderEndAction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``GraphEndAction`` 
    
    :param graphEndAction: 
    :type graphEndAction: :py:class:`NXOpen.Mechatronics.GraphControlBuilderEndAction` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    InitialTime: NXOpen.Expression = ...
    """
    Returns  the initial offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``InitialTime`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterAxisType: GraphControlBuilderMasterJointType = ...
    """
    Returns or sets  the master axis type 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterAxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GraphControlBuilderMasterJointType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MasterAxisType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Mechatronics.GraphControlBuilderMasterJointType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterBaseType: GraphControlBuilderMasterType = ...
    """
    Returns or sets  the master type 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterBaseType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GraphControlBuilderMasterType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MasterBaseType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Mechatronics.GraphControlBuilderMasterType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterOffset: NXOpen.Expression = ...
    """
    Returns   an offset that specifies from the  master axis zero point relative to the path 
    zero point for path interpolation.  
    
    <hr>
    
    Getter Method
    
    Signature ``MasterOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MasterScaleFactor: NXOpen.Expression = ...
    """
    Returns   the transformation that is described between the normalized representation to the absolute 
    values.  
    
    It applied to slave axis. 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterScaleFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MasterUnit: GraphControlBuilderMasterValueUnit = ...
    """
    Returns or sets  the master value unit 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterUnit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GraphControlBuilderMasterValueUnit` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MasterUnit`` 
    
    :param masterType: 
    :type masterType: :py:class:`NXOpen.Mechatronics.GraphControlBuilderMasterValueUnit` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MotionProfile: MotionProfile = ...
    """
    Returns or sets  the motion profile.  
    
    This can be :py:class:`NXOpen.Mechatronics.MotionProfile`. 
    
    <hr>
    
    Getter Method
    
    Signature ``MotionProfile`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MotionProfile` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MotionProfile`` 
    
    :param profile: 
    :type profile: :py:class:`NXOpen.Mechatronics.MotionProfile` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectAxisControl: SelectPhysicsConstraint = ...
    """
    Returns  the select axis control.  
    
    This can be a :py:class:`NXOpen.Mechatronics.SpeedControl`, :py:class:`NXOpen.Mechatronics.PositionControl`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectAxisControl`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsConstraint` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectMasterJoint: SelectPhysicsJoint = ...
    """
    Returns  the select axis joint.  
    
    This can be a * :py:class:`NXOpen.Mechatronics.HingeJoint`,
    :py:class:`NXOpen.Mechatronics.SlidingJoint`, :py:class:`NXOpen.Mechatronics.CylindricalJoint`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectMasterJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SelectMasterSignal: SelectAdapterSignal = ...
    """
    Returns  the select axis joint.  
    
    This can be a * :py:class:`NXOpen.Mechatronics.AdapterSignal`. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectMasterSignal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectAdapterSignal` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SlaveOffset: NXOpen.Expression = ...
    """
    Returns  an offset that specifies from the  master slave zero point relative to the path 
    zero point for path interpolation.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SlaveScaleFactor: NXOpen.Expression = ...
    """
    Returns  the transformation that is described between the normalized representation to the absolute 
    values.  
    
    It applied to slave axis.
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveScaleFactor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SlaveUnit: GraphControlBuilderSlaveValueUnit = ...
    """
    Returns or sets  the slave value unit 
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveUnit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GraphControlBuilderSlaveValueUnit` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SlaveUnit`` 
    
    :param slaveType: 
    :type slaveType: :py:class:`NXOpen.Mechatronics.GraphControlBuilderSlaveValueUnit` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ValueOffset: NXOpen.Expression = ...
    """
    Returns  the value offset.  
    
    <hr>
    
    Getter Method
    
    Signature ``ValueOffset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: GraphControlBuilder = ...  # unknown typename


class TransmitterEntryBuilderTransmitterEntryCandidateTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TransmitterEntryBuilderTransmitterEntryCandidateType():
    """
    represents the candidate option.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AnyObject", "Any rigid objects"
       "OnlySelected", "Selected sources"
    """
    AnyObject = 0  # TransmitterEntryBuilderTransmitterEntryCandidateTypeMemberType
    OnlySelected = 1  # TransmitterEntryBuilderTransmitterEntryCandidateTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TransmitterEntryBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.TransmitterEntry` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.TransmitterEntryCollection.CreateTransmitterEntryBuilder`
    
    .. versionadded:: NX12.0.0
    """
    
    class TransmitterEntryCandidateType():
        """
        represents the candidate option.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AnyObject", "Any rigid objects"
           "OnlySelected", "Selected sources"
        """
        AnyObject = 0  # TransmitterEntryBuilderTransmitterEntryCandidateTypeMemberType
        OnlySelected = 1  # TransmitterEntryBuilderTransmitterEntryCandidateTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Candidate: NXOpen.SelectNXObjectList = ...
    """
    Returns  the source selection. This can be a :py:class:`NXOpen.Mechatronics.RigidBody`,
    :py:class:`NXOpen.Mechatronics.ObjectTransformer` or :py:class:`NXOpen.Mechatronics.ObjectSource`.  
    
    <hr>
    
    Getter Method
    
    Signature ``Candidate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CandidateType: TransmitterEntryBuilderTransmitterEntryCandidateType = ...
    """
    Returns or sets  the type of candidate.  
    
    <hr>
    
    Getter Method
    
    Signature ``CandidateType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.TransmitterEntryBuilderTransmitterEntryCandidateType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CandidateType`` 
    
    :param candType: 
    :type candType: :py:class:`NXOpen.Mechatronics.TransmitterEntryBuilderTransmitterEntryCandidateType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CollisionSensor: SelectCollisionSensorList = ...
    """
    Returns  the detector.  
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionSensor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectCollisionSensorList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExecuteOnce: bool = ...
    """
    Returns or sets  the execute once per activation. If this is true, the transmission will
    only happen once.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExecuteOnce`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ExecuteOnce`` 
    
    :param executeOnce: 
    :type executeOnce: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Port: int = ...
    """
    Returns or sets  the port of the sender.  
    
    <hr>
    
    Getter Method
    
    Signature ``Port`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Port`` 
    
    :param port: 
    :type port: int 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: TransmitterEntryBuilder = ...  # unknown typename


class ChainJointBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.ChainJointBuilder`.  
    
    When :py:meth:`Builder.Commit` is called None will be returned.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateChainJointBuilder`
    
    .. versionadded:: NX12.0.0
    """
    AnchorPointSecond: NXOpen.Point = ...
    """
    Returns or sets  the second anchor point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPointSecond`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPointSecond`` 
    
    :param anchorPoint: 
    :type anchorPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AngularLowerLimit: NXOpen.Expression = ...
    """
    Returns  the angular lower limit.  
    
    The lower limit setup for joint angular movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularLowerLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    AngularUpperLimit: NXOpen.Expression = ...
    """
    Returns  the angular upper limit.  
    
    The upper limit setup for joint angular movement. 
    
    <hr>
    
    Getter Method
    
    Signature ``AngularUpperLimit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    BaseAnchorPoint: NXOpen.Point = ...
    """
    Returns or sets  the anchor point.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseAnchorPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseAnchorPoint`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    BaseAxisVector: NXOpen.Direction = ...
    """
    Returns or sets  the axis vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseAxisVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseAxisVector`` 
    
    :param axisVector: 
    :type axisVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableAngularLowerLimit: bool = ...
    """
    Returns or sets  the angular lower limit option.  
    
    If the enable is true, then this joint will be
    applied the lower limit in angular direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableAngularLowerLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableAngularLowerLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableAngularUpperLimit: bool = ...
    """
    Returns or sets  the angular upper limit option.  
    
    If the enable is true, then this joint will be
    applied the upper limit in angular direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableAngularUpperLimit`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableAngularUpperLimit`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableSecondAnchor: bool = ...
    """
    Returns or sets  the second anchor point option.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnableSecondAnchor`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableSecondAnchor`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Geometry: NXOpen.SelectNXObjectList = ...
    """
    Returns  the geometries.  
    
    This can be a :py:class:`NXOpen.Assemblies.ComponentAssembly` or
    :py:class:`NXOpen.Mechatronics.RigidBody`
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StartAngle: NXOpen.Expression = ...
    """
    Returns  the start angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``StartAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: ChainJointBuilder = ...  # unknown typename


class ObjectSource(NXOpen.DisplayableObject):
    """
    Represents the Object Source.  
    
    Object Source is used to define some objects that
    can be copied during simulation. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ObjectSourceBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: ObjectSource = ...  # unknown typename


class SHMSignalClientBuilderEndianTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SHMSignalClientBuilderEndianType():
    """
    Represents endian type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Little", "little endian"
       "Big", " - "
    """
    Little = 0  # SHMSignalClientBuilderEndianTypeMemberType
    Big = 1  # SHMSignalClientBuilderEndianTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SHMSignalClientBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SHMSignalClientBuilder` builder.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    class EndianType():
        """
        Represents endian type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Little", "little endian"
           "Big", " - "
        """
        Little = 0  # SHMSignalClientBuilderEndianTypeMemberType
        Big = 1  # SHMSignalClientBuilderEndianTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SHMSignal():
        """
        Represents SHMTag info definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.SHMSignalClientBuilder.SHMSignal()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        SignalName: str = ...
        """
        Signal Name          
        <hr>
        
        Field Value
        Type:str
        """
        EDataType: SignalBuilderDataType = ...
        """
        Signal dataType              
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
        """
        Value: str = ...
        """
        Signal value            
        <hr>
        
        Field Value
        Type:str
        """
        EIOType: SignalBuilderExternalSignalIOType = ...
        """
        Signal IO Type            
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderExternalSignalIOType`
        """
    
    
    class SHMInfo():
        """
        Represents SHMInstance info definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.SHMSignalClientBuilder.SHMInfo()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        SHM Name          
        <hr>
        
        Field Value
        Type:str
        """
        EndianType: SHMSignalClientBuilderEndianType = ...
        """
        Endian type              
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SHMSignalClientBuilderEndianType`
        """
        Status: str = ...
        """
        Status            
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def RefreshRegisteredInstances(self, instanceNames: 'list[str]') -> None:
        """
        Refresh registered SHMSignal instances.  
        
        Signature ``RefreshRegisteredInstances(instanceNames)`` 
        
        :param instanceNames: 
        :type instanceNames: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSignals(self, configurationName: str, signalInfo: 'list[SHMSignalClientBuilderSHMSignal_Struct]') -> None:
        """
        Set SHM Client Signal Infomation  
        
        Signature ``SetSignals(configurationName, signalInfo)`` 
        
        :param configurationName: 
        :type configurationName: str 
        :param signalInfo: Array of signal infomation 
        :type signalInfo: list of :py:class:`NXOpen.Mechatronics.SHMSignalClientBuilderSHMSignal_Struct` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetSignals(self, configurationName: str) -> 'list[SHMSignalClientBuilderSHMSignal_Struct]':
        """
        Get SHM Client Infomation  
        
        Signature ``GetSignals(configurationName)`` 
        
        :param configurationName: 
        :type configurationName: str 
        :returns: 
        :rtype: list of :py:class:`NXOpen.Mechatronics.SHMSignalClientBuilderSHMSignal_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSHMInstance(self, instanceName: str, eEndianType: SHMSignalClientBuilderEndianType, strStatus: str) -> None:
        """
        Set SHM Client Instance Base Information  
        
        Signature ``SetSHMInstance(instanceName, eEndianType, strStatus)`` 
        
        :param instanceName: 
        :type instanceName: str 
        :param eEndianType: 
        :type eEndianType: :py:class:`NXOpen.Mechatronics.SHMSignalClientBuilderEndianType` 
        :param strStatus: 
        :type strStatus: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetSHMInstance(self, instanceName: str) -> tuple:
        """
        Get SHM Client Instance Base Information  
        
        Signature ``GetSHMInstance(instanceName)`` 
        
        :param instanceName: 
        :type instanceName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (eEndianType, strStatus). eEndianType is a :py:class:`NXOpen.Mechatronics.SHMSignalClientBuilderEndianType`. strStatus is a str. 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedConfigurationPart: NXOpen.Part = ...
    """
    Returns or sets  the selected configuration part.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationPart`` 
    
    :param ownerPart: 
    :type ownerPart: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SHMSignalClientBuilder = ...  # unknown typename


class PathConstraintFrameBuilderCurveTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class PathConstraintFrameBuilderCurveTypes():
    """
    the curve types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Line", "line"
       "Spline", "spline"
    """
    Line = 0  # PathConstraintFrameBuilderCurveTypesMemberType
    Spline = 1  # PathConstraintFrameBuilderCurveTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class PathConstraintFrameBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a frame that constrains the orientation along the path curve.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PathConstraintJointBuilder.NewPathFrame`
    
    .. versionadded:: NX10.0.0
    """
    
    class CurveTypes():
        """
        the curve types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Line", "line"
           "Spline", "spline"
        """
        Line = 0  # PathConstraintFrameBuilderCurveTypesMemberType
        Spline = 1  # PathConstraintFrameBuilderCurveTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AssociatedCurve: NXOpen.NXObject = ...
    """
    Returns or sets  the associated curve.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssociatedCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AssociatedCurve`` 
    
    :param curve: 
    :type curve: :py:class:`NXOpen.NXObject` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CurveType: PathConstraintFrameBuilderCurveTypes = ...
    """
    Returns or sets  the curve type.  
    
    <hr>
    
    Getter Method
    
    Signature ``CurveType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilderCurveTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CurveType`` 
    
    :param curveType: 
    :type curveType: :py:class:`NXOpen.Mechatronics.PathConstraintFrameBuilderCurveTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PathFrame: NXOpen.CoordinateSystem = ...
    """
    Returns or sets  the path frame.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathFrame`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PathFrame`` 
    
    :param pathFrame: 
    :type pathFrame: :py:class:`NXOpen.CoordinateSystem` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PathParameter: float = ...
    """
    Returns or sets  the path parameter.  
    
    <hr>
    
    Getter Method
    
    Signature ``PathParameter`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PathParameter`` 
    
    :param pathParameter: 
    :type pathParameter: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: PathConstraintFrameBuilder = ...  # unknown typename


class ExpressionBlockFormula(NXOpen.NXObject):
    """
    Represents the ExpressionBlockFormula class  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ExpressionBlockFormulaBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: ExpressionBlockFormula = ...  # unknown typename


class CamProfileBuilderMasterValueUnitMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CamProfileBuilderMasterValueUnit():
    """
    The master value unit indicates which type master joint is. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Linear", "Linear"
       "Rotary", "Rotary"
       "Time", "Time"
    """
    Linear = 0  # CamProfileBuilderMasterValueUnitMemberType
    Rotary = 1  # CamProfileBuilderMasterValueUnitMemberType
    Time = 2  # CamProfileBuilderMasterValueUnitMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CamProfileBuilderProfileCyclicTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CamProfileBuilderProfileCyclicType():
    """
    Indicates which cyclic type should be take.The type of Cam Profile can be switched between non-cyclic,
    cyclic and relative cyclic
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RelativeCyclic", "In Relative Cyclic Cam Profiles the start point and end point of the profile do not necessarily have to be equal."
       "Cyclic", "In Cyclic Cam Profiles the points at the beginning and the end of the Master Axis range need to be identical with respect to Slave Axis value, slope and curve."
       "NonCyclic", "Non-cyclic Cam Profiles are defined only in the defined master axis range. Exceeding this range will cause an error."
    """
    RelativeCyclic = 0  # CamProfileBuilderProfileCyclicTypeMemberType
    Cyclic = 1  # CamProfileBuilderProfileCyclicTypeMemberType
    NonCyclic = 2  # CamProfileBuilderProfileCyclicTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CamProfileBuilderSlaveValueUnitMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CamProfileBuilderSlaveValueUnit():
    """
    The master value unit indicates which type master joint is. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LinearPosition", "Linear Position"
       "RotaryPosition", "Rotary Position"
       "LinearSpeed", "Linear Speed"
       "RotarySpeed", "Rotary Speed"
    """
    LinearPosition = 0  # CamProfileBuilderSlaveValueUnitMemberType
    RotaryPosition = 1  # CamProfileBuilderSlaveValueUnitMemberType
    LinearSpeed = 2  # CamProfileBuilderSlaveValueUnitMemberType
    RotarySpeed = 3  # CamProfileBuilderSlaveValueUnitMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CamProfileBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.CamProfile` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.CamProfileCollection.CreateCamProfileBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class MasterValueUnit():
        """
        The master value unit indicates which type master joint is. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Linear", "Linear"
           "Rotary", "Rotary"
           "Time", "Time"
        """
        Linear = 0  # CamProfileBuilderMasterValueUnitMemberType
        Rotary = 1  # CamProfileBuilderMasterValueUnitMemberType
        Time = 2  # CamProfileBuilderMasterValueUnitMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProfileCyclicType():
        """
        Indicates which cyclic type should be take.The type of Cam Profile can be switched between non-cyclic,
        cyclic and relative cyclic
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RelativeCyclic", "In Relative Cyclic Cam Profiles the start point and end point of the profile do not necessarily have to be equal."
           "Cyclic", "In Cyclic Cam Profiles the points at the beginning and the end of the Master Axis range need to be identical with respect to Slave Axis value, slope and curve."
           "NonCyclic", "Non-cyclic Cam Profiles are defined only in the defined master axis range. Exceeding this range will cause an error."
        """
        RelativeCyclic = 0  # CamProfileBuilderProfileCyclicTypeMemberType
        Cyclic = 1  # CamProfileBuilderProfileCyclicTypeMemberType
        NonCyclic = 2  # CamProfileBuilderProfileCyclicTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SlaveValueUnit():
        """
        The master value unit indicates which type master joint is. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LinearPosition", "Linear Position"
           "RotaryPosition", "Rotary Position"
           "LinearSpeed", "Linear Speed"
           "RotarySpeed", "Rotary Speed"
        """
        LinearPosition = 0  # CamProfileBuilderSlaveValueUnitMemberType
        RotaryPosition = 1  # CamProfileBuilderSlaveValueUnitMemberType
        LinearSpeed = 2  # CamProfileBuilderSlaveValueUnitMemberType
        RotarySpeed = 3  # CamProfileBuilderSlaveValueUnitMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Element():
        """
        Contains segment information of a motion segment .  
        
        Constructor: 
        NXOpen.Mechatronics.CamProfileBuilder.Element()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Id: int = ...
        """
        segment id                     
        <hr>
        
        Field Value
        Type:int
        """
        SegmentName: str = ...
        """
        segment name                   
        <hr>
        
        Field Value
        Type:str
        """
        SegmentType: int = ...
        """
        segment type                   
        <hr>
        
        Field Value
        Type:int
        """
        CurveType: int = ...
        """
        curve type                     
        <hr>
        
        Field Value
        Type:int
        """
        Slope: float = ...
        """
        point slope                    
        <hr>
        
        Field Value
        Type:float
        """
        Curvature: float = ...
        """
        point curvature                
        <hr>
        
        Field Value
        Type:float
        """
        MasterMin: float = ...
        """
        segment master min             
        <hr>
        
        Field Value
        Type:float
        """
        MasterMax: float = ...
        """
        segment master max             
        <hr>
        
        Field Value
        Type:float
        """
        SlaveMin: float = ...
        """
        segment slave min              
        <hr>
        
        Field Value
        Type:float
        """
        SlaveMax: float = ...
        """
        segment slave max              
        <hr>
        
        Field Value
        Type:float
        """
        Xn1: float = ...
        """
        segment nomalize lower define range 
        <hr>
        
        Field Value
        Type:float
        """
        Xn2: float = ...
        """
        segment nomalize higher define range
        <hr>
        
        Field Value
        Type:float
        """
        A0: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        A1: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        A2: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        A3: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        A4: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        A5: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        A6: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        Amplitude: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        AngularFrequency: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        Phase: float = ...
        """
        segment polynomial coefficient 
        <hr>
        
        Field Value
        Type:float
        """
        SlopeEqualPrev: bool = ...
        """
        if the segment slope equal with the previous segment
        <hr>
        
        Field Value
        Type:bool
        """
        SlopeEqualNext: bool = ...
        """
        if the segment slope equal with the next segment
        <hr>
        
        Field Value
        Type:bool
        """
        CurveEqualPrev: bool = ...
        """
        if the segment curvature equal with the previous segment
        <hr>
        
        Field Value
        Type:bool
        """
        CurveEqualNext: bool = ...
        """
        if the segment curvature equal with the next segment
        <hr>
        
        Field Value
        Type:bool
        """
        Slope2: float = ...
        """
        segment slope of upper end 
        <hr>
        
        Field Value
        Type:float
        """
        Jerk: float = ...
        """
        segment jerk 
        <hr>
        
        Field Value
        Type:float
        """
        FormulaType: int = ...
        """
        traversal segments type
        <hr>
        
        Field Value
        Type:int
        """
        LambdaValue: float = ...
        """
        traversal segment turning point factor 
        <hr>
        
        Field Value
        Type:float
        """
        OptimizeType: int = ...
        """
        traversal segment optimization type of traverse type
        <hr>
        
        Field Value
        Type:int
        """
        YnMin: float = ...
        """
        segment minimum slave value in normalized range
        <hr>
        
        Field Value
        Type:float
        """
        YnMax: float = ...
        """
        segment maximum slave value in normalized range
        <hr>
        
        Field Value
        Type:float
        """
    
    
    def FindElementIndex(self, element: CamProfileBuilderElement_Struct) -> int:
        """
        Find the element index.  
        
        Signature ``FindElementIndex(element)`` 
        
        :param element: 
        :type element: :py:class:`NXOpen.Mechatronics.CamProfileBuilderElement_Struct` 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AddElement(self, part: NXOpen.NXObject, element: CamProfileBuilderElement_Struct) -> None:
        """
        Add element to builder.  
        
        Signature ``AddElement(part, element)`` 
        
        :param part: 
        :type part: :py:class:`NXOpen.NXObject` 
        :param element: 
        :type element: :py:class:`NXOpen.Mechatronics.CamProfileBuilderElement_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def EditElement(self, index: int, part: NXOpen.NXObject, element: CamProfileBuilderElement_Struct) -> None:
        """
        Edit the specific element of builder.  
        
        Signature ``EditElement(index, part, element)`` 
        
        :param index: The element index  
        :type index: int 
        :param part: 
        :type part: :py:class:`NXOpen.NXObject` 
        :param element: 
        :type element: :py:class:`NXOpen.Mechatronics.CamProfileBuilderElement_Struct` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RemoveElementByIndex(self, index: int) -> None:
        """
        Remove element by index.  
        
        Signature ``RemoveElementByIndex(index)`` 
        
        :param index: 
        :type index: int 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def ClearElements(self) -> None:
        """
        Clear elements .  
        
        Signature ``ClearElements()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSegmentTable(self, segmentTableObject: CamProfile) -> None:
        """
        Set segment table.  
        
        Signature ``SetSegmentTable(segmentTableObject)`` 
        
        :param segmentTableObject: 
        :type segmentTableObject: :py:class:`NXOpen.Mechatronics.CamProfile` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AskElementByIndex(self, index: int) -> CamProfileBuilderElement_Struct:
        """
        Ask segment element.  
        
        Signature ``AskElementByIndex(index)`` 
        
        :param index: 
        :type index: int 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.CamProfileBuilderElement_Struct` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def AskElementsLength(self) -> int:
        """
        Ask segments length.  
        
        Signature ``AskElementsLength()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SwitchSegmentTable(self, segmentTableObject: CamProfile) -> None:
        """
        Switch segments table object.  
        
        Signature ``SwitchSegmentTable(segmentTableObject)`` 
        
        :param segmentTableObject: 
        :type segmentTableObject: :py:class:`NXOpen.Mechatronics.CamProfile` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    CheckingG2Continuity: bool = ...
    """
    Returns or sets  the indicator that a cam profile should check G2 continuous or not 
    
    <hr>
    
    Getter Method
    
    Signature ``CheckingG2Continuity`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CheckingG2Continuity`` 
    
    :param checking: 
    :type checking: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CyclicType: CamProfileBuilderProfileCyclicType = ...
    """
    Returns or sets  the cyclic type of a cam profile
    
    <hr>
    
    Getter Method
    
    Signature ``CyclicType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamProfileBuilderProfileCyclicType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CyclicType`` 
    
    :param cyclicType: 
    :type cyclicType: :py:class:`NXOpen.Mechatronics.CamProfileBuilderProfileCyclicType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    IsForElecCam: bool = ...
    """
    Returns or sets   the indicator that a cam profile is designed for a electronic cam 
    
    <hr>
    
    Getter Method
    
    Signature ``IsForElecCam`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
       Set the boolean using :py:meth:`Mechatronics.CamProfileBuilder.CheckingG2Continuity` to query or edit it.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``IsForElecCam`` 
    
    :param isForElecCam: 
    :type isForElecCam: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
       Set the boolean using :py:meth:`Mechatronics.CamProfileBuilder.CheckingG2Continuity` to query or edit it.
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterMaximum: NXOpen.Expression = ...
    """
    Returns  the maximum master value 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterMaximum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterMinimum: NXOpen.Expression = ...
    """
    Returns  the minimum master value 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterMinimum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MasterUnit: CamProfileBuilderMasterValueUnit = ...
    """
    Returns or sets  the type of master joint 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterUnit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamProfileBuilderMasterValueUnit` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MasterUnit`` 
    
    :param masterUnit: 
    :type masterUnit: :py:class:`NXOpen.Mechatronics.CamProfileBuilderMasterValueUnit` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the cam profile name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveMaximum: NXOpen.Expression = ...
    """
    Returns  the maximum slave value.  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveMaximum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveMinimum: NXOpen.Expression = ...
    """
    Returns  the minimum slave  
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveMinimum`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SlaveUnit: CamProfileBuilderSlaveValueUnit = ...
    """
    Returns or sets  the type of slave joint or slave controller 
    
    <hr>
    
    Getter Method
    
    Signature ``SlaveUnit`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CamProfileBuilderSlaveValueUnit` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``SlaveUnit`` 
    
    :param slaveUnit: 
    :type slaveUnit: :py:class:`NXOpen.Mechatronics.CamProfileBuilderSlaveValueUnit` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: CamProfileBuilder = ...  # unknown typename


class ExpressionBlockCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ExpressionBlockObject.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateExpressionBlockBuilder(self, expressionBlockObject: ExpressionBlockObject) -> ExpressionBlockBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ExpressionBlockBuilder`.  
        
        Signature ``CreateExpressionBlockBuilder(expressionBlockObject)`` 
        
        :param expressionBlockObject:  :py:class:`NXOpen.Mechatronics.ExpressionBlockObject` to be edited, if None then create a new one  
        :type expressionBlockObject: :py:class:`NXOpen.Mechatronics.ExpressionBlockObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ExpressionBlockBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ExpressionBlockObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ExpressionBlockObject` with the given name.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ExpressionBlockObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ExpressionBlockObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ExpressionBlockObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class CollisionBodyBuilderCollisionShapeTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CollisionBodyBuilderCollisionShapeTypes():
    """
    the collide shape types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Box", "Box"
       "Sphere", "Sphere"
       "Cylinder", "Cylinder"
       "Capsule", "Capsule"
       "Convex", "Convex"
       "MultiConvex", "Multi-Convex"
       "Mesh", "Mesh"
    """
    Box = 0  # CollisionBodyBuilderCollisionShapeTypesMemberType
    Sphere = 1  # CollisionBodyBuilderCollisionShapeTypesMemberType
    Cylinder = 2  # CollisionBodyBuilderCollisionShapeTypesMemberType
    Capsule = 3  # CollisionBodyBuilderCollisionShapeTypesMemberType
    Convex = 4  # CollisionBodyBuilderCollisionShapeTypesMemberType
    MultiConvex = 5  # CollisionBodyBuilderCollisionShapeTypesMemberType
    Mesh = 6  # CollisionBodyBuilderCollisionShapeTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CollisionBodyBuilderShapePropertyTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CollisionBodyBuilderShapePropertyTypes():
    """
    the shape calculation option. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "automatic"
       "UserDefined", "user defined"
    """
    Automatic = 0  # CollisionBodyBuilderShapePropertyTypesMemberType
    UserDefined = 1  # CollisionBodyBuilderShapePropertyTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CollisionBodyBuilder(CollisionShapeBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.CollisionBodyBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.CollisionBodyCollection.CreateCollisionBodyBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class CollisionShapeTypes():
        """
        the collide shape types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Box", "Box"
           "Sphere", "Sphere"
           "Cylinder", "Cylinder"
           "Capsule", "Capsule"
           "Convex", "Convex"
           "MultiConvex", "Multi-Convex"
           "Mesh", "Mesh"
        """
        Box = 0  # CollisionBodyBuilderCollisionShapeTypesMemberType
        Sphere = 1  # CollisionBodyBuilderCollisionShapeTypesMemberType
        Cylinder = 2  # CollisionBodyBuilderCollisionShapeTypesMemberType
        Capsule = 3  # CollisionBodyBuilderCollisionShapeTypesMemberType
        Convex = 4  # CollisionBodyBuilderCollisionShapeTypesMemberType
        MultiConvex = 5  # CollisionBodyBuilderCollisionShapeTypesMemberType
        Mesh = 6  # CollisionBodyBuilderCollisionShapeTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShapePropertyTypes():
        """
        the shape calculation option. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "automatic"
           "UserDefined", "user defined"
        """
        Automatic = 0  # CollisionBodyBuilderShapePropertyTypesMemberType
        UserDefined = 1  # CollisionBodyBuilderShapePropertyTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetGeometry(self, geometries: 'list[NXOpen.NXObject]') -> None:
        """
        Sets the geometry
        
        Signature ``SetGeometry(geometries)`` 
        
        :param geometries:  Input geometries 
        :type geometries: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CalculateConvex(self) -> None:
        """
        The convex of the collide.  
        
        Call this function to generate convex when 
        :py:meth:`NXOpen.Mechatronics.CollisionBodyBuilder.CollisionShapeTypes` is set 
        to :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Convex <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>`. 
        
        Signature ``CalculateConvex()`` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CalculateMesh(self) -> None:
        """
        The mesh of the collide.  
        
        Call this function to generate mesh when 
        :py:meth:`NXOpen.Mechatronics.CollisionBodyBuilder.CollisionShapeTypes` is set 
        to :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.Mesh <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>`. 
        
        Signature ``CalculateMesh()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CalculateMultiConvex(self) -> None:
        """
        The multi-convex of the collide.  
        
        Call this function to generate multi-convex when 
        :py:meth:`NXOpen.Mechatronics.CollisionBodyBuilder.CollisionShapeTypes` is set 
        to :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes.MultiConvex <NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes>`. 
        
        Signature ``CalculateMultiConvex()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Category: int = ...
    """
    Returns or sets  the category.  
    
    It should be between 0 and 16. 
    
    <hr>
    
    Getter Method
    
    Signature ``Category`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Category`` 
    
    :param category: 
    :type category: int 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CollisionFactor: float = ...
    """
    Returns or sets  the collision factor.  
    
    It should be between 0 and 1.0.
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CollisionFactor`` 
    
    :param factor: 
    :type factor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CollisionMaterial: CollisionMaterial = ...
    """
    Returns or sets  the material.  
    
    This can be a :py:class:`NXOpen.Mechatronics.CollisionMaterial`. 
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionMaterial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionMaterial` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CollisionMaterial`` 
    
    :param collisionMaterial: 
    :type collisionMaterial: :py:class:`NXOpen.Mechatronics.CollisionMaterial` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CollisionProperties: CollisionBodyBuilderShapePropertyTypes = ...
    """
    Returns or sets  the shape option.  
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionProperties`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderShapePropertyTypes` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CollisionProperties`` 
    
    :param collisionProperties: 
    :type collisionProperties: :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderShapePropertyTypes` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    CollisionShape: CollisionBodyBuilderCollisionShapeTypes = ...
    """
    Returns or sets  the shape type.  
    
    <hr>
    
    Getter Method
    
    Signature ``CollisionShape`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``CollisionShape`` 
    
    :param collisionShape: 
    :type collisionShape: :py:class:`NXOpen.Mechatronics.CollisionBodyBuilderCollisionShapeTypes` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Geometry: NXOpen.SelectNXObjectList = ...
    """
    Returns  the geometries.  
    
    This can be a :py:class:`NXOpen.Assemblies.ComponentAssembly`, :py:class:`NXOpen.Point`
    :py:class:`NXOpen.Face`, :py:class:`NXOpen.Edge`, bodies and curves.
    
    <hr>
    
    Getter Method
    
    Signature ``Geometry`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    HighlightOnCollision: bool = ...
    """
    Returns or sets  the highlight on collision.  
    
    <hr>
    
    Getter Method
    
    Signature ``HighlightOnCollision`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``HighlightOnCollision`` 
    
    :param highlight: 
    :type highlight: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StickCollision: bool = ...
    """
    Returns or sets  the option for stick when collision.  
    
    If stickCollision is true, then this collision body
    will become sticky in the simulation. 
    
    <hr>
    
    Getter Method
    
    Signature ``StickCollision`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``StickCollision`` 
    
    :param stickCollision: 
    :type stickCollision: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: CollisionBodyBuilder = ...  # unknown typename


class VelocitySensorCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Velocity Sensor.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateVelocitySensorBuilder(self, velocitySensor: VelocitySensor) -> VelocitySensorBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.VelocitySensorBuilder`.  
        
        Signature ``CreateVelocitySensorBuilder(velocitySensor)`` 
        
        :param velocitySensor:  :py:class:`NXOpen.Mechatronics.VelocitySensor` to be edited, if None then create a new one  
        :type velocitySensor: :py:class:`NXOpen.Mechatronics.VelocitySensor` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.VelocitySensorBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> VelocitySensor:
        """
        Finds the :py:class:`NXOpen.Mechatronics.VelocitySensor` with the given name.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.VelocitySensor`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.VelocitySensor` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.VelocitySensor` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class CollisionMaterialCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Collision Material.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateCollisionMaterialBuilder(self, collisionMaterial: CollisionMaterial) -> CollisionMaterialBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.CollisionMaterialBuilder`.  
        
        Signature ``CreateCollisionMaterialBuilder(collisionMaterial)`` 
        
        :param collisionMaterial:  :py:class:`NXOpen.Mechatronics.CollisionMaterial` to be edited, if None then create a new one  
        :type collisionMaterial: :py:class:`NXOpen.Mechatronics.CollisionMaterial` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.CollisionMaterialBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> CollisionMaterial:
        """
        Finds the :py:class:`NXOpen.Mechatronics.CollisionMaterial` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.CollisionMaterial`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.CollisionMaterial` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.CollisionMaterial` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class HydraulicValve(NXOpen.DisplayableObject):
    """
    Represents the Hydraulic Valve. An Hydraulic Valve is able to control a hydraulic cylinder.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.HydraulicValveBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: HydraulicValve = ...  # unknown typename


class ReadWriteDeviceCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ReadWriteDevice.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX10.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateReadWriteDeviceBuilder(self, readWriteObject: ReadWriteDeviceObject) -> ReadWriteDeviceBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ReadWriteDeviceBuilder`.  
        
        Signature ``CreateReadWriteDeviceBuilder(readWriteObject)`` 
        
        :param readWriteObject:  :py:class:`NXOpen.Mechatronics.ReadWriteDeviceObject` to be edited, if None then create a new one  
        :type readWriteObject: :py:class:`NXOpen.Mechatronics.ReadWriteDeviceObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ReadWriteDeviceBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ReadWriteDeviceObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ReadWriteDeviceObject` with the given name.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ReadWriteDeviceObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ReadWriteDeviceObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ReadWriteDeviceObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class FixedJoint(PhysicsJoint):
    """
    Represents the Fixed Joint.  
    
    Fixed joint is that objects are glued to one
    another completely. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.FixedJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: FixedJoint = ...  # unknown typename


class SpeedControlCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Speed Constraint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSpeedControlBuilder(self, speedControl: SpeedControl) -> SpeedControlBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SpeedControlBuilder`.  
        
        Signature ``CreateSpeedControlBuilder(speedControl)`` 
        
        :param speedControl:  :py:class:`NXOpen.Mechatronics.SpeedControl` to be edited, if None then create a new one  
        :type speedControl: :py:class:`NXOpen.Mechatronics.SpeedControl` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SpeedControlBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> SpeedControl:
        """
        Finds the :py:class:`NXOpen.Mechatronics.SpeedControl` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.SpeedControl`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.SpeedControl` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.SpeedControl` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class AngularSpringJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.AngularSpringJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.AngularSpringJointCollection.CreateAngularSpringJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    AttachmentVector: NXOpen.Direction = ...
    """
    Returns or sets  the attachment vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``AttachmentVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AttachmentVector`` 
    
    :param attachmentVector: 
    :type attachmentVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    BaseVector: NXOpen.Direction = ...
    """
    Returns or sets  the base vector.  
    
    <hr>
    
    Getter Method
    
    Signature ``BaseVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``BaseVector`` 
    
    :param baseVector: 
    :type baseVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Damping: NXOpen.Expression = ...
    """
    Returns  the damping.  
    
    <hr>
    
    Getter Method
    
    Signature ``Damping`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    FeedbackPoint: NXOpen.Point = ...
    """
    Returns or sets  the position of visual feedback point.  
    
    <hr>
    
    Getter Method
    
    Signature ``FeedbackPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``FeedbackPoint`` 
    
    :param feedback: 
    :type feedback: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RelaxedPosition: NXOpen.Expression = ...
    """
    Returns  the relaxed position.  
    
    <hr>
    
    Getter Method
    
    Signature ``RelaxedPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SpringConstant: NXOpen.Expression = ...
    """
    Returns  the spring constant.  
    
    <hr>
    
    Getter Method
    
    Signature ``SpringConstant`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: AngularSpringJointBuilder = ...  # unknown typename


class UDPSignalServerBuilderProtocolMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UDPSignalServerBuilderProtocol():
    """
    Represents the IP protocol.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Tcpserver", " - "
       "Tcpclient", " - "
       "Udpserver", " - "
       "Udpclient", " - "
    """
    Tcpserver = 0  # UDPSignalServerBuilderProtocolMemberType
    Tcpclient = 1  # UDPSignalServerBuilderProtocolMemberType
    Udpserver = 2  # UDPSignalServerBuilderProtocolMemberType
    Udpclient = 3  # UDPSignalServerBuilderProtocolMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UDPSignalServerBuilderCastModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class UDPSignalServerBuilderCastMode():
    """
    Represents the casting mode of udp.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Unicast", " - "
       "Multicast", " - "
       "Broadcast", " - "
    """
    Unicast = 0  # UDPSignalServerBuilderCastModeMemberType
    Multicast = 1  # UDPSignalServerBuilderCastModeMemberType
    Broadcast = 2  # UDPSignalServerBuilderCastModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class UDPSignalServerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Mechatronics.UDPSignalServerBuilder` builder.  
    
    This class is sub-object of another builder, and cannot be directly instantiated.
    
    .. versionadded:: NX12.0.0
    """
    
    class Protocol():
        """
        Represents the IP protocol.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Tcpserver", " - "
           "Tcpclient", " - "
           "Udpserver", " - "
           "Udpclient", " - "
        """
        Tcpserver = 0  # UDPSignalServerBuilderProtocolMemberType
        Tcpclient = 1  # UDPSignalServerBuilderProtocolMemberType
        Udpserver = 2  # UDPSignalServerBuilderProtocolMemberType
        Udpclient = 3  # UDPSignalServerBuilderProtocolMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CastMode():
        """
        Represents the casting mode of udp.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Unicast", " - "
           "Multicast", " - "
           "Broadcast", " - "
        """
        Unicast = 0  # UDPSignalServerBuilderCastModeMemberType
        Multicast = 1  # UDPSignalServerBuilderCastModeMemberType
        Broadcast = 2  # UDPSignalServerBuilderCastModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Signal():
        """
        Represents the data type.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.UDPSignalServerBuilder.Signal()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        SignalTag: NXOpen.NXObject = ...
        """
        Signal Object         
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        BChecked: bool = ...
        """
        Signal Checked Status  
        <hr>
        
        Field Value
        Type:bool
        """
        Offset: str = ...
        """
        Adress value          
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetInstanceNames(self) -> 'list[str]':
        """
        Gets UDP instance names  
        
        Signature ``GetInstanceNames()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectionNames(self, names: 'list[str]') -> None:
        """
        Sets UDP connection names  
        
        Signature ``SetConnectionNames(names)`` 
        
        :param names: 
        :type names: list of str 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetConnectionInformation(self, connectionName: str) -> tuple:
        """
        Gets UDP connection information  
        
        Signature ``GetConnectionInformation(connectionName)`` 
        
        :param connectionName: 
        :type connectionName: str 
        :returns: a tuple 
        :rtype: A tuple consisting of (castMode, remoteIP, remotePort, localIP, localPort, groupIP, rcvBufSize, sendBufSize, updateTime, signals). castMode is a int. remoteIP is a str. remotePort is a int. localIP is a str. localPort is a int. groupIP is a str. rcvBufSize is a int. sendBufSize is a int. updateTime is a float. signals is a list of :py:class:`NXOpen.Mechatronics.UDPSignalServerBuilderSignal_Struct`.   Array of Signal 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetConnectionInformation(self, connectionName: str, castMode: int, remoteIP: str, remotePort: int, localIP: str, localPort: int, groupIP: str, rcvBufSize: int, sendBufSize: int, updateTime: float, signals: 'list[UDPSignalServerBuilderSignal_Struct]') -> None:
        """
        Sets UDP connection information  
        
        Signature ``SetConnectionInformation(connectionName, castMode, remoteIP, remotePort, localIP, localPort, groupIP, rcvBufSize, sendBufSize, updateTime, signals)`` 
        
        :param connectionName: 
        :type connectionName: str 
        :param castMode: 
        :type castMode: int 
        :param remoteIP: 
        :type remoteIP: str 
        :param remotePort: 
        :type remotePort: int 
        :param localIP: 
        :type localIP: str 
        :param localPort: 
        :type localPort: int 
        :param groupIP: 
        :type groupIP: str 
        :param rcvBufSize: 
        :type rcvBufSize: int 
        :param sendBufSize: 
        :type sendBufSize: int 
        :param updateTime: 
        :type updateTime: float 
        :param signals:  Array of Signal  
        :type signals: list of :py:class:`NXOpen.Mechatronics.UDPSignalServerBuilderSignal_Struct` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    SelectedConfigurationName: str = ...
    """
    Returns or sets  the selected configuration name.  
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedConfigurationName`` 
    
    :param configurationName: 
    :type configurationName: str 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: UDPSignalServerBuilder = ...  # unknown typename


class ExpressionBlockFormulaCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of ExpressionBlock Formula.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateExpressionBlockFormulaBuilder(self, expressionBlockFormula: ExpressionBlockFormula) -> ExpressionBlockFormulaBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.ExpressionBlockFormulaBuilder`.  
        
        Signature ``CreateExpressionBlockFormulaBuilder(expressionBlockFormula)`` 
        
        :param expressionBlockFormula:  :py:class:`NXOpen.Mechatronics.ExpressionBlockFormula` to be edited, if None then create a new one  
        :type expressionBlockFormula: :py:class:`NXOpen.Mechatronics.ExpressionBlockFormula` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.ExpressionBlockFormulaBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> ExpressionBlockFormula:
        """
        Finds the :py:class:`NXOpen.Mechatronics.ExpressionBlockFormula` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.ExpressionBlockFormula`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.ExpressionBlockFormula` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.ExpressionBlockFormula` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SignalMappingBuilderAppOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalMappingBuilderAppOption():
    """
    the application option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Opcda", " - "
       "Opcua", " - "
       "Shm", " - "
       "Matlab", " - "
       "Plcsimadv", " - "
       "Tcp", " - "
       "Udp", " - "
       "Profinet", " - "
    """
    Opcda = 0  # SignalMappingBuilderAppOptionMemberType
    Opcua = 1  # SignalMappingBuilderAppOptionMemberType
    Shm = 2  # SignalMappingBuilderAppOptionMemberType
    Matlab = 3  # SignalMappingBuilderAppOptionMemberType
    Plcsimadv = 4  # SignalMappingBuilderAppOptionMemberType
    Tcp = 5  # SignalMappingBuilderAppOptionMemberType
    Udp = 6  # SignalMappingBuilderAppOptionMemberType
    Profinet = 7  # SignalMappingBuilderAppOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalMappingBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SignalMappingBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateSignalMappingBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class AppOption():
        """
        the application option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Opcda", " - "
           "Opcua", " - "
           "Shm", " - "
           "Matlab", " - "
           "Plcsimadv", " - "
           "Tcp", " - "
           "Udp", " - "
           "Profinet", " - "
        """
        Opcda = 0  # SignalMappingBuilderAppOptionMemberType
        Opcua = 1  # SignalMappingBuilderAppOptionMemberType
        Shm = 2  # SignalMappingBuilderAppOptionMemberType
        Matlab = 3  # SignalMappingBuilderAppOptionMemberType
        Plcsimadv = 4  # SignalMappingBuilderAppOptionMemberType
        Tcp = 5  # SignalMappingBuilderAppOptionMemberType
        Udp = 6  # SignalMappingBuilderAppOptionMemberType
        Profinet = 7  # SignalMappingBuilderAppOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetFolder(self, tgFolder: PMNavFolderObject) -> None:
        """
        Sets folder in which the newly created connections will be stored.  
        
        Signature ``SetFolder(tgFolder)`` 
        
        :param tgFolder: 
        :type tgFolder: :py:class:`NXOpen.Mechatronics.PMNavFolderObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ConnectionList: SignalMappingConnectionBuilderList = ...
    """
    Returns  the signal mapping connection builder list.  
    
    <hr>
    
    Getter Method
    
    Signature ``ConnectionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilderList` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    """
    MATLABSignalConnectionList: MATLABSignalConnectionBuilderList = ...
    """
    Returns  the MATLAB Signal Connection Builder list 
    
    <hr>
    
    Getter Method
    
    Signature ``MATLABSignalConnectionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilderList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SHMSignalConnectionList: SHMSignalConnectionBuilderList = ...
    """
    Returns  the SHM Signal Connection Builder list 
    
    <hr>
    
    Getter Method
    
    Signature ``SHMSignalConnectionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SHMSignalConnectionBuilderList` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SignalConnectionList: SignalConnectionBuilderList = ...
    """
    Returns  the signal connection builder list 
    
    <hr>
    
    Getter Method
    
    Signature ``SignalConnectionList`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SignalConnectionBuilderList` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: SignalMappingBuilder = ...  # unknown typename


class ProxyObject(NXOpen.DisplayableObject):
    """
    Represents the Proxy Object class.  
    
    A Proxy Object defines the object
    that has certain parameter attributes, encapsulates certain physics objects,
    and has some geometric representation. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.ProxyObjectBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: ProxyObject = ...  # unknown typename


class PointOnCurveJoint(PhysicsJoint):
    """
    Represents the PointOnCurve Joint.  
    
    A PointOnCurve Joint causes objects to 
    be connected to a curve at a point on the curve. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.PointOnCurveJointBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: PointOnCurveJoint = ...  # unknown typename


class RigidBodyCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Rigid Body.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRigidBodyBuilder(self, rigidBody: RigidBody) -> RigidBodyBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.RigidBodyBuilder`.  
        
        Signature ``CreateRigidBodyBuilder(rigidBody)`` 
        
        :param rigidBody:  :py:class:`NXOpen.Mechatronics.RigidBody` to be edited, if None then create a new one  
        :type rigidBody: :py:class:`NXOpen.Mechatronics.RigidBody` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.RigidBodyBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> RigidBody:
        """
        Finds the :py:class:`NXOpen.Mechatronics.RigidBody` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.RigidBody`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.RigidBody` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.RigidBody` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class SymbolTableCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of SymbolTable.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSymbolTableBuilder(self, symbolTable: SymbolTable) -> SymbolTableBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SymbolTableBuilder`.  
        
        Signature ``CreateSymbolTableBuilder(symbolTable)`` 
        
        :param symbolTable:  :py:class:`NXOpen.Mechatronics.SymbolTable` to be edited, if None then create a new one  
        :type symbolTable: :py:class:`NXOpen.Mechatronics.SymbolTable` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SymbolTableBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> SymbolTable:
        """
        Finds the :py:class:`NXOpen.Mechatronics.SymbolTable` with the given name.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.SymbolTable`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.SymbolTable` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.SymbolTable` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class AdapterFormulaCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Adapter Formula.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateAdapterFormulaBuilder(self, object: AdapterFormula) -> AdapterFormulaBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.AdapterFormulaBuilder`.  
        
        Signature ``CreateAdapterFormulaBuilder(object)`` 
        
        :param object:  :py:class:`NXOpen.Mechatronics.AdapterFormula` to be edited, if None then create a new one  
        :type object: :py:class:`NXOpen.Mechatronics.AdapterFormula` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.AdapterFormulaBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> AdapterFormula:
        """
        Finds the :py:class:`NXOpen.Mechatronics.AdapterFormula` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.AdapterFormula`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.AdapterFormula` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.AdapterFormula` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class GenericSensorBuilderOutputMeasureTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GenericSensorBuilderOutputMeasureType():
    """
    the Measure types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Constant", "MEASURE_UNITLESS"
       "Voltage", "MEASURE_VOLTAGE"
       "Current", "MEASURE_ELECTRIC_CURRENT"
    """
    Constant = 0  # GenericSensorBuilderOutputMeasureTypeMemberType
    Voltage = 1  # GenericSensorBuilderOutputMeasureTypeMemberType
    Current = 2  # GenericSensorBuilderOutputMeasureTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GenericSensorBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.GenericSensor` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.GenericSensorCollection.CreateGenericSensorBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class OutputMeasureType():
        """
        the Measure types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Constant", "MEASURE_UNITLESS"
           "Voltage", "MEASURE_VOLTAGE"
           "Current", "MEASURE_ELECTRIC_CURRENT"
        """
        Constant = 0  # GenericSensorBuilderOutputMeasureTypeMemberType
        Voltage = 1  # GenericSensorBuilderOutputMeasureTypeMemberType
        Current = 2  # GenericSensorBuilderOutputMeasureTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    LowerOutputRange: NXOpen.Expression = ...
    """
    Returns  the lower output range used to scale the generic data. Its measure type contains constant, voltage, current  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    LowerTrimRange: NXOpen.Expression = ...
    """
    Returns  the lower trim range used to trim the generic data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LowerTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MeasureType: GenericSensorBuilderOutputMeasureType = ...
    """
    Returns or sets  the measure type.  
    
    <hr>
    
    Getter Method
    
    Signature ``MeasureType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GenericSensorBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MeasureType`` 
    
    :param measureType: 
    :type measureType: :py:class:`NXOpen.Mechatronics.GenericSensorBuilderOutputMeasureType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PersistentTag: int = ...
    """
    Returns or sets  the Persistent Tag used in the physics object  
    
    <hr>
    
    Getter Method
    
    Signature ``PersistentTag`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``PersistentTag`` 
    
    :param persistentTag: 
    :type persistentTag: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SelectedPhysicsObject: NXOpen.SelectNXObject = ...
    """
    Returns  the physics select. This can be a physics object. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedPhysicsObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperOutputRange: NXOpen.Expression = ...
    """
    Returns  the upper output range used to scale the generic data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperOutputRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UpperTrimRange: NXOpen.Expression = ...
    """
    Returns  the upper trim range used to trim the generic data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UpperTrimRange`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseScale: bool = ...
    """
    Returns or sets  the use scale flag, which is used to control if the generic sensor includes scale parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseScale`` 
    
    :param useScale: 
    :type useScale: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    UseTrim: bool = ...
    """
    Returns or sets  the use trim flag, which is used to control if the generic sensor includes trim parameters.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseTrim`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``UseTrim`` 
    
    :param useTrim: 
    :type useTrim: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: GenericSensorBuilder = ...  # unknown typename


class BallJointBuilder(PhysicsJointBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.BallJoint` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.BallJointCollection.CreateBallJointBuilder`
    
    .. versionadded:: NX7.5.1
    """
    AnchorPoint: NXOpen.Point = ...
    """
    Returns or sets  the anchor point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnchorPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``AnchorPoint`` 
    
    :param anchorPoint: 
    :type anchorPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: BallJointBuilder = ...  # unknown typename


class RackPinionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of RackPinion. 
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateRackPinionBuilder(self, rackPinion: RackPinion) -> RackPinionBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.RackPinionBuilder`. 
        
        Signature ``CreateRackPinionBuilder(rackPinion)`` 
        
        :param rackPinion:  :py:class:`NXOpen.Mechatronics.RackPinion` to be edited, if None then create a new one  
        :type rackPinion: :py:class:`NXOpen.Mechatronics.RackPinion` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.RackPinionBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> RackPinion:
        """
        Finds the :py:class:`NXOpen.Mechatronics.RackPinion` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.RackPinion`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.RackPinion` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.RackPinion` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class HydraulicCylinder(NXOpen.DisplayableObject):
    """
    Represents the Hydraulic Cylinder. A Hydraulic Cylinder is able to apply forces to bodies on a linear joint.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.HydraulicCylinderBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: HydraulicCylinder = ...  # unknown typename


class SignalBuilderIOTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalBuilderIOType():
    """
    Represents the IO type.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Input", "Input"
       "Output", "Output"
    """
    Input = 0  # SignalBuilderIOTypeMemberType
    Output = 1  # SignalBuilderIOTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalBuilderExternalSignalIOTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalBuilderExternalSignalIOType():
    """
    Represents the external signal IO type.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Input", "Input"
       "Output", "Output"
       "Inout", "Output"
    """
    Input = 0  # SignalBuilderExternalSignalIOTypeMemberType
    Output = 1  # SignalBuilderExternalSignalIOTypeMemberType
    Inout = 2  # SignalBuilderExternalSignalIOTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalBuilderDataType():
    """
    Represents the data type.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bool", "bool"
       "Int", "int"
       "Double", "double"
    """
    Bool = 0  # SignalBuilderDataTypeMemberType
    Int = 1  # SignalBuilderDataTypeMemberType
    Double = 2  # SignalBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SignalBuilder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.SignalCollection.CreateSignalBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class IOType():
        """
        Represents the IO type.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Input", "Input"
           "Output", "Output"
        """
        Input = 0  # SignalBuilderIOTypeMemberType
        Output = 1  # SignalBuilderIOTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ExternalSignalIOType():
        """
        Represents the external signal IO type.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Input", "Input"
           "Output", "Output"
           "Inout", "Output"
        """
        Input = 0  # SignalBuilderExternalSignalIOTypeMemberType
        Output = 1  # SignalBuilderExternalSignalIOTypeMemberType
        Inout = 2  # SignalBuilderExternalSignalIOTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DataType():
        """
        Represents the data type.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bool", "bool"
           "Int", "int"
           "Double", "double"
        """
        Bool = 0  # SignalBuilderDataTypeMemberType
        Int = 1  # SignalBuilderDataTypeMemberType
        Double = 2  # SignalBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Signal():
        """
        Represents Signal definition structure.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.SignalBuilder.Signal()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        TgPhysicsObject: NXOpen.NXObject = ...
        """
        Physics Object       
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        NPhysicsPropTag: int = ...
        """
        Physics Property Peristent Index  
        <hr>
        
        Field Value
        Type:int
        """
        EIOType: SignalBuilderIOType = ...
        """
        IO type              
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderIOType`
        """
        EDataType: SignalBuilderDataType = ...
        """
        Data type            
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalBuilderDataType`
        """
        BoolValueExp: NXOpen.Expression = ...
        """
        Data Value (bool)    
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Expression`
        """
        IntValueExp: NXOpen.Expression = ...
        """
        Data Value (int)     
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Expression`
        """
        DoubleValueExp: NXOpen.Expression = ...
        """
        Data Value (double)  
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Expression`
        """
    
    
    def GetSignalData(self) -> SignalBuilderSignal_Struct:
        """
        Gets signal data.  
        
        Signature ``GetSignalData()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SignalBuilderSignal_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSignalData(self, signalData: SignalBuilderSignal_Struct) -> None:
        """
        Sets signal data.  
        
        Signature ``SetSignalData(signalData)`` 
        
        :param signalData: 
        :type signalData: :py:class:`NXOpen.Mechatronics.SignalBuilderSignal_Struct` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Name: str = ...
    """
    Returns or sets  the name.  
    
    The Signal name must be unique in the context of assembly and it should be selected from 
    :py:class:`NXOpen.Mechatronics.SymbolTable`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SignalBuilder = ...  # unknown typename


class PMNavFolderObject(NXOpen.NXObject):
    """
    Represents the PMNav Folder object.  
    
    Use :py:meth:`NXOpen.Mechatronics.PhysicsManager.PMNavFolderObject` to create
    
    .. versionadded:: NX9.0.0
    """
    
    def IsDefault(self) -> bool:
        """
        Gets flag which indicates whether the folder is default folder or not.  
        
        Signature ``IsDefault()`` 
        
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetObjects(self) -> 'list[NXOpen.TaggedObject]':
        """
        Gets physics objects.  
        
        Signature ``GetObjects()`` 
        
        :returns:  The physics objects to be gotten  
        :rtype: list of :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def AddObjects(self, objects: 'list[NXOpen.TaggedObject]') -> None:
        """
        Adds physics objects.  
        
        Signature ``AddObjects(objects)`` 
        
        :param objects:  The physics objects to be added  
        :type objects: list of :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def MoveObjects(self, objects: 'list[NXOpen.TaggedObject]') -> None:
        """
        Moves physics objects.  
        
        Signature ``MoveObjects(objects)`` 
        
        :param objects:  The physics objects to be moved  
        :type objects: list of :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def RestoreObjects(self, restoreAllMembers: bool, objects: 'list[NXOpen.TaggedObject]') -> None:
        """
        Restore physics objects.  
        
        Signature ``RestoreObjects(restoreAllMembers, objects)`` 
        
        :param restoreAllMembers:  The flag indicates whether restore all the members or not.                                                                                     If it is true, the next input parameters 'count' and 'objects'                                                                                     will be ignored.                                                                                    If it is false, only the members specified by 'objects' will be                                                                                    restored to default folder.                                                                                 
        :type restoreAllMembers: bool 
        :param objects:  The physics objects to be restored to default folder  
        :type objects: list of :py:class:`NXOpen.TaggedObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    Null: PMNavFolderObject = ...  # unknown typename


class HingeJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Hinge Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateHingeJointBuilder(self, hinge: HingeJoint) -> HingeJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.HingeJointBuilder`.  
        
        Signature ``CreateHingeJointBuilder(hinge)`` 
        
        :param hinge:  :py:class:`NXOpen.Mechatronics.HingeJoint` to be edited, if None then create a new one  
        :type hinge: :py:class:`NXOpen.Mechatronics.HingeJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.HingeJointBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> HingeJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.HingeJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.HingeJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.HingeJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.HingeJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class PathConstraintJoint(PhysicsJoint):
    """
    Represents the Path Constraint Joint class.  
    
    It defines a object that limits a rigid body on path, which is defined
    a sequence of orientation CSYS. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.PathConstraintJointBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: PathConstraintJoint = ...  # unknown typename


class SignalMappingConnectionBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SignalMappingConnectionBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SignalMappingConnectionBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SignalMappingConnectionBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SignalMappingConnectionBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SignalMappingConnectionBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SignalMappingConnectionBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SignalMappingConnectionBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SignalMappingConnectionBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SignalMappingConnectionBuilder, object2: SignalMappingConnectionBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SignalMappingConnectionBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Mechatronics.SignalMappingConnectionBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SignalMappingConnectionBuilderList = ...  # unknown typename


class RigidBody(NXOpen.DisplayableObject):
    """
    Represents the Rigid Body class.  
    
    A Rigid Body defines objects
    to be able to move about the world. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.RigidBodyBuilder`
    
    .. versionadded:: NX7.5.1
    """
    Null: RigidBody = ...  # unknown typename


class SignalAdapterBuilderDataTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalAdapterBuilderDataType():
    """
    Represents the data type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Bool", "bool"
       "Int", "int"
       "Double", "double"
    """
    Bool = 0  # SignalAdapterBuilderDataTypeMemberType
    Int = 1  # SignalAdapterBuilderDataTypeMemberType
    Double = 2  # SignalAdapterBuilderDataTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalAdapterBuilderDataPortTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SignalAdapterBuilderDataPortType():
    """
    Represents the data port type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Input", "Input"
       "Output", "Output"
    """
    Input = 0  # SignalAdapterBuilderDataPortTypeMemberType
    Output = 1  # SignalAdapterBuilderDataPortTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SignalAdapterBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SignalAdapterBuilder`.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.SignalAdapterCollection.CreateSignalAdapterBuilder`
    
    .. versionadded:: NX8.5.0
    """
    
    class DataType():
        """
        Represents the data type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Bool", "bool"
           "Int", "int"
           "Double", "double"
        """
        Bool = 0  # SignalAdapterBuilderDataTypeMemberType
        Int = 1  # SignalAdapterBuilderDataTypeMemberType
        Double = 2  # SignalAdapterBuilderDataTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DataPortType():
        """
        Represents the data port type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Input", "Input"
           "Output", "Output"
        """
        Input = 0  # SignalAdapterBuilderDataPortTypeMemberType
        Output = 1  # SignalAdapterBuilderDataPortTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ParameterData():
        """
        Defines the parameter data.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.SignalAdapterBuilder.ParameterData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        AliasName: str = ...
        """
        Alias Name           
        <hr>
        
        Field Value
        Type:str
        """
        PhysicsObject: NXOpen.NXObject = ...
        """
        Physics Object       
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.NXObject`
        """
        PhysicsPropTag: int = ...
        """
        Physics Property Tag 
        <hr>
        
        Field Value
        Type:int
        """
        AssignedFormula: AdapterFormula = ...
        """
        Assigned Formula     
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.AdapterFormula`
        """
        Formula: str = ...
        """
        Formula Text         
        <hr>
        
        Field Value
        Type:str
        """
        Comment: str = ...
        """
        Comment Text         
        <hr>
        
        Field Value
        Type:str
        """
    
    
    class SignalData():
        """
        Defines the signal data.  
        
        .
        Constructor: 
        NXOpen.Mechatronics.SignalAdapterBuilder.SignalData()
        """
        
        def __str__(self) -> None:
            """Return str(self)."""
            ...
        
        Name: str = ...
        """
        Name                
        <hr>
        
        Field Value
        Type:str
        """
        DataType: SignalAdapterBuilderDataType = ...
        """
        Data Type           
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalAdapterBuilderDataType`
        """
        PortType: SignalAdapterBuilderDataPortType = ...
        """
        Data Port Type      
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.SignalAdapterBuilderDataPortType`
        """
        BoolValue: bool = ...
        """
        Data Value (bool)   
        <hr>
        
        Field Value
        Type:bool
        """
        IntValue: int = ...
        """
        Data Value (int)    
        <hr>
        
        Field Value
        Type:int
        """
        DoubleValue: float = ...
        """
        Data Value (double) 
        <hr>
        
        Field Value
        Type:float
        """
        Unit: NXOpen.Unit = ...
        """
        Data Unit           
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Unit`
        """
        SignalId: int = ...
        """
        Signal Id           
        <hr>
        
        Field Value
        Type:int
        """
        EditedSignal: AdapterSignal = ...
        """
        Edited Signal       
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.AdapterSignal`
        """
        AssignedFormula: AdapterFormula = ...
        """
        Assigned Formula    
        <hr>
        
        Field Value
        Type::py:class:`NXOpen.Mechatronics.AdapterFormula`
        """
        Formula: str = ...
        """
        Formula Text        
        <hr>
        
        Field Value
        Type:str
        """
        Comment: str = ...
        """
        Comment Text        
        <hr>
        
        Field Value
        Type:str
        """
    
    
    def GetParameterData(self) -> 'list[SignalAdapterBuilderParameterData_Struct]':
        """
        Gets all parameter data.  
        
        Signature ``GetParameterData()`` 
        
        :returns:  Array of parameter data  
        :rtype: list of :py:class:`NXOpen.Mechatronics.SignalAdapterBuilderParameterData_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetParameterData(self, parameterData: 'list[SignalAdapterBuilderParameterData_Struct]') -> None:
        """
        Sets all parameter data.  
        
        Signature ``SetParameterData(parameterData)`` 
        
        :param parameterData:  Array of parameter data  
        :type parameterData: list of :py:class:`NXOpen.Mechatronics.SignalAdapterBuilderParameterData_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def GetSignalData(self) -> 'list[SignalAdapterBuilderSignalData_Struct]':
        """
        Gets all signal data.  
        
        Signature ``GetSignalData()`` 
        
        :returns:  Array of signal data  
        :rtype: list of :py:class:`NXOpen.Mechatronics.SignalAdapterBuilderSignalData_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def SetSignalData(self, signalData: 'list[SignalAdapterBuilderSignalData_Struct]') -> None:
        """
        Sets all signal data.  
        
        Signature ``SetSignalData(signalData)`` 
        
        :param signalData:  Array of signal data  
        :type signalData: list of :py:class:`NXOpen.Mechatronics.SignalAdapterBuilderSignalData_Struct` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    MaxSignalId: int = ...
    """
    Returns or sets  the maximum signal id.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaxSignalId`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``MaxSignalId`` 
    
    :param maxSignalId: 
    :type maxSignalId: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Name: str = ...
    """
    Returns or sets  the name.  
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.5.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SignalAdapterBuilder = ...  # unknown typename


class AngularSpringJointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Angular Spring Joint.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateAngularSpringJointBuilder(self, angularSpring: AngularSpringJoint) -> AngularSpringJointBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.AngularSpringJointBuilder`.  
        
        Signature ``CreateAngularSpringJointBuilder(angularSpring)`` 
        
        :param angularSpring:  :py:class:`NXOpen.Mechatronics.AngularSpringJoint` to be edited, if None then create a new one  
        :type angularSpring: :py:class:`NXOpen.Mechatronics.AngularSpringJoint` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.AngularSpringJointBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> AngularSpringJoint:
        """
        Finds the :py:class:`NXOpen.Mechatronics.AngularSpringJoint` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.AngularSpringJoint`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.AngularSpringJoint` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.AngularSpringJoint` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class GanttLinkerBuilderLinkerLogicTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GanttLinkerBuilderLinkerLogicType():
    """
    Represents the linker logic types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "And", "And"
       "Or", "Or"
    """
    And = 0  # GanttLinkerBuilderLinkerLogicTypeMemberType
    Or = 1  # GanttLinkerBuilderLinkerLogicTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GanttLinkerBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.GanttLinkerBuilder`   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.GanttLinkerCollection.CreateGanttLinkerBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class LinkerLogicType():
        """
        Represents the linker logic types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "And", "And"
           "Or", "Or"
        """
        And = 0  # GanttLinkerBuilderLinkerLogicTypeMemberType
        Or = 1  # GanttLinkerBuilderLinkerLogicTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    LogicType: GanttLinkerBuilderLinkerLogicType = ...
    """
    Returns or sets  the logic type.  
    
    <hr>
    
    Getter Method
    
    Signature ``LogicType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GanttLinkerBuilderLinkerLogicType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``LogicType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Mechatronics.GanttLinkerBuilderLinkerLogicType` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Primary: GanttOperationObject = ...
    """
    Returns or sets  the accessor for first operation object which is going to be linked 
    
    <hr>
    
    Getter Method
    
    Signature ``Primary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationObject` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Primary`` 
    
    :param primary: 
    :type primary: :py:class:`NXOpen.Mechatronics.GanttOperationObject` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Secondary: GanttOperationObject = ...
    """
    Returns or sets  the accessor for second operation object which is going to be linked 
    
    <hr>
    
    Getter Method
    
    Signature ``Secondary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationObject` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``Secondary`` 
    
    :param secondary: 
    :type secondary: :py:class:`NXOpen.Mechatronics.GanttOperationObject` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: GanttLinkerBuilder = ...  # unknown typename


class SelectTagFormObject(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: TagFormObject) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TagFormObject) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TagFormObject, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: TagFormObject, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: TagFormObject, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: TagFormObject, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> TagFormObject:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: TagFormObject) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Mechatronics.TagFormObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Mechatronics.TagFormObject`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Mechatronics.TagFormObject`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Mechatronics.TagFormObject`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Mechatronics.TagFormObject`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: TagFormObject = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Mechatronics.TagFormObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Mechatronics.TagFormObject` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectTagFormObject = ...  # unknown typename


class SpringDamperCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Spring Damper.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX10.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSpringDamperBuilder(self, springDamper: SpringDamper) -> SpringDamperBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.SpringDamperBuilder`.  
        
        Signature ``CreateSpringDamperBuilder(springDamper)`` 
        
        :param springDamper:  :py:class:`NXOpen.Mechatronics.SpringDamper` to be edited, if None then create a new one  
        :type springDamper: :py:class:`NXOpen.Mechatronics.SpringDamper` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.SpringDamperBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> SpringDamper:
        """
        Finds the :py:class:`NXOpen.Mechatronics.SpringDamper` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.SpringDamper`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.SpringDamper` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.SpringDamper` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class HydraulicCylinderBuilderOutputRodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HydraulicCylinderBuilderOutputRodType():
    """
    the Rod types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Single", "single rod"
       "Double", "double rod"
    """
    Single = 0  # HydraulicCylinderBuilderOutputRodTypeMemberType
    Double = 1  # HydraulicCylinderBuilderOutputRodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HydraulicCylinderBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.HydraulicCylinder` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.HydraulicCylinderCollection.CreateHydraulicCylinderBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class OutputRodType():
        """
        the Rod types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Single", "single rod"
           "Double", "double rod"
        """
        Single = 0  # HydraulicCylinderBuilderOutputRodTypeMemberType
        Double = 1  # HydraulicCylinderBuilderOutputRodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AxisJoint: SelectPhysicsJoint = ...
    """
    Returns  the Axis Joint. This can be a :py:class:`PhysicsJoint`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PistonDiameter: NXOpen.Expression = ...
    """
    Returns  the diameter of the piston.  
    
    <hr>
    
    Getter Method
    
    Signature ``PistonDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PistonRodDiameter: NXOpen.Expression = ...
    """
    Returns  the diameter of the piston rod.  
    
    <hr>
    
    Getter Method
    
    Signature ``PistonRodDiameter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PressureA: NXOpen.Expression = ...
    """
    Returns  the initial pressure of chamber A.  
    
    <hr>
    
    Getter Method
    
    Signature ``PressureA`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    PressureB: NXOpen.Expression = ...
    """
    Returns  the initial pressure of chamber B.  
    
    <hr>
    
    Getter Method
    
    Signature ``PressureB`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    RodType: HydraulicCylinderBuilderOutputRodType = ...
    """
    Returns or sets  the rod type.  
    
    <hr>
    
    Getter Method
    
    Signature ``RodType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.HydraulicCylinderBuilderOutputRodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``RodType`` 
    
    :param rodType: 
    :type rodType: :py:class:`NXOpen.Mechatronics.HydraulicCylinderBuilderOutputRodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    StrokeLength: NXOpen.Expression = ...
    """
    Returns  the overall stroke length of the cylinder.  
    
    <hr>
    
    Getter Method
    
    Signature ``StrokeLength`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: HydraulicCylinderBuilder = ...  # unknown typename


class MATLABSignalConnection(NXOpen.DisplayableObject):
    """
    Represents the MATLAB Signal connection class.  
    
    Signal connection objects are able
    to connect MCD signals with MATLAB signals. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: MATLABSignalConnection = ...  # unknown typename


class LogicObject(SystemObject):
    """
    Represents the Logic Object class.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.LogicObjectBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: LogicObject = ...  # unknown typename


class MATLABSignalConnectionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of Signal Connection.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX11.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> MATLABSignalConnection:
        """
        Finds the :py:class:`NXOpen.Mechatronics.MATLABSignalConnection` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.MATLABSignalConnection`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.MATLABSignalConnection` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.MATLABSignalConnection` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateSignalConnectionBuilder(self, connection: MATLABSignalConnection) -> MATLABSignalConnectionBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder`  
        
        Signature ``CreateSignalConnectionBuilder(connection)`` 
        
        :param connection:  :py:class:`NXOpen.Mechatronics.MATLABSignalConnection` to be edited, if None then create a new one  
        :type connection: :py:class:`NXOpen.Mechatronics.MATLABSignalConnection` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.MATLABSignalConnectionBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class HydraulicValveBuilderOutputValveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HydraulicValveBuilderOutputValveType():
    """
    the Valve types.  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FourWay", "4-way valve"
       "ThreeWay", "3-way valve"
    """
    FourWay = 0  # HydraulicValveBuilderOutputValveTypeMemberType
    ThreeWay = 1  # HydraulicValveBuilderOutputValveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HydraulicValveBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.HydraulicValve` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.HydraulicValveCollection.CreateHydraulicValveBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class OutputValveType():
        """
        the Valve types.  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FourWay", "4-way valve"
           "ThreeWay", "3-way valve"
        """
        FourWay = 0  # HydraulicValveBuilderOutputValveTypeMemberType
        ThreeWay = 1  # HydraulicValveBuilderOutputValveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetCylinders(self, cylinders: 'list[HydraulicCylinder]') -> None:
        """
        the Cylinders. Sets the cylinder array. 
        
        Signature ``SetCylinders(cylinders)`` 
        
        :param cylinders:  Input geometries 
        :type cylinders: list of :py:class:`NXOpen.Mechatronics.HydraulicCylinder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ControlInput: NXOpen.Expression = ...
    """
    Returns  the initial control input.  
    
    <hr>
    
    Getter Method
    
    Signature ``ControlInput`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Cylinders: SelectHydraulicCylinderList = ...
    """
    Returns  the Cylinder. This can be a :py:class:`HydraulicCylinder`. 
    
    <hr>
    
    Getter Method
    
    Signature ``Cylinders`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectHydraulicCylinderList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ExhaustPressure: NXOpen.Expression = ...
    """
    Returns  the initial exhaust pressure.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExhaustPressure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    NominalFlow: NXOpen.Expression = ...
    """
    Returns  the initial nominal flow.  
    
    <hr>
    
    Getter Method
    
    Signature ``NominalFlow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    NominalPressure: NXOpen.Expression = ...
    """
    Returns  the initial nominal pressure.  
    
    <hr>
    
    Getter Method
    
    Signature ``NominalPressure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    SupplyPressure: NXOpen.Expression = ...
    """
    Returns  the initial supply pressure.  
    
    <hr>
    
    Getter Method
    
    Signature ``SupplyPressure`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ValveType: HydraulicValveBuilderOutputValveType = ...
    """
    Returns or sets  the valve type.  
    
    <hr>
    
    Getter Method
    
    Signature ``ValveType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.HydraulicValveBuilderOutputValveType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ValveType`` 
    
    :param valveType: 
    :type valveType: :py:class:`NXOpen.Mechatronics.HydraulicValveBuilderOutputValveType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: HydraulicValveBuilder = ...  # unknown typename


class PneumaticCylinder(NXOpen.DisplayableObject):
    """
    Represents the Pneumatic Cylinder. A Pneumatic Cylinder is able to apply forces to bodies on a linear joint.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.PneumaticCylinderBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: PneumaticCylinder = ...  # unknown typename


class SCOUTImportBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SCOUTImportBuilder`,
    Nothing happened and no object returned when commit this builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.PhysicsManager.CreateSCOUTImportBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def ImportFromScout(self, camProfile: CamProfileBuilder) -> None:
        """
        Read the segments information from file
        
        Signature ``ImportFromScout(camProfile)`` 
        
        :param camProfile: Cam Profile Builder 
        :type camProfile: :py:class:`NXOpen.Mechatronics.CamProfileBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    ImportFile: str = ...
    """
    Returns or sets  the import file name 
    
    <hr>
    
    Getter Method
    
    Signature ``ImportFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``ImportFile`` 
    
    :param importFile: 
    :type importFile: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SCOUTImportBuilder = ...  # unknown typename


class SystemRootTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SystemRootType():
    """
    the system root types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Function", "Function"
       "Logical", "Logical"
       "Requirement", "Requirement"
    """
    Function = 0  # SystemRootTypeMemberType
    Logical = 1  # SystemRootTypeMemberType
    Requirement = 2  # SystemRootTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SystemRoot(SystemObject):
    """
    Represents the System Root class.  
    
    System Root is the root object of system tree.
    Not support KF.
    
    .. versionadded:: NX9.0.0
    """
    
    class Type():
        """
        the system root types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Function", "Function"
           "Logical", "Logical"
           "Requirement", "Requirement"
        """
        Function = 0  # SystemRootTypeMemberType
        Logical = 1  # SystemRootTypeMemberType
        Requirement = 2  # SystemRootTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Null: SystemRoot = ...  # unknown typename


class SpeedControlBuilderAxisJointTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SpeedControlBuilderAxisJointType():
    """
    the Axis Joint types. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angular", "Angular"
       "Linear", "Linear"
       "Mixed", "Mix angular and linear"
    """
    Angular = 0  # SpeedControlBuilderAxisJointTypeMemberType
    Linear = 1  # SpeedControlBuilderAxisJointTypeMemberType
    Mixed = 2  # SpeedControlBuilderAxisJointTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SpeedControlBuilder(PhysicsConstraintBuilder):
    """
    Represents a :py:class:`NXOpen.Mechatronics.SpeedControl` builder.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Mechatronics.SpeedControlCollection.CreateSpeedControlBuilder`
    
    .. versionadded:: NX7.5.1
    """
    
    class AxisJointType():
        """
        the Axis Joint types. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angular", "Angular"
           "Linear", "Linear"
           "Mixed", "Mix angular and linear"
        """
        Angular = 0  # SpeedControlBuilderAxisJointTypeMemberType
        Linear = 1  # SpeedControlBuilderAxisJointTypeMemberType
        Mixed = 2  # SpeedControlBuilderAxisJointTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetAxisJoint(self, axisJoint: NXOpen.NXObject) -> None:
        """
        Sets the joint.  
        
        Signature ``SetAxisJoint(axisJoint)`` 
        
        :param axisJoint: 
        :type axisJoint: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    AxisJoint: SelectPhysicsJoint = ...
    """
    Returns  the joint select.  
    
    This can be a :py:class:`NXOpen.Mechatronics.HingeJoint`, :py:class:`NXOpen.Mechatronics.SlidingJoint`
    , :py:class:`NXOpen.Mechatronics.CylindricalJoint` and :py:class:`NXOpen.Mechatronics.TransportSurface`.
    
    <hr>
    
    Getter Method
    
    Signature ``AxisJoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SelectPhysicsJoint` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    AxisType: SpeedControlBuilderAxisJointType = ...
    """
    Returns or sets  the axis joint type.  
    
    <hr>
    
    Getter Method
    
    Signature ``AxisType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SpeedControlBuilderAxisJointType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AxisType`` 
    
    :param axisType: 
    :type axisType: :py:class:`NXOpen.Mechatronics.SpeedControlBuilderAxisJointType` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    DirectionType: SpeedPositionControlDirectiontype = ...
    """
    Returns or sets  the direction type, which works only when the speed control is used to
    drive :py:class:`NXOpen.Mechatronics.TransportSurface` 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Mechatronics.SpeedPositionControlDirectiontype` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionType`` 
    
    :param directionType: 
    :type directionType: :py:class:`NXOpen.Mechatronics.SpeedPositionControlDirectiontype` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    EnableLimitForce: bool = ...
    """
    Returns or sets  whether or not to enable the limit force.  
    
    <hr>
    
    Getter Method
    
    Signature ``EnableLimitForce`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    
    <hr>
    
    Setter Method
    
    Signature ``EnableLimitForce`` 
    
    :param enable: 
    :type enable: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    ForwardForce: NXOpen.Expression = ...
    """
    Returns  the forward force that speed control can apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``ForwardForce`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    LimitJerk: bool = ...
    """
    Returns or sets  the limit jerk flag, which is used to control if the speed control includes jerk data.  
    
    <hr>
    
    Getter Method
    
    Signature ``LimitJerk`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LimitJerk`` 
    
    :param limitJerk: 
    :type limitJerk: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    MaxAcceleration: NXOpen.Expression = ...
    """
    Returns  the max acceleration, which is used to set the maximum acceleration for speed control.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaxAcceleration`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    MaxJerk: NXOpen.Expression = ...
    """
    Returns  the max jerk, which is used to set the maximum jerk for speed control.  
    
    <hr>
    
    Getter Method
    
    Signature ``MaxJerk`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ReverseForce: NXOpen.Expression = ...
    """
    Returns  the min force that speed control can apply.  
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseForce`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Signal: NXOpen.SelectNXObject = ...
    """
    Returns  the signal select.  
    
    This can be a :py:class:`NXOpen.Mechatronics.Signal`
    or :py:class:`NXOpen.Mechatronics.AdapterSignal`.
    
    <hr>
    
    Getter Method
    
    Signature ``Signal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Speed: NXOpen.Expression = ...
    """
    Returns  the speed.  
    
    <hr>
    
    Getter Method
    
    Signature ``Speed`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.1
    
    License requirements: None.
    """
    UseAcceleration: bool = ...
    """
    Returns or sets  the use acceleration flag, which is used to control if the speed control includes acceleration data.  
    
    <hr>
    
    Getter Method
    
    Signature ``UseAcceleration`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseAcceleration`` 
    
    :param useAcceleration: 
    :type useAcceleration: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
    """
    Null: SpeedControlBuilder = ...  # unknown typename


class GraphControl(NXOpen.DisplayableObject):
    """
    Represents the Graph Control.  
    
    Graph Control is used to apply the values from the
    graph to the axis control over time. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.GraphControlBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: GraphControl = ...  # unknown typename


class MCDSignalServerConfigurationCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of MCDSignalServerConfigurationObject.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Mechatronics.PhysicsManager`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateMCDSignalServerConfigurationBuilder(self, pMCDSignalServerConfigurationObject: MCDSignalServerConfigurationObject) -> MCDSignalServerConfigurationBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationBuilder`.  
        
        Signature ``CreateMCDSignalServerConfigurationBuilder(pMCDSignalServerConfigurationObject)`` 
        
        :param pMCDSignalServerConfigurationObject:  :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationObject` to be edited, if None then create a new one  
        :type pMCDSignalServerConfigurationObject: :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> MCDSignalServerConfigurationObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationObject` with the given name.
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.MCDSignalServerConfigurationObject` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


class DynamicObjectTable(NXOpen.NXObject):
    """
    Represents the DynamicObjectTable class  
    
    DynamicObjectTable contains dynamic object instances. Each dynamic object has to be assigned to 
    an unique instance from DynamicObjectTable. 
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Mechatronics.DynamicObjectTableBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: DynamicObjectTable = ...  # unknown typename


class GanttCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a :py:class:`NXOpen.Mechatronics.GanttCollection`   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX7.5.1
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateGanttOperationBuilder(self, object: GanttOperationObject) -> GanttOperationBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.GanttOperationBuilder`  
        
        Signature ``CreateGanttOperationBuilder(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.Mechatronics.GanttOperationObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateGanttOperationParameterBuilder(self) -> GanttOperationParameterBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder`  
        
        Signature ``CreateGanttOperationParameterBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationParameterBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateGanttOperationConditionBuilder(self) -> GanttOperationConditionBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder`  
        
        Signature ``CreateGanttOperationConditionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationConditionBuilder` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def CreateGanttExportPlcopenBuilder(self, object: GanttOperationObject) -> GanttExportPLCopenBuilder:
        """
        Creates a :py:class:`NXOpen.Mechatronics.GanttExportPLCopenBuilder`  
        
        Signature ``CreateGanttExportPlcopenBuilder(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.Mechatronics.GanttOperationObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Mechatronics.GanttExportPLCopenBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    
    
    def FindObject(self, name: str) -> GanttOperationObject:
        """
        Finds the :py:class:`NXOpen.Mechatronics.GanttOperationObject` with the given name.  
        
        An exception will be thrown if no object can be found with given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  The name of the :py:class:`NXOpen.Mechatronics.GanttOperationObject`.  
        :type name: str 
        :returns:  :py:class:`NXOpen.Mechatronics.GanttOperationObject` with this name.  
        :rtype: :py:class:`NXOpen.Mechatronics.GanttOperationObject` 
        
        .. versionadded:: NX7.5.1
        
        License requirements: nx_mcd_core ("MECHATRONICS CONCEPT DESIGNER")
        """
        ...
    


