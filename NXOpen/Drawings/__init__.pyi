# module 'NXOpen.Drawings'
#
# Automatically generated 2025-06-09T14:38:45.605507
#
"""Default documentation for NXOpen.Drawings."""

import typing

import NXOpen
import NXOpen.Annotations
import NXOpen.Assemblies
import NXOpen.Drafting
import NXOpen.GeometricUtilities
import NXOpen.Layout2d
import NXOpen.Preferences
import NXOpen.SheetMetal



def _handle_import() -> None:
    """internal method to handle importing an NXOpen Python module"""
    ...


class ViewSettingsBuilderRenderingStyleEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewSettingsBuilderRenderingStyleEnum():
    """
    enum is used to list out different rendering style types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Shaded", " - "
       "DrawingViewSetting", " - "
    """
    Shaded = 0  # ViewSettingsBuilderRenderingStyleEnumMemberType
    DrawingViewSetting = 1  # ViewSettingsBuilderRenderingStyleEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Drawings.ViewSettingsBuilder`.  
    
    This class queries and sets settings specific to drawings data which will get converted to PMI.s
    
    .. versionadded:: NX11.0.0
    """
    
    class RenderingStyleEnum():
        """
        enum is used to list out different rendering style types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Shaded", " - "
           "DrawingViewSetting", " - "
        """
        Shaded = 0  # ViewSettingsBuilderRenderingStyleEnumMemberType
        DrawingViewSetting = 1  # ViewSettingsBuilderRenderingStyleEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AddSheetName: bool = ...
    """
    Returns or sets  the add sheet name  
    
    <hr>
    
    Getter Method
    
    Signature ``AddSheetName`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AddSheetName`` 
    
    :param addSheetName: 
    :type addSheetName: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AddSheetNumber: bool = ...
    """
    Returns or sets  the add sheet number 
    
    <hr>
    
    Getter Method
    
    Signature ``AddSheetNumber`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AddSheetNumber`` 
    
    :param addSheetNumber: 
    :type addSheetNumber: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ApplyCrosshatchToSectionView: bool = ...
    """
    Returns or sets  the apply crosshatch To section view  
    
    <hr>
    
    Getter Method
    
    Signature ``ApplyCrosshatchToSectionView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ApplyCrosshatchToSectionView`` 
    
    :param applyCrosshatchToSectionView: 
    :type applyCrosshatchToSectionView: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ConvertAnnotation: bool = ...
    """
    Returns or sets  the convert annotation  
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertAnnotation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertAnnotation`` 
    
    :param convertAnnotation: 
    :type convertAnnotation: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Prefix: str = ...
    """
    Returns or sets  the prefix string 
    
    <hr>
    
    Getter Method
    
    Signature ``Prefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Prefix`` 
    
    :param prefix: 
    :type prefix: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RenderingStyle: ViewSettingsBuilderRenderingStyleEnum = ...
    """
    Returns or sets  the rendering style 
    
    <hr>
    
    Getter Method
    
    Signature ``RenderingStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSettingsBuilderRenderingStyleEnum` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenderingStyle`` 
    
    :param renderingStyle: 
    :type renderingStyle: :py:class:`NXOpen.Drawings.ViewSettingsBuilderRenderingStyleEnum` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: convert_to_pmi (" Convert To PMI"), drafting ("DRAFTING")
    """
    SectionGeometryTolerance: float = ...
    """
    Returns or sets  the section geometry tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionGeometryTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionGeometryTolerance`` 
    
    :param sectionGeometryTolerance: 
    :type sectionGeometryTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: convert_to_pmi (" Convert To PMI"), drafting ("DRAFTING")
    """
    Separator: str = ...
    """
    Returns or sets  the separator string 
    
    <hr>
    
    Getter Method
    
    Signature ``Separator`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Separator`` 
    
    :param separator: 
    :type separator: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    UseAssemblyCrosshatch: bool = ...
    """
    Returns or sets  the use assembly crosshatch  
    
    <hr>
    
    Getter Method
    
    Signature ``UseAssemblyCrosshatch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseAssemblyCrosshatch`` 
    
    :param useAssemblyCrosshatch: 
    :type useAssemblyCrosshatch: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewSettingsBuilder = ...  # unknown typename


class ShipDraftingViewLinesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a ship view lines block   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateShipDraftingViewLinesBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    NonSectionedHiddenColor: NXOpen.NXColor = ...
    """
    Returns or sets  the non-sectioned hidden color on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedHiddenColor`` 
    
    :returns:  Returns the non-sectioned hidden color that is on the ship drafting view lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedHiddenColor`` 
    
    :param nonSectionedHiddenColor:  Sets a new non-sectined hidden color on the ship drafting view lines sub-builder  
    :type nonSectionedHiddenColor: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedHiddenFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the non-sectioned hidden font on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedHiddenFont`` 
    
    :returns:  Returns the non-sectioneed hidden font that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedHiddenFont`` 
    
    :param nonSectionedHiddenFont:  Sets a new non-sectioned hidden font on the ship drafting view lines sub-builder  
    :type nonSectionedHiddenFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedHiddenWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the non-sectioned hidden width on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedHiddenWidth`` 
    
    :returns:  Returns the non-sectioned hidden width that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedHiddenWidth`` 
    
    :param nonSectionedHiddenWidth:  Sets a new non-sectioned hidden width on the ship drafting view lines sub-builder  
    :type nonSectionedHiddenWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedSecondaryHiddenColor: NXOpen.NXColor = ...
    """
    Returns or sets  the Secondary non-sectioned hidden color on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedSecondaryHiddenColor`` 
    
    :returns:  Returns the non-sectioned hidden color that is on the ship drafting view lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedSecondaryHiddenColor`` 
    
    :param nonSectionedSecondaryHiddenColor:  Sets a new non-sectined hidden color on the ship drafting view lines sub-builder  
    :type nonSectionedSecondaryHiddenColor: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedSecondaryHiddenFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the Secondary non-sectioned hidden font on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedSecondaryHiddenFont`` 
    
    :returns:  Returns the non-sectioneed hidden font that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedSecondaryHiddenFont`` 
    
    :param nonSectionedSecondaryHiddenFont:  Sets a new non-sectioned hidden font on the ship drafting view lines sub-builder  
    :type nonSectionedSecondaryHiddenFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedSecondaryHiddenWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the Secondary non-sectioned hidden width on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedSecondaryHiddenWidth`` 
    
    :returns:  Returns the non-sectioned hidden width that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedSecondaryHiddenWidth`` 
    
    :param nonSectionedSecondaryHiddenWidth:  Sets a new non-sectioned hidden width on the ship drafting view lines sub-builder  
    :type nonSectionedSecondaryHiddenWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedSecondaryVisibleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the Secondary non-sectioned visible color on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedSecondaryVisibleColor`` 
    
    :returns:  Returns the non-sectioned visible color that is on the ship drafting view lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedSecondaryVisibleColor`` 
    
    :param nonSectionedSecondaryVisibleColor:  Sets a new non-sectined visible color on the ship drafting view lines sub-builder  
    :type nonSectionedSecondaryVisibleColor: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedSecondaryVisibleFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the Secondary non-sectioned visible font on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedSecondaryVisibleFont`` 
    
    :returns:  Returns the non-sectioneed visible font that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedSecondaryVisibleFont`` 
    
    :param nonSectionedSecondaryVisibleFont:  Sets a new non-sectioned visible font on the ship drafting view lines sub-builder  
    :type nonSectionedSecondaryVisibleFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedSecondaryVisibleWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the Secondary non-sectioned visible width on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedSecondaryVisibleWidth`` 
    
    :returns:  Returns the non-sectioned visible width that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedSecondaryVisibleWidth`` 
    
    :param nonSectionedSecondaryVisibleWidth:  Sets a new non-sectioned visible width on the ship drafting view lines sub-builder  
    :type nonSectionedSecondaryVisibleWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedVisibleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the non-sectioned visible color on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedVisibleColor`` 
    
    :returns:  Returns the non-sectioned visible color that is on the ship drafting view lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedVisibleColor`` 
    
    :param nonSectionedVisibleColor:  Sets a new non-sectined visible color on the ship drafting view lines sub-builder  
    :type nonSectionedVisibleColor: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedVisibleFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the non-sectioned visible font on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedVisibleFont`` 
    
    :returns:  Returns the non-sectioneed visible font that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedVisibleFont`` 
    
    :param nonSectionedVisibleFont:  Sets a new non-sectioned visible font on the ship drafting view lines sub-builder  
    :type nonSectionedVisibleFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    NonSectionedVisibleWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the non-sectioned visible width on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedVisibleWidth`` 
    
    :returns:  Returns the non-sectioned visible width that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NonSectionedVisibleWidth`` 
    
    :param nonSectionedVisibleWidth:  Sets a new non-sectioned visible width on the ship drafting view lines sub-builder  
    :type nonSectionedVisibleWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedHiddenColor: NXOpen.NXColor = ...
    """
    Returns or sets  the sectioned hidden color on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedHiddenColor`` 
    
    :returns:  Returns the sectioned hidden color that is on the ship drafting view lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedHiddenColor`` 
    
    :param sectionedHiddenColor:  Sets a new sectined hidden color on the ship drafting view lines sub-builder  
    :type sectionedHiddenColor: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedHiddenFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the sectioned hidden font on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedHiddenFont`` 
    
    :returns:  Returns the sectioneed hidden font that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedHiddenFont`` 
    
    :param sectionedHiddenFont:  Sets a new sectioned hidden font on the ship drafting view lines sub-builder  
    :type sectionedHiddenFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedHiddenWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the sectioned hidden width on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedHiddenWidth`` 
    
    :returns:  Returns the sectioned hidden width that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedHiddenWidth`` 
    
    :param sectionedHiddenWidth:  Sets a new sectioned hidden width on the ship drafting view lines sub-builder  
    :type sectionedHiddenWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedSecondaryHiddenColor: NXOpen.NXColor = ...
    """
    Returns or sets  the Secondary sectioned hidden color on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedSecondaryHiddenColor`` 
    
    :returns:  Returns the sectioned hidden color that is on the ship drafting view lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedSecondaryHiddenColor`` 
    
    :param sectionedSecondaryHiddenColor:  Sets a new sectined hidden color on the ship drafting view lines sub-builder  
    :type sectionedSecondaryHiddenColor: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedSecondaryHiddenFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the Secondary sectioned hidden font on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedSecondaryHiddenFont`` 
    
    :returns:  Returns the sectioneed hidden font that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedSecondaryHiddenFont`` 
    
    :param sectionedSecondaryHiddenFont:  Sets a new sectioned hidden font on the ship drafting view lines sub-builder  
    :type sectionedSecondaryHiddenFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedSecondaryHiddenWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the Secondary sectioned hidden width on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedSecondaryHiddenWidth`` 
    
    :returns:  Returns the sectioned hidden width that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedSecondaryHiddenWidth`` 
    
    :param sectionedSecondaryHiddenWidth:  Sets a new sectioned hidden width on the ship drafting view lines sub-builder  
    :type sectionedSecondaryHiddenWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedSecondaryVisibleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the Secondary sectioned visible color on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedSecondaryVisibleColor`` 
    
    :returns:  Returns the sectioned visible color that is on the ship drafting view lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedSecondaryVisibleColor`` 
    
    :param sectionedSecondaryVisibleColor:  Sets a new sectined visible color on the ship drafting view lines sub-builder  
    :type sectionedSecondaryVisibleColor: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedSecondaryVisibleFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the Secondary sectioned visible font on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedSecondaryVisibleFont`` 
    
    :returns:  Returns the sectioneed visible font that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedSecondaryVisibleFont`` 
    
    :param sectionedSecondaryVisibleFont:  Sets a new sectioned visible font on the ship drafting view lines sub-builder  
    :type sectionedSecondaryVisibleFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedSecondaryVisibleWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the Secondary sectioned visible width on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedSecondaryVisibleWidth`` 
    
    :returns:  Returns the sectioned visible width that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedSecondaryVisibleWidth`` 
    
    :param sectionedSecondaryVisibleWidth:  Sets a new sectioned visible width on the ship drafting view lines sub-builder  
    :type sectionedSecondaryVisibleWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedVisibleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the sectioned visible color on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedVisibleColor`` 
    
    :returns:  Returns the sectioned visible color that is on the ship drafting view lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedVisibleColor`` 
    
    :param sectionedVisibleColor:  Sets a new sectined visible color on the ship drafting view lines sub-builder  
    :type sectionedVisibleColor: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedVisibleFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the sectioned visible font on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedVisibleFont`` 
    
    :returns:  Returns the sectioneed visible font that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedVisibleFont`` 
    
    :param sectionedVisibleFont:  Sets a new sectioned visible font on the ship drafting view lines sub-builder  
    :type sectionedVisibleFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SectionedVisibleWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the sectioned visible width on the Ship Structure Lines 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionedVisibleWidth`` 
    
    :returns:  Returns the sectioned visible width that is the ship drafting view lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionedVisibleWidth`` 
    
    :param sectionedVisibleWidth:  Sets a new sectioned visible width on the ship drafting view lines sub-builder  
    :type sectionedVisibleWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SingleLineRepresentation: bool = ...
    """
    Returns or sets  the single line representation toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``SingleLineRepresentation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SingleLineRepresentation`` 
    
    :param singleLineRepresentation: 
    :type singleLineRepresentation: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Null: ShipDraftingViewLinesBuilder = ...  # unknown typename


class ViewDetailLabelBuilderLabelParentDisplayTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewDetailLabelBuilderLabelParentDisplayTypes():
    """
    Label on Parent Display type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Circle", " - "
       "Note", " - "
       "Label", " - "
       "Embedded", " - "
       "Boundary", " - "
       "LabelOnBoundary", " - "
    """
    NotSet = 0  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
    Circle = 1  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
    Note = 2  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
    Label = 3  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
    Embedded = 4  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
    Boundary = 5  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
    LabelOnBoundary = 6  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewDetailLabelBuilderLabelParentTextPlacementMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewDetailLabelBuilderLabelParentTextPlacement():
    """
    Label on Parent Text Placement type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BeforeOrAfterStub", " - "
       "AboveStub", " - "
    """
    BeforeOrAfterStub = 0  # ViewDetailLabelBuilderLabelParentTextPlacementMemberType
    AboveStub = 1  # ViewDetailLabelBuilderLabelParentTextPlacementMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewDetailLabelBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewDetailLabelBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class LabelParentDisplayTypes():
        """
        Label on Parent Display type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Circle", " - "
           "Note", " - "
           "Label", " - "
           "Embedded", " - "
           "Boundary", " - "
           "LabelOnBoundary", " - "
        """
        NotSet = 0  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
        Circle = 1  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
        Note = 2  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
        Label = 3  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
        Embedded = 4  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
        Boundary = 5  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
        LabelOnBoundary = 6  # ViewDetailLabelBuilderLabelParentDisplayTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LabelParentTextPlacement():
        """
        Label on Parent Text Placement type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BeforeOrAfterStub", " - "
           "AboveStub", " - "
        """
        BeforeOrAfterStub = 0  # ViewDetailLabelBuilderLabelParentTextPlacementMemberType
        AboveStub = 1  # ViewDetailLabelBuilderLabelParentTextPlacementMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetCustomizedViewLabelText(self) -> 'list[str]':
        """
        Returns the customized view label text  
        
        Signature ``GetCustomizedViewLabelText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetCustomizedViewLabelText(self, customizedText: 'list[str]') -> None:
        """
        Sets the customized view label text 
        
        Signature ``SetCustomizedViewLabelText(customizedText)`` 
        
        :param customizedText: 
        :type customizedText: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CustomizedViewLabel: bool = ...
    """
    Returns or sets  the customized view label 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomizedViewLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomizedViewLabel`` 
    
    :param customizedViewLabel: 
    :type customizedViewLabel: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeParentheses: bool = ...
    """
    Returns or sets  the include parentheses 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeParentheses`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeParentheses`` 
    
    :param includeParentheses: 
    :type includeParentheses: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelCharacterHeightFactor: float = ...
    """
    Returns or sets  the section vw label letter size factor 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelCharacterHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelCharacterHeightFactor`` 
    
    :param labelCharacterHeightFactor: 
    :type labelCharacterHeightFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelParentDisplay: ViewDetailLabelBuilderLabelParentDisplayTypes = ...
    """
    Returns or sets  the label parent display 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelParentDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewDetailLabelBuilderLabelParentDisplayTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelParentDisplay`` 
    
    :param labelParentDisplay: 
    :type labelParentDisplay: :py:class:`NXOpen.Drawings.ViewDetailLabelBuilderLabelParentDisplayTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelPosition: LabelPositionTypes = ...
    """
    Returns or sets  the label position 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.LabelPositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelPosition`` 
    
    :param labelPosition: 
    :type labelPosition: :py:class:`NXOpen.Drawings.LabelPositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelPrefix: str = ...
    """
    Returns or sets  the label prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelPrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelPrefix`` 
    
    :param labelPrefix: 
    :type labelPrefix: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LetterFormat: LetterFormatTypes = ...
    """
    Returns or sets  the letter format 
    
    <hr>
    
    Getter Method
    
    Signature ``LetterFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.LetterFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LetterFormat`` 
    
    :param letterFormat: 
    :type letterFormat: :py:class:`NXOpen.Drawings.LetterFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ParentLabelPrefix: str = ...
    """
    Returns or sets  the parent label prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentLabelPrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ParentLabelPrefix`` 
    
    :param parentLabelPrefix: 
    :type parentLabelPrefix: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PrefixCharacterHeightFactor: float = ...
    """
    Returns or sets  the prefix character height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``PrefixCharacterHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrefixCharacterHeightFactor`` 
    
    :param prefixCharacterHeightFactor: 
    :type prefixCharacterHeightFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ReferenceToShow: ReferenceShowTypes = ...
    """
    Returns or sets  the reference to show 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceToShow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ReferenceShowTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceToShow`` 
    
    :param referenceToShow: 
    :type referenceToShow: :py:class:`NXOpen.Drawings.ReferenceShowTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScaleCharacterHeightFactor: float = ...
    """
    Returns or sets  the scale character height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleCharacterHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleCharacterHeightFactor`` 
    
    :param scaleCharacterHeightFactor: 
    :type scaleCharacterHeightFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScalePosition: ScalePositionTypes = ...
    """
    Returns or sets  the scale position 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalePosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ScalePositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScalePosition`` 
    
    :param scalePosition: 
    :type scalePosition: :py:class:`NXOpen.Drawings.ScalePositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScalePrefix: str = ...
    """
    Returns or sets  the scale prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScalePrefix`` 
    
    :param scalePrefix: 
    :type scalePrefix: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowViewLabel: bool = ...
    """
    Returns or sets  the show view label 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowViewLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowViewLabel`` 
    
    :param showViewLabel: 
    :type showViewLabel: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowViewScale: bool = ...
    """
    Returns or sets  the show view scale 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowViewScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowViewScale`` 
    
    :param showViewScale: 
    :type showViewScale: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TextGapFactor: float = ...
    """
    Returns or sets  the text gap factor 
    
    <hr>
    
    Getter Method
    
    Signature ``TextGapFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextGapFactor`` 
    
    :param textGapFactor: 
    :type textGapFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TextPlacement: ViewDetailLabelBuilderLabelParentTextPlacement = ...
    """
    Returns or sets  the text placement 
    
    <hr>
    
    Getter Method
    
    Signature ``TextPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewDetailLabelBuilderLabelParentTextPlacement` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TextPlacement`` 
    
    :param textPlacement: 
    :type textPlacement: :py:class:`NXOpen.Drawings.ViewDetailLabelBuilderLabelParentTextPlacement` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ValueFormat: ScaleValueFormatTypes = ...
    """
    Returns or sets  the value format 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ScaleValueFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ValueFormat`` 
    
    :param valueFormat: 
    :type valueFormat: :py:class:`NXOpen.Drawings.ScaleValueFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewLabelOption: ViewLabelTypes = ...
    """
    Returns or sets  the view label option 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewLabelOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewLabelTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewLabelOption`` 
    
    :param viewLabelOption: 
    :type viewLabelOption: :py:class:`NXOpen.Drawings.ViewLabelTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewDetailLabelBuilder = ...  # unknown typename


class SketchSectionLineBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SketchSectionLineBuilderType():
    """
    Section  type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "StandAlone", " - "
       "Derived", " - "
    """
    StandAlone = 0  # SketchSectionLineBuilderTypeMemberType
    Derived = 1  # SketchSectionLineBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SketchSectionLineBuilderSectionLineTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SketchSectionLineBuilderSectionLineTypes():
    """
    Section line type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SimpleStepped", " - "
       "Half", " - "
       "PoinToPoint", " - "
    """
    SimpleStepped = 0  # SketchSectionLineBuilderSectionLineTypesMemberType
    Half = 1  # SketchSectionLineBuilderSectionLineTypesMemberType
    PoinToPoint = 2  # SketchSectionLineBuilderSectionLineTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SketchSectionLineBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Drawings.SectionLine` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.SectionLineCollection.CreateSketchSectionLineBuilder`
    
    Default values.
    
    ==================  ==============
    Property            Value
    ==================  ==============
    AssociateToSketch   1 
    ------------------  --------------
    FoldedToggle        0 
    ------------------  --------------
    SectionLineType     SimpleStepped 
    ------------------  --------------
    SectionType         StandAlone 
    ==================  ==============
    
    .. versionadded:: NX10.0.0
    """
    
    class Type():
        """
        Section  type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "StandAlone", " - "
           "Derived", " - "
        """
        StandAlone = 0  # SketchSectionLineBuilderTypeMemberType
        Derived = 1  # SketchSectionLineBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SectionLineTypes():
        """
        Section line type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SimpleStepped", " - "
           "Half", " - "
           "PoinToPoint", " - "
        """
        SimpleStepped = 0  # SketchSectionLineBuilderSectionLineTypesMemberType
        Half = 1  # SketchSectionLineBuilderSectionLineTypesMemberType
        PoinToPoint = 2  # SketchSectionLineBuilderSectionLineTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetSketch(self, sketch: NXOpen.Sketch) -> None:
        """
        Set the sketch 
        
        Signature ``SetSketch(sketch)`` 
        
        :param sketch:  the sketch which created or selected 
        :type sketch: :py:class:`NXOpen.Sketch` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    AssociateToSketch: bool = ...
    """
    Returns or sets  the associate to sketch 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociateToSketch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociateToSketch`` 
    
    :param associateToSketch: 
    :type associateToSketch: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FoldedToggle: bool = ...
    """
    Returns or sets  the folded toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``FoldedToggle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FoldedToggle`` 
    
    :param foldedToggle: 
    :type foldedToggle: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ParentView: ParentViewBuilder = ...
    """
    Returns  the parent view 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ParentViewBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the reverse direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SectionLineType: SketchSectionLineBuilderSectionLineTypes = ...
    """
    Returns or sets  the section line type 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionLineType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SketchSectionLineBuilderSectionLineTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionLineType`` 
    
    :param sectionLineType: 
    :type sectionLineType: :py:class:`NXOpen.Drawings.SketchSectionLineBuilderSectionLineTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SectionType: SketchSectionLineBuilderType = ...
    """
    Returns or sets  the section type 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SketchSectionLineBuilderType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionType`` 
    
    :param sectionType: 
    :type sectionType: :py:class:`NXOpen.Drawings.SketchSectionLineBuilderType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Settings: SectionLineSettingsBuilder = ...
    """
    Returns  the settings 
    
    <hr>
    
    Getter Method
    
    Signature ``Settings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSettingsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SketchSection: NXOpen.Section = ...
    """
    Returns  the sketch section 
    
    <hr>
    
    Getter Method
    
    Signature ``SketchSection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SourceView: SelectDraftingView = ...
    """
    Returns  the source view 
    
    <hr>
    
    Getter Method
    
    Signature ``SourceView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: SketchSectionLineBuilder = ...  # unknown typename


class ViewProjectedArrowSettingsBuilderDimensionsStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewProjectedArrowSettingsBuilderDimensionsStyleType():
    """
    Represents arrowhead style
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Filled", " - "
       "Closed", " - "
       "Open", " - "
    """
    Filled = 0  # ViewProjectedArrowSettingsBuilderDimensionsStyleTypeMemberType
    Closed = 1  # ViewProjectedArrowSettingsBuilderDimensionsStyleTypeMemberType
    Open = 2  # ViewProjectedArrowSettingsBuilderDimensionsStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewProjectedArrowSettingsBuilderDispalyLabelTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewProjectedArrowSettingsBuilderDispalyLabelType():
    """
    Represents display label type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "No", " - "
       "OnReferenceArrow", " - "
       "OnReferenceArrowAndView", " - "
    """
    No = 0  # ViewProjectedArrowSettingsBuilderDispalyLabelTypeMemberType
    OnReferenceArrow = 1  # ViewProjectedArrowSettingsBuilderDispalyLabelTypeMemberType
    OnReferenceArrowAndView = 2  # ViewProjectedArrowSettingsBuilderDispalyLabelTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewProjectedArrowSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewProjectedArrowSettingsBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    
    class DimensionsStyleType():
        """
        Represents arrowhead style
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Filled", " - "
           "Closed", " - "
           "Open", " - "
        """
        Filled = 0  # ViewProjectedArrowSettingsBuilderDimensionsStyleTypeMemberType
        Closed = 1  # ViewProjectedArrowSettingsBuilderDimensionsStyleTypeMemberType
        Open = 2  # ViewProjectedArrowSettingsBuilderDimensionsStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DispalyLabelType():
        """
        Represents display label type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "No", " - "
           "OnReferenceArrow", " - "
           "OnReferenceArrowAndView", " - "
        """
        No = 0  # ViewProjectedArrowSettingsBuilderDispalyLabelTypeMemberType
        OnReferenceArrow = 1  # ViewProjectedArrowSettingsBuilderDispalyLabelTypeMemberType
        OnReferenceArrowAndView = 2  # ViewProjectedArrowSettingsBuilderDispalyLabelTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ArrowHeadAngle: float = ...
    """
    Returns or sets  the arrow head angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowHeadAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowHeadAngle`` 
    
    :param arrowHeadAngle: 
    :type arrowHeadAngle: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowHeadLength: float = ...
    """
    Returns or sets  the arrow head length 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowHeadLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowHeadLength`` 
    
    :param arrowHeadLength: 
    :type arrowHeadLength: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowHeadStyle: ViewProjectedArrowSettingsBuilderDimensionsStyleType = ...
    """
    Returns or sets  the arrow head style 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowHeadStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectedArrowSettingsBuilderDimensionsStyleType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowHeadStyle`` 
    
    :param arrowHeadStyle: 
    :type arrowHeadStyle: :py:class:`NXOpen.Drawings.ViewProjectedArrowSettingsBuilderDimensionsStyleType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowLineDistanceToGeometry: float = ...
    """
    Returns or sets  the arrow line distance to geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowLineDistanceToGeometry`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowLineDistanceToGeometry`` 
    
    :param arrowLineDistanceToGeometry: 
    :type arrowLineDistanceToGeometry: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowLineLength: float = ...
    """
    Returns or sets  the arrow line length 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowLineLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowLineLength`` 
    
    :param arrowLineLength: 
    :type arrowLineLength: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayLabel: ViewProjectedArrowSettingsBuilderDispalyLabelType = ...
    """
    Returns or sets  the display label 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectedArrowSettingsBuilderDispalyLabelType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayLabel`` 
    
    :param displayLabel: 
    :type displayLabel: :py:class:`NXOpen.Drawings.ViewProjectedArrowSettingsBuilderDispalyLabelType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LineColorFontWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the line color font width0 
    
    <hr>
    
    Getter Method
    
    Signature ``LineColorFontWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SizeFactor: float = ...
    """
    Returns or sets  the size factor 
    
    <hr>
    
    Getter Method
    
    Signature ``SizeFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SizeFactor`` 
    
    :param sizeFactor: 
    :type sizeFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewProjectedArrowSettingsBuilder = ...  # unknown typename


class ViewWorkflowBuilderStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewWorkflowBuilderStyle():
    """
    Represents the preview stle option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Border", " - "
       "Wireframe", " - "
       "HiddenWireframe", " - "
       "Shaded", " - "
    """
    Border = 0  # ViewWorkflowBuilderStyleMemberType
    Wireframe = 1  # ViewWorkflowBuilderStyleMemberType
    HiddenWireframe = 2  # ViewWorkflowBuilderStyleMemberType
    Shaded = 3  # ViewWorkflowBuilderStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewWorkflowBuilderDisplayMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewWorkflowBuilderDisplay():
    """
    Represents the extracted edge face display option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DisplayandEmphasize", " - "
       "CurvesOnly", " - "
    """
    DisplayandEmphasize = 0  # ViewWorkflowBuilderDisplayMemberType
    CurvesOnly = 1  # ViewWorkflowBuilderDisplayMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewWorkflowBuilderSplarcsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewWorkflowBuilderSplarcs():
    """
    Represents the setting for splarcs geometry projected as arc option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Always", " - "
       "NeverForAutomatic", " - "
       "Never", " - "
    """
    Always = 0  # ViewWorkflowBuilderSplarcsMemberType
    NeverForAutomatic = 1  # ViewWorkflowBuilderSplarcsMemberType
    Never = 2  # ViewWorkflowBuilderSplarcsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewWorkflowBuilderHandlingbodiesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewWorkflowBuilderHandlingbodies():
    """
    Represents option for handling bodies with no valid lightweight data   
    
    .. deprecated::  NX9.0.3
       Use :py:class:`NXOpen.Drawings.ViewWorkflowBuilderHandlingBodiesType` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OmitBodiesfromView", " - "
       "StopUpdateandNotifyUser", " - "
       "StopUpdate", " - "
       "Generate", " - "
    """
    OmitBodiesfromView = 0  # ViewWorkflowBuilderHandlingbodiesMemberType
    StopUpdateandNotifyUser = 1  # ViewWorkflowBuilderHandlingbodiesMemberType
    StopUpdate = 2  # ViewWorkflowBuilderHandlingbodiesMemberType
    Generate = 3  # ViewWorkflowBuilderHandlingbodiesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewWorkflowBuilderHandlingBodiesTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewWorkflowBuilderHandlingBodiesType():
    """
    Represents option for handling bodies with no valid lightweight data 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OmitBodiesfromView", " - "
       "StopUpdateandNotifyUser", " - "
       "StopUpdate", " - "
       "Generate", " - "
    """
    OmitBodiesfromView = 0  # ViewWorkflowBuilderHandlingBodiesTypeMemberType
    StopUpdateandNotifyUser = 1  # ViewWorkflowBuilderHandlingBodiesTypeMemberType
    StopUpdate = 2  # ViewWorkflowBuilderHandlingBodiesTypeMemberType
    Generate = 3  # ViewWorkflowBuilderHandlingBodiesTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewWorkflowBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewWorkflowBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    
    class Style():
        """
        Represents the preview stle option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Border", " - "
           "Wireframe", " - "
           "HiddenWireframe", " - "
           "Shaded", " - "
        """
        Border = 0  # ViewWorkflowBuilderStyleMemberType
        Wireframe = 1  # ViewWorkflowBuilderStyleMemberType
        HiddenWireframe = 2  # ViewWorkflowBuilderStyleMemberType
        Shaded = 3  # ViewWorkflowBuilderStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Display():
        """
        Represents the extracted edge face display option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DisplayandEmphasize", " - "
           "CurvesOnly", " - "
        """
        DisplayandEmphasize = 0  # ViewWorkflowBuilderDisplayMemberType
        CurvesOnly = 1  # ViewWorkflowBuilderDisplayMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Splarcs():
        """
        Represents the setting for splarcs geometry projected as arc option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Always", " - "
           "NeverForAutomatic", " - "
           "Never", " - "
        """
        Always = 0  # ViewWorkflowBuilderSplarcsMemberType
        NeverForAutomatic = 1  # ViewWorkflowBuilderSplarcsMemberType
        Never = 2  # ViewWorkflowBuilderSplarcsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Handlingbodies():
        """
        Represents option for handling bodies with no valid lightweight data   
        
        .. deprecated::  NX9.0.3
           Use :py:class:`NXOpen.Drawings.ViewWorkflowBuilderHandlingBodiesType` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OmitBodiesfromView", " - "
           "StopUpdateandNotifyUser", " - "
           "StopUpdate", " - "
           "Generate", " - "
        """
        OmitBodiesfromView = 0  # ViewWorkflowBuilderHandlingbodiesMemberType
        StopUpdateandNotifyUser = 1  # ViewWorkflowBuilderHandlingbodiesMemberType
        StopUpdate = 2  # ViewWorkflowBuilderHandlingbodiesMemberType
        Generate = 3  # ViewWorkflowBuilderHandlingbodiesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HandlingBodiesType():
        """
        Represents option for handling bodies with no valid lightweight data 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OmitBodiesfromView", " - "
           "StopUpdateandNotifyUser", " - "
           "StopUpdate", " - "
           "Generate", " - "
        """
        OmitBodiesfromView = 0  # ViewWorkflowBuilderHandlingBodiesTypeMemberType
        StopUpdateandNotifyUser = 1  # ViewWorkflowBuilderHandlingBodiesTypeMemberType
        StopUpdate = 2  # ViewWorkflowBuilderHandlingBodiesTypeMemberType
        Generate = 3  # ViewWorkflowBuilderHandlingBodiesTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ActiveSketchViewColor: NXOpen.NXColor = ...
    """
    Returns or sets  the active views border color 
    
    <hr>
    
    Getter Method
    
    Signature ``ActiveSketchViewColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActiveSketchViewColor`` 
    
    :param activeSketchViewColor: 
    :type activeSketchViewColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AssociativeAlignment: bool = ...
    """
    Returns or sets  the associative alignment enable alignement between views
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativeAlignment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociativeAlignment`` 
    
    :param associativeAlignment: 
    :type associativeAlignment: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BorderColor: NXOpen.NXColor = ...
    """
    Returns or sets  the border color of view 
    
    <hr>
    
    Getter Method
    
    Signature ``BorderColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderColor`` 
    
    :param borderColor: 
    :type borderColor: Id 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CursorTracking: bool = ...
    """
    Returns or sets  the cursor tracking enable XC/YC coordinates in dynamic input boxes when placing a view on a drawing 
    
    <hr>
    
    Getter Method
    
    Signature ``CursorTracking`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CursorTracking`` 
    
    :param cursorTracking: 
    :type cursorTracking: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayBorders: bool = ...
    """
    Returns or sets  the display view borders on the the drawing 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayBorders`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayBorders`` 
    
    :param displayBorders: 
    :type displayBorders: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    EnableSmoothEdgesForLWView: bool = ...
    """
    Returns or sets  the setting is not needed anymore because the smooth edges are correctly supported now for smart lightweight views.  
    
    We recommend removing this call from existing programs. 
    
    <hr>
    
    Getter Method
    
    Signature ``EnableSmoothEdgesForLWView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Replacement is not needed. We recommend removing this call from existing programs.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnableSmoothEdgesForLWView`` 
    
    :param enableSmoothEdgesForLWView: 
    :type enableSmoothEdgesForLWView: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.0
       Replacement is not needed. We recommend removing this call from existing programs.
    
    License requirements: drafting ("DRAFTING")
    """
    FaceDisplay: ViewWorkflowBuilderDisplay = ...
    """
    Returns or sets  the face display provides options in an extracted edge view that are available for selection 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceDisplay`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderDisplay` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceDisplay`` 
    
    :param faceDisplay: 
    :type faceDisplay: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderDisplay` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HandlingBodies: ViewWorkflowBuilderHandlingbodies = ...
    """
    Returns or sets  the handling bodies provides option for update view without lightweight data 
    
    <hr>
    
    Getter Method
    
    Signature ``HandlingBodies`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderHandlingbodies` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX9.0.3
       Use :py:meth:`NXOpen.Drawings.ViewWorkflowBuilder.HandlingBodiesTypes` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandlingBodies`` 
    
    :param handlingBodies: 
    :type handlingBodies: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderHandlingbodies` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX9.0.3
       Use :py:meth:`NXOpen.Drawings.ViewWorkflowBuilder.HandlingBodiesTypes` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    HandlingBodiesTypes: ViewWorkflowBuilderHandlingBodiesType = ...
    """
    Returns or sets  the handling bodies provides option for update view without lightweight data 
    
    <hr>
    
    Getter Method
    
    Signature ``HandlingBodiesTypes`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderHandlingBodiesType` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HandlingBodiesTypes`` 
    
    :param handlingBodiesTypes: 
    :type handlingBodiesTypes: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderHandlingBodiesType` 
    
    .. versionadded:: NX9.0.3
    
    License requirements: None.
    """
    LargeAssemblyStepThreshold: int = ...
    """
    Returns or sets  the large assembly step threshold option establishes the minimum number of components (loaded or unloaded) a part may have to be considered a 
    large assembly.  
    
    When the number of components exceeds this number, the View Creation Wizard provides an extra step 
    to optimize part settings for large assemblies. A value of zero will force the system to always use the optimized 
    part settings for large assemblies 
    
    <hr>
    
    Getter Method
    
    Signature ``LargeAssemblyStepThreshold`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LargeAssemblyStepThreshold`` 
    
    :param largeAssemblyStepThreshold: 
    :type largeAssemblyStepThreshold: int 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LoadComponentsOnDemand: bool = ...
    """
    Returns or sets  whether or not to load the components on demand for smart lightweight views 
    
    <hr>
    
    Getter Method
    
    Signature ``LoadComponentsOnDemand`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LoadComponentsOnDemand`` 
    
    :param loadComponentsOnDemand: 
    :type loadComponentsOnDemand: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OnLegacyViewUpdate: bool = ...
    """
    Returns or sets  the on legacy view update determines whether or not components should be loaded as needed to update lightweight views 
    
    <hr>
    
    Getter Method
    
    Signature ``OnLegacyViewUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OnLegacyViewUpdate`` 
    
    :param onLegacyViewUpdate: 
    :type onLegacyViewUpdate: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OnViewSelection: bool = ...
    """
    Returns or sets  the on view selection determines whether or not components should be loaded as needed for selection in lightweight 
    views for accurate dimensioning 
    
    <hr>
    
    Getter Method
    
    Signature ``OnViewSelection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OnViewSelection`` 
    
    :param onViewSelection: 
    :type onViewSelection: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PreviewStyle: ViewWorkflowBuilderStyle = ...
    """
    Returns or sets  the style of the preview when adding a view to the drawing 
    
    <hr>
    
    Getter Method
    
    Signature ``PreviewStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderStyle` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreviewStyle`` 
    
    :param previewStyle: 
    :type previewStyle: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderStyle` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelectGeometryProjectedAsArcs: ViewWorkflowBuilderSplarcs = ...
    """
    Returns or sets  the Select Geometry Projected as Arcs provides options for selection of SPLARCs entity for centerlines and Annotations 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectGeometryProjectedAsArcs`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderSplarcs` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectGeometryProjectedAsArcs`` 
    
    :param selectGeometryProjectedAsArcs: 
    :type selectGeometryProjectedAsArcs: :py:class:`NXOpen.Drawings.ViewWorkflowBuilderSplarcs` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ShowFacetEdges: bool = ...
    """
    Returns or sets  the show facet edges determines whether or not facet edges will be shown on shaded faces when displaying a drawing sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowFacetEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowFacetEdges`` 
    
    :param showFacetEdges: 
    :type showFacetEdges: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    UseLineAntialiasing: bool = ...
    """
    Returns or sets  the use line antialiasing 
    
    <hr>
    
    Getter Method
    
    Signature ``UseLineAntialiasing`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseLineAntialiasing`` 
    
    :param useLineAntialiasing: 
    :type useLineAntialiasing: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    UseTranslucency: bool = ...
    """
    Returns or sets  the use translucency determines translucency settings for faces when displaying a drawing sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``UseTranslucency`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseTranslucency`` 
    
    :param useTranslucency: 
    :type useTranslucency: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewWorkflowBuilder = ...  # unknown typename


class DetailViewBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DetailViewBuilderTypes():
    """
    the type of boundary 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Undefined", "For initial values"
       "Circular", "Circular boundary"
       "RectangleByCorners", "Rectangular boundary defined by two corners"
       "RectangleByCenterAndCorner", "Rectangular boundary defined by the center and a corner"
       "Custom", "Custom boundary (this should not be used unless the detail view already has a custom boundary"
    """
    Undefined = -1  # DetailViewBuilderTypesMemberType
    Circular = 0  # DetailViewBuilderTypesMemberType
    RectangleByCorners = 1  # DetailViewBuilderTypesMemberType
    RectangleByCenterAndCorner = 2  # DetailViewBuilderTypesMemberType
    Custom = 3  # DetailViewBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DetailViewBuilderLabelOnParentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DetailViewBuilderLabelOnParentType():
    """
    the display type for the label on parent 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "No display"
       "Circle", "Circular"
       "Note", "Circular with a note"
       "Label", "Circular with a label"
       "Embedded", "Circular with a note embedded"
       "Boundary", "The shape is the same as the boundary"
       "LabelOnBoundary", "Boundary with a label"
    """
    NotSet = 0  # DetailViewBuilderLabelOnParentTypeMemberType
    Circle = 1  # DetailViewBuilderLabelOnParentTypeMemberType
    Note = 2  # DetailViewBuilderLabelOnParentTypeMemberType
    Label = 3  # DetailViewBuilderLabelOnParentTypeMemberType
    Embedded = 4  # DetailViewBuilderLabelOnParentTypeMemberType
    Boundary = 5  # DetailViewBuilderLabelOnParentTypeMemberType
    LabelOnBoundary = 6  # DetailViewBuilderLabelOnParentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DetailViewBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.DetailView`.  
    
    This class is
    used to create and edit Detail Views
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateDetailViewBuilder`
    
    Default values.
    
    ======================================================  ================
    Property                                                Value
    ======================================================  ================
    Origin.AlignmentMethod                                  Infer 
    ------------------------------------------------------  ----------------
    Origin.AlignmentOption                                  ToView 
    ------------------------------------------------------  ----------------
    Scale.Denominator                                       1.0 
    ------------------------------------------------------  ----------------
    Scale.Numerator                                         1.0 
    ------------------------------------------------------  ----------------
    Scale.ScaleType                                         Ratio 
    ------------------------------------------------------  ----------------
    SecondaryComponents.ObjectType                          PrimaryGeometry 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.AngleSetting.Angle.Value         0 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.AngleSetting.Associative         0 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.AngleSetting.EvaluationPlane     DrawingSheet 
    ------------------------------------------------------  ----------------
    Style.ViewStyleOrientation.HingeLine.ReverseDirection   false 
    ------------------------------------------------------  ----------------
    Style.ViewStyleOrientation.HingeLine.VectorOption       Inferred 
    ------------------------------------------------------  ----------------
    Style.ViewStyleOrientation.Ovt.AssociativeOrientation   0 
    ======================================================  ================
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        the type of boundary 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Undefined", "For initial values"
           "Circular", "Circular boundary"
           "RectangleByCorners", "Rectangular boundary defined by two corners"
           "RectangleByCenterAndCorner", "Rectangular boundary defined by the center and a corner"
           "Custom", "Custom boundary (this should not be used unless the detail view already has a custom boundary"
        """
        Undefined = -1  # DetailViewBuilderTypesMemberType
        Circular = 0  # DetailViewBuilderTypesMemberType
        RectangleByCorners = 1  # DetailViewBuilderTypesMemberType
        RectangleByCenterAndCorner = 2  # DetailViewBuilderTypesMemberType
        Custom = 3  # DetailViewBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LabelOnParentType():
        """
        the display type for the label on parent 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "No display"
           "Circle", "Circular"
           "Note", "Circular with a note"
           "Label", "Circular with a label"
           "Embedded", "Circular with a note embedded"
           "Boundary", "The shape is the same as the boundary"
           "LabelOnBoundary", "Boundary with a label"
        """
        NotSet = 0  # DetailViewBuilderLabelOnParentTypeMemberType
        Circle = 1  # DetailViewBuilderLabelOnParentTypeMemberType
        Note = 2  # DetailViewBuilderLabelOnParentTypeMemberType
        Label = 3  # DetailViewBuilderLabelOnParentTypeMemberType
        Embedded = 4  # DetailViewBuilderLabelOnParentTypeMemberType
        Boundary = 5  # DetailViewBuilderLabelOnParentTypeMemberType
        LabelOnBoundary = 6  # DetailViewBuilderLabelOnParentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Associative: bool = ...
    """
    Returns or sets  the associative toggle
    If view is associative and set associative to false, the view will be converted
    to independent detail view.  
    
    Otherwise, this setting will have no effect
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BoundaryPoint1: NXOpen.Point = ...
    """
    Returns or sets 
    the first boundary point.  
    
    This is the center of the boundary for these types:
    :py:class:`NXOpen.Drawings.DetailViewBuilderTypes.Circular <NXOpen.Drawings.DetailViewBuilderTypes>` and 
    :py:class:`NXOpen.Drawings.DetailViewBuilderTypes.RectangleByCenterAndCorner <NXOpen.Drawings.DetailViewBuilderTypes>`.
    This boundary point will be None for the type: 
    :py:class:`NXOpen.Drawings.DetailViewBuilderTypes.Custom <NXOpen.Drawings.DetailViewBuilderTypes>`
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryPoint1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryPoint1`` 
    
    :param boundaryPoint1: 
    :type boundaryPoint1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BoundaryPoint2: NXOpen.Point = ...
    """
    Returns or sets 
    the second boundary point.  
    
    This is the point on the circle for the 
    :py:class:`NXOpen.Drawings.DetailViewBuilderTypes.Circular <NXOpen.Drawings.DetailViewBuilderTypes>` and 
    the corner point for the :py:class:`NXOpen.Drawings.DetailViewBuilderTypes.RectangleByCenterAndCorner <NXOpen.Drawings.DetailViewBuilderTypes>`.
    This boundary point will be None for the type:
    :py:class:`NXOpen.Drawings.DetailViewBuilderTypes.Custom <NXOpen.Drawings.DetailViewBuilderTypes>`
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryPoint2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryPoint2`` 
    
    :param boundaryPoint2: 
    :type boundaryPoint2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenObjects: HiddenObjectsBuilder = ...
    """
    Returns  the list of objects to not show in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LabelOnParent: DetailViewBuilderLabelOnParentType = ...
    """
    Returns or sets  the label on parent 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelOnParent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DetailViewBuilderLabelOnParentType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelOnParent`` 
    
    :param labelOnParent: 
    :type labelOnParent: :py:class:`NXOpen.Drawings.DetailViewBuilderLabelOnParentType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    NonSectionedObjects: HiddenObjectsBuilder = ...
    """
    Returns  the list of objects to not section in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Origin: ViewPlacementBuilder = ...
    """
    Returns  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Parent: ParentViewBuilder = ...
    """
    Returns  the parent view 
    
    <hr>
    
    Getter Method
    
    Signature ``Parent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ParentViewBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Scale: ViewScaleBuilder = ...
    """
    Returns  the scale 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewScaleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SecondaryComponents: DraftingComponentSelectionBuilder = ...
    """
    Returns  the list of secondary components in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingComponentSelectionBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Style: ViewStyleBuilder = ...
    """
    Returns  the style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Type: DetailViewBuilderTypes = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DetailViewBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.DetailViewBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: DetailViewBuilder = ...  # unknown typename


class SelectDraftingViewList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: DraftingView) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Drawings.DraftingView` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[DraftingView]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Drawings.DraftingView` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: DraftingView, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DraftingView` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: DraftingView, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: DraftingView, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Drawings.DraftingView` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Drawings.DraftingView` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: DraftingView, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DraftingView` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: DraftingView) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Drawings.DraftingView` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: DraftingView, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Drawings.DraftingView` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: DraftingView, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: DraftingView, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Drawings.DraftingView` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Drawings.DraftingView` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[DraftingView]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Drawings.DraftingView` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: DraftingView) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Drawings.DraftingView` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[DraftingView]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[DraftingView]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectDraftingViewList = ...  # unknown typename


class SectionViewBuilderSectionViewModeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionViewBuilderSectionViewModeType():
    """
    Section Line Mode 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Dynamic", " - "
       "StandAlone", " - "
    """
    Dynamic = 0  # SectionViewBuilderSectionViewModeTypeMemberType
    StandAlone = 1  # SectionViewBuilderSectionViewModeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionViewBuilderSectionLineTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionViewBuilderSectionLineType():
    """
    Section Line type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SimpleStepped", " - "
       "Half", " - "
       "Revolved", " - "
       "PointToPoint", " - "
       "PointAndAngle", " - "
    """
    SimpleStepped = 0  # SectionViewBuilderSectionLineTypeMemberType
    Half = 1  # SectionViewBuilderSectionLineTypeMemberType
    Revolved = 2  # SectionViewBuilderSectionLineTypeMemberType
    PointToPoint = 3  # SectionViewBuilderSectionLineTypeMemberType
    PointAndAngle = 4  # SectionViewBuilderSectionLineTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionViewBuilderSectionCutTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionViewBuilderSectionCutType():
    """
    Section Line Cut type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FullPart", " - "
       "SectionedPart", " - "
    """
    FullPart = 0  # SectionViewBuilderSectionCutTypeMemberType
    SectionedPart = 1  # SectionViewBuilderSectionCutTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionViewBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.SectionView` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateSectionViewBuilder`
    
    Default values.
    
    ==========================================================  ================
    Property                                                    Value
    ==========================================================  ================
    CreateFolded                                                1 
    ----------------------------------------------------------  ----------------
    SecondaryComponents.ObjectType                              PrimaryGeometry 
    ----------------------------------------------------------  ----------------
    SectionViewTool.Orientation                                 0 
    ----------------------------------------------------------  ----------------
    ViewPlacement.AlignmentMethod                               Infer 
    ----------------------------------------------------------  ----------------
    ViewPlacement.AlignmentOption                               ToView 
    ----------------------------------------------------------  ----------------
    ViewStyle.ViewStyleGeneral.AngleSetting.Angle.Value         0 
    ----------------------------------------------------------  ----------------
    ViewStyle.ViewStyleGeneral.AngleSetting.Associative         0 
    ----------------------------------------------------------  ----------------
    ViewStyle.ViewStyleGeneral.AngleSetting.EvaluationPlane     DrawingSheet 
    ----------------------------------------------------------  ----------------
    ViewStyle.ViewStyleGeneral.Scale.Denominator                1.0 
    ----------------------------------------------------------  ----------------
    ViewStyle.ViewStyleGeneral.Scale.Numerator                  1.0 
    ----------------------------------------------------------  ----------------
    ViewStyle.ViewStyleGeneral.Scale.ScaleType                  Ratio 
    ----------------------------------------------------------  ----------------
    ViewStyle.ViewStyleOrientation.HingeLine.ReverseDirection   false 
    ----------------------------------------------------------  ----------------
    ViewStyle.ViewStyleOrientation.HingeLine.VectorOption       Inferred 
    ----------------------------------------------------------  ----------------
    ViewStyle.ViewStyleOrientation.Ovt.AssociativeOrientation   0 
    ----------------------------------------------------------  ----------------
    ViewUnfolded (deprecated)                                   1 
    ==========================================================  ================
    
    .. versionadded:: NX6.0.0
    """
    
    class SectionViewModeType():
        """
        Section Line Mode 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Dynamic", " - "
           "StandAlone", " - "
        """
        Dynamic = 0  # SectionViewBuilderSectionViewModeTypeMemberType
        StandAlone = 1  # SectionViewBuilderSectionViewModeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SectionLineType():
        """
        Section Line type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SimpleStepped", " - "
           "Half", " - "
           "Revolved", " - "
           "PointToPoint", " - "
           "PointAndAngle", " - "
        """
        SimpleStepped = 0  # SectionViewBuilderSectionLineTypeMemberType
        Half = 1  # SectionViewBuilderSectionLineTypeMemberType
        Revolved = 2  # SectionViewBuilderSectionLineTypeMemberType
        PointToPoint = 3  # SectionViewBuilderSectionLineTypeMemberType
        PointAndAngle = 4  # SectionViewBuilderSectionLineTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SectionCutType():
        """
        Section Line Cut type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FullPart", " - "
           "SectionedPart", " - "
        """
        FullPart = 0  # SectionViewBuilderSectionCutTypeMemberType
        SectionedPart = 1  # SectionViewBuilderSectionCutTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CreateFolded: bool = ...
    """
    Returns or sets  the create folded 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateFolded`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateFolded`` 
    
    :param viewUnfolded: 
    :type viewUnfolded: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenObjects: HiddenObjectsBuilder = ...
    """
    Returns  the hidden objects 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NonSectionedObjects: HiddenObjectsBuilder = ...
    """
    Returns  the non sectioned objects 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ParentView: ParentViewBuilder = ...
    """
    Returns  the selected parent view 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ParentViewBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SecondaryComponents: DraftingComponentSelectionBuilder = ...
    """
    Returns  the list of secondary objects in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingComponentSelectionBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SectionLine: SpecifySectionLineBuilder = ...
    """
    Returns  the section Line 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SpecifySectionLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SectionLineSegments: SectionLineSegmentsBuilder = ...
    """
    Returns  the section line segment builder 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionLineSegments`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SectionViewMode: SectionViewBuilderSectionViewModeType = ...
    """
    Returns or sets  the section line mode 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionViewMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionViewBuilderSectionViewModeType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionViewMode`` 
    
    :param sectionViewMode: 
    :type sectionViewMode: :py:class:`NXOpen.Drawings.SectionViewBuilderSectionViewModeType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SectionViewTool: SvtBuilder = ...
    """
    Returns  the section view tool 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionViewTool`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SvtBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SectionViewType: SectionViewBuilderSectionLineType = ...
    """
    Returns or sets  the section line type 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionViewType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionViewBuilderSectionLineType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionViewType`` 
    
    :param sectionLineType: 
    :type sectionLineType: :py:class:`NXOpen.Drawings.SectionViewBuilderSectionLineType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ViewOrientation: ViewOrientationBuilder = ...
    """
    Returns  the view orientation 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewOrientationBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ViewPlacement: ViewPlacementBuilder = ...
    """
    Returns  the view placement 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ViewStyle: ViewStyleBuilder = ...
    """
    Returns  the view style 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ViewUnfolded: bool = ...
    """
    Returns or sets  the view unfolded toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewUnfolded`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SectionViewBuilder.CreateFolded`
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewUnfolded`` 
    
    :param viewUnfolded: 
    :type viewUnfolded: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SectionViewBuilder.CreateFolded`
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SectionViewBuilder = ...  # unknown typename


class ViewStyleShipbuildingLinesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the Shipbuilding LINES tab on the View Style Dialog (Drawings.  
    
    ViewStyleShipbuildingLinesBuilder)
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateShipbuildingLineBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    HiddenColor: NXOpen.NXColor = ...
    """
    Returns or sets  the hidden line color on the SHIPBUILDING LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenColor`` 
    
    :returns:  Returns the hidden line color that is on the shipbuilding line sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenColor`` 
    
    :param color:  Sets a new hidden line color on the shipbuilding line sub-builder  
    :type color: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    HiddenFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the hidden line font on the SHIPBUILDING LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenFont`` 
    
    :returns:  Returns the hidden line font that is on the shipbuilding line sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenFont`` 
    
    :param font:  Sets a new hidden line font on the shipbuilding line sub-builder  
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    HiddenWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the hidden line width on the SHIPBUILDING LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenWidth`` 
    
    :returns:  Returns the hidden line width that is on the shipbuilding line sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenWidth`` 
    
    :param width:  Sets a new hidden line width on the shipbuilding line sub-builder  
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    SingleLineRepresentation: bool = ...
    """
    Returns or sets  the Shipbuilding line toggle on the SHIPBUILDING LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SingleLineRepresentation`` 
    
    :returns:  Returns the single line toggle value for the feature on the shipbuilding line sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SingleLineRepresentation`` 
    
    :param singleLineToggle:  Sets a new single line toggle value for the feature on the shipbuilding line sub-builder  
    :type singleLineToggle: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    VisibleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the visible line color on the SHIPBUILDING LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleColor`` 
    
    :returns:  Returns the visible line color that is on the shipbuilding line sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleColor`` 
    
    :param color:  Sets a new visible line color on the shipbuilding line sub-builder  
    :type color: Id 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    VisibleFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the visible line font on the SHIPBUILDING LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleFont`` 
    
    :returns:  Returns the visible line font that is on the shipbuilding line sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleFont`` 
    
    :param font:  Sets a new visible line font on the shipbuilding line sub-builder  
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    VisibleWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the visible line width on the SHIPBUILDING LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleWidth`` 
    
    :returns:  Returns the visible line width that is on the shipbuilding line sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleWidth`` 
    
    :param width:  Sets a new visible line width on the shipbuilding line sub-builder  
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    Null: ViewStyleShipbuildingLinesBuilder = ...  # unknown typename


class ViewBreakCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.ViewBreak`s.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Drawings.DraftingView`
    
    .. versionadded:: NX7.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> ViewBreak:
        """
        Finds the :py:class:`NXOpen.Drawings.DraftingView` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of
        the software. However newer versions of the software should find the same object when
        FindObject is passed older versions of its journal identifier. In general, this method
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the drafting view to be found  
        :type journalIdentifier: str 
        :returns:  View with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.ViewBreak` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    


class DrawingFormatSheetBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.DrawingFormatSheetBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    InitialSecondarySheetNumber: str = ...
    """
    Returns or sets  the initial secondary sheet number 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialSecondarySheetNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InitialSecondarySheetNumber`` 
    
    :param initialSecondarySheetNumber: 
    :type initialSecondarySheetNumber: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InitialSheetNumber: str = ...
    """
    Returns or sets  the initial sheet number 
    
    <hr>
    
    Getter Method
    
    Signature ``InitialSheetNumber`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InitialSheetNumber`` 
    
    :param initialSheetNumber: 
    :type initialSheetNumber: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondaryNumberDelimiter: str = ...
    """
    Returns or sets  the secondary number delimiter 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryNumberDelimiter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryNumberDelimiter`` 
    
    :param secondaryNumberDelimiter: 
    :type secondaryNumberDelimiter: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: DrawingFormatSheetBuilder = ...  # unknown typename


class VisibleLinesViewStyle(NXOpen.Preferences.IVisibleLinesViewPreferences):
    """
    Represents set of Visible Lines View Style Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.VisibleLines`
    
    .. versionadded:: NX5.0.0
    """
    VisibleColor: int = ...
    """
    Returns or sets  the visible color.  
    
    The value should be between 1 and 216. 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleColor`` 
    
    :param visibleColor: 
    :type visibleColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the visible font.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleFont`` 
    
    :param visibleFont: 
    :type visibleFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the visible width.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleWidth`` 
    
    :param visibleWidth: 
    :type visibleWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class CompareReportBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.CompareReportBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.DrawingCompareManager.CreateCompareReportBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def GetSummary(self) -> 'list[str]':
        """
        Returns the summary  
        
        Signature ``GetSummary()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDetailSummary(self) -> 'list[str]':
        """
        Returns the detail summary of report 
        
        Signature ``GetDetailSummary()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetChangesSummary(self) -> 'list[str]':
        """
        Returns the changes summary of report 
        
        Signature ``GetChangesSummary()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    SummaryStatusLine: str = ...
    """
    Returns  the report summary status line
    
    <hr>
    
    Getter Method
    
    Signature ``SummaryStatusLine`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: CompareReportBuilder = ...  # unknown typename


class DrawingSheetCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of drawing sheets.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX3.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def InsertSheet(self, drawingName: str, drawingUnits: DrawingSheetUnit, width: float, height: float, numerator: float, denominator: float, projectionAngle: DrawingSheetProjectionAngleType) -> DrawingSheet:
        """
        Inserts a sheet into a part.  
        
        Signature ``InsertSheet(drawingName, drawingUnits, width, height, numerator, denominator, projectionAngle)`` 
        
        :param drawingName:  Drawing name  
        :type drawingName: str 
        :param drawingUnits:  Unit of sheet size  
        :type drawingUnits: :py:class:`NXOpen.Drawings.DrawingSheetUnit` 
        :param width:  Width of drawing  
        :type width: float 
        :param height:  Height of drawing  
        :type height: float 
        :param numerator:  Numerator of the scale of drawing  
        :type numerator: float 
        :param denominator:  Denominator of the scale of drawing  
        :type denominator: float 
        :param projectionAngle:  Projection angle  
        :type projectionAngle: :py:class:`NXOpen.Drawings.DrawingSheetProjectionAngleType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.DrawingSheet` 
        
        .. versionadded:: NX3.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Drawings.DraftingDrawingSheetCollection.InsertSheet` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    @typing.overload
    def InsertSheet(self, drawingName: str, sheetSize: DrawingSheetStandardSheetSize, numerator: float, denominator: float, projectionAngle: DrawingSheetProjectionAngleType) -> DrawingSheet:
        """
        Inserts a sheet into a part. The drawings units will be inferred from the standard
        size. 
        
        Signature ``InsertSheet(drawingName, sheetSize, numerator, denominator, projectionAngle)`` 
        
        :param drawingName:   Drawing name  
        :type drawingName: str 
        :param sheetSize:  Sheet Size  
        :type sheetSize: :py:class:`NXOpen.Drawings.DrawingSheetStandardSheetSize` 
        :param numerator:  Numerator of the scale of drawing  
        :type numerator: float 
        :param denominator:  Denominator of the scale of drawing  
        :type denominator: float 
        :param projectionAngle:  Projection angle  
        :type projectionAngle: :py:class:`NXOpen.Drawings.DrawingSheetProjectionAngleType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.DrawingSheet` 
        
        .. versionadded:: NX3.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Drawings.DraftingDrawingSheetCollection.InsertSheet` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DrawingSheet:
        """
        Finds the :py:class:`NXOpen.Drawings.DrawingSheet` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the drawing sheet you want  
        :type journalIdentifier: str 
        :returns:  Drawing sheet with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.DrawingSheet` 
        
        .. versionadded:: NX3.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Drawings.DraftingDrawingSheetCollection.FindObject` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def DrawingSheetBuilder(self, sheet: DrawingSheet) -> DrawingSheetBuilder:
        """
        Create a drawing Sheet builder   
        
        Signature ``DrawingSheetBuilder(sheet)`` 
        
        :param sheet:  the drawing sheet  
        :type sheet: :py:class:`NXOpen.Drawings.DrawingSheet` 
        :returns:  the drawing sheet Builder with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.DrawingSheetBuilder` 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX12.0.0
           Use :py:meth:`NXOpen.Drawings.DraftingDrawingSheetCollection.CreateDraftingDrawingSheetBuilder` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def RefreshCurrentSheet(self) -> None:
        """
        Refresh the current Sheet  
        
        Signature ``RefreshCurrentSheet()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    CurrentDrawingSheet: DrawingSheet = ...
    """
    Returns  the currently opened drawing sheet.  
    
    This will return None 
    if no drawing sheet is opened. 
    
    <hr>
    
    Getter Method
    
    Signature ``CurrentDrawingSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheet` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SheetTemplates: SheetTemplateManager = ...
    """
    Returns the Sheet Template Manager for part 
    
    Signature ``SheetTemplates`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SheetTemplateManager`
    """


class ViewStyleSectionBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the SECTION tab on the View Style Dialog (Drawings.  
    
    ViewStyleSectionBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AdjacencyToleranceData: float = ...
    """
    Returns or sets  the adjacency tolerance on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacencyToleranceData`` 
    
    :returns:  Returns the assembly tolerance that is on the section sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacencyToleranceData`` 
    
    :param adjacencyToleranceData:  Sets a new assembly tolerance on the section sub-builder  
    :type adjacencyToleranceData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AssemblyTolerance: bool = ...
    """
    Returns or sets  the assembly tolerance toggle on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyTolerance`` 
    
    :returns:  Returns the assembly tolerance toggle value that is on the section sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssemblyTolerance`` 
    
    :param assemblyToleranceToggle:  Sets a new assembly tolerance toggle value on the section sub-builder  
    :type assemblyToleranceToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Background: bool = ...
    """
    Returns or sets  the background toggle on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Background`` 
    
    :returns:  Returns the background toggle value that is on the section sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Background`` 
    
    :param backgroundToggle:  Sets a new background toggle value on the section sub-builder  
    :type backgroundToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Bendlines: bool = ...
    """
    Returns or sets  the bendlines toggle on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Bendlines`` 
    
    :returns:  Returns the bendlines toggle value that is on the section sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Bendlines`` 
    
    :param bendlinesToggle:  Sets a new bendlines toggle value on the section sub-builder  
    :type bendlinesToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Crosshatch: bool = ...
    """
    Returns or sets  the crosshatch toggle on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Crosshatch`` 
    
    :returns:  Returns the crosshatch toggle value that is on the section sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Crosshatch`` 
    
    :param crosshatchToggle:  Sets a new crosshatch toggle value on the section sub-builder  
    :type crosshatchToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplaySectionLine: bool = ...
    """
    Returns or sets  the display section line toggle on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplaySectionLine`` 
    
    :returns:  Returns the display section line toggle value that is on the section sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplaySectionLine`` 
    
    :param displaySectionLine:  Sets a new display section line toggle value on the section sub-builder  
    :type displaySectionLine: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Foreground: bool = ...
    """
    Returns or sets  the foreground toggle on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Foreground`` 
    
    :returns:  Returns the foreground toggle value that is on the section sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Foreground`` 
    
    :param foregroundToggle:  Sets a new foreground toggle value on the section sub-builder  
    :type foregroundToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLineHatching: bool = ...
    """
    Returns or sets  the hidden line hatching toggle on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLineHatching`` 
    
    :returns:  Returns the hidden line hatching toggle value that is on the section sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLineHatching`` 
    
    :param hiddenLineHatchingToggle:  Sets a new hidden line hatching toggle value on the section sub-builder  
    :type hiddenLineHatchingToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RestrictCrosshatchAngle: bool = ...
    """
    Returns or sets  the restrict crosshatch angle toggle on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``RestrictCrosshatchAngle`` 
    
    :returns:  Returns the restrict crosshatch angle toggle value that is on the section sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RestrictCrosshatchAngle`` 
    
    :param restrictCrosshatchAngleToggle:  Sets a new restrict crosshatch angle toggle value on the section sub-builder  
    :type restrictCrosshatchAngleToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SheetBodies: bool = ...
    """
    Returns or sets  the sheet bodies toggle on the SECTION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetBodies`` 
    
    :returns:  Returns the sheet bodies toggle value that is on the section sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetBodies`` 
    
    :param sheetBodiesToggle:  Sets a new sheet bodies toggle value on the section sub-builder  
    :type sheetBodiesToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleSectionBuilder = ...  # unknown typename


class ProjectedViewStyle(NXOpen.Preferences.IProjectedViewPreferences):
    """
    Represents set of Projected View Style Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.Projected`
    
    .. versionadded:: NX5.0.0
    """


class ViewStylePerspectiveBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the PERSPECTIVE tab on the View Style Dialog (Drawings.  
    
    ViewStylePerspectiveBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BackClip: bool = ...
    """
    Returns or sets  the back clip toggle on the PERSPECTIVE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``BackClip`` 
    
    :returns:  Returns the back clip toggle value that is on the perspective sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BackClip`` 
    
    :param backClipToggle:  Sets a new back clip toggle value on the perspective sub-builder  
    :type backClipToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BackClipDistance: float = ...
    """
    Returns or sets  the back clip distance data on the PERSPECTIVE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``BackClipDistance`` 
    
    :returns:  Returns the back clip distance that is on the perspective sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BackClipDistance`` 
    
    :param backClipDistanceData:  Sets a new back clip distance on the perspective sub-builder  
    :type backClipDistanceData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FrontClip: bool = ...
    """
    Returns or sets  the front clip toggle on the PERSPECTIVE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontClip`` 
    
    :returns:  Returns the front clip toggle value that is on the perspective sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontClip`` 
    
    :param frontClipToggle:  Sets a new front clip toggle value on the perspective sub-builder  
    :type frontClipToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FrontClipDistance: float = ...
    """
    Returns or sets  the front clip distance data on the PERSPECTIVE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontClipDistance`` 
    
    :returns:  Returns the front clip distance that is on the perspective sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontClipDistance`` 
    
    :param frontClipDistanceData:  Sets a new front clip distance  on the perspective sub-builder  
    :type frontClipDistanceData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Perspective: bool = ...
    """
    Returns or sets  the perspective toggle on the PERSPECTIVE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Perspective`` 
    
    :returns:  Returns the perspective toggle value that is on the perspective sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Perspective`` 
    
    :param perspectiveToggle:  Sets a new perspective toggle value on the perspective sub-builder  
    :type perspectiveToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PerspectiveDistance: float = ...
    """
    Returns or sets  the perspective distance data on the PERSPECTIVE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``PerspectiveDistance`` 
    
    :returns:  Returns the perspective distance that is on the perspective sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PerspectiveDistance`` 
    
    :param perspectiveDistanceData:  Sets a new perspective distance on the perspective sub-builder  
    :type perspectiveDistanceData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the perspective view origin on the PERSPECTIVE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewOrigin`` 
    
    :returns:  Returns the view origin that is on the perspective sub-builder  
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewOrigin`` 
    
    :param viewOrigin:  Sets a new view origin on the perspective sub-builder  
    :type viewOrigin: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStylePerspectiveBuilder = ...  # unknown typename


class ViewingDirectionArrowLabel(NXOpen.Annotations.Note):
    """
    This class represents a Drafting Viewing Direction Arrow Label.  
    
    Object of this class will be created when projected view is created and cannot be independently 
    There is no KF creator for this class.
    
    .. versionadded:: NX9.0.0
    """
    Null: ViewingDirectionArrowLabel = ...  # unknown typename


class ShipbuildingLinesViewStyleLinesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipbuildingLinesViewStyleLines():
    """
    Line type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Hidden", "Hidden"
       "Visible", "Visible"
    """
    Hidden = 0  # ShipbuildingLinesViewStyleLinesMemberType
    Visible = 1  # ShipbuildingLinesViewStyleLinesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipbuildingLinesViewStyleShipbuildingLinesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipbuildingLinesViewStyleShipbuildingLines():
    """
    Geometry type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Profile", "Profile"
       "Plate", "Plate"
    """
    Profile = 0  # ShipbuildingLinesViewStyleShipbuildingLinesMemberType
    Plate = 1  # ShipbuildingLinesViewStyleShipbuildingLinesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipbuildingLinesViewStyle():
    """
    Represents set of Shipbuilding Lines View Style applicable to drafting views.  
    
    Shipbuilding lines are used for a Profile or a Plate feature in Ship Design 
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.ShipbuildingLines`
    
    .. versionadded:: NX8.0.0
    """
    
    class Lines():
        """
        Line type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Hidden", "Hidden"
           "Visible", "Visible"
        """
        Hidden = 0  # ShipbuildingLinesViewStyleLinesMemberType
        Visible = 1  # ShipbuildingLinesViewStyleLinesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ShipbuildingLines():
        """
        Geometry type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Profile", "Profile"
           "Plate", "Plate"
        """
        Profile = 0  # ShipbuildingLinesViewStyleShipbuildingLinesMemberType
        Plate = 1  # ShipbuildingLinesViewStyleShipbuildingLinesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetSingleLineRepresentation(self, featureType: ShipbuildingLinesViewStyleShipbuildingLines, featureName: str, singleLine: bool) -> None:
        """
        Note: The initial values are set based on the customer defaults depending on 
        whether the feature is a Profile or a Plate.  
        
        The status determines the single line representation for the ship feature in a view.
        
        Signature ``SetSingleLineRepresentation(featureType, featureName, singleLine)`` 
        
        :param featureType:  feature type  
        :type featureType: :py:class:`NXOpen.Drawings.ShipbuildingLinesViewStyleShipbuildingLines` 
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param singleLine:  status that determines SLR for the feature  
        :type singleLine: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetSingleLineRepresentation(self, featureType: ShipbuildingLinesViewStyleShipbuildingLines, featureName: str) -> bool:
        """
        Get single line status  
        
        Signature ``GetSingleLineRepresentation(featureType, featureName)`` 
        
        :param featureType:  feature type  
        :type featureType: :py:class:`NXOpen.Drawings.ShipbuildingLinesViewStyleShipbuildingLines` 
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :returns:  status that determines SLR for the feature  
        :rtype: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetColor(self, featureName: str, linesType: ShipbuildingLinesViewStyleLines, color: int) -> None:
        """
        The color of ship line.  
        
        The value should be between UF_OBJ_MIN_COLOR and UF_OBJ_MAX_COLOR. 
        
        Signature ``SetColor(featureName, linesType, color)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipbuildingLinesViewStyleLines` 
        :param color:  Color  
        :type color: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetColor(self, featureName: str, linesType: ShipbuildingLinesViewStyleLines) -> int:
        """
        Get line color  
        
        Signature ``GetColor(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipbuildingLinesViewStyleLines` 
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFont(self, featureName: str, linesType: ShipbuildingLinesViewStyleLines, font: NXOpen.Preferences.Font) -> None:
        """
        The font type of ship line.  
        
        Signature ``SetFont(featureName, linesType, font)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipbuildingLinesViewStyleLines` 
        :param font:  Font  
        :type font: :py:class:`NXOpen.Preferences.Font` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetFont(self, featureName: str, linesType: ShipbuildingLinesViewStyleLines) -> NXOpen.Preferences.Font:
        """
        Get line font  
        
        Signature ``GetFont(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipbuildingLinesViewStyleLines` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.Font` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWidth(self, featureName: str, linesType: ShipbuildingLinesViewStyleLines, width: NXOpen.Preferences.Width) -> None:
        """
        The width of hidden line or edges.  
        
        Signature ``SetWidth(featureName, linesType, width)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipbuildingLinesViewStyleLines` 
        :param width:  Width  
        :type width: :py:class:`NXOpen.Preferences.Width` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetWidth(self, featureName: str, linesType: ShipbuildingLinesViewStyleLines) -> NXOpen.Preferences.Width:
        """
        Get line width  
        
        Signature ``GetWidth(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipbuildingLinesViewStyleLines` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.Width` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class SectionLine(NXOpen.DisplayableObject):
    """
    Represents a Section Line.  
    
    This is an abstract class that cannot be instantiated
    
    .. versionadded:: NX6.0.0
    """
    IsRetained: bool = ...
    """
    Returns  a flag indicating whether the section line is retained 
    
    <hr>
    
    Getter Method
    
    Signature ``IsRetained`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.3
    
    License requirements: None.
    """
    Null: SectionLine = ...  # unknown typename


class BaseHalfSectionLine(SectionLine):
    """
    Represents a Base Half Section Line.  
    
    This is an abstract class that cannot be instantiated
    
    .. versionadded:: NX10.0.0
    """
    Null: BaseHalfSectionLine = ...  # unknown typename


class ArrowStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ArrowStyleType():
    """
    the arrow style type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Filled", "Filled"
       "Closed", "Closed"
       "ClosedSolid", "Close Solid"
       "Open", " - "
    """
    Filled = 0  # ArrowStyleTypeMemberType
    Closed = 1  # ArrowStyleTypeMemberType
    ClosedSolid = 2  # ArrowStyleTypeMemberType
    Open = 3  # ArrowStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineSegmentsBuilder(NXOpen.TaggedObject):
    """
    Represents a class Drawings.  
    
    SectionLineSegmentsBuilder.
    
    .. versionadded:: NX10.0.0
    """
    
    def UpdateAfterParentViewMove(self) -> None:
        """
        Update the section line segments builder in case of parent view move 
        
        Signature ``UpdateAfterParentViewMove()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    RotationPoint: NXOpen.Point = ...
    """
    Returns or sets  the rotation point 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationPoint`` 
    
    :param rotationPointTag: 
    :type rotationPointTag: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SectionLineOnlyPlacementOrigin: NXOpen.Point3d = ...
    """
    Returns or sets  the section line only placement origin center in inferred mode 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionLineOnlyPlacementOrigin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionLineOnlyPlacementOrigin`` 
    
    :param coordinates: 
    :type coordinates: :py:class:`NXOpen.Point3d` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SegmentLocation: SectionLineSegmentPointListBuilder = ...
    """
    Returns  the segment location 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentPointListBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SegmentLocationForSecondLeg: SectionLineSegmentPointListBuilder = ...
    """
    Returns  the segment location to add segments to revolved section line second leg 
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentLocationForSecondLeg`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentPointListBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SingleLeg: bool = ...
    """
    Returns or sets  the single leg 
    
    <hr>
    
    Getter Method
    
    Signature ``SingleLeg`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SingleLeg`` 
    
    :param singleLeg: 
    :type singleLeg: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: SectionLineSegmentsBuilder = ...  # unknown typename


class ViewAlignmentBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewAlignmentBuilder`.  
    
    This class is used to construct the view alignment Builder 
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.ViewAlignmentCollection.CreateViewAlignmentBuilder`
    
    Default values.
    
    ==========================  =======
    Property                    Value
    ==========================  =======
    Placement.AlignmentMethod   Infer 
    --------------------------  -------
    Placement.AlignmentOption   ToView 
    ==========================  =======
    
    .. versionadded:: NX8.5.0
    """
    
    def DeleteCurrentAlignment(self) -> None:
        """
        Deletes a view alignment that is stored as the current alignment in the builder 
        
        Signature ``DeleteCurrentAlignment()`` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    CandidateView: DraftingView = ...
    """
    Returns or sets  the candidate view in builder
    
    <hr>
    
    Getter Method
    
    Signature ``CandidateView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingView` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``CandidateView`` 
    
    :param candidateView: 
    :type candidateView: :py:class:`NXOpen.Drawings.DraftingView` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    InEditMode: bool = ...
    """
    Returns or sets  the builder edit mode flag.  
    
    There are two modes in the view alignment dialog, Create and Edit modes, and the flag determines the current mode. 
    View alignment can be created in Create mode, and edited or deleted in Edit mode. 
    
    <hr>
    
    Getter Method
    
    Signature ``InEditMode`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``InEditMode`` 
    
    :param inEditMode: 
    :type inEditMode: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Placement: ViewPlacementBuilder = ...
    """
    Returns  the view placement component 
    
    <hr>
    
    Getter Method
    
    Signature ``Placement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    SelectedAlignment: ViewAlignment = ...
    """
    Returns or sets  the selected alignment in builder.  
    
    It needs to be set in edit mode as it specifies which alignment in the list
    needs to be edited or deleted 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewAlignment` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedAlignment`` 
    
    :param alignment: 
    :type alignment: :py:class:`NXOpen.Drawings.ViewAlignment` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    View: SelectDraftingView = ...
    """
    Returns  the select drafting view component 
    
    <hr>
    
    Getter Method
    
    Signature ``View`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    Null: ViewAlignmentBuilder = ...  # unknown typename


class DraftingView(NXOpen.View, NXOpen.IFitTo):
    """
    Represents a drafting view.  
    
    To obtain an instance of this class, use :py:meth:`NXOpen.Drawings.DrawingSheet.SheetDraftingViews` or :py:meth:`NXOpen.Part.DraftingViews`
    
    .. versionadded:: NX3.0.0
    """
    
    def Update(self) -> None:
        """
        Updates the drawing member view on a drawing.  
        
        The view update
        process includes updating the view bounds, resectioning section views,
        updating silhouettes, and updating hidden line display when
        applicable.
        
        Signature ``Update()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetDrawingReferencePoint(self) -> NXOpen.Point3d:
        """
        Returns the view origin(location).  
        
        Signature ``GetDrawingReferencePoint()`` 
        
        :returns:  View origin(location)  
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetDrawingReferencePoint(self, drawingReferencePoint: NXOpen.Point3d) -> None:
        """
        Sets the view origin at the provided location.  
        
        Signature ``SetDrawingReferencePoint(drawingReferencePoint)`` 
        
        :param drawingReferencePoint:  New view origin(location)  
        :type drawingReferencePoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def MoveView(self, drawingReferencePoint: NXOpen.Point3d) -> None:
        """
        Sets the view origin at the provided location.  
        
        This method is quite similar 
        :py:class:`NXOpen.Drawings.DraftingView.SetDrawingReferencePoint` and 
        handles section views and broken views cases also.
        
        Signature ``MoveView(drawingReferencePoint)`` 
        
        :param drawingReferencePoint:  New view origin(location)  
        :type drawingReferencePoint: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def HideComponents(self, components: 'list[NXOpen.NXObject]') -> None:
        """
        Hides the specified components in the view.  
        
        Signature ``HideComponents(components)`` 
        
        :param components:  Components  
        :type components: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ShowComponents(self, components: 'list[NXOpen.NXObject]') -> None:
        """
        Shows the specified components in the view.  
        
        Signature ``ShowComponents(components)`` 
        
        :param components:  Components  
        :type components: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ActivateForSketching(self) -> None:
        """
        Sets this drafting view as the active sketch view.  
        
        Signature ``ActivateForSketching()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Commit(self) -> None:
        """
        Commits and applies all the settings like :py:class:`NXOpen.Drawings.ViewStyle` to the View.  
        
        This must be called on the view after creation or edit to reflect all the settings on it
        
        Signature ``Commit()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetToolMarkers(self) -> 'list[FlatPatternObject]':
        """
        Returns an array of pointers to objects representing the tool markers in the
        view.  
        
        Pertains to flat pattern views. Other views return zero objects. 
        
        Signature ``GetToolMarkers()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Drawings.FlatPatternObject` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: drafting ("DRAFTING") OR sheet_metal ("SHEET METAL DESIGN")
        """
        ...
    
    
    def RestoreViewBorder(self) -> None:
        """
        Restores the view border from the dashed line to the normal line for cut operation
        
        Signature ``RestoreViewBorder()`` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CheckForInvalidParentModelView(self) -> None:
        """
        Checks the view's validity by looking at the parent model view 
        
        Signature ``CheckForInvalidParentModelView()`` 
        
        .. versionadded:: NX8.0.3
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetBrokenViewMaster(self) -> DraftingView:
        """
        Return the master view of a slave or a decoration view.  
        
        return NULL for other type of view.  
        
        Signature ``GetBrokenViewMaster()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBrokenViewDecoration(self) -> DraftingView:
        """
        Return the decoration view of a slave or a master view.  
        
        If the view is a decoration view, return this view. return NULL for other type of view.  
        
        Signature ``GetBrokenViewDecoration()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetBrokenViewInternalViews(self) -> 'list[DraftingView]':
        """
        Returns an array of views representing the internal views of broken view.  
        
        Other views return zero objects. 
        
        Signature ``GetBrokenViewInternalViews()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def HideViewBorder(self) -> None:
        """
        Hide the view border of the view.  
        
        Signature ``HideViewBorder()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ShowViewBorder(self) -> None:
        """
        Show the view border of the view.  
        
        Signature ``ShowViewBorder()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetDeleteSectionLine(self, deleteSectionLine: bool) -> None:
        """
        Set the section line delete option, If false section line will not be deleted with section view 
        
        Signature ``SetDeleteSectionLine(deleteSectionLine)`` 
        
        :param deleteSectionLine: 
        :type deleteSectionLine: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def UpdateAutomaticViewBound(self) -> None:
        """
        Recalculates and updates the view boundary of a drawing member view
        
        Signature ``UpdateAutomaticViewBound()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    IsActiveForSketching: bool = ...
    """
    Returns  true if this view is the active sketch view.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsActiveForSketching`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IsBroken: bool = ...
    """
    Returns  the status on whether this :py:class:`NXOpen.Drawings.DraftingView` is broken.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsBroken`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    IsDecoration: bool = ...
    """
    Returns  the status on whether this :py:class:`NXOpen.Drawings.DraftingView` is decoration.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsDecoration`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    IsOutOfDate: bool = ...
    """
    Returns  the status on whether this :py:class:`NXOpen.Drawings.DraftingView` is out of date.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsOutOfDate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    IsSlave: bool = ...
    """
    Returns  the status on whether this :py:class:`NXOpen.Drawings.DraftingView` is slave.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsSlave`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Style: ViewStyle = ...
    """
    Returns object to View Style 
    
    Signature ``Style`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyle`
    """
    ViewBreaks: ViewBreakCollection = ...
    """
    Returns the ViewBreakCollection instance belonging to this view 
    
    Signature ``ViewBreaks`` 
    
    .. versionadded:: NX7.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewBreakCollection`
    """
    DraftingBodies: DraftingBodyCollection = ...
    """
    Returns the DraftingBodyCollection 
    
    Signature ``DraftingBodies`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingBodyCollection`
    """
    Null: DraftingView = ...  # unknown typename


class DraftingCurve(NXOpen.DisplayableObject, NXOpen.ICurve):
    """
    Represents a Drafting VD Curve.  
    
    An instance of this class can be obtained by using :py:class:`NXOpen.Drawings.DraftingCurveCollection`
    
    .. versionadded:: NX8.5.0
    """
    
    def GetDraftingCurveInfo(self) -> DraftingCurveInfo:
        """
        Creates new DraftingCurveInfo object  
        
        Signature ``GetDraftingCurveInfo()`` 
        
        :returns:  New DraftingCurveInfo object. Returns None if the input curve 
        is not a drafting curve  
        :rtype: :py:class:`NXOpen.Drawings.DraftingCurveInfo` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetLength(self) -> float:
        """
        Returns the length of the object  
        
        Signature ``GetLength()`` 
        
        :returns: 
        :rtype: float 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    IsReference: bool = ...
    """
    Returns  the reference state of a curve 
    
    <hr>
    
    Getter Method
    
    Signature ``IsReference`` 
    
    :returns:  True - Reference; False - Not Reference  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: DraftingCurve = ...  # unknown typename


class ViewingDirectionArrow(NXOpen.Annotations.BaseArrow):
    """
    This class represents a Drafting Viewing Direction Arrow.  
    
    Object of this class will be created when projected view is created and cannot be independently 
    There is no KF creator for this class.
    
    .. versionadded:: NX9.0.0
    """
    Null: ViewingDirectionArrow = ...  # unknown typename


class TrackDrawingChangesGeneralBuilderCompareMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrackDrawingChangesGeneralBuilderCompareMethodType():
    """
    Represents compare method type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AgainstAnotherDrawing", "This option is used to compare different part over current part"
       "AgainstSnapshotDataInActiveDrawing", "This option is used to compare current part on itself"
       "OpenSavedComparisonReport", "This option is used to open a compare report that is saved in the current part"
    """
    AgainstAnotherDrawing = 0  # TrackDrawingChangesGeneralBuilderCompareMethodTypeMemberType
    AgainstSnapshotDataInActiveDrawing = 1  # TrackDrawingChangesGeneralBuilderCompareMethodTypeMemberType
    OpenSavedComparisonReport = 2  # TrackDrawingChangesGeneralBuilderCompareMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrackDrawingChangesGeneralBuilderBaselineOfComparisonTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrackDrawingChangesGeneralBuilderBaselineOfComparisonType():
    """
    Represents baseline Of comparison type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Snapshot", " - "
       "TrackedChanges", " - "
    """
    Snapshot = 0  # TrackDrawingChangesGeneralBuilderBaselineOfComparisonTypeMemberType
    TrackedChanges = 1  # TrackDrawingChangesGeneralBuilderBaselineOfComparisonTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrackDrawingChangesGeneralBuilderSnapshotDataToUseTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrackDrawingChangesGeneralBuilderSnapshotDataToUseType():
    """
    Represents snapshot data to use type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AskAtRunTime", "This option tells to show messages at rumtime"
       "AlwaysUseExistingData", "This option will use existing snapshot data"
       "AlwaysCreateNewData", "This option will always create new snapshot data"
       "CreateNewDataifNoneExists", "This option will create new sanpshot data if none exists"
    """
    AskAtRunTime = 0  # TrackDrawingChangesGeneralBuilderSnapshotDataToUseTypeMemberType
    AlwaysUseExistingData = 1  # TrackDrawingChangesGeneralBuilderSnapshotDataToUseTypeMemberType
    AlwaysCreateNewData = 2  # TrackDrawingChangesGeneralBuilderSnapshotDataToUseTypeMemberType
    CreateNewDataifNoneExists = 3  # TrackDrawingChangesGeneralBuilderSnapshotDataToUseTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrackDrawingChangesGeneralBuilderSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrackDrawingChangesGeneralBuilderSymbolType():
    """
    Represents symbol type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circle", " - "
       "TriangleUp", " - "
       "TriangleDown", " - "
       "Square", " - "
       "Hexagon", " - "
    """
    Circle = 0  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
    TriangleUp = 1  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
    TriangleDown = 2  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
    Square = 3  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
    Hexagon = 4  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrackDrawingChangesGeneralBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class CompareMethodType():
        """
        Represents compare method type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AgainstAnotherDrawing", "This option is used to compare different part over current part"
           "AgainstSnapshotDataInActiveDrawing", "This option is used to compare current part on itself"
           "OpenSavedComparisonReport", "This option is used to open a compare report that is saved in the current part"
        """
        AgainstAnotherDrawing = 0  # TrackDrawingChangesGeneralBuilderCompareMethodTypeMemberType
        AgainstSnapshotDataInActiveDrawing = 1  # TrackDrawingChangesGeneralBuilderCompareMethodTypeMemberType
        OpenSavedComparisonReport = 2  # TrackDrawingChangesGeneralBuilderCompareMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BaselineOfComparisonType():
        """
        Represents baseline Of comparison type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Snapshot", " - "
           "TrackedChanges", " - "
        """
        Snapshot = 0  # TrackDrawingChangesGeneralBuilderBaselineOfComparisonTypeMemberType
        TrackedChanges = 1  # TrackDrawingChangesGeneralBuilderBaselineOfComparisonTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SnapshotDataToUseType():
        """
        Represents snapshot data to use type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AskAtRunTime", "This option tells to show messages at rumtime"
           "AlwaysUseExistingData", "This option will use existing snapshot data"
           "AlwaysCreateNewData", "This option will always create new snapshot data"
           "CreateNewDataifNoneExists", "This option will create new sanpshot data if none exists"
        """
        AskAtRunTime = 0  # TrackDrawingChangesGeneralBuilderSnapshotDataToUseTypeMemberType
        AlwaysUseExistingData = 1  # TrackDrawingChangesGeneralBuilderSnapshotDataToUseTypeMemberType
        AlwaysCreateNewData = 2  # TrackDrawingChangesGeneralBuilderSnapshotDataToUseTypeMemberType
        CreateNewDataifNoneExists = 3  # TrackDrawingChangesGeneralBuilderSnapshotDataToUseTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SymbolType():
        """
        Represents symbol type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circle", " - "
           "TriangleUp", " - "
           "TriangleDown", " - "
           "Square", " - "
           "Hexagon", " - "
        """
        Circle = 0  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
        TriangleUp = 1  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
        TriangleDown = 2  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
        Square = 3  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
        Hexagon = 4  # TrackDrawingChangesGeneralBuilderSymbolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BaselineOfComparison: TrackDrawingChangesGeneralBuilderBaselineOfComparisonType = ...
    """
    Returns or sets  the baseline of comparison 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineOfComparison`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilderBaselineOfComparisonType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineOfComparison`` 
    
    :param baselineOfComparison: 
    :type baselineOfComparison: :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilderBaselineOfComparisonType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ChangeSymbolLineColorFontWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the change symbol line color font width 
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeSymbolLineColorFontWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ChangeSymbolSize: float = ...
    """
    Returns or sets  the change symbol size 
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeSymbolSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChangeSymbolSize`` 
    
    :param symbolSize: 
    :type symbolSize: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ChangeSymbolType: TrackDrawingChangesGeneralBuilderSymbolType = ...
    """
    Returns or sets  the change symbol type 
    
    <hr>
    
    Getter Method
    
    Signature ``ChangeSymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilderSymbolType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ChangeSymbolType`` 
    
    :param symbolType: 
    :type symbolType: :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilderSymbolType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CompareMethod: TrackDrawingChangesGeneralBuilderCompareMethodType = ...
    """
    Returns or sets  the compare method  
    
    <hr>
    
    Getter Method
    
    Signature ``CompareMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilderCompareMethodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompareMethod`` 
    
    :param compareMethod: 
    :type compareMethod: :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilderCompareMethodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CompareTolerance: float = ...
    """
    Returns or sets  the compare tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``CompareTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompareTolerance`` 
    
    :param compareTolerance: 
    :type compareTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CreateOverlayDataWithSnapshotData: bool = ...
    """
    Returns or sets  the create overlay data with snapshot data 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateOverlayDataWithSnapshotData`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateOverlayDataWithSnapshotData`` 
    
    :param createOverlayDataWithSnapshotData: 
    :type createOverlayDataWithSnapshotData: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayChangeSymbol: bool = ...
    """
    Returns or sets  the display change symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayChangeSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayChangeSymbol`` 
    
    :param displayChangeSymbol: 
    :type displayChangeSymbol: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncrementIDNumberPerReport: bool = ...
    """
    Returns or sets  the increment id number per report 
    
    <hr>
    
    Getter Method
    
    Signature ``IncrementIDNumberPerReport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncrementIDNumberPerReport`` 
    
    :param incrementIDNumberPerReport: 
    :type incrementIDNumberPerReport: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PreserveChangeSymbolDisplay: bool = ...
    """
    Returns or sets  the preserve Change Symbol Display 
    
    <hr>
    
    Getter Method
    
    Signature ``PreserveChangeSymbolDisplay`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreserveChangeSymbolDisplay`` 
    
    :param preserveChangeSymbolDisplay: 
    :type preserveChangeSymbolDisplay: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RestartIDNumbersWithNewReport: bool = ...
    """
    Returns or sets  the restart id numbers with new report 
    
    <hr>
    
    Getter Method
    
    Signature ``RestartIDNumbersWithNewReport`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RestartIDNumbersWithNewReport`` 
    
    :param restartIDNumbersWithNewReport: 
    :type restartIDNumbersWithNewReport: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SnapshotDataToUse: TrackDrawingChangesGeneralBuilderSnapshotDataToUseType = ...
    """
    Returns or sets  the snapshot data to use 
    
    <hr>
    
    Getter Method
    
    Signature ``SnapshotDataToUse`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilderSnapshotDataToUseType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SnapshotDataToUse`` 
    
    :param snapshotDataToUse: 
    :type snapshotDataToUse: :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilderSnapshotDataToUseType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: TrackDrawingChangesGeneralBuilder = ...  # unknown typename


class SelectDraftingView(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: DraftingView) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: DraftingView) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: DraftingView, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DraftingView` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: DraftingView, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: DraftingView, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Drawings.DraftingView` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Drawings.DraftingView` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: DraftingView, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DraftingView` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> DraftingView:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: DraftingView) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Drawings.DraftingView`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Drawings.DraftingView`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Drawings.DraftingView`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Drawings.DraftingView`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: DraftingView = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Drawings.DraftingView` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Drawings.DraftingView` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectDraftingView = ...  # unknown typename


class BrokenViewBuilderTypeBreakMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BrokenViewBuilderTypeBreak():
    """
    Specifies whether the break is two-sided (regular) or one-sided. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Regular", "Regular Break"
       "SingleSided", "SingleSiled Break"
    """
    Regular = 0  # BrokenViewBuilderTypeBreakMemberType
    SingleSided = 1  # BrokenViewBuilderTypeBreakMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BrokenViewBuilderTypeDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BrokenViewBuilderTypeDirection():
    """
    Direction Enum 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Parallel", "Parallel"
       "Perpendicular", "Perpendicular"
       "Vector", "Specified by Vector"
    """
    Parallel = 0  # BrokenViewBuilderTypeDirectionMemberType
    Perpendicular = 1  # BrokenViewBuilderTypeDirectionMemberType
    Vector = 2  # BrokenViewBuilderTypeDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BrokenViewBuilderVerticalBreakSideMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BrokenViewBuilderVerticalBreakSide():
    """
    Which side to remove in case of horizontal single-sided break.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TopEnd", "Hide Top side"
       "BottomEnd", "Hide Bottom side"
    """
    TopEnd = 0  # BrokenViewBuilderVerticalBreakSideMemberType
    BottomEnd = 1  # BrokenViewBuilderVerticalBreakSideMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BrokenViewBuilderHorizontalBreakSideMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BrokenViewBuilderHorizontalBreakSide():
    """
    Which side to remove in case of vertical single-sided break.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "LeftEnd", "Hide Left side"
       "RightEnd", "Hide Right side"
    """
    LeftEnd = 0  # BrokenViewBuilderHorizontalBreakSideMemberType
    RightEnd = 1  # BrokenViewBuilderHorizontalBreakSideMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BrokenViewBuilderBreakLineStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BrokenViewBuilderBreakLineStyle():
    """
    Break Line Type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Simple", "Simple"
       "Straight", "Straight"
       "Sawtooth", "Sawtooth"
       "LongBreak", "LongBreak"
       "Tubular", "Tubular"
       "SolidTubular", "Solid Tubular"
       "SolidRod", "Solid Rod"
       "Jigsaw", "Jigsaw"
       "Wood", "Wood"
       "CopyCurve", "Copy of the existing curve"
       "TemplateCurve", "Template, based on the existing curve"
    """
    Simple = 0  # BrokenViewBuilderBreakLineStyleMemberType
    Straight = 1  # BrokenViewBuilderBreakLineStyleMemberType
    Sawtooth = 2  # BrokenViewBuilderBreakLineStyleMemberType
    LongBreak = 3  # BrokenViewBuilderBreakLineStyleMemberType
    Tubular = 4  # BrokenViewBuilderBreakLineStyleMemberType
    SolidTubular = 5  # BrokenViewBuilderBreakLineStyleMemberType
    SolidRod = 6  # BrokenViewBuilderBreakLineStyleMemberType
    Jigsaw = 7  # BrokenViewBuilderBreakLineStyleMemberType
    Wood = 8  # BrokenViewBuilderBreakLineStyleMemberType
    CopyCurve = 9  # BrokenViewBuilderBreakLineStyleMemberType
    TemplateCurve = 10  # BrokenViewBuilderBreakLineStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BrokenViewBuilderLineWidthMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BrokenViewBuilderLineWidth():
    """
    Line Width 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Thin", "Thin"
       "Medium", "Medium"
       "Thick", "Thick"
       "WidthOne", "Width One"
       "WidthTwo", "Width Two"
       "WidthThree", "Width Three"
       "WidthFour", "Width Four"
       "WidthFive", "Width Five"
       "WidthSix", "Width Six"
       "WidthSeven", "Width Seven"
       "WidthEight", "Width Eight"
       "WidthNine", "Width Nine"
    """
    Thin = 0  # BrokenViewBuilderLineWidthMemberType
    Medium = 1  # BrokenViewBuilderLineWidthMemberType
    Thick = 2  # BrokenViewBuilderLineWidthMemberType
    WidthOne = 5  # BrokenViewBuilderLineWidthMemberType
    WidthTwo = 6  # BrokenViewBuilderLineWidthMemberType
    WidthThree = 7  # BrokenViewBuilderLineWidthMemberType
    WidthFour = 8  # BrokenViewBuilderLineWidthMemberType
    WidthFive = 9  # BrokenViewBuilderLineWidthMemberType
    WidthSix = 10  # BrokenViewBuilderLineWidthMemberType
    WidthSeven = 11  # BrokenViewBuilderLineWidthMemberType
    WidthEight = 12  # BrokenViewBuilderLineWidthMemberType
    WidthNine = 13  # BrokenViewBuilderLineWidthMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BrokenViewBuilder(NXOpen.Builder):
    """
    This class is used to construct the broken view Builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateBrokenViewBuilder`
    
    Default values.
    
    ========================  ==========================================
    Property                  Value
    ========================  ==========================================
    Amplitude.Value           5 (millimeters part), 0.25 (inches part) 
    ------------------------  ------------------------------------------
    BreakLine1Offset.Value    0 (millimeters part), 0 (inches part) 
    ------------------------  ------------------------------------------
    BreakLine2Offset.Value    0 (millimeters part), 0 (inches part) 
    ------------------------  ------------------------------------------
    BreakLineType             Simple 
    ------------------------  ------------------------------------------
    BreakType                 Regular 
    ------------------------  ------------------------------------------
    DirectionType             Vector 
    ------------------------  ------------------------------------------
    Extension1.Value          0 (millimeters part), 0 (inches part) 
    ------------------------  ------------------------------------------
    Extension2.Value          0 (millimeters part), 0 (inches part) 
    ------------------------  ------------------------------------------
    Gap.Value                 10 (millimeters part), 0.25 (inches part) 
    ------------------------  ------------------------------------------
    IsBreakLine1Associative   1 
    ------------------------  ------------------------------------------
    IsBreakLine2Associative   1 
    ------------------------  ------------------------------------------
    Repetition                1 
    ------------------------  ------------------------------------------
    Width                     Medium 
    ========================  ==========================================
    
    .. versionadded:: NX7.5.0
    """
    
    class TypeBreak():
        """
        Specifies whether the break is two-sided (regular) or one-sided. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Regular", "Regular Break"
           "SingleSided", "SingleSiled Break"
        """
        Regular = 0  # BrokenViewBuilderTypeBreakMemberType
        SingleSided = 1  # BrokenViewBuilderTypeBreakMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class TypeDirection():
        """
        Direction Enum 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Parallel", "Parallel"
           "Perpendicular", "Perpendicular"
           "Vector", "Specified by Vector"
        """
        Parallel = 0  # BrokenViewBuilderTypeDirectionMemberType
        Perpendicular = 1  # BrokenViewBuilderTypeDirectionMemberType
        Vector = 2  # BrokenViewBuilderTypeDirectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VerticalBreakSide():
        """
        Which side to remove in case of horizontal single-sided break.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TopEnd", "Hide Top side"
           "BottomEnd", "Hide Bottom side"
        """
        TopEnd = 0  # BrokenViewBuilderVerticalBreakSideMemberType
        BottomEnd = 1  # BrokenViewBuilderVerticalBreakSideMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class HorizontalBreakSide():
        """
        Which side to remove in case of vertical single-sided break.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "LeftEnd", "Hide Left side"
           "RightEnd", "Hide Right side"
        """
        LeftEnd = 0  # BrokenViewBuilderHorizontalBreakSideMemberType
        RightEnd = 1  # BrokenViewBuilderHorizontalBreakSideMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BreakLineStyle():
        """
        Break Line Type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Simple", "Simple"
           "Straight", "Straight"
           "Sawtooth", "Sawtooth"
           "LongBreak", "LongBreak"
           "Tubular", "Tubular"
           "SolidTubular", "Solid Tubular"
           "SolidRod", "Solid Rod"
           "Jigsaw", "Jigsaw"
           "Wood", "Wood"
           "CopyCurve", "Copy of the existing curve"
           "TemplateCurve", "Template, based on the existing curve"
        """
        Simple = 0  # BrokenViewBuilderBreakLineStyleMemberType
        Straight = 1  # BrokenViewBuilderBreakLineStyleMemberType
        Sawtooth = 2  # BrokenViewBuilderBreakLineStyleMemberType
        LongBreak = 3  # BrokenViewBuilderBreakLineStyleMemberType
        Tubular = 4  # BrokenViewBuilderBreakLineStyleMemberType
        SolidTubular = 5  # BrokenViewBuilderBreakLineStyleMemberType
        SolidRod = 6  # BrokenViewBuilderBreakLineStyleMemberType
        Jigsaw = 7  # BrokenViewBuilderBreakLineStyleMemberType
        Wood = 8  # BrokenViewBuilderBreakLineStyleMemberType
        CopyCurve = 9  # BrokenViewBuilderBreakLineStyleMemberType
        TemplateCurve = 10  # BrokenViewBuilderBreakLineStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LineWidth():
        """
        Line Width 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Thin", "Thin"
           "Medium", "Medium"
           "Thick", "Thick"
           "WidthOne", "Width One"
           "WidthTwo", "Width Two"
           "WidthThree", "Width Three"
           "WidthFour", "Width Four"
           "WidthFive", "Width Five"
           "WidthSix", "Width Six"
           "WidthSeven", "Width Seven"
           "WidthEight", "Width Eight"
           "WidthNine", "Width Nine"
        """
        Thin = 0  # BrokenViewBuilderLineWidthMemberType
        Medium = 1  # BrokenViewBuilderLineWidthMemberType
        Thick = 2  # BrokenViewBuilderLineWidthMemberType
        WidthOne = 5  # BrokenViewBuilderLineWidthMemberType
        WidthTwo = 6  # BrokenViewBuilderLineWidthMemberType
        WidthThree = 7  # BrokenViewBuilderLineWidthMemberType
        WidthFour = 8  # BrokenViewBuilderLineWidthMemberType
        WidthFive = 9  # BrokenViewBuilderLineWidthMemberType
        WidthSix = 10  # BrokenViewBuilderLineWidthMemberType
        WidthSeven = 11  # BrokenViewBuilderLineWidthMemberType
        WidthEight = 12  # BrokenViewBuilderLineWidthMemberType
        WidthNine = 13  # BrokenViewBuilderLineWidthMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Amplitude: NXOpen.Expression = ...
    """
    Returns  the break line amplitude 
    
    <hr>
    
    Getter Method
    
    Signature ``Amplitude`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLine1Anchor: NXOpen.Point = ...
    """
    Returns or sets  the object specifying the position of the first break line 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLine1Anchor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLine1Anchor`` 
    
    :param anchor1: 
    :type anchor1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLine1ModelAnchor: NXOpen.Point = ...
    """
    Returns or sets  the object specifying the position of the first break line 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLine1ModelAnchor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLine1ModelAnchor`` 
    
    :param anchor1: 
    :type anchor1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLine1Offset: NXOpen.Expression = ...
    """
    Returns  the offset from the object locating the first break line 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLine1Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLine2Anchor: NXOpen.Point = ...
    """
    Returns or sets  the object specifying the position of the second break line.  
    
    For :py:class:`Drawings.BrokenViewBuilderTypeBreak.Regular <Drawings.BrokenViewBuilderTypeBreak>` only 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLine2Anchor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLine2Anchor`` 
    
    :param anchor2: 
    :type anchor2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLine2ModelAnchor: NXOpen.Point = ...
    """
    Returns or sets  the object specifying the position of the second break line.  
    
    For :py:class:`Drawings.BrokenViewBuilderTypeBreak.Regular <Drawings.BrokenViewBuilderTypeBreak>` only 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLine2ModelAnchor`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLine2ModelAnchor`` 
    
    :param anchor2: 
    :type anchor2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLine2Offset: NXOpen.Expression = ...
    """
    Returns  the offset from the object locating the second break line.  
    
    For :py:class:`Drawings.BrokenViewBuilderTypeBreak.Regular <Drawings.BrokenViewBuilderTypeBreak>` only 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLine2Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakLineType: BrokenViewBuilderBreakLineStyle = ...
    """
    Returns or sets  the break line type 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BrokenViewBuilderBreakLineStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineType`` 
    
    :param lineType: 
    :type lineType: :py:class:`NXOpen.Drawings.BrokenViewBuilderBreakLineStyle` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakType: BrokenViewBuilderTypeBreak = ...
    """
    Returns or sets  the break type 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BrokenViewBuilderTypeBreak` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakType`` 
    
    :param breakType: 
    :type breakType: :py:class:`NXOpen.Drawings.BrokenViewBuilderTypeBreak` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BreakVisibility: bool = ...
    """
    Returns or sets  the view break visibilitity 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakVisibility`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakVisibility`` 
    
    :param visibilitity: 
    :type visibilitity: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the break line color 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CrossHatch: NXOpen.Annotations.HatchFillSettingsBuilder = ...
    """
    Returns  the HatchFillSetting 
    
    <hr>
    
    Getter Method
    
    Signature ``CrossHatch`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.HatchFillSettingsBuilder` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DirectionType: BrokenViewBuilderTypeDirection = ...
    """
    Returns or sets  the direction type 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BrokenViewBuilderTypeDirection` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionType`` 
    
    :param directionType: 
    :type directionType: :py:class:`NXOpen.Drawings.BrokenViewBuilderTypeDirection` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DirectionVector: NXOpen.Direction = ...
    """
    Returns or sets  the direction vector.  
    
    For :py:class:`Drawings.BrokenViewBuilderTypeDirection.Vector <Drawings.BrokenViewBuilderTypeDirection>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``DirectionVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DirectionVector`` 
    
    :param directionVector: 
    :type directionVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ExistingCurve: NXOpen.ScCollector = ...
    """
    Returns  the curve to use as existing curve 
    
    <hr>
    
    Getter Method
    
    Signature ``ExistingCurve`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ScCollector` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Extension1: NXOpen.Expression = ...
    """
    Returns  the break line extension (top/right) beyond geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``Extension1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Extension2: NXOpen.Expression = ...
    """
    Returns  the break line extension (bottom/left) beyond geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``Extension2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Gap: NXOpen.Expression = ...
    """
    Returns  the gap on the sheet between the two break lines 
    
    <hr>
    
    Getter Method
    
    Signature ``Gap`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    IsBreakLine1Associative: bool = ...
    """
    Returns or sets  the associative positionning of the first break line 
    
    <hr>
    
    Getter Method
    
    Signature ``IsBreakLine1Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsBreakLine1Associative`` 
    
    :param isBreakLine1Associative: 
    :type isBreakLine1Associative: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    IsBreakLine2Associative: bool = ...
    """
    Returns or sets  the associative positionning of the second break line.  
    
    For  
    :py:class:`Drawings.BrokenViewBuilderTypeBreak.Regular <Drawings.BrokenViewBuilderTypeBreak>` only 
    
    <hr>
    
    Getter Method
    
    Signature ``IsBreakLine2Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsBreakLine2Associative`` 
    
    :param isBreakLine2Associative: 
    :type isBreakLine2Associative: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    MasterView: SelectDraftingView = ...
    """
    Returns  the master view 
    
    <hr>
    
    Getter Method
    
    Signature ``MasterView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Repetition: int = ...
    """
    Returns or sets  the repetition of the break line pattern 
    
    <hr>
    
    Getter Method
    
    Signature ``Repetition`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Repetition`` 
    
    :param repetition: 
    :type repetition: int 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Suppress: bool = ...
    """
    Returns or sets  the view break suppress status 
    
    <hr>
    
    Getter Method
    
    Signature ``Suppress`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Suppress`` 
    
    :param suppress: 
    :type suppress: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Width: BrokenViewBuilderLineWidth = ...
    """
    Returns or sets  the curve width of the break line 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BrokenViewBuilderLineWidth` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Drawings.BrokenViewBuilderLineWidth` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: BrokenViewBuilder = ...  # unknown typename


class RemoveObjectsBuilder(NXOpen.Builder):
    """
    Creates the builder for removing associated objects from the region     
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DrawingRegionCollection.CreateRemoveObjectsBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def SetRegion(self, region: DrawingRegion) -> None:
        """
        Set the region 
        
        Signature ``SetRegion(region)`` 
        
        :param region: 
        :type region: :py:class:`NXOpen.Drawings.DrawingRegion` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    Selection: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selection 
    
    <hr>
    
    Getter Method
    
    Signature ``Selection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: RemoveObjectsBuilder = ...  # unknown typename


class GeneralWorkFlowBuilderModelBasedAlwaysStartTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralWorkFlowBuilderModelBasedAlwaysStartType():
    """
    Represents the always start type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ViewCreationWizard", " - "
       "BaseViewCommand", " - "
       "NoViewCommands", " - "
    """
    ViewCreationWizard = 0  # GeneralWorkFlowBuilderModelBasedAlwaysStartTypeMemberType
    BaseViewCommand = 1  # GeneralWorkFlowBuilderModelBasedAlwaysStartTypeMemberType
    NoViewCommands = 2  # GeneralWorkFlowBuilderModelBasedAlwaysStartTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralWorkFlowBuilderSettingsOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralWorkFlowBuilderSettingsOrientationType():
    """
    Represents the settings orientation type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DrawingTemplate", " - "
       "DrawingStandard", " - "
    """
    DrawingTemplate = 0  # GeneralWorkFlowBuilderSettingsOrientationTypeMemberType
    DrawingStandard = 1  # GeneralWorkFlowBuilderSettingsOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralWorkFlowBuilderGridSettingsTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class GeneralWorkFlowBuilderGridSettingsType():
    """
    Represents the grid settings type.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Drafting", " - "
       "Sketch", " - "
       "SheetZone", " - "
    """
    Drafting = 0  # GeneralWorkFlowBuilderGridSettingsTypeMemberType
    Sketch = 1  # GeneralWorkFlowBuilderGridSettingsTypeMemberType
    SheetZone = 2  # GeneralWorkFlowBuilderGridSettingsTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class GeneralWorkFlowBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.GeneralWorkFlowBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class ModelBasedAlwaysStartType():
        """
        Represents the always start type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ViewCreationWizard", " - "
           "BaseViewCommand", " - "
           "NoViewCommands", " - "
        """
        ViewCreationWizard = 0  # GeneralWorkFlowBuilderModelBasedAlwaysStartTypeMemberType
        BaseViewCommand = 1  # GeneralWorkFlowBuilderModelBasedAlwaysStartTypeMemberType
        NoViewCommands = 2  # GeneralWorkFlowBuilderModelBasedAlwaysStartTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SettingsOrientationType():
        """
        Represents the settings orientation type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DrawingTemplate", " - "
           "DrawingStandard", " - "
        """
        DrawingTemplate = 0  # GeneralWorkFlowBuilderSettingsOrientationTypeMemberType
        DrawingStandard = 1  # GeneralWorkFlowBuilderSettingsOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class GridSettingsType():
        """
        Represents the grid settings type.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Drafting", " - "
           "Sketch", " - "
           "SheetZone", " - "
        """
        Drafting = 0  # GeneralWorkFlowBuilderGridSettingsTypeMemberType
        Sketch = 1  # GeneralWorkFlowBuilderGridSettingsTypeMemberType
        SheetZone = 2  # GeneralWorkFlowBuilderGridSettingsTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateDraftingComponent: bool = ...
    """
    Returns or sets  the flag indicating whether to creates a drafting component when creating a view of the master model part 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateDraftingComponent`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateDraftingComponent`` 
    
    :param createDraftingComponent: 
    :type createDraftingComponent: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    GridSettings: GeneralWorkFlowBuilderGridSettingsType = ...
    """
    Returns or sets  the option that indicates the grid settings 
    
    <hr>
    
    Getter Method
    
    Signature ``GridSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.GeneralWorkFlowBuilderGridSettingsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GridSettings`` 
    
    :param gridSettings: 
    :type gridSettings: :py:class:`NXOpen.Drawings.GeneralWorkFlowBuilderGridSettingsType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ModelBasedAlwaysStart: GeneralWorkFlowBuilderModelBasedAlwaysStartType = ...
    """
    Returns or sets  the option that indicates action to be taken after inserting a sheet with no views 
    
    <hr>
    
    Getter Method
    
    Signature ``ModelBasedAlwaysStart`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.GeneralWorkFlowBuilderModelBasedAlwaysStartType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModelBasedAlwaysStart`` 
    
    :param modelBasedAlwaysStart: 
    :type modelBasedAlwaysStart: :py:class:`NXOpen.Drawings.GeneralWorkFlowBuilderModelBasedAlwaysStartType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ModelBasedInsertSheet: bool = ...
    """
    Returns or sets  the flag indicating whether to automatically starts the insert sheet command when entering the drafting application if no drawing sheets exist 
    
    <hr>
    
    Getter Method
    
    Signature ``ModelBasedInsertSheet`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModelBasedInsertSheet`` 
    
    :param modelBasedInsertSheet: 
    :type modelBasedInsertSheet: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ModelBasedProjectedView: bool = ...
    """
    Returns or sets  the flag indicating whether to automatically start the projected view command after inserting a model view.  
    
    <hr>
    
    Getter Method
    
    Signature ``ModelBasedProjectedView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ModelBasedProjectedView`` 
    
    :param modelBasedProjectedView: 
    :type modelBasedProjectedView: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SettingsOrigination: GeneralWorkFlowBuilderSettingsOrientationType = ...
    """
    Returns or sets  the option that indicates the settings origination 
    
    <hr>
    
    Getter Method
    
    Signature ``SettingsOrigination`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.GeneralWorkFlowBuilderSettingsOrientationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SettingsOrigination`` 
    
    :param settingsOrigination: 
    :type settingsOrigination: :py:class:`NXOpen.Drawings.GeneralWorkFlowBuilderSettingsOrientationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    StandAloneInsertSheet: bool = ...
    """
    Returns or sets  the flag indicating whether to automatically starts the insert sheet command when entering the drafting application
    if no drawing sheets exist.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandAloneInsertSheet`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandAloneInsertSheet`` 
    
    :param standAloneInsertSheet: 
    :type standAloneInsertSheet: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    StandAloneProjectToView: bool = ...
    """
    Returns or sets  the flag indicating whether to automatically starts the projected view command after inserting a projected drawing view.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandAloneProjectToView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandAloneProjectToView`` 
    
    :param standAloneProjectToView: 
    :type standAloneProjectToView: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    StandAloneProjectedView: bool = ...
    """
    Returns or sets  the flag indicating whether to automatically starts the projected view command after inserting a drawing view.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandAloneProjectedView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandAloneProjectedView`` 
    
    :param standAloneProjectedView: 
    :type standAloneProjectedView: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    StandAloneViewCreation: bool = ...
    """
    Returns or sets  the flag indicating whether to automatically starts the drawing view command after inserting a sheet with no views.  
    
    <hr>
    
    Getter Method
    
    Signature ``StandAloneViewCreation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandAloneViewCreation`` 
    
    :param standAloneViewCreation: 
    :type standAloneViewCreation: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: GeneralWorkFlowBuilder = ...  # unknown typename


class VerticalCenteringMarkTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VerticalCenteringMarkType():
    """
    the vertical centering mark type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "BottomArrow", "Bottom Arrow"
       "TopArrow", "Top Arrow"
       "BottomandTopArrow", "Bottom and Top Arrow"
       "BottomandTopLine", " - "
    """
    NotSet = 0  # VerticalCenteringMarkTypeMemberType
    BottomArrow = 1  # VerticalCenteringMarkTypeMemberType
    TopArrow = 2  # VerticalCenteringMarkTypeMemberType
    BottomandTopArrow = 3  # VerticalCenteringMarkTypeMemberType
    BottomandTopLine = 4  # VerticalCenteringMarkTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewSectionLabelBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewSectionLabelBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def GetCustomizedViewLabelText(self) -> 'list[str]':
        """
        Returns the customized view label text  
        
        Signature ``GetCustomizedViewLabelText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetCustomizedViewLabelText(self, customizedText: 'list[str]') -> None:
        """
        Sets the customized view label text 
        
        Signature ``SetCustomizedViewLabelText(customizedText)`` 
        
        :param customizedText: 
        :type customizedText: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CustomizedViewLabel: bool = ...
    """
    Returns or sets  the customized view label 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomizedViewLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomizedViewLabel`` 
    
    :param customizedViewLabel: 
    :type customizedViewLabel: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeParentheses: bool = ...
    """
    Returns or sets  the include parentheses 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeParentheses`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeParentheses`` 
    
    :param includeParentheses: 
    :type includeParentheses: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeRotationAngle: bool = ...
    """
    Returns or sets  the include rotation angle 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeRotationAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeRotationAngle`` 
    
    :param includeRotationAngle: 
    :type includeRotationAngle: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeRotationSymbol: bool = ...
    """
    Returns or sets  the include rotation symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeRotationSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.ViewSectionLabelBuilder.RotationSymbolType` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeRotationSymbol`` 
    
    :param includeRotationSymbol: 
    :type includeRotationSymbol: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.ViewSectionLabelBuilder.RotationSymbolType` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    LabelCharacterHeightFactor: float = ...
    """
    Returns or sets  the label character height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelCharacterHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelCharacterHeightFactor`` 
    
    :param labelCharacterHeightFactor: 
    :type labelCharacterHeightFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelPosition: LabelPositionTypes = ...
    """
    Returns or sets  the label position 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.LabelPositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelPosition`` 
    
    :param labelPosition: 
    :type labelPosition: :py:class:`NXOpen.Drawings.LabelPositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelPrefix: str = ...
    """
    Returns or sets  the label prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelPrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelPrefix`` 
    
    :param labelPrefix: 
    :type labelPrefix: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LetterFormat: LetterFormatTypes = ...
    """
    Returns or sets  the letter format 
    
    <hr>
    
    Getter Method
    
    Signature ``LetterFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.LetterFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LetterFormat`` 
    
    :param letterFormat: 
    :type letterFormat: :py:class:`NXOpen.Drawings.LetterFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PrefixCharacterHeightFactor: float = ...
    """
    Returns or sets  the prefix character height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``PrefixCharacterHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrefixCharacterHeightFactor`` 
    
    :param prefixCharacterHeightFactor: 
    :type prefixCharacterHeightFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ReferenceToShow: ReferenceShowTypes = ...
    """
    Returns or sets  the reference to show 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceToShow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ReferenceShowTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceToShow`` 
    
    :param referenceToShow: 
    :type referenceToShow: :py:class:`NXOpen.Drawings.ReferenceShowTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RotationSymbolType: RotationSymbolTypes = ...
    """
    Returns or sets  the rotation symbol type
    
    <hr>
    
    Getter Method
    
    Signature ``RotationSymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.RotationSymbolTypes` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationSymbolType`` 
    
    :param rotationSymbolType: 
    :type rotationSymbolType: :py:class:`NXOpen.Drawings.RotationSymbolTypes` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    ScaleCharacterHeightFactor: float = ...
    """
    Returns or sets  the scale character height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleCharacterHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleCharacterHeightFactor`` 
    
    :param scaleCharacterHeightFactor: 
    :type scaleCharacterHeightFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScalePosition: ScalePositionTypes = ...
    """
    Returns or sets  the scale position 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalePosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ScalePositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScalePosition`` 
    
    :param scalePosition: 
    :type scalePosition: :py:class:`NXOpen.Drawings.ScalePositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScalePrefix: str = ...
    """
    Returns or sets  the scale prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScalePrefix`` 
    
    :param scalePrefix: 
    :type scalePrefix: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowViewLabel: bool = ...
    """
    Returns or sets  the show view label 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowViewLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowViewLabel`` 
    
    :param showViewLabel: 
    :type showViewLabel: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowViewScale: bool = ...
    """
    Returns or sets  the show view scale 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowViewScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowViewScale`` 
    
    :param showViewScale: 
    :type showViewScale: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ValueFormat: ScaleValueFormatTypes = ...
    """
    Returns or sets  the section vw label scale value format 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ScaleValueFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ValueFormat`` 
    
    :param valueFormat: 
    :type valueFormat: :py:class:`NXOpen.Drawings.ScaleValueFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewLabelOption: ViewLabelTypes = ...
    """
    Returns or sets  the view label option 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewLabelOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewLabelTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewLabelOption`` 
    
    :param viewLabelOption: 
    :type viewLabelOption: :py:class:`NXOpen.Drawings.ViewLabelTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewSectionLabelBuilder = ...  # unknown typename


class InheritPmiViewStyle():
    """
    Represents set of InheritPmiViewStyle applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.InheritPmi`
    
    .. versionadded:: NX5.0.0
    """
    
    def SetInheritGdt(self, gdtOption: NXOpen.Preferences.GdtOption) -> None:
        """
        Inherit GD and T option,that let you inherit GD and T display 
        instances onto the drawing plane or into a drawing member view.  
        
        Signature ``SetInheritGdt(gdtOption)`` 
        
        :param gdtOption:  Inherit GDT option  
        :type gdtOption: :py:class:`NXOpen.Preferences.GdtOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetCrosshatchPmiLwsv(self, crosshatch: bool) -> None:
        """
        Controls whether the cut faces of an inherited PMI Lightweight
        section view are cross-hatched or not.  
        
        Signature ``SetCrosshatchPmiLwsv(crosshatch)`` 
        
        :param crosshatch: 
        :type crosshatch: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    CrosshatchPmiLwsv: bool = ...
    """
    Returns  the cross-hatch setting for the current inherited PMI Lightweight Section View 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchPmiLwsv`` 
    
    :returns:  the crosshatch flag setting  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    InheritPmiMode: NXOpen.Preferences.PmiOption = ...
    """
    Returns or sets  the Inherit pmi mode.  
    
    <hr>
    
    Getter Method
    
    Signature ``InheritPmiMode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.PmiOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritPmiMode`` 
    
    :param pmiOption: 
    :type pmiOption: :py:class:`NXOpen.Preferences.PmiOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InheritPmiToDrawing: bool = ...
    """
    Returns or sets  the status of pmi inherited to drawing.  
    
    <hr>
    
    Getter Method
    
    Signature ``InheritPmiToDrawing`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritPmiToDrawing`` 
    
    :param pmiToDrawing: 
    :type pmiToDrawing: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InheritPmiTypeMask: int = ...
    """
    Returns or sets  the Inherit pmi type mask.  
    
    <hr>
    
    Getter Method
    
    Signature ``InheritPmiTypeMask`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritPmiTypeMask`` 
    
    :param pmiTypeMask: 
    :type pmiTypeMask: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PmiDimensionFromRevolved: bool = ...
    """
    Returns or sets  the status of pmi inherited to drawing.  
    
    <hr>
    
    Getter Method
    
    Signature ``PmiDimensionFromRevolved`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiDimensionFromRevolved`` 
    
    :param pmiDimensionFromRevolved: 
    :type pmiDimensionFromRevolved: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class SectionLineBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionLineBuilderTypes():
    """
    Section Line type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SimpleOrStepped", "Creates or edits a :py:class:`NXOpen.Drawings.SteppedSectionLine`"
       "Half", "Creates or edits a :py:class:`NXOpen.Drawings.HalfSectionLine`"
       "Revolved", "Creates or edits a :py:class:`NXOpen.Drawings.RevolvedSectionLine`"
       "PointToPoint", "Creates or edits a :py:class:`NXOpen.Drawings.PointToPointSectionLine`"
       "PointAndAngle", "Creates or edits a :py:class:`NXOpen.Drawings.PointAndAngleSectionLine`"
       "Pictorial", "Creates or edits a :py:class:`NXOpen.Drawings.PictorialSectionLine`"
       "HalfPictorial", "Creates or edits a :py:class:`NXOpen.Drawings.HalfPictorialSectionLine`"
       "Oriented", "Creates or edits a :py:class:`NXOpen.Drawings.OrientedSectionLine`"
    """
    SimpleOrStepped = 0  # SectionLineBuilderTypesMemberType
    Half = 1  # SectionLineBuilderTypesMemberType
    Revolved = 2  # SectionLineBuilderTypesMemberType
    PointToPoint = 3  # SectionLineBuilderTypesMemberType
    PointAndAngle = 4  # SectionLineBuilderTypesMemberType
    Pictorial = 5  # SectionLineBuilderTypesMemberType
    HalfPictorial = 6  # SectionLineBuilderTypesMemberType
    Oriented = 7  # SectionLineBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.SectionLineBuilder`.  
    
    This class is used to create or edit a
    :py:class:`NXOpen.Drawings.SectionLine`. 
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.SectionLineCollection.CreateSectionLineBuilder`
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SectionViewBuilder.SectionLineType`
    """
    
    class Types():
        """
        Section Line type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SimpleOrStepped", "Creates or edits a :py:class:`NXOpen.Drawings.SteppedSectionLine`"
           "Half", "Creates or edits a :py:class:`NXOpen.Drawings.HalfSectionLine`"
           "Revolved", "Creates or edits a :py:class:`NXOpen.Drawings.RevolvedSectionLine`"
           "PointToPoint", "Creates or edits a :py:class:`NXOpen.Drawings.PointToPointSectionLine`"
           "PointAndAngle", "Creates or edits a :py:class:`NXOpen.Drawings.PointAndAngleSectionLine`"
           "Pictorial", "Creates or edits a :py:class:`NXOpen.Drawings.PictorialSectionLine`"
           "HalfPictorial", "Creates or edits a :py:class:`NXOpen.Drawings.HalfPictorialSectionLine`"
           "Oriented", "Creates or edits a :py:class:`NXOpen.Drawings.OrientedSectionLine`"
        """
        SimpleOrStepped = 0  # SectionLineBuilderTypesMemberType
        Half = 1  # SectionLineBuilderTypesMemberType
        Revolved = 2  # SectionLineBuilderTypesMemberType
        PointToPoint = 3  # SectionLineBuilderTypesMemberType
        PointAndAngle = 4  # SectionLineBuilderTypesMemberType
        Pictorial = 5  # SectionLineBuilderTypesMemberType
        HalfPictorial = 6  # SectionLineBuilderTypesMemberType
        Oriented = 7  # SectionLineBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ArrowDirection: NXOpen.Direction = ...
    """
    Returns or sets  the arrow direction.  
    
    The arrow direction defines the direction of
    the section line arrows and must be perpendicular to the cut
    direction.
    
    The arrow direction is only used for
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Pictorial <NXOpen.Drawings.SectionLineBuilderTypes>` ,
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.HalfPictorial <NXOpen.Drawings.SectionLineBuilderTypes>` and
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Oriented <NXOpen.Drawings.SectionLineBuilderTypes>` section lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowDirection`` 
    
    :param arrowDirection: 
    :type arrowDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: drafting ("DRAFTING")
    """
    CutDirection: NXOpen.Direction = ...
    """
    Returns or sets  the cut direction.  
    
    The cut direction is a vector that specifies
    the direction of the cutting plane. A vector arrow displays showing
    the direction of the vector.
    
    The cut direction is only used for
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Pictorial <NXOpen.Drawings.SectionLineBuilderTypes>` ,
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.HalfPictorial <NXOpen.Drawings.SectionLineBuilderTypes>` and
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Oriented <NXOpen.Drawings.SectionLineBuilderTypes>` section lines 
    
    <hr>
    
    Getter Method
    
    Signature ``CutDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutDirection`` 
    
    :param cutDirection: 
    :type cutDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: drafting ("DRAFTING")
    """
    Half: HalfSectionLineBuilder = ...
    """
    Returns  the half section line data.  
    
    Use the half section line data when the type is set to
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Half <NXOpen.Drawings.SectionLineBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``Half`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HalfSectionLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType`
    
    License requirements: None.
    """
    HalfPictorial: HalfSectionLineBuilder = ...
    """
    Returns  the half pictorial section line data.  
    
    Use the half pictorial section line data when the type is set to
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.HalfPictorial <NXOpen.Drawings.SectionLineBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``HalfPictorial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HalfSectionLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    """
    HingeDirection: NXOpen.Direction = ...
    """
    Returns or sets  the hinge direction.  
    
    The hinge direction is only used for 
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.SimpleOrStepped <NXOpen.Drawings.SectionLineBuilderTypes>` ,
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Half <NXOpen.Drawings.SectionLineBuilderTypes>` ,
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Revolved <NXOpen.Drawings.SectionLineBuilderTypes>` ,
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.PointToPoint <NXOpen.Drawings.SectionLineBuilderTypes>` , and
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.PointAndAngle <NXOpen.Drawings.SectionLineBuilderTypes>` section lines 
    
    <hr>
    
    Getter Method
    
    Signature ``HingeDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.ViewStyleOrientationBuilder.HingeLine`
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HingeDirection`` 
    
    :param hingeDirection: 
    :type hingeDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.ViewStyleOrientationBuilder.HingeLine`
    
    License requirements: drafting ("DRAFTING")
    """
    Oriented: OrientedSectionLineBuilder = ...
    """
    Returns  the simple 3D section line data.  
    
    Use the simple 3D section line data when the type is set to
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Oriented <NXOpen.Drawings.SectionLineBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``Oriented`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.OrientedSectionLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    """
    ParentView: ParentViewBuilder = ...
    """
    Returns  the parent view.  
    
    The view that the section line will cut. 
    
    <hr>
    
    Getter Method
    
    Signature ``ParentView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ParentViewBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.ParentView`
    
    License requirements: None.
    """
    Pictorial: SteppedSectionLineBuilder = ...
    """
    Returns  the pictorial section line data.  
    
    Use the pictorial section line data when the type is set to
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Pictorial <NXOpen.Drawings.SectionLineBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``Pictorial`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SteppedSectionLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    """
    PointAndAngle: PointAndAngleSectionLineBuilder = ...
    """
    Returns  the point and angle section line data.  
    
    Use the point and angle section line data when the type is set to
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.PointAndAngle <NXOpen.Drawings.SectionLineBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``PointAndAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.PointAndAngleSectionLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    """
    PointToPoint: PointToPointSectionLineBuilder = ...
    """
    Returns  the point to point section line data.  
    
    Use the point to point section line data when the type is set to
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.PointToPoint <NXOpen.Drawings.SectionLineBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``PointToPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.PointToPointSectionLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType`
    
    License requirements: None.
    """
    Revolved: RevolvedSectionLineBuilder = ...
    """
    Returns  the revolved section line data.  
    
    Use the revolved section line data when the type is set to
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.Revolved <NXOpen.Drawings.SectionLineBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``Revolved`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.RevolvedSectionLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType`
    
    License requirements: None.
    """
    SimpleOrStepped: SteppedSectionLineBuilder = ...
    """
    Returns  the simple or stepped section line data.  
    
    Use the simple or stepped section line data when the type is set to
    :py:class:`NXOpen.Drawings.SectionLineBuilderTypes.SimpleOrStepped <NXOpen.Drawings.SectionLineBuilderTypes>` 
    
    <hr>
    
    Getter Method
    
    Signature ``SimpleOrStepped`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SteppedSectionLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType`
    
    License requirements: None.
    """
    Style: SectionLineStyleBuilder = ...
    """
    Returns  the style.  
    
    The preferences of a section line. 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.ViewStyle`
    
    License requirements: None.
    """
    Type: SectionLineBuilderTypes = ...
    """
    Returns or sets  the section line type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType`
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.SectionLineBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType`
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SectionLineBuilder = ...  # unknown typename


class DrawingsPropertiesBuilderSecondaryComponentOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingsPropertiesBuilderSecondaryComponentOptions():
    """
    Options for managing the secondary geometry property on the components 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "No", "Not marked as secondary geometry"
       "Yes", "Marked as secondary geometry"
       "Mixed", "Objects secondary geometry properties differ and will not change"
    """
    No = 0  # DrawingsPropertiesBuilderSecondaryComponentOptionsMemberType
    Yes = 1  # DrawingsPropertiesBuilderSecondaryComponentOptionsMemberType
    Mixed = 2  # DrawingsPropertiesBuilderSecondaryComponentOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingsPropertiesBuilder(NXOpen.Builder):
    """
    Represents an :py:class:`NXOpen.Drawings.DrawingsPropertiesBuilder` to be used for marking the
    component as secondary geometry.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.DraftingManager.CreateDrawingsPropertiesBuilder`
    
    Default values.
    
    ===================  =====
    Property             Value
    ===================  =====
    SecondaryComponent   No 
    ===================  =====
    
    .. versionadded:: NX11.0.0
    """
    
    class SecondaryComponentOptions():
        """
        Options for managing the secondary geometry property on the components 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "No", "Not marked as secondary geometry"
           "Yes", "Marked as secondary geometry"
           "Mixed", "Objects secondary geometry properties differ and will not change"
        """
        No = 0  # DrawingsPropertiesBuilderSecondaryComponentOptionsMemberType
        Yes = 1  # DrawingsPropertiesBuilderSecondaryComponentOptionsMemberType
        Mixed = 2  # DrawingsPropertiesBuilderSecondaryComponentOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    SecondaryComponent: DrawingsPropertiesBuilderSecondaryComponentOptions = ...
    """
    Returns or sets  the secondary geometry state.  
    
    If true, the part occurrences are marked as secondary components. Otherwise, the part occurrences are considered as non-secondary components. 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryComponent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingsPropertiesBuilderSecondaryComponentOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryComponent`` 
    
    :param secondaryComponent: 
    :type secondaryComponent: :py:class:`NXOpen.Drawings.DrawingsPropertiesBuilderSecondaryComponentOptions` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelectedObjects: NXOpen.Assemblies.SelectComponentList = ...
    """
    Returns  the selected object(s) list.  
    
    This is the active list of components that will be
    modified by any changes. 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Assemblies.SelectComponentList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: DrawingsPropertiesBuilder = ...  # unknown typename


class DraftingBodyCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.DraftingBody`s.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Drawings.DraftingView`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DraftingBody:
        """
        Finds the :py:class:`NXOpen.Drawings.DraftingBody` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of
        the software. However newer versions of the software should find the same object when
        FindObject is passed older versions of its journal identifier. In general, this method
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the DraftingBody to be found  
        :type journalIdentifier: str 
        :returns:  DraftingBody with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.DraftingBody` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    


class ViewStyleShadingBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the SHADING tab on the View Style Dialog (Drawings.  
    
    ViewStyleShadingBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngleTolerance: float = ...
    """
    Returns or sets  the angle tolerance data on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleTolerance`` 
    
    :returns:  Returns the angle tolerance that is on the shading sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleTolerance`` 
    
    :param angleToleranceData:  Sets a new angle tolerance on the shading sub-builder  
    :type angleToleranceData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CutFaceColor: NXOpen.NXColor = ...
    """
    Returns or sets  the cut face color on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``CutFaceColor`` 
    
    :returns:  Returns the cut face color that is on the shading sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutFaceColor`` 
    
    :param cutFaceColor:  Sets a new cut face color on the shading sub-builder  
    :type cutFaceColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    EdgeTolerance: float = ...
    """
    Returns or sets  the edge tolerance data on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``EdgeTolerance`` 
    
    :returns:  Returns the edge tolerance that is on the shading sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EdgeTolerance`` 
    
    :param edgeToleranceData:  Sets a new edge tolerance on the shading sub-builder  
    :type edgeToleranceData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FaceTolerance: float = ...
    """
    Returns or sets  the face tolerance data on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``FaceTolerance`` 
    
    :returns:  Returns the face tolerance that is on the shading sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FaceTolerance`` 
    
    :param faceToleranceData:  Sets a new face tolerance on the shading sub-builder  
    :type faceToleranceData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenWireframeColor: NXOpen.NXColor = ...
    """
    Returns or sets  the hidden wireframe color on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenWireframeColor`` 
    
    :returns:  Returns the hidden wireframe color that is on the shading sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenWireframeColor`` 
    
    :param hiddenWireframeColor:  Sets a new hidden wireframe color on the shading sub-builder  
    :type hiddenWireframeColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RenderingStyle: NXOpen.Preferences.ShadingRenderingStyleOption = ...
    """
    Returns or sets  the rendering style option on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``RenderingStyle`` 
    
    :returns:  Returns the rendering style option that is on the shading sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.ShadingRenderingStyleOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenderingStyle`` 
    
    :param renderingStyleOption:  Sets a new rendering style option on the shading sub-builder  
    :type renderingStyleOption: :py:class:`NXOpen.Preferences.ShadingRenderingStyleOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShadeTolerance: NXOpen.Preferences.ShadingToleranceOption = ...
    """
    Returns or sets  the shade tolerance option on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ShadeTolerance`` 
    
    :returns:  Returns the shade tolerance option that is on the shading sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.ShadingToleranceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadeTolerance`` 
    
    :param shadeToleranceOption:  Sets a new shade tolerance option on the shading sub-builder  
    :type shadeToleranceOption: :py:class:`NXOpen.Preferences.ShadingToleranceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShininessScale: float = ...
    """
    Returns or sets  the shininess scale data on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ShininessScale`` 
    
    :returns:  Returns the shininess scale that is on the shading sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShininessScale`` 
    
    :param shininessScaleData:  Sets a new shininess scale on the shading sub-builder  
    :type shininessScaleData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TwoSidedLight: bool = ...
    """
    Returns or sets  the two sided light toggle on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``TwoSidedLight`` 
    
    :returns:  Returns the two sided light toggle value that is on the shading sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwoSidedLight`` 
    
    :param twoSidedLightToggle:  Sets a new two sided light toggle value on the shading sub-builder  
    :type twoSidedLightToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleWireframeColor: NXOpen.NXColor = ...
    """
    Returns or sets  the visible wireframe color on the SHADING tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleWireframeColor`` 
    
    :returns:  Returns the visible wireframe color that is on the shading sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleWireframeColor`` 
    
    :param visibleWireframeColor:  Sets a new visible wireframe color on the shading sub-builder  
    :type visibleWireframeColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleShadingBuilder = ...  # unknown typename


class ThreadsViewStyle(NXOpen.Preferences.IThreadsViewPreferences):
    """
    Represents set of Threads View Style Preferences applicable to drafting views.  
    
    Allows to create ANSI and ISO thread representations for both internal 
    and external threads in drawing member views.
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.Threads`
    
    .. versionadded:: NX5.0.0
    """
    MinimumPitchField: float = ...
    """
    Returns or sets  the minimum pitch field.  
    
    Allows to control the minimum distance (in drawing coordinates) 
    to which two points which represent crests of a thread are drawn. It is also used to control 
    the minimum distance between a thread and it's defining geometry such as edges, silhouettes or 
    section edges of the cylindrical face or chamfered face. This can be used to help prevent lines 
    from running together, when threads with a small pitch are plotted at a small scale.
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumPitchField`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumPitchField`` 
    
    :param minimumPitchField: 
    :type minimumPitchField: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OverrideVisibleThreadColor: int = ...
    """
    Returns or sets  the visible thread override color.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideVisibleThreadColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideVisibleThreadColor`` 
    
    :param overrideVisibleThreadColor: 
    :type overrideVisibleThreadColor: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RenderTrueHiddenLine: bool = ...
    """
    Returns or sets  the status of render true hidden line 
    
    <hr>
    
    Getter Method
    
    Signature ``RenderTrueHiddenLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenderTrueHiddenLine`` 
    
    :param renderTrueHiddenLine: 
    :type renderTrueHiddenLine: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ThreadsStandardOptionData: int = ...
    """
    Returns or sets  the threads standard option 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadsStandardOptionData`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadsStandardOptionData`` 
    
    :param threadsStandardOptionData: 
    :type threadsStandardOptionData: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class DraftingViewCollectionViewUpdateOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DraftingViewCollectionViewUpdateOption():
    """
    Specifies which drafting views to update. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", "Updates all views in scope (part or drawing sheet)."
       "OutOfDate", "Updates all out of date views in scope (part or drawing sheet)."
       "OutOfDateAutomatic", "Updates all out of date automatic views in scope (part or drawing sheet)."
    """
    All = 0  # DraftingViewCollectionViewUpdateOptionMemberType
    OutOfDate = 1  # DraftingViewCollectionViewUpdateOptionMemberType
    OutOfDateAutomatic = 2  # DraftingViewCollectionViewUpdateOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingViewCollectionViewCopyAnnotOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DraftingViewCollectionViewCopyAnnotOption():
    """
    Specifies the the annotation copy mode. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CopyAnnotation", "copy annotation"
       "DontCopyAnnotation", "don't copy annotation"
    """
    CopyAnnotation = 0  # DraftingViewCollectionViewCopyAnnotOptionMemberType
    DontCopyAnnotation = 1  # DraftingViewCollectionViewCopyAnnotOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingViewCollectionViewCopyDetailOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DraftingViewCollectionViewCopyDetailOption():
    """
    Specifies the the view copy mode. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DetailView", "detail view"
       "DuplicateView", "duplicate view"
       "ModelView", "model view"
    """
    DetailView = 0  # DraftingViewCollectionViewCopyDetailOptionMemberType
    DuplicateView = 1  # DraftingViewCollectionViewCopyDetailOptionMemberType
    ModelView = 2  # DraftingViewCollectionViewCopyDetailOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingViewCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.DraftingView`s.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX3.0.0
    """
    
    class ViewUpdateOption():
        """
        Specifies which drafting views to update. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", "Updates all views in scope (part or drawing sheet)."
           "OutOfDate", "Updates all out of date views in scope (part or drawing sheet)."
           "OutOfDateAutomatic", "Updates all out of date automatic views in scope (part or drawing sheet)."
        """
        All = 0  # DraftingViewCollectionViewUpdateOptionMemberType
        OutOfDate = 1  # DraftingViewCollectionViewUpdateOptionMemberType
        OutOfDateAutomatic = 2  # DraftingViewCollectionViewUpdateOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewCopyAnnotOption():
        """
        Specifies the the annotation copy mode. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CopyAnnotation", "copy annotation"
           "DontCopyAnnotation", "don't copy annotation"
        """
        CopyAnnotation = 0  # DraftingViewCollectionViewCopyAnnotOptionMemberType
        DontCopyAnnotation = 1  # DraftingViewCollectionViewCopyAnnotOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewCopyDetailOption():
        """
        Specifies the the view copy mode. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DetailView", "detail view"
           "DuplicateView", "duplicate view"
           "ModelView", "model view"
        """
        DetailView = 0  # DraftingViewCollectionViewCopyDetailOptionMemberType
        DuplicateView = 1  # DraftingViewCollectionViewCopyDetailOptionMemberType
        ModelView = 2  # DraftingViewCollectionViewCopyDetailOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    @typing.overload
    def UpdateViews(self, updateOption: DraftingViewCollectionViewUpdateOption) -> None:
        """
        Updates drafting views in the part determined by an update option.
        For example, to update all out of date views in a part, pass in
        :py:class:`Drawings.DraftingViewCollectionViewUpdateOption.OutOfDate <Drawings.DraftingViewCollectionViewUpdateOption>`.
        
        Signature ``UpdateViews(updateOption)`` 
        
        :param updateOption:  View update option  
        :type updateOption: :py:class:`NXOpen.Drawings.DraftingViewCollectionViewUpdateOption` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    @typing.overload
    def UpdateViews(self, updateOption: DraftingViewCollectionViewUpdateOption, drawing: DrawingSheet) -> None:
        """
        Updates drafting views in a sheet determined by an update option.
        For example, to update all out of date views on the sheet, pass in
        :py:class:`Drawings.DraftingViewCollectionViewUpdateOption.OutOfDate <Drawings.DraftingViewCollectionViewUpdateOption>`.
        
        Signature ``UpdateViews(updateOption, drawing)`` 
        
        :param updateOption:  View update option  
        :type updateOption: :py:class:`NXOpen.Drawings.DraftingViewCollectionViewUpdateOption` 
        :param drawing: 
        :type drawing: :py:class:`NXOpen.Drawings.DrawingSheet` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    @typing.overload
    def UpdateViews(self, views: 'list[DraftingView]') -> None:
        """
        Updates the drafting views.  The views in list can be spread
        amongst multiple sheets, but they must all belong to the same part.
        
        Signature ``UpdateViews(views)`` 
        
        :param views: 
        :type views: list of :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SuppressViewBreaks(self, view: DraftingView) -> None:
        """
        Suppress all view breaks of the view.  
        
        It is neccessary if we want change the view contents
        
        Signature ``SuppressViewBreaks(view)`` 
        
        :param view: 
        :type view: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def RestoreViewBreaks(self, view: DraftingView) -> None:
        """
        Restore all view breaks of the view suppressed by :py:meth:`Drawings.DraftingViewCollection.SuppressViewBreaks` 
        
        Signature ``RestoreViewBreaks(view)`` 
        
        :param view: 
        :type view: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def UpdateViewBreaks(self, view: DraftingView) -> None:
        """
        Log all view breaks of the view for update 
        
        Signature ``UpdateViewBreaks(view)`` 
        
        :param view:  View in which view breaks will be updated  
        :type view: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def PasteViews(self, drawing: DrawingSheet, views: 'list[DraftingView]', detailOption: DraftingViewCollectionViewCopyDetailOption, annotOption: DraftingViewCollectionViewCopyAnnotOption) -> 'list[DraftingView]':
        """
        Paste views 
        
        Signature ``PasteViews(drawing, views, detailOption, annotOption)`` 
        
        :param drawing: the drawing which view in 
        :type drawing: :py:class:`NXOpen.Drawings.DrawingSheet` 
        :param views: old views  
        :type views: list of :py:class:`NXOpen.Drawings.DraftingView` 
        :param detailOption:  detail copy option  
        :type detailOption: :py:class:`NXOpen.Drawings.DraftingViewCollectionViewCopyDetailOption` 
        :param annotOption:  Annotation copy option 
        :type annotOption: :py:class:`NXOpen.Drawings.DraftingViewCollectionViewCopyAnnotOption` 
        :returns: new views  
        :rtype: list of :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def MoveViewsToDrawing(self, views: 'list[DraftingView]', drawing: DrawingSheet) -> None:
        """
        Move views to drawing
        
        Signature ``MoveViewsToDrawing(views, drawing)`` 
        
        :param views:  new views 
        :type views: list of :py:class:`NXOpen.Drawings.DraftingView` 
        :param drawing:  the drawing which view will in 
        :type drawing: :py:class:`NXOpen.Drawings.DrawingSheet` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DraftingView:
        """
        Finds the :py:class:`NXOpen.Drawings.DraftingView` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of
        the software. However newer versions of the software should find the same object when
        FindObject is passed older versions of its journal identifier. In general, this method
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the drafting view to be found  
        :type journalIdentifier: str 
        :returns:  View with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetParentOfView(self, view: NXOpen.View) -> NXOpen.ModelingView:
        """
        Find the parent cut (sectioned) model view of a drawing member view.  
        
        If the parent view is not a cut model view, None is returned.  
        
        Signature ``GetParentOfView(view)`` 
        
        :param view: 
        :type view: :py:class:`NXOpen.View` 
        :returns: 
        :rtype: :py:class:`NXOpen.ModelingView` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteViewsInOriginalPart(self, views: 'list[DraftingView]') -> None:
        """
        Deletes views in original part
        
        Signature ``DeleteViewsInOriginalPart(views)`` 
        
        :param views: 
        :type views: list of :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateUpdateViewsBuilder(self) -> UpdateViewsBuilder:
        """
        Creates the Update Views Builder  
        
        Signature ``CreateUpdateViewsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.UpdateViewsBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateBaseViewBuilder(self, view: BaseView) -> BaseViewBuilder:
        """
        Creates the Base View Builder  
        
        Signature ``CreateBaseViewBuilder(view)`` 
        
        :param view:  the base view to be edited,                                                              if None, then create a base view  
        :type view: :py:class:`NXOpen.Drawings.BaseView` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.BaseViewBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateProjectedViewBuilder(self, view: ProjectedView) -> ProjectedViewBuilder:
        """
        Creates the Projected View Builder  
        
        Signature ``CreateProjectedViewBuilder(view)`` 
        
        :param view:  the projected view to be edited,                                                                   if None, then create a projected view  
        :type view: :py:class:`NXOpen.Drawings.ProjectedView` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.ProjectedViewBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateSectionViewBuilder(self, sectionViewOrSectionLine: NXOpen.NXObject) -> SectionViewBuilder:
        """
        Creates the Section View Builder  
        
        Signature ``CreateSectionViewBuilder(sectionViewOrSectionLine)`` 
        
        :param sectionViewOrSectionLine:  the section view or section line to be edited,                                                                    if None, then create a section view or section line 
        :type sectionViewOrSectionLine: :py:class:`NXOpen.NXObject` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SectionViewBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateSectionInViewBuilder(self) -> SectionInViewBuilder:
        """
        Creates the Section In View Builder  
        
        Signature ``CreateSectionInViewBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SectionInViewBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateDrawingViewBuilder(self, drawingview: DrawingView) -> DrawingViewBuilder:
        """
        Creates a DrawingViewBuilder  
        
        Signature ``CreateDrawingViewBuilder(drawingview)`` 
        
        :param drawingview:  the drawing view to be edited,                                                                        if None, then create a drawing view  
        :type drawingview: :py:class:`NXOpen.Drawings.DrawingView` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.DrawingViewBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateDetailViewBuilder(self, view: DetailView) -> DetailViewBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.DetailViewBuilder`  
        
        Signature ``CreateDetailViewBuilder(view)`` 
        
        :param view:  :py:class:`NXOpen.Drawings.DetailView` to be edited, if None  then create a new one  
        :type view: :py:class:`NXOpen.Drawings.DetailView` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.DetailViewBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateCopyTo3dBuilder(self) -> ViewCopyTo3dBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilder`  
        
        Signature ``CreateCopyTo3dBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateStandardViewsBuilder(self) -> StandardViewsBuilder:
        """
        Creates a StandardViewsBuilder  
        
        Signature ``CreateStandardViewsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.StandardViewsBuilder` 
        
        .. versionadded:: NX6.0.1
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def CreateViewProjectionBuilder(self) -> ViewProjectionBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.ViewProjectionBuilder`  
        
        Signature ``CreateViewProjectionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.ViewProjectionBuilder` 
        
        .. versionadded:: NX6.0.2
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def CreateBrokenViewBuilder(self, viewbreak: ViewBreak) -> BrokenViewBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.BrokenViewBuilder`  
        
        Signature ``CreateBrokenViewBuilder(viewbreak)`` 
        
        :param viewbreak:  the view break to be edited,                                                                     None in case of new broken view.  
        
        :type viewbreak: :py:class:`NXOpen.Drawings.ViewBreak` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.BrokenViewBuilder` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ConvertLegacyViewsToLightweight(self, views: 'list[DraftingView]') -> None:
        """
        Converts legacy views to lightweight.  
        
        The views in list can be spread
        amongst multiple sheets, but they must all belong to the same part.
        
        Signature ``ConvertLegacyViewsToLightweight(views)`` 
        
        :param views: 
        :type views: list of :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX7.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateRefineDisplayBuilder(self) -> RefineDisplayBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.RefineDisplayBuilder`  
        
        Signature ``CreateRefineDisplayBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.RefineDisplayBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateAddRemoveBoxViewBuilder(self, activeView: DraftingView) -> AddRemoveBoxViewBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.AddRemoveBoxViewBuilder`  
        
        Signature ``CreateAddRemoveBoxViewBuilder(activeView)`` 
        
        :param activeView:  the active view.  
        
        Cannot be None.  
        :type activeView: :py:class:`NXOpen.Drawings.DraftingView` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.AddRemoveBoxViewBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateViewCreationWizardBuilder(self) -> ViewCreationWizardBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.ViewCreationWizardBuilder`  
        
        Signature ``CreateViewCreationWizardBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.ViewCreationWizardBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateShipbuildingLineBuilder(self) -> ViewStyleShipbuildingLinesBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder`  
        
        Signature ``CreateShipbuildingLineBuilder()`` 
        
        :returns:  Returns the empty Shipbuilding Lines sub-builder on View Style  
        :rtype: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateCustomViewSettingsBuilder(self) -> CustomViewSettingsBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.CustomViewSettingsBuilder`  
        
        Signature ``CreateCustomViewSettingsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateShipDraftingViewLinesBuilder(self) -> ShipDraftingViewLinesBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder`  
        
        Signature ``CreateShipDraftingViewLinesBuilder()`` 
        
        :returns:  Returns the empty Ship Drafting View Lines sub-builder on View Style  
        :rtype: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def CreateSecondaryGeometryInViewsBuilder(self) -> SecondaryGeometryInViewsBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.SecondaryGeometryInViewsBuilder`  
        
        Signature ``CreateSecondaryGeometryInViewsBuilder()`` 
        
        :returns:  Returns the Secondary Geometry In Views builder  
        :rtype: :py:class:`NXOpen.Drawings.SecondaryGeometryInViewsBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class UpdateViewsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.UpdateViewsBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateUpdateViewsBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Views: NXOpen.SelectObjectList = ...
    """
    Returns  the selected views 
    
    <hr>
    
    Getter Method
    
    Signature ``Views`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectObjectList` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: UpdateViewsBuilder = ...  # unknown typename


class SteppedSectionLineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.SteppedSectionLineBuilder`.  
    
    This class is used to create or edit a
    :py:class:`NXOpen.Drawings.SteppedSectionLine`. 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType` instead.
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndLocation1: NXOpen.Point = ...
    """
    Returns or sets  the end location 1 which determines the position of the
    first arrow segment in the section line.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation1`` 
    
    :param endLocation1: 
    :type endLocation1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    EndLocation2: NXOpen.Point = ...
    """
    Returns or sets  the end location 2 which determines the position of the
    second arrow segment in the section line 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation2`` 
    
    :param endLocation2: 
    :type endLocation2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Leg1: SectionLineSegmentBuilderList = ...
    """
    Returns  the list of cut and bend segments.  
    
    The list will contain :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes.Cut <NXOpen.Drawings.SectionLineSegmentBuilderTypes>`
    and :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes.Bend <NXOpen.Drawings.SectionLineSegmentBuilderTypes>` types
    of :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` segments.
    
    Note that there is no order to the elements of this list since the order is
    determined by the hinge direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``Leg1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: None.
    """
    Null: SteppedSectionLineBuilder = ...  # unknown typename


class ViewBoundaryBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewBoundaryBuilderType():
    """
    The view boundary type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "automatic rectangle"
       "Manual", "top view"
       "BreakLine", "break line / detail"
       "Bound", "bound by objects"
    """
    Automatic = 0  # ViewBoundaryBuilderTypeMemberType
    Manual = 1  # ViewBoundaryBuilderTypeMemberType
    BreakLine = 2  # ViewBoundaryBuilderTypeMemberType
    Bound = 3  # ViewBoundaryBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewBoundaryBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the View Boundary (Drawings.  
    
    ViewBoundaryBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    class Type():
        """
        The view boundary type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "automatic rectangle"
           "Manual", "top view"
           "BreakLine", "break line / detail"
           "Bound", "bound by objects"
        """
        Automatic = 0  # ViewBoundaryBuilderTypeMemberType
        Manual = 1  # ViewBoundaryBuilderTypeMemberType
        BreakLine = 2  # ViewBoundaryBuilderTypeMemberType
        Bound = 3  # ViewBoundaryBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BoundaryPoint1: NXOpen.Point = ...
    """
    Returns or sets  the first corner point 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryPoint1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryPoint1`` 
    
    :param boundaryPoint1: 
    :type boundaryPoint1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    BoundaryPoint2: NXOpen.Point = ...
    """
    Returns or sets  the second corner point 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryPoint2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryPoint2`` 
    
    :param boundaryPoint2: 
    :type boundaryPoint2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    BoundaryType: ViewBoundaryBuilderType = ...
    """
    Returns or sets  the orientation type 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryType`` 
    
    :returns:  returns the boundary type.  
    :rtype: :py:class:`NXOpen.Drawings.ViewBoundaryBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryType`` 
    
    :param type:  sets the boundary type.  
    :type type: :py:class:`NXOpen.Drawings.ViewBoundaryBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Null: ViewBoundaryBuilder = ...  # unknown typename


class ViewStyleShipbuildingLinesBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ViewStyleShipbuildingLinesBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ViewStyleShipbuildingLinesBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ViewStyleShipbuildingLinesBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ViewStyleShipbuildingLinesBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ViewStyleShipbuildingLinesBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ViewStyleShipbuildingLinesBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ViewStyleShipbuildingLinesBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ViewStyleShipbuildingLinesBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ViewStyleShipbuildingLinesBuilder, object2: ViewStyleShipbuildingLinesBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ViewStyleShipbuildingLinesBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ViewStyleShipbuildingLinesBuilderList = ...  # unknown typename


class ViewLabelBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewLabelBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def GetCustomizedViewLabelText(self) -> 'list[str]':
        """
        Returns the customized view label text  
        
        Signature ``GetCustomizedViewLabelText()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetCustomizedViewLabelText(self, customizedText: 'list[str]') -> None:
        """
        Sets the customized view label text 
        
        Signature ``SetCustomizedViewLabelText(customizedText)`` 
        
        :param customizedText: 
        :type customizedText: list of str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CustomizedViewLabel: bool = ...
    """
    Returns or sets  the customized view label 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomizedViewLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomizedViewLabel`` 
    
    :param customizedViewLabel: 
    :type customizedViewLabel: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeParentheses: bool = ...
    """
    Returns or sets  the include parentheses 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeParentheses`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeParentheses`` 
    
    :param includeParentheses: 
    :type includeParentheses: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeRotationAngle: bool = ...
    """
    Returns or sets  the include rotation angle 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeRotationAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeRotationAngle`` 
    
    :param includeRotationAngle: 
    :type includeRotationAngle: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeRotationSymbol: bool = ...
    """
    Returns or sets  the include rotation symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeRotationSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.ViewLabelBuilder.RotationSymbolType` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeRotationSymbol`` 
    
    :param includeRotationSymbol: 
    :type includeRotationSymbol: bool 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.ViewLabelBuilder.RotationSymbolType` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    LabelCharacterHeightFactor: float = ...
    """
    Returns or sets  the label character height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelCharacterHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelCharacterHeightFactor`` 
    
    :param labelCharacterHeightFactor: 
    :type labelCharacterHeightFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelPosition: LabelPositionTypes = ...
    """
    Returns or sets  the label position 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelPosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.LabelPositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelPosition`` 
    
    :param labelPosition: 
    :type labelPosition: :py:class:`NXOpen.Drawings.LabelPositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelPrefix: str = ...
    """
    Returns or sets  the label prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelPrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelPrefix`` 
    
    :param labelPrefix: 
    :type labelPrefix: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LetterFormat: LetterFormatTypes = ...
    """
    Returns or sets  the letter format 
    
    <hr>
    
    Getter Method
    
    Signature ``LetterFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.LetterFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LetterFormat`` 
    
    :param letterFormat: 
    :type letterFormat: :py:class:`NXOpen.Drawings.LetterFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PrefixCharacterHeightFactor: float = ...
    """
    Returns or sets  the prefix character height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``PrefixCharacterHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PrefixCharacterHeightFactor`` 
    
    :param prefixCharacterHeightFactor: 
    :type prefixCharacterHeightFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ReferenceToShow: ReferenceShowTypes = ...
    """
    Returns or sets  the reference to show 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceToShow`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ReferenceShowTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceToShow`` 
    
    :param referenceToShow: 
    :type referenceToShow: :py:class:`NXOpen.Drawings.ReferenceShowTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RotationSymbolType: RotationSymbolTypes = ...
    """
    Returns or sets  the rotation symbol type
    
    <hr>
    
    Getter Method
    
    Signature ``RotationSymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.RotationSymbolTypes` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationSymbolType`` 
    
    :param rotationSymbolType: 
    :type rotationSymbolType: :py:class:`NXOpen.Drawings.RotationSymbolTypes` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    ScaleCharacterHeightFactor: float = ...
    """
    Returns or sets  the scale character height factor 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleCharacterHeightFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleCharacterHeightFactor`` 
    
    :param scaleCharacterHeightFactor: 
    :type scaleCharacterHeightFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScalePosition: ScalePositionTypes = ...
    """
    Returns or sets  the scale position 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalePosition`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ScalePositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScalePosition`` 
    
    :param scalePosition: 
    :type scalePosition: :py:class:`NXOpen.Drawings.ScalePositionTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScalePrefix: str = ...
    """
    Returns or sets  the scale prefix 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalePrefix`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScalePrefix`` 
    
    :param scalePrefix: 
    :type scalePrefix: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowViewLabel: bool = ...
    """
    Returns or sets  the show view label 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowViewLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowViewLabel`` 
    
    :param showViewLabel: 
    :type showViewLabel: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowViewScale: bool = ...
    """
    Returns or sets  the show view scale 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowViewScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowViewScale`` 
    
    :param showViewScale: 
    :type showViewScale: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ValueFormat: ScaleValueFormatTypes = ...
    """
    Returns or sets  the value format 
    
    <hr>
    
    Getter Method
    
    Signature ``ValueFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ScaleValueFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ValueFormat`` 
    
    :param valueFormat: 
    :type valueFormat: :py:class:`NXOpen.Drawings.ScaleValueFormatTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewLabelOption: ViewLabelTypes = ...
    """
    Returns or sets  the view label option 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewLabelOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewLabelTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewLabelOption`` 
    
    :param viewLabelOption: 
    :type viewLabelOption: :py:class:`NXOpen.Drawings.ViewLabelTypes` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewLabelBuilder = ...  # unknown typename


class ViewProjectedLabelBuilder(ViewLabelBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewProjectedLabelBuilder`
    
    .. versionadded:: NX9.0.0
    """
    Null: ViewProjectedLabelBuilder = ...  # unknown typename


class ViewStyleGeneralBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents view style general builder (Drawings.  
    
    ViewStyleGeneralBuilder) which manages all the general
    *   attributes which are necessary for all the views.
    *   To obtain an instance of the class, we need to follow the steps: creat a new view, click the view style
    *   button on the view dialog, edit the view style general tab.
    
    .. versionadded:: NX6.0.0
    """
    
    def GetRenderSet(self) -> 'list[RenderSet]':
        """
        Gets the render sets on the GENERAL tab of the View Style Dialog  
        
        Signature ``GetRenderSet()`` 
        
        :returns:  Returns the render sets that are on the general sub-builder  
        :rtype: list of :py:class:`NXOpen.Drawings.RenderSet` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRenderSet(self, renderSets: 'list[RenderSet]') -> None:
        """
        Sets the render sets on the GENERAL tab of the View Style Dialog 
        
        Signature ``SetRenderSet(renderSets)`` 
        
        :param renderSets:  Sets new render sets on the general sub-builder  
        :type renderSets: list of :py:class:`NXOpen.Drawings.RenderSet` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AngleDecimalPointCharacter: NXOpen.Preferences.DecimalPointCharacter = ...
    """
    Returns or sets  the decimal point character to use for view angle display.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleDecimalPointCharacter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.DecimalPointCharacter` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleDecimalPointCharacter`` 
    
    :param decimalPointCharacter: 
    :type decimalPointCharacter: :py:class:`NXOpen.Preferences.DecimalPointCharacter` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AngleFormat: NXOpen.Preferences.AngleFormat = ...
    """
    Returns or sets  the format to use for view angle display.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.AngleFormat` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleFormat`` 
    
    :param angleFormat: 
    :type angleFormat: :py:class:`NXOpen.Preferences.AngleFormat` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AnglePrecision: int = ...
    """
    Returns or sets  the precision to use for view angle display.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnglePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnglePrecision`` 
    
    :param anglePrecision: 
    :type anglePrecision: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AngleSetting: AssociativeAngleBuilder = ...
    """
    Returns  the angle value on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleSetting`` 
    
    :returns:  Returns the angle value that is on the general sub-builder  
    :rtype: :py:class:`NXOpen.Drawings.AssociativeAngleBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    AngleShowLeadingZeros: bool = ...
    """
    Returns or sets  the status of leading zeros display in view angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleShowLeadingZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleShowLeadingZeros`` 
    
    :param showLeadingZeros: 
    :type showLeadingZeros: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AngleShowTrailingZeros: bool = ...
    """
    Returns or sets  the status of trailing zeros display in view angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleShowTrailingZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleShowTrailingZeros`` 
    
    :param showTrailingZeros: 
    :type showTrailingZeros: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AngleValue: float = ...
    """
    Returns or sets  the angle value on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleValue`` 
    
    :returns:  Returns the angle value that is on the general sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.ViewStyleGeneralBuilder.AngleSetting` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleValue`` 
    
    :param angleValue:  Sets a new angle value on the general sub-builder  
    :type angleValue: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.ViewStyleGeneralBuilder.AngleSetting` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    AutomaticAnchorPoint: bool = ...
    """
    Returns or sets  the automatic anchor point toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticAnchorPoint`` 
    
    :returns:  Returns the automatic anchor point toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticAnchorPoint`` 
    
    :param automaticAnchorPointToggle:  Sets a new aautomatic anchor point toggle value on the general sub-builder  
    :type automaticAnchorPointToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AutomaticUpdate: bool = ...
    """
    Returns or sets  the automatic update toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticUpdate`` 
    
    :returns:  Returns the automatic update toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticUpdate`` 
    
    :param automaticUpdateToggle:  Sets a new automatic update toggle value on the general sub-builder  
    :type automaticUpdateToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BoundaryStatus: bool = ...
    """
    Returns or sets  the boundary status toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryStatus`` 
    
    :returns:  Returns the boundary status toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryStatus`` 
    
    :param boundaryStatusToggle:  Sets a new boundary status toggle value on the general sub-builder  
    :type boundaryStatusToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Centerlines: bool = ...
    """
    Returns or sets  the centerlines toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Centerlines`` 
    
    :returns:  Returns the centerlines toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Centerlines`` 
    
    :param centerlinesToggle:  Sets a new centerlines toggle value on the general sub-builder  
    :type centerlinesToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayId: NXOpen.Preferences.GeneralDisplayIdOption = ...
    """
    Returns or sets  the display identifier option on the GENERAL tab of the View Style Dialog, it controls whether
    the orientation or the name of the view is displayed in the graphic window
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayId`` 
    
    :returns:  Returns the display id option that is on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralDisplayIdOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayId`` 
    
    :param option:  Sets a new display id option on the general sub-builder  
    :type option: :py:class:`NXOpen.Preferences.GeneralDisplayIdOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ExtractedEdges: NXOpen.Preferences.GeneralExtractedEdgesOption = ...
    """
    Returns or sets  the extracted edges option on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtractedEdges`` 
    
    :returns:  Returns the extracted edges option that is on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralExtractedEdgesOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtractedEdges`` 
    
    :param extractedEdgesOption:  Sets a new extracted edges option on the general sub-builder  
    :type extractedEdgesOption: :py:class:`NXOpen.Preferences.GeneralExtractedEdgesOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FramebarHorizontal: bool = ...
    """
    Returns or sets  the horizontal framebar toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``FramebarHorizontal`` 
    
    :returns:  Returns the horizontal framebar toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FramebarHorizontal`` 
    
    :param framebarHorizontalToggle:  Sets a new horizontal framebar toggle value on the general sub-builder  
    :type framebarHorizontalToggle: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FramebarVertical: bool = ...
    """
    Returns or sets  the vertical framebar toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``FramebarVertical`` 
    
    :returns:  Returns the vertical framebar toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FramebarVertical`` 
    
    :param framebarVerticalToggle:  Sets a new vertical framebar toggle value on the general sub-builder  
    :type framebarVerticalToggle: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LegacyView: bool = ...
    """
    Returns or sets  the leagcy view toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``LegacyView`` 
    
    :returns:  Returns the legacy view toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LegacyView`` 
    
    :param legacyView:  Sets a legacy view toggle value on the general sub-builder  
    :type legacyView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LightweightView: bool = ...
    """
    Returns or sets  the view representation enum on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``LightweightView`` 
    
    :returns:  Returns the view representation option that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LightweightView`` 
    
    :param lightweightView:  Sets a view representation option on the general sub-builder  
    :type lightweightView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LockmethodView: NXOpen.Preferences.GeneralViewLockmethodOption = ...
    """
    Returns or sets  the lock method setting on the Configuration tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``LockmethodView`` 
    
    :returns:  Returns the lock method option on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewLockmethodOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockmethodView`` 
    
    :param lockMethodView:  Sets a lock method option on the general sub-builder  
    :type lockMethodView: :py:class:`NXOpen.Preferences.GeneralViewLockmethodOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    Reference: bool = ...
    """
    Returns or sets  the reference toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Reference`` 
    
    :returns:  Returns the reference toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Reference`` 
    
    :param referenceToggle:  Sets a new reference toggle value on the general sub-builder  
    :type referenceToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Scale: ViewScaleBuilder = ...
    """
    Returns  the scale definition on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns:  Returns the scale definition that is on the general sub-builder  
    :rtype: :py:class:`NXOpen.Drawings.ViewScaleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ScaleLabel: bool = ...
    """
    Returns or sets  the scale label toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleLabel`` 
    
    :returns:  Returns the scale label toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleLabel`` 
    
    :param scaleLabelToggle:  Sets a new scale label toggle value on the general sub-builder  
    :type scaleLabelToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Silhouettes: bool = ...
    """
    Returns or sets  the silhouettes toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Silhouettes`` 
    
    :returns:  Returns the silhouettes toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Silhouettes`` 
    
    :param silhouettesToggle:  Sets a new silhouettes toggle value on the general sub-builder  
    :type silhouettesToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SnapshotView: bool = ...
    """
    Returns or sets  the snapshot toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SnapshotView`` 
    
    :returns:  Returns the snapshot view toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.ViewStyleGeneralBuilder.LockmethodView()` instead(the value is NXOpen.Preferences.GeneralViewPreferences.GeneralViewLockmethodOptionSnapshot).
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SnapshotView`` 
    
    :param snapshotView:  Sets a snapshot view toggle value on the general sub-builder  
    :type snapshotView: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.ViewStyleGeneralBuilder.LockmethodView()` instead(the value is NXOpen.Preferences.GeneralViewPreferences.GeneralViewLockmethodOptionSnapshot).
    
    License requirements: drafting ("DRAFTING")
    """
    Tolerance: NXOpen.Preferences.GeneralToleranceOption = ...
    """
    Returns or sets  the tolerance option on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns:  Returns the tolerance option that is on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralToleranceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param toleranceOption:  Sets a new tolerance option on the general sub-builder  
    :type toleranceOption: :py:class:`NXOpen.Preferences.GeneralToleranceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ToleranceValue: float = ...
    """
    Returns or sets  the tolerance value on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceValue`` 
    
    :returns:  Returns the tolerance value that is on the general sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceValue`` 
    
    :param toleranceValue:  Sets a new tolerance value on the general sub-builder  
    :type toleranceValue: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    UVGrid: bool = ...
    """
    Returns or sets  the uvgrid toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``UVGrid`` 
    
    :returns:  Returns the uv-grid toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UVGrid`` 
    
    :param uVGridToggle:  Sets a new uv-grid toggle value on the general sub-builder  
    :type uVGridToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewLabel: bool = ...
    """
    Returns or sets  the view label toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewLabel`` 
    
    :returns:  Returns the view label toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewLabel`` 
    
    :param viewLabelToggle:  Sets a new view label toggle value on the general sub-builder  
    :type viewLabelToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewQuality: NXOpen.Preferences.GeneralViewQualityOption = ...
    """
    Returns or sets  the view quality option on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewQuality`` 
    
    :returns:  Returns the view quality option that is on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewQualityOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewQuality`` 
    
    :param viewQualityOption:  Sets a new view quality option on the general sub-builder  
    :type viewQualityOption: :py:class:`NXOpen.Preferences.GeneralViewQualityOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewRepresentation: NXOpen.Preferences.GeneralViewRepresentationOption = ...
    """
    Returns or sets  the view representation option on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewRepresentation`` 
    
    :returns:  Returns the view representation option that is on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewRepresentationOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewRepresentation`` 
    
    :param viewRepresentation:  Sets a new view representation option on the general sub-builder  
    :type viewRepresentation: :py:class:`NXOpen.Preferences.GeneralViewRepresentationOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    WireframeColorSource: NXOpen.Preferences.GeneralWireframeColorSourceOption = ...
    """
    Returns or sets  the wireframe color source option on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``WireframeColorSource`` 
    
    :returns:  Returns the wireframe color source option that is on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralWireframeColorSourceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WireframeColorSource`` 
    
    :param wireframeColorSourceOption:  Sets a new wireframe color source option on the general sub-builder  
    :type wireframeColorSourceOption: :py:class:`NXOpen.Preferences.GeneralWireframeColorSourceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleGeneralBuilder = ...  # unknown typename


class AddRemoveBoxViewBuilderModeTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AddRemoveBoxViewBuilderModeType():
    """
    Mode type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Add", "Add mode"
       "Remove", "Remove mode"
    """
    Add = 0  # AddRemoveBoxViewBuilderModeTypeMemberType
    Remove = 1  # AddRemoveBoxViewBuilderModeTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AddRemoveBoxViewBuilder(NXOpen.Builder):
    """
    This class is used to construct the add remove box view Builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateAddRemoveBoxViewBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    class ModeType():
        """
        Mode type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Add", "Add mode"
           "Remove", "Remove mode"
        """
        Add = 0  # AddRemoveBoxViewBuilderModeTypeMemberType
        Remove = 1  # AddRemoveBoxViewBuilderModeTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Mode: AddRemoveBoxViewBuilderModeType = ...
    """
    Returns or sets  the mode type 
    
    <hr>
    
    Getter Method
    
    Signature ``Mode`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.AddRemoveBoxViewBuilderModeType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Mode`` 
    
    :param mode: 
    :type mode: :py:class:`NXOpen.Drawings.AddRemoveBoxViewBuilderModeType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    SelectedView: NXOpen.ModelingView = ...
    """
    Returns or sets  the selected view 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ModelingView` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedView`` 
    
    :param selectedView: 
    :type selectedView: :py:class:`NXOpen.ModelingView` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: AddRemoveBoxViewBuilder = ...  # unknown typename


class ViewCenterCoordinateBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the View center coodinate (Drawings.  
    
    ViewCenterCoordinateBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    XCoordinate: float = ...
    """
    Returns or sets  the X center coordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``XCoordinate`` 
    
    :returns:  returns the center coordinate.  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Drawings.ViewCenterCoordinateBuilder.XCoordinateExp`
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XCoordinate`` 
    
    :param cenwcs:  sets the coordinate.  
    :type cenwcs: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Drawings.ViewCenterCoordinateBuilder.XCoordinateExp`
    
    License requirements: nx_layout ("NX Layout")
    """
    XCoordinateExp: NXOpen.Expression = ...
    """
    Returns  the expression for the X coordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``XCoordinateExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    YCoordinate: float = ...
    """
    Returns or sets  the Y center coordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``YCoordinate`` 
    
    :returns:  returns the center coordinate.  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Drawings.ViewCenterCoordinateBuilder.YCoordinateExp`
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``YCoordinate`` 
    
    :param cenwcs:  sets the coordinate.  
    :type cenwcs: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Drawings.ViewCenterCoordinateBuilder.YCoordinateExp`
    
    License requirements: nx_layout ("NX Layout")
    """
    YCoordinateExp: NXOpen.Expression = ...
    """
    Returns  the expression for the Y coordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``YCoordinateExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    ZCoordinate: float = ...
    """
    Returns or sets  the Z center coordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``ZCoordinate`` 
    
    :returns:  returns the center coordinate.  
    :rtype: float 
    
    .. versionadded:: NX6.0.1
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Drawings.ViewCenterCoordinateBuilder.ZCoordinateExp`
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ZCoordinate`` 
    
    :param cenwcs:  sets the coordinate.  
    :type cenwcs: float 
    
    .. versionadded:: NX6.0.1
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Drawings.ViewCenterCoordinateBuilder.ZCoordinateExp`
    
    License requirements: nx_layout ("NX Layout")
    """
    ZCoordinateExp: NXOpen.Expression = ...
    """
    Returns  the expression for the Z coordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``ZCoordinateExp`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    Null: ViewCenterCoordinateBuilder = ...  # unknown typename


class SheetMarginSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the Drawing Sheet Margins Style Builder.  
    
    .. versionadded:: NX10.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BottomTrimmedMargin: float = ...
    """
    Returns or sets  the bottom margin 
    
    <hr>
    
    Getter Method
    
    Signature ``BottomTrimmedMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BottomTrimmedMargin`` 
    
    :param bottomTrimmedMargin: 
    :type bottomTrimmedMargin: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BottomUntrimmedMargin: float = ...
    """
    Returns or sets  the bottom untrimmed margin 
    
    <hr>
    
    Getter Method
    
    Signature ``BottomUntrimmedMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BottomUntrimmedMargin`` 
    
    :param bottomUntrimmedMargin: 
    :type bottomUntrimmedMargin: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CreateUntrimmedMargins: bool = ...
    """
    Returns or sets  the create untrimmed margins 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateUntrimmedMargins`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateUntrimmedMargins`` 
    
    :param createUntrimmedMargins: 
    :type createUntrimmedMargins: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LeftTrimmedMargin: float = ...
    """
    Returns or sets  the left margin 
    
    <hr>
    
    Getter Method
    
    Signature ``LeftTrimmedMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeftTrimmedMargin`` 
    
    :param leftTrimmedMargin: 
    :type leftTrimmedMargin: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LeftUntrimmedMargin: float = ...
    """
    Returns or sets  the left untrimmed margin 
    
    <hr>
    
    Getter Method
    
    Signature ``LeftUntrimmedMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeftUntrimmedMargin`` 
    
    :param leftUntrimmedMargin: 
    :type leftUntrimmedMargin: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    MarginLineColorFontWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the margin line color, font and width 
    
    <hr>
    
    Getter Method
    
    Signature ``MarginLineColorFontWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    RightTrimmedMargin: float = ...
    """
    Returns or sets  the right margin 
    
    <hr>
    
    Getter Method
    
    Signature ``RightTrimmedMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RightTrimmedMargin`` 
    
    :param rightTrimmedMargin: 
    :type rightTrimmedMargin: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RightUntrimmedMargin: float = ...
    """
    Returns or sets  the right untrimmed margin 
    
    <hr>
    
    Getter Method
    
    Signature ``RightUntrimmedMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RightUntrimmedMargin`` 
    
    :param rightUntrimmedMargin: 
    :type rightUntrimmedMargin: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TopTrimmedMargin: float = ...
    """
    Returns or sets  the top margin 
    
    <hr>
    
    Getter Method
    
    Signature ``TopTrimmedMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TopTrimmedMargin`` 
    
    :param topMargin: 
    :type topMargin: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TopUntrimmedMargin: float = ...
    """
    Returns or sets  the top untrimmed margin 
    
    <hr>
    
    Getter Method
    
    Signature ``TopUntrimmedMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TopUntrimmedMargin`` 
    
    :param topUntrimmedMargin: 
    :type topUntrimmedMargin: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SheetMarginSettingsBuilder = ...  # unknown typename


class ViewStyleVisibleLinesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the VISIBLE LINES tab on the View Style Dialog (Drawings.  
    
    ViewStyleVisibleLinesBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    VisibleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the visible color on the VISIBLE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleColor`` 
    
    :returns:  Returns the visible color that is on the visible lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleColor`` 
    
    :param visibleColor:  Sets new visible color on the visible lines sub-builder  
    :type visibleColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the visible font on the VISIBLE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleFont`` 
    
    :returns:  Returns the visible font that is on the visible lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleFont`` 
    
    :param font:  Sets new visible font on the visible lines sub-builder  
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the visible width on the VISIBLE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleWidth`` 
    
    :returns:  Returns the visible width that is on the visible lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleWidth`` 
    
    :param width:  Sets new visible width on the visible lines sub-builder  
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleVisibleLinesBuilder = ...  # unknown typename


class HiddenLinesViewStyle(NXOpen.Preferences.IHiddenLinesViewPreferences):
    """
    Represents set of Hidden Lines View Style Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.HiddenLines`
    
    .. versionadded:: NX5.0.0
    """
    EdgesHiddenByEdges: bool = ...
    """
    Returns or sets  the staus of edges hidden by edges.  
    
    This allows to control the display of edges 
    which are hidden by other overlapping edges.
    
    <hr>
    
    Getter Method
    
    Signature ``EdgesHiddenByEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EdgesHiddenByEdges`` 
    
    :param edgesHiddenByEdges: 
    :type edgesHiddenByEdges: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Hiddenline: bool = ...
    """
    Returns or sets  the status of hiddenline.  
    
    The status affects the appearance of lines in a member view.
    
    <hr>
    
    Getter Method
    
    Signature ``Hiddenline`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Hiddenline`` 
    
    :param hiddenline: 
    :type hiddenline: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenlineColor: int = ...
    """
    Returns or sets  the color of hiddenline.  
    
    The value should be between 1 and 216. 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenlineColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenlineColor`` 
    
    :param color: 
    :type color: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenlineFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the font of hiddenline 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenlineFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenlineFont`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenlineWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the width of hiddenline 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenlineWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenlineWidth`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeModelCurves: bool = ...
    """
    Returns or sets  the status of include model curves 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeModelCurves`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeModelCurves`` 
    
    :param includeModelCurves: 
    :type includeModelCurves: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InterferingSolids: bool = ...
    """
    Returns or sets  the status of interfering solids.  
    
    This allows the correct rendering of hidden lines 
    in a drawing member view with interfering solids.
    
    <hr>
    
    Getter Method
    
    Signature ``InterferingSolids`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX6.0.0
       Use :py:meth:`Drawings.HiddenLinesViewStyle.InterferingSolidsOption` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferingSolids`` 
    
    :param interferingSolids: 
    :type interferingSolids: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX6.0.0
       Use :py:meth:`Drawings.HiddenLinesViewStyle.InterferingSolidsOption` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    InterferingSolidsOption: NXOpen.Preferences.HiddenLineInterferingSolidsOption = ...
    """
    Returns or sets  the status of interfering solids.  
    
    This allows the correct rendering of hidden lines 
    in a drawing member view with interfering solids.
    
    <hr>
    
    Getter Method
    
    Signature ``InterferingSolidsOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.HiddenLineInterferingSolidsOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferingSolidsOption`` 
    
    :param interferingSolids: 
    :type interferingSolids: :py:class:`NXOpen.Preferences.HiddenLineInterferingSolidsOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ReferenceEdgesOnly: bool = ...
    """
    Returns or sets  the status of reference edges only.  
    
    This controls the rendering of hidden edges with 
    annotation. If True, only hidden edges referencing annotations are rendered.
    Hidden edges not referenced by annotation are not rendered.
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceEdgesOnly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceEdgesOnly`` 
    
    :param referenceEdgesOnly: 
    :type referenceEdgesOnly: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelfHidden: bool = ...
    """
    Returns or sets  the status of self hidden.  
    
    This allows the rendering of edges hidden by 
    their own solid in the selected hidden line color, font, and width settings. If False, 
    the hidden line processing only processes the lines hidden by other solids.
    
    <hr>
    
    Getter Method
    
    Signature ``SelfHidden`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelfHidden`` 
    
    :param selfHidden: 
    :type selfHidden: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmallFeature: NXOpen.Preferences.HiddenLineSmallFeatureOption = ...
    """
    Returns or sets  the small feature option.  
    
    This allows the simplification or removal of rendering of small features 
    in large scale assembly drawings. Not all small features are considered for simplified rendering. 
    Only if the boundary of a small feature lies completely within a face of the model is the small 
    feature's display modified.
    
    <hr>
    
    Getter Method
    
    Signature ``SmallFeature`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.HiddenLineSmallFeatureOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmallFeature`` 
    
    :param smallFeature: 
    :type smallFeature: :py:class:`NXOpen.Preferences.HiddenLineSmallFeatureOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmallFeaturesTolerance: float = ...
    """
    Returns or sets  the value of small features tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmallFeaturesTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmallFeaturesTolerance`` 
    
    :param smallFeaturesTolerance: 
    :type smallFeaturesTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class ReferenceShowTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ReferenceShowTypes():
    """
    reference show type
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SheetandZone", " - "
       "Sheet", " - "
       "Zone", " - "
    """
    SheetandZone = 0  # ReferenceShowTypesMemberType
    Sheet = 1  # ReferenceShowTypesMemberType
    Zone = 2  # ReferenceShowTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingView(DraftingView):
    """
    Drawing View - an empty view created without any geometric objects.  
    
    A drawing view can be used to create sketches in, or create view-dependent 
    geometry while in the expanded mode. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.DrawingViewBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: DrawingView = ...  # unknown typename


class MultipleViewPlacementBuilderOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MultipleViewPlacementBuilderOption():
    """
    The placement option type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Center", "By Center"
       "Corners", "By Corners"
    """
    Center = 0  # MultipleViewPlacementBuilderOptionMemberType
    Corners = 1  # MultipleViewPlacementBuilderOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MultipleViewPlacementBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This builder allows the user to create a Multiple View Placement   
    
    .. versionadded:: NX6.0.2
    """
    
    class Option():
        """
        The placement option type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Center", "By Center"
           "Corners", "By Corners"
        """
        Center = 0  # MultipleViewPlacementBuilderOptionMemberType
        Corners = 1  # MultipleViewPlacementBuilderOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AssociativeAlignment: bool = ...
    """
    Returns or sets  the associative alignment toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativeAlignment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``AssociativeAlignment`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    OptionType: MultipleViewPlacementBuilderOption = ...
    """
    Returns or sets  the placement option 
    
    <hr>
    
    Getter Method
    
    Signature ``OptionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.MultipleViewPlacementBuilderOption` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptionType`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.Drawings.MultipleViewPlacementBuilderOption` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    ViewPlacementCenter: ViewPlacementBuilder = ...
    """
    Returns  the view placement block for the center option 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewPlacementCenter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    ViewPlacementFirstCorner: ViewPlacementBuilder = ...
    """
    Returns  the view placement block for the first corner 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewPlacementFirstCorner`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    ViewPlacementSecondCorner: ViewPlacementBuilder = ...
    """
    Returns  the view placement block for the second corner 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewPlacementSecondCorner`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    Null: MultipleViewPlacementBuilder = ...  # unknown typename


class SectionLineSegmentPointListBuilder(NXOpen.TaggedObject):
    """
    Represents SectionLineSegmentPointListBuilder class.  
    
    This class maintains a list of :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` objects
    and manages them.
    
    .. versionadded:: NX10.0.0
    """
    
    def CreateSectionLineSegmentPointBuilder(self) -> SectionLineSegmentPointBuilder:
        """
        Creates a new :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` object  
        
        Signature ``CreateSectionLineSegmentPointBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def AddCutSegment(self, location: NXOpen.Point) -> SectionLineSegmentPointBuilder:
        """
        Creates a new :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` object  
        
        Signature ``AddCutSegment(location)`` 
        
        :param location: 
        :type location: :py:class:`NXOpen.Point` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def AddCutSegment(self, location: NXOpen.Point, referencedCutSegment: SectionLineSegmentPointBuilder) -> SectionLineSegmentPointBuilder:
        """
        Creates a new :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder`
        In case of point to point section line ,new segment is added at location prior to reference cut segment specified.
        If reference cut segment is not specified , new segment is added prior to last arrow segment. 
        
        Signature ``AddCutSegment(location, referencedCutSegment)`` 
        
        :param location: 
        :type location: :py:class:`NXOpen.Point` 
        :param referencedCutSegment: reference SectionLineSegmentPointBuilder  
        :type referencedCutSegment: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Append(self, pointData: SectionLineSegmentPointBuilder) -> None:
        """
        Appends :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` object to the end of the list 
        
        Signature ``Append(pointData)`` 
        
        :param pointData: 
        :type pointData: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Insert(self, insertBeforeIndex: int, point: SectionLineSegmentPointBuilder) -> None:
        """
        Inserts :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` object in the list
        before a given position 
        
        Signature ``Insert(insertBeforeIndex, point)`` 
        
        :param insertBeforeIndex: 
        :type insertBeforeIndex: int 
        :param point: 
        :type point: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    @typing.overload
    def Delete(self, point: SectionLineSegmentPointBuilder) -> None:
        """
        Deletes a given :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` object from the list 
        
        Signature ``Delete(point)`` 
        
        :param point: 
        :type point: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    @typing.overload
    def Delete(self, index: int) -> None:
        """
        Deletes :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` object of a certain index from the list 
        
        Signature ``Delete(index)`` 
        
        :param index: 
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Deletes all :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` objects from the list 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetContents(self) -> 'list[SectionLineSegmentPointBuilder]':
        """
        Queries all the :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` objects  
        
        Signature ``GetContents()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetContents(self, points: 'list[SectionLineSegmentPointBuilder]') -> None:
        """
        Sets array of :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` objects in the list.  
        
        Signature ``SetContents(points)`` 
        
        :param points: 
        :type points: list of :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindItem(self, index: int) -> SectionLineSegmentPointBuilder:
        """
        Returns :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` object at the input index.  
        
        May be NULL if not found.  
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetIndex(self, point: SectionLineSegmentPointBuilder) -> int:
        """
        Finds index of :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` object in the list  
        
        Signature ``GetIndex(point)`` 
        
        :param point: 
        :type point: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        :returns:  Equals -1 if not found  
        :rtype: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def MoveSegment(self, point: SectionLineSegmentPointBuilder, pointspecified: NXOpen.Point) -> None:
        """
        Moves a given :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` object from the list 
        
        Signature ``MoveSegment(point, pointspecified)`` 
        
        :param point: 
        :type point: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` 
        :param pointspecified: 
        :type pointspecified: :py:class:`NXOpen.Point` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Length: int = ...
    """
    Returns  the number of :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilder` objects in the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SectionLineSegmentPointListBuilder = ...  # unknown typename


class SectionView(DraftingView):
    """
    Represents a Section View.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SectionViewBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: SectionView = ...  # unknown typename


class SmoothEdgesViewStyle(NXOpen.Preferences.ISmoothEdgesViewPreferences):
    """
    Represents set of Smooth Edges View Style Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.SmoothEdges`
    
    .. versionadded:: NX5.0.0
    """
    SmoothEdge: bool = ...
    """
    Returns or sets  the status of smooth edge.  
    
    If True then it enables the smooth edge options. 
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdge`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdge`` 
    
    :param smoothEdge: 
    :type smoothEdge: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeColor: int = ...
    """
    Returns or sets  the color of smooth edge.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeColor`` 
    
    :param smoothEdgeColor: 
    :type smoothEdgeColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeEndGaps: bool = ...
    """
    Returns or sets  the status of smooth edge end gaps.  
    
    If True, the visible ends are suppressed from the display.
    The length of the suppressed end is in drawing units and is controlled by the value set in 
    the End Gap field. If False, the visible ends are not suppressed from the display.
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeEndGaps`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeEndGaps`` 
    
    :param smoothEdgeEndGaps: 
    :type smoothEdgeEndGaps: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeEndGapsData: float = ...
    """
    Returns or sets  the value of smooth edge end gaps.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeEndGapsData`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeEndGapsData`` 
    
    :param smoothEdgeEndGapsData: 
    :type smoothEdgeEndGapsData: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the font of smooth edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeFont`` 
    
    :param smoothEdgeFont: 
    :type smoothEdgeFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeTolerance: bool = ...
    """
    Returns or sets  the status of smooth edge angle tolerance.  
    
    If True, the value set in 
    the Tolerance Data field is used. If False, the system default tolerance is used.
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeTolerance`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeTolerance`` 
    
    :param smoothEdgeTolerance: 
    :type smoothEdgeTolerance: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeToleranceData: float = ...
    """
    Returns or sets  the value of smooth edge angle tolerance in degrees.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeToleranceData`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeToleranceData`` 
    
    :param smoothEdgeToleranceData: 
    :type smoothEdgeToleranceData: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the width of smooth edge.  
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeWidth`` 
    
    :param smoothEdgeWidth: 
    :type smoothEdgeWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class PointAndAngleSectionLineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.PointAndAngleSectionLineBuilder`.  
    
    This class is used to create or edit a
    :py:class:`NXOpen.Drawings.PointAndAngleSectionLine`. 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndLocation1: NXOpen.Point = ...
    """
    Returns or sets  the end location 1 which determines the position of the
    first arrow segment in the section line.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation1`` 
    
    :param endLocation1: 
    :type endLocation1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: drafting ("DRAFTING")
    """
    EndLocation2: NXOpen.Point = ...
    """
    Returns or sets  the end location 2 which determines the position of the
    second arrow segment in the section line 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation2`` 
    
    :param endLocation2: 
    :type endLocation2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: drafting ("DRAFTING")
    """
    Leg1: SectionLineSegmentBuilderList = ...
    """
    Returns  the list of cut segments.  
    
    The list will contain :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder`
    segments of type :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes.Angle <NXOpen.Drawings.SectionLineSegmentBuilderTypes>` only.
    
    Note that the segments are added in the order that they appear in this list. 
    
    <hr>
    
    Getter Method
    
    Signature ``Leg1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    """
    Null: PointAndAngleSectionLineBuilder = ...  # unknown typename


class SelectDrawingRegion(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: DrawingRegion) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingRegion` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: DrawingRegion) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingRegion` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: DrawingRegion, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingRegion` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: DrawingRegion, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: DrawingRegion, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Drawings.DrawingRegion` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Drawings.DrawingRegion` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: DrawingRegion, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingRegion` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> DrawingRegion:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Drawings.DrawingRegion` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: DrawingRegion) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingRegion` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Drawings.DrawingRegion`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Drawings.DrawingRegion`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Drawings.DrawingRegion`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Drawings.DrawingRegion`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: DrawingRegion = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Drawings.DrawingRegion` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Drawings.DrawingRegion` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectDrawingRegion = ...  # unknown typename


class ScaleValueFormatTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScaleValueFormatTypes():
    """
    scale value format type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ratio", " - "
       "CommonFraction", " - "
       "SingleLineFraction", " - "
       "Nx", " - "
    """
    Ratio = 0  # ScaleValueFormatTypesMemberType
    CommonFraction = 1  # ScaleValueFormatTypesMemberType
    SingleLineFraction = 2  # ScaleValueFormatTypesMemberType
    Nx = 3  # ScaleValueFormatTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCreationWizardBuilderOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCreationWizardBuilderOption():
    """
    The placement option type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "By Automatic"
       "Manual", "By Manual"
    """
    Automatic = 0  # ViewCreationWizardBuilderOptionMemberType
    Manual = 1  # ViewCreationWizardBuilderOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCreationWizardBuilderViewBoundaryOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCreationWizardBuilderViewBoundaryOption():
    """
    The view boundary option type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "view boundary Automatic"
       "Manual", "view boundary Manual"
    """
    Automatic = 0  # ViewCreationWizardBuilderViewBoundaryOptionMemberType
    Manual = 1  # ViewCreationWizardBuilderViewBoundaryOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCreationWizardBuilderResolutionOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCreationWizardBuilderResolutionOption():
    """
    the view resolution option type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Coarse", "view display quality Coarse"
       "Medium", "view display quality Medium"
       "Fine", "view display quality Fine"
    """
    Coarse = 0  # ViewCreationWizardBuilderResolutionOptionMemberType
    Medium = 1  # ViewCreationWizardBuilderResolutionOptionMemberType
    Fine = 2  # ViewCreationWizardBuilderResolutionOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCreationWizardBuilderViewRepresentationsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCreationWizardBuilderViewRepresentations():
    """
    the view representation mode 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Exact", "View representation mode Exact"
       "SmartLightweight", "View representation mode Lightweight"
       "Lightweight", "View representation mode legacy Lightweight"
       "PreNx85Exact", "View representation mode legacy Exact"
    """
    Exact = 0  # ViewCreationWizardBuilderViewRepresentationsMemberType
    SmartLightweight = 1  # ViewCreationWizardBuilderViewRepresentationsMemberType
    Lightweight = 2  # ViewCreationWizardBuilderViewRepresentationsMemberType
    PreNx85Exact = 3  # ViewCreationWizardBuilderViewRepresentationsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCreationWizardBuilder(NXOpen.Builder):
    """
    This builder allows the user to create a Drawing View   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateViewCreationWizardBuilder`
    
    Default values.
    
    ==========================================================  ==========================================
    Property                                                    Value
    ==========================================================  ==========================================
    AutoScale                                                   1 
    ----------------------------------------------------------  ------------------------------------------
    BackView                                                    0 
    ----------------------------------------------------------  ------------------------------------------
    BaseView                                                    FRONT 
    ----------------------------------------------------------  ------------------------------------------
    BottomView                                                  0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.DelayUpdateOnCreation             0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.DelayViewUpdate                   1 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.HiddenLinesFont                   Invisible 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.InterferingSolids                 None 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.RenderTrueHiddenLine              0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowAdjacentBlends                0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowCenterLines                   0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowCheckBoundaryStatus           0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowEdgesHiddenByEdges            1 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowHiddenLines                   1 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowSelfHiddenLines               1 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowSmoothEdgeEndGapsLock         0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowSmoothEdges                   1 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowTraceLines                    0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowUVGrids                       0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowVIEndGapsLock                 0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ShowVirtualIntersections          0 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.SmallFeatures                     Hide 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.ThreadStandard                    None 
    ----------------------------------------------------------  ------------------------------------------
    CustomViewSettingsBuilder.TraceLineCreateGapsLock           0 
    ----------------------------------------------------------  ------------------------------------------
    ExtractedEdges                                              1 
    ----------------------------------------------------------  ------------------------------------------
    FrontView                                                   1 
    ----------------------------------------------------------  ------------------------------------------
    IgnoreTitleBlock                                            0 
    ----------------------------------------------------------  ------------------------------------------
    IsometricView                                               0 
    ----------------------------------------------------------  ------------------------------------------
    LeftView                                                    0 
    ----------------------------------------------------------  ------------------------------------------
    LockMethod                                                  None 
    ----------------------------------------------------------  ------------------------------------------
    MarginBetweenViews                                          5 (millimeters part), 0.25 (inches part) 
    ----------------------------------------------------------  ------------------------------------------
    MarginToBorder                                              20 (millimeters part), 0.75 (inches part) 
    ----------------------------------------------------------  ------------------------------------------
    MultipleViewPlacement.OptionType                            Center 
    ----------------------------------------------------------  ------------------------------------------
    MultipleViewPlacement.ViewPlacementCenter.AlignmentMethod   Infer 
    ----------------------------------------------------------  ------------------------------------------
    MultipleViewPlacement.ViewPlacementCenter.AlignmentOption   ToView 
    ----------------------------------------------------------  ------------------------------------------
    OptimizeSettings                                            1 
    ----------------------------------------------------------  ------------------------------------------
    OrientViewTool.AssociativeOrientation                       0 
    ----------------------------------------------------------  ------------------------------------------
    PlacementOption                                             Automatic 
    ----------------------------------------------------------  ------------------------------------------
    RightView                                                   0 
    ----------------------------------------------------------  ------------------------------------------
    SnapShot (deprecated)                                       0 
    ----------------------------------------------------------  ------------------------------------------
    TopView                                                     0 
    ----------------------------------------------------------  ------------------------------------------
    TrimetricView                                               0 
    ----------------------------------------------------------  ------------------------------------------
    ViewBoundary                                                Automatic 
    ----------------------------------------------------------  ------------------------------------------
    ViewRepresentation                                          SmartLightweight 
    ----------------------------------------------------------  ------------------------------------------
    ViewScale.Denominator                                       1.0 
    ----------------------------------------------------------  ------------------------------------------
    ViewScale.Numerator                                         1.0 
    ----------------------------------------------------------  ------------------------------------------
    ViewScale.ScaleType                                         Ratio 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleGeneral.AngleSetting.Angle.Value         0 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleGeneral.AngleSetting.Associative         0 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleGeneral.AngleSetting.EvaluationPlane     DrawingSheet 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleOrientation.HingeLine.ReverseDirection   false 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleOrientation.HingeLine.VectorOption       Inferred 
    ==========================================================  ==========================================
    
    .. versionadded:: NX8.0.0
    """
    
    class Option():
        """
        The placement option type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "By Automatic"
           "Manual", "By Manual"
        """
        Automatic = 0  # ViewCreationWizardBuilderOptionMemberType
        Manual = 1  # ViewCreationWizardBuilderOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewBoundaryOption():
        """
        The view boundary option type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "view boundary Automatic"
           "Manual", "view boundary Manual"
        """
        Automatic = 0  # ViewCreationWizardBuilderViewBoundaryOptionMemberType
        Manual = 1  # ViewCreationWizardBuilderViewBoundaryOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ResolutionOption():
        """
        the view resolution option type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Coarse", "view display quality Coarse"
           "Medium", "view display quality Medium"
           "Fine", "view display quality Fine"
        """
        Coarse = 0  # ViewCreationWizardBuilderResolutionOptionMemberType
        Medium = 1  # ViewCreationWizardBuilderResolutionOptionMemberType
        Fine = 2  # ViewCreationWizardBuilderResolutionOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ViewRepresentations():
        """
        the view representation mode 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Exact", "View representation mode Exact"
           "SmartLightweight", "View representation mode Lightweight"
           "Lightweight", "View representation mode legacy Lightweight"
           "PreNx85Exact", "View representation mode legacy Exact"
        """
        Exact = 0  # ViewCreationWizardBuilderViewRepresentationsMemberType
        SmartLightweight = 1  # ViewCreationWizardBuilderViewRepresentationsMemberType
        Lightweight = 2  # ViewCreationWizardBuilderViewRepresentationsMemberType
        PreNx85Exact = 3  # ViewCreationWizardBuilderViewRepresentationsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AssociativeAlignment: bool = ...
    """
    Returns or sets  the associative alignment toggle 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativeAlignment`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociativeAlignment`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AutoScale: bool = ...
    """
    Returns or sets  the auto scale 
    
    <hr>
    
    Getter Method
    
    Signature ``AutoScale`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoScale`` 
    
    :param autoScale: 
    :type autoScale: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BackView: bool = ...
    """
    Returns or sets  the back view 
    
    <hr>
    
    Getter Method
    
    Signature ``BackView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BackView`` 
    
    :param backView: 
    :type backView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BaseView: str = ...
    """
    Returns or sets  the base view 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseView`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseView`` 
    
    :param baseView: 
    :type baseView: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BottomView: bool = ...
    """
    Returns or sets  the bottom view 
    
    <hr>
    
    Getter Method
    
    Signature ``BottomView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BottomView`` 
    
    :param bottomView: 
    :type bottomView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CenterLines: bool = ...
    """
    Returns or sets  the center lines 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterLines`` 
    
    :param centerLines: 
    :type centerLines: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CrosshatchInheritedSectionViews: bool = ...
    """
    Returns or sets  the crosshatch inherited section views 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchInheritedSectionViews`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchInheritedSectionViews`` 
    
    :param crosshatchInheritedSectionViews: 
    :type crosshatchInheritedSectionViews: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CustomViewSettingsBuilder: CustomViewSettingsBuilder = ...
    """
    Returns  the :py:class:`NXOpen.Drawings.CustomViewSettingsBuilder` object 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomViewSettingsBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilder` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    """
    ExtractedEdges: bool = ...
    """
    Returns or sets  the extracted edges option 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtractedEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtractedEdges`` 
    
    :param extractedEdges: 
    :type extractedEdges: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    FrontView: bool = ...
    """
    Returns or sets  the front view 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontView`` 
    
    :param frontView: 
    :type frontView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLineColor: int = ...
    """
    Returns or sets  the hidden line color 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLineColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLineColor`` 
    
    :param hiddenLineColor: 
    :type hiddenLineColor: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLineFont: int = ...
    """
    Returns or sets  the hidden line font 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLineFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLineFont`` 
    
    :param hiddenLineFont: 
    :type hiddenLineFont: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLineWidth: int = ...
    """
    Returns or sets  the hidden line width 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLineWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLineWidth`` 
    
    :param hiddenLineWidth: 
    :type hiddenLineWidth: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLines: bool = ...
    """
    Returns or sets  the hidden lines 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLines`` 
    
    :param hiddenLines: 
    :type hiddenLines: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IgnoreTitleBlock: bool = ...
    """
    Returns or sets  the ignore title block 
    
    <hr>
    
    Getter Method
    
    Signature ``IgnoreTitleBlock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IgnoreTitleBlock`` 
    
    :param ignoreTitleBlock: 
    :type ignoreTitleBlock: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    InheritPMI: int = ...
    """
    Returns or sets  the inherit pmi 
    
    <hr>
    
    Getter Method
    
    Signature ``InheritPMI`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritPMI`` 
    
    :param inheritPMI: 
    :type inheritPMI: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InheritPmiOntoDrawing: bool = ...
    """
    Returns or sets  the inherit pmi onto drawing 
    
    <hr>
    
    Getter Method
    
    Signature ``InheritPmiOntoDrawing`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritPmiOntoDrawing`` 
    
    :param inheritPmiOntoDrawing: 
    :type inheritPmiOntoDrawing: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IsometricView: bool = ...
    """
    Returns or sets  the isometric view 
    
    <hr>
    
    Getter Method
    
    Signature ``IsometricView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IsometricView`` 
    
    :param isometricView: 
    :type isometricView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LeftView: bool = ...
    """
    Returns or sets  the left view 
    
    <hr>
    
    Getter Method
    
    Signature ``LeftView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeftView`` 
    
    :param leftView: 
    :type leftView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LockMethod: NXOpen.Preferences.GeneralViewLockmethodOption = ...
    """
    Returns or sets  the lock method option 
    
    <hr>
    
    Getter Method
    
    Signature ``LockMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewLockmethodOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockMethod`` 
    
    :param lockMethod: 
    :type lockMethod: :py:class:`NXOpen.Preferences.GeneralViewLockmethodOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    MarginBetweenViews: float = ...
    """
    Returns or sets  the margin between views 
    
    <hr>
    
    Getter Method
    
    Signature ``MarginBetweenViews`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarginBetweenViews`` 
    
    :param marginBetweenViews: 
    :type marginBetweenViews: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    MarginToBorder: float = ...
    """
    Returns or sets  the margin to border 
    
    <hr>
    
    Getter Method
    
    Signature ``MarginToBorder`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarginToBorder`` 
    
    :param marginToBorder: 
    :type marginToBorder: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    MultipleViewPlacement: MultipleViewPlacementBuilder = ...
    """
    Returns  the multiple view placement 
    
    <hr>
    
    Getter Method
    
    Signature ``MultipleViewPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.MultipleViewPlacementBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    OptimizeSettings: bool = ...
    """
    Returns or sets  the optimize view settings 
    
    <hr>
    
    Getter Method
    
    Signature ``OptimizeSettings`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OptimizeSettings`` 
    
    :param optimizeSettings: 
    :type optimizeSettings: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    OrientViewTool: OvtBuilder = ...
    """
    Returns  the orient view tool 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientViewTool`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.OvtBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Part: NXOpen.Part = ...
    """
    Returns or sets  the part 
    
    <hr>
    
    Getter Method
    
    Signature ``Part`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``Part`` 
    
    :param part: 
    :type part: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PlacementOption: ViewCreationWizardBuilderOption = ...
    """
    Returns or sets  the placement option 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCreationWizardBuilderOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementOption`` 
    
    :param placementOption: 
    :type placementOption: :py:class:`NXOpen.Drawings.ViewCreationWizardBuilderOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PmiDimensionFromRevolved: bool = ...
    """
    Returns or sets  the inherit pmi from revolved sketches 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiDimensionFromRevolved`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiDimensionFromRevolved`` 
    
    :param pmiDimensionFromRevolved: 
    :type pmiDimensionFromRevolved: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PmiTypes: int = ...
    """
    Returns or sets  the pmi types 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiTypes`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiTypes`` 
    
    :param pmiTypes: 
    :type pmiTypes: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Resolution: ViewCreationWizardBuilderResolutionOption = ...
    """
    Returns or sets  the display quality option 
    
    <hr>
    
    Getter Method
    
    Signature ``Resolution`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCreationWizardBuilderResolutionOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Resolution`` 
    
    :param resolution: 
    :type resolution: :py:class:`NXOpen.Drawings.ViewCreationWizardBuilderResolutionOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    RightView: bool = ...
    """
    Returns or sets  the right view 
    
    <hr>
    
    Getter Method
    
    Signature ``RightView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RightView`` 
    
    :param rightView: 
    :type rightView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Silhouettes: bool = ...
    """
    Returns or sets  the silhouettes 
    
    <hr>
    
    Getter Method
    
    Signature ``Silhouettes`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Silhouettes`` 
    
    :param silhouettes: 
    :type silhouettes: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SnapShot: bool = ...
    """
    Returns or sets  the snapshot option 
    
    <hr>
    
    Getter Method
    
    Signature ``SnapShot`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.ViewCreationWizardBuilder.get_LockMethod` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SnapShot`` 
    
    :param snapShot: 
    :type snapShot: bool 
    
    .. versionadded:: NX8.5.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.ViewCreationWizardBuilder.set_LockMethod` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SpecialBaseView: bool = ...
    """
    Returns or sets  the special base view 
    
    <hr>
    
    Getter Method
    
    Signature ``SpecialBaseView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecialBaseView`` 
    
    :param specialBaseView: 
    :type specialBaseView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Tolerance: float = ...
    """
    Returns or sets  the tolerance option 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    TopView: bool = ...
    """
    Returns or sets  the top view 
    
    <hr>
    
    Getter Method
    
    Signature ``TopView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TopView`` 
    
    :param topView: 
    :type topView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TrimetricView: bool = ...
    """
    Returns or sets  the trimetric view 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimetricView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimetricView`` 
    
    :param trimetricView: 
    :type trimetricView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewBoundary: ViewCreationWizardBuilderViewBoundaryOption = ...
    """
    Returns or sets  the view boundary option 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCreationWizardBuilderViewBoundaryOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewBoundary`` 
    
    :param viewBoundaryOption: 
    :type viewBoundaryOption: :py:class:`NXOpen.Drawings.ViewCreationWizardBuilderViewBoundaryOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewLabels: bool = ...
    """
    Returns or sets  the view labels 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewLabels`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewLabels`` 
    
    :param dispViewLabels: 
    :type dispViewLabels: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewRepresentation: ViewCreationWizardBuilderViewRepresentations = ...
    """
    Returns or sets  the view representation state 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewRepresentation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCreationWizardBuilderViewRepresentations` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewRepresentation`` 
    
    :param viewRepresentation: 
    :type viewRepresentation: :py:class:`NXOpen.Drawings.ViewCreationWizardBuilderViewRepresentations` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewScale: ViewScaleBuilder = ...
    """
    Returns  the view scale 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewScale`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewScaleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    ViewStyle: ViewStyleBuilder = ...
    """
    Returns  the view style 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: ViewCreationWizardBuilder = ...  # unknown typename


class ViewStyleBaseBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the BASE tab on the View Style Dialog (Drawings.  
    
    ViewStyleBaseBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Arrangement: NXOpen.Assemblies.ArrangementsBuilder = ...
    """
    Returns  the arrangement on the BASE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Arrangement`` 
    
    :returns:  Returns the arrangement that is on the base sub-builder  
    :rtype: :py:class:`NXOpen.Assemblies.ArrangementsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ArrangementName: str = ...
    """
    Returns or sets  the arrangement name on the BASE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrangementName`` 
    
    :returns:  Returns the arrangement name that is on the base sub-builder  
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrangementName`` 
    
    :param arrangementName:  Sets a new arrangement name on the base sub-builder  
    :type arrangementName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FacetedRepresentation: bool = ...
    """
    Returns or sets  the faceted representation toggle on the BASE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``FacetedRepresentation`` 
    
    :returns:  Returns the faceted representation toggle value that is on the base sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX8.5.1
       Use :py:meth:`Drawings.ViewStyleGeneralBuilder.ViewRepresentation` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FacetedRepresentation`` 
    
    :param facetedRepresentationToggle:  Sets a new faceted representation toggle value on the base sub-builder  
    :type facetedRepresentationToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX8.5.1
       Use :py:meth:`Drawings.ViewStyleGeneralBuilder.ViewRepresentation` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    InheritClippingBoundary: bool = ...
    """
    Returns or sets  the inherit clipping boundary toggle on the BASE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``InheritClippingBoundary`` 
    
    :returns:  Returns the inherit clipping boundary toggle value that is on the base sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InheritClippingBoundary`` 
    
    :param inheritClippingBoundaryToggle:  Sets a new inherit clipping boundary toggle value on the base sub-builder  
    :type inheritClippingBoundaryToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Part: NXOpen.Part = ...
    """
    Returns or sets  the part on the BASE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Part`` 
    
    :returns:  Returns the part that is on the base sub-builder  
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Part`` 
    
    :param part:  Sets a new part on the base sub-builder  
    :type part: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PartName: str = ...
    """
    Returns or sets  the part name on the BASE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``PartName`` 
    
    :returns:  Returns the part name that is on the base sub-builder  
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartName`` 
    
    :param partName:  Sets a new part name on the base sub-builder  
    :type partName: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TransferAnnotation: bool = ...
    """
    Returns or sets  the transfer annotation toggle on the BASE tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``TransferAnnotation`` 
    
    :returns:  Returns the transfer annotation toggle value that is on the base sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TransferAnnotation`` 
    
    :param transferAnnotationToggle:  Sets a new transfer annotation toggle value on the base sub-builder  
    :type transferAnnotationToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleBaseBuilder = ...  # unknown typename


class LetterFormatTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LetterFormatTypes():
    """
    letter format type
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "A", " - "
       "AA", " - "
       "AA1", " - "
    """
    A = 0  # LetterFormatTypesMemberType
    AA = 1  # LetterFormatTypesMemberType
    AA1 = 2  # LetterFormatTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DetailView(DraftingView):
    """
    Represents a Detail View.  
    
    A detail view is a view which contains an enlarged portion of an already
    existing drawing view. The enlarged detail view shows detail which is not
    apparent in the view from which the detail was made. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.DetailViewBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def LogUpdate(self, reason: int) -> None:
        """
        Notify detail view update.  
        
        Signature ``LogUpdate(reason)`` 
        
        :param reason:     
        :type reason: int 
        
        .. versionadded:: NX7.5.0
        
        License requirements: None.
        """
        ...
    
    Null: DetailView = ...  # unknown typename


class BaseSteppedSectionLine(SectionLine):
    """
    Represents a Base Stepped Section Line.  
    
    This is an abstract class that cannot be instantiated
    
    .. versionadded:: NX10.0.0
    """
    Null: BaseSteppedSectionLine = ...  # unknown typename


class ConversionProcessSettingsBuilderActionOnErrorEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConversionProcessSettingsBuilderActionOnErrorEnum():
    """
    enum is used to list out different Action on error types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SkipObjectAndContinue", " - "
       "StopProcessingAfterLimit", " - "
       "StopProcessing", " - "
    """
    SkipObjectAndContinue = 0  # ConversionProcessSettingsBuilderActionOnErrorEnumMemberType
    StopProcessingAfterLimit = 1  # ConversionProcessSettingsBuilderActionOnErrorEnumMemberType
    StopProcessing = 2  # ConversionProcessSettingsBuilderActionOnErrorEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConversionProcessSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Drawings.ConversionProcessSettingsBuilder`.  
    
    This class queries and sets settings specific to drafting data which will get converted to PMIs.
    
    .. versionadded:: NX11.0.0
    """
    
    class ActionOnErrorEnum():
        """
        enum is used to list out different Action on error types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SkipObjectAndContinue", " - "
           "StopProcessingAfterLimit", " - "
           "StopProcessing", " - "
        """
        SkipObjectAndContinue = 0  # ConversionProcessSettingsBuilderActionOnErrorEnumMemberType
        StopProcessingAfterLimit = 1  # ConversionProcessSettingsBuilderActionOnErrorEnumMemberType
        StopProcessing = 2  # ConversionProcessSettingsBuilderActionOnErrorEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ActionOnError: ConversionProcessSettingsBuilderActionOnErrorEnum = ...
    """
    Returns or sets  the action on error 
    
    <hr>
    
    Getter Method
    
    Signature ``ActionOnError`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ConversionProcessSettingsBuilderActionOnErrorEnum` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionOnError`` 
    
    :param actionOnError: 
    :type actionOnError: :py:class:`NXOpen.Drawings.ConversionProcessSettingsBuilderActionOnErrorEnum` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ConfigurationFile: str = ...
    """
    Returns or sets  the configuration file browser 
    
    <hr>
    
    Getter Method
    
    Signature ``ConfigurationFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConfigurationFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CreateInMasterModelPart: bool = ...
    """
    Returns or sets  the create in master model part option 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateInMasterModelPart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateInMasterModelPart`` 
    
    :param createInMasterModelPart: 
    :type createInMasterModelPart: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ErrorLimit: int = ...
    """
    Returns or sets  the error limit integer 
    
    <hr>
    
    Getter Method
    
    Signature ``ErrorLimit`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ErrorLimit`` 
    
    :param errorLimit: 
    :type errorLimit: int 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    JTGeometryTolerance: float = ...
    """
    Returns or sets  the geometry tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``JTGeometryTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JTGeometryTolerance`` 
    
    :param geometryTolerance: 
    :type geometryTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    JTPartNameAttribute: str = ...
    """
    Returns or sets  the JT part name 
    
    <hr>
    
    Getter Method
    
    Signature ``JTPartNameAttribute`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``JTPartNameAttribute`` 
    
    :param partNameAttribute: 
    :type partNameAttribute: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LogFileLocation: str = ...
    """
    Returns or sets  the log file location folder 
    
    <hr>
    
    Getter Method
    
    Signature ``LogFileLocation`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LogFileLocation`` 
    
    :param foldername: 
    :type foldername: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    MultiCADAssembly: bool = ...
    """
    Returns or sets  the multi-CAD assembly 
    
    <hr>
    
    Getter Method
    
    Signature ``MultiCADAssembly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MultiCADAssembly`` 
    
    :param multiCADAssembly: 
    :type multiCADAssembly: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SaveAsLocation: str = ...
    """
    Returns or sets  the save as file browser 
    
    <hr>
    
    Getter Method
    
    Signature ``SaveAsLocation`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SaveAsLocation`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SourcePartNameAttribute: str = ...
    """
    Returns or sets  the Source part name 
    
    <hr>
    
    Getter Method
    
    Signature ``SourcePartNameAttribute`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SourcePartNameAttribute`` 
    
    :param partNameAttribute: 
    :type partNameAttribute: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    StoreLogFileInTeamCenter: bool = ...
    """
    Returns or sets  the store log file in teamcenter 
    
    <hr>
    
    Getter Method
    
    Signature ``StoreLogFileInTeamCenter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StoreLogFileInTeamCenter`` 
    
    :param storeLogFileInTeamCenter: 
    :type storeLogFileInTeamCenter: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ConversionProcessSettingsBuilder = ...  # unknown typename


class ViewOrientationBuilderOrientationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewOrientationBuilderOrientation():
    """
    This enum represents view orientation type.  
    :py:class:`Drawings.ViewOrientationBuilderOrientation.InheritOrientation <Drawings.ViewOrientationBuilderOrientation>` and :py:class:`Drawings.ViewOrientationBuilderOrientation.SectionExisting <Drawings.ViewOrientationBuilderOrientation>` options require a view selection.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Orthographic", "Orthographic"
       "InheritOrientation", "Inherit Orientation from a View"
       "UseParentOrientation", "Use Parent View Orientation"
       "UseParentOrienation", "DO NOT USE Deprecated as of NX75"
       "SectionExisting", "Section an Existing View"
    """
    Orthographic = 0  # ViewOrientationBuilderOrientationMemberType
    InheritOrientation = 1  # ViewOrientationBuilderOrientationMemberType
    UseParentOrientation = 2  # ViewOrientationBuilderOrientationMemberType
    UseParentOrienation = 2  # ViewOrientationBuilderOrientationMemberType
    SectionExisting = 3  # ViewOrientationBuilderOrientationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewOrientationBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a ViewOrientationBuilder.  
    
    The View Orientation Block is used to specify orientation of the view, and 
    the view being inherited or sectioned, if needed.
    
    .. versionadded:: NX6.0.0
    """
    
    class Orientation():
        """
        This enum represents view orientation type.  
        :py:class:`Drawings.ViewOrientationBuilderOrientation.InheritOrientation <Drawings.ViewOrientationBuilderOrientation>` and :py:class:`Drawings.ViewOrientationBuilderOrientation.SectionExisting <Drawings.ViewOrientationBuilderOrientation>` options require a view selection.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Orthographic", "Orthographic"
           "InheritOrientation", "Inherit Orientation from a View"
           "UseParentOrientation", "Use Parent View Orientation"
           "UseParentOrienation", "DO NOT USE Deprecated as of NX75"
           "SectionExisting", "Section an Existing View"
        """
        Orthographic = 0  # ViewOrientationBuilderOrientationMemberType
        InheritOrientation = 1  # ViewOrientationBuilderOrientationMemberType
        UseParentOrientation = 2  # ViewOrientationBuilderOrientationMemberType
        UseParentOrienation = 2  # ViewOrientationBuilderOrientationMemberType
        SectionExisting = 3  # ViewOrientationBuilderOrientationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    OrientationType: ViewOrientationBuilderOrientation = ...
    """
    Returns or sets  the orientation type 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewOrientationBuilderOrientation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationType`` 
    
    :param orientationType: 
    :type orientationType: :py:class:`NXOpen.Drawings.ViewOrientationBuilderOrientation` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelectView: NXOpen.SelectView = ...
    """
    Returns  the select view 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectView` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ViewOrientationBuilder = ...  # unknown typename


class DrawingRegionBuilderRegionDraftingObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingRegionBuilderRegionDraftingObjectType():
    """
    Specifies the drafting object type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "View", " - "
       "Table", " - "
       "Annotation", " - "
       "Symbol", " - "
       "Blank", " - "
       "NotSet", " - "
    """
    View = 0  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
    Table = 1  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
    Annotation = 2  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
    Symbol = 3  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
    Blank = 4  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
    NotSet = 5  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingRegionBuilderRegionContinuationMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingRegionBuilderRegionContinuation():
    """
    Specifies the region continuation type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "NewSheet", " - "
       "NextRegion", " - "
       "NewSheetRight", " - "
       "NewSheetLeft", " - "
       "NewSheetUp", " - "
       "NewSheetDown", " - "
    """
    NotSet = 0  # DrawingRegionBuilderRegionContinuationMemberType
    NewSheet = 1  # DrawingRegionBuilderRegionContinuationMemberType
    NextRegion = 2  # DrawingRegionBuilderRegionContinuationMemberType
    NewSheetRight = 3  # DrawingRegionBuilderRegionContinuationMemberType
    NewSheetLeft = 4  # DrawingRegionBuilderRegionContinuationMemberType
    NewSheetUp = 5  # DrawingRegionBuilderRegionContinuationMemberType
    NewSheetDown = 6  # DrawingRegionBuilderRegionContinuationMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingRegionBuilderContentToMoveMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingRegionBuilderContentToMove():
    """
    Specifies the region content to move 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "All", " - "
       "OnlyOverlapping", " - "
    """
    All = 0  # DrawingRegionBuilderContentToMoveMemberType
    OnlyOverlapping = 1  # DrawingRegionBuilderContentToMoveMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingRegionBuilderRegionVerticalGrowthDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingRegionBuilderRegionVerticalGrowthDirection():
    """
    Specifies the region vertical growth direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Up", " - "
       "Down", " - "
    """
    Up = 0  # DrawingRegionBuilderRegionVerticalGrowthDirectionMemberType
    Down = 1  # DrawingRegionBuilderRegionVerticalGrowthDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingRegionBuilderRegionHorizontalGrowthDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingRegionBuilderRegionHorizontalGrowthDirection():
    """
    Specifies the region horizontal growth direction 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Left", " - "
       "Right", " - "
    """
    Left = 0  # DrawingRegionBuilderRegionHorizontalGrowthDirectionMemberType
    Right = 1  # DrawingRegionBuilderRegionHorizontalGrowthDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingRegionBuilderRegionGrowthDirectionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingRegionBuilderRegionGrowthDirection():
    """
    Specifies the region growth direction (this is for :py:class:`NXOpen.Annotations.CustomSymbol` and :py:class:`NXOpen.Annotations.Note`) 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "RightfromTopLeft", " - "
       "RightfromBottomLeft", " - "
       "LeftfromTopRight", " - "
       "LeftfromBottomRight", " - "
       "DownfromTopLeft", " - "
       "DownfromTopRight", " - "
       "UpfromBottomLeft", " - "
       "UpfromBottomRight", " - "
       "NotSet", " - "
    """
    RightfromTopLeft = 0  # DrawingRegionBuilderRegionGrowthDirectionMemberType
    RightfromBottomLeft = 1  # DrawingRegionBuilderRegionGrowthDirectionMemberType
    LeftfromTopRight = 2  # DrawingRegionBuilderRegionGrowthDirectionMemberType
    LeftfromBottomRight = 3  # DrawingRegionBuilderRegionGrowthDirectionMemberType
    DownfromTopLeft = 4  # DrawingRegionBuilderRegionGrowthDirectionMemberType
    DownfromTopRight = 5  # DrawingRegionBuilderRegionGrowthDirectionMemberType
    UpfromBottomLeft = 6  # DrawingRegionBuilderRegionGrowthDirectionMemberType
    UpfromBottomRight = 7  # DrawingRegionBuilderRegionGrowthDirectionMemberType
    NotSet = 8  # DrawingRegionBuilderRegionGrowthDirectionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingRegionBuilder(NXOpen.Builder):
    """
    Represents a Drawing Region Builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DrawingRegionCollection.CreateDrawingRegionBuilder`
    
    Default values.
    
    ==========================  ======================================
    Property                    Value
    ==========================  ======================================
    Gap                         0 
    --------------------------  --------------------------------------
    GrowthDirection             RightfromTopLeft 
    --------------------------  --------------------------------------
    Height.Value                0 (millimeters part), 0 (inches part) 
    --------------------------  --------------------------------------
    HorizontalGrowthDirection   Left 
    --------------------------  --------------------------------------
    Length.Value                0 (millimeters part), 0 (inches part) 
    --------------------------  --------------------------------------
    MoveContent                 All 
    --------------------------  --------------------------------------
    ObjectType                  View 
    --------------------------  --------------------------------------
    Priority                    0 
    --------------------------  --------------------------------------
    SpecifyContinuation         None 
    --------------------------  --------------------------------------
    VerticalGrowthDirection     Up 
    ==========================  ======================================
    
    .. versionadded:: NX8.0.0
    """
    
    class RegionDraftingObjectType():
        """
        Specifies the drafting object type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "View", " - "
           "Table", " - "
           "Annotation", " - "
           "Symbol", " - "
           "Blank", " - "
           "NotSet", " - "
        """
        View = 0  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
        Table = 1  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
        Annotation = 2  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
        Symbol = 3  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
        Blank = 4  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
        NotSet = 5  # DrawingRegionBuilderRegionDraftingObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RegionContinuation():
        """
        Specifies the region continuation type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "NewSheet", " - "
           "NextRegion", " - "
           "NewSheetRight", " - "
           "NewSheetLeft", " - "
           "NewSheetUp", " - "
           "NewSheetDown", " - "
        """
        NotSet = 0  # DrawingRegionBuilderRegionContinuationMemberType
        NewSheet = 1  # DrawingRegionBuilderRegionContinuationMemberType
        NextRegion = 2  # DrawingRegionBuilderRegionContinuationMemberType
        NewSheetRight = 3  # DrawingRegionBuilderRegionContinuationMemberType
        NewSheetLeft = 4  # DrawingRegionBuilderRegionContinuationMemberType
        NewSheetUp = 5  # DrawingRegionBuilderRegionContinuationMemberType
        NewSheetDown = 6  # DrawingRegionBuilderRegionContinuationMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ContentToMove():
        """
        Specifies the region content to move 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "All", " - "
           "OnlyOverlapping", " - "
        """
        All = 0  # DrawingRegionBuilderContentToMoveMemberType
        OnlyOverlapping = 1  # DrawingRegionBuilderContentToMoveMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RegionVerticalGrowthDirection():
        """
        Specifies the region vertical growth direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Up", " - "
           "Down", " - "
        """
        Up = 0  # DrawingRegionBuilderRegionVerticalGrowthDirectionMemberType
        Down = 1  # DrawingRegionBuilderRegionVerticalGrowthDirectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RegionHorizontalGrowthDirection():
        """
        Specifies the region horizontal growth direction 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Left", " - "
           "Right", " - "
        """
        Left = 0  # DrawingRegionBuilderRegionHorizontalGrowthDirectionMemberType
        Right = 1  # DrawingRegionBuilderRegionHorizontalGrowthDirectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RegionGrowthDirection():
        """
        Specifies the region growth direction (this is for :py:class:`NXOpen.Annotations.CustomSymbol` and :py:class:`NXOpen.Annotations.Note`) 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "RightfromTopLeft", " - "
           "RightfromBottomLeft", " - "
           "LeftfromTopRight", " - "
           "LeftfromBottomRight", " - "
           "DownfromTopLeft", " - "
           "DownfromTopRight", " - "
           "UpfromBottomLeft", " - "
           "UpfromBottomRight", " - "
           "NotSet", " - "
        """
        RightfromTopLeft = 0  # DrawingRegionBuilderRegionGrowthDirectionMemberType
        RightfromBottomLeft = 1  # DrawingRegionBuilderRegionGrowthDirectionMemberType
        LeftfromTopRight = 2  # DrawingRegionBuilderRegionGrowthDirectionMemberType
        LeftfromBottomRight = 3  # DrawingRegionBuilderRegionGrowthDirectionMemberType
        DownfromTopLeft = 4  # DrawingRegionBuilderRegionGrowthDirectionMemberType
        DownfromTopRight = 5  # DrawingRegionBuilderRegionGrowthDirectionMemberType
        UpfromBottomLeft = 6  # DrawingRegionBuilderRegionGrowthDirectionMemberType
        UpfromBottomRight = 7  # DrawingRegionBuilderRegionGrowthDirectionMemberType
        NotSet = 8  # DrawingRegionBuilderRegionGrowthDirectionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetNextLinkedRegion(self, nextLinkedRegion: DrawingRegion) -> None:
        """
        Set the next linked regions 
        
        Signature ``SetNextLinkedRegion(nextLinkedRegion)`` 
        
        :param nextLinkedRegion: 
        :type nextLinkedRegion: :py:class:`NXOpen.Drawings.DrawingRegion` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    DrawingRegionRulesBuilder: DrawingRegionRulesBuilder = ...
    """
    Returns  the DrawingRegionRules builder 
    
    <hr>
    
    Getter Method
    
    Signature ``DrawingRegionRulesBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingRegionRulesBuilder` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    Gap: float = ...
    """
    Returns or sets  the gap 
    
    <hr>
    
    Getter Method
    
    Signature ``Gap`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Gap`` 
    
    :param gap: 
    :type gap: float 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    GrowthDirection: DrawingRegionBuilderRegionGrowthDirection = ...
    """
    Returns or sets  the  growth direction (this is for :py:class:`NXOpen.Annotations.CustomSymbol` and :py:class:`NXOpen.Annotations.Note`) 
    
    <hr>
    
    Getter Method
    
    Signature ``GrowthDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionGrowthDirection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GrowthDirection`` 
    
    :param growthDirection: 
    :type growthDirection: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionGrowthDirection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    Height: NXOpen.Expression = ...
    """
    Returns  the height 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    HorizontalGrowthDirection: DrawingRegionBuilderRegionHorizontalGrowthDirection = ...
    """
    Returns or sets  the horizantal growth direction 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalGrowthDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionHorizontalGrowthDirection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalGrowthDirection`` 
    
    :param horizontalGrowthDirection: 
    :type horizontalGrowthDirection: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionHorizontalGrowthDirection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    Length: NXOpen.Expression = ...
    """
    Returns  the length 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    MoveContent: DrawingRegionBuilderContentToMove = ...
    """
    Returns or sets  the move content 
    
    <hr>
    
    Getter Method
    
    Signature ``MoveContent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingRegionBuilderContentToMove` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MoveContent`` 
    
    :param moveContent: 
    :type moveContent: :py:class:`NXOpen.Drawings.DrawingRegionBuilderContentToMove` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    Name: str = ...
    """
    Returns or sets  the name 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name: 
    :type name: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    ObjectType: DrawingRegionBuilderRegionDraftingObjectType = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionDraftingObjectType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionDraftingObjectType` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    Origin: NXOpen.Point = ...
    """
    Returns or sets  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    Priority: int = ...
    """
    Returns or sets  the priority 
    
    <hr>
    
    Getter Method
    
    Signature ``Priority`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Priority`` 
    
    :param priority: 
    :type priority: int 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    SpecifyContinuation: DrawingRegionBuilderRegionContinuation = ...
    """
    Returns or sets  the continuation 
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyContinuation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionContinuation` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyContinuation`` 
    
    :param specifyContinuation: 
    :type specifyContinuation: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionContinuation` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    VerticalGrowthDirection: DrawingRegionBuilderRegionVerticalGrowthDirection = ...
    """
    Returns or sets   the  vertical growth direction 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalGrowthDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionVerticalGrowthDirection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalGrowthDirection`` 
    
    :param verticalGrowthDirection: 
    :type verticalGrowthDirection: :py:class:`NXOpen.Drawings.DrawingRegionBuilderRegionVerticalGrowthDirection` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_drawing_auto ("NX Drawing Automation")
    """
    Null: DrawingRegionBuilder = ...  # unknown typename


class BordersAndZones(NXOpen.NXObject):
    """
    Represents Borders and Zones  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.BordersAndZonesBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: BordersAndZones = ...  # unknown typename


class BaseView(DraftingView):
    """
    Represents a Base View.  
    
    A base view is a modeling view that you import onto a drawing.
    The base view can be a standalone view or a parent view
    for other drawings types such as a section view. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.BaseViewBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: BaseView = ...  # unknown typename


class ViewStyleVirtualIntersectionsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the VIRTUAL INTERSECTIONS tab on the View Style Dialog (Drawings.  
    
    ViewStyleVirtualIntersectionsBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AdjacentBlends: bool = ...
    """
    Returns or sets  the adjacent blends toggle on the VIRTUAL INTERSECTIONS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlends`` 
    
    :returns:  Returns the adjacent blends toggle value that is on the virtual intersections sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlends`` 
    
    :param ajacentBlendsToggle:  Sets a new adjacent blends toggle value on the virtual intersections sub-builder  
    :type ajacentBlendsToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color on the VIRTUAL INTERSECTIONS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns:  Returns the color that is on the virtual intersections sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color:  Sets a new color on the virtual intersections sub-builder  
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    EndGaps: bool = ...
    """
    Returns or sets  the end gaps toggle on the VIRTUAL INTERSECTIONS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``EndGaps`` 
    
    :returns:  Returns the end gaps toggle value that is on the virtual intersections sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndGaps`` 
    
    :param endGapsToggle:  Sets a new end gaps toggle value on the virtual intersections sub-builder  
    :type endGapsToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    EndGapsDistance: float = ...
    """
    Returns or sets  the end gaps data on the VIRTUAL INTERSECTIONS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``EndGapsDistance`` 
    
    :returns:  Returns the end gaps data that is on the virtual intersections sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndGapsDistance`` 
    
    :param endGapsData:  Sets new end gaps data on the virtual intersections sub-builder  
    :type endGapsData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Font: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the font on the VIRTUAL INTERSECTIONS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Font`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Font`` 
    
    :param font:  Sets a new font on the virtual intersections sub-builder  
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VirtualIntersections: bool = ...
    """
    Returns or sets  the virtual intersections toggle on the VIRTUAL INTERSECTIONS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VirtualIntersections`` 
    
    :returns:  Returns the virtual intersections toggle value that is on the virtual intersections sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VirtualIntersections`` 
    
    :param virtualIntersectionsToggle:  Sets a new virtual intersections toggle value on the virtual intersections sub-builder  
    :type virtualIntersectionsToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Width: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the width on the VIRTUAL INTERSECTIONS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns:  Returns the width that is on the virtual intersections sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width:  Sets a new width on the virtual intersections sub-builder  
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleVirtualIntersectionsBuilder = ...  # unknown typename


class LabelPositionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class LabelPositionTypes():
    """
    label position type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Above", " - "
       "Below", " - "
    """
    Above = 0  # LabelPositionTypesMemberType
    Below = 1  # LabelPositionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewStyleFPCurvesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the Curve section of the Flat Pattern tab on the View Style Dialog (Drawings.  
    
    ViewStyleFPCurvesBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color on the Curve section of the Flat Pattern tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns:  Returns the color that is on the curve section of the flat pattern sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color:  Sets a new color on the curve section of the flat pattern sub-builder  
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Font: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the font on the Curve section of the Flat Pattern tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Font`` 
    
    :returns:  Returns the font that is on the curve section of the flat pattern sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Font`` 
    
    :param font:  Sets a new font on the curve section of the flat pattern sub-builder  
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    State: bool = ...
    """
    Returns or sets  the state toggle on the Curve section of the Flat Pattern tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``State`` 
    
    :returns:  Returns the state toggle value that is on the curve section of the flat pattern sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``State`` 
    
    :param stateToggle:  Sets a new state toggle value on the curve section of the flat pattern sub-builder  
    :type stateToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Type: NXOpen.SheetMetal.FlatPatternSettingsFlatPatternObjectType = ...
    """
    Returns  the type of Flat Pattern Curve 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:  Returns the type of flat pattern curve 
    :rtype: :py:class:`NXOpen.SheetMetal.FlatPatternSettingsFlatPatternObjectType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Width: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the width on the Curve section of the Flat Pattern tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns:  Returns the width that is on the curve section of the flat pattern sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width:  Sets a new width on the curve section of the flat pattern sub-builder  
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleFPCurvesBuilder = ...  # unknown typename


class VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsMethodTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsMethodType():
    """
    Compare Method Type 
    This indicate various options of Compare Method.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AgainstAnotherDrawing", "This option is used to overlay different part over current part"
       "AgainstOverlayDatainActiveDrawing", "This option is used to overlay current part on itself"
    """
    AgainstAnotherDrawing = 0  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsMethodTypeMemberType
    AgainstOverlayDatainActiveDrawing = 1  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsMethodTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUseMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUse():
    """
    Overlay Data To Use
    This indicate various options that can be used before Overlaying
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AskatRuntime", "This option tells to show messages at rumtime"
       "AlwaysUseExistingData", "This option will use existing data to overlay"
       "AlwaysCreateNewData", "This option will always create new data"
       "CreateNewDataifNoneExists", "This option will create new data if none exists"
    """
    AskatRuntime = 0  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUseMemberType
    AlwaysUseExistingData = 1  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUseMemberType
    AlwaysCreateNewData = 2  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUseMemberType
    CreateNewDataifNoneExists = 3  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUseMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class VisualDrawingComparePrefsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This class gets and sets components of Visual Overlay in Drafting Preferences.  
    
    .. versionadded:: NX11.0.0
    """
    
    class VisualDrawingComparePrefsMethodType():
        """
        Compare Method Type 
        This indicate various options of Compare Method.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AgainstAnotherDrawing", "This option is used to overlay different part over current part"
           "AgainstOverlayDatainActiveDrawing", "This option is used to overlay current part on itself"
        """
        AgainstAnotherDrawing = 0  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsMethodTypeMemberType
        AgainstOverlayDatainActiveDrawing = 1  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsMethodTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VisualDrawingComparePrefsOverlayDataToUse():
        """
        Overlay Data To Use
        This indicate various options that can be used before Overlaying
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AskatRuntime", "This option tells to show messages at rumtime"
           "AlwaysUseExistingData", "This option will use existing data to overlay"
           "AlwaysCreateNewData", "This option will always create new data"
           "CreateNewDataifNoneExists", "This option will create new data if none exists"
        """
        AskatRuntime = 0  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUseMemberType
        AlwaysUseExistingData = 1  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUseMemberType
        AlwaysCreateNewData = 2  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUseMemberType
        CreateNewDataifNoneExists = 3  # VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUseMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CompareMethodType: VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsMethodType = ...
    """
    Returns or sets  the compare method type 
    
    <hr>
    
    Getter Method
    
    Signature ``CompareMethodType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsMethodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompareMethodType`` 
    
    :param compareMethodType: 
    :type compareMethodType: :py:class:`NXOpen.Drawings.VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsMethodType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OverlayColor: NXOpen.NXColor = ...
    """
    Returns or sets  the overlay color 
    
    <hr>
    
    Getter Method
    
    Signature ``OverlayColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverlayColor`` 
    
    :param overlayColor: 
    :type overlayColor: Id 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OverlayDataToUse: VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUse = ...
    """
    Returns or sets  the overlay data to use 
    
    <hr>
    
    Getter Method
    
    Signature ``OverlayDataToUse`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUse` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverlayDataToUse`` 
    
    :param overlayDataToUse: 
    :type overlayDataToUse: :py:class:`NXOpen.Drawings.VisualDrawingComparePrefsBuilderVisualDrawingComparePrefsOverlayDataToUse` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: VisualDrawingComparePrefsBuilder = ...  # unknown typename


class DraftingCurveInfoDraftingCurveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DraftingCurveInfoDraftingCurveType():
    """
    Specifies the drafting curve types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ExtractedEdge", "Specifies Extracted Edge Curve"
       "ExtractedModelCurve", "Specifies Extracted Model Curve"
       "SilhouetteCurve", "Specifies Silhouette Curve"
       "ThreadSilhouetteCurve", "Specifies Thread Silhouette Curve"
       "SectionEdge", "Specifies Section Edge Curve"
       "ThreadSectionEdge", "Specifies Thread Section Edge Curve"
       "VICurve", "Specifies Virtual Intersection Curve"
       "UVHatchCurve", "Specifies UVHatch Curve"
       "TracelineCurve", "Specifies TraceLine Curve"
       "SimplifiedCurve", "Specifies Simplified Curve"
       "InterferenceCurve", "Specifies Interference Curve"
    """
    ExtractedEdge = 0  # DraftingCurveInfoDraftingCurveTypeMemberType
    ExtractedModelCurve = 1  # DraftingCurveInfoDraftingCurveTypeMemberType
    SilhouetteCurve = 2  # DraftingCurveInfoDraftingCurveTypeMemberType
    ThreadSilhouetteCurve = 3  # DraftingCurveInfoDraftingCurveTypeMemberType
    SectionEdge = 4  # DraftingCurveInfoDraftingCurveTypeMemberType
    ThreadSectionEdge = 5  # DraftingCurveInfoDraftingCurveTypeMemberType
    VICurve = 6  # DraftingCurveInfoDraftingCurveTypeMemberType
    UVHatchCurve = 7  # DraftingCurveInfoDraftingCurveTypeMemberType
    TracelineCurve = 8  # DraftingCurveInfoDraftingCurveTypeMemberType
    SimplifiedCurve = 9  # DraftingCurveInfoDraftingCurveTypeMemberType
    InterferenceCurve = 10  # DraftingCurveInfoDraftingCurveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingCurveInfo(NXOpen.TransientObject):
    """
    Represents Drafting Curve Info   
    
    .. versionadded:: NX10.0.0
    """
    
    class DraftingCurveType():
        """
        Specifies the drafting curve types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ExtractedEdge", "Specifies Extracted Edge Curve"
           "ExtractedModelCurve", "Specifies Extracted Model Curve"
           "SilhouetteCurve", "Specifies Silhouette Curve"
           "ThreadSilhouetteCurve", "Specifies Thread Silhouette Curve"
           "SectionEdge", "Specifies Section Edge Curve"
           "ThreadSectionEdge", "Specifies Thread Section Edge Curve"
           "VICurve", "Specifies Virtual Intersection Curve"
           "UVHatchCurve", "Specifies UVHatch Curve"
           "TracelineCurve", "Specifies TraceLine Curve"
           "SimplifiedCurve", "Specifies Simplified Curve"
           "InterferenceCurve", "Specifies Interference Curve"
        """
        ExtractedEdge = 0  # DraftingCurveInfoDraftingCurveTypeMemberType
        ExtractedModelCurve = 1  # DraftingCurveInfoDraftingCurveTypeMemberType
        SilhouetteCurve = 2  # DraftingCurveInfoDraftingCurveTypeMemberType
        ThreadSilhouetteCurve = 3  # DraftingCurveInfoDraftingCurveTypeMemberType
        SectionEdge = 4  # DraftingCurveInfoDraftingCurveTypeMemberType
        ThreadSectionEdge = 5  # DraftingCurveInfoDraftingCurveTypeMemberType
        VICurve = 6  # DraftingCurveInfoDraftingCurveTypeMemberType
        UVHatchCurve = 7  # DraftingCurveInfoDraftingCurveTypeMemberType
        TracelineCurve = 8  # DraftingCurveInfoDraftingCurveTypeMemberType
        SimplifiedCurve = 9  # DraftingCurveInfoDraftingCurveTypeMemberType
        InterferenceCurve = 10  # DraftingCurveInfoDraftingCurveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Dispose(self) -> None:
        """
        Frees the object from memory.  
        
        After this method is called,
        it is illegal to use the object. In .NET, this method is automatically
        called when the object is deleted by the garbage collector. 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetParents(self) -> 'list[NXOpen.NXObject]':
        """
        Returns the parents for input drafting curve  
        
        Signature ``GetParents()`` 
        
        :returns:  List of parents  
        :rtype: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    CurveType: DraftingCurveInfoDraftingCurveType = ...
    """
    Returns  the drafting curve type 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveType`` 
    
    :returns:  Curve Type  
    :rtype: :py:class:`NXOpen.Drawings.DraftingCurveInfoDraftingCurveType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """


class HorizontalCenteringMarkTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HorizontalCenteringMarkType():
    """
    the horizontal centering mark type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "LeftArrow", "Left Arrow"
       "RightArrow", "Right Arrow"
       "LeftandRightArrow", "Left and Right Arrow"
       "LeftandRightLine", " - "
    """
    NotSet = 0  # HorizontalCenteringMarkTypeMemberType
    LeftArrow = 1  # HorizontalCenteringMarkTypeMemberType
    RightArrow = 2  # HorizontalCenteringMarkTypeMemberType
    LeftandRightArrow = 3  # HorizontalCenteringMarkTypeMemberType
    LeftandRightLine = 4  # HorizontalCenteringMarkTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionViewStyle(NXOpen.Preferences.ISectionViewPreferences):
    """
    Represents set of Section View Style Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.Section`
    
    .. versionadded:: NX5.0.0
    """
    AssemblyCrossHatching: bool = ...
    """
    Returns or sets  the status of assembly cross hatching.  
    
    Controls the crosshatching angle
    of adjacent solids in an assembly section view.
    Works when :py:meth:`Drawings.SectionViewStyle.CrossHatch`` is True.
    
    <hr>
    
    Getter Method
    
    Signature ``AssemblyCrossHatching`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssemblyCrossHatching`` 
    
    :param assemblyCrossHatching: 
    :type assemblyCrossHatching: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Background: bool = ...
    """
    Returns or sets  the status of background.  
    
    Suppress or display the background curves for a section view. If True,
    not only the curves and crosshatching generated by cutting the solid are displayed, 
    but the curves behind the cutting plane are displayed as well. If False, only the curves and 
    crosshatching generated by cutting the solid are displayed in the view.
    
    <hr>
    
    Getter Method
    
    Signature ``Background`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Background`` 
    
    :param background: 
    :type background: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Bendlines: bool = ...
    """
    Returns or sets  the status of bendlines 
    
    <hr>
    
    Getter Method
    
    Signature ``Bendlines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Bendlines`` 
    
    :param bendlines: 
    :type bendlines: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CrossHatch: bool = ...
    """
    Returns or sets  the status of cross hatch.  
    
    Allows to control whether or not crosshatching is generated in 
    a given section view. If True, crosshatching is displayed for a section view on the drawing, 
    else crosshatching is not generated for a section view on the drawing, and a performance 
    increase is gained.
    
    <hr>
    
    Getter Method
    
    Signature ``CrossHatch`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrossHatch`` 
    
    :param crossHatch: 
    :type crossHatch: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CrosshatchAdjacencyTolarance: float = ...
    """
    Returns or sets  the value of crosshatch adjacency tolarance.  
    
    Controls the crosshatching angle of adjacent 
    solids in an assembly section view.
    Works when :py:meth:`Drawings.SectionViewStyle.AssemblyCrossHatching`` is True.
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchAdjacencyTolarance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchAdjacencyTolarance`` 
    
    :param crosshatchAdjacencyTolarance: 
    :type crosshatchAdjacencyTolarance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplaySectionLine: bool = ...
    """
    Returns or sets  the status of display section line.  
    
    Suppress or display the sectio line in a section view.
    
    <hr>
    
    Getter Method
    
    Signature ``DisplaySectionLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplaySectionLine`` 
    
    :param displaySectionLine: 
    :type displaySectionLine: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Foreground: bool = ...
    """
    Returns or sets  the status of foreground 
    
    <hr>
    
    Getter Method
    
    Signature ``Foreground`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Foreground`` 
    
    :param foreground: 
    :type foreground: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLineHatching: bool = ...
    """
    Returns or sets  the status of hidden line hatching.  
    
    Controls whether hatching for a Break-Out
    or Pictorial Section view participates in hidden line processing. When it is True for a break-out section view, 
    the only hatch style available is iron (equally spaced solid lines). 
    Works when :py:meth:`Drawings.SectionViewStyle.CrossHatch`` is True.
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLineHatching`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLineHatching`` 
    
    :param hiddenLineHatching: 
    :type hiddenLineHatching: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RestrictCrosshatchAngle: bool = ...
    """
    Returns or sets   
    
    <hr>
    
    Getter Method
    
    Signature ``RestrictCrosshatchAngle`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RestrictCrosshatchAngle`` 
    
    :param restrictCrosshatchAngle: 
    :type restrictCrosshatchAngle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SectionSheetBodies: bool = ...
    """
    Returns or sets  the status of section sheet bodies.  
    
    Allows sectioning of sheet bodies in a Section view. 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionSheetBodies`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SectionSheetBodies`` 
    
    :param sectionSheetBodies: 
    :type sectionSheetBodies: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class ViewProjectionBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewProjectionBuilderTypes():
    """
    the type of view projection 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ProjectOnOnePlane", "on one plane"
       "ProjectOnTwoPlanes", "on two planes"
    """
    ProjectOnOnePlane = 0  # ViewProjectionBuilderTypesMemberType
    ProjectOnTwoPlanes = 1  # ViewProjectionBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewProjectionBuilderCurveTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewProjectionBuilderCurveType():
    """
    the value of curve type in the setting group 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Active", "Active"
       "Reference", "Reference"
       "NotSet", "None"
    """
    Active = 0  # ViewProjectionBuilderCurveTypeMemberType
    Reference = 1  # ViewProjectionBuilderCurveTypeMemberType
    NotSet = 2  # ViewProjectionBuilderCurveTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewProjectionBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewProjectionBuilder`.  
    
    This class
    is used to project the contents of a drafting member view to other views
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateViewProjectionBuilder`
    
    Default values.
    
    ========================  ===================
    Property                  Value
    ========================  ===================
    CurveTypeEdges            Reference 
    ------------------------  -------------------
    CurveTypePlane1           Active 
    ------------------------  -------------------
    CurveTypePlane2           Active 
    ------------------------  -------------------
    Plane1.DepthValue.Value   0.0 
    ------------------------  -------------------
    Plane1.PlaneOption        Inferred 
    ------------------------  -------------------
    Type                      ProjectOnTwoPlanes 
    ========================  ===================
    
    .. versionadded:: NX6.0.2
    """
    
    class Types():
        """
        the type of view projection 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ProjectOnOnePlane", "on one plane"
           "ProjectOnTwoPlanes", "on two planes"
        """
        ProjectOnOnePlane = 0  # ViewProjectionBuilderTypesMemberType
        ProjectOnTwoPlanes = 1  # ViewProjectionBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CurveType():
        """
        the value of curve type in the setting group 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Active", "Active"
           "Reference", "Reference"
           "NotSet", "None"
        """
        Active = 0  # ViewProjectionBuilderCurveTypeMemberType
        Reference = 1  # ViewProjectionBuilderCurveTypeMemberType
        NotSet = 2  # ViewProjectionBuilderCurveTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    CurvePoints: NXOpen.Section = ...
    """
    Returns  the curve and points 
    
    <hr>
    
    Getter Method
    
    Signature ``CurvePoints`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Section` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    CurveTypeEdges: ViewProjectionBuilderCurveType = ...
    """
    Returns or sets  the curve type edges in the setting group 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveTypeEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectionBuilderCurveType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveTypeEdges`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.ViewProjectionBuilderCurveType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    CurveTypePlane1: ViewProjectionBuilderCurveType = ...
    """
    Returns or sets  the curve type plane 1 in the setting group 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveTypePlane1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectionBuilderCurveType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveTypePlane1`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.ViewProjectionBuilderCurveType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    CurveTypePlane2: ViewProjectionBuilderCurveType = ...
    """
    Returns or sets  the curve type plane 2 in the setting group , if the type is set to
    one plane, the second plane information is ignored 
    
    <hr>
    
    Getter Method
    
    Signature ``CurveTypePlane2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectionBuilderCurveType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CurveTypePlane2`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.ViewProjectionBuilderCurveType` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    FromView: NXOpen.View = ...
    """
    Returns or sets  the from view 
    
    <hr>
    
    Getter Method
    
    Signature ``FromView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``FromView`` 
    
    :param fromview: 
    :type fromview: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    Plane1: ViewProjectionPlaneBuilder = ...
    """
    Returns  the plane 1 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectionPlaneBuilder` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    Plane2: ViewProjectionPlaneBuilder = ...
    """
    Returns  the plane 2, if the type is set to one plane, the second plane information is ignored 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectionPlaneBuilder` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    ToViews: SelectDraftingViewList = ...
    """
    Returns  the to views 
    
    <hr>
    
    Getter Method
    
    Signature ``ToViews`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingViewList` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    Type: ViewProjectionBuilderTypes = ...
    """
    Returns or sets  the type of the view projection
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectionBuilderTypes` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.ViewProjectionBuilderTypes` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    Null: ViewProjectionBuilder = ...  # unknown typename


class SettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Drawings.SettingsBuilder`.  
    
    This class queries and sets settings.
    
    .. versionadded:: NX11.0.0
    """
    
    def SaveConfigurationFile(self, saveAsFile: str) -> None:
        """
        API used to save settings data 
        
        Signature ``SaveConfigurationFile(saveAsFile)`` 
        
        :param saveAsFile: 
        :type saveAsFile: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AnnotationSettings: AnnotationSettingsBuilder = ...
    """
    Returns  the Annotation settings builder which stores the annotation settings 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.AnnotationSettingsBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ConversionSettings: ConversionProcessSettingsBuilder = ...
    """
    Returns  the Component settings builder which stores the component settings 
    
    <hr>
    
    Getter Method
    
    Signature ``ConversionSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ConversionProcessSettingsBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ViewSettings: ViewSettingsBuilder = ...
    """
    Returns  the View settings builder which stores the view settings 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSettingsBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: SettingsBuilder = ...  # unknown typename


class TrackDrawingChangesReportFilterBuilderFilterMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrackDrawingChangesReportFilterBuilderFilter():
    """
    Represents Report Filter options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sheets", "Sheet Report Filter"
       "Views", "Views Report Filter"
       "DimensionsAll", "Dimension All Report Filter"
       "DimensionsRetainedStatus", "Dimension Retained Status Report Filter"
       "DimensionsSize", "Dimension Size Report Filter"
       "DimensionsOrigin", "Dimension Origin Report Filter"
       "AnnotationNotes", "Annotation Notes Report Filter"
       "AnnotationNotesRetainedStatus", "Annotation Notes Retained Status Report Filter"
       "AnnotationNotesText", "Annotation Notes Text Report Filter"
       "AnnotationNotesOrigin", "Annotation Notes Origin Report Filter"
       "AnnotationNotesLeaderTerminator", "Annotation Notes Leader Terminator Report Filter"
       "AnnotationFCF", "Annotation Feature Control Frame Report Filter"
       "AnnotationFCFRetainedStatus", "Annotation Feature Control Frame Retained Status Report Filter"
       "AnnotationFCFText", "Annotation Feature Control Frame Text Report Filter"
       "AnnotationFCFOrigin", "Annotation Feature Control Frame Origin Report Filter"
       "AnnotationFCFLeaderTerminator", "Annotation Feature Control Frame Leader Terminator Report Filter"
       "AnnotationDFS", "Annotation Datum Feature Symbol Report Filter"
       "AnnotationDFSRetainedStatus", "Annotation Datum Feature Symbol Retained Status Report Filter"
       "AnnotationDFSText", "Annotation Datum Feature Symbol Text Report Filter"
       "AnnotationDFSOrigin", "Annotation Datum Feature Symbol Origin Report Filter"
       "AnnotationDFSLeaderTerminator", "Annotation Datum Feature Symbol Leader Terminator Report Filter"
       "AnnotationDTS", "Annotation Datum Target Symbol Report Filter"
       "AnnotationDTSRetainedStatus", "Annotation Datum Target Symbol Retained Status Report Filter"
       "AnnotationDTSText", "Annotation Datum Target Symbol Text Report Filter"
       "AnnotationDTSOrigin", "Annotation Datum Target Symbol Origin Report Filter"
       "AnnotationDTSLeaderTerminator", "Annotation Datum Target Symbol LeaderTerminator Report Filter"
       "AnnotationBalloons", "Annotation Balloons Report Filter"
       "AnnotationBalloonsRetainedStatus", "Annotation Balloons Retained Status Report Filter"
       "AnnotationBalloonsText", "Annotation Balloons Text Report Filter"
       "AnnotationBalloonsOrigin", "Annotation Balloons Origin Report Filter"
       "AnnotationBalloonsLeaderTerminator", "Annotation Balloons LeaderTerminator Report Filter"
       "AnnotationSFS", "Annotation Surface Finish Symbol Report Filter"
       "AnnotationSFSRetainedStatus", "Annotation Surface Finish Symbol Retained Status Report Filter"
       "AnnotationSFSText", "Annotation Surface Finish Symbol Text Report Filter"
       "AnnotationSFSOrigin", "Annotation Surface Finish Symbol Origin Report Filter"
       "AnnotationSFSLeaderTerminator", "Annotation Surface Finish Symbol LeaderTerminator Report Filter"
       "AnnotationWeldSymbol", "Annotation Weld Symbol Report Filter"
       "AnnotationWeldSymbolRetainedStatus", "Annotation Weld Symbol Retained Status Report Filter"
       "AnnotationWeldSymbolText", "Annotation Weld Symbol Text Report Filter"
       "AnnotationWeldSymbolOrigin", "Annotation Weld Symbol Origin Report Filter"
       "AnnotationWeldSymbolLeaderTerminator", "Annotation Weld Symbol LeaderTerminator Report Filter"
       "AnnotationTPS", "Annotation Target Point Symbol Report Filter"
       "AnnotationInterSymbol", "Annotation Intersection Symbol Report Filter"
       "AnnotationCrosshatch", "Annotation Crosshatch Report Filter"
       "AnnotationCenterlines", "Annotation Centerlines Report Filter"
       "Symbols", "Symbols Report Filter"
       "SymbolsRetainedStatus", "Symbols Retained Status Report Filter"
       "SymbolsText", "Symbols Text Report Filter"
       "SymbolsOrigin", "Symbols Origin Report Filter"
       "SymbolsLeaderTerminator", "Symbols Leader Terminator Report Filter"
       "Tables", "Tables Report Filter"
       "PartsLists", "Parts Lists Report Filter"
       "HoleTable", "Hole Table Report Filter"
       "SketchCurvesLines", "Sketch Curves lines filter"
       "SketchCurvesArcs", "Sketch Curves arcs filter"
       "SketchCurvesCircles", "Sketch Curves circles filter"
       "SketchCurvesConics", "Sketch Curves conics filter"
       "SketchCurvesSplines", "Sketch Curves splines filter"
    """
    Sheets = 0  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    Views = 1  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    DimensionsAll = 2  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    DimensionsRetainedStatus = 3  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    DimensionsSize = 4  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    DimensionsOrigin = 5  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationNotes = 6  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationNotesRetainedStatus = 7  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationNotesText = 8  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationNotesOrigin = 9  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationNotesLeaderTerminator = 10  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationFCF = 11  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationFCFRetainedStatus = 12  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationFCFText = 13  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationFCFOrigin = 14  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationFCFLeaderTerminator = 15  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDFS = 16  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDFSRetainedStatus = 17  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDFSText = 18  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDFSOrigin = 19  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDFSLeaderTerminator = 20  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDTS = 21  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDTSRetainedStatus = 22  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDTSText = 23  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDTSOrigin = 24  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationDTSLeaderTerminator = 25  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationBalloons = 26  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationBalloonsRetainedStatus = 27  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationBalloonsText = 28  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationBalloonsOrigin = 29  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationBalloonsLeaderTerminator = 30  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationSFS = 31  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationSFSRetainedStatus = 32  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationSFSText = 33  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationSFSOrigin = 34  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationSFSLeaderTerminator = 35  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationWeldSymbol = 36  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationWeldSymbolRetainedStatus = 37  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationWeldSymbolText = 38  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationWeldSymbolOrigin = 39  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationWeldSymbolLeaderTerminator = 40  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationTPS = 41  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationInterSymbol = 42  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationCrosshatch = 43  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    AnnotationCenterlines = 44  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    Symbols = 45  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    SymbolsRetainedStatus = 46  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    SymbolsText = 47  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    SymbolsOrigin = 48  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    SymbolsLeaderTerminator = 49  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    Tables = 50  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    PartsLists = 51  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    HoleTable = 52  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    SketchCurvesLines = 53  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    SketchCurvesArcs = 54  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    SketchCurvesCircles = 55  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    SketchCurvesConics = 56  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    SketchCurvesSplines = 57  # TrackDrawingChangesReportFilterBuilderFilterMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class TrackDrawingChangesReportFilterBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Drawings.TrackDrawingChangesReportFilterBuilder`
    
    .. versionadded:: NX11.0.0
    """
    
    class Filter():
        """
        Represents Report Filter options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sheets", "Sheet Report Filter"
           "Views", "Views Report Filter"
           "DimensionsAll", "Dimension All Report Filter"
           "DimensionsRetainedStatus", "Dimension Retained Status Report Filter"
           "DimensionsSize", "Dimension Size Report Filter"
           "DimensionsOrigin", "Dimension Origin Report Filter"
           "AnnotationNotes", "Annotation Notes Report Filter"
           "AnnotationNotesRetainedStatus", "Annotation Notes Retained Status Report Filter"
           "AnnotationNotesText", "Annotation Notes Text Report Filter"
           "AnnotationNotesOrigin", "Annotation Notes Origin Report Filter"
           "AnnotationNotesLeaderTerminator", "Annotation Notes Leader Terminator Report Filter"
           "AnnotationFCF", "Annotation Feature Control Frame Report Filter"
           "AnnotationFCFRetainedStatus", "Annotation Feature Control Frame Retained Status Report Filter"
           "AnnotationFCFText", "Annotation Feature Control Frame Text Report Filter"
           "AnnotationFCFOrigin", "Annotation Feature Control Frame Origin Report Filter"
           "AnnotationFCFLeaderTerminator", "Annotation Feature Control Frame Leader Terminator Report Filter"
           "AnnotationDFS", "Annotation Datum Feature Symbol Report Filter"
           "AnnotationDFSRetainedStatus", "Annotation Datum Feature Symbol Retained Status Report Filter"
           "AnnotationDFSText", "Annotation Datum Feature Symbol Text Report Filter"
           "AnnotationDFSOrigin", "Annotation Datum Feature Symbol Origin Report Filter"
           "AnnotationDFSLeaderTerminator", "Annotation Datum Feature Symbol Leader Terminator Report Filter"
           "AnnotationDTS", "Annotation Datum Target Symbol Report Filter"
           "AnnotationDTSRetainedStatus", "Annotation Datum Target Symbol Retained Status Report Filter"
           "AnnotationDTSText", "Annotation Datum Target Symbol Text Report Filter"
           "AnnotationDTSOrigin", "Annotation Datum Target Symbol Origin Report Filter"
           "AnnotationDTSLeaderTerminator", "Annotation Datum Target Symbol LeaderTerminator Report Filter"
           "AnnotationBalloons", "Annotation Balloons Report Filter"
           "AnnotationBalloonsRetainedStatus", "Annotation Balloons Retained Status Report Filter"
           "AnnotationBalloonsText", "Annotation Balloons Text Report Filter"
           "AnnotationBalloonsOrigin", "Annotation Balloons Origin Report Filter"
           "AnnotationBalloonsLeaderTerminator", "Annotation Balloons LeaderTerminator Report Filter"
           "AnnotationSFS", "Annotation Surface Finish Symbol Report Filter"
           "AnnotationSFSRetainedStatus", "Annotation Surface Finish Symbol Retained Status Report Filter"
           "AnnotationSFSText", "Annotation Surface Finish Symbol Text Report Filter"
           "AnnotationSFSOrigin", "Annotation Surface Finish Symbol Origin Report Filter"
           "AnnotationSFSLeaderTerminator", "Annotation Surface Finish Symbol LeaderTerminator Report Filter"
           "AnnotationWeldSymbol", "Annotation Weld Symbol Report Filter"
           "AnnotationWeldSymbolRetainedStatus", "Annotation Weld Symbol Retained Status Report Filter"
           "AnnotationWeldSymbolText", "Annotation Weld Symbol Text Report Filter"
           "AnnotationWeldSymbolOrigin", "Annotation Weld Symbol Origin Report Filter"
           "AnnotationWeldSymbolLeaderTerminator", "Annotation Weld Symbol LeaderTerminator Report Filter"
           "AnnotationTPS", "Annotation Target Point Symbol Report Filter"
           "AnnotationInterSymbol", "Annotation Intersection Symbol Report Filter"
           "AnnotationCrosshatch", "Annotation Crosshatch Report Filter"
           "AnnotationCenterlines", "Annotation Centerlines Report Filter"
           "Symbols", "Symbols Report Filter"
           "SymbolsRetainedStatus", "Symbols Retained Status Report Filter"
           "SymbolsText", "Symbols Text Report Filter"
           "SymbolsOrigin", "Symbols Origin Report Filter"
           "SymbolsLeaderTerminator", "Symbols Leader Terminator Report Filter"
           "Tables", "Tables Report Filter"
           "PartsLists", "Parts Lists Report Filter"
           "HoleTable", "Hole Table Report Filter"
           "SketchCurvesLines", "Sketch Curves lines filter"
           "SketchCurvesArcs", "Sketch Curves arcs filter"
           "SketchCurvesCircles", "Sketch Curves circles filter"
           "SketchCurvesConics", "Sketch Curves conics filter"
           "SketchCurvesSplines", "Sketch Curves splines filter"
        """
        Sheets = 0  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        Views = 1  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        DimensionsAll = 2  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        DimensionsRetainedStatus = 3  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        DimensionsSize = 4  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        DimensionsOrigin = 5  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationNotes = 6  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationNotesRetainedStatus = 7  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationNotesText = 8  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationNotesOrigin = 9  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationNotesLeaderTerminator = 10  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationFCF = 11  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationFCFRetainedStatus = 12  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationFCFText = 13  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationFCFOrigin = 14  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationFCFLeaderTerminator = 15  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDFS = 16  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDFSRetainedStatus = 17  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDFSText = 18  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDFSOrigin = 19  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDFSLeaderTerminator = 20  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDTS = 21  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDTSRetainedStatus = 22  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDTSText = 23  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDTSOrigin = 24  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationDTSLeaderTerminator = 25  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationBalloons = 26  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationBalloonsRetainedStatus = 27  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationBalloonsText = 28  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationBalloonsOrigin = 29  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationBalloonsLeaderTerminator = 30  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationSFS = 31  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationSFSRetainedStatus = 32  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationSFSText = 33  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationSFSOrigin = 34  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationSFSLeaderTerminator = 35  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationWeldSymbol = 36  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationWeldSymbolRetainedStatus = 37  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationWeldSymbolText = 38  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationWeldSymbolOrigin = 39  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationWeldSymbolLeaderTerminator = 40  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationTPS = 41  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationInterSymbol = 42  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationCrosshatch = 43  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        AnnotationCenterlines = 44  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        Symbols = 45  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        SymbolsRetainedStatus = 46  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        SymbolsText = 47  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        SymbolsOrigin = 48  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        SymbolsLeaderTerminator = 49  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        Tables = 50  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        PartsLists = 51  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        HoleTable = 52  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        SketchCurvesLines = 53  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        SketchCurvesArcs = 54  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        SketchCurvesCircles = 55  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        SketchCurvesConics = 56  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        SketchCurvesSplines = 57  # TrackDrawingChangesReportFilterBuilderFilterMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetReportFilterStatus(self, reportFilterType: TrackDrawingChangesReportFilterBuilderFilter) -> bool:
        """
        Returns report filter status  
        
        Signature ``GetReportFilterStatus(reportFilterType)`` 
        
        :param reportFilterType: 
        :type reportFilterType: :py:class:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilderFilter` 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetReportFilterStatus(self, reportFilterType: TrackDrawingChangesReportFilterBuilderFilter, reportFilterStatus: bool) -> None:
        """
        Sets report filter status 
        
        Signature ``SetReportFilterStatus(reportFilterType, reportFilterStatus)`` 
        
        :param reportFilterType: 
        :type reportFilterType: :py:class:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilderFilter` 
        :param reportFilterStatus: 
        :type reportFilterStatus: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: TrackDrawingChangesReportFilterBuilder = ...  # unknown typename


class DraftingBody(NXOpen.DisplayableObject):
    """
    Represents a drafting body.  
    
    An instance of this class can be obtained by using :py:class:`NXOpen.Drawings.DraftingBodyCollection`
    
    .. versionadded:: NX8.5.0
    """
    DraftingCurves: DraftingCurveCollection = ...
    """
    Returns the DraftingCurveCollection 
    
    Signature ``DraftingCurves`` 
    
    .. versionadded:: NX8.5.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingCurveCollection`
    """
    DraftingPoints: DraftingPointCollection = ...
    """
    Returns the DraftingPointCollection 
    
    Signature ``DraftingPoints`` 
    
    .. versionadded:: NX12.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingPointCollection`
    """
    Null: DraftingBody = ...  # unknown typename


class ConvertToPMIBuilderManager():
    """
    Represents :py:class:`NXOpen.Drawings.ConvertToPMIBuilderManager`
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.BasePart`
    
    .. versionadded:: NX11.0.0
    """
    
    def CreateConvertDraftingContentsBuilder(self) -> ConvertDraftingContentsBuilder:
        """
        Creator for Drawing to PMI Builder  
        
        Signature ``CreateConvertDraftingContentsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.ConvertDraftingContentsBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: convert_to_pmi (" Convert To PMI"), drafting ("DRAFTING")
        """
        ...
    
    
    def CreateReportBuilder(self) -> ReportBuilder:
        """
        Creator for Drawing to PMI Report Builder  
        
        Signature ``CreateReportBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.ReportBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteConversionReport(self, reportIndex: int) -> None:
        """
        API used to delete drawing to PMI conversion report 
        
        Signature ``DeleteConversionReport(reportIndex)`` 
        
        :param reportIndex: 
        :type reportIndex: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetConversionReportsCount(self) -> int:
        """
        API used to get count of drawing to PMI conversion reports  
        
        Signature ``GetConversionReportsCount()`` 
        
        :returns: 
        :rtype: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def DeleteConvertedData(self, reportIndex: int) -> None:
        """
        API used to delete drawing to PMI conversion data 
        
        Signature ``DeleteConvertedData(reportIndex)`` 
        
        :param reportIndex: 
        :type reportIndex: int 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    


class BasePointToPointSectionLine(SectionLine):
    """
    Represents a Base Point to Point Section Line.  
    
    This is an abstract class that cannot be instantiated
    
    .. versionadded:: NX10.0.0
    """
    Null: BasePointToPointSectionLine = ...  # unknown typename


class HalfSectionLine(BaseHalfSectionLine):
    """
    Half Section Line is used to create a view with half of the part
    sectioned and the other half un-sectioned.  
    
    Half sections are similar
    to simple and stepped sections in that the cut segment is parallel
    to the defined hinge line. Note that the Half Section Line contains
    only one arrow, one bend, and one cut segment. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SectionViewBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: HalfSectionLine = ...  # unknown typename


class HalfPictorialSectionLine(HalfSectionLine):
    """
    Half Pictorial Section Line is used to create a pictorial view with
    half of the part sectioned and the other half un-sectioned.  
    
    Note that
    the Half Pictorial Section Line contains only one arrow, one bend,
    and one cut segment. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SectionLineBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: HalfPictorialSectionLine = ...  # unknown typename


class RenderSet(NXOpen.NXObject):
    """
    Represents a RenderSet.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyleGeneralBuilder.GetRenderSet`
    
    .. versionadded:: NX7.5.0
    """
    Null: RenderSet = ...  # unknown typename


class ViewStyleSecondaryComponentsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the Secondary Geometry tab on the View Style Dialog (Drawings.  
    
    ViewStyleHiddenLinesBuilder)
    
    .. versionadded:: NX11.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    PrimaryHiddenBySecondaryCFW: VisibleAndHiddenLinesColorFontWidthBuilder = ...
    """
    Returns  the visible and hidden lines color, font, and width of primary geometry that is hidden by secondary geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``PrimaryHiddenBySecondaryCFW`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.VisibleAndHiddenLinesColorFontWidthBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ProcessPrimaryHiddenBySecondary: bool = ...
    """
    Returns or sets  the Primary Geometry Hidden by Secondary Geometry toggle on Secondary Geometry tab of View Style Dialog.  
    
    If true, the primary geometry display properties are processed with respect to the secondary geometry.
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessPrimaryHiddenBySecondary`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessPrimaryHiddenBySecondary`` 
    
    :param processPrimaryHiddenBySecondary: 
    :type processPrimaryHiddenBySecondary: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ProcessSecondaryComponents: bool = ...
    """
    Returns or sets  the Secondary Geometry toggle on Secondary Geometry tab of View Style Dialog.  
    
    If true, the secondary geometry display properties are processed separately from the primary geometry.
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessSecondaryComponents`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessSecondaryComponents`` 
    
    :param processSecondaryComponents: 
    :type processSecondaryComponents: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ProcessSecondaryHiddenByPrimary: bool = ...
    """
    Returns or sets  the Secondary Geometry Hidden by Primary Geometry toggle on Secondary Geometry tab of View Style Dialog.  
    
    If true, the secondary geometry display properties are processed with respect to the primary geometry.
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessSecondaryHiddenByPrimary`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessSecondaryHiddenByPrimary`` 
    
    :param processSecondaryHiddenByPrimary: 
    :type processSecondaryHiddenByPrimary: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondaryComponentsCFW: VisibleAndHiddenLinesColorFontWidthBuilder = ...
    """
    Returns  the visible and hidden lines color, font, and width of secondary geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryComponentsCFW`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.VisibleAndHiddenLinesColorFontWidthBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SecondaryHiddenByPrimaryCFW: VisibleAndHiddenLinesColorFontWidthBuilder = ...
    """
    Returns  the visible and hidden lines color, font, and width of secondary geometry that is hidden by primary geometry.  
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryHiddenByPrimaryCFW`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.VisibleAndHiddenLinesColorFontWidthBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ShowSmoothEdges: bool = ...
    """
    Returns or sets  the Show Smooth Edges toggle on Secondary Geometry tab of View Style Dialog.  
    
    If true, the smooth edges are displayed for secondary geometry.
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSmoothEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSmoothEdges`` 
    
    :param showSmoothEdges: 
    :type showSmoothEdges: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowVirtualIntersections: bool = ...
    """
    Returns or sets  the Show Virtual Intersections toggle on Secondary Geometry tab of View Style Dialog.  
    
    If true, the virtual intersection lines are displayed for secondary geometry.
    
    <hr>
    
    Getter Method
    
    Signature ``ShowVirtualIntersections`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowVirtualIntersections`` 
    
    :param showVirtualIntersections: 
    :type showVirtualIntersections: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleSecondaryComponentsBuilder = ...  # unknown typename


class ViewStyleThreadsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the THREADS tab on the View Style Dialog (Drawings.  
    
    ViewStyleThreadsBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    MinimumPitchFieldData: float = ...
    """
    Returns or sets  the minimum pitch field on the THREADS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumPitchFieldData`` 
    
    :returns:  Returns the minimum pitch field data that is on the threads sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumPitchFieldData`` 
    
    :param minimumPitchFieldData:  Sets a new minimum pitch field data on the threads sub-builder  
    :type minimumPitchFieldData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OverrideVisibleThreadColor: NXOpen.NXColor = ...
    """
    Returns or sets  the override thread color on the THREADS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideVisibleThreadColor`` 
    
    :returns:  Returns the override visible color that is on the threads sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideVisibleThreadColor`` 
    
    :param overrideVisibleThreadColor:  Sets a new override visible color  on the threads sub-builder  
    :type overrideVisibleThreadColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    StandardData: int = ...
    """
    Returns or sets  the standard option data on the THREADS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``StandardData`` 
    
    :returns:  Returns the standard option that is on the threads sub-builder  
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardData`` 
    
    :param standardOptionData:  Sets a new standard option on the threads sub-builder  
    :type standardOptionData: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TrueHiddenLine: bool = ...
    """
    Returns or sets  the true hidden line toggle on the THREADS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``TrueHiddenLine`` 
    
    :returns:  Returns the true hidden line toggle value that is on the threads sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrueHiddenLine`` 
    
    :param trueHiddenLineToggle:  Sets a new true hidden line toggle value on the threads sub-builder  
    :type trueHiddenLineToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleThreadsBuilder = ...  # unknown typename


class SheetTemplateManager():
    """
    Represents a manager of :py:class:`NXOpen.Drawings.DraftingView`s.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Drawings.DrawingSheetCollection`
    
    .. versionadded:: NX5.0.0
    """
    
    def Create(self, pathToPartName: str) -> None:
        """
        Creates drawings via the sheet template, given a path to sheet template 
        
        Signature ``Create(pathToPartName)`` 
        
        :param pathToPartName:  Part name of sheet template  
        :type pathToPartName: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class RefineDisplayBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.RefineDisplayBuilder`.  
    
    This class is
    used to refine regions of lightweight drawing views.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateRefineDisplayBuilder`
    
    .. versionadded:: NX8.0.0
    """
    BoundaryPoint1: NXOpen.Point = ...
    """
    Returns or sets  
    the boundary point1 in drawing coordinates.  
    
    This represents one of the points which defines the region to
    to be refined. 
    If both boundary point1 and point2, are outside the view boundary, the view will not be refined
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryPoint1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryPoint1`` 
    
    :param boundaryPoint1: 
    :type boundaryPoint1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BoundaryPoint2: NXOpen.Point = ...
    """
    Returns or sets  
    the boundary point2 in drawing coordinates.  
    
    This represents one of the points which defines the region to
    to be refined. 
    If both boundary point1 and point2, are outside the view boundary, the view will not be refined
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryPoint2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryPoint2`` 
    
    :param boundaryPoint2: 
    :type boundaryPoint2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    View: SelectDraftingView = ...
    """
    Returns  the view to refine.  
    
    This must be a lightweight drawing view 
    
    <hr>
    
    Getter Method
    
    Signature ``View`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: RefineDisplayBuilder = ...  # unknown typename


class SecondaryGeometryInViewsBuilder(NXOpen.Builder):
    """
    This builder allows the user to select existing view(s) in which
    component objects can be designated as secondary or primary   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateSecondaryGeometryInViewsBuilder`
    
    Default values.
    
    ======================  ================
    Property                Value
    ======================  ================
    Components.ObjectType   PrimaryGeometry 
    ======================  ================
    
    .. versionadded:: NX11.0.0
    """
    Components: DraftingComponentSelectionBuilder = ...
    """
    Returns  the components 
    
    <hr>
    
    Getter Method
    
    Signature ``Components`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingComponentSelectionBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Views: SelectDraftingViewList = ...
    """
    Returns  the views 
    
    <hr>
    
    Getter Method
    
    Signature ``Views`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingViewList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: SecondaryGeometryInViewsBuilder = ...  # unknown typename


class RevolvedSectionLineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.RevolvedSectionLineBuilder`.  
    
    This class is used to create or edit a
    :py:class:`NXOpen.Drawings.RevolvedSectionLine`. 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType` instead.
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndLocation1: NXOpen.Point = ...
    """
    Returns or sets  the end location 1 which determines the position of the
    first arrow segment in the section line.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation1`` 
    
    :param endLocation1: 
    :type endLocation1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: drafting ("DRAFTING")
    """
    EndLocation2: NXOpen.Point = ...
    """
    Returns or sets  the end location 2 which determines the position of the
    second arrow segment in the section line 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation2`` 
    
    :param endLocation2: 
    :type endLocation2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: drafting ("DRAFTING")
    """
    Leg1: SectionLineSegmentBuilderList = ...
    """
    Returns  the list of cut and bend segments for the first leg.  
    
    The list will contain :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes.Cut <NXOpen.Drawings.SectionLineSegmentBuilderTypes>`
    and :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes.Bend <NXOpen.Drawings.SectionLineSegmentBuilderTypes>` types
    of :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` segments.
    
    Note that there is no order to the elements of this list since the order is
    determined by the hinge and arrow direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``Leg1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    """
    Leg2: SectionLineSegmentBuilderList = ...
    """
    Returns  the list of cut and bend segments for the second leg.  
    
    This leg is
    not valid if the single leg indicator is set.
    
    The list will contain :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes.Cut <NXOpen.Drawings.SectionLineSegmentBuilderTypes>`
    and :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes.Bend <NXOpen.Drawings.SectionLineSegmentBuilderTypes>` types
    of :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` segments.
    
    Note that there is no order to the elements of this list since the order is
    determined by the hinge and arrow direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``Leg2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    """
    RotationPoint: NXOpen.Point = ...
    """
    Returns or sets  the rotation point.  
    
    The rotation point identifies position of the axis that
    the section line is to revolve about. 
    
    <hr>
    
    Getter Method
    
    Signature ``RotationPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionLineSegmentsBuilder.RotationPoint`
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RotationPoint`` 
    
    :param rotationPoint: 
    :type rotationPoint: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionLineSegmentsBuilder.RotationPoint`
    
    License requirements: drafting ("DRAFTING")
    """
    SingleLeg: bool = ...
    """
    Returns or sets  the single leg indicator.  
    
    Set this flag to true to create a revolved section line that
    contains only one leg. 
    
    <hr>
    
    Getter Method
    
    Signature ``SingleLeg`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionLineSegmentsBuilder.SingleLeg`
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SingleLeg`` 
    
    :param singleLeg: 
    :type singleLeg: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionLineSegmentsBuilder.SingleLeg`
    
    License requirements: drafting ("DRAFTING")
    """
    Null: RevolvedSectionLineBuilder = ...  # unknown typename


class ZoneOriginMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ZoneOrigin():
    """
    the zone origin 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BottomRight", "Bottom Right"
       "TopLeft", "Top Left"
       "TopRight", "Top Right"
       "BottomLeft", " - "
    """
    BottomRight = 0  # ZoneOriginMemberType
    TopLeft = 1  # ZoneOriginMemberType
    TopRight = 2  # ZoneOriginMemberType
    BottomLeft = 3  # ZoneOriginMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AutomationTemplateRegionBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.AutomationTemplateRegionBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DisplayRegionLabel: bool = ...
    """
    Returns or sets  the flag to indicate if the display region label should be displayed 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayRegionLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayRegionLabel`` 
    
    :param displayRegionLabel: 
    :type displayRegionLabel: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayTemplatePart: bool = ...
    """
    Returns or sets  the value that determines whether or not regions should be displayed in a non-template part.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayTemplatePart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayTemplatePart`` 
    
    :param displayTemplatePart: 
    :type displayTemplatePart: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LineColorFontWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the value that specifies the color font width of region objectsline 
    
    <hr>
    
    Getter Method
    
    Signature ``LineColorFontWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: AutomationTemplateRegionBuilder = ...  # unknown typename


class SelectRegionBuilder(NXOpen.Builder):
    """
    Creates the builder for associating the objects from the screen    
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DrawingRegionCollection.CreateSelectRegionBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def SetAssociatedObjects(self, associateObject: 'list[NXOpen.NXObject]') -> None:
        """
        Set the associated  object 
        
        Signature ``SetAssociatedObjects(associateObject)`` 
        
        :param associateObject:  the list of objects to be associated  
        :type associateObject: list of :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    SelectedRegion: SelectDrawingRegion = ...
    """
    Returns  the get selected region 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDrawingRegion` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SelectRegionBuilder = ...  # unknown typename


class ViewLabelTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewLabelTypes():
    """
    view label type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Name", " - "
       "Letter", " - "
    """
    Name = 0  # ViewLabelTypesMemberType
    Letter = 1  # ViewLabelTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingComponentSelectionBuilderGeometryMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DraftingComponentSelectionBuilderGeometry():
    """
    type of geometry 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "PrimaryGeometry", "indicates the component objects are to be rendered with Primary geometry color/font/width"
       "SecondaryGeometry", "indicates the component objects are to be rendered with Secondary geometry color/font/width"
    """
    PrimaryGeometry = 0  # DraftingComponentSelectionBuilderGeometryMemberType
    SecondaryGeometry = 1  # DraftingComponentSelectionBuilderGeometryMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DraftingComponentSelectionBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This builder allows the user to select a view in which
    component objects can be designated as primary or secondary geometry   
    
    .. versionadded:: NX11.0.0
    """
    
    class Geometry():
        """
        type of geometry 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "PrimaryGeometry", "indicates the component objects are to be rendered with Primary geometry color/font/width"
           "SecondaryGeometry", "indicates the component objects are to be rendered with Secondary geometry color/font/width"
        """
        PrimaryGeometry = 0  # DraftingComponentSelectionBuilderGeometryMemberType
        SecondaryGeometry = 1  # DraftingComponentSelectionBuilderGeometryMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def ResetListToGlobal(self) -> None:
        """
        Reset list of components to those specified by Properties->Drawings->Secondary Geometry 
        
        Signature ``ResetListToGlobal()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def InitializeListFromObject(self, inputObject: NXOpen.NXObject) -> None:
        """
        Initialize list of components from the input object's components list.  
        
        Signature ``InitializeListFromObject(inputObject)`` 
        
        :param inputObject: 
        :type inputObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearSecondaryComponentList(self) -> None:
        """
        Clears the secondary component list.  
        
        Signature ``ClearSecondaryComponentList()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ObjectType: DraftingComponentSelectionBuilderGeometry = ...
    """
    Returns or sets  the object type 
    
    <hr>
    
    Getter Method
    
    Signature ``ObjectType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingComponentSelectionBuilderGeometry` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ObjectType`` 
    
    :param objectType: 
    :type objectType: :py:class:`NXOpen.Drawings.DraftingComponentSelectionBuilderGeometry` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Objects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the selected objects (part occurrences) based on current object type 
    
    <hr>
    
    Getter Method
    
    Signature ``Objects`` 
    
    :returns:  list of part occurrences  
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Part: NXOpen.Part = ...
    """
    Returns or sets  the part to use for populating the primary and secondary components object list 
    
    <hr>
    
    Getter Method
    
    Signature ``Part`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Part`` 
    
    :param part: 
    :type part: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    PartForKF: NXOpen.Part = ...
    """
    Returns  the part to use for populating the primary and secondary components object list 
    
    <hr>
    
    Getter Method
    
    Signature ``PartForKF`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: DraftingComponentSelectionBuilder = ...  # unknown typename


class TrimmingMarkStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class TrimmingMarkStyleType():
    """
    the trimming mark style type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Triangle", "Triangle"
       "Corner", " - "
    """
    Triangle = 0  # TrimmingMarkStyleTypeMemberType
    Corner = 1  # TrimmingMarkStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewProjectionPlaneBuilderPlaneOptionsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewProjectionPlaneBuilderPlaneOptions():
    """
    the plane options to select 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inferred", "Inferred plane from vector, point and plane view"
       "DepthValue", "Get plane using source view and depth value"
    """
    Inferred = 0  # ViewProjectionPlaneBuilderPlaneOptionsMemberType
    DepthValue = 1  # ViewProjectionPlaneBuilderPlaneOptionsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewProjectionPlaneBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the View Projection Plane (Drawings.  
    
    ViewProjectionPlaneBuilder)
    
    .. versionadded:: NX6.0.2
    """
    
    class PlaneOptions():
        """
        the plane options to select 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inferred", "Inferred plane from vector, point and plane view"
           "DepthValue", "Get plane using source view and depth value"
        """
        Inferred = 0  # ViewProjectionPlaneBuilderPlaneOptionsMemberType
        DepthValue = 1  # ViewProjectionPlaneBuilderPlaneOptionsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Axis: NXOpen.Axis = ...
    """
    Returns or sets  the axis, define the vector and the point from which to infer the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``Axis`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Axis`` 
    
    :param axis: 
    :type axis: :py:class:`NXOpen.Axis` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    DepthValue: NXOpen.Expression = ...
    """
    Returns  the depth value 
    
    <hr>
    
    Getter Method
    
    Signature ``DepthValue`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    PlaneOption: ViewProjectionPlaneBuilderPlaneOptions = ...
    """
    Returns or sets  the plane option, decide how to get the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``PlaneOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectionPlaneBuilderPlaneOptions` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlaneOption`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.Drawings.ViewProjectionPlaneBuilderPlaneOptions` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    View: SelectDraftingView = ...
    """
    Returns  the select view.  
    
    This defines the plane view. 
    
    <hr>
    
    Getter Method
    
    Signature ``View`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    Null: ViewProjectionPlaneBuilder = ...  # unknown typename


class AnnotationSettingsBuilderUnitsEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AnnotationSettingsBuilderUnitsEnum():
    """
    enum is used to list out different unit types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UseTargetPartUnits", " - "
       "UseDrawingUnits", " - "
    """
    UseTargetPartUnits = 0  # AnnotationSettingsBuilderUnitsEnumMemberType
    UseDrawingUnits = 1  # AnnotationSettingsBuilderUnitsEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AnnotationSettingsBuilderAnnotationTypeEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AnnotationSettingsBuilderAnnotationTypeEnum():
    """
    enum is used to list out annotation types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Dimension", " - "
       "Note", " - "
       "FeatureControlFrame", " - "
       "DatumFeatureSymbol", " - "
       "DatumTarget", " - "
       "Balloon", " - "
       "SurfaceFinishSymbol", " - "
       "WeldSymbol", " - "
       "CustomSymbol", " - "
       "CenterLine", " - "
       "UserDefinedSymbol", " - "
       "MaxAnnotationYypes", " - "
    """
    Dimension = 0  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    Note = 1  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    FeatureControlFrame = 2  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    DatumFeatureSymbol = 3  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    DatumTarget = 4  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    Balloon = 5  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    SurfaceFinishSymbol = 6  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    WeldSymbol = 7  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    CustomSymbol = 8  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    CenterLine = 9  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    UserDefinedSymbol = 10  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    MaxAnnotationYypes = 11  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AnnotationSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`Drawings.AnnotationSettingsBuilder`.  
    
    This class queries and sets settings specific to drawings data which will get converted to PMIs.
    
    .. versionadded:: NX11.0.0
    """
    
    class UnitsEnum():
        """
        enum is used to list out different unit types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UseTargetPartUnits", " - "
           "UseDrawingUnits", " - "
        """
        UseTargetPartUnits = 0  # AnnotationSettingsBuilderUnitsEnumMemberType
        UseDrawingUnits = 1  # AnnotationSettingsBuilderUnitsEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class AnnotationTypeEnum():
        """
        enum is used to list out annotation types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Dimension", " - "
           "Note", " - "
           "FeatureControlFrame", " - "
           "DatumFeatureSymbol", " - "
           "DatumTarget", " - "
           "Balloon", " - "
           "SurfaceFinishSymbol", " - "
           "WeldSymbol", " - "
           "CustomSymbol", " - "
           "CenterLine", " - "
           "UserDefinedSymbol", " - "
           "MaxAnnotationYypes", " - "
        """
        Dimension = 0  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        Note = 1  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        FeatureControlFrame = 2  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        DatumFeatureSymbol = 3  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        DatumTarget = 4  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        Balloon = 5  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        SurfaceFinishSymbol = 6  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        WeldSymbol = 7  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        CustomSymbol = 8  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        CenterLine = 9  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        UserDefinedSymbol = 10  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        MaxAnnotationYypes = 11  # AnnotationSettingsBuilderAnnotationTypeEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SaveAnnotationType(self, annType: AnnotationSettingsBuilderAnnotationTypeEnum, annValue: bool) -> None:
        """
        API used to save settings data 
        
        Signature ``SaveAnnotationType(annType, annValue)`` 
        
        :param annType: 
        :type annType: :py:class:`NXOpen.Drawings.AnnotationSettingsBuilderAnnotationTypeEnum` 
        :param annValue: 
        :type annValue: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ConvertToOriginalModelView: bool = ...
    """
    Returns or sets  the convert to original model view  
    
    <hr>
    
    Getter Method
    
    Signature ``ConvertToOriginalModelView`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConvertToOriginalModelView`` 
    
    :param convertToOriginalModelView: 
    :type convertToOriginalModelView: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LinearDimensionTolerance: float = ...
    """
    Returns or sets  the linear dimension tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``LinearDimensionTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LinearDimensionTolerance`` 
    
    :param linearDimensionTolerance: 
    :type linearDimensionTolerance: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PreserveDraftingLayer: bool = ...
    """
    Returns or sets  the preserve drafting layer  
    
    <hr>
    
    Getter Method
    
    Signature ``PreserveDraftingLayer`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreserveDraftingLayer`` 
    
    :param preserveDraftingLayer: 
    :type preserveDraftingLayer: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PreserveHiddenStatus: bool = ...
    """
    Returns or sets  the preserve hidden status 
    
    <hr>
    
    Getter Method
    
    Signature ``PreserveHiddenStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PreserveHiddenStatus`` 
    
    :param preserveHiddenStatus: 
    :type preserveHiddenStatus: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ProcessObjectsHidden: bool = ...
    """
    Returns or sets  the process objects hidden  
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessObjectsHidden`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessObjectsHidden`` 
    
    :param processObjectsHidden: 
    :type processObjectsHidden: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Units: AnnotationSettingsBuilderUnitsEnum = ...
    """
    Returns or sets  the units 
    
    <hr>
    
    Getter Method
    
    Signature ``Units`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.AnnotationSettingsBuilderUnitsEnum` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Units`` 
    
    :param units: 
    :type units: :py:class:`NXOpen.Drawings.AnnotationSettingsBuilderUnitsEnum` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: AnnotationSettingsBuilder = ...  # unknown typename


class SectionLineSegmentBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionLineSegmentBuilderTypes():
    """
    the point 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angle", "Section line cut segment used by: :py:class:`NXOpen.Drawings.PointAndAngleSectionLineBuilder`."
       "Cut", "Section line cut segment used by: :py:class:`NXOpen.Drawings.PointToPointSectionLineBuilder` :py:class:`NXOpen.Drawings.RevolvedSectionLineBuilder` :py:class:`NXOpen.Drawings.SteppedSectionLineBuilder`"
       "Bend", "Section line bend segment used by: :py:class:`NXOpen.Drawings.PointToPointSectionLineBuilder` :py:class:`NXOpen.Drawings.RevolvedSectionLineBuilder` :py:class:`NXOpen.Drawings.SteppedSectionLineBuilder`"
    """
    Angle = 0  # SectionLineSegmentBuilderTypesMemberType
    Cut = 1  # SectionLineSegmentBuilderTypesMemberType
    Bend = 2  # SectionLineSegmentBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineSegmentBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder`.  
    
    This class is used by the following classes to create and/or edit a
    section line segment:
    :py:class:`NXOpen.Drawings.SteppedSectionLine`
    :py:class:`NXOpen.Drawings.RevolvedSectionLine`
    :py:class:`NXOpen.Drawings.PointToPointSectionLine`
    :py:class:`NXOpen.Drawings.PointAndAngleSectionLine`
    :py:class:`NXOpen.Drawings.PictorialSectionLine` 
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.SectionLineCollection.CreateSectionLineSegmentBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class Types():
        """
        the point 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angle", "Section line cut segment used by: :py:class:`NXOpen.Drawings.PointAndAngleSectionLineBuilder`."
           "Cut", "Section line cut segment used by: :py:class:`NXOpen.Drawings.PointToPointSectionLineBuilder` :py:class:`NXOpen.Drawings.RevolvedSectionLineBuilder` :py:class:`NXOpen.Drawings.SteppedSectionLineBuilder`"
           "Bend", "Section line bend segment used by: :py:class:`NXOpen.Drawings.PointToPointSectionLineBuilder` :py:class:`NXOpen.Drawings.RevolvedSectionLineBuilder` :py:class:`NXOpen.Drawings.SteppedSectionLineBuilder`"
        """
        Angle = 0  # SectionLineSegmentBuilderTypesMemberType
        Cut = 1  # SectionLineSegmentBuilderTypesMemberType
        Bend = 2  # SectionLineSegmentBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the angle.  
    
    The segment angle is only valid for segments of type 
    :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes.Angle <NXOpen.Drawings.SectionLineSegmentBuilderTypes>` .
    The angle is defined to be the angle between the drawing's X direction
    and the segment. 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Point: NXOpen.Point = ...
    """
    Returns or sets  the point 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Type: SectionLineSegmentBuilderTypes = ...
    """
    Returns or sets  the section line segment type 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SectionLineSegmentBuilder = ...  # unknown typename


class ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewType():
    """
    Represents display arrow on parent view
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "No", " - "
       "NonOrtho", " - "
       "All", " - "
    """
    No = 0  # ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewTypeMemberType
    NonOrtho = 1  # ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewTypeMemberType
    All = 2  # ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewProjectedViewSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewProjectedViewSettingsBuilder`   
    
    .. versionadded:: NX9.0.0
    """
    
    class DisplayArrowOnParentViewType():
        """
        Represents display arrow on parent view
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "No", " - "
           "NonOrtho", " - "
           "All", " - "
        """
        No = 0  # ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewTypeMemberType
        NonOrtho = 1  # ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewTypeMemberType
        All = 2  # ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DisplayArrowOnParentView: ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewType = ...
    """
    Returns or sets  the display arrow on parent view 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayArrowOnParentView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayArrowOnParentView`` 
    
    :param displayArrowOnParentView: 
    :type displayArrowOnParentView: :py:class:`NXOpen.Drawings.ViewProjectedViewSettingsBuilderDisplayArrowOnParentViewType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewProjectedViewSettingsBuilder = ...  # unknown typename


class DrawingSheetBuilderSheetOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetBuilderSheetOption():
    """
    the options for specifying the attributes of the new drawing sheet to be created. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "UseTemplate", "a drawing sheet template"
       "StandardSize", "a standard size drawing sheet"
       "CustomSize", "a custom size drawing sheet"
    """
    UseTemplate = 0  # DrawingSheetBuilderSheetOptionMemberType
    StandardSize = 1  # DrawingSheetBuilderSheetOptionMemberType
    CustomSize = 2  # DrawingSheetBuilderSheetOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetBuilderSheetStandardMetricScaleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetBuilderSheetStandardMetricScale():
    """
    the standard Metric drawing sheet scales 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "S501", "a scale of 50:1"
       "S201", "a scale of 20:1"
       "S101", "a scale of 10:1"
       "S51", "a scale of 5:1"
       "S21", "a scale of 2:1"
       "S11", "a scale of 1:1"
       "S12", "a scale of 1:2"
       "S15", "a scale of 1:5"
       "S110", "a scale of 1:10"
       "S120", "a scale of 1:20"
       "S150", "a scale of 1:50"
       "S1100", "a scale of 1:100"
       "Custom", "a custom scale"
    """
    S501 = 0  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S201 = 1  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S101 = 2  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S51 = 3  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S21 = 4  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S11 = 5  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S12 = 6  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S15 = 7  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S110 = 8  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S120 = 9  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S150 = 10  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    S1100 = 11  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    Custom = 12  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetBuilderSheetStandardEnglishScaleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetBuilderSheetStandardEnglishScale():
    """
    the standard English drawing sheet scales 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "S81", "a scale of 8:1"
       "S41", "a scale of 4:1"
       "S21", "a scale of 2:1"
       "S11", "a scale of 1:1"
       "S12", "a scale of 1:2"
       "S14", "a scale of 1:4"
       "S18", "a scale of 1:8"
       "Custom", "a custom scale"
    """
    S81 = 0  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
    S41 = 1  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
    S21 = 2  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
    S11 = 3  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
    S12 = 4  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
    S14 = 5  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
    S18 = 6  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
    Custom = 7  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetBuilderSheetUnitsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetBuilderSheetUnits():
    """
    the drawing sheet units 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Metric", "a Metric units drawing sheet"
       "English", "an English units drawing sheet"
    """
    Metric = 0  # DrawingSheetBuilderSheetUnitsMemberType
    English = 1  # DrawingSheetBuilderSheetUnitsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetBuilderSheetProjectionAngleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetBuilderSheetProjectionAngle():
    """
    the drawing sheet projection angle 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "First", "first angle projection"
       "Third", "third angle projection"
    """
    First = 0  # DrawingSheetBuilderSheetProjectionAngleMemberType
    Third = 1  # DrawingSheetBuilderSheetProjectionAngleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetBuilderSheetModeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetBuilderSheetMode():
    """
    the drawing sheet dialog mode 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Create", "create mode"
       "Edit", "edit mode"
    """
    Create = 0  # DrawingSheetBuilderSheetModeMemberType
    Edit = 1  # DrawingSheetBuilderSheetModeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetBuilderSheetBaseordrawingViewMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetBuilderSheetBaseordrawingView():
    """
    the base view or drawing view option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Base", "auto start base view"
       "Drawing", "auto start drawing view"
    """
    Base = 0  # DrawingSheetBuilderSheetBaseordrawingViewMemberType
    Drawing = 1  # DrawingSheetBuilderSheetBaseordrawingViewMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.DrawingSheetBuilder`
    
    This class was made abstract in NX12 and the creator (JA_DRAWING_SHEET_COLLECTION_drawing_sheet_builder) was deprecated
    
    .. versionadded:: NX5.0.0
    """
    
    class SheetOption():
        """
        the options for specifying the attributes of the new drawing sheet to be created. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "UseTemplate", "a drawing sheet template"
           "StandardSize", "a standard size drawing sheet"
           "CustomSize", "a custom size drawing sheet"
        """
        UseTemplate = 0  # DrawingSheetBuilderSheetOptionMemberType
        StandardSize = 1  # DrawingSheetBuilderSheetOptionMemberType
        CustomSize = 2  # DrawingSheetBuilderSheetOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SheetStandardMetricScale():
        """
        the standard Metric drawing sheet scales 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "S501", "a scale of 50:1"
           "S201", "a scale of 20:1"
           "S101", "a scale of 10:1"
           "S51", "a scale of 5:1"
           "S21", "a scale of 2:1"
           "S11", "a scale of 1:1"
           "S12", "a scale of 1:2"
           "S15", "a scale of 1:5"
           "S110", "a scale of 1:10"
           "S120", "a scale of 1:20"
           "S150", "a scale of 1:50"
           "S1100", "a scale of 1:100"
           "Custom", "a custom scale"
        """
        S501 = 0  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S201 = 1  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S101 = 2  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S51 = 3  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S21 = 4  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S11 = 5  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S12 = 6  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S15 = 7  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S110 = 8  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S120 = 9  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S150 = 10  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        S1100 = 11  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        Custom = 12  # DrawingSheetBuilderSheetStandardMetricScaleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SheetStandardEnglishScale():
        """
        the standard English drawing sheet scales 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "S81", "a scale of 8:1"
           "S41", "a scale of 4:1"
           "S21", "a scale of 2:1"
           "S11", "a scale of 1:1"
           "S12", "a scale of 1:2"
           "S14", "a scale of 1:4"
           "S18", "a scale of 1:8"
           "Custom", "a custom scale"
        """
        S81 = 0  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
        S41 = 1  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
        S21 = 2  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
        S11 = 3  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
        S12 = 4  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
        S14 = 5  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
        S18 = 6  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
        Custom = 7  # DrawingSheetBuilderSheetStandardEnglishScaleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SheetUnits():
        """
        the drawing sheet units 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Metric", "a Metric units drawing sheet"
           "English", "an English units drawing sheet"
        """
        Metric = 0  # DrawingSheetBuilderSheetUnitsMemberType
        English = 1  # DrawingSheetBuilderSheetUnitsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SheetProjectionAngle():
        """
        the drawing sheet projection angle 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "First", "first angle projection"
           "Third", "third angle projection"
        """
        First = 0  # DrawingSheetBuilderSheetProjectionAngleMemberType
        Third = 1  # DrawingSheetBuilderSheetProjectionAngleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SheetMode():
        """
        the drawing sheet dialog mode 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Create", "create mode"
           "Edit", "edit mode"
        """
        Create = 0  # DrawingSheetBuilderSheetModeMemberType
        Edit = 1  # DrawingSheetBuilderSheetModeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SheetBaseordrawingView():
        """
        the base view or drawing view option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Base", "auto start base view"
           "Drawing", "auto start drawing view"
        """
        Base = 0  # DrawingSheetBuilderSheetBaseordrawingViewMemberType
        Drawing = 1  # DrawingSheetBuilderSheetBaseordrawingViewMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    AutoStartBaseView: bool = ...
    """
    Returns or sets  the setting that controls whether or not the Add Base View command is automatically 
    started after inserting a sheet that has no views on it.  
    
    This option does not appear for Edit Sheet. 
    the toggle is changed to be auto start view creation in Nx7.0, obsolete.
    
    <hr>
    
    Getter Method
    
    Signature ``AutoStartBaseView`` 
    
    :returns:  the add base view automatic start toggle  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Drawings.DrawingSheetBuilder.AutoStartViewCreation` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoStartBaseView`` 
    
    :param autoStartBaseView:  the add base view automatic start toggle  
    :type autoStartBaseView: bool 
    
    .. versionadded:: NX5.0.0
    
    .. deprecated::  NX7.5.0
       Use :py:meth:`NXOpen.Drawings.DrawingSheetBuilder.AutoStartViewCreation` instead.
    
    License requirements: None.
    """
    AutoStartViewCreation: bool = ...
    """
    Returns or sets  the setting that controls whether or not the Add View creation is automatically 
    started after inserting a sheet that has no views on it.  
    
    This option does not appear for Edit Sheet.             
    
    <hr>
    
    Getter Method
    
    Signature ``AutoStartViewCreation`` 
    
    :returns:  the automatically start view creation  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutoStartViewCreation`` 
    
    :param autoStartViewCreation:  the automatically start view creation  
    :type autoStartViewCreation: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    BaseordrawingView: DrawingSheetBuilderSheetBaseordrawingView = ...
    """
    Returns or sets  the option of base view or drawing view 
    
    <hr>
    
    Getter Method
    
    Signature ``BaseordrawingView`` 
    
    :returns:  the type of view to automatically start creating 
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetBaseordrawingView` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaseordrawingView`` 
    
    :param option:  the type of view to automatically start creating  
    :type option: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetBaseordrawingView` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    EnglishSheetTemplateLocation: str = ...
    """
    Returns or sets  the location of the english drawing sheet template to be added to the part file 
    
    <hr>
    
    Getter Method
    
    Signature ``EnglishSheetTemplateLocation`` 
    
    :returns:  the drawing sheet template location  
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EnglishSheetTemplateLocation`` 
    
    :param englishSheetTemplateLocation:  english drawing sheet template location  
    :type englishSheetTemplateLocation: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Height: float = ...
    """
    Returns or sets  the custom or standard height for the drawing sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns:  the custom or standard height for the drawing sheet  
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Height`` 
    
    :param height:  the custom or standard height for the drawing sheet  
    :type height: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Length: float = ...
    """
    Returns or sets  the custom or standard length to be used for the drawing to be created or edited.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns:  custom or standard length for the drawing sheet  
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Length`` 
    
    :param length:  the custom or standard length for the drawing sheet  
    :type length: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    MetricSheetTemplateLocation: str = ...
    """
    Returns or sets  the location of the metric drawing sheet template to be added to the part file 
    
    <hr>
    
    Getter Method
    
    Signature ``MetricSheetTemplateLocation`` 
    
    :returns:  the drawing sheet template location  
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MetricSheetTemplateLocation`` 
    
    :param metricSheetTemplateLocation:  metric drawing sheet template location  
    :type metricSheetTemplateLocation: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Name: str = ...
    """
    Returns or sets  the name of the drawing sheet to be created or edited 
    
    <hr>
    
    Getter Method
    
    Signature ``Name`` 
    
    :returns:  the drawing sheet name  
    :rtype: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Name`` 
    
    :param name:  drawing sheet name  
    :type name: str 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Number: str = ...
    """
    Returns or sets  the number of the drawing sheet to be created or edited 
    
    <hr>
    
    Getter Method
    
    Signature ``Number`` 
    
    :returns:  the drawing sheet number  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Number`` 
    
    :param number:  the drawing sheet number  
    :type number: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Option: DrawingSheetBuilderSheetOption = ...
    """
    Returns or sets  the option to be used to create the drawing sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``Option`` 
    
    :returns:  the option to be used to create the drawing sheet  
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Option`` 
    
    :param option:  the option to be used to create the drawing sheet  
    :type option: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ProjectionAngle: DrawingSheetBuilderSheetProjectionAngle = ...
    """
    Returns or sets  the projection_angle option 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectionAngle`` 
    
    :returns:  the projection_angle option  
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetProjectionAngle` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProjectionAngle`` 
    
    :param projectionAngle:  the projection_angle option  
    :type projectionAngle: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetProjectionAngle` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Revision: str = ...
    """
    Returns or sets  the revision of the drawing sheet to be created or edited 
    
    <hr>
    
    Getter Method
    
    Signature ``Revision`` 
    
    :returns:  the drawing sheet revision  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Revision`` 
    
    :param revision:  the drawing sheet revision  
    :type revision: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScaleDenominator: float = ...
    """
    Returns or sets  the denominator of a custom scale 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleDenominator`` 
    
    :returns:  the denominator of a custom scale  
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleDenominator`` 
    
    :param scaleDenominator:  the denominator of a custom scale  
    :type scaleDenominator: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScaleNumerator: float = ...
    """
    Returns or sets  the numerator of a custom scale 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleNumerator`` 
    
    :returns:  the numerator of a custom scale  
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleNumerator`` 
    
    :param scaleNumerator: 
    :type scaleNumerator: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondaryNumber: str = ...
    """
    Returns or sets  the secondary number of the drawing sheet to be created or edited 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryNumber`` 
    
    :returns:  the drawing sheet secondary number  
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryNumber`` 
    
    :param secondaryNumber:  the drawing sheet secondary number  
    :type secondaryNumber: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    StandardEnglishScale: DrawingSheetBuilderSheetStandardEnglishScale = ...
    """
    Returns or sets  the standard English drawing scale 
    
    <hr>
    
    Getter Method
    
    Signature ``StandardEnglishScale`` 
    
    :returns:  the standard English drawing scale  
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetStandardEnglishScale` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardEnglishScale`` 
    
    :param englishScale:  the standard English drawing scale  
    :type englishScale: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetStandardEnglishScale` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    StandardMetricScale: DrawingSheetBuilderSheetStandardMetricScale = ...
    """
    Returns or sets  the standard Metric drawing scale 
    
    <hr>
    
    Getter Method
    
    Signature ``StandardMetricScale`` 
    
    :returns:  the standard Metric drawing scale  
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetStandardMetricScale` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StandardMetricScale`` 
    
    :param metricScale:  the standard Metric drawing scale  
    :type metricScale: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetStandardMetricScale` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Units: DrawingSheetBuilderSheetUnits = ...
    """
    Returns or sets  the units for the drawing sheet 
    
    <hr>
    
    Getter Method
    
    Signature ``Units`` 
    
    :returns:  the units for the drawing sheet  
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetUnits` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Units`` 
    
    :param units:  the units for the drawing sheet  
    :type units: :py:class:`NXOpen.Drawings.DrawingSheetBuilderSheetUnits` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: DrawingSheetBuilder = ...  # unknown typename


class ViewStyleTraceLinesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the TRACE LINES tab on the View Style Dialog (Drawings.  
    
    ViewStyleTraceLinesBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CreateGaps: bool = ...
    """
    Returns or sets  the create gaps toggle on the TRACE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGaps`` 
    
    :returns:  Returns the create gaps toggle value that is on the trace lines sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGaps`` 
    
    :param createGapsToggle:  Sets a new create gaps toggle value on the trace lines sub-builder  
    :type createGapsToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    GapSize: float = ...
    """
    Returns or sets  the gap size on the TRACE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``GapSize`` 
    
    :returns:  Returns the gap size that is on the trace lines sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GapSize`` 
    
    :param gapSize:  Sets a new gap size on the trace lines sub-builder  
    :type gapSize: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenColor: NXOpen.NXColor = ...
    """
    Returns or sets  the hidden color on the TRACE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenColor`` 
    
    :returns:  Returns the hidden color that is on the trace lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenColor`` 
    
    :param hiddenColor:  Sets a new hidden color on the trace lines sub-builder  
    :type hiddenColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the hidden font on the TRACE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenFont`` 
    
    :returns:  Returns the hidden font that is on the trace lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenFont`` 
    
    :param hiddenFont:  Sets a new hidden font on the trace lines sub-builder  
    :type hiddenFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the hidden width on the TRACE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenWidth`` 
    
    :returns:  Returns the hidden width that is on the trace lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenWidth`` 
    
    :param hiddenWidth:  Sets a new hidden width on the trace lines sub-builder  
    :type hiddenWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the visible color on the TRACE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleColor`` 
    
    :returns:  Returns the visible color that is on the trace lines sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleColor`` 
    
    :param visibleColor:  Sets a new visible color on the trace lines sub-builder  
    :type visibleColor: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the visible font on the TRACE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleFont`` 
    
    :returns:  Returns the visible font that is on the trace lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleFont`` 
    
    :param font:  Sets a new visible font on the trace lines sub-builder  
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the visible width on the TRACE LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleWidth`` 
    
    :returns:  Returns the visible width that is on the trace lines sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleWidth`` 
    
    :param width:  Sets a new visible width on the trace lines sub-builder  
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleTraceLinesBuilder = ...  # unknown typename


class DrawingRegionCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of drawing regions   
    
    Use :py:meth:`NXOpen.Drawings.DrawingRegion` to get the instance of this class.
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateDrawingRegionBuilder(self, object: DrawingRegion) -> DrawingRegionBuilder:
        """
        Creates the DrawingRegion builder  
        
        Signature ``CreateDrawingRegionBuilder(object)`` 
        
        :param object: 
        :type object: :py:class:`NXOpen.Drawings.DrawingRegion` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.DrawingRegionBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    
    def CreateAddObjectsToRegionBuilder(self) -> AddObjectsToRegionBuilder:
        """
        Creates add objects to region builder  
        
        Signature ``CreateAddObjectsToRegionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.AddObjectsToRegionBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    
    def CreateSelectRegionBuilder(self) -> SelectRegionBuilder:
        """
        Creates select region builder  
        
        Signature ``CreateSelectRegionBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SelectRegionBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    
    def CreateRemoveObjectsBuilder(self) -> RemoveObjectsBuilder:
        """
        Creates remove objects builder  
        
        Signature ``CreateRemoveObjectsBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.RemoveObjectsBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    
    def FindObject(self, name: str) -> DrawingRegion:
        """
        Finds the :py:class:`NXOpen.Drawings.DrawingRegion` with the given name.  
        
        An exception will be thrown if no object can be found with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Region name  
        :type name: str 
        :returns:   Drawing Region object  
        :rtype: :py:class:`NXOpen.Drawings.DrawingRegion` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    


class ProjectedViewOrientationBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ProjectedViewOrientationBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Restore(self) -> None:
        """
        Removes the associativity to the defined plane and x direction vector and restores 
        the member view to its default orientation.  
        
        Signature ``Restore()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    NormalDirection: NXOpen.Xform = ...
    """
    Returns or sets  the xform that represents the orthographic projected view settings to be edited 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Xform` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NormalDirection`` 
    
    :param normalDirection: 
    :type normalDirection: :py:class:`NXOpen.Xform` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    XDirection: NXOpen.Direction = ...
    """
    Returns or sets  the x direction vector for the orthographic projected view settings to be edited 
    
    <hr>
    
    Getter Method
    
    Signature ``XDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``XDirection`` 
    
    :param xDirection: 
    :type xDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ProjectedViewOrientationBuilder = ...  # unknown typename


class RevolvedSectionLine(SectionLine):
    """
    Revolved Section Line is used to create section views which are
    revolved about an axis.  
    
    A revolved section line can contain a
    single revolved cut, or it can contain steps to form multiple cuts.
    In either case, all cut planes resulting from the section line cuts
    are revolved into a common plane for the Revolved Section View. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SectionViewBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: RevolvedSectionLine = ...  # unknown typename


class ShipDraftingViewLinesViewStyleLinesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ShipDraftingViewLinesViewStyleLines():
    """
    Line type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "HiddenNonsection", "Hidden, NonSection"
       "VisibleNonsection", "Visible, NonSection"
       "HiddenSection", "Hidden, Section"
       "VisibleSection", "Visible, Section"
       "SecondaryHiddenNonsection", "Secondary, Hidden, NonSection"
       "SecondaryVisibleNonsection", "Secondary, Visible, NonSection"
       "SecondaryHiddenSection", "Secondary, Hidden, Section"
       "SecondaryVisibleSection", "Secondary, Visible, Section"
    """
    HiddenNonsection = 0  # ShipDraftingViewLinesViewStyleLinesMemberType
    VisibleNonsection = 1  # ShipDraftingViewLinesViewStyleLinesMemberType
    HiddenSection = 2  # ShipDraftingViewLinesViewStyleLinesMemberType
    VisibleSection = 3  # ShipDraftingViewLinesViewStyleLinesMemberType
    SecondaryHiddenNonsection = 4  # ShipDraftingViewLinesViewStyleLinesMemberType
    SecondaryVisibleNonsection = 5  # ShipDraftingViewLinesViewStyleLinesMemberType
    SecondaryHiddenSection = 6  # ShipDraftingViewLinesViewStyleLinesMemberType
    SecondaryVisibleSection = 7  # ShipDraftingViewLinesViewStyleLinesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ShipDraftingViewLinesViewStyle():
    """
    Represents set of Ship Drafting Lines View Style applicable to drafting views.  
    
    Ship Drafting View lines are used for the features in Ship Design 
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.ShipDraftingViewLines`
    
    .. versionadded:: NX10.0.0
    """
    
    class Lines():
        """
        Line type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "HiddenNonsection", "Hidden, NonSection"
           "VisibleNonsection", "Visible, NonSection"
           "HiddenSection", "Hidden, Section"
           "VisibleSection", "Visible, Section"
           "SecondaryHiddenNonsection", "Secondary, Hidden, NonSection"
           "SecondaryVisibleNonsection", "Secondary, Visible, NonSection"
           "SecondaryHiddenSection", "Secondary, Hidden, Section"
           "SecondaryVisibleSection", "Secondary, Visible, Section"
        """
        HiddenNonsection = 0  # ShipDraftingViewLinesViewStyleLinesMemberType
        VisibleNonsection = 1  # ShipDraftingViewLinesViewStyleLinesMemberType
        HiddenSection = 2  # ShipDraftingViewLinesViewStyleLinesMemberType
        VisibleSection = 3  # ShipDraftingViewLinesViewStyleLinesMemberType
        SecondaryHiddenNonsection = 4  # ShipDraftingViewLinesViewStyleLinesMemberType
        SecondaryVisibleNonsection = 5  # ShipDraftingViewLinesViewStyleLinesMemberType
        SecondaryHiddenSection = 6  # ShipDraftingViewLinesViewStyleLinesMemberType
        SecondaryVisibleSection = 7  # ShipDraftingViewLinesViewStyleLinesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetShipDrawingObject(self, featureName: str, singleLine: bool) -> None:
        """
        Note: The initial values are set based on the file NX_ShipAttribute.  
        
        xml
        The status determines the line settings for the ship feature in a view.
        
        Signature ``SetShipDrawingObject(featureName, singleLine)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param singleLine:  status that determines SLR for the feature  
        :type singleLine: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def GetShipDrawingObject(self, featureName: str) -> bool:
        """
        Get ship drawing object status.  
        
        Signature ``GetShipDrawingObject(featureName)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :returns:  status that determines SLR for the feature  
        :rtype: bool 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetColor(self, featureName: str, linesType: ShipDraftingViewLinesViewStyleLines, color: NXOpen.NXColor) -> None:
        """
        The color of ship line.  
        
        The value should be between UF_OBJ_MIN_COLOR and UF_OBJ_MAX_COLOR. 
        
        Signature ``SetColor(featureName, linesType, color)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesViewStyleLines` 
        :param color:  Color  
        :type color: Id 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def GetColor(self, featureName: str, linesType: ShipDraftingViewLinesViewStyleLines) -> NXOpen.NXColor:
        """
        Gets line color.  
        
        Signature ``GetColor(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesViewStyleLines` 
        :returns: 
        :rtype: Id 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetFont(self, featureName: str, linesType: ShipDraftingViewLinesViewStyleLines, font: NXOpen.Preferences.Font) -> None:
        """
        The font type of ship line.  
        
        Signature ``SetFont(featureName, linesType, font)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesViewStyleLines` 
        :param font:  Font  
        :type font: :py:class:`NXOpen.Preferences.Font` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def GetFont(self, featureName: str, linesType: ShipDraftingViewLinesViewStyleLines) -> NXOpen.Preferences.Font:
        """
        Gets line font.  
        
        Signature ``GetFont(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesViewStyleLines` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.Font` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetWidth(self, featureName: str, linesType: ShipDraftingViewLinesViewStyleLines, width: NXOpen.Preferences.Width) -> None:
        """
        The width of ship line.  
        
        Signature ``SetWidth(featureName, linesType, width)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesViewStyleLines` 
        :param width:  Width  
        :type width: :py:class:`NXOpen.Preferences.Width` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def GetWidth(self, featureName: str, linesType: ShipDraftingViewLinesViewStyleLines) -> NXOpen.Preferences.Width:
        """
        Gets line width  
        
        Signature ``GetWidth(featureName, linesType)`` 
        
        :param featureName:  feature name e.g. decks, bulkheads etc. 
        :type featureName: str 
        :param linesType:  visible or hidden line type  
        :type linesType: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesViewStyleLines` 
        :returns: 
        :rtype: :py:class:`NXOpen.Preferences.Width` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    


class ViewBreakBuilderViewbreaklinestyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewBreakBuilderViewbreaklinestyle():
    """
    style for view break line 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Simple", " - "
       "Straight", " - "
       "Sawtooth", " - "
       "LongBreak", " - "
       "Tubular", " - "
       "SolidTubular", " - "
       "SolidRod", " - "
       "Jigsaw", " - "
       "Wood", " - "
       "CopyCurve", " - "
       "TemplateCurve", " - "
    """
    Simple = 0  # ViewBreakBuilderViewbreaklinestyleMemberType
    Straight = 1  # ViewBreakBuilderViewbreaklinestyleMemberType
    Sawtooth = 2  # ViewBreakBuilderViewbreaklinestyleMemberType
    LongBreak = 3  # ViewBreakBuilderViewbreaklinestyleMemberType
    Tubular = 4  # ViewBreakBuilderViewbreaklinestyleMemberType
    SolidTubular = 5  # ViewBreakBuilderViewbreaklinestyleMemberType
    SolidRod = 6  # ViewBreakBuilderViewbreaklinestyleMemberType
    Jigsaw = 7  # ViewBreakBuilderViewbreaklinestyleMemberType
    Wood = 8  # ViewBreakBuilderViewbreaklinestyleMemberType
    CopyCurve = 9  # ViewBreakBuilderViewbreaklinestyleMemberType
    TemplateCurve = 10  # ViewBreakBuilderViewbreaklinestyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewBreakBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewBreakBuilder`   
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX9.0.0
    """
    
    class Viewbreaklinestyle():
        """
        style for view break line 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Simple", " - "
           "Straight", " - "
           "Sawtooth", " - "
           "LongBreak", " - "
           "Tubular", " - "
           "SolidTubular", " - "
           "SolidRod", " - "
           "Jigsaw", " - "
           "Wood", " - "
           "CopyCurve", " - "
           "TemplateCurve", " - "
        """
        Simple = 0  # ViewBreakBuilderViewbreaklinestyleMemberType
        Straight = 1  # ViewBreakBuilderViewbreaklinestyleMemberType
        Sawtooth = 2  # ViewBreakBuilderViewbreaklinestyleMemberType
        LongBreak = 3  # ViewBreakBuilderViewbreaklinestyleMemberType
        Tubular = 4  # ViewBreakBuilderViewbreaklinestyleMemberType
        SolidTubular = 5  # ViewBreakBuilderViewbreaklinestyleMemberType
        SolidRod = 6  # ViewBreakBuilderViewbreaklinestyleMemberType
        Jigsaw = 7  # ViewBreakBuilderViewbreaklinestyleMemberType
        Wood = 8  # ViewBreakBuilderViewbreaklinestyleMemberType
        CopyCurve = 9  # ViewBreakBuilderViewbreaklinestyleMemberType
        TemplateCurve = 10  # ViewBreakBuilderViewbreaklinestyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AddForeshorteningSymbol: bool = ...
    """
    Returns or sets  the foreshortening symbol addition 
    
    <hr>
    
    Getter Method
    
    Signature ``AddForeshorteningSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AddForeshorteningSymbol`` 
    
    :param propagateViewBreak: 
    :type propagateViewBreak: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BreakGap: float = ...
    """
    Returns or sets  the break gap 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakGap`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakGap`` 
    
    :param breakGap: 
    :type breakGap: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BreakLineAmplitude: float = ...
    """
    Returns or sets  the break line amplitude 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineAmplitude`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineAmplitude`` 
    
    :param breakLineAmplitude: 
    :type breakLineAmplitude: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BreakLineColorWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the break line color width 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineColorWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    BreakLineExtension: float = ...
    """
    Returns or sets  the break line extension 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineExtension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineExtension`` 
    
    :param breakLineExtension: 
    :type breakLineExtension: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BreakLineStyle: ViewBreakBuilderViewbreaklinestyle = ...
    """
    Returns or sets  the break line style 
    
    <hr>
    
    Getter Method
    
    Signature ``BreakLineStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewBreakBuilderViewbreaklinestyle` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BreakLineStyle`` 
    
    :param breakLineStyle: 
    :type breakLineStyle: :py:class:`NXOpen.Drawings.ViewBreakBuilderViewbreaklinestyle` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PropagateViewBreak: bool = ...
    """
    Returns or sets  the propagate view break 
    
    <hr>
    
    Getter Method
    
    Signature ``PropagateViewBreak`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PropagateViewBreak`` 
    
    :param propagateViewBreak: 
    :type propagateViewBreak: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowBreakLines: bool = ...
    """
    Returns or sets  the show break lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowBreakLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowBreakLines`` 
    
    :param showBreakLines: 
    :type showBreakLines: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewBreakBuilder = ...  # unknown typename


class SectionLineSegmentPointBuilderSegmentTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionLineSegmentPointBuilderSegmentTypes():
    """
    Section Segment Types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Arrow", " - "
       "Cut", " - "
       "Bend", " - "
    """
    Arrow = 1  # SectionLineSegmentPointBuilderSegmentTypesMemberType
    Cut = 2  # SectionLineSegmentPointBuilderSegmentTypesMemberType
    Bend = 3  # SectionLineSegmentPointBuilderSegmentTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineSegmentPointBuilder(NXOpen.TaggedObject):
    """
    Represents Section Line Segment Point Builder    
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.SectionLineSegmentPointListBuilder.CreateSectionLineSegmentPointBuilder`
    
    .. versionadded:: NX10.0.0
    """
    
    class SegmentTypes():
        """
        Section Segment Types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Arrow", " - "
           "Cut", " - "
           "Bend", " - "
        """
        Arrow = 1  # SectionLineSegmentPointBuilderSegmentTypesMemberType
        Cut = 2  # SectionLineSegmentPointBuilderSegmentTypesMemberType
        Bend = 3  # SectionLineSegmentPointBuilderSegmentTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Point: NXOpen.Point = ...
    """
    Returns or sets  the section line segment :py:class:`NXOpen.Point` 
    
    <hr>
    
    Getter Method
    
    Signature ``Point`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``Point`` 
    
    :param point: 
    :type point: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SegmentType: SectionLineSegmentPointBuilderSegmentTypes = ...
    """
    Returns or sets  the segment type
    
    <hr>
    
    Getter Method
    
    Signature ``SegmentType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilderSegmentTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``SegmentType`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.SectionLineSegmentPointBuilderSegmentTypes` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SectionLineSegmentPointBuilder = ...  # unknown typename


class ViewStyleDetailBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the DETAIL tab on the View Style Dialog (Drawings.  
    
    ViewStyleDetailBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Align: bool = ...
    """
    Returns or sets  the align toggle on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Align`` 
    
    :returns:  Returns the align toggle value that is on the detail sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Align`` 
    
    :param alignToggle:  Sets a new align toggle value on the detail sub-builder  
    :type alignToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Circular: bool = ...
    """
    Returns or sets  the circular toggle on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Circular`` 
    
    :returns:  Returns the circular toggle value that is on the detail sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Circular`` 
    
    :param circularToggle:  Sets a new circular toggle value on the detail sub-builder  
    :type circularToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ClipViewBoundary: bool = ...
    """
    Returns or sets  the clip boundary toggle on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ClipViewBoundary`` 
    
    :returns:  Returns the clip boundary toggle value on the detail sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ClipViewBoundary`` 
    
    :param clipViewBoundaryToggle:  Sets the clip boundary toggle value on the detail sub-builder  
    :type clipViewBoundaryToggle: bool 
    
    .. versionadded:: NX11.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    CreateIndependentDetailView: bool = ...
    """
    Returns or sets  the create independent detail view toggle on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateIndependentDetailView`` 
    
    :returns:  Returns the create independent detail view toggle value that is on the detail sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateIndependentDetailView`` 
    
    :param createIndependentDetailViewToggle:  Sets a create independent detail view toggle value on the detail sub-builder  
    :type createIndependentDetailViewToggle: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Offset: bool = ...
    """
    Returns or sets  the offset toggle on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns:  Returns the offset toggle value that is on the detail sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param offsetToggle:  Sets a new offset toggle value on the detail sub-builder  
    :type offsetToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Orient: bool = ...
    """
    Returns or sets  the orient toggle on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Orient`` 
    
    :returns:  Returns the orient toggle value that is on the detail sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Orient`` 
    
    :param orientToggle:  Sets a new orient toggle value on the detail sub-builder  
    :type orientToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Scale: bool = ...
    """
    Returns or sets  the scale toggle on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns:  Returns the scale toggle value that is on the detail sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scaleToggle:  Sets a new scale toggle value on the detail sub-builder  
    :type scaleToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Sheet: bool = ...
    """
    Returns or sets  the sheet toggle on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Sheet`` 
    
    :returns:  Returns the sheet toggle value that is on the detail sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Sheet`` 
    
    :param sheetToggle:  Sets a new sheet toggle value on the detail sub-builder  
    :type sheetToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewBoundaryColor: NXOpen.NXColor = ...
    """
    Returns or sets  the view boundary color on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewBoundaryColor`` 
    
    :returns:  Returns boundary color that is on the detail sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewBoundaryColor`` 
    
    :param color:  Sets the boundary color on the detail sub-builder  
    :type color: Id 
    
    .. versionadded:: NX6.0.2
    
    License requirements: drafting ("DRAFTING")
    """
    ViewBoundaryFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the view boundary font on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewBoundaryFont`` 
    
    :returns:  Returns boundary font that is on the detail sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewBoundaryFont`` 
    
    :param font:  Sets the boundary font on the detail sub-builder  
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: drafting ("DRAFTING")
    """
    ViewBoundaryWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the view boundary width on the DETAIL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewBoundaryWidth`` 
    
    :returns:  Returns boundary width that is on the detail sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewBoundaryWidth`` 
    
    :param width:  Sets the boundary width on the detail sub-builder  
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleDetailBuilder = ...  # unknown typename


class SteppedSectionLine(BaseSteppedSectionLine):
    """
    A Simple or Stepped Section Line.  
    
    Simple Section Line provides one cut to form a view that allows you
    to see the inside of a part. The view is created by dividing the part
    with a single cutting plane.
    
    Stepped Section Line lets you create a section view which contains
    linear steps. You can make these steps by indicating multiple cuts,
    bends, and arrow segments. All bend and arrow segments are created
    perpendicular to cut segments. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SectionViewBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: SteppedSectionLine = ...  # unknown typename


class ViewCopyTo3dBuilderOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCopyTo3dBuilderOption():
    """
    The pre-NX7.5 option   
    
    .. deprecated::  NX7.5.0
       Please use :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderDistanceFromViewPlaneOption` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "automatic"
       "Specify", "specify"
    """
    Automatic = 0  # ViewCopyTo3dBuilderOptionMemberType
    Specify = 1  # ViewCopyTo3dBuilderOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCopyTo3dBuilderDistanceFromViewPlaneOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCopyTo3dBuilderDistanceFromViewPlaneOption():
    """
    The option to get the distance 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Automatic", "automatic distance calculation"
       "Specify", "specify distance"
    """
    Automatic = 0  # ViewCopyTo3dBuilderDistanceFromViewPlaneOptionMemberType
    Specify = 1  # ViewCopyTo3dBuilderDistanceFromViewPlaneOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCopyTo3dBuilderTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCopyTo3dBuilderTypes():
    """
    The type of copy to 3d selections 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "SelectedCurves", "selected curves"
       "SelectedViews", "selected views"
    """
    SelectedCurves = 0  # ViewCopyTo3dBuilderTypesMemberType
    SelectedViews = 1  # ViewCopyTo3dBuilderTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCopyTo3dBuilderBoundingBoxOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCopyTo3dBuilderBoundingBoxOption():
    """
    The bounding box options  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "CurvesToCopy", "curves to copy"
       "EntireViews", "entire views"
    """
    CurvesToCopy = 0  # ViewCopyTo3dBuilderBoundingBoxOptionMemberType
    EntireViews = 1  # ViewCopyTo3dBuilderBoundingBoxOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCopyTo3dBuilderOutputOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCopyTo3dBuilderOutputOption():
    """
    The output options  
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sketches", "sketches"
       "SimpleCurves", "simple curves"
       "SketchesSolid", "sketches and solid body"
       "PartsGroup", "component parts from groups"
    """
    Sketches = 0  # ViewCopyTo3dBuilderOutputOptionMemberType
    SimpleCurves = 1  # ViewCopyTo3dBuilderOutputOptionMemberType
    SketchesSolid = 2  # ViewCopyTo3dBuilderOutputOptionMemberType
    PartsGroup = 3  # ViewCopyTo3dBuilderOutputOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCopyTo3dBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilder`.  
    
    This class
    is used to copy the contents of a drawing view to modeling space
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateCopyTo3dBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class Option():
        """
        The pre-NX7.5 option   
        
        .. deprecated::  NX7.5.0
           Please use :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderDistanceFromViewPlaneOption` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "automatic"
           "Specify", "specify"
        """
        Automatic = 0  # ViewCopyTo3dBuilderOptionMemberType
        Specify = 1  # ViewCopyTo3dBuilderOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DistanceFromViewPlaneOption():
        """
        The option to get the distance 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Automatic", "automatic distance calculation"
           "Specify", "specify distance"
        """
        Automatic = 0  # ViewCopyTo3dBuilderDistanceFromViewPlaneOptionMemberType
        Specify = 1  # ViewCopyTo3dBuilderDistanceFromViewPlaneOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Types():
        """
        The type of copy to 3d selections 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "SelectedCurves", "selected curves"
           "SelectedViews", "selected views"
        """
        SelectedCurves = 0  # ViewCopyTo3dBuilderTypesMemberType
        SelectedViews = 1  # ViewCopyTo3dBuilderTypesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class BoundingBoxOption():
        """
        The bounding box options  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "CurvesToCopy", "curves to copy"
           "EntireViews", "entire views"
        """
        CurvesToCopy = 0  # ViewCopyTo3dBuilderBoundingBoxOptionMemberType
        EntireViews = 1  # ViewCopyTo3dBuilderBoundingBoxOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class OutputOption():
        """
        The output options  
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sketches", "sketches"
           "SimpleCurves", "simple curves"
           "SketchesSolid", "sketches and solid body"
           "PartsGroup", "component parts from groups"
        """
        Sketches = 0  # ViewCopyTo3dBuilderOutputOptionMemberType
        SimpleCurves = 1  # ViewCopyTo3dBuilderOutputOptionMemberType
        SketchesSolid = 2  # ViewCopyTo3dBuilderOutputOptionMemberType
        PartsGroup = 3  # ViewCopyTo3dBuilderOutputOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    @typing.overload
    def Commit(self, offset: float, curves: bool, sketches: bool, option: int) -> None:
        """
        The copy of the selected view to modeling 
        
        Signature ``Commit(offset, curves, sketches, option)`` 
        
        :param offset:  offset from origin  
        :type offset: float 
        :param curves:  process curves  
        :type curves: bool 
        :param sketches:  process sketch curves  
        :type sketches: bool 
        :param option:  option of automatic or specify   
        :type option: int 
        
        .. versionadded:: NX6.0.1
        
        .. deprecated::  NX7.5.0
           This method is no longer relevant and calls to this can be safely removed.
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    @typing.overload
    def Commit(self) -> NXOpen.NXObject:
        """
        Commits any edits that have been applied to the builder. Returns the object being
        edited, or a new object if the builder is being used in creation mode.
        
        In certain cases this method may not return an object, please consult the particular class's documentation to see if this method has a different behavior.
        
        Signature ``Commit()`` 
        
        :returns:  The object being edited, or the new object.  
        :rtype: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    BoundingBox: ViewCopyTo3dBuilderBoundingBoxOption = ...
    """
    Returns or sets  the type of bounding box  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingBox`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderBoundingBoxOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundingBox`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderBoundingBoxOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    BoundingViews: SelectDrawingViewList = ...
    """
    Returns  the select views in the placement group 
    
    <hr>
    
    Getter Method
    
    Signature ``BoundingViews`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDrawingViewList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    CreateSketches: bool = ...
    """
    Returns or sets  the flag indicating to create sketches in Modeling
    
    <hr>
    
    Getter Method
    
    Signature ``CreateSketches`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This method is no longer relevant and calls to this can be safely removed.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateSketches`` 
    
    :param option: 
    :type option: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This method is no longer relevant and calls to this can be safely removed.
    
    License requirements: nx_layout ("NX Layout")
    """
    Curves: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select curves for source group 
    
    <hr>
    
    Getter Method
    
    Signature ``Curves`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    """
    DestinationPart: str = ...
    """
    Returns or sets  the path to the destination part 
    
    <hr>
    
    Getter Method
    
    Signature ``DestinationPart`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    
    <hr>
    
    Setter Method
    
    Signature ``DestinationPart`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    DistanceFromViewPlane: ViewCopyTo3dBuilderDistanceFromViewPlaneOption = ...
    """
    Returns or sets  the option specifying the distance from the view plane 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceFromViewPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderDistanceFromViewPlaneOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceFromViewPlane`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderDistanceFromViewPlaneOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    ExtrudeSolidBody: bool = ...
    """
    Returns or sets  the flag that indicates whether to extrude solid 
    
    <hr>
    
    Getter Method
    
    Signature ``ExtrudeSolidBody`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This method is no longer relevant and calls to this can be safely removed.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtrudeSolidBody`` 
    
    :param option: 
    :type option: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This method is no longer relevant and calls to this can be safely removed.
    
    License requirements: nx_layout ("NX Layout")
    """
    Offset: NXOpen.Expression = ...
    """
    Returns  the expression of clearance 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Output: ViewCopyTo3dBuilderOutputOption = ...
    """
    Returns or sets  the option of output in the setting group  
    
    <hr>
    
    Getter Method
    
    Signature ``Output`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderOutputOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Output`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderOutputOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    ProcessSketchCurves: bool = ...
    """
    Returns or sets  the flag indicating to process sketch curves 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessSketchCurves`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This method is no longer relevant and calls to this can be safely removed.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessSketchCurves`` 
    
    :param option: 
    :type option: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This method is no longer relevant and calls to this can be safely removed.
    
    License requirements: nx_layout ("NX Layout")
    """
    ProcessViewCurves: bool = ...
    """
    Returns or sets  the flag indicating to process view curves 
    
    <hr>
    
    Getter Method
    
    Signature ``ProcessViewCurves`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This method is no longer relevant and calls to this can be safely removed.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ProcessViewCurves`` 
    
    :param option: 
    :type option: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX8.0.0
       This method is no longer relevant and calls to this can be safely removed.
    
    License requirements: nx_layout ("NX Layout")
    """
    RepositionGeometry: bool = ...
    """
    Returns or sets  the flag that indicates whether to automatically reposition geometry 
    
    <hr>
    
    Getter Method
    
    Signature ``RepositionGeometry`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RepositionGeometry`` 
    
    :param option: 
    :type option: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: nx_layout ("NX Layout")
    """
    Type: ViewCopyTo3dBuilderTypes = ...
    """
    Returns or sets  the type of copy 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Type`` 
    
    :param type: 
    :type type: :py:class:`NXOpen.Drawings.ViewCopyTo3dBuilderTypes` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: nx_layout ("NX Layout")
    """
    View: SelectDrawingView = ...
    """
    Returns  the selected view for previous single view selection  
    
    <hr>
    
    Getter Method
    
    Signature ``View`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDrawingView` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX7.5.0
       This method is no longer relevant and calls to this can be safely removed.
    
    License requirements: nx_layout ("NX Layout")
    """
    Views: SelectDrawingViewList = ...
    """
    Returns  the selected views for multiple views selection 
    
    <hr>
    
    Getter Method
    
    Signature ``Views`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDrawingViewList` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: nx_layout ("NX Layout")
    """
    Null: ViewCopyTo3dBuilder = ...  # unknown typename


class EditViewLabelSettingsBuilder(NXOpen.Drafting.BaseEditSettingsBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.EditViewLabelSettingsBuilder` builder.  
    
    It provides an interface for editing view label style settings.
    This can be used to change one specific view label or all view labels. 
    To create a new instance of this class, use :py:meth:`NXOpen.Drafting.SettingsManager.CreateDrawingEditViewLabelSettingsBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def InheritSettingsFromSelectedObjects(self, selectedObject: NXOpen.NXObject) -> None:
        """
        Inherit Settings From Selected Objects 
        
        Signature ``InheritSettingsFromSelectedObjects(selectedObject)`` 
        
        :param selectedObject:  The selected drafting annotation or view instance object.                                                                             None is not allowed.  
        :type selectedObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit Settings From Customer Default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit Settings From Preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    AnnotationStyle: NXOpen.Annotations.StyleBuilder = ...
    """
    Returns  the annotation style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``AnnotationStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Annotations.StyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewCommonViewLabel: ViewCommonViewLabelBuilder = ...
    """
    Returns  the view common view label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewCommonViewLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewDetailLabel: ViewDetailLabelBuilder = ...
    """
    Returns  the view detail label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewDetailLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewDetailLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewLabel: ViewLabelBuilder = ...
    """
    Returns  the view label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewProjectedLabel: ViewProjectedLabelBuilder = ...
    """
    Returns  the view projected label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewProjectedLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectedLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewSectionLabel: ViewSectionLabelBuilder = ...
    """
    Returns  the view section label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewSectionLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSectionLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: EditViewLabelSettingsBuilder = ...  # unknown typename


class OrientedSectionLine(SectionLine):
    """
    Represents a Oriented Section Line.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SectionLineBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: OrientedSectionLine = ...  # unknown typename


class CustomViewSettingsBuilderThreadStandardsMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomViewSettingsBuilderThreadStandards():
    """
    the thread standards options 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "AnsiSimplified", " - "
       "AnsiSchematic", " - "
       "AnsiDetailed", " - "
       "IsoSimplified", " - "
       "IsoDetailed", " - "
       "EskdSimplified", " - "
    """
    NotSet = 0  # CustomViewSettingsBuilderThreadStandardsMemberType
    AnsiSimplified = 1  # CustomViewSettingsBuilderThreadStandardsMemberType
    AnsiSchematic = 2  # CustomViewSettingsBuilderThreadStandardsMemberType
    AnsiDetailed = 3  # CustomViewSettingsBuilderThreadStandardsMemberType
    IsoSimplified = 4  # CustomViewSettingsBuilderThreadStandardsMemberType
    IsoDetailed = 5  # CustomViewSettingsBuilderThreadStandardsMemberType
    EskdSimplified = 6  # CustomViewSettingsBuilderThreadStandardsMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomViewSettingsBuilderInterferingMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomViewSettingsBuilderInterfering():
    """
    the options for interfering curves 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "WithoutInterference", " - "
       "WithInterference", " - "
    """
    NotSet = 0  # CustomViewSettingsBuilderInterferingMemberType
    WithoutInterference = 1  # CustomViewSettingsBuilderInterferingMemberType
    WithInterference = 2  # CustomViewSettingsBuilderInterferingMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomViewSettingsBuilderFeaturesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomViewSettingsBuilderFeatures():
    """
    the options for small features 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ShowAll", " - "
       "Simplify", " - "
       "Hide", " - "
    """
    ShowAll = 0  # CustomViewSettingsBuilderFeaturesMemberType
    Simplify = 1  # CustomViewSettingsBuilderFeaturesMemberType
    Hide = 2  # CustomViewSettingsBuilderFeaturesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomViewSettingsBuilderFontMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomViewSettingsBuilderFont():
    """
    the options for all the fonts used in the custom view settings dialog 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Invisible", "Invisible"
       "Solid", "Solid"
       "Dashed", "Dashed"
       "Phantom", "Phantom"
       "Centerline", "CenterLine"
       "Dotted", "Dotted"
       "LongDashed", "Long Dashed"
       "DottedDashed", "Dotted Dashed"
    """
    Invisible = 0  # CustomViewSettingsBuilderFontMemberType
    Solid = 1  # CustomViewSettingsBuilderFontMemberType
    Dashed = 2  # CustomViewSettingsBuilderFontMemberType
    Phantom = 3  # CustomViewSettingsBuilderFontMemberType
    Centerline = 4  # CustomViewSettingsBuilderFontMemberType
    Dotted = 5  # CustomViewSettingsBuilderFontMemberType
    LongDashed = 6  # CustomViewSettingsBuilderFontMemberType
    DottedDashed = 7  # CustomViewSettingsBuilderFontMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomViewSettingsBuilderWidthMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class CustomViewSettingsBuilderWidth():
    """
    the width options for all the line width used in the customize view settings dialog 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Original", "Original"
       "One", "One"
       "Two", "Two"
       "Three", "Three"
       "Four", "Four"
       "Five", "Five"
       "Six", "Six"
       "Seven", "Seven"
       "Eight", "Eight"
       "Nine", "Nine"
    """
    Original = 0  # CustomViewSettingsBuilderWidthMemberType
    One = 5  # CustomViewSettingsBuilderWidthMemberType
    Two = 6  # CustomViewSettingsBuilderWidthMemberType
    Three = 7  # CustomViewSettingsBuilderWidthMemberType
    Four = 8  # CustomViewSettingsBuilderWidthMemberType
    Five = 9  # CustomViewSettingsBuilderWidthMemberType
    Six = 10  # CustomViewSettingsBuilderWidthMemberType
    Seven = 11  # CustomViewSettingsBuilderWidthMemberType
    Eight = 12  # CustomViewSettingsBuilderWidthMemberType
    Nine = 13  # CustomViewSettingsBuilderWidthMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class CustomViewSettingsBuilder(NXOpen.Builder):
    """
    this class represents the "this class represents Drawings.  
    
    CustomViewSettingsBuilder.
    It consists of the settings which optimize the view creation for large assemblies and these
    settings are subset of the view style settings 
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateCustomViewSettingsBuilder`
    
    Default values.
    
    ==========================  ==========
    Property                    Value
    ==========================  ==========
    DelayUpdateOnCreation       0 
    --------------------------  ----------
    DelayViewUpdate             1 
    --------------------------  ----------
    HiddenLinesFont             Invisible 
    --------------------------  ----------
    InterferingSolids           None 
    --------------------------  ----------
    RenderTrueHiddenLine        0 
    --------------------------  ----------
    ShowAdjacentBlends          0 
    --------------------------  ----------
    ShowCenterLines             0 
    --------------------------  ----------
    ShowCheckBoundaryStatus     0 
    --------------------------  ----------
    ShowEdgesHiddenByEdges      1 
    --------------------------  ----------
    ShowHiddenLines             1 
    --------------------------  ----------
    ShowSelfHiddenLines         1 
    --------------------------  ----------
    ShowSmoothEdgeEndGapsLock   0 
    --------------------------  ----------
    ShowSmoothEdges             1 
    --------------------------  ----------
    ShowTraceLines              0 
    --------------------------  ----------
    ShowUVGrids                 0 
    --------------------------  ----------
    ShowVIEndGapsLock           0 
    --------------------------  ----------
    ShowVirtualIntersections    0 
    --------------------------  ----------
    SmallFeatures               Hide 
    --------------------------  ----------
    ThreadStandard              None 
    --------------------------  ----------
    TraceLineCreateGapsLock     0 
    ==========================  ==========
    
    .. versionadded:: NX8.5.0
    """
    
    class ThreadStandards():
        """
        the thread standards options 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "AnsiSimplified", " - "
           "AnsiSchematic", " - "
           "AnsiDetailed", " - "
           "IsoSimplified", " - "
           "IsoDetailed", " - "
           "EskdSimplified", " - "
        """
        NotSet = 0  # CustomViewSettingsBuilderThreadStandardsMemberType
        AnsiSimplified = 1  # CustomViewSettingsBuilderThreadStandardsMemberType
        AnsiSchematic = 2  # CustomViewSettingsBuilderThreadStandardsMemberType
        AnsiDetailed = 3  # CustomViewSettingsBuilderThreadStandardsMemberType
        IsoSimplified = 4  # CustomViewSettingsBuilderThreadStandardsMemberType
        IsoDetailed = 5  # CustomViewSettingsBuilderThreadStandardsMemberType
        EskdSimplified = 6  # CustomViewSettingsBuilderThreadStandardsMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Interfering():
        """
        the options for interfering curves 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "WithoutInterference", " - "
           "WithInterference", " - "
        """
        NotSet = 0  # CustomViewSettingsBuilderInterferingMemberType
        WithoutInterference = 1  # CustomViewSettingsBuilderInterferingMemberType
        WithInterference = 2  # CustomViewSettingsBuilderInterferingMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Features():
        """
        the options for small features 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ShowAll", " - "
           "Simplify", " - "
           "Hide", " - "
        """
        ShowAll = 0  # CustomViewSettingsBuilderFeaturesMemberType
        Simplify = 1  # CustomViewSettingsBuilderFeaturesMemberType
        Hide = 2  # CustomViewSettingsBuilderFeaturesMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Font():
        """
        the options for all the fonts used in the custom view settings dialog 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Invisible", "Invisible"
           "Solid", "Solid"
           "Dashed", "Dashed"
           "Phantom", "Phantom"
           "Centerline", "CenterLine"
           "Dotted", "Dotted"
           "LongDashed", "Long Dashed"
           "DottedDashed", "Dotted Dashed"
        """
        Invisible = 0  # CustomViewSettingsBuilderFontMemberType
        Solid = 1  # CustomViewSettingsBuilderFontMemberType
        Dashed = 2  # CustomViewSettingsBuilderFontMemberType
        Phantom = 3  # CustomViewSettingsBuilderFontMemberType
        Centerline = 4  # CustomViewSettingsBuilderFontMemberType
        Dotted = 5  # CustomViewSettingsBuilderFontMemberType
        LongDashed = 6  # CustomViewSettingsBuilderFontMemberType
        DottedDashed = 7  # CustomViewSettingsBuilderFontMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Width():
        """
        the width options for all the line width used in the customize view settings dialog 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Original", "Original"
           "One", "One"
           "Two", "Two"
           "Three", "Three"
           "Four", "Four"
           "Five", "Five"
           "Six", "Six"
           "Seven", "Seven"
           "Eight", "Eight"
           "Nine", "Nine"
        """
        Original = 0  # CustomViewSettingsBuilderWidthMemberType
        One = 5  # CustomViewSettingsBuilderWidthMemberType
        Two = 6  # CustomViewSettingsBuilderWidthMemberType
        Three = 7  # CustomViewSettingsBuilderWidthMemberType
        Four = 8  # CustomViewSettingsBuilderWidthMemberType
        Five = 9  # CustomViewSettingsBuilderWidthMemberType
        Six = 10  # CustomViewSettingsBuilderWidthMemberType
        Seven = 11  # CustomViewSettingsBuilderWidthMemberType
        Eight = 12  # CustomViewSettingsBuilderWidthMemberType
        Nine = 13  # CustomViewSettingsBuilderWidthMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    DelayUpdateOnCreation: bool = ...
    """
    Returns or sets  the delay update on creation 
    
    <hr>
    
    Getter Method
    
    Signature ``DelayUpdateOnCreation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DelayUpdateOnCreation`` 
    
    :param delayUpdateOnCreation: 
    :type delayUpdateOnCreation: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    DelayViewUpdate: bool = ...
    """
    Returns or sets  the delay view update 
    
    <hr>
    
    Getter Method
    
    Signature ``DelayViewUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DelayViewUpdate`` 
    
    :param delayViewUpdate: 
    :type delayViewUpdate: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLinesColor: NXOpen.NXColor = ...
    """
    Returns or sets  the hidden lines color 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLinesColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLinesColor`` 
    
    :param hiddenLinesColor: 
    :type hiddenLinesColor: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLinesFont: CustomViewSettingsBuilderFont = ...
    """
    Returns or sets  the hidden lines font 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLinesFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLinesFont`` 
    
    :param hiddenLinesFont: 
    :type hiddenLinesFont: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLinesWidth: CustomViewSettingsBuilderWidth = ...
    """
    Returns or sets  the hidden line hidden font 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLinesWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLinesWidth`` 
    
    :param hiddenLinesWidth: 
    :type hiddenLinesWidth: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    InterferingSolids: CustomViewSettingsBuilderInterfering = ...
    """
    Returns or sets  the interfering solids 
    
    <hr>
    
    Getter Method
    
    Signature ``InterferingSolids`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderInterfering` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferingSolids`` 
    
    :param interferingSolids: 
    :type interferingSolids: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderInterfering` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    MinimumPitch: float = ...
    """
    Returns or sets  the minimum pitch 
    
    <hr>
    
    Getter Method
    
    Signature ``MinimumPitch`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MinimumPitch`` 
    
    :param minimumPitch: 
    :type minimumPitch: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    RenderTrueHiddenLine: bool = ...
    """
    Returns or sets  the render true hidden line 
    
    <hr>
    
    Getter Method
    
    Signature ``RenderTrueHiddenLine`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenderTrueHiddenLine`` 
    
    :param renderTrueHiddenLine: 
    :type renderTrueHiddenLine: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowAdjacentBlends: bool = ...
    """
    Returns or sets  the show adjacent blends 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowAdjacentBlends`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowAdjacentBlends`` 
    
    :param showAdjacentBlends: 
    :type showAdjacentBlends: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowCenterLines: bool = ...
    """
    Returns or sets  the show center lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowCenterLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowCenterLines`` 
    
    :param showCenterLines: 
    :type showCenterLines: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowCheckBoundaryStatus: bool = ...
    """
    Returns or sets  the show check boundary status 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowCheckBoundaryStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowCheckBoundaryStatus`` 
    
    :param showCheckBoundaryStatus: 
    :type showCheckBoundaryStatus: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowEdgesHiddenByEdges: bool = ...
    """
    Returns or sets  the show edges hidden by edges 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowEdgesHiddenByEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowEdgesHiddenByEdges`` 
    
    :param showEdgesHiddenByEdges: 
    :type showEdgesHiddenByEdges: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowHiddenLines: bool = ...
    """
    Returns or sets  the show hidden lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowHiddenLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowHiddenLines`` 
    
    :param showHiddenLines: 
    :type showHiddenLines: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowSelfHiddenLines: bool = ...
    """
    Returns or sets  the show self hidden lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSelfHiddenLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSelfHiddenLines`` 
    
    :param showSelfHiddenLines: 
    :type showSelfHiddenLines: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowSmoothEdgeEndGapsLock: bool = ...
    """
    Returns or sets  the show end gaps lock 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSmoothEdgeEndGapsLock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSmoothEdgeEndGapsLock`` 
    
    :param showEndGapsLock: 
    :type showEndGapsLock: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowSmoothEdgeEndGapsValue: float = ...
    """
    Returns or sets  the show end gaps value 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSmoothEdgeEndGapsValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSmoothEdgeEndGapsValue`` 
    
    :param showEndGapsValue: 
    :type showEndGapsValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowSmoothEdges: bool = ...
    """
    Returns or sets  the show smooth edges 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSmoothEdges`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSmoothEdges`` 
    
    :param showSmoothEdges: 
    :type showSmoothEdges: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowTraceLines: bool = ...
    """
    Returns or sets  the show trace lines 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowTraceLines`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowTraceLines`` 
    
    :param showTraceLines: 
    :type showTraceLines: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowUVGrids: bool = ...
    """
    Returns or sets  the show uvgrids 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowUVGrids`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowUVGrids`` 
    
    :param showUVGrids: 
    :type showUVGrids: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowVIEndGapsLock: bool = ...
    """
    Returns or sets  the show end gaps lock 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowVIEndGapsLock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowVIEndGapsLock`` 
    
    :param showEndGapsLock: 
    :type showEndGapsLock: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowVIEndGapsValue: float = ...
    """
    Returns or sets  the show end gaps value 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowVIEndGapsValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowVIEndGapsValue`` 
    
    :param showEndGapsValue: 
    :type showEndGapsValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowVirtualIntersections: bool = ...
    """
    Returns or sets  the show virtual intersections 
    
    <hr>
    
    Getter Method
    
    Signature ``ShowVirtualIntersections`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowVirtualIntersections`` 
    
    :param showVirtualIntersections: 
    :type showVirtualIntersections: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmallFeatures: CustomViewSettingsBuilderFeatures = ...
    """
    Returns or sets  the small features 
    
    <hr>
    
    Getter Method
    
    Signature ``SmallFeatures`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFeatures` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmallFeatures`` 
    
    :param smallFeatures: 
    :type smallFeatures: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFeatures` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeColor: NXOpen.NXColor = ...
    """
    Returns or sets  the smooth edge color pick 
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeColor`` 
    
    :param smoothEdgeColor: 
    :type smoothEdgeColor: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeFont: CustomViewSettingsBuilderFont = ...
    """
    Returns or sets  the smooth edge line font 
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeFont`` 
    
    :param smoothEdgeLineFont: 
    :type smoothEdgeLineFont: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdgeWidth: CustomViewSettingsBuilderWidth = ...
    """
    Returns or sets  the smooth edges line hidden font 
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdgeWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdgeWidth`` 
    
    :param smoothEdgeLineWidth: 
    :type smoothEdgeLineWidth: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ThreadStandard: CustomViewSettingsBuilderThreadStandards = ...
    """
    Returns or sets  the thread standard 
    
    <hr>
    
    Getter Method
    
    Signature ``ThreadStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderThreadStandards` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ThreadStandard`` 
    
    :param threadStandard: 
    :type threadStandard: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderThreadStandards` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    TraceLineCreateGapsLock: bool = ...
    """
    Returns or sets  the trace line create gaps lock 
    
    <hr>
    
    Getter Method
    
    Signature ``TraceLineCreateGapsLock`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TraceLineCreateGapsLock`` 
    
    :param traceLineCreateGapsLock: 
    :type traceLineCreateGapsLock: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    TraceLineCreateGapsValue: float = ...
    """
    Returns or sets  the trace line create gaps value 
    
    <hr>
    
    Getter Method
    
    Signature ``TraceLineCreateGapsValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TraceLineCreateGapsValue`` 
    
    :param traceLineCreateGapsValue: 
    :type traceLineCreateGapsValue: float 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    TraceLineHiddenColor: NXOpen.NXColor = ...
    """
    Returns or sets  the trace line hidden color 
    
    <hr>
    
    Getter Method
    
    Signature ``TraceLineHiddenColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TraceLineHiddenColor`` 
    
    :param traceLineHiddenColor: 
    :type traceLineHiddenColor: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    TraceLineHiddenFont: CustomViewSettingsBuilderFont = ...
    """
    Returns or sets  the trace line hidden font 
    
    <hr>
    
    Getter Method
    
    Signature ``TraceLineHiddenFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TraceLineHiddenFont`` 
    
    :param traceLineHiddenFont: 
    :type traceLineHiddenFont: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    TraceLineHiddenWidth: CustomViewSettingsBuilderWidth = ...
    """
    Returns or sets  the trace line hidden Width 
    
    <hr>
    
    Getter Method
    
    Signature ``TraceLineHiddenWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TraceLineHiddenWidth`` 
    
    :param traceLineHiddenWidth: 
    :type traceLineHiddenWidth: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    TraceLineVisibleColor: NXOpen.NXColor = ...
    """
    Returns or sets  the trace line visible color 
    
    <hr>
    
    Getter Method
    
    Signature ``TraceLineVisibleColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TraceLineVisibleColor`` 
    
    :param traceLineVisibleColor: 
    :type traceLineVisibleColor: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    TraceLineVisibleFont: CustomViewSettingsBuilderFont = ...
    """
    Returns or sets  the trace line visible font 
    
    <hr>
    
    Getter Method
    
    Signature ``TraceLineVisibleFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TraceLineVisibleFont`` 
    
    :param traceLineVisibleFont: 
    :type traceLineVisibleFont: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    TraceLineVisibleWidth: CustomViewSettingsBuilderWidth = ...
    """
    Returns or sets  the trace line visible font 
    
    <hr>
    
    Getter Method
    
    Signature ``TraceLineVisibleWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TraceLineVisibleWidth`` 
    
    :param traceLineVisibleWidth: 
    :type traceLineVisibleWidth: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    VirtualInterSectionColor: NXOpen.NXColor = ...
    """
    Returns or sets  the virtual inter section color 
    
    <hr>
    
    Getter Method
    
    Signature ``VirtualInterSectionColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VirtualInterSectionColor`` 
    
    :param virtualInterSectionColor: 
    :type virtualInterSectionColor: Id 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    VirtualInterSectionFont: CustomViewSettingsBuilderFont = ...
    """
    Returns or sets  the virtual inter section font 
    
    <hr>
    
    Getter Method
    
    Signature ``VirtualInterSectionFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VirtualInterSectionFont`` 
    
    :param virtualInterSectionFont: 
    :type virtualInterSectionFont: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderFont` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    VirtualInterSectionWidth: CustomViewSettingsBuilderWidth = ...
    """
    Returns or sets  the virtual inter section width 
    
    <hr>
    
    Getter Method
    
    Signature ``VirtualInterSectionWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VirtualInterSectionWidth`` 
    
    :param virtualInterSectionWidth: 
    :type virtualInterSectionWidth: :py:class:`NXOpen.Drawings.CustomViewSettingsBuilderWidth` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: CustomViewSettingsBuilder = ...  # unknown typename


class SelectDrawingView(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: DrawingView) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: DrawingView) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: DrawingView, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingView` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: DrawingView, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: DrawingView, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Drawings.DrawingView` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Drawings.DrawingView` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: DrawingView, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingView` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> DrawingView:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Drawings.DrawingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: DrawingView) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Drawings.DrawingView`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Drawings.DrawingView`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Drawings.DrawingView`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Drawings.DrawingView`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: DrawingView = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Drawings.DrawingView` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Drawings.DrawingView` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectDrawingView = ...  # unknown typename


class SpecifySectionLineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Select a section line   
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    SectionLine: SelectSectionLine = ...
    """
    Returns  the section line 
    
    <hr>
    
    Getter Method
    
    Signature ``SectionLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectSectionLine` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SpecifySectionLineBuilder = ...  # unknown typename


class SelectSectionLine(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a single object selection.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def SetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def SetValue(self, selection: SectionLine) -> None:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.SectionLine` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: SectionLine) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.SectionLine` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: SectionLine, view: NXOpen.View, point: NXOpen.Point3d) -> None:
        """
        The object being selected with the object's view and object's point
        
        Signature ``SetValue(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.SectionLine` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: SectionLine, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: SectionLine, view2: NXOpen.View, point2: NXOpen.Point3d) -> None:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``SetValue(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Drawings.SectionLine` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1:  first selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Drawings.SectionLine` 
        :param view2:  second selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def SetValue(self, selection: SectionLine, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> None:
        """
        The object being selected with CAE set object information.
        
        Signature ``SetValue(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.SectionLine` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.SetValue`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def GetValue(self) -> None:
        """Returns or sets  the object being selected"""
        ...
    
    @typing.overload
    def GetValue(self) -> SectionLine:
        """
        Getter Method
        
        Signature ``Value`` 
        
        :returns:  selected object  
        :rtype: :py:class:`NXOpen.Drawings.SectionLine` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self, selection: SectionLine) -> None:
        """
        Setter Method
        
        Signature ``Value`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.SectionLine` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the object's view and point.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, view, point). selection is a :py:class:`NXOpen.Drawings.SectionLine`.   selected object view is a :py:class:`NXOpen.View`.   selected object viewpoint is a :py:class:`NXOpen.Point3d`.   selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with the objects view and point and snap information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (snapType, selection1, view1, point1, selection2, view2, point2). snapType is a :py:class:`NXOpen.InferSnapTypeSnapType`.    snap point typeselection1 is a :py:class:`NXOpen.Drawings.SectionLine`.   first selected object view1 is a :py:class:`NXOpen.View`.   first selected object viewpoint1 is a :py:class:`NXOpen.Point3d`.   first selected object pointselection2 is a :py:class:`NXOpen.Drawings.SectionLine`.   second selected object view2 is a :py:class:`NXOpen.View`.   second selected object viewpoint2 is a :py:class:`NXOpen.Point3d`.   second selected object point
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def GetValue(self) -> tuple:
        """
        The object being selected with CAE set object information.
        
        Signature ``GetValue()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (selection, caeSubType, caeSubId). selection is a :py:class:`NXOpen.Drawings.SectionLine`.   selected object caeSubType is a :py:class:`NXOpen.CaeObjectTypeCaeSubType`.   CAE set object sub typecaeSubId is a int.   CAE set object sub id
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObject.GetValue`.
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Value: SectionLine = ...
    """
    Returns or sets  the object being selected
    
    <hr>
    
    Getter Method
    
    Signature ``Value`` 
    
    :returns:  selected object  
    :rtype: :py:class:`NXOpen.Drawings.SectionLine` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Value`` 
    
    :param selection:  selected object  
    :type selection: :py:class:`NXOpen.Drawings.SectionLine` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectSectionLine = ...  # unknown typename


class DrawingRegionRulesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Drawing region rules builder   
    
    .. versionadded:: NX8.0.0
    """
    
    def GetRules(self) -> 'list[str]':
        """
        Get Rules  
        
        Signature ``GetRules()`` 
        
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetRules(self, rules: 'list[str]') -> None:
        """
        Set Rules 
        
        Signature ``SetRules(rules)`` 
        
        :param rules: 
        :type rules: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    
    def RemoveRules(self, rules: 'list[str]') -> None:
        """
        Remove Rules 
        
        Signature ``RemoveRules(rules)`` 
        
        :param rules: 
        :type rules: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: DrawingRegionRulesBuilder = ...  # unknown typename


class SectionLineStyleBuilderArrowheadStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionLineStyleBuilderArrowheadStyleType():
    """
    This enum represents arrowhead style type.
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.StyleType` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Open", " - "
       "Closed", " - "
       "Filled", " - "
    """
    Open = 0  # SectionLineStyleBuilderArrowheadStyleTypeMemberType
    Closed = 1  # SectionLineStyleBuilderArrowheadStyleTypeMemberType
    Filled = 2  # SectionLineStyleBuilderArrowheadStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineStyleBuilderStandardStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionLineStyleBuilderStandardStyle():
    """
    This enum represents section line standard style type.
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.DisplayType` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "AnsiStandard", " - "
       "IsoStandard", " - "
       "Iso128Standard", " - "
       "JisStandard", " - "
       "GbStandard", " - "
       "EskdStandard", " - "
    """
    AnsiStandard = 0  # SectionLineStyleBuilderStandardStyleMemberType
    IsoStandard = 1  # SectionLineStyleBuilderStandardStyleMemberType
    Iso128Standard = 2  # SectionLineStyleBuilderStandardStyleMemberType
    JisStandard = 3  # SectionLineStyleBuilderStandardStyleMemberType
    GbStandard = 4  # SectionLineStyleBuilderStandardStyleMemberType
    EskdStandard = 5  # SectionLineStyleBuilderStandardStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineStyleBuilderFontStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionLineStyleBuilderFontStyle():
    """
    This enum represents section line font style type.
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Solid", " - "
       "Dashed", " - "
       "Phantom", " - "
       "Centerline", " - "
       "Dotted", " - "
       "LongDashed", " - "
       "DottedDashed", " - "
    """
    NotSet = 0  # SectionLineStyleBuilderFontStyleMemberType
    Solid = 1  # SectionLineStyleBuilderFontStyleMemberType
    Dashed = 2  # SectionLineStyleBuilderFontStyleMemberType
    Phantom = 3  # SectionLineStyleBuilderFontStyleMemberType
    Centerline = 4  # SectionLineStyleBuilderFontStyleMemberType
    Dotted = 5  # SectionLineStyleBuilderFontStyleMemberType
    LongDashed = 6  # SectionLineStyleBuilderFontStyleMemberType
    DottedDashed = 7  # SectionLineStyleBuilderFontStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineStyleBuilderWidthStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionLineStyleBuilderWidthStyle():
    """
    This enum represents section line width style type.
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Thin", "Thin"
       "Normal", "Normal"
       "Thick", "Thick"
       "ThicknessOne", "Width One"
       "ThicknessTwo", "Width Two"
       "ThicknessThree", "Width Three"
       "ThicknessFour", "Width Four"
       "ThicknessFive", "Width Five"
       "ThicknessSix", "Width Six"
       "ThicknessSeven", "Width Seven"
       "ThicknessEight", "Width Eight"
       "ThicknessNine", "Width Nine"
    """
    Thin = 0  # SectionLineStyleBuilderWidthStyleMemberType
    Normal = 1  # SectionLineStyleBuilderWidthStyleMemberType
    Thick = 2  # SectionLineStyleBuilderWidthStyleMemberType
    ThicknessOne = 5  # SectionLineStyleBuilderWidthStyleMemberType
    ThicknessTwo = 6  # SectionLineStyleBuilderWidthStyleMemberType
    ThicknessThree = 7  # SectionLineStyleBuilderWidthStyleMemberType
    ThicknessFour = 8  # SectionLineStyleBuilderWidthStyleMemberType
    ThicknessFive = 9  # SectionLineStyleBuilderWidthStyleMemberType
    ThicknessSix = 10  # SectionLineStyleBuilderWidthStyleMemberType
    ThicknessSeven = 11  # SectionLineStyleBuilderWidthStyleMemberType
    ThicknessEight = 12  # SectionLineStyleBuilderWidthStyleMemberType
    ThicknessNine = 13  # SectionLineStyleBuilderWidthStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineStyleBuilderLabelLocationStyleMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionLineStyleBuilderLabelLocationStyle():
    """
    This enum represents section line label location for ISO128 section lines.
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LocationType` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OnArrow", " - "
       "OnEnd", " - "
    """
    OnArrow = 0  # SectionLineStyleBuilderLabelLocationStyleMemberType
    OnEnd = 1  # SectionLineStyleBuilderLabelLocationStyleMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineStyleBuilderCreateSectionLineTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionLineStyleBuilderCreateSectionLineType():
    """
    This enum represents whether or not to create a view for the section line.
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ShowSectionLineType` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WithView", " - "
       "WithoutView", " - "
    """
    WithView = 0  # SectionLineStyleBuilderCreateSectionLineTypeMemberType
    WithoutView = 1  # SectionLineStyleBuilderCreateSectionLineTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionLineStyleBuilder(NXOpen.Builder):
    """
    Represents a Drawings.  
    
    SectionLineStyleBuiler.
    The SectionLineStyleBuilder is used to specify section line style.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.SectionLineCollection.CreateSectionLineStyleBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    class ArrowheadStyleType():
        """
        This enum represents arrowhead style type.
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.StyleType` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Open", " - "
           "Closed", " - "
           "Filled", " - "
        """
        Open = 0  # SectionLineStyleBuilderArrowheadStyleTypeMemberType
        Closed = 1  # SectionLineStyleBuilderArrowheadStyleTypeMemberType
        Filled = 2  # SectionLineStyleBuilderArrowheadStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StandardStyle():
        """
        This enum represents section line standard style type.
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.DisplayType` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "AnsiStandard", " - "
           "IsoStandard", " - "
           "Iso128Standard", " - "
           "JisStandard", " - "
           "GbStandard", " - "
           "EskdStandard", " - "
        """
        AnsiStandard = 0  # SectionLineStyleBuilderStandardStyleMemberType
        IsoStandard = 1  # SectionLineStyleBuilderStandardStyleMemberType
        Iso128Standard = 2  # SectionLineStyleBuilderStandardStyleMemberType
        JisStandard = 3  # SectionLineStyleBuilderStandardStyleMemberType
        GbStandard = 4  # SectionLineStyleBuilderStandardStyleMemberType
        EskdStandard = 5  # SectionLineStyleBuilderStandardStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FontStyle():
        """
        This enum represents section line font style type.
        
        .. deprecated::  NX10.0.0
           This API is not supported yet and should not be used.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", " - "
           "Solid", " - "
           "Dashed", " - "
           "Phantom", " - "
           "Centerline", " - "
           "Dotted", " - "
           "LongDashed", " - "
           "DottedDashed", " - "
        """
        NotSet = 0  # SectionLineStyleBuilderFontStyleMemberType
        Solid = 1  # SectionLineStyleBuilderFontStyleMemberType
        Dashed = 2  # SectionLineStyleBuilderFontStyleMemberType
        Phantom = 3  # SectionLineStyleBuilderFontStyleMemberType
        Centerline = 4  # SectionLineStyleBuilderFontStyleMemberType
        Dotted = 5  # SectionLineStyleBuilderFontStyleMemberType
        LongDashed = 6  # SectionLineStyleBuilderFontStyleMemberType
        DottedDashed = 7  # SectionLineStyleBuilderFontStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WidthStyle():
        """
        This enum represents section line width style type.
        
        .. deprecated::  NX10.0.0
           This API is not supported yet and should not be used.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Thin", "Thin"
           "Normal", "Normal"
           "Thick", "Thick"
           "ThicknessOne", "Width One"
           "ThicknessTwo", "Width Two"
           "ThicknessThree", "Width Three"
           "ThicknessFour", "Width Four"
           "ThicknessFive", "Width Five"
           "ThicknessSix", "Width Six"
           "ThicknessSeven", "Width Seven"
           "ThicknessEight", "Width Eight"
           "ThicknessNine", "Width Nine"
        """
        Thin = 0  # SectionLineStyleBuilderWidthStyleMemberType
        Normal = 1  # SectionLineStyleBuilderWidthStyleMemberType
        Thick = 2  # SectionLineStyleBuilderWidthStyleMemberType
        ThicknessOne = 5  # SectionLineStyleBuilderWidthStyleMemberType
        ThicknessTwo = 6  # SectionLineStyleBuilderWidthStyleMemberType
        ThicknessThree = 7  # SectionLineStyleBuilderWidthStyleMemberType
        ThicknessFour = 8  # SectionLineStyleBuilderWidthStyleMemberType
        ThicknessFive = 9  # SectionLineStyleBuilderWidthStyleMemberType
        ThicknessSix = 10  # SectionLineStyleBuilderWidthStyleMemberType
        ThicknessSeven = 11  # SectionLineStyleBuilderWidthStyleMemberType
        ThicknessEight = 12  # SectionLineStyleBuilderWidthStyleMemberType
        ThicknessNine = 13  # SectionLineStyleBuilderWidthStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LabelLocationStyle():
        """
        This enum represents section line label location for ISO128 section lines.
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LocationType` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OnArrow", " - "
           "OnEnd", " - "
        """
        OnArrow = 0  # SectionLineStyleBuilderLabelLocationStyleMemberType
        OnEnd = 1  # SectionLineStyleBuilderLabelLocationStyleMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CreateSectionLineType():
        """
        This enum represents whether or not to create a view for the section line.
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ShowSectionLineType` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WithView", " - "
           "WithoutView", " - "
        """
        WithView = 0  # SectionLineStyleBuilderCreateSectionLineTypeMemberType
        WithoutView = 1  # SectionLineStyleBuilderCreateSectionLineTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetColor(self) -> NXOpen.NXColor:
        """
        Returns the color  
        
        Signature ``GetColor()`` 
        
        :returns: 
        :rtype: Id 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LineColorFontWidth` instead.
        
        License requirements: None.
        """
        ...
    
    
    def SetColor(self, color: NXOpen.NXColor) -> None:
        """
        Sets the color 
        
        Signature ``SetColor(color)`` 
        
        :param color: 
        :type color: Id 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LineColorFontWidth` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    ArrowLength: float = ...
    """
    Returns or sets  the arrow length 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ArrowLength` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowLength`` 
    
    :param arrowLength: 
    :type arrowLength: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ArrowLength` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowheadAngle: float = ...
    """
    Returns or sets  the arrowhead angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowheadAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ArrowheadAngle` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowheadAngle`` 
    
    :param arrowheadAngle: 
    :type arrowheadAngle: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ArrowheadAngle` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowheadLength: float = ...
    """
    Returns or sets  the arrowhead length 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowheadLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ArrowheadLength` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowheadLength`` 
    
    :param arrowheadLength: 
    :type arrowheadLength: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ArrowheadLength` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowheadStyle: SectionLineStyleBuilderArrowheadStyleType = ...
    """
    Returns or sets  the arrowhead style 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowheadStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderArrowheadStyleType` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.Style` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowheadStyle`` 
    
    :param arrowheadStyle: 
    :type arrowheadStyle: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderArrowheadStyleType` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.Style` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    BorderToArrowDistance: float = ...
    """
    Returns or sets  the border to arrow distance 
    
    <hr>
    
    Getter Method
    
    Signature ``BorderToArrowDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.BorderToArrowDistance` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderToArrowDistance`` 
    
    :param borderToArrowDistance: 
    :type borderToArrowDistance: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.BorderToArrowDistance` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CreateSectionLine: SectionLineStyleBuilderCreateSectionLineType = ...
    """
    Returns or sets  a value that indicates whether or not to create a view for the section line 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateSectionLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderCreateSectionLineType` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ShowSectionLine` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateSectionLine`` 
    
    :param createSectionLine: 
    :type createSectionLine: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderCreateSectionLineType` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.ShowSectionLine` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayJisrotationLetter: bool = ...
    """
    Returns or sets  the display jisrotation letter 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayJisrotationLetter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.DisplayRotationLetter` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayJisrotationLetter`` 
    
    :param displayJISRotationLetter: 
    :type displayJISRotationLetter: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.DisplayRotationLetter` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayLabel: bool = ...
    """
    Returns or sets  the display label 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.Display` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayLabel`` 
    
    :param displayLabel: 
    :type displayLabel: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.Display` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Font: SectionLineStyleBuilderFontStyle = ...
    """
    Returns or sets  the font 
    
    <hr>
    
    Getter Method
    
    Signature ``Font`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderFontStyle` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LineColorFontWidth` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Font`` 
    
    :param font: 
    :type font: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderFontStyle` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LineColorFontWidth` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    LabelLocation: SectionLineStyleBuilderLabelLocationStyle = ...
    """
    Returns or sets  the label location 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderLabelLocationStyle` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LabelLocation` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelLocation`` 
    
    :param labelLocation: 
    :type labelLocation: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderLabelLocationStyle` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LabelLocation` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Letter: str = ...
    """
    Returns or sets  the letter 
    
    <hr>
    
    Getter Method
    
    Signature ``Letter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.ViewCommonViewLabelBuilder.Letter` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Letter`` 
    
    :param letter: 
    :type letter: str 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.ViewCommonViewLabelBuilder.Letter` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    LineLength: float = ...
    """
    Returns or sets  the line length 
    
    <hr>
    
    Getter Method
    
    Signature ``LineLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LineLength` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineLength`` 
    
    :param lineLength: 
    :type lineLength: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LineLength` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Offset: float = ...
    """
    Returns or sets  the offset 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.UseOffset` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param offset: 
    :type offset: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.UseOffset` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SelectLetter: NXOpen.SelectTaggedObject = ...
    """
    Returns  the selected note for jisrotation letter 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectLetter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.SelectRotationLetter` instead.
    
    License requirements: None.
    """
    Standard: SectionLineStyleBuilderStandardStyle = ...
    """
    Returns or sets  the standard 
    
    <hr>
    
    Getter Method
    
    Signature ``Standard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderStandardStyle` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.TypeStandard` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Standard`` 
    
    :param standard: 
    :type standard: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderStandardStyle` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.TypeStandard` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    StubLength: float = ...
    """
    Returns or sets  the stub length 
    
    <hr>
    
    Getter Method
    
    Signature ``StubLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.Overhang` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``StubLength`` 
    
    :param stubLength: 
    :type stubLength: float 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.Overhang` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    UseOffset: bool = ...
    """
    Returns or sets  the use offset 
    
    <hr>
    
    Getter Method
    
    Signature ``UseOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.UseOffset` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseOffset`` 
    
    :param useOffset: 
    :type useOffset: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.UseOffset` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Width: SectionLineStyleBuilderWidthStyle = ...
    """
    Returns or sets  the width 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderWidthStyle` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LineColorFontWidth` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: :py:class:`NXOpen.Drawings.SectionLineStyleBuilderWidthStyle` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewSectionLineBuilder.LineColorFontWidth` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SectionLineStyleBuilder = ...  # unknown typename


class DraftingDrawingSheetCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.DraftingDrawingSheet`s.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DraftingDrawingSheet:
        """
        Finds the :py:class:`NXOpen.Drawings.DraftingDrawingSheet` with the given identifier 
        as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in 
        different versions of  the software. However newer versions of the software should find the same 
        object when  FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the Drafting drawing sheet you want  
        :type journalIdentifier: str 
        :returns:  Drafting drawing sheet with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.DraftingDrawingSheet` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateDraftingDrawingSheetBuilder(self, draftingDrawingSheet: DraftingDrawingSheet) -> DraftingDrawingSheetBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.DraftingDrawingSheetBuilder`  
        
        Signature ``CreateDraftingDrawingSheetBuilder(draftingDrawingSheet)`` 
        
        :param draftingDrawingSheet:  reserved for future use, set to 0  
        :type draftingDrawingSheet: :py:class:`NXOpen.Drawings.DraftingDrawingSheet` 
        :returns:  the drafting drawing sheet builder  
        :rtype: :py:class:`NXOpen.Drawings.DraftingDrawingSheetBuilder` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    @typing.overload
    def InsertSheet(self, drawingName: str, drawingUnits: DrawingSheetUnit, width: float, height: float, numerator: float, denominator: float, projectionAngle: DrawingSheetProjectionAngleType) -> DrawingSheet:
        """
        Inserts a drafting drawing sheet into a part.  
        
        Signature ``InsertSheet(drawingName, drawingUnits, width, height, numerator, denominator, projectionAngle)`` 
        
        :param drawingName:  Drawing name  
        :type drawingName: str 
        :param drawingUnits:  Unit of sheet size  
        :type drawingUnits: :py:class:`NXOpen.Drawings.DrawingSheetUnit` 
        :param width:  Width of drawing  
        :type width: float 
        :param height:  Height of drawing  
        :type height: float 
        :param numerator:  Numerator of the scale of drawing  
        :type numerator: float 
        :param denominator:  Denominator of the scale of drawing  
        :type denominator: float 
        :param projectionAngle:  Projection angle  
        :type projectionAngle: :py:class:`NXOpen.Drawings.DrawingSheetProjectionAngleType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.DrawingSheet` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    @typing.overload
    def InsertSheet(self, drawingName: str, sheetSize: DrawingSheetStandardSheetSize, numerator: float, denominator: float, projectionAngle: DrawingSheetProjectionAngleType) -> DrawingSheet:
        """
        Inserts a sheet into a part. The drawings units will be inferred from the standard
        size. 
        
        Signature ``InsertSheet(drawingName, sheetSize, numerator, denominator, projectionAngle)`` 
        
        :param drawingName:   Drawing name  
        :type drawingName: str 
        :param sheetSize:  Sheet Size  
        :type sheetSize: :py:class:`NXOpen.Drawings.DrawingSheetStandardSheetSize` 
        :param numerator:  Numerator of the scale of drawing  
        :type numerator: float 
        :param denominator:  Denominator of the scale of drawing  
        :type denominator: float 
        :param projectionAngle:  Projection angle  
        :type projectionAngle: :py:class:`NXOpen.Drawings.DrawingSheetProjectionAngleType` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.DrawingSheet` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class DrawingSheetUnitMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetUnit():
    """
    Specifies the units of the drawing sheet. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inches", " - "
       "Millimeters", " - "
    """
    Inches = 1  # DrawingSheetUnitMemberType
    Millimeters = 2  # DrawingSheetUnitMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetStandardSheetSizeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetStandardSheetSize():
    """
    Standard Drawing sizes 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "A", "8.5 x 11 inches"
       "B", "11 X 17 inches"
       "C", "17 X 22 inches"
       "D", "22 X 34 inches"
       "E", "34 X 44 inches"
       "F", "28 X 40 inches"
       "H", "28 X 44 inches"
       "J", "34 X 55 inches"
       "A0", "841 x 1189 millimeters"
       "A1", "594 X 841 millimeters"
       "A2", "420 X 594 millimeters"
       "A3", "297 X 420 millimeters"
       "A4", "210 X 297 millimeters"
    """
    A = 0  # DrawingSheetStandardSheetSizeMemberType
    B = 1  # DrawingSheetStandardSheetSizeMemberType
    C = 2  # DrawingSheetStandardSheetSizeMemberType
    D = 3  # DrawingSheetStandardSheetSizeMemberType
    E = 4  # DrawingSheetStandardSheetSizeMemberType
    F = 5  # DrawingSheetStandardSheetSizeMemberType
    H = 6  # DrawingSheetStandardSheetSizeMemberType
    J = 7  # DrawingSheetStandardSheetSizeMemberType
    A0 = 8  # DrawingSheetStandardSheetSizeMemberType
    A1 = 9  # DrawingSheetStandardSheetSizeMemberType
    A2 = 10  # DrawingSheetStandardSheetSizeMemberType
    A3 = 11  # DrawingSheetStandardSheetSizeMemberType
    A4 = 12  # DrawingSheetStandardSheetSizeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheetProjectionAngleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingSheetProjectionAngleType():
    """
    Specifies the projection angle of a drawing sheet.  All projected views 
    and sections will then comply with the projection angle.  Imported model views however,
    are not affected by projection angle.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FirstAngle", " - "
       "ThirdAngle", " - "
    """
    FirstAngle = 1  # DrawingSheetProjectionAngleTypeMemberType
    ThirdAngle = 2  # DrawingSheetProjectionAngleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingSheet(NXOpen.NXObject):
    """
    Represents a drawing sheet.  
    
    When you create a sheet using Add Child Rule in KF with the use_template option, 
    you will need to set the option to either custom_size or standard_size afterwards.
    You also will need to set the scale, units, projection_angle, height, and length parameters, 
    as these are not required when creating a sheet with a template. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.DrawingSheetBuilder`
    
    .. versionadded:: NX3.0.0
    """
    
    class Unit():
        """
        Specifies the units of the drawing sheet. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inches", " - "
           "Millimeters", " - "
        """
        Inches = 1  # DrawingSheetUnitMemberType
        Millimeters = 2  # DrawingSheetUnitMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StandardSheetSize():
        """
        Standard Drawing sizes 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "A", "8.5 x 11 inches"
           "B", "11 X 17 inches"
           "C", "17 X 22 inches"
           "D", "22 X 34 inches"
           "E", "34 X 44 inches"
           "F", "28 X 40 inches"
           "H", "28 X 44 inches"
           "J", "34 X 55 inches"
           "A0", "841 x 1189 millimeters"
           "A1", "594 X 841 millimeters"
           "A2", "420 X 594 millimeters"
           "A3", "297 X 420 millimeters"
           "A4", "210 X 297 millimeters"
        """
        A = 0  # DrawingSheetStandardSheetSizeMemberType
        B = 1  # DrawingSheetStandardSheetSizeMemberType
        C = 2  # DrawingSheetStandardSheetSizeMemberType
        D = 3  # DrawingSheetStandardSheetSizeMemberType
        E = 4  # DrawingSheetStandardSheetSizeMemberType
        F = 5  # DrawingSheetStandardSheetSizeMemberType
        H = 6  # DrawingSheetStandardSheetSizeMemberType
        J = 7  # DrawingSheetStandardSheetSizeMemberType
        A0 = 8  # DrawingSheetStandardSheetSizeMemberType
        A1 = 9  # DrawingSheetStandardSheetSizeMemberType
        A2 = 10  # DrawingSheetStandardSheetSizeMemberType
        A3 = 11  # DrawingSheetStandardSheetSizeMemberType
        A4 = 12  # DrawingSheetStandardSheetSizeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ProjectionAngleType():
        """
        Specifies the projection angle of a drawing sheet.  All projected views 
        and sections will then comply with the projection angle.  Imported model views however,
        are not affected by projection angle.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FirstAngle", " - "
           "ThirdAngle", " - "
        """
        FirstAngle = 1  # DrawingSheetProjectionAngleTypeMemberType
        ThirdAngle = 2  # DrawingSheetProjectionAngleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Open(self) -> None:
        """
        Displays and activates the drawing sheet so that it can be edited.  
        
        Signature ``Open()`` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetDraftingViews(self) -> 'list[DraftingView]':
        """
        Returns the :py:class:`NXOpen.Drawings.DraftingView`s on a sheet.  
        
        Signature ``GetDraftingViews()`` 
        
        :returns: 
        :rtype: list of :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetScale(self) -> tuple:
        """
        Returns the scale of the drawing sheet.  
        
        The scale of views that are
        defined by an expression, will not modified by this method.
        
        Signature ``GetScale()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (numerator, denominator). numerator is a float. denominator is a float. 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetParameters(self, height: float, length: float, numerator: float, denominator: float, units: DrawingSheetUnit, projectionAngle: DrawingSheetProjectionAngleType) -> 'list[DraftingView]':
        """
        Sets the parameters of the drawing sheet.  
        
        The scale of those :py:class:`NXOpen.Drawings.DraftingView`s that are
        defined by an expression, will not modified by this method.  Currently this method only works for
        drawings that are opened.
        
        Signature ``SetParameters(height, length, numerator, denominator, units, projectionAngle)`` 
        
        :param height: 
        :type height: float 
        :param length: 
        :type length: float 
        :param numerator: 
        :type numerator: float 
        :param denominator: 
        :type denominator: float 
        :param units: 
        :type units: :py:class:`NXOpen.Drawings.DrawingSheetUnit` 
        :param projectionAngle: 
        :type projectionAngle: :py:class:`NXOpen.Drawings.DrawingSheetProjectionAngleType` 
        :returns:  List of  Drafting Views that did not have their scale modified
        due to being defined by an expression.  
        :rtype: list of :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ActivateForSketching(self) -> None:
        """
        Sets this drawingsheet's view as the active sketch view.  
        
        Note: Can only activate a drawing sheet view for 
        an active drawing sheet 
        
        Signature ``ActivateForSketching()`` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ResetActiveForSketching(self) -> None:
        """
        Resets active for sketching view in given drawing.  
        
        Signature ``ResetActiveForSketching()`` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetZoneReference(self, viewTag: DraftingView) -> str:
        """
        Returns the zone location or reference of the view if sheet zones are defined.  
        
        Signature ``GetZoneReference(viewTag)`` 
        
        :param viewTag: 
        :type viewTag: :py:class:`NXOpen.Drawings.DraftingView` 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetSheetZoneReference(self, viewTag: DraftingView) -> str:
        """
        Returns the sheet and zone location or reference of the view if sheet zones are defined.  
        
        Signature ``GetSheetZoneReference(viewTag)`` 
        
        :param viewTag: 
        :type viewTag: :py:class:`NXOpen.Drawings.DraftingView` 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    BordersAndZones: BordersAndZones = ...
    """
    Returns or sets  the borders and zones object if present 
    
    <hr>
    
    Getter Method
    
    Signature ``BordersAndZones`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BordersAndZones` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``BordersAndZones`` 
    
    :param bodersAndZones: 
    :type bodersAndZones: :py:class:`NXOpen.Drawings.BordersAndZones` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Height: float = ...
    """
    Returns  the height of the drawing sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``Height`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    IsActiveForSketching: bool = ...
    """
    Returns  true if this drawing sheet's view is the active sketch view.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsActiveForSketching`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IsOutOfDate: bool = ...
    """
    Returns  the status on whether this :py:class:`NXOpen.Drawings.DrawingSheet` is out of date.  
    
    <hr>
    
    Getter Method
    
    Signature ``IsOutOfDate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Length: float = ...
    """
    Returns  the length of the drawing sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    ProjectionAngle: DrawingSheetProjectionAngleType = ...
    """
    Returns  the projection angle of the drawing sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectionAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheetProjectionAngleType` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    Units: DrawingSheetUnit = ...
    """
    Returns  the units of the drawing sheet.  
    
    To change the units of drawing sheet, use 
    :py:meth:`NXOpen.Drawings.DrawingSheet.SetParameters` 
    
    <hr>
    
    Getter Method
    
    Signature ``Units`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingSheetUnit` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    View: NXOpen.View = ...
    """
    Returns  the :py:class:`NXOpen.View` that represents this drawing sheet.  
    
    <hr>
    
    Getter Method
    
    Signature ``View`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX3.0.0
    
    License requirements: None.
    """
    SheetDraftingViews: SheetDraftingViewCollection = ...
    """
    Returns the SheetDraftingViewCollection instance belonging to this drawing sheet 
    
    Signature ``SheetDraftingViews`` 
    
    .. versionadded:: NX5.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SheetDraftingViewCollection`
    """
    SheetSectionLines: SheetSectionLineCollection = ...
    """
    Returns the SheetSectionLineCollection instance belonging to this drawing sheet 
    
    Signature ``SheetSectionLines`` 
    
    .. versionadded:: NX6.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SheetSectionLineCollection`
    """
    Null: DrawingSheet = ...  # unknown typename


class HalfSectionLineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.HalfSectionLineBuilder`.  
    
    This class is used to create or edit a
    :py:class:`NXOpen.Drawings.HalfSectionLine`. 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType` instead.
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BendLocation: NXOpen.Point = ...
    """
    Returns or sets  the bend location 
    
    <hr>
    
    Getter Method
    
    Signature ``BendLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendLocation`` 
    
    :param bendLocation: 
    :type bendLocation: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CutLocation: NXOpen.Point = ...
    """
    Returns or sets  the cut location 
    
    <hr>
    
    Getter Method
    
    Signature ``CutLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutLocation`` 
    
    :param cutLocation: 
    :type cutLocation: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    EndLocation1: NXOpen.Point = ...
    """
    Returns or sets  the arrow location 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation1`` 
    
    :param endLocation1: 
    :type endLocation1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Null: HalfSectionLineBuilder = ...  # unknown typename


class HiddenObjectsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This builder allows the user to select a view in which
    component objects can be designated as hidden or shown   
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Objects: NXOpen.SelectNXObjectList = ...
    """
    Returns  the objects 
    
    <hr>
    
    Getter Method
    
    Signature ``Objects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: HiddenObjectsBuilder = ...  # unknown typename


class PointAndAngleSectionLine(SectionLine):
    """
    Point and Angle Section Line lets you create a view with multiple
    segment cuts with no bends.  
    
    The section line is defined by a
    set of rotation points and angles. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SectionLineBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PointAndAngleSectionLine = ...  # unknown typename


class DraftingPoint(NXOpen.Point):
    """
    Represents a Drafting VD Point.  
    
    An instance of this class can be obtained by using :py:class:`NXOpen.Drawings.DraftingPointCollection`
    
    .. versionadded:: NX12.0.0
    """
    Null: DraftingPoint = ...  # unknown typename


class ViewStyleInheritPmiBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the INHERIT PMI tab on the View Style Dialog (Drawings.  
    
    ViewStyleInheritPmiBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CrosshatchPmiLwsv: bool = ...
    """
    Returns or sets  the cross-hatch setting for the current inherited PMI Lightweight Section View 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchPmiLwsv`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchPmiLwsv`` 
    
    :param crosshatch: 
    :type crosshatch: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Gdt: NXOpen.Preferences.GdtOption = ...
    """
    Returns or sets  the gdt option on the INHERIT PMI tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Gdt`` 
    
    :returns:  Returns the gdt option that is on the inherit pmi sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GdtOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Gdt`` 
    
    :param gdtOption:  Sets a new gdt option on the inherit pmi sub-builder  
    :type gdtOption: :py:class:`NXOpen.Preferences.GdtOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Pmi: NXOpen.Preferences.PmiOption = ...
    """
    Returns or sets  the pmi option on the INHERIT PMI tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Pmi`` 
    
    :returns:  Returns the pmi option that is on the inherit pmi sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.PmiOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Pmi`` 
    
    :param pmiOption:  Sets a new pmi option on the inherit pmi sub-builder  
    :type pmiOption: :py:class:`NXOpen.Preferences.PmiOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PmiFromRevolved: bool = ...
    """
    Returns or sets  the 'Show PMI Dimensions from Revolved Sketches' toggle on the INHERIT PMI tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiFromRevolved`` 
    
    :returns:  Returns the pmi to drawing toggle value that is on the inherit pmi sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiFromRevolved`` 
    
    :param pmiFromRevolvedToggle:  Sets a new pmi to drawing toggle value on the inherit pmi sub-builder  
    :type pmiFromRevolvedToggle: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PmiToDrawing: bool = ...
    """
    Returns or sets  the 'pmi to drawing' toggle on the INHERIT PMI tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiToDrawing`` 
    
    :returns:  Returns the pmi to drawing toggle value that is on the inherit pmi sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiToDrawing`` 
    
    :param pmiToDrawingToggle:  Sets a new pmi to drawing toggle value on the inherit pmi sub-builder  
    :type pmiToDrawingToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PmiTypeMask: int = ...
    """
    Returns or sets  the type mask on the INHERIT PMI tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``PmiTypeMask`` 
    
    :returns:  Returns the pmi type mask that is on the inherit pmi sub-builder  
    :rtype: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PmiTypeMask`` 
    
    :param pmiTypeMask:  Sets a new pmi type mask on the inherit pmi sub-builder  
    :type pmiTypeMask: int 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ReferenceSetBehavior: NXOpen.Preferences.ReferenceSetBehavior = ...
    """
    Returns or sets  the reference set option 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceSetBehavior`` 
    
    :returns:  Returns the pmi option that is on the inherit pmi sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.ReferenceSetBehavior` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceSetBehavior`` 
    
    :param pmiOption:  Sets a new pmi option on the inherit pmi sub-builder  
    :type pmiOption: :py:class:`NXOpen.Preferences.ReferenceSetBehavior` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleInheritPmiBuilder = ...  # unknown typename


class StandardViewsBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StandardViewsBuilderType():
    """
    The view Layout type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "FrontTop", "front, top"
       "FrontRight", "front, right"
       "FrontLeft", "front, left"
       "FrontTopRight", "front, top, right"
       "FrontTopLeft", "front, top, left"
       "FrontTopRightIso", "front, top, right, iso"
       "FrontTopLeftIso", "front, top, left, iso"
    """
    FrontTop = 0  # StandardViewsBuilderTypeMemberType
    FrontRight = 1  # StandardViewsBuilderTypeMemberType
    FrontLeft = 2  # StandardViewsBuilderTypeMemberType
    FrontTopRight = 3  # StandardViewsBuilderTypeMemberType
    FrontTopLeft = 4  # StandardViewsBuilderTypeMemberType
    FrontTopRightIso = 5  # StandardViewsBuilderTypeMemberType
    FrontTopLeftIso = 6  # StandardViewsBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardViewsBuilderViewMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StandardViewsBuilderView():
    """
    The view type to create 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Drawing", "drawing (2d) views"
       "Base", "base views"
    """
    Drawing = 0  # StandardViewsBuilderViewMemberType
    Base = 1  # StandardViewsBuilderViewMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardViewsBuilderPlacementMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class StandardViewsBuilderPlacement():
    """
    The view Layout placement type (deprecated) 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Center", " - "
       "Corner", " - "
    """
    Center = 0  # StandardViewsBuilderPlacementMemberType
    Corner = 1  # StandardViewsBuilderPlacementMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class StandardViewsBuilder(NXOpen.Builder):
    """
    This builder allows the user to create a Drawing View   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateStandardViewsBuilder`
    
    Default values.
    
    ==========================================================  ==========================================
    Property                                                    Value
    ==========================================================  ==========================================
    FirstCorner.AlignmentMethod (deprecated)                    Infer 
    ----------------------------------------------------------  ------------------------------------------
    FirstCorner.AlignmentOption (deprecated)                    ToView 
    ----------------------------------------------------------  ------------------------------------------
    LayoutType                                                  FrontTopRightIso 
    ----------------------------------------------------------  ------------------------------------------
    MarginBetweenViews                                          5 (millimeters part), 0.25 (inches part) 
    ----------------------------------------------------------  ------------------------------------------
    MarginToBorder                                              20 (millimeters part), 0.75 (inches part) 
    ----------------------------------------------------------  ------------------------------------------
    MultipleViewPlacement.OptionType                            Center 
    ----------------------------------------------------------  ------------------------------------------
    Scale.Denominator                                           1.0 
    ----------------------------------------------------------  ------------------------------------------
    Scale.Numerator                                             1.0 
    ----------------------------------------------------------  ------------------------------------------
    Scale.ScaleType                                             Ratio 
    ----------------------------------------------------------  ------------------------------------------
    SecondaryComponents.ObjectType                              PrimaryGeometry 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleGeneral.AngleSetting.Angle.Value         0 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleGeneral.AngleSetting.Associative         0 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleGeneral.AngleSetting.EvaluationPlane     DrawingSheet 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleOrientation.HingeLine.ReverseDirection   false 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleOrientation.HingeLine.VectorOption       Inferred 
    ----------------------------------------------------------  ------------------------------------------
    ViewStyle.ViewStyleOrientation.Ovt.AssociativeOrientation   0 
    ==========================================================  ==========================================
    
    .. versionadded:: NX6.0.1
    """
    
    class Type():
        """
        The view Layout type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "FrontTop", "front, top"
           "FrontRight", "front, right"
           "FrontLeft", "front, left"
           "FrontTopRight", "front, top, right"
           "FrontTopLeft", "front, top, left"
           "FrontTopRightIso", "front, top, right, iso"
           "FrontTopLeftIso", "front, top, left, iso"
        """
        FrontTop = 0  # StandardViewsBuilderTypeMemberType
        FrontRight = 1  # StandardViewsBuilderTypeMemberType
        FrontLeft = 2  # StandardViewsBuilderTypeMemberType
        FrontTopRight = 3  # StandardViewsBuilderTypeMemberType
        FrontTopLeft = 4  # StandardViewsBuilderTypeMemberType
        FrontTopRightIso = 5  # StandardViewsBuilderTypeMemberType
        FrontTopLeftIso = 6  # StandardViewsBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class View():
        """
        The view type to create 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Drawing", "drawing (2d) views"
           "Base", "base views"
        """
        Drawing = 0  # StandardViewsBuilderViewMemberType
        Base = 1  # StandardViewsBuilderViewMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Placement():
        """
        The view Layout placement type (deprecated) 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Center", " - "
           "Corner", " - "
        """
        Center = 0  # StandardViewsBuilderPlacementMemberType
        Corner = 1  # StandardViewsBuilderPlacementMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    Autoscale: bool = ...
    """
    Returns or sets  the autoscale mode for base view creation 
    
    <hr>
    
    Getter Method
    
    Signature ``Autoscale`` 
    
    :returns:  returns the auto-scale mode status.  
    :rtype: bool 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Autoscale`` 
    
    :param autoScale:  sets the auto-scale mode.  
    :type autoScale: bool 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    Coordinate: ViewCenterCoordinateBuilder = ...
    """
    Returns  the center coordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``Coordinate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCenterCoordinateBuilder` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    """
    FirstCorner: ViewPlacementBuilder = ...
    """
    Returns  the first corner view placement 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstCorner`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.1
    
    .. deprecated::  NX6.0.2
       Use the first corner of the multiple view placemnent builder instead
    
    License requirements: None.
    """
    HiddenObjects: HiddenObjectsBuilder = ...
    """
    Returns  the list of objects to not show in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    LayoutType: StandardViewsBuilderType = ...
    """
    Returns or sets  the Layout type 
    
    <hr>
    
    Getter Method
    
    Signature ``LayoutType`` 
    
    :returns:  returns the layout type.  
    :rtype: :py:class:`NXOpen.Drawings.StandardViewsBuilderType` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LayoutType`` 
    
    :param type:  sets the layout type.  
    :type type: :py:class:`NXOpen.Drawings.StandardViewsBuilderType` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: nx_layout ("NX Layout")
    """
    MarginBetweenViews: float = ...
    """
    Returns or sets  the margin between views 
    
    <hr>
    
    Getter Method
    
    Signature ``MarginBetweenViews`` 
    
    :returns:  returns the margin between views.  
    :rtype: float 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarginBetweenViews`` 
    
    :param marginBetweenViews:  sets the margin between views.  
    :type marginBetweenViews: float 
    
    .. versionadded:: NX6.0.1
    
    License requirements: nx_layout ("NX Layout")
    """
    MarginToBorder: float = ...
    """
    Returns or sets  the margin to border 
    
    <hr>
    
    Getter Method
    
    Signature ``MarginToBorder`` 
    
    :returns:  returns the margin to border.  
    :rtype: float 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarginToBorder`` 
    
    :param marginToBorder:  sets the margin to border.  
    :type marginToBorder: float 
    
    .. versionadded:: NX6.0.1
    
    License requirements: nx_layout ("NX Layout")
    """
    MultipleViewPlacement: MultipleViewPlacementBuilder = ...
    """
    Returns  the multiple view placement 
    
    <hr>
    
    Getter Method
    
    Signature ``MultipleViewPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.MultipleViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    NonSectionedObjects: HiddenObjectsBuilder = ...
    """
    Returns  the list of objects to not section in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    Part: NXOpen.Part = ...
    """
    Returns or sets  the part to use for base views 
    
    <hr>
    
    Getter Method
    
    Signature ``Part`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Part`` 
    
    :param part: 
    :type part: :py:class:`NXOpen.Part` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    PlacementType: StandardViewsBuilderPlacement = ...
    """
    Returns or sets  the Placement type 
    
    <hr>
    
    Getter Method
    
    Signature ``PlacementType`` 
    
    :returns:  returns the placement type.  
    :rtype: :py:class:`NXOpen.Drawings.StandardViewsBuilderPlacement` 
    
    .. versionadded:: NX6.0.1
    
    .. deprecated::  NX6.0.2
       Use the type of the multiple view placement
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PlacementType`` 
    
    :param type:  sets the layout type.  
    :type type: :py:class:`NXOpen.Drawings.StandardViewsBuilderPlacement` 
    
    .. versionadded:: NX6.0.1
    
    .. deprecated::  NX6.0.2
       Use the type of the multiple view placement
    
    License requirements: nx_layout ("NX Layout")
    """
    Scale: ViewScaleBuilder = ...
    """
    Returns  the view scale 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewScaleBuilder` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    """
    SecondCorner: ViewPlacementBuilder = ...
    """
    Returns  the second corner view placement 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondCorner`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.1
    
    .. deprecated::  NX6.0.2
       Use the second corner of the multiple view placemnent builder instead
    
    License requirements: None.
    """
    SecondaryComponents: DraftingComponentSelectionBuilder = ...
    """
    Returns  the list of secondary objects in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingComponentSelectionBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    ViewPlacement: ViewPlacementBuilder = ...
    """
    Returns  the view placement 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.1
    
    .. deprecated::  NX6.0.2
       Use GetMultipleViewPlacement instead
    
    License requirements: None.
    """
    ViewStyle: ViewStyleBuilder = ...
    """
    Returns  the view style 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleBuilder` 
    
    .. versionadded:: NX6.0.1
    
    License requirements: None.
    """
    ViewType: StandardViewsBuilderView = ...
    """
    Returns or sets  the view type 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewType`` 
    
    :returns:  returns the view type.  
    :rtype: :py:class:`NXOpen.Drawings.StandardViewsBuilderView` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewType`` 
    
    :param viewType:  sets the view type.  
    :type viewType: :py:class:`NXOpen.Drawings.StandardViewsBuilderView` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: nx_layout ("NX Layout")
    """
    Null: StandardViewsBuilder = ...  # unknown typename


class DraftingCurveCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.DraftingCurve`s.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Drawings.DraftingBody`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DraftingCurve:
        """
        Finds the :py:class:`NXOpen.Drawings.DraftingCurve` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of
        the software. However newer versions of the software should find the same object when
        FindObject is passed older versions of its journal identifier. In general, this method
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the DraftingCurve to be found  
        :type journalIdentifier: str 
        :returns:  DraftingCurve with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.DraftingCurve` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    


class BaseViewBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.BaseView` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateBaseViewBuilder`
    
    Default values.
    
    ======================================================  ================
    Property                                                Value
    ======================================================  ================
    Placement.AlignmentMethod                               Infer 
    ------------------------------------------------------  ----------------
    Placement.AlignmentOption                               ToView 
    ------------------------------------------------------  ----------------
    Scale.Denominator                                       1.0 
    ------------------------------------------------------  ----------------
    Scale.Numerator                                         1.0 
    ------------------------------------------------------  ----------------
    Scale.ScaleType                                         Ratio 
    ------------------------------------------------------  ----------------
    SecondaryComponents.ObjectType                          PrimaryGeometry 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.AngleSetting.Angle.Value         0 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.AngleSetting.Associative         0 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.AngleSetting.EvaluationPlane     DrawingSheet 
    ------------------------------------------------------  ----------------
    Style.ViewStyleOrientation.HingeLine.ReverseDirection   false 
    ------------------------------------------------------  ----------------
    Style.ViewStyleOrientation.HingeLine.VectorOption       Inferred 
    ------------------------------------------------------  ----------------
    Style.ViewStyleOrientation.Ovt.AssociativeOrientation   0 
    ======================================================  ================
    
    .. versionadded:: NX6.0.0
    """
    HiddenObjects: HiddenObjectsBuilder = ...
    """
    Returns  the list of objects to not show in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NonSectionedObjects: HiddenObjectsBuilder = ...
    """
    Returns  the list of objects to not section in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Placement: ViewPlacementBuilder = ...
    """
    Returns  the view placement 
    
    <hr>
    
    Getter Method
    
    Signature ``Placement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Scale: ViewScaleBuilder = ...
    """
    Returns  the view scale 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewScaleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SecondaryComponents: DraftingComponentSelectionBuilder = ...
    """
    Returns  the list of secondary objects in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingComponentSelectionBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectModelView: SelectModelViewBuilder = ...
    """
    Returns  the model view 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectModelView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectModelViewBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Style: ViewStyleBuilder = ...
    """
    Returns  the view style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: BaseViewBuilder = ...  # unknown typename


class ViewStyleOrientationBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the ORIENTATION tab on the View Style Dialog (Drawings.  
    
    ViewStyleOrientationBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    HingeLine: HingeLineBuilder = ...
    """
    Returns  the view hinge line definition on the ORIENTATION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HingeLine`` 
    
    :returns:  Returns the view hinge line definition that is on the style orientation sub-builder  
    :rtype: :py:class:`NXOpen.Drawings.HingeLineBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Ovt: OvtBuilder = ...
    """
    Returns  the view orientation definition on the ORIENTATION tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Ovt`` 
    
    :returns:  Returns the view orientation definition that is on the style orientation sub-builder  
    :rtype: :py:class:`NXOpen.Drawings.OvtBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ViewStyleOrientationBuilder = ...  # unknown typename


class BorderAndZoneStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the Border and Zone Style Builder which manages all the style attributes related
    *   to sheet borders, sheet margins and sheet zones.  
    
    .. versionadded:: NX10.0.0
    """
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit settings from customer default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit settings from preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BorderAndZoneStandard: int = ...
    """
    Returns or sets  the borders and zones standard 
    
    <hr>
    
    Getter Method
    
    Signature ``BorderAndZoneStandard`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderAndZoneStandard`` 
    
    :param borderAndZoneStandard: 
    :type borderAndZoneStandard: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    SheetBorderSettingsStyle: SheetBorderSettingsBuilder = ...
    """
    Returns  the drawing sheet border settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetBorderSettingsStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SheetBorderSettingsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SheetMarginSettingsStyle: SheetMarginSettingsBuilder = ...
    """
    Returns  the drawing sheet margin settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetMarginSettingsStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SheetMarginSettingsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SheetZoneSettingsStyle: SheetZoneSettingsBuilder = ...
    """
    Returns  the drawing sheet zone settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetZoneSettingsStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SheetZoneSettingsBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: BorderAndZoneStyleBuilder = ...  # unknown typename


class ViewStyleSmoothEdgesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the SMOOTH EDGES tab on the View Style Dialog (Drawings.  
    
    ViewStyleSmoothEdgesBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color on the SMOOTH EDGES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns:  Returns the color that is on the smooth edges sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color:  Sets a new color on the smooth edge sub-builder  
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    EndGaps: bool = ...
    """
    Returns or sets  the end gaps toggle on the SMOOTH EDGES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``EndGaps`` 
    
    :returns:  Returns the end gaps toggle value that is on the smooth edges sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndGaps`` 
    
    :param endGapsToggle:  Sets a new end gaps toggle value on the smooth edge sub-builder  
    :type endGapsToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    EndGapsDistance: float = ...
    """
    Returns or sets  the end gaps data on the SMOOTH EDGES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``EndGapsDistance`` 
    
    :returns:  Returns the end gaps data that is on the smooth edges sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndGapsDistance`` 
    
    :param endGapsData:  Sets new end gaps data on the smooth edge sub-builder  
    :type endGapsData: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Font: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the font on the SMOOTH EDGES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Font`` 
    
    :returns:  Returns the font that is on the smooth edges sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Font`` 
    
    :param font:  Sets a new font on the smooth edge sub-builder  
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmoothEdge: bool = ...
    """
    Returns or sets  the smooth edge toggle on the SMOOTH EDGES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SmoothEdge`` 
    
    :returns:  Returns the smooth edge toggle value that is on the smooth edges sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmoothEdge`` 
    
    :param smoothEdgesToggle:  Sets a new smooth edge toggle value on the smooth edge sub-builder  
    :type smoothEdgesToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Tolerance: bool = ...
    """
    Returns or sets  the angle tolerance toggle on the SMOOTH EDGES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns:  Returns the tolerance toggle value that is on the smooth edges sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param toleranceToggle:  Sets a new tolerance toggle value on the smooth edge sub-builder  
    :type toleranceToggle: bool 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ToleranceValue: float = ...
    """
    Returns or sets  the angle tolerance data on the SMOOTH EDGES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ToleranceValue`` 
    
    :returns:  Returns the tolerance data that is on the smooth edges sub-builder  
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ToleranceValue`` 
    
    :param toleranceData:  Sets new tolerance data on the smooth edge sub-builder  
    :type toleranceData: float 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Width: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the width on the SMOOTH EDGES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns:  Returns the width that is on the smooth edges sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width:  Sets a new width on the smooth edge sub-builder  
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleSmoothEdgesBuilder = ...  # unknown typename


class VisibleAndHiddenLinesColorFontWidthBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represent a :py:class:`NXOpen.Drawings.VisibleAndHiddenLinesColorFontWidthBuilder`
    
    This is a sub-builder class and cannot be directly instantiated
    
    .. versionadded:: NX11.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    HiddenCFW: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the hidden lines color, font, and width.  
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenCFW`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    VisibleCFW: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the visible lines color, font, and width.  
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleCFW`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Null: VisibleAndHiddenLinesColorFontWidthBuilder = ...  # unknown typename


class SelectModelViewBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Select Model View builder that selects a model view
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    SelectedView: NXOpen.ModelingView = ...
    """
    Returns or sets  the selected view 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.ModelingView` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectedView`` 
    
    :param view: 
    :type view: :py:class:`NXOpen.ModelingView` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SelectModelViewBuilder = ...  # unknown typename


class ViewSectionLineBuilderShowSectionLineTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewSectionLineBuilderShowSectionLineType():
    """
    specifies the show section line options
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "WithSectionView", " - "
       "WithoutSectionView", " - "
    """
    WithSectionView = 0  # ViewSectionLineBuilderShowSectionLineTypeMemberType
    WithoutSectionView = 1  # ViewSectionLineBuilderShowSectionLineTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewSectionLineBuilderDisplayTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewSectionLineBuilderDisplayType():
    """
    specifies the section line symbol display 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ArrowsAwayfromLine", " - "
       "ArrowstowardsLine", " - "
       "ThickEndsArrowstowardsLine", " - "
       "ThickEndsArrowsAwayfromLine", " - "
    """
    ArrowsAwayfromLine = 0  # ViewSectionLineBuilderDisplayTypeMemberType
    ArrowstowardsLine = 1  # ViewSectionLineBuilderDisplayTypeMemberType
    ThickEndsArrowstowardsLine = 2  # ViewSectionLineBuilderDisplayTypeMemberType
    ThickEndsArrowsAwayfromLine = 3  # ViewSectionLineBuilderDisplayTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewSectionLineBuilderStyleTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewSectionLineBuilderStyleType():
    """
    specifies the section line arrowhead style 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Open", " - "
       "Closed", " - "
       "Filled", " - "
    """
    Open = 0  # ViewSectionLineBuilderStyleTypeMemberType
    Closed = 1  # ViewSectionLineBuilderStyleTypeMemberType
    Filled = 2  # ViewSectionLineBuilderStyleTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewSectionLineBuilderLocationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewSectionLineBuilderLocationType():
    """
    specifies the label location for ISO128 section lines. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OnArrow", " - "
       "OnEnd", " - "
    """
    OnArrow = 0  # ViewSectionLineBuilderLocationTypeMemberType
    OnEnd = 1  # ViewSectionLineBuilderLocationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewSectionLineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewSectionLineBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class ShowSectionLineType():
        """
        specifies the show section line options
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "WithSectionView", " - "
           "WithoutSectionView", " - "
        """
        WithSectionView = 0  # ViewSectionLineBuilderShowSectionLineTypeMemberType
        WithoutSectionView = 1  # ViewSectionLineBuilderShowSectionLineTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class DisplayType():
        """
        specifies the section line symbol display 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ArrowsAwayfromLine", " - "
           "ArrowstowardsLine", " - "
           "ThickEndsArrowstowardsLine", " - "
           "ThickEndsArrowsAwayfromLine", " - "
        """
        ArrowsAwayfromLine = 0  # ViewSectionLineBuilderDisplayTypeMemberType
        ArrowstowardsLine = 1  # ViewSectionLineBuilderDisplayTypeMemberType
        ThickEndsArrowstowardsLine = 2  # ViewSectionLineBuilderDisplayTypeMemberType
        ThickEndsArrowsAwayfromLine = 3  # ViewSectionLineBuilderDisplayTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class StyleType():
        """
        specifies the section line arrowhead style 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Open", " - "
           "Closed", " - "
           "Filled", " - "
        """
        Open = 0  # ViewSectionLineBuilderStyleTypeMemberType
        Closed = 1  # ViewSectionLineBuilderStyleTypeMemberType
        Filled = 2  # ViewSectionLineBuilderStyleTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class LocationType():
        """
        specifies the label location for ISO128 section lines. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "OnArrow", " - "
           "OnEnd", " - "
        """
        OnArrow = 0  # ViewSectionLineBuilderLocationTypeMemberType
        OnEnd = 1  # ViewSectionLineBuilderLocationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def InheritSettingsFromSelectedObjects(self, selectedObject: NXOpen.NXObject) -> None:
        """
        Inherit Settings From Selected Objects 
        
        Signature ``InheritSettingsFromSelectedObjects(selectedObject)`` 
        
        :param selectedObject:  The selected annotation or table or view instance object.                                                                None is not allowed.  
        :type selectedObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit Settings From Customer Default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit Settings From Preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ArrowLength: float = ...
    """
    Returns or sets  the arrow length 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowLength`` 
    
    :param arrowLength: 
    :type arrowLength: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowheadAngle: float = ...
    """
    Returns or sets  the included angle for the arrowhead 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowheadAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowheadAngle`` 
    
    :param arrowheadAngle: 
    :type arrowheadAngle: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowheadLength: float = ...
    """
    Returns or sets  the arrowhead length 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowheadLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowheadLength`` 
    
    :param arrowheadLength: 
    :type arrowheadLength: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BendAndEndSegmentWidthFactor: float = ...
    """
    Returns or sets  the section line bend and end segment width factor 
    
    <hr>
    
    Getter Method
    
    Signature ``BendAndEndSegmentWidthFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BendAndEndSegmentWidthFactor`` 
    
    :param bendAndEndSegmentWidthFactor: 
    :type bendAndEndSegmentWidthFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BorderToArrowDistance: float = ...
    """
    Returns or sets  the border to arrow distance 
    
    <hr>
    
    Getter Method
    
    Signature ``BorderToArrowDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderToArrowDistance`` 
    
    :param borderToArrowDistance: 
    :type borderToArrowDistance: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Display: bool = ...
    """
    Returns or sets  the display 
    
    <hr>
    
    Getter Method
    
    Signature ``Display`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Display`` 
    
    :param display: 
    :type display: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayLettersOnBends: bool = ...
    """
    Returns or sets  the display letters on bends 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayLettersOnBends`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayLettersOnBends`` 
    
    :param displayLettersOnBends: 
    :type displayLettersOnBends: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayRotationLetter: bool = ...
    """
    Returns or sets  the display rotation letter 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayRotationLetter`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayRotationLetter`` 
    
    :param displayRotationLetter: 
    :type displayRotationLetter: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Gap: float = ...
    """
    Returns or sets  the gap 
    
    <hr>
    
    Getter Method
    
    Signature ``Gap`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Gap`` 
    
    :param gap: 
    :type gap: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelLocation: ViewSectionLineBuilderLocationType = ...
    """
    Returns or sets  the label location 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelLocation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSectionLineBuilderLocationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelLocation`` 
    
    :param labelLocation: 
    :type labelLocation: :py:class:`NXOpen.Drawings.ViewSectionLineBuilderLocationType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LineColorFontWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the line color font width 
    
    <hr>
    
    Getter Method
    
    Signature ``LineColorFontWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    LineLength: float = ...
    """
    Returns or sets  the length of the end of the ESKD section line 
    
    <hr>
    
    Getter Method
    
    Signature ``LineLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LineLength`` 
    
    :param lineLength: 
    :type lineLength: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Overhang: float = ...
    """
    Returns or sets  the stub length 
    
    <hr>
    
    Getter Method
    
    Signature ``Overhang`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Overhang`` 
    
    :param overhang: 
    :type overhang: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelectRotationLetter: NXOpen.SelectTaggedObject = ...
    """
    Returns  the selected objected should be note type only which is the desired location of the rotation point of the section line specified 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectRotationLetter`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ShowSectionLine: ViewSectionLineBuilderShowSectionLineType = ...
    """
    Returns or sets  the value to show section line with or without view
    
    <hr>
    
    Getter Method
    
    Signature ``ShowSectionLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSectionLineBuilderShowSectionLineType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowSectionLine`` 
    
    :param showSectionLine: 
    :type showSectionLine: :py:class:`NXOpen.Drawings.ViewSectionLineBuilderShowSectionLineType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Style: ViewSectionLineBuilderStyleType = ...
    """
    Returns or sets  the section line arrowhead style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSectionLineBuilderStyleType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Style`` 
    
    :param style: 
    :type style: :py:class:`NXOpen.Drawings.ViewSectionLineBuilderStyleType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TypeStandard: ViewSectionLineBuilderDisplayType = ...
    """
    Returns or sets  the section line symbol display 
    
    <hr>
    
    Getter Method
    
    Signature ``TypeStandard`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSectionLineBuilderDisplayType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TypeStandard`` 
    
    :param typeStandard: 
    :type typeStandard: :py:class:`NXOpen.Drawings.ViewSectionLineBuilderDisplayType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    UseLineLength: bool = ...
    """
    Returns or sets  the use line length in case of ESKD section line 
    
    <hr>
    
    Getter Method
    
    Signature ``UseLineLength`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseLineLength`` 
    
    :param uselineLength: 
    :type uselineLength: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    UseOffset: bool = ...
    """
    Returns or sets  the use offset 
    
    <hr>
    
    Getter Method
    
    Signature ``UseOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseOffset`` 
    
    :param useOffset: 
    :type useOffset: bool 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewSectionLineBuilder = ...  # unknown typename


class ProjectedView(DraftingView):
    """
    Represents a Projected View.  
    
    This can be Auxilary View or Orthographic View 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.ProjectedViewBuilder`
    
    .. versionadded:: NX5.0.0
    """
    Null: ProjectedView = ...  # unknown typename


class MarkAsTemplateBuilderTemplateTypeEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MarkAsTemplateBuilderTemplateTypeEnum():
    """
    the template type enum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Sheet", " - "
       "ReferenceExistingPart", " - "
       "Standalone", " - "
    """
    Sheet = 0  # MarkAsTemplateBuilderTemplateTypeEnumMemberType
    ReferenceExistingPart = 1  # MarkAsTemplateBuilderTemplateTypeEnumMemberType
    Standalone = 2  # MarkAsTemplateBuilderTemplateTypeEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MarkAsTemplateBuilderRelationTypeEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MarkAsTemplateBuilderRelationTypeEnum():
    """
    the relation type enum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Master", " - "
       "Specification", " - "
       "Manifestation", " - "
    """
    Master = 0  # MarkAsTemplateBuilderRelationTypeEnumMemberType
    Specification = 1  # MarkAsTemplateBuilderRelationTypeEnumMemberType
    Manifestation = 2  # MarkAsTemplateBuilderRelationTypeEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MarkAsTemplateBuilderItemTypeEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MarkAsTemplateBuilderItemTypeEnum():
    """
    the item type enum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Any", " - "
       "NXPart", " - "
       "NXDrawing", " - "
    """
    Any = 0  # MarkAsTemplateBuilderItemTypeEnumMemberType
    NXPart = 1  # MarkAsTemplateBuilderItemTypeEnumMemberType
    NXDrawing = 2  # MarkAsTemplateBuilderItemTypeEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MarkAsTemplateBuilderActionTypeEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class MarkAsTemplateBuilderActionTypeEnum():
    """
    the action type enum. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "TemplateOnly", " - "
       "TemplateAndPax", " - "
    """
    TemplateOnly = 0  # MarkAsTemplateBuilderActionTypeEnumMemberType
    TemplateAndPax = 1  # MarkAsTemplateBuilderActionTypeEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MarkAsTemplateBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.MarkAsTemplateBuilder`
    
    To create a new instance of this class, use :py:meth:`NXOpen.DraftingManager.CreateMarkAsTemplateBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    class TemplateTypeEnum():
        """
        the template type enum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Sheet", " - "
           "ReferenceExistingPart", " - "
           "Standalone", " - "
        """
        Sheet = 0  # MarkAsTemplateBuilderTemplateTypeEnumMemberType
        ReferenceExistingPart = 1  # MarkAsTemplateBuilderTemplateTypeEnumMemberType
        Standalone = 2  # MarkAsTemplateBuilderTemplateTypeEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class RelationTypeEnum():
        """
        the relation type enum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Master", " - "
           "Specification", " - "
           "Manifestation", " - "
        """
        Master = 0  # MarkAsTemplateBuilderRelationTypeEnumMemberType
        Specification = 1  # MarkAsTemplateBuilderRelationTypeEnumMemberType
        Manifestation = 2  # MarkAsTemplateBuilderRelationTypeEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ItemTypeEnum():
        """
        the item type enum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Any", " - "
           "NXPart", " - "
           "NXDrawing", " - "
        """
        Any = 0  # MarkAsTemplateBuilderItemTypeEnumMemberType
        NXPart = 1  # MarkAsTemplateBuilderItemTypeEnumMemberType
        NXDrawing = 2  # MarkAsTemplateBuilderItemTypeEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ActionTypeEnum():
        """
        the action type enum. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "TemplateOnly", " - "
           "TemplateAndPax", " - "
        """
        TemplateOnly = 0  # MarkAsTemplateBuilderActionTypeEnumMemberType
        TemplateAndPax = 1  # MarkAsTemplateBuilderActionTypeEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    ActionType: MarkAsTemplateBuilderActionTypeEnum = ...
    """
    Returns or sets  the action type of the part.  
    
    <hr>
    
    Getter Method
    
    Signature ``ActionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.MarkAsTemplateBuilderActionTypeEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ActionType`` 
    
    :param actionType: 
    :type actionType: :py:class:`NXOpen.Drawings.MarkAsTemplateBuilderActionTypeEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Description: str = ...
    """
    Returns or sets  the detailed description for each template.  
    
    <hr>
    
    Getter Method
    
    Signature ``Description`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Description`` 
    
    :param description: 
    :type description: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ItemType: MarkAsTemplateBuilderItemTypeEnum = ...
    """
    Returns or sets  the item type of the part.  
    
    <hr>
    
    Getter Method
    
    Signature ``ItemType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.MarkAsTemplateBuilderItemTypeEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ItemType`` 
    
    :param itemType: 
    :type itemType: :py:class:`NXOpen.Drawings.MarkAsTemplateBuilderItemTypeEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PaxFileName: str = ...
    """
    Returns or sets  the PAX file to be updated or created if it does not exist.  
    
    <hr>
    
    Getter Method
    
    Signature ``PaxFileName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PaxFileName`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PresentationName: str = ...
    """
    Returns or sets  the presentation name of the template that will be displayed in the File->New dialog.  
    
    <hr>
    
    Getter Method
    
    Signature ``PresentationName`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PresentationName`` 
    
    :param presentationName: 
    :type presentationName: str 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RelationType: MarkAsTemplateBuilderRelationTypeEnum = ...
    """
    Returns or sets  the relation type is required only for the managed mode.  
    
    The available options are
    Master
    Specification
    Manifestation
    
    <hr>
    
    Getter Method
    
    Signature ``RelationType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.MarkAsTemplateBuilderRelationTypeEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RelationType`` 
    
    :param relationType: 
    :type relationType: :py:class:`NXOpen.Drawings.MarkAsTemplateBuilderRelationTypeEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TemplateType: MarkAsTemplateBuilderTemplateTypeEnum = ...
    """
    Returns or sets  the template Type will be one of the following:
    Sheet
    To save it as Sheet template.  
    
    When using Sheet templates, NX adds drawing sheets based on the template to the current work part. 
    Master Model Drawing
    To save it as Master Model Drawing template. When using Master Model Drawing templates, NX create a new master model drawing from the current part. NX creates a new drawing part from the template and includes the current model as a component.
    2D-Drawing
    To save it as 2D Drawing template. These are the templates used for 2D-drawings. These templates do not require a master model
    
    <hr>
    
    Getter Method
    
    Signature ``TemplateType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.MarkAsTemplateBuilderTemplateTypeEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TemplateType`` 
    
    :param templateType: 
    :type templateType: :py:class:`NXOpen.Drawings.MarkAsTemplateBuilderTemplateTypeEnum` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: MarkAsTemplateBuilder = ...  # unknown typename


class SketchedHalfSectionLine(BaseHalfSectionLine):
    """
    Sketched Half Section Line is sketch based section line.  
    
    It is used to create a view with half of the part
    sectioned and the other half un-sectioned. Half sections are similar
    to simple and stepped sections in that the cut segment is parallel
    to the defined hinge line. Note that the Half Section Line contains
    only one arrow, one bend, and one cut segment. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SketchSectionLineBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: SketchedHalfSectionLine = ...  # unknown typename


class ViewStyleSectionConstraintsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the SECTION CONSTRAINTS tab on the View Style Dialog (Drawings.  
    
    ViewStyleSectionConstraintsBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Align: bool = ...
    """
    Returns or sets  the align toggle on the SECTION CONSTRAINTS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Align`` 
    
    :returns:  Returns the align toggle value that is on the section constraints sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Align`` 
    
    :param alignToggle:  Sets a new align toggle value on the section constraints sub-builder  
    :type alignToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Offset: bool = ...
    """
    Returns or sets  the offset toggle on the SECTION CONSTRAINTS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns:  Returns the offset toggle value that is on the section constraints sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param offsetToggle:  Sets a new offset toggle value on the section constraints sub-builder  
    :type offsetToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Orient: bool = ...
    """
    Returns or sets  the orient toggle on the SECTION CONSTRAINTS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Orient`` 
    
    :returns:  Returns the orient toggle value that is on the section constraints sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Orient`` 
    
    :param orientToggle:  Sets a new orient toggle value on the section constraints sub-builder  
    :type orientToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Scale: bool = ...
    """
    Returns or sets  the scale toggle on the SECTION CONSTRAINTS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns:  Returns the scale toggle value that is on the section constraints sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scaleToggle:  Sets a new scale toggle value on the section constraints sub-builder  
    :type scaleToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Sheet: bool = ...
    """
    Returns or sets  the sheet toggle on the SECTION CONSTRAINTS tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Sheet`` 
    
    :returns:  Returns the sheet toggle value that is on the section constraints sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Sheet`` 
    
    :param sheetToggle:  Sets a new sheet toggle value on the section constraints sub-builder  
    :type sheetToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleSectionConstraintsBuilder = ...  # unknown typename


class PointToPointSectionLine(BasePointToPointSectionLine):
    """
    Point to Point Section Line lets you create a view with multiple
    segment cuts with no bends.  
    
    The section line is defined by
    a set of rotation points. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SectionViewBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PointToPointSectionLine = ...  # unknown typename


class FlatPatternViewStyle():
    """
    Provides access to object and callout properties for sheet-metal data in
    flat pattern views on drawings.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Drawings.ViewStyle`
    
    .. versionadded:: NX5.0.0
    """
    
    def GetPropertiesObject(self) -> NXOpen.SheetMetal.FlatPatternSettings:
        """
        Returns the properties object for the view's flat pattern style settings.  
        
        Signature ``GetPropertiesObject()`` 
        
        :returns:  Reference to the object on which to get and set the
        style for flat pattern drawing member views.  
        :rtype: :py:class:`NXOpen.SheetMetal.FlatPatternSettings` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    
    
    def Commit(self) -> None:
        """
        Commits and applies all the settings done with set_callout_type_display
        and set_object_type_display.  
        
        It must be called after a sequence of calls
        to those methods to cause the view to update. 
        
        Signature ``Commit()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: nx_sheet_metal ("NX Sheet Metal")
        """
        ...
    


class GeneralViewStyle(NXOpen.Preferences.IGeneralViewPreferences):
    """
    Represents set of General View Styles Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.General`
    
    .. versionadded:: NX5.0.0
    """
    
    def SetCenterlines(self, centerlines: bool) -> None:
        """
        The status of center line, if true automatically creates 
        linear, cylindrical, and bolt circle centerlines (with a 
        circular instance set) for views where the hole or pin axis
        is perpendicular or parallel to the plane of the drawing view.  
        
        Signature ``SetCenterlines(centerlines)`` 
        
        :param centerlines: 
        :type centerlines: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetFramebarHorizontal(self, framebarHorizontal: bool) -> None:
        """
        The status of framebar horizontal, if true automatically creates 
        horizontal framebar for views where the view axis match with
        ship axis.  
        
        Signature ``SetFramebarHorizontal(framebarHorizontal)`` 
        
        :param framebarHorizontal: 
        :type framebarHorizontal: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetFramebarVertical(self, framebarVertical: bool) -> None:
        """
        The status of framebar vertical, if true automatically creates 
        vertical framebar for views where the view axis match with
        ship axis.  
        
        Signature ``SetFramebarVertical(framebarVertical)`` 
        
        :param framebarVertical: 
        :type framebarVertical: bool 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Angle: float = ...
    """
    Returns or sets  the value of angle of a member view.  
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Angle`` 
    
    :param angle: 
    :type angle: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AngleDecimalPointFormat: NXOpen.Preferences.DecimalPointCharacter = ...
    """
    Returns or sets  the decimal point character to use for view angle display.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleDecimalPointFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.DecimalPointCharacter` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleDecimalPointFormat`` 
    
    :param format: 
    :type format: :py:class:`NXOpen.Preferences.DecimalPointCharacter` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AngleFormat: NXOpen.Preferences.AngleFormat = ...
    """
    Returns or sets  the format to use for view angle display.  
    
    <hr>
    
    Getter Method
    
    Signature ``AngleFormat`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.AngleFormat` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleFormat`` 
    
    :param angleFormat: 
    :type angleFormat: :py:class:`NXOpen.Preferences.AngleFormat` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AnglePrecision: int = ...
    """
    Returns or sets  the precision to use for view angle display.  
    
    <hr>
    
    Getter Method
    
    Signature ``AnglePrecision`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AnglePrecision`` 
    
    :param anglePrecision: 
    :type anglePrecision: int 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    AssociativeAngle: NXOpen.Scalar = ...
    """
    Returns or sets  the value of angle of a member view.  
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativeAngle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Scalar` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AssociativeAngle`` 
    
    :param angle: 
    :type angle: :py:class:`NXOpen.Scalar` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AutomaticAnchorPoint: bool = ...
    """
    Returns or sets  the status of Automatic Anchor Point.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticAnchorPoint`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticAnchorPoint`` 
    
    :param automaticAnchorPoint: 
    :type automaticAnchorPoint: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AutomaticUpdate: bool = ...
    """
    Returns or sets  the status of Automatic update, if true then position, 
    hidden lines, silhouettes, view bounds, section views, and 
    section view details updated after a model change else 
    the above items are not updated after a model change.  
    
    <hr>
    
    Getter Method
    
    Signature ``AutomaticUpdate`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AutomaticUpdate`` 
    
    :param automaticUpdate: 
    :type automaticUpdate: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BoundaryStatus: bool = ...
    """
    Returns or sets  the boundary status.  
    
    <hr>
    
    Getter Method
    
    Signature ``BoundaryStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BoundaryStatus`` 
    
    :param boundaryStatus: 
    :type boundaryStatus: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayId: NXOpen.Preferences.GeneralDisplayIdOption = ...
    """
    Returns or sets  the display identifier option for a member view.  
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayId`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralDisplayIdOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayId`` 
    
    :param option: 
    :type option: :py:class:`NXOpen.Preferences.GeneralDisplayIdOption` 
    
    .. versionadded:: NX7.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ExpressionForScale: NXOpen.Expression = ...
    """
    Returns or sets  the expression for scale 
    
    <hr>
    
    Getter Method
    
    Signature ``ExpressionForScale`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``ExpressionForScale`` 
    
    :param expressionForScale: 
    :type expressionForScale: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ExtractedEdges: NXOpen.Preferences.GeneralExtractedEdgesOption = ...
    """
    Returns or sets  the extracted edge, that provides an alternative way to display
    model geometry in a drawing view.  
    
    <hr>
    
    Getter Method
    
    Signature ``ExtractedEdges`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralExtractedEdgesOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ExtractedEdges`` 
    
    :param edgesOption: 
    :type edgesOption: :py:class:`NXOpen.Preferences.GeneralExtractedEdgesOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LegacyView: bool = ...
    """
    Returns or sets  the leagcy view toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``LegacyView`` 
    
    :returns:  Returns the legacy view toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LegacyView`` 
    
    :param legacyView:  Sets a legacy view toggle value on the general sub-builder  
    :type legacyView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LightweightView: bool = ...
    """
    Returns or sets  the view representation enum on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``LightweightView`` 
    
    :returns:  Returns the view representation option that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LightweightView`` 
    
    :param lightweightView:  Sets a view representation option on the general sub-builder  
    :type lightweightView: bool 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LockmethodView: NXOpen.Preferences.GeneralViewLockmethodOption = ...
    """
    Returns or sets  the lock method setting on the Configuration tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``LockmethodView`` 
    
    :returns:  Returns the lock method option on the general sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewLockmethodOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockmethodView`` 
    
    :param lockmethodView:  Sets a lock method option on the general sub-builder  
    :type lockmethodView: :py:class:`NXOpen.Preferences.GeneralViewLockmethodOption` 
    
    .. versionadded:: NX11.0.1
    
    License requirements: drafting ("DRAFTING")
    """
    Reference: bool = ...
    """
    Returns or sets  the status of reference, that toggles a view from active to reference.  
    
    If true, the view is considered a reference view.
    
    <hr>
    
    Getter Method
    
    Signature ``Reference`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Reference`` 
    
    :param reference: 
    :type reference: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RenderCount: int = ...
    """
    Returns or sets  the render count.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenderCount`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenderCount`` 
    
    :param renderCount: 
    :type renderCount: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Scale: float = ...
    """
    Returns or sets  the scale of a member view.  
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scale: 
    :type scale: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScaleLabel: bool = ...
    """
    Returns or sets  the display of scale label.  
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleLabel`` 
    
    :param scaleLabel: 
    :type scaleLabel: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowAngleLeadingZeros: bool = ...
    """
    Returns or sets  the status of leading zeros display in view angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowAngleLeadingZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowAngleLeadingZeros`` 
    
    :param show: 
    :type show: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShowAngleTrailingZeros: bool = ...
    """
    Returns or sets  the status of trailing zeros display in view angle.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShowAngleTrailingZeros`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShowAngleTrailingZeros`` 
    
    :param show: 
    :type show: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    Silhouettes: bool = ...
    """
    Returns or sets  the status of silhouettes curves, if true silhouettes for 
    selected drawing member views added else silhouettes removed 
    from the selected member views.  
    
    <hr>
    
    Getter Method
    
    Signature ``Silhouettes`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Silhouettes`` 
    
    :param silhouettes: 
    :type silhouettes: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SnapshotView: bool = ...
    """
    Returns or sets  the snapshot toggle on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SnapshotView`` 
    
    :returns:  Returns the snapshot view toggle value that is on the general sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.GeneralViewStyle.LockmethodView` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SnapshotView`` 
    
    :param snapshotView:  Sets a snapshot view toggle value on the general sub-builder  
    :type snapshotView: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX11.0.1
       Use :py:meth:`NXOpen.Drawings.GeneralViewStyle.LockmethodView` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Tolerance: float = ...
    """
    Returns or sets  the value of tolerance, that specifies a chord height tolerance
    value for silhouette and hidden line generation in a given 
    drawing view.  
    
    <hr>
    
    Getter Method
    
    Signature ``Tolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Tolerance`` 
    
    :param tolerance: 
    :type tolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    UvGrid: bool = ...
    """
    Returns or sets  the status of UV grid, if true, grid curves for selected drawing
    member views are added else the grid curves are removed from 
    the selected member views.  
    
    <hr>
    
    Getter Method
    
    Signature ``UvGrid`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UvGrid`` 
    
    :param uvGrid: 
    :type uvGrid: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewLabel: bool = ...
    """
    Returns or sets  the display of view label.  
    
    <hr>
    
    Getter Method
    
    Signature ``ViewLabel`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewLabel`` 
    
    :param viewLabel: 
    :type viewLabel: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewQuality: NXOpen.Preferences.GeneralViewQualityOption = ...
    """
    Returns or sets  the view quality, that provides an alternative way to display
    model geometry in a drawing view.  
    
    <hr>
    
    Getter Method
    
    Signature ``ViewQuality`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewQualityOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewQuality`` 
    
    :param qualityOption: 
    :type qualityOption: :py:class:`NXOpen.Preferences.GeneralViewQualityOption` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewRepresentation: NXOpen.Preferences.GeneralViewRepresentationOption = ...
    """
    Returns or sets  the view representation enum on the GENERAL tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewRepresentation`` 
    
    :returns:  Returns the view representation of the view  
    :rtype: :py:class:`NXOpen.Preferences.GeneralViewRepresentationOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewRepresentation`` 
    
    :param viewRepresentation:  Sets a view representation option on the view  
    :type viewRepresentation: :py:class:`NXOpen.Preferences.GeneralViewRepresentationOption` 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    WireframeColorSource: NXOpen.Preferences.GeneralWireframeColorSourceOption = ...
    """
    Returns or sets  the source of the wireframe color for a member view.  
    
    <hr>
    
    Getter Method
    
    Signature ``WireframeColorSource`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.GeneralWireframeColorSourceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``WireframeColorSource`` 
    
    :param colorOption: 
    :type colorOption: :py:class:`NXOpen.Preferences.GeneralWireframeColorSourceOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class FlatPatternObject(NXOpen.TransientObject):
    """
    Provides an interface to the data available for flat pattern objects on drawing
    views.  
    
    .. versionadded:: NX6.0.3
    """
    
    def GetFlatSolidObject(self) -> NXOpen.CartesianCoordinateSystem:
        """
        Returns the point object containing the attributes the user put on the
        original datum CSYS feature.  
        
        This is the prototype object. The 
        recommended procedure is to use the point to obtain attribute values 
        and to use GetOrigin and GetDirections to obtain the geometrical data 
        because of mappings to occurrences and to the drawing sheet.  
        
        Signature ``GetFlatSolidObject()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.CartesianCoordinateSystem` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def GetOrigin(self) -> NXOpen.Point3d:
        """
        Returns the origin of the marker object (the point on the drawing).  
        
        The point has been transformed to drawing sheet coordinates.  
        
        Signature ``GetOrigin()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Point3d` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def GetDirections(self) -> tuple:
        """
        Returns the X and Y direction vectors that correspond to the flattened
        datum csys feature object.  
        
        The vectors have been transformed to
        drawing sheet coordinates. 
        
        Signature ``GetDirections()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (xDirection, yDirection). xDirection is a :py:class:`NXOpen.Vector3d`.   X direction of simulated CSYS yDirection is a :py:class:`NXOpen.Vector3d`.   Y direction of simulated CSYS 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    
    
    def Dispose(self) -> None:
        """
        Frees the memory of the underlying class 
        
        Signature ``Dispose()`` 
        
        .. versionadded:: NX6.0.3
        
        License requirements: None.
        """
        ...
    


class AutomationBookletBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.AutomationBookletBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    HiddenLineColorFontWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the hidden line color font width 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLineColorFontWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    VisibleLineColorFontWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the visible line color font width 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleLineColorFontWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: AutomationBookletBuilder = ...  # unknown typename


class View2dOrientBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class View2dOrientBuilderType():
    """
    The view orientation type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "not oriented"
       "Top", "top view"
       "Front", "front view"
       "Right", "right view"
       "Back", "back view"
       "Bottom", "bottom view"
       "Left", "left view"
       "Iso", "isometric view"
       "Tri", "trimetric view"
       "Custom", "custom method used"
    """
    NotSet = 0  # View2dOrientBuilderTypeMemberType
    Top = 1  # View2dOrientBuilderTypeMemberType
    Front = 2  # View2dOrientBuilderTypeMemberType
    Right = 3  # View2dOrientBuilderTypeMemberType
    Back = 4  # View2dOrientBuilderTypeMemberType
    Bottom = 5  # View2dOrientBuilderTypeMemberType
    Left = 6  # View2dOrientBuilderTypeMemberType
    Iso = 7  # View2dOrientBuilderTypeMemberType
    Tri = 8  # View2dOrientBuilderTypeMemberType
    Custom = 9  # View2dOrientBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class View2dOrientBuilderCustomMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class View2dOrientBuilderCustomMethod():
    """
    The custom orientation method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Angles", "axis rotations"
       "Vector", "cartesian vector"
    """
    Angles = 0  # View2dOrientBuilderCustomMethodMemberType
    Vector = 1  # View2dOrientBuilderCustomMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class View2dOrientBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the View 2D Orientation (Drawings.  
    
    View2dOrientBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    class Type():
        """
        The view orientation type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "not oriented"
           "Top", "top view"
           "Front", "front view"
           "Right", "right view"
           "Back", "back view"
           "Bottom", "bottom view"
           "Left", "left view"
           "Iso", "isometric view"
           "Tri", "trimetric view"
           "Custom", "custom method used"
        """
        NotSet = 0  # View2dOrientBuilderTypeMemberType
        Top = 1  # View2dOrientBuilderTypeMemberType
        Front = 2  # View2dOrientBuilderTypeMemberType
        Right = 3  # View2dOrientBuilderTypeMemberType
        Back = 4  # View2dOrientBuilderTypeMemberType
        Bottom = 5  # View2dOrientBuilderTypeMemberType
        Left = 6  # View2dOrientBuilderTypeMemberType
        Iso = 7  # View2dOrientBuilderTypeMemberType
        Tri = 8  # View2dOrientBuilderTypeMemberType
        Custom = 9  # View2dOrientBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class CustomMethod():
        """
        The custom orientation method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Angles", "axis rotations"
           "Vector", "cartesian vector"
        """
        Angles = 0  # View2dOrientBuilderCustomMethodMemberType
        Vector = 1  # View2dOrientBuilderCustomMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetCustomNormalX(self) -> float:
        """
        Returns the X component of the custom view-normal vector  
        
        Signature ``GetCustomNormalX()`` 
        
        :returns:  returns the X component of view normal in global CS  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCustomNormalX(self, component: float) -> None:
        """
        Sets the X component of the custom view-normal vector  
        
        Signature ``SetCustomNormalX(component)`` 
        
        :param component:  sets the the X component of view normal in global CS  
        :type component: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetCustomNormalY(self) -> float:
        """
        Returns the Y component of the custom view-normal vector  
        
        Signature ``GetCustomNormalY()`` 
        
        :returns:  returns the Y component of view normal in global CS  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCustomNormalY(self, component: float) -> None:
        """
        Sets the Y component of the custom view-normal vector 
        
        Signature ``SetCustomNormalY(component)`` 
        
        :param component:  sets the the Y component of view normal in global CS  
        :type component: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetCustomNormalZ(self) -> float:
        """
        Returns the Z component of the custom view-normal vector  
        
        Signature ``GetCustomNormalZ()`` 
        
        :returns:  returns the Z component of view normal in global CS  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCustomNormalZ(self, component: float) -> None:
        """
        Sets the Z component of the custom view-normal vector 
        
        Signature ``SetCustomNormalZ(component)`` 
        
        :param component:  sets the the Z component of view normal in global CS  
        :type component: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetInferredPrimary(self) -> bool:
        """
        Returns the option to infer the direction view X vector in 3D space  
        
        Signature ``GetInferredPrimary()`` 
        
        :returns:  returns the inferred option  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetInferredPrimary(self, inferred: bool) -> None:
        """
        Sets the option to infer the direction view X vector in 3D space 
        
        Signature ``SetInferredPrimary(inferred)`` 
        
        :param inferred:  sets the inferred option  
        :type inferred: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetCustomPrimaryX(self) -> float:
        """
        Returns the X component of the custom view-primary vector  
        
        Signature ``GetCustomPrimaryX()`` 
        
        :returns:  returns the X component of view primary vector in global CS  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCustomPrimaryX(self, component: float) -> None:
        """
        Sets the X component of the custom view-primary vector 
        
        Signature ``SetCustomPrimaryX(component)`` 
        
        :param component:  sets the the X component of view primary vector in global CS  
        :type component: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetCustomPrimaryY(self) -> float:
        """
        Returns the Y component of the custom view-primary vector  
        
        Signature ``GetCustomPrimaryY()`` 
        
        :returns:  returns the Y component of view primary vector in global CS  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCustomPrimaryY(self, component: float) -> None:
        """
        Sets the Y component of the custom view-primary vector 
        
        Signature ``SetCustomPrimaryY(component)`` 
        
        :param component:  sets the the Y component of view primary vector in global CS  
        :type component: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetCustomPrimaryZ(self) -> float:
        """
        Returns the Z component of the custom view-primary vector  
        
        Signature ``GetCustomPrimaryZ()`` 
        
        :returns:  returns the Z component of view primary vector in global CS  
        :rtype: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetCustomPrimaryZ(self, component: float) -> None:
        """
        Sets the Z component of the custom view-primary vector 
        
        Signature ``SetCustomPrimaryZ(component)`` 
        
        :param component:  sets the the Z component of view primary vector in global CS  
        :type component: float 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CustomOrientationMethod: View2dOrientBuilderCustomMethod = ...
    """
    Returns or sets  the custom orientation method 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomOrientationMethod`` 
    
    :returns:  returns the custom orientation method.  
    :rtype: :py:class:`NXOpen.Drawings.View2dOrientBuilderCustomMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomOrientationMethod`` 
    
    :param methd:  sets the custom orientation method.  
    :type methd: :py:class:`NXOpen.Drawings.View2dOrientBuilderCustomMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CustomXAngle: float = ...
    """
    Returns or sets  the orientation angle around the X axis 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomXAngle`` 
    
    :returns:  returns angle around X axis  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomXAngle`` 
    
    :param angle:  sets the angle around X axis  
    :type angle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CustomYAngle: float = ...
    """
    Returns or sets  the orientation angle around the Y axis 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomYAngle`` 
    
    :returns:  returns angle around Y axis  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomYAngle`` 
    
    :param angle:  sets the angle around Y axis  
    :type angle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CustomZAngle: float = ...
    """
    Returns or sets  the orientation angle around the Z axis 
    
    <hr>
    
    Getter Method
    
    Signature ``CustomZAngle`` 
    
    :returns:  returns angle around Z axis  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomZAngle`` 
    
    :param angle:  sets the angle around Z axis  
    :type angle: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OrientationType: View2dOrientBuilderType = ...
    """
    Returns or sets  the orientation type 
    
    <hr>
    
    Getter Method
    
    Signature ``OrientationType`` 
    
    :returns:  returns the orientation type.  
    :rtype: :py:class:`NXOpen.Drawings.View2dOrientBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OrientationType`` 
    
    :param type:  sets the orientation type.  
    :type type: :py:class:`NXOpen.Drawings.View2dOrientBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: View2dOrientBuilder = ...  # unknown typename


class SketchedPointToPointSectionLine(BasePointToPointSectionLine):
    """
    Sketched Point to Point Section Line is sketch based section line.  
    
    It lets you create a view with multiple segment cuts with no bends.
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SketchSectionLineBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: SketchedPointToPointSectionLine = ...  # unknown typename


class ReportBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Drawings.ReportBuilder`.  
    
    This class queries and sets settings specific to drafting data which will get converted to PMI.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.ConvertToPMIBuilderManager.CreateReportBuilder`
    
    .. versionadded:: NX11.0.0
    """
    Null: ReportBuilder = ...  # unknown typename


class ViewStyleFPCalloutsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the Callout section of the Flat Pattern tab on the View Style Dialog (Drawings.  
    
    ViewStyleFPCalloutsBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    State: bool = ...
    """
    Returns or sets  the state toggle on the Callout section of the Flat Pattern tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``State`` 
    
    :returns:  Returns the state toggle value that is on the callout section of the flat pattern sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``State`` 
    
    :param stateToggle:  Sets a new state toggle value on the callout section of the flat pattern sub-builder  
    :type stateToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Type: str = ...
    """
    Returns  the type of Flat Pattern Callout 
    
    <hr>
    
    Getter Method
    
    Signature ``Type`` 
    
    :returns:  Returns the type of flat pattern curve 
    :rtype: str 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ViewStyleFPCalloutsBuilder = ...  # unknown typename


class ViewStyleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the View Style Builder (Drawings.  
    
    ViewStyleBuilder) which manages all the style attributes related
    *  to the view including base view, projected view, drawing view, detail view, broken view, section view etc.
    *  To obtain an instance of this class, we need to follow the steps: create a new view, click the view style 
    *  button, edit the view style attributes.
    
    .. versionadded:: NX6.0.0
    """
    
    def GetViewStyleFPCallout(self, type: str) -> ViewStyleFPCalloutsBuilder:
        """
        Retrieves a specified Callout on the Flat Pattern Tab on the View Style Dialog  
        
        Signature ``GetViewStyleFPCallout(type)`` 
        
        :param type:  Indicates which flat pattern callout  
        :type type: str 
        :returns:  Returns the particular Flat Pattern Callout sub-builder on View Style  
        :rtype: :py:class:`NXOpen.Drawings.ViewStyleFPCalloutsBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetAllViewStyleFPCallouts(self) -> 'list[ViewStyleFPCalloutsBuilder]':
        """
        Retrieves all the Callouts on the Flat Pattern Tab on the View Style Dialog  
        
        Signature ``GetAllViewStyleFPCallouts()`` 
        
        :returns:  Returns all the Flat Pattern Callout sub-builders on View Style  
        :rtype: list of :py:class:`NXOpen.Drawings.ViewStyleFPCalloutsBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetViewStyleFPCurve(self, type: NXOpen.SheetMetal.FlatPatternSettingsFlatPatternObjectType) -> ViewStyleFPCurvesBuilder:
        """
        Retrieves a specified Curve on the Flat Pattern Tab on the View Style Dialog  
        
        Signature ``GetViewStyleFPCurve(type)`` 
        
        :param type:  Indicates which flat pattern curve  
        :type type: :py:class:`NXOpen.SheetMetal.FlatPatternSettingsFlatPatternObjectType` 
        :returns:  Returns the particular Flat Pattern Curve sub-builder on View Style  
        :rtype: :py:class:`NXOpen.Drawings.ViewStyleFPCurvesBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetAllViewStyleFPCurves(self) -> 'list[ViewStyleFPCurvesBuilder]':
        """
        Retrieves all the Curves on the Flat Pattern Tab on the View Style Dialog  
        
        Signature ``GetAllViewStyleFPCurves()`` 
        
        :returns:  Returns all the Flat Pattern Curve sub-builders on View Style  
        :rtype: list of :py:class:`NXOpen.Drawings.ViewStyleFPCurvesBuilder` 
        
        .. versionadded:: NX6.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromSelectedObjects(self, selectedObject: NXOpen.NXObject) -> None:
        """
        Inherit Settings From Selected Objects 
        
        Signature ``InheritSettingsFromSelectedObjects(selectedObject)`` 
        
        :param selectedObject:  The selected annotation or table or view instance object.                                                                None is not allowed.  
        :type selectedObject: :py:class:`NXOpen.NXObject` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit Settings From Customer Default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit Settings From Preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetViewStyleFPCalloutConfig(self) -> ViewStyleFPCalloutConfigBuilder:
        """
        Retrieves the callout configuration on the Flat Pattern Tab on the View Style Dialog  
        
        Signature ``GetViewStyleFPCalloutConfig()`` 
        
        :returns:  Returns the Flat Pattern Callout Config sub-builder on View Style  
        :rtype: :py:class:`NXOpen.Drawings.ViewStyleFPCalloutConfigBuilder` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindShipDraftingViewLinesBuilderByName(self, featureName: str, featureSubName: str) -> ShipDraftingViewLinesBuilder:
        """
        Gets the :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` with the given FeatureName and FeatureSubName  
        
        Signature ``FindShipDraftingViewLinesBuilderByName(featureName, featureSubName)`` 
        
        :param featureName: 
        :type featureName: str 
        :param featureSubName: 
        :type featureSubName: str 
        :returns:  Returns the Ship Drafting View Lines sub-builders with the given FeatureName and FeatureSubName  
        :rtype: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_ship_drafting ("Ship Drafting")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ProjectedViewOrientation: ProjectedViewOrientationBuilder = ...
    """
    Returns  the projected view orientation builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ProjectedViewOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ProjectedViewOrientationBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    SecondaryComponents: ViewStyleSecondaryComponentsBuilder = ...
    """
    Returns  the secondary components style builder of the view style builder which represents the secondary geometry tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryComponents`` 
    
    :returns:   Returns the Secondary Components sub-builder on View Style 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleSecondaryComponentsBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewCommonViewLabel: ViewCommonViewLabelBuilder = ...
    """
    Returns  the view common label builder
    
    <hr>
    
    Getter Method
    
    Signature ``ViewCommonViewLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewProjectedArrowSettings: ViewProjectedArrowSettingsBuilder = ...
    """
    Returns  the projected Arrow Settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewProjectedArrowSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectedArrowSettingsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewProjectedViewSettings: ViewProjectedViewSettingsBuilder = ...
    """
    Returns  the projected View Settings builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewProjectedViewSettings`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectedViewSettingsBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewSectionLineStyleBuilder: ViewSectionLineBuilder = ...
    """
    Returns  the view section line builder
    
    <hr>
    
    Getter Method
    
    Signature ``ViewSectionLineStyleBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSectionLineBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleBase: ViewStyleBaseBuilder = ...
    """
    Returns  the Base style builder of the view style builder which represents the base tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleBase`` 
    
    :returns:  Returns the Base sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleBaseBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleDetail: ViewStyleDetailBuilder = ...
    """
    Returns  the Detail style builder of the view style builder which represents the detail tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleDetail`` 
    
    :returns:  Returns the Detail sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleDetailBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleGeneral: ViewStyleGeneralBuilder = ...
    """
    Returns  the General style builder of the view style builder which represents the general tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleGeneral`` 
    
    :returns:  Returns the General sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleGeneralBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleHiddenLines: ViewStyleHiddenLinesBuilder = ...
    """
    Returns  the Hidden Lines style builder of the view style builder which represents the hidden lines tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleHiddenLines`` 
    
    :returns:  Returns the Hidden Lines sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleHiddenLinesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleInheritPmi: ViewStyleInheritPmiBuilder = ...
    """
    Returns  the Inherit PMI style builder of the view style builder which represents the inherit PMI tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleInheritPmi`` 
    
    :returns:  Returns the Inherit Pmi sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleInheritPmiBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleOrientation: ViewStyleOrientationBuilder = ...
    """
    Returns  the Orientation style builder of the view style builder which represents the orientation tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleOrientation`` 
    
    :returns:  Returns the Orientation sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleOrientationBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStylePerspective: ViewStylePerspectiveBuilder = ...
    """
    Returns  the Perspective style builder of the view style builder which represents the perspective tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStylePerspective`` 
    
    :returns:  Returns the Perspective sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStylePerspectiveBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleProjected: ViewStyleProjectedBuilder = ...
    """
    Returns  the projected style builder of the view style builder which represents the projected tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleProjected`` 
    
    :returns:  Returns the Projected sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleProjectedBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleSection: ViewStyleSectionBuilder = ...
    """
    Returns  the Section style builder of the view style builder which represents the section tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleSection`` 
    
    :returns:  Returns the Section sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleSectionBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleSectionConstraints: ViewStyleSectionConstraintsBuilder = ...
    """
    Returns  the Section Constraints style builder of the view style builder which represents the section constraints tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleSectionConstraints`` 
    
    :returns:  Returns the Section Constraints sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleSectionConstraintsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleShading: ViewStyleShadingBuilder = ...
    """
    Returns  the Shading style builder of the view style builder which represents the shading tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleShading`` 
    
    :returns:  Returns the Shading sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleShadingBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleShipDraftingViewLinesList: ShipDraftingViewLinesBuilderList = ...
    """
    Returns  the Ship Drafting View lines builder of the view style builder which represents the ship drafting view lines on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleShipDraftingViewLinesList`` 
    
    :returns:  Returns the Ship Drafting View Lines sub-builders on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilderList` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: nx_ship_drafting ("Ship Drafting")
    """
    ViewStyleSingleLineList: ViewStyleShipbuildingLinesBuilderList = ...
    """
    Returns  the Ship building lines style builder of the view style builder which represents the ship building lines tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleSingleLineList`` 
    
    :returns:  Returns the Shipbuilding Lines sub-builders on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleShipbuildingLinesBuilderList` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleSmoothEdges: ViewStyleSmoothEdgesBuilder = ...
    """
    Returns  the Smooth Edges style builder of the view style builder which represents the smooth edges tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleSmoothEdges`` 
    
    :returns:  Returns the Smooth Edges sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleSmoothEdgesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleThreads: ViewStyleThreadsBuilder = ...
    """
    Returns  the Threads style builder of the view style builder which represents the threads tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleThreads`` 
    
    :returns:  Returns the Threads sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleThreadsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleTraceLines: ViewStyleTraceLinesBuilder = ...
    """
    Returns  the Trace lines style builder of the view style builder which represents the trace lines tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleTraceLines`` 
    
    :returns:  Returns the Trace Lines sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleTraceLinesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleVirtualIntersections: ViewStyleVirtualIntersectionsBuilder = ...
    """
    Returns  the Virtual intersections style builder of the view style builder which represents the virtual intersections tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleVirtualIntersections`` 
    
    :returns:  Returns the Intersections sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleVirtualIntersectionsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ViewStyleVisibleLines: ViewStyleVisibleLinesBuilder = ...
    """
    Returns  the Visible lines style builder of the view style builder which represents the visible lines tab on the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyleVisibleLines`` 
    
    :returns:  Returns the Visible Lines sub-builder on View Style  
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleVisibleLinesBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleBuilder = ...  # unknown typename


class RotationSymbolTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class RotationSymbolTypes():
    """
    Rotation symbol types
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", " - "
       "Full", " - "
       "Right", " - "
       "Left", " - "
    """
    NotSet = 0  # RotationSymbolTypesMemberType
    Full = 1  # RotationSymbolTypesMemberType
    Right = 2  # RotationSymbolTypesMemberType
    Left = 3  # RotationSymbolTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SheetBorderSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.SheetBorderSettingsBuilder`.  
    
    This class queries and sets sheet border settings preferences when creating a sheet border.
    
    .. versionadded:: NX10.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ArrowAngle: float = ...
    """
    Returns or sets  the arrow angle 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowAngle`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowAngle`` 
    
    :param arrowAngle: 
    :type arrowAngle: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowDirection: ArrowDirectionType = ...
    """
    Returns or sets  the arrow direction 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ArrowDirectionType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowDirection`` 
    
    :param arrowDirection: 
    :type arrowDirection: :py:class:`NXOpen.Drawings.ArrowDirectionType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowHeadTail: float = ...
    """
    Returns or sets  the arrowhead tail 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowHeadTail`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowHeadTail`` 
    
    :param arrowHeadTail: 
    :type arrowHeadTail: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowLength: float = ...
    """
    Returns or sets  the arrow length 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowLength`` 
    
    :param arrowLength: 
    :type arrowLength: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ArrowStyle: ArrowStyleType = ...
    """
    Returns or sets  the arrow style 
    
    <hr>
    
    Getter Method
    
    Signature ``ArrowStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ArrowStyleType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ArrowStyle`` 
    
    :param arrowStyle: 
    :type arrowStyle: :py:class:`NXOpen.Drawings.ArrowStyleType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BorderLineWidth: float = ...
    """
    Returns or sets  the border line width 
    
    <hr>
    
    Getter Method
    
    Signature ``BorderLineWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BorderLineWidth`` 
    
    :param borderLineWidth: 
    :type borderLineWidth: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CenteringMarkLength: float = ...
    """
    Returns or sets  the centering mark length 
    
    <hr>
    
    Getter Method
    
    Signature ``CenteringMarkLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenteringMarkLength`` 
    
    :param centeringMarkLength: 
    :type centeringMarkLength: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CenteringMarksColorWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the centering marks color width 
    
    <hr>
    
    Getter Method
    
    Signature ``CenteringMarksColorWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    CenteringMarksExtension: float = ...
    """
    Returns or sets  the centering marks extension 
    
    <hr>
    
    Getter Method
    
    Signature ``CenteringMarksExtension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenteringMarksExtension`` 
    
    :param centeringMarksExtension: 
    :type centeringMarksExtension: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CenteringMarksHorizontal: HorizontalCenteringMarkType = ...
    """
    Returns or sets  the centering marks horizontal 
    
    <hr>
    
    Getter Method
    
    Signature ``CenteringMarksHorizontal`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HorizontalCenteringMarkType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenteringMarksHorizontal`` 
    
    :param centeringMarksHorizontal: 
    :type centeringMarksHorizontal: :py:class:`NXOpen.Drawings.HorizontalCenteringMarkType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CenteringMarksVertical: VerticalCenteringMarkType = ...
    """
    Returns or sets  the centering marks vertical 
    
    <hr>
    
    Getter Method
    
    Signature ``CenteringMarksVertical`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.VerticalCenteringMarkType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenteringMarksVertical`` 
    
    :param centeringMarksVertical: 
    :type centeringMarksVertical: :py:class:`NXOpen.Drawings.VerticalCenteringMarkType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CreateBorders: bool = ...
    """
    Returns or sets  the create borders 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateBorders`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateBorders`` 
    
    :param createBorders: 
    :type createBorders: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CreateTrimmingMarks: bool = ...
    """
    Returns or sets  the create trimming marks 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateTrimmingMarks`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateTrimmingMarks`` 
    
    :param createTrimmingMarks: 
    :type createTrimmingMarks: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DisplaySheetSizeInBorder: bool = ...
    """
    Returns or sets  the display sheet size in border 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplaySheetSizeInBorder`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplaySheetSizeInBorder`` 
    
    :param displaySheetSizeInBorder: 
    :type displaySheetSizeInBorder: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    DistanceFromInnerBorder: float = ...
    """
    Returns or sets  the distance from inner border 
    
    <hr>
    
    Getter Method
    
    Signature ``DistanceFromInnerBorder`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DistanceFromInnerBorder`` 
    
    :param distanceInFromInnerBorder: 
    :type distanceInFromInnerBorder: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InnerLineCFW: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the inner border line's color, font and width 
    
    <hr>
    
    Getter Method
    
    Signature ``InnerLineCFW`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Method: Method = ...
    """
    Returns or sets  the method 
    
    <hr>
    
    Getter Method
    
    Signature ``Method`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.Method` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Method`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Drawings.Method` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OuterLineCFW: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the outer border line's color, font and width 
    
    <hr>
    
    Getter Method
    
    Signature ``OuterLineCFW`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    TrimmingMarkColor: NXOpen.NXColor = ...
    """
    Returns or sets  the trimming mark color 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingMarkColor`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimmingMarkColor`` 
    
    :param trimmingMarkColor: 
    :type trimmingMarkColor: Id 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TrimmingMarkLength: float = ...
    """
    Returns or sets  the trimming mark length 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingMarkLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimmingMarkLength`` 
    
    :param trimmingMarkLength: 
    :type trimmingMarkLength: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TrimmingMarkStyle: TrimmingMarkStyleType = ...
    """
    Returns or sets  the trimming mark style 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingMarkStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.TrimmingMarkStyleType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimmingMarkStyle`` 
    
    :param trimmingMarkStyle: 
    :type trimmingMarkStyle: :py:class:`NXOpen.Drawings.TrimmingMarkStyleType` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TrimmingMarkWidth: float = ...
    """
    Returns or sets  the trimming mark width 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingMarkWidth`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimmingMarkWidth`` 
    
    :param trimmingMarkWidth: 
    :type trimmingMarkWidth: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SheetBorderSettingsBuilder = ...  # unknown typename


class ViewPlacementBuilderMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewPlacementBuilderMethod():
    """
    view method 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Infer", "Infer the view position"
       "Horizontal", "Align the view horizontally to another view"
       "Vertical", "Align the view vertically to another view"
       "PerpendicularToLine", "Align the view along some line to another view"
       "Overlay", "Align the view on top of another view"
       "PerpendicularToHingeLine", "Align the view along the hinge line"
       "Max", "Should be the last enum in the list"
    """
    Infer = 0  # ViewPlacementBuilderMethodMemberType
    Horizontal = 1  # ViewPlacementBuilderMethodMemberType
    Vertical = 2  # ViewPlacementBuilderMethodMemberType
    PerpendicularToLine = 3  # ViewPlacementBuilderMethodMemberType
    Overlay = 4  # ViewPlacementBuilderMethodMemberType
    PerpendicularToHingeLine = 5  # ViewPlacementBuilderMethodMemberType
    Max = 6  # ViewPlacementBuilderMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewPlacementBuilderOptionMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewPlacementBuilderOption():
    """
    view option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "ToView", "Align to the view centers"
       "ModelPoint", "Align to the same point in the alignment view and the view being edited"
       "PointToPoint", "Align a point in the alignment view to another point in the view being edited"
    """
    ToView = 0  # ViewPlacementBuilderOptionMemberType
    ModelPoint = 1  # ViewPlacementBuilderOptionMemberType
    PointToPoint = 2  # ViewPlacementBuilderOptionMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewPlacementBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewPlacementBuilder`.  
    
    This class
    is used to define the origin of a view.
    
    .. versionadded:: NX6.0.0
    """
    
    class Method():
        """
        view method 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Infer", "Infer the view position"
           "Horizontal", "Align the view horizontally to another view"
           "Vertical", "Align the view vertically to another view"
           "PerpendicularToLine", "Align the view along some line to another view"
           "Overlay", "Align the view on top of another view"
           "PerpendicularToHingeLine", "Align the view along the hinge line"
           "Max", "Should be the last enum in the list"
        """
        Infer = 0  # ViewPlacementBuilderMethodMemberType
        Horizontal = 1  # ViewPlacementBuilderMethodMemberType
        Vertical = 2  # ViewPlacementBuilderMethodMemberType
        PerpendicularToLine = 3  # ViewPlacementBuilderMethodMemberType
        Overlay = 4  # ViewPlacementBuilderMethodMemberType
        PerpendicularToHingeLine = 5  # ViewPlacementBuilderMethodMemberType
        Max = 6  # ViewPlacementBuilderMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class Option():
        """
        view option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "ToView", "Align to the view centers"
           "ModelPoint", "Align to the same point in the alignment view and the view being edited"
           "PointToPoint", "Align a point in the alignment view to another point in the view being edited"
        """
        ToView = 0  # ViewPlacementBuilderOptionMemberType
        ModelPoint = 1  # ViewPlacementBuilderOptionMemberType
        PointToPoint = 2  # ViewPlacementBuilderOptionMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AlignmentMethod: ViewPlacementBuilderMethod = ...
    """
    Returns or sets  the alignment method 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentMethod`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignmentMethod`` 
    
    :param alignmentMethod: 
    :type alignmentMethod: :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AlignmentOption: ViewPlacementBuilderOption = ...
    """
    Returns or sets  the alignment option used to indicate what points in the views to align.  
    
    The alignment option is not used when the alignment method is set
    to :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod.Infer <NXOpen.Drawings.ViewPlacementBuilderMethod>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentOption`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilderOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignmentOption`` 
    
    :param alignmentOption: 
    :type alignmentOption: :py:class:`NXOpen.Drawings.ViewPlacementBuilderOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AlignmentPoint: NXOpen.SelectTaggedObject = ...
    """
    Returns  the point to align to.  
    
    This point is only required for the
    :py:class:`NXOpen.Drawings.ViewPlacementBuilderOption.ModelPoint <NXOpen.Drawings.ViewPlacementBuilderOption>` and
    :py:class:`NXOpen.Drawings.ViewPlacementBuilderOption.PointToPoint <NXOpen.Drawings.ViewPlacementBuilderOption>` alignment options.
    The point is required for all alignment methods except for
    :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod.Infer <NXOpen.Drawings.ViewPlacementBuilderMethod>`.
    This point may be specified by either selecting an object of
    :py:class:`NXOpen.Point` class or not selecting an object and specifying
    a :py:class:`NXOpen.Point3d` selected object point.   
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentPoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    AlignmentVector: NXOpen.Direction = ...
    """
    Returns or sets  the vector to align along.  
    
    The vector is only required for the
    :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod.PerpendicularToLine <NXOpen.Drawings.ViewPlacementBuilderMethod>` alignment
    method.  The vector must be set regardless of the alignment option. 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AlignmentVector`` 
    
    :param alignmentVector: 
    :type alignmentVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AlignmentView: SelectDraftingView = ...
    """
    Returns  the view to align to.  
    
    The view is required for all alignment
    options.  The view is required for all alignment methods except for
    :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod.Infer <NXOpen.Drawings.ViewPlacementBuilderMethod>`. 
    
    <hr>
    
    Getter Method
    
    Signature ``AlignmentView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Associative: bool = ...
    """
    Returns or sets  the flag used to create a persistent alignment 
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX8.5.0
    
    License requirements: drafting ("DRAFTING")
    """
    CandidatePoint: NXOpen.SelectTaggedObject = ...
    """
    Returns  the point to align in the view being edited.  
    
    This point is only
    required for the :py:class:`NXOpen.Drawings.ViewPlacementBuilderOption.PointToPoint <NXOpen.Drawings.ViewPlacementBuilderOption>`
    alignment option.  The point is required for all alignment methods
    except :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod.Infer <NXOpen.Drawings.ViewPlacementBuilderMethod>`.
    This point may be specified by either selecting an object of
    :py:class:`NXOpen.Point` class or not selecting an object and specifying
    a :py:class:`NXOpen.Point3d` selected object point. 
    
    <hr>
    
    Getter Method
    
    Signature ``CandidatePoint`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectTaggedObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    LockOffset: bool = ...
    """
    Returns or sets  the lock offset flag.  
    
    Use the offset property if this flag is set
    to true. 
    
    <hr>
    
    Getter Method
    
    Signature ``LockOffset`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LockOffset`` 
    
    :param lockOffset: 
    :type lockOffset: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Offset: float = ...
    """
    Returns or sets  the offset.  
    
    If the lock offset flag is set to true then the offset
    will be applied.  The offset has no meaning when used with the
    :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod.Overlay <NXOpen.Drawings.ViewPlacementBuilderMethod>`.  If the
    :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod.Infer <NXOpen.Drawings.ViewPlacementBuilderMethod>` method is set, then the offset
    is defined as the distance from the view to its parent view.
    For all other methods, the offset is defined as the distance along
    the line being aligned to. 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param offset: 
    :type offset: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Placement: NXOpen.SelectNXObject = ...
    """
    Returns  the placement location.  
    
    The location may be specified by either
    selecting an object of :py:class:`NXOpen.Point` class or not
    selecting an object and specifying a :py:class:`NXOpen.Point3d`
    selected object point.  If the alignment method is set to
    :py:class:`NXOpen.Drawings.ViewPlacementBuilderMethod.Infer <NXOpen.Drawings.ViewPlacementBuilderMethod>`
    then the location defines the position of the view's center.
    The location is not necessarily the position of the view.
    The location provides a hint point that helps determine the view's
    position based on the alignment method and alignment point specified. 
    
    <hr>
    
    Getter Method
    
    Signature ``Placement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ViewPlacementBuilder = ...  # unknown typename


class SectionLineSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the Section Line Settings Builder (Drawings.  
    
    SectionLineSettingsBuilder) which manages all the style attributes related
    *  to the section Line including label letter.
    
    .. versionadded:: NX10.0.0
    """
    
    def InheritSettingsFromSelectedObjects(self, selectedObject: SectionLine) -> None:
        """
        Inherit Settings From Selected Objects 
        
        Signature ``InheritSettingsFromSelectedObjects(selectedObject)`` 
        
        :param selectedObject:  The selected section line instance object.                                                                            None is not allowed.  
        :type selectedObject: :py:class:`NXOpen.Drawings.SectionLine` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit Settings From Customer Default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit Settings From Preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ViewCommonViewLabel: ViewCommonViewLabelBuilder = ...
    """
    Returns  the view Common View label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewCommonViewLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    ViewSectionLine: ViewSectionLineBuilder = ...
    """
    Returns  the Section Line builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewSectionLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSectionLineBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Null: SectionLineSettingsBuilder = ...  # unknown typename


class DraftingDrawingSheet(DrawingSheet):
    """
    Represents a drafting drawing sheet.  
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.DraftingDrawingSheetBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: DraftingDrawingSheet = ...  # unknown typename


class AssociativeAngleBuilderObjectTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssociativeAngleBuilderObjectType():
    """
    Represents the object type. 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Object", "indicates the selected type is an object"
       "Vector", "indicates the selected type is a vector"
    """
    Object = 0  # AssociativeAngleBuilderObjectTypeMemberType
    Vector = 1  # AssociativeAngleBuilderObjectTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssociativeAngleBuilderEvaluationPlaneTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class AssociativeAngleBuilderEvaluationPlaneType():
    """
    evaluation plane types 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "DrawingSheet", " - "
       "TrueAngle", " - "
       "SpecifyPlane", " - "
    """
    DrawingSheet = 0  # AssociativeAngleBuilderEvaluationPlaneTypeMemberType
    TrueAngle = 1  # AssociativeAngleBuilderEvaluationPlaneTypeMemberType
    SpecifyPlane = 2  # AssociativeAngleBuilderEvaluationPlaneTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class AssociativeAngleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    This builder allows the user to create an associative or non-associative angle by measuring
    between a combination of two objects or vectors evaluated on a specified plane, or by an expression   
    
    .. versionadded:: NX11.0.0
    """
    
    class ObjectType():
        """
        Represents the object type. 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Object", "indicates the selected type is an object"
           "Vector", "indicates the selected type is a vector"
        """
        Object = 0  # AssociativeAngleBuilderObjectTypeMemberType
        Vector = 1  # AssociativeAngleBuilderObjectTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class EvaluationPlaneType():
        """
        evaluation plane types 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "DrawingSheet", " - "
           "TrueAngle", " - "
           "SpecifyPlane", " - "
        """
        DrawingSheet = 0  # AssociativeAngleBuilderEvaluationPlaneTypeMemberType
        TrueAngle = 1  # AssociativeAngleBuilderEvaluationPlaneTypeMemberType
        SpecifyPlane = 2  # AssociativeAngleBuilderEvaluationPlaneTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def AlternateAngle(self) -> None:
        """
        The alternate angle 
        
        Signature ``AlternateAngle()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateScalarObject(self) -> None:
        """
        Creates a scalar object for an associative angle 
        
        Signature ``CreateScalarObject()`` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetIsMeasure(self, isMeasure: bool) -> None:
        """
        Sets IsMeasure flag indicating angle is result of a measure 
        
        Signature ``SetIsMeasure(isMeasure)`` 
        
        :param isMeasure: 
        :type isMeasure: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateScalarObjectFromData(self, scalarTag: NXOpen.Scalar, angleValue: float) -> None:
        """
        Creates scalar object for an associative angle using data from existing scalar object or angle value.  
        
        Signature ``CreateScalarObjectFromData(scalarTag, angleValue)`` 
        
        :param scalarTag: 
        :type scalarTag: :py:class:`NXOpen.Scalar` 
        :param angleValue: 
        :type angleValue: float 
        
        .. versionadded:: NX11.0.2
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Angle: NXOpen.Expression = ...
    """
    Returns  the angle 
    
    <hr>
    
    Getter Method
    
    Signature ``Angle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    AngleValue: float = ...
    """
    Returns or sets  the angle value 
    
    <hr>
    
    Getter Method
    
    Signature ``AngleValue`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AngleValue`` 
    
    :param angleValue: 
    :type angleValue: float 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Associative: bool = ...
    """
    Returns or sets  the associative flag 
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    EvaluationPlane: AssociativeAngleBuilderEvaluationPlaneType = ...
    """
    Returns or sets  the evaluation plane type 
    
    <hr>
    
    Getter Method
    
    Signature ``EvaluationPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.AssociativeAngleBuilderEvaluationPlaneType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EvaluationPlane`` 
    
    :param evaluationPlane: 
    :type evaluationPlane: :py:class:`NXOpen.Drawings.AssociativeAngleBuilderEvaluationPlaneType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FirstMapView: NXOpen.View = ...
    """
    Returns or sets  the first map view 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstMapView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstMapView`` 
    
    :param firstMapView: 
    :type firstMapView: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FirstObject: NXOpen.SelectNXObject = ...
    """
    Returns  the first object 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    FirstObjectType: AssociativeAngleBuilderObjectType = ...
    """
    Returns or sets  the first object type 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstObjectType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.AssociativeAngleBuilderObjectType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstObjectType`` 
    
    :param objtype: 
    :type objtype: :py:class:`NXOpen.Drawings.AssociativeAngleBuilderObjectType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FirstVector: NXOpen.Direction = ...
    """
    Returns or sets  the first vector 
    
    <hr>
    
    Getter Method
    
    Signature ``FirstVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FirstVector`` 
    
    :param firstVector: 
    :type firstVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Plane: NXOpen.Plane = ...
    """
    Returns or sets  the plane 
    
    <hr>
    
    Getter Method
    
    Signature ``Plane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Plane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.Plane` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScalarObject: NXOpen.Scalar = ...
    """
    Returns or sets  the scalar object 
    
    <hr>
    
    Getter Method
    
    Signature ``ScalarObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Scalar` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScalarObject`` 
    
    :param scalarObject: 
    :type scalarObject: :py:class:`NXOpen.Scalar` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondMapView: NXOpen.View = ...
    """
    Returns or sets  the second map view 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondMapView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondMapView`` 
    
    :param secondMapView: 
    :type secondMapView: :py:class:`NXOpen.View` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondObject: NXOpen.SelectNXObject = ...
    """
    Returns  the second object 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondObject`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObject` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SecondObjectType: AssociativeAngleBuilderObjectType = ...
    """
    Returns or sets  the second object type 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondObjectType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.AssociativeAngleBuilderObjectType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondObjectType`` 
    
    :param objtype: 
    :type objtype: :py:class:`NXOpen.Drawings.AssociativeAngleBuilderObjectType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondVector: NXOpen.Direction = ...
    """
    Returns or sets  the second vector 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondVector`` 
    
    :param secondVector: 
    :type secondVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: AssociativeAngleBuilder = ...  # unknown typename


class SelectDrawingViewList(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a list of objects on a selection list.  
    
    .. versionadded:: NX5.0.0
    """
    
    @typing.overload
    def Add(self, object: DrawingView) -> bool:
        """
        Adds an object to the list
        
        Signature ``Add(object)`` 
        
        :param object:  object to add  
        :type object: :py:class:`NXOpen.Drawings.DrawingView` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, objects: 'list[DrawingView]') -> bool:
        """
        Adds a set of objects to the list
        
        Signature ``Add(objects)`` 
        
        :param objects:  objects to add  
        :type objects: list of :py:class:`NXOpen.Drawings.DrawingView` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Adds the objects from a SelectionMethod to the list
        
        Signature ``Add(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: DrawingView, view: NXOpen.View, point: NXOpen.Point3d) -> bool:
        """
        Adds the object with the objects view and objects point
        
        Signature ``Add(selection, view, point)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingView` 
        :param view:  selected object view 
        :type view: :py:class:`NXOpen.View` 
        :param point:  selected object point 
        :type point: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added to list;
        False if the object was already a member
        of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: DrawingView, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: DrawingView, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        The object being selected with the objects view and objects point and snap information.
        
        Signature ``Add(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Drawings.DrawingView` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Drawings.DrawingView` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Add(self, selection: DrawingView, caeSubType: NXOpen.CaeObjectTypeCaeSubType, caeSubId: int) -> bool:
        """
        The object being selected with CAE set object information.
        
        Signature ``Add(selection, caeSubType, caeSubId)`` 
        
        :param selection:  selected object  
        :type selection: :py:class:`NXOpen.Drawings.DrawingView` 
        :param caeSubType:  CAE set object sub type 
        :type caeSubType: :py:class:`NXOpen.CaeObjectTypeCaeSubType` 
        :param caeSubId:  CAE set object sub id 
        :type caeSubId: int 
        :returns:  True if succesully added all objects to the list;
        False if there was at least one object that was already a
        member of the list and duplicates are not allowed  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX10.0.0
           Use other versions of :py:meth:`NXOpen.SelectObjectList.Add`.
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Remove(self, object: DrawingView) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Drawings.DrawingView` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, object: DrawingView, view: NXOpen.View) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(object, view)`` 
        
        :param object:  Object to remove  
        :type object: :py:class:`NXOpen.Drawings.DrawingView` 
        :param view:  with this view 
        :type view: :py:class:`NXOpen.View` 
        :returns:  True if succesully removed from list;
        False if the object / view was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, snapType: NXOpen.InferSnapTypeSnapType, selection1: DrawingView, view1: NXOpen.View, point1: NXOpen.Point3d, selection2: DrawingView, view2: NXOpen.View, point2: NXOpen.Point3d) -> bool:
        """
        Remove specified object from list.
        
        Signature ``Remove(snapType, selection1, view1, point1, selection2, view2, point2)`` 
        
        :param snapType:   snap point type 
        :type snapType: :py:class:`NXOpen.InferSnapTypeSnapType` 
        :param selection1:  first selected object  
        :type selection1: :py:class:`NXOpen.Drawings.DrawingView` 
        :param view1:  first selected object view 
        :type view1: :py:class:`NXOpen.View` 
        :param point1: first  selected object point 
        :type point1: :py:class:`NXOpen.Point3d` 
        :param selection2:  second selected object  
        :type selection2: :py:class:`NXOpen.Drawings.DrawingView` 
        :param view2: second  selected object view 
        :type view2: :py:class:`NXOpen.View` 
        :param point2:  second selected object point 
        :type point2: :py:class:`NXOpen.Point3d` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Remove(self, inputSelectionMethod: NXOpen.SelectionMethod) -> bool:
        """
        Removes the objects from a SelectionMethod from the list
        
        Signature ``Remove(inputSelectionMethod)`` 
        
        :param inputSelectionMethod:  selection method containing objects to add  
        :type inputSelectionMethod: :py:class:`NXOpen.SelectionMethod` 
        :returns:  True if succesully removed all objects from the list;
        False if there was at least one object that was not a
        member of the list  
        :rtype: bool 
        
        .. versionadded:: NX6.0.0
        
        License requirements: None.
        """
        ...
    
    
    def RemoveArray(self, objects: 'list[DrawingView]') -> bool:
        """
        Remove specified objects from list.  
        
        Signature ``RemoveArray(objects)`` 
        
        :param objects:  Objects to remove  
        :type objects: list of :py:class:`NXOpen.Drawings.DrawingView` 
        :returns:  True if succesully removed from list;
        False if the object was not a member of the list  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Clear(self) -> None:
        """
        Removes all items from the list.  
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Contains(self, object: DrawingView) -> bool:
        """
        Returns whether the specified object is already in the list or not.  
        
        Signature ``Contains(object)`` 
        
        :param object:  object to check  
        :type object: :py:class:`NXOpen.Drawings.DrawingView` 
        :returns:  true if object is in the list, false otherwise  
        :rtype: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetArray(self, objects: 'list[DrawingView]') -> None:
        """
        Overloaded method SetArray
        
        * ``SetArray(objects)`` 
        * ``SetArray(vars)`` 
        
        <hr>
        
        Sets the list of objects in the selection list. This will clear any existing
        items in the list.
        
        Signature ``SetArray(objects)`` 
        
        :param objects:  items to put in the list 
        :type objects: list of :py:class:`NXOpen.Drawings.DrawingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetArray(self) -> 'list[DrawingView]':
        """
        Overloaded method GetArray
        
        * ``GetArray()`` 
        * ``GetArray()`` 
        
        <hr>
        
        Returns the list of objects in the selection list.
        
        Signature ``GetArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.Drawings.DrawingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        
        <hr>
        """
        ...
    
    
    def GetSelectObjectArray(self) -> 'list[NXOpen.SelectObject]':
        """
        Returns the list of SelectObjects in the selection list.  
        
        Signature ``GetSelectObjectArray()`` 
        
        :returns:  items in list  
        :rtype: list of :py:class:`NXOpen.SelectObject` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    DuplicatesAllowed: bool = ...
    """
    Returns  whether duplicate objects are allowed in the selection list.  
    
    <hr>
    
    Getter Method
    
    Signature ``DuplicatesAllowed`` 
    
    :returns:  Whether duplicate objects are allowed  
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Size: int = ...
    """
    Returns  the number of objects in the list.  
    
    <hr>
    
    Getter Method
    
    Signature ``Size`` 
    
    :returns:  number of objects in the list  
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SelectDrawingViewList = ...  # unknown typename


class TraceLinesViewStyle(NXOpen.Preferences.ITraceLinesViewPreferences):
    """
    Represents interface for Trace Lines View Style Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.TraceLines`
    
    .. versionadded:: NX5.0.0
    """
    CreateGapsStatus: bool = ...
    """
    Returns or sets  the status of create gaps 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateGapsStatus`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateGapsStatus`` 
    
    :param createGaps: 
    :type createGaps: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    GapSize: float = ...
    """
    Returns or sets  the gap size 
    
    <hr>
    
    Getter Method
    
    Signature ``GapSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``GapSize`` 
    
    :param gapSize: 
    :type gapSize: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenColor: int = ...
    """
    Returns or sets  the hidden color.  
    
    The value should be between 1 and 216. 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenColor`` 
    
    :param hiddenColor: 
    :type hiddenColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the hidden font 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenFont`` 
    
    :param hiddenFont: 
    :type hiddenFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the hidden width 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenWidth`` 
    
    :param hiddenWidth: 
    :type hiddenWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleColor: int = ...
    """
    Returns or sets  the visible color.  
    
    The value should be between 1 and 216. 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleColor`` 
    
    :param visibleColor: 
    :type visibleColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the visible font 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleFont`` 
    
    :param visibleFont: 
    :type visibleFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VisibleWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the visible width 
    
    <hr>
    
    Getter Method
    
    Signature ``VisibleWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VisibleWidth`` 
    
    :param visibleWidth: 
    :type visibleWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class SheetZoneReferenceBuilder(NXOpen.Builder):
    """
    builder for creating sheet zone refernce control strings based on the selected attribute and view   
    
    To create a new instance of this class, use :py:meth:`NXOpen.DraftingManager.CreateSheetZoneReferenceBuilder`
    
    .. versionadded:: NX8.0.0
    """
    SelectView: SelectDraftingView = ...
    """
    Returns  the select view 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: SheetZoneReferenceBuilder = ...  # unknown typename


class ViewStyle():
    """
    Represents set of style applicable to drafting views.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Drawings.DraftingView`
    
    .. versionadded:: NX5.0.0
    """
    General: GeneralViewStyle = ...
    """
    Returns object for doing View style settings applicable to General 
    
    Signature ``General`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.GeneralViewStyle`
    """
    BaseView: BaseViewStyle = ...
    """
    Returns object for doing View style settings applicable to Basedata 
    
    Signature ``BaseView`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BaseViewStyle`
    """
    Projected: ProjectedViewStyle = ...
    """
    Returns object for doing View style settings applicable to Projected 
    
    Signature ``Projected`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ProjectedViewStyle`
    """
    InheritPmi: InheritPmiViewStyle = ...
    """
    Returns object for doing View style settings applicable to InheritPmi 
    
    Signature ``InheritPmi`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.InheritPmiViewStyle`
    """
    Section: SectionViewStyle = ...
    """
    Returns object for doing View style settings applicable to Section 
    
    Signature ``Section`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionViewStyle`
    """
    VirtualIntersections: VirtualIntersectionsViewStyle = ...
    """
    Returns object for doing View style settings applicable to VirtualIntersections 
    
    Signature ``VirtualIntersections`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.VirtualIntersectionsViewStyle`
    """
    SmoothEdges: SmoothEdgesViewStyle = ...
    """
    Returns object for doing View style settings applicable to SmoothEdges 
    
    Signature ``SmoothEdges`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SmoothEdgesViewStyle`
    """
    Perspective: PerspectiveViewStyle = ...
    """
    Returns object for doing View style settings applicable to Perspective 
    
    Signature ``Perspective`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.PerspectiveViewStyle`
    """
    Orientation: OrientationViewStyle = ...
    """
    Returns object for doing View style settings applicable to Orientation 
    
    Signature ``Orientation`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.OrientationViewStyle`
    """
    VisibleLines: VisibleLinesViewStyle = ...
    """
    Returns object for doing View style settings applicable to VisibleLines 
    
    Signature ``VisibleLines`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.VisibleLinesViewStyle`
    """
    Threads: ThreadsViewStyle = ...
    """
    Returns object for doing View style settings applicable to Threads 
    
    Signature ``Threads`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ThreadsViewStyle`
    """
    TraceLines: TraceLinesViewStyle = ...
    """
    Returns object for doing View style settings applicable to TraceLines 
    
    Signature ``TraceLines`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.TraceLinesViewStyle`
    """
    HiddenLines: HiddenLinesViewStyle = ...
    """
    Returns object for doing View style settings applicable to HiddenLines 
    
    Signature ``HiddenLines`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenLinesViewStyle`
    """
    Shading: ShadingViewStyle = ...
    """
    Returns object for doing View style settings applicable to Shading 
    
    Signature ``Shading`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ShadingViewStyle`
    """
    FlatPattern: FlatPatternViewStyle = ...
    """
    Returns object for doing View style settings applicable to Flat Pattern Views.  
    
    Signature ``FlatPattern`` 
    
    .. versionadded:: NX3.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.FlatPatternViewStyle`
    """
    ShipbuildingLines: ShipbuildingLinesViewStyle = ...
    """
    Returns object for doing View style settings applicable to Ship Lines.  
    
    Signature ``ShipbuildingLines`` 
    
    .. versionadded:: NX8.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ShipbuildingLinesViewStyle`
    """
    ShipDraftingViewLines: ShipDraftingViewLinesViewStyle = ...
    """
    Returns object for doing View style settings applicable to Ship Drafting View Lines.  
    
    Signature ``ShipDraftingViewLines`` 
    
    .. versionadded:: NX10.0.0
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesViewStyle`
    """


class ViewStyleFPCalloutConfigBuilderOrientationTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewStyleFPCalloutConfigBuilderOrientationType():
    """
    This enum represents orientation types for the flat pattern callouts 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Leadered", "Leadered"
       "Aligned", "Aligned"
    """
    Leadered = 0  # ViewStyleFPCalloutConfigBuilderOrientationTypeMemberType
    Aligned = 1  # ViewStyleFPCalloutConfigBuilderOrientationTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewStyleFPCalloutConfigBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the Callout section of the Flat Pattern tab on the View Style Dialog (Drawings.  
    
    ViewStyleFPCalloutsBuilder)
    
    .. versionadded:: NX9.0.0
    """
    
    class OrientationType():
        """
        This enum represents orientation types for the flat pattern callouts 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Leadered", "Leadered"
           "Aligned", "Aligned"
        """
        Leadered = 0  # ViewStyleFPCalloutConfigBuilderOrientationTypeMemberType
        Aligned = 1  # ViewStyleFPCalloutConfigBuilderOrientationTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def GetContents(self, calloutType: str) -> 'list[str]':
        """
        Returns the contents for a Flat Pattern callout type  
        
        Signature ``GetContents(calloutType)`` 
        
        :param calloutType:  The name of the callout for which to get the content.  
        :type calloutType: str 
        :returns:  The contents for the callout type.  
        :rtype: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, calloutType: str, contents: 'list[str]') -> None:
        """
        Sets the contents for a Flat Pattern callout type 
        
        Signature ``SetContents(calloutType, contents)`` 
        
        :param calloutType:  The name of the callout for which to set the content.  
        :type calloutType: str 
        :param contents:  The contents for the callout type.  
        :type contents: list of str 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GetOrientationType(self) -> ViewStyleFPCalloutConfigBuilderOrientationType:
        """
        Returns the orientation type for flat pattern callouts.  
        
        Signature ``GetOrientationType()`` 
        
        :returns:  The orientation type for the flat pattern callouts.  
        :rtype: :py:class:`NXOpen.Drawings.ViewStyleFPCalloutConfigBuilderOrientationType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetOrientationType(self, orientation: ViewStyleFPCalloutConfigBuilderOrientationType) -> None:
        """
        Sets the orientation type for flat pattern callouts.  
        
        Signature ``SetOrientationType(orientation)`` 
        
        :param orientation:  The orientation type for the flat pattern callouts.  
        :type orientation: :py:class:`NXOpen.Drawings.ViewStyleFPCalloutConfigBuilderOrientationType` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Null: ViewStyleFPCalloutConfigBuilder = ...  # unknown typename


class SvtBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.SvtBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    BackgroundFaces: NXOpen.SelectFaceList = ...
    """
    Returns  the background faces that are to be shown in the section view.  
    
    When none are selected, all faces will be shown 
    
    <hr>
    
    Getter Method
    
    Signature ``BackgroundFaces`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectFaceList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    NormalDirection: NXOpen.Direction = ...
    """
    Returns or sets  the vector that represents the normal direction for the view to be created or edited.  
    
    The vector is used only if the Orientation flag is on.  The purpose of the direction
    vectors is make a simple, simulated pictorial view.  Consequently it is expected that
    a desireable orientation will need to be found interactive using the tool, and that
    specification by vectors will be of marginal use.  The ability to specifiy the orientation
    is being included only for completeness. 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``NormalDirection`` 
    
    :param normalDirection: 
    :type normalDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Orientation: bool = ...
    """
    Returns or sets  the orientation flag that indicates whether or not the Section View Tool view should be used to orient the section view when it is placed 
    
    <hr>
    
    Getter Method
    
    Signature ``Orientation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``Orientation`` 
    
    :param orientation: 
    :type orientation: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    XDirection: NXOpen.Direction = ...
    """
    Returns or sets  the x direction vector for the view to be created or edited.  
    
    The vector is used only if the Orientation flag is on.  The purpose of the direction
    vectors is make a simple, simulated pictorial view.  Consequently it is expected that
    a desireable orientation will need to be found interactive using the tool, and that
    specification by vectors will be of marginal use.  The ability to specifiy the orientation
    is being included only for completeness. 
    
    <hr>
    
    Getter Method
    
    Signature ``XDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``XDirection`` 
    
    :param xDirection: 
    :type xDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SvtBuilder = ...  # unknown typename


class SectionLineCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.SectionLine`s.  
    
    Use :py:meth:`DraftingManager.SectionLines` to get the instance of this class.
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateSectionLineBuilder(self, sectionLine: SectionLine) -> SectionLineBuilder:
        """
        Creates the section line builder  
        
        Signature ``CreateSectionLineBuilder(sectionLine)`` 
        
        :param sectionLine: 
        :type sectionLine: :py:class:`NXOpen.Drawings.SectionLine` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SectionLineBuilder` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateSectionLineSegmentBuilder(self) -> SectionLineSegmentBuilder:
        """
        Creates the section line segment builder  
        
        Signature ``CreateSectionLineSegmentBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateSectionLineStyleBuilder(self, sectionline: SectionLine) -> SectionLineStyleBuilder:
        """
        Creates the Section Line Style Builder  
        
        Signature ``CreateSectionLineStyleBuilder(sectionline)`` 
        
        :param sectionline: 
        :type sectionline: :py:class:`NXOpen.Drawings.SectionLine` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SectionLineStyleBuilder` 
        
        .. versionadded:: NX6.0.0
        
        .. deprecated::  NX10.0.0
           Use :py:class:`NXOpen.Drawings.ViewSectionLineBuilder` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def CreateSketchSectionLineBuilder(self, sectionLine: SectionLine) -> SketchSectionLineBuilder:
        """
        Creates the Sketch Section Line builder  
        
        Signature ``CreateSketchSectionLineBuilder(sectionLine)`` 
        
        :param sectionLine: 
        :type sectionLine: :py:class:`NXOpen.Drawings.SectionLine` 
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.SketchSectionLineBuilder` 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def GenerateSectionLineLabelAttribute(self, note: NXOpen.Annotations.BaseNote) -> str:
        """
        Generates a parametric text attribute that is similar to the current section line label but contains the section line segment information.  
        
        Note that the text in the section line note is not overwritten.
        
        Signature ``GenerateSectionLineLabelAttribute(note)`` 
        
        :param note:  The section line note to generate the attribute from  
        :type note: :py:class:`NXOpen.Annotations.BaseNote` 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX10.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class ParentViewBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ParentViewBuilder`.  
    
    This class
    is used to define a parent view when creating a drafting member view
    object.
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    View: SelectDraftingView = ...
    """
    Returns  the parent view 
    
    <hr>
    
    Getter Method
    
    Signature ``View`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingView` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ParentViewBuilder = ...  # unknown typename


class PerspectiveViewStyle(NXOpen.Preferences.IPerspectiveViewPreferences):
    """
    Represents set of PerspectiveViewStyle applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.Perspective`
    
    .. versionadded:: NX5.0.0
    """
    BackClipping: bool = ...
    """
    Returns or sets  the status of back clipping 
    
    <hr>
    
    Getter Method
    
    Signature ``BackClipping`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BackClipping`` 
    
    :param backClipping: 
    :type backClipping: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    BackClippingDistance: float = ...
    """
    Returns or sets  the value of back clipping distance 
    
    <hr>
    
    Getter Method
    
    Signature ``BackClippingDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BackClippingDistance`` 
    
    :param backClippingDistance: 
    :type backClippingDistance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FrontClipping: bool = ...
    """
    Returns or sets  the status of front clipping 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontClipping`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontClipping`` 
    
    :param frontClipping: 
    :type frontClipping: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    FrontClippingDistance: float = ...
    """
    Returns or sets  the value of front clipping distance 
    
    <hr>
    
    Getter Method
    
    Signature ``FrontClippingDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FrontClippingDistance`` 
    
    :param frontClippingDistance: 
    :type frontClippingDistance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Perspective: bool = ...
    """
    Returns or sets  the status of perspective 
    
    <hr>
    
    Getter Method
    
    Signature ``Perspective`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Perspective`` 
    
    :param perspective: 
    :type perspective: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    PerspectiveDistance: float = ...
    """
    Returns or sets  the value of perspective distance 
    
    <hr>
    
    Getter Method
    
    Signature ``PerspectiveDistance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PerspectiveDistance`` 
    
    :param perspectiveDistance: 
    :type perspectiveDistance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class SectionLineSegmentBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[SectionLineSegmentBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: SectionLineSegmentBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: SectionLineSegmentBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> SectionLineSegmentBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SectionLineSegmentBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: SectionLineSegmentBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[SectionLineSegmentBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[SectionLineSegmentBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: SectionLineSegmentBuilder, object2: SectionLineSegmentBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: SectionLineSegmentBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: SectionLineSegmentBuilderList = ...  # unknown typename


class SheetZoneSettingsBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the Drawing Sheet Zone Setting Style Builder.  
    
    .. versionadded:: NX10.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    ContinueZoneIndexingAcrossSheets: bool = ...
    """
    Returns or sets  the continue zone indexing across sheets 
    
    <hr>
    
    Getter Method
    
    Signature ``ContinueZoneIndexingAcrossSheets`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ContinueZoneIndexingAcrossSheets`` 
    
    :param continueZoneIndexingAcrossSheets: 
    :type continueZoneIndexingAcrossSheets: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CornerZoneModification: float = ...
    """
    Returns or sets  the corner zone modification 
    
    <hr>
    
    Getter Method
    
    Signature ``CornerZoneModification`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CornerZoneModification`` 
    
    :param cornerZoneModification: 
    :type cornerZoneModification: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CreateZoneLabels: bool = ...
    """
    Returns or sets  the create zone labels 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateZoneLabels`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateZoneLabels`` 
    
    :param createZoneLabels: 
    :type createZoneLabels: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CreateZoneMarkings: bool = ...
    """
    Returns or sets  the create zone markings 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateZoneMarkings`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateZoneMarkings`` 
    
    :param createZoneMarkings: 
    :type createZoneMarkings: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CreateZones: bool = ...
    """
    Returns or sets  the create zones 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateZones`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateZones`` 
    
    :param createZones: 
    :type createZones: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HorizontalSize: float = ...
    """
    Returns or sets  the horizontal size 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalSize`` 
    
    :param horizontalSize: 
    :type horizontalSize: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelColor: int = ...
    """
    Returns or sets  the labels color 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelColor`` 
    
    :param labelColor: 
    :type labelColor: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelFont: int = ...
    """
    Returns or sets  the labels font 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelHeight: float = ...
    """
    Returns or sets  the label height 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelHeight`` 
    
    :param labelHeight: 
    :type labelHeight: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelItalicized: bool = ...
    """
    Returns or sets  the labels font style 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelItalicized`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelItalicized`` 
    
    :param italic: 
    :type italic: bool 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelWidth: int = ...
    """
    Returns or sets  the labels width 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelWidth`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelWidth`` 
    
    :param labelWidth: 
    :type labelWidth: int 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    LabelsToSkip: str = ...
    """
    Returns or sets  the labels to skip 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelsToSkip`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelsToSkip`` 
    
    :param labelsToSkip: 
    :type labelsToSkip: str 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    MarkingHeight: float = ...
    """
    Returns or sets  the marking height 
    
    <hr>
    
    Getter Method
    
    Signature ``MarkingHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarkingHeight`` 
    
    :param markingHeight: 
    :type markingHeight: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    MarkingLineColorWidth: NXOpen.LineColorFontWidthBuilder = ...
    """
    Returns  the marking line color width 
    
    <hr>
    
    Getter Method
    
    Signature ``MarkingLineColorWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.LineColorFontWidthBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    Origin: ZoneOrigin = ...
    """
    Returns or sets  the origin 
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ZoneOrigin` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Drawings.ZoneOrigin` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VerticalSize: float = ...
    """
    Returns or sets  the vertical size 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalSize`` 
    
    :param verticalSize: 
    :type verticalSize: float 
    
    .. versionadded:: NX10.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: SheetZoneSettingsBuilder = ...  # unknown typename


class ScalePositionTypesMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ScalePositionTypes():
    """
    scale Position type
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Above", " - "
       "Below", " - "
       "Before", " - "
       "After", " - "
    """
    Above = 0  # ScalePositionTypesMemberType
    Below = 1  # ScalePositionTypesMemberType
    Before = 2  # ScalePositionTypesMemberType
    After = 3  # ScalePositionTypesMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewAlignmentCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.ViewAlignment`s.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Part`
    
    .. versionadded:: NX8.5.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def CreateViewAlignmentBuilder(self) -> ViewAlignmentBuilder:
        """
        Creates a :py:class:`NXOpen.Drawings.ViewAlignmentBuilder`  
        
        Signature ``CreateViewAlignmentBuilder()`` 
        
        :returns: 
        :rtype: :py:class:`NXOpen.Drawings.ViewAlignmentBuilder` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> ViewAlignment:
        """
        Finds the :py:class:`NXOpen.Drawings.ViewAlignment` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of
        the software. However newer versions of the software should find the same object when
        FindObject is passed older versions of its journal identifier. In general, this method
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the view alignment to be found  
        :type journalIdentifier: str 
        :returns:  View alignment with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.ViewAlignment` 
        
        .. versionadded:: NX8.5.0
        
        License requirements: None.
        """
        ...
    


class ShadingViewStyle(NXOpen.Preferences.IShadingViewPreferences):
    """
    Represents set of Shading View style applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.Shading`
    
    .. versionadded:: NX5.0.0
    """
    CustomAngleTolerance: float = ...
    """
    Returns or sets  the custom angle tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``CustomAngleTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomAngleTolerance`` 
    
    :param customAngleTolerance: 
    :type customAngleTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CustomEdgeTolerance: float = ...
    """
    Returns or sets  the custom edge tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``CustomEdgeTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomEdgeTolerance`` 
    
    :param customEdgeTolerance: 
    :type customEdgeTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    CustomFaceTolerance: float = ...
    """
    Returns or sets  the custom face tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``CustomFaceTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CustomFaceTolerance`` 
    
    :param customFaceTolerance: 
    :type customFaceTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OverrideHiddenWireframeColor: int = ...
    """
    Returns or sets  the hidden wireframe override color.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideHiddenWireframeColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideHiddenWireframeColor`` 
    
    :param overrideHiddenWireframeColor: 
    :type overrideHiddenWireframeColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OverrideVisibleWireframeColor: int = ...
    """
    Returns or sets  the visible wireframe override color.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``OverrideVisibleWireframeColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OverrideVisibleWireframeColor`` 
    
    :param overrideVisibleWireframeColor: 
    :type overrideVisibleWireframeColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RenderingStyle: NXOpen.Preferences.ShadingRenderingStyleOption = ...
    """
    Returns or sets  the rendering style.  
    
    <hr>
    
    Getter Method
    
    Signature ``RenderingStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ShadingRenderingStyleOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RenderingStyle`` 
    
    :param renderingStyleOption: 
    :type renderingStyleOption: :py:class:`NXOpen.Preferences.ShadingRenderingStyleOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShadedCutFaceColor: int = ...
    """
    Returns or sets  the shaded cut face color.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``ShadedCutFaceColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadedCutFaceColor`` 
    
    :param shadedCutFaceColor: 
    :type shadedCutFaceColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ShadingTolerance: NXOpen.Preferences.ShadingToleranceOption = ...
    """
    Returns or sets  the shading tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``ShadingTolerance`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.ShadingToleranceOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ShadingTolerance`` 
    
    :param shadingTolerance: 
    :type shadingTolerance: :py:class:`NXOpen.Preferences.ShadingToleranceOption` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Shininess: float = ...
    """
    Returns or sets  the shininess tolerance.  
    
    <hr>
    
    Getter Method
    
    Signature ``Shininess`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Shininess`` 
    
    :param shininessTolerance: 
    :type shininessTolerance: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    TwoSidedLight: bool = ...
    """
    Returns or sets  the two sided light toggle data.  
    
    <hr>
    
    Getter Method
    
    Signature ``TwoSidedLight`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TwoSidedLight`` 
    
    :param twoSidedLight: 
    :type twoSidedLight: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class VirtualIntersectionsViewStyle(NXOpen.Preferences.IVirtualIntersectionsViewPreferences):
    """
    Represents set of Virtual Intersections View Style Preferences applicable to drafting views.  
    
    Allows to display imaginary intersection curves.
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.VirtualIntersections`
    
    .. versionadded:: NX5.0.0
    """
    AdjacentBlends: bool = ...
    """
    Returns or sets  the status of adjacent blends.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlends`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlends`` 
    
    :param adjacentBlends: 
    :type adjacentBlends: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsColor: int = ...
    """
    Returns or sets  the color of adjacent blends.  
    
    The value should be between 1 and 216.
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsColor`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsColor`` 
    
    :param adjacentBlendsColor: 
    :type adjacentBlendsColor: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsEndGaps: bool = ...
    """
    Returns or sets  the status of adjacent blends end gaps.  
    
    It controls the display of visible ends. If True, the 
    visible ends are suppressed from the display. The length of the suppressed end is in drawing 
    units and is controlled by the value set in the End Gap field. If False, the visible ends are 
    not suppressed from the display.
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsEndGaps`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsEndGaps`` 
    
    :param adjacentBlendsEndGaps: 
    :type adjacentBlendsEndGaps: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsEndGapsData: float = ...
    """
    Returns or sets  the value of adjacent blends end gaps.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsEndGapsData`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsEndGapsData`` 
    
    :param adjacentBlendsEndGapsData: 
    :type adjacentBlendsEndGapsData: float 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsFont: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the font of adjacent blends.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsFont`` 
    
    :param adjacentBlendsFont: 
    :type adjacentBlendsFont: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    AdjacentBlendsWidth: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the width of adjacent blends.  
    
    <hr>
    
    Getter Method
    
    Signature ``AdjacentBlendsWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``AdjacentBlendsWidth`` 
    
    :param adjacentBlendsWidth: 
    :type adjacentBlendsWidth: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    VirtualIntersection: bool = ...
    """
    Returns or sets  the status of virtual intersection.  
    
    <hr>
    
    Getter Method
    
    Signature ``VirtualIntersection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VirtualIntersection`` 
    
    :param virtualIntersection: 
    :type virtualIntersection: bool 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class DrawingCompareSettingsBuilderComparisonBaselineMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingCompareSettingsBuilderComparisonBaseline():
    """
    Represents a Compare Settings ComparisonBaseline
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Snapshot", " - "
       "TrackedChanges", " - "
    """
    Snapshot = 0  # DrawingCompareSettingsBuilderComparisonBaselineMemberType
    TrackedChanges = 1  # DrawingCompareSettingsBuilderComparisonBaselineMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingCompareSettingsBuilderChangeSymbolTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingCompareSettingsBuilderChangeSymbolType():
    """
    Represents a Compare Settings Change symbol Types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Circle", " - "
       "TriangleUp", " - "
       "TriangleDown", " - "
       "Square", " - "
       "Hexagon", " - "
    """
    Circle = 0  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
    TriangleUp = 1  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
    TriangleDown = 2  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
    Square = 3  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
    Hexagon = 4  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingCompareSettingsBuilderFontTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingCompareSettingsBuilderFontType():
    """
    Represents a Compare Settings Change symbol font types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Solid", " - "
       "Dashed", " - "
       "Phantom", " - "
       "Centerline", " - "
       "Dotted", " - "
       "LongDash", " - "
       "DottedDash", " - "
    """
    Solid = 0  # DrawingCompareSettingsBuilderFontTypeMemberType
    Dashed = 1  # DrawingCompareSettingsBuilderFontTypeMemberType
    Phantom = 2  # DrawingCompareSettingsBuilderFontTypeMemberType
    Centerline = 3  # DrawingCompareSettingsBuilderFontTypeMemberType
    Dotted = 4  # DrawingCompareSettingsBuilderFontTypeMemberType
    LongDash = 5  # DrawingCompareSettingsBuilderFontTypeMemberType
    DottedDash = 6  # DrawingCompareSettingsBuilderFontTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingCompareSettingsBuilderWidthTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class DrawingCompareSettingsBuilderWidthType():
    """
    Represents a Compare Settings Change symbol width types
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Thin", "Thin"
       "Normal", "Normal"
       "Thick", "Thick"
       "One", "Width One"
       "Two", "Width Two"
       "Three", "Width Three"
       "Four", "Width Four"
       "Five", "Width Five"
       "Six", "Width Six"
       "Seven", "Width Seven"
       "Eight", "Width Eight"
       "Nine", "Width Nine"
    """
    Thin = 0  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Normal = 1  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Thick = 2  # DrawingCompareSettingsBuilderWidthTypeMemberType
    One = 5  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Two = 6  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Three = 7  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Four = 8  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Five = 9  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Six = 10  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Seven = 11  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Eight = 12  # DrawingCompareSettingsBuilderWidthTypeMemberType
    Nine = 13  # DrawingCompareSettingsBuilderWidthTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class DrawingCompareSettingsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.DrawingCompareSettingsBuilder` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.DrawingCompareManager.CreateDrawingCompareSettingsBuilder`
    
    Default values.
    
    =======================================================  =========
    Property                                                 Value
    =======================================================  =========
    BaselineForComparison (deprecated)                       Snapshot 
    -------------------------------------------------------  ---------
    CenterlineCompare (deprecated)                           1 
    -------------------------------------------------------  ---------
    CompareTolerance (deprecated)                            0.001 
    -------------------------------------------------------  ---------
    CrosshatchAreaFillsCompare (deprecated)                  1 
    -------------------------------------------------------  ---------
    DatumFeatureSymbolCompare (deprecated)                   1 
    -------------------------------------------------------  ---------
    DatumFeatureSymbolLeaderTerminatorCompare (deprecated)   0 
    -------------------------------------------------------  ---------
    DatumFeatureSymbolOriginCompare (deprecated)             0 
    -------------------------------------------------------  ---------
    DatumFeatureSymbolRetainedStatusCompare (deprecated)     0 
    -------------------------------------------------------  ---------
    DatumFeatureSymbolTextCompare (deprecated)               0 
    -------------------------------------------------------  ---------
    DatumTargetCompare (deprecated)                          1 
    -------------------------------------------------------  ---------
    DatumTargetLeaderTerminatorCompare (deprecated)          0 
    -------------------------------------------------------  ---------
    DatumTargetOriginCompare (deprecated)                    0 
    -------------------------------------------------------  ---------
    DatumTargetRetainedStatusCompare (deprecated)            0 
    -------------------------------------------------------  ---------
    DatumTargetTextCompare (deprecated)                      0 
    -------------------------------------------------------  ---------
    DimCompare (deprecated)                                  1 
    -------------------------------------------------------  ---------
    DimOriginCompare (deprecated)                            0 
    -------------------------------------------------------  ---------
    DimRetainedStatusCompare (deprecated)                    0 
    -------------------------------------------------------  ---------
    DimSizeCompare (deprecated)                              0 
    -------------------------------------------------------  ---------
    DisplayChangeSymbol (deprecated)                         0 
    -------------------------------------------------------  ---------
    FcfCompare (deprecated)                                  1 
    -------------------------------------------------------  ---------
    FcfLeaderTerminatorCompare (deprecated)                  0 
    -------------------------------------------------------  ---------
    FcfOriginCompare (deprecated)                            0 
    -------------------------------------------------------  ---------
    FcfRetainedStatusCompare (deprecated)                    0 
    -------------------------------------------------------  ---------
    FcfTextCompare (deprecated)                              0 
    -------------------------------------------------------  ---------
    NoteCompare (deprecated)                                 1 
    -------------------------------------------------------  ---------
    NoteLeaderTerminatorCompare (deprecated)                 0 
    -------------------------------------------------------  ---------
    NoteOriginCompare (deprecated)                           0 
    -------------------------------------------------------  ---------
    NoteRetainedStatusCompare (deprecated)                   0 
    -------------------------------------------------------  ---------
    NoteTextCompare (deprecated)                             0 
    -------------------------------------------------------  ---------
    PartListCompare (deprecated)                             1 
    -------------------------------------------------------  ---------
    RestartNumbers (deprecated)                              0 
    -------------------------------------------------------  ---------
    SheetCompare (deprecated)                                1 
    -------------------------------------------------------  ---------
    SymbolCompare (deprecated)                               1 
    -------------------------------------------------------  ---------
    SymbolFont (deprecated)                                  Solid 
    -------------------------------------------------------  ---------
    SymbolLeaderTerminatorCompare (deprecated)               0 
    -------------------------------------------------------  ---------
    SymbolOriginCompare (deprecated)                         0 
    -------------------------------------------------------  ---------
    SymbolRetainedStatusCompare (deprecated)                 0 
    -------------------------------------------------------  ---------
    SymbolSize (deprecated)                                  0 
    -------------------------------------------------------  ---------
    SymbolTextCompare (deprecated)                           0 
    -------------------------------------------------------  ---------
    SymbolType (deprecated)                                  Circle 
    -------------------------------------------------------  ---------
    SymbolWidth (deprecated)                                 Thin 
    -------------------------------------------------------  ---------
    TableCompare (deprecated)                                1 
    -------------------------------------------------------  ---------
    ViewCompare (deprecated)                                 1 
    =======================================================  =========
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:class:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder` for General Builder and :py:class:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder` for Report Filter Builder
    """
    
    class ComparisonBaseline():
        """
        Represents a Compare Settings ComparisonBaseline
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Snapshot", " - "
           "TrackedChanges", " - "
        """
        Snapshot = 0  # DrawingCompareSettingsBuilderComparisonBaselineMemberType
        TrackedChanges = 1  # DrawingCompareSettingsBuilderComparisonBaselineMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ChangeSymbolType():
        """
        Represents a Compare Settings Change symbol Types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Circle", " - "
           "TriangleUp", " - "
           "TriangleDown", " - "
           "Square", " - "
           "Hexagon", " - "
        """
        Circle = 0  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
        TriangleUp = 1  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
        TriangleDown = 2  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
        Square = 3  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
        Hexagon = 4  # DrawingCompareSettingsBuilderChangeSymbolTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FontType():
        """
        Represents a Compare Settings Change symbol font types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Solid", " - "
           "Dashed", " - "
           "Phantom", " - "
           "Centerline", " - "
           "Dotted", " - "
           "LongDash", " - "
           "DottedDash", " - "
        """
        Solid = 0  # DrawingCompareSettingsBuilderFontTypeMemberType
        Dashed = 1  # DrawingCompareSettingsBuilderFontTypeMemberType
        Phantom = 2  # DrawingCompareSettingsBuilderFontTypeMemberType
        Centerline = 3  # DrawingCompareSettingsBuilderFontTypeMemberType
        Dotted = 4  # DrawingCompareSettingsBuilderFontTypeMemberType
        LongDash = 5  # DrawingCompareSettingsBuilderFontTypeMemberType
        DottedDash = 6  # DrawingCompareSettingsBuilderFontTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class WidthType():
        """
        Represents a Compare Settings Change symbol width types
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Thin", "Thin"
           "Normal", "Normal"
           "Thick", "Thick"
           "One", "Width One"
           "Two", "Width Two"
           "Three", "Width Three"
           "Four", "Width Four"
           "Five", "Width Five"
           "Six", "Width Six"
           "Seven", "Width Seven"
           "Eight", "Width Eight"
           "Nine", "Width Nine"
        """
        Thin = 0  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Normal = 1  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Thick = 2  # DrawingCompareSettingsBuilderWidthTypeMemberType
        One = 5  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Two = 6  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Three = 7  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Four = 8  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Five = 9  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Six = 10  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Seven = 11  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Eight = 12  # DrawingCompareSettingsBuilderWidthTypeMemberType
        Nine = 13  # DrawingCompareSettingsBuilderWidthTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BaselineForComparison: DrawingCompareSettingsBuilderComparisonBaseline = ...
    """
    Returns or sets  the baseline for comparison 
    
    <hr>
    
    Getter Method
    
    Signature ``BaselineForComparison`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingCompareSettingsBuilderComparisonBaseline` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.BaselineOfComparison` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BaselineForComparison`` 
    
    :param baselineForComparison: 
    :type baselineForComparison: :py:class:`NXOpen.Drawings.DrawingCompareSettingsBuilderComparisonBaseline` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.BaselineOfComparison` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CenterlineCompare: bool = ...
    """
    Returns or sets  the centerline compare 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterlineCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenterlineCompare`` 
    
    :param centerlineCompare: 
    :type centerlineCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns: 
    :rtype: Id 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolLineColorFontWidth` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color: 
    :type color: Id 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolLineColorFontWidth` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CompareTolerance: float = ...
    """
    Returns or sets  the compare tolerance 
    
    <hr>
    
    Getter Method
    
    Signature ``CompareTolerance`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.CompareTolerance` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CompareTolerance`` 
    
    :param compareTolerance: 
    :type compareTolerance: float 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.CompareTolerance` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CrosshatchAreaFillsCompare: bool = ...
    """
    Returns or sets  the crosshatch area fills compare 
    
    <hr>
    
    Getter Method
    
    Signature ``CrosshatchAreaFillsCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CrosshatchAreaFillsCompare`` 
    
    :param crosshatchAreaFillsCompare: 
    :type crosshatchAreaFillsCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumFeatureSymbolCompare: bool = ...
    """
    Returns or sets  the datum feature symbol compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumFeatureSymbolCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumFeatureSymbolCompare`` 
    
    :param datumFeatureSymbolCompare: 
    :type datumFeatureSymbolCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumFeatureSymbolLeaderTerminatorCompare: bool = ...
    """
    Returns or sets  the datum feature symbol leader info compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumFeatureSymbolLeaderTerminatorCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumFeatureSymbolLeaderTerminatorCompare`` 
    
    :param datumFeatureSymbolLeaderTerminatorCompare: 
    :type datumFeatureSymbolLeaderTerminatorCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumFeatureSymbolOriginCompare: bool = ...
    """
    Returns or sets  the datum feature symbol origin compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumFeatureSymbolOriginCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumFeatureSymbolOriginCompare`` 
    
    :param datumFeatureSymbolOriginCompare: 
    :type datumFeatureSymbolOriginCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumFeatureSymbolRetainedStatusCompare: bool = ...
    """
    Returns or sets  the datum feature symbol retained status compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumFeatureSymbolRetainedStatusCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumFeatureSymbolRetainedStatusCompare`` 
    
    :param datumFeatureSymbolRetainedStatusCompare: 
    :type datumFeatureSymbolRetainedStatusCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumFeatureSymbolTextCompare: bool = ...
    """
    Returns or sets  the datum feature symbol text compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumFeatureSymbolTextCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumFeatureSymbolTextCompare`` 
    
    :param datumFeatureSymbolTextCompare: 
    :type datumFeatureSymbolTextCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumTargetCompare: bool = ...
    """
    Returns or sets  the datum target compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumTargetCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumTargetCompare`` 
    
    :param datumTargetCompare: 
    :type datumTargetCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumTargetLeaderTerminatorCompare: bool = ...
    """
    Returns or sets  the datum target leader info compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumTargetLeaderTerminatorCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumTargetLeaderTerminatorCompare`` 
    
    :param datumTargetLeaderTerminatorCompare: 
    :type datumTargetLeaderTerminatorCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumTargetOriginCompare: bool = ...
    """
    Returns or sets  the datum target origin compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumTargetOriginCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumTargetOriginCompare`` 
    
    :param datumTargetOriginCompare: 
    :type datumTargetOriginCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumTargetRetainedStatusCompare: bool = ...
    """
    Returns or sets  the datum target retained status compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumTargetRetainedStatusCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumTargetRetainedStatusCompare`` 
    
    :param datumTargetRetainedStatusCompare: 
    :type datumTargetRetainedStatusCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DatumTargetTextCompare: bool = ...
    """
    Returns or sets  the datum target text compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DatumTargetTextCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DatumTargetTextCompare`` 
    
    :param datumTargetTextCompare: 
    :type datumTargetTextCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DimCompare: bool = ...
    """
    Returns or sets  the dim compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DimCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimCompare`` 
    
    :param dimCompare: 
    :type dimCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DimOriginCompare: bool = ...
    """
    Returns or sets  the dim origin compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DimOriginCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimOriginCompare`` 
    
    :param dimOriginCompare: 
    :type dimOriginCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DimRetainedStatusCompare: bool = ...
    """
    Returns or sets  the dim retained status compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DimRetainedStatusCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimRetainedStatusCompare`` 
    
    :param dimRetainedStatusCompare: 
    :type dimRetainedStatusCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DimSizeCompare: bool = ...
    """
    Returns or sets  the dim size compare 
    
    <hr>
    
    Getter Method
    
    Signature ``DimSizeCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DimSizeCompare`` 
    
    :param dimSizeCompare: 
    :type dimSizeCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    DisplayChangeSymbol: bool = ...
    """
    Returns or sets  the display change symbol 
    
    <hr>
    
    Getter Method
    
    Signature ``DisplayChangeSymbol`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.DisplayChangeSymbol` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``DisplayChangeSymbol`` 
    
    :param displayChangeSymbol: 
    :type displayChangeSymbol: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.DisplayChangeSymbol` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    FcfCompare: bool = ...
    """
    Returns or sets  the fcf compare 
    
    <hr>
    
    Getter Method
    
    Signature ``FcfCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FcfCompare`` 
    
    :param fcfCompare: 
    :type fcfCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    FcfLeaderTerminatorCompare: bool = ...
    """
    Returns or sets  the fcf leader info compare 
    
    <hr>
    
    Getter Method
    
    Signature ``FcfLeaderTerminatorCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FcfLeaderTerminatorCompare`` 
    
    :param fcfLeaderTerminatorCompare: 
    :type fcfLeaderTerminatorCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    FcfOriginCompare: bool = ...
    """
    Returns or sets  the fcf origin compare 
    
    <hr>
    
    Getter Method
    
    Signature ``FcfOriginCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FcfOriginCompare`` 
    
    :param fcfOriginCompare: 
    :type fcfOriginCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    FcfRetainedStatusCompare: bool = ...
    """
    Returns or sets  the fcf retained status compare 
    
    <hr>
    
    Getter Method
    
    Signature ``FcfRetainedStatusCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FcfRetainedStatusCompare`` 
    
    :param fcfRetainedStatusCompare: 
    :type fcfRetainedStatusCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    FcfTextCompare: bool = ...
    """
    Returns or sets  the fcf text compare 
    
    <hr>
    
    Getter Method
    
    Signature ``FcfTextCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``FcfTextCompare`` 
    
    :param fcfTextCompare: 
    :type fcfTextCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    NoteCompare: bool = ...
    """
    Returns or sets  the note compare 
    
    <hr>
    
    Getter Method
    
    Signature ``NoteCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoteCompare`` 
    
    :param noteCompare: 
    :type noteCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    NoteLeaderTerminatorCompare: bool = ...
    """
    Returns or sets  the note leader info compare 
    
    <hr>
    
    Getter Method
    
    Signature ``NoteLeaderTerminatorCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoteLeaderTerminatorCompare`` 
    
    :param noteLeaderTerminatorCompare: 
    :type noteLeaderTerminatorCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    NoteOriginCompare: bool = ...
    """
    Returns or sets  the note origin compare 
    
    <hr>
    
    Getter Method
    
    Signature ``NoteOriginCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoteOriginCompare`` 
    
    :param noteOriginCompare: 
    :type noteOriginCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    NoteRetainedStatusCompare: bool = ...
    """
    Returns or sets  the note retained status compare 
    
    <hr>
    
    Getter Method
    
    Signature ``NoteRetainedStatusCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoteRetainedStatusCompare`` 
    
    :param noteRetainedStatusCompare: 
    :type noteRetainedStatusCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    NoteTextCompare: bool = ...
    """
    Returns or sets  the note text compare 
    
    <hr>
    
    Getter Method
    
    Signature ``NoteTextCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``NoteTextCompare`` 
    
    :param noteTextCompare: 
    :type noteTextCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    PartListCompare: bool = ...
    """
    Returns or sets  the part list compare 
    
    <hr>
    
    Getter Method
    
    Signature ``PartListCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``PartListCompare`` 
    
    :param partListCompare: 
    :type partListCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    RestartNumbers: bool = ...
    """
    Returns or sets  the restart numbers 
    
    <hr>
    
    Getter Method
    
    Signature ``RestartNumbers`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.RestartIDNumbersWithNewReport` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RestartNumbers`` 
    
    :param restartNumbers: 
    :type restartNumbers: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.RestartIDNumbersWithNewReport` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SheetCompare: bool = ...
    """
    Returns or sets  the sheet compare 
    
    <hr>
    
    Getter Method
    
    Signature ``SheetCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SheetCompare`` 
    
    :param sheetCompare: 
    :type sheetCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolCompare: bool = ...
    """
    Returns or sets  the symbol compare 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolCompare`` 
    
    :param symbolCompare: 
    :type symbolCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolFont: DrawingCompareSettingsBuilderFontType = ...
    """
    Returns or sets  the symbol font 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolFont`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingCompareSettingsBuilderFontType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolLineColorFontWidth` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolFont`` 
    
    :param symbolFont: 
    :type symbolFont: :py:class:`NXOpen.Drawings.DrawingCompareSettingsBuilderFontType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolLineColorFontWidth` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolLeaderTerminatorCompare: bool = ...
    """
    Returns or sets  the symbol leader info compare 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolLeaderTerminatorCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolLeaderTerminatorCompare`` 
    
    :param symbolLeaderTerminatorCompare: 
    :type symbolLeaderTerminatorCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolOriginCompare: bool = ...
    """
    Returns or sets  the symbol origin compare 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolOriginCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolOriginCompare`` 
    
    :param symbolOriginCompare: 
    :type symbolOriginCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolRetainedStatusCompare: bool = ...
    """
    Returns or sets  the symbol retained status compare 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolRetainedStatusCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolRetainedStatusCompare`` 
    
    :param symbolRetainedStatusCompare: 
    :type symbolRetainedStatusCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolSize: float = ...
    """
    Returns or sets  the symbol size 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolSize` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolSize`` 
    
    :param symbolSize: 
    :type symbolSize: float 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolSize` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolTextCompare: bool = ...
    """
    Returns or sets  the symbol text compare 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolTextCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolTextCompare`` 
    
    :param symbolTextCompare: 
    :type symbolTextCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolType: DrawingCompareSettingsBuilderChangeSymbolType = ...
    """
    Returns or sets  the symbol type 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingCompareSettingsBuilderChangeSymbolType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolType` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolType`` 
    
    :param symbolType: 
    :type symbolType: :py:class:`NXOpen.Drawings.DrawingCompareSettingsBuilderChangeSymbolType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolType` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    SymbolWidth: DrawingCompareSettingsBuilderWidthType = ...
    """
    Returns or sets  the symbol width 
    
    <hr>
    
    Getter Method
    
    Signature ``SymbolWidth`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DrawingCompareSettingsBuilderWidthType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolLineColorFontWidth` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SymbolWidth`` 
    
    :param symbolWidth: 
    :type symbolWidth: :py:class:`NXOpen.Drawings.DrawingCompareSettingsBuilderWidthType` 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesGeneralBuilder.ChangeSymbolLineColorFontWidth` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    TableCompare: bool = ...
    """
    Returns or sets  the table compare 
    
    <hr>
    
    Getter Method
    
    Signature ``TableCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TableCompare`` 
    
    :param tableCompare: 
    :type tableCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    ViewCompare: bool = ...
    """
    Returns or sets  the view compare 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewCompare`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.GetReportFilterStatus` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ViewCompare`` 
    
    :param viewCompare: 
    :type viewCompare: bool 
    
    .. versionadded:: NX7.5.0
    
    .. deprecated::  NX11.0.0
       Use :py:meth:`NXOpen.Drawings.TrackDrawingChangesReportFilterBuilder.SetReportFilterStatus` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Null: DrawingCompareSettingsBuilder = ...  # unknown typename


class DraftingPointCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.DraftingPoint`s.  
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.Drawings.DraftingBody`
    
    .. versionadded:: NX12.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DraftingPoint:
        """
        Finds the :py:class:`NXOpen.Drawings.DraftingPoint` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of
        the software. However newer versions of the software should find the same object when
        FindObject is passed older versions of its journal identifier. In general, this method
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the DraftingPoint to be found  
        :type journalIdentifier: str 
        :returns:  DraftingPoint with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.DraftingPoint` 
        
        .. versionadded:: NX12.0.0
        
        License requirements: None.
        """
        ...
    


class DrawingRegion(NXOpen.DisplayableObject):
    """
    Represents a Drawing Region   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.DrawingRegionBuilder`
    
    .. versionadded:: NX8.0.0
    """
    Null: DrawingRegion = ...  # unknown typename


class ArrowDirectionTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ArrowDirectionType():
    """
    the arrow direction type 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "OutofSheet", "Out of Sheet"
       "IntoSheet", " - "
    """
    OutofSheet = 0  # ArrowDirectionTypeMemberType
    IntoSheet = 1  # ArrowDirectionTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ProjectedViewBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`NXOpen.Drawings.ProjectedView` builder   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateProjectedViewBuilder`
    
    Default values.
    
    ======================================================  ================
    Property                                                Value
    ======================================================  ================
    Placement.AlignmentMethod                               Infer 
    ------------------------------------------------------  ----------------
    Placement.AlignmentOption                               ToView 
    ------------------------------------------------------  ----------------
    SecondaryComponents.ObjectType                          PrimaryGeometry 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.AngleSetting.Angle.Value         0 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.AngleSetting.Associative         0 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.AngleSetting.EvaluationPlane     DrawingSheet 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.Scale.Denominator                1.0 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.Scale.Numerator                  1.0 
    ------------------------------------------------------  ----------------
    Style.ViewStyleGeneral.Scale.ScaleType                  Ratio 
    ------------------------------------------------------  ----------------
    Style.ViewStyleOrientation.HingeLine.ReverseDirection   false 
    ------------------------------------------------------  ----------------
    Style.ViewStyleOrientation.HingeLine.VectorOption       Inferred 
    ------------------------------------------------------  ----------------
    Style.ViewStyleOrientation.Ovt.AssociativeOrientation   0 
    ======================================================  ================
    
    .. versionadded:: NX6.0.0
    """
    HiddenObjects: HiddenObjectsBuilder = ...
    """
    Returns  the list of objects to not show in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    NonSectionedObjects: HiddenObjectsBuilder = ...
    """
    Returns  the list of objects to not section in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``NonSectionedObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Parent: ParentViewBuilder = ...
    """
    Returns  the parent view 
    
    <hr>
    
    Getter Method
    
    Signature ``Parent`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ParentViewBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Placement: ViewPlacementBuilder = ...
    """
    Returns  the view position 
    
    <hr>
    
    Getter Method
    
    Signature ``Placement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SecondaryComponents: DraftingComponentSelectionBuilder = ...
    """
    Returns  the list of secondary components in the view 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryComponents`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.DraftingComponentSelectionBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    Style: ViewStyleBuilder = ...
    """
    Returns  the view style 
    
    <hr>
    
    Getter Method
    
    Signature ``Style`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: ProjectedViewBuilder = ...  # unknown typename


class EditViewSettingsBuilder(NXOpen.Drafting.BaseEditSettingsBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.EditViewSettingsBuilder` builder.  
    
    It provides an interface for editing view style settings.
    This can be used to change one specific view or all views. 
    To create a new instance of this class, use :py:meth:`NXOpen.Drafting.SettingsManager.CreateDrawingEditViewSettingsBuilder`
    
    Default values.
    
    ==========================================================  =============
    Property                                                    Value
    ==========================================================  =============
    ViewStyle.ViewStyleGeneral.AngleSetting.Angle.Value         0 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleGeneral.AngleSetting.Associative         0 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleGeneral.AngleSetting.EvaluationPlane     DrawingSheet 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleGeneral.Scale.Denominator                1.0 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleGeneral.Scale.Numerator                  1.0 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleGeneral.Scale.ScaleType                  Ratio 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleOrientation.HingeLine.ReverseDirection   false 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleOrientation.HingeLine.VectorOption       Inferred 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleOrientation.Ovt.AssociativeOrientation   0 
    ==========================================================  =============
    
    .. versionadded:: NX9.0.0
    """
    
    def InheritSettingsFromSelectedObjects(self, selectedObject: DraftingView) -> None:
        """
        Inherit Settings From Selected Objects 
        
        Signature ``InheritSettingsFromSelectedObjects(selectedObject)`` 
        
        :param selectedObject:  The selected drafting view instance object.                                                                             None is not allowed.  
        :type selectedObject: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit Settings From Customer Default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit Settings From Preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    ViewCommonViewLabel: ViewCommonViewLabelBuilder = ...
    """
    Returns  the view common view label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewCommonViewLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.ViewStyleBuilder.ViewCommonViewLabel` instead.
    
    License requirements: None.
    """
    ViewDetailLabel: ViewDetailLabelBuilder = ...
    """
    Returns  the view detail label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewDetailLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewDetailLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewLabel: ViewLabelBuilder = ...
    """
    Returns  the view label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewProjectedLabel: ViewProjectedLabelBuilder = ...
    """
    Returns  the view projected label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewProjectedLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewProjectedLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewSectionLabel: ViewSectionLabelBuilder = ...
    """
    Returns  the view section label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewSectionLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSectionLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewStyle: ViewStyleBuilder = ...
    """
    Returns  the view style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: EditViewSettingsBuilder = ...  # unknown typename


class OrderManager():
    """
    Represents an object that manages orders.  
    
    An order represents the way 2D components are presented in the sketch node in the part navigator.
    There are two types of orders, system and user-defined. System orders cannot be modified.
    To obtain an instance of this class, refer to :py:class:`NXOpen.Layout2d.ComponentCollection`
    
    .. versionadded:: NX11.0.0
    """
    
    def GetAvailableOrdersNames(self, parentObject: NXOpen.Sketch) -> 'list[str]':
        """
        Gets all available orders names for specified sketch parent 
        
        Signature ``GetAvailableOrdersNames(parentObject)`` 
        
        :param parentObject: 
        :type parentObject: :py:class:`NXOpen.Sketch` 
        :returns: 
        :rtype: list of str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def IsSystemOrder(self, parentObject: NXOpen.Sketch, orderName: str) -> bool:
        """
        Validates the order matching the specified name is system order   
        
        Signature ``IsSystemOrder(parentObject, orderName)`` 
        
        :param parentObject: 
        :type parentObject: :py:class:`NXOpen.Sketch` 
        :param orderName: 
        :type orderName: str 
        :returns: 
        :rtype: bool 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def GetCurrentOrderName(self, parentObject: NXOpen.Sketch) -> str:
        """
        Gets the current applied order name  
        
        Signature ``GetCurrentOrderName(parentObject)`` 
        
        :param parentObject: 
        :type parentObject: :py:class:`NXOpen.Sketch` 
        :returns: 
        :rtype: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def ApplyOrder(self, parentObject: NXOpen.Sketch, orderName: str) -> None:
        """
        Applies the order matching the specified name 
        
        Signature ``ApplyOrder(parentObject, orderName)`` 
        
        :param parentObject: 
        :type parentObject: :py:class:`NXOpen.Sketch` 
        :param orderName: 
        :type orderName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def CreateNewOrder(self, parentObject: NXOpen.Sketch, newOrderName: str, objectsInOrder: 'list[NXOpen.Layout2d.Component]') -> None:
        """
        Creates an order of the 2D Components provided in the list 
        
        Signature ``CreateNewOrder(parentObject, newOrderName, objectsInOrder)`` 
        
        :param parentObject: 
        :type parentObject: :py:class:`NXOpen.Sketch` 
        :param newOrderName: 
        :type newOrderName: str 
        :param objectsInOrder:  Array of objects to be reordered   
        :type objectsInOrder: list of :py:class:`NXOpen.Layout2d.Component` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def RenameOrder(self, parentObject: NXOpen.Sketch, orderName: str, newOrderName: str) -> None:
        """
        Renames the order matching the specified name with the new name provided 
        
        Signature ``RenameOrder(parentObject, orderName, newOrderName)`` 
        
        :param parentObject: 
        :type parentObject: :py:class:`NXOpen.Sketch` 
        :param orderName: 
        :type orderName: str 
        :param newOrderName: 
        :type newOrderName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def DeleteOrder(self, parentObject: NXOpen.Sketch, newOrderName: str) -> None:
        """
        Delete the order matching the specified name 
        
        Signature ``DeleteOrder(parentObject, newOrderName)`` 
        
        :param parentObject: 
        :type parentObject: :py:class:`NXOpen.Sketch` 
        :param newOrderName: 
        :type newOrderName: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    
    
    def Reorder(self, parentObject: NXOpen.Sketch, objectsInOrder: 'list[NXOpen.Layout2d.Component]') -> None:
        """
        Updates the current order based on the provided list of 2D components if the order is user-defined, and creates a new order otherwide 
        
        Signature ``Reorder(parentObject, objectsInOrder)`` 
        
        :param parentObject: 
        :type parentObject: :py:class:`NXOpen.Sketch` 
        :param objectsInOrder:  Array of objects to be reordered   
        :type objectsInOrder: list of :py:class:`NXOpen.Layout2d.Component` 
        
        .. versionadded:: NX11.0.0
        
        License requirements: nx_layout ("NX Layout")
        """
        ...
    


class SketchedSteppedSectionLine(BaseSteppedSectionLine):
    """
    A Sketched Simple or Stepped Section Line is sketch based section line.  
    
    Sketched Simple Section Line provides one cut to form a view that allows you
    to see the inside of a part. The view is created by dividing the part
    with a single cutting plane.
    
    Stepped Section Line lets you create a section view which contains
    linear steps. You can make these steps by indicating multiple cuts,
    bends, and arrow segments. All bend and arrow segments are created
    perpendicular to cut segments. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SketchSectionLineBuilder`
    
    .. versionadded:: NX10.0.0
    """
    Null: SketchedSteppedSectionLine = ...  # unknown typename


class BaseViewStyle(NXOpen.Preferences.IBaseViewPreferences):
    """
    Represents set of Base View Style Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.BaseView`
    
    .. versionadded:: NX5.0.0
    """
    
    def SetFacetedRepresentation(self, isFacetedRepresentation: bool) -> None:
        """
        The status of faceted representation, if True the clipping bounds are inherited, else 
        the imported model view is placed on the drawing with an Automatic Rectangular Boundary.  
        
        Signature ``SetFacetedRepresentation(isFacetedRepresentation)`` 
        
        :param isFacetedRepresentation: 
        :type isFacetedRepresentation: bool 
        
        .. versionadded:: NX5.0.0
        
        .. deprecated::  NX8.5.1
           Use :py:meth:`Drawings.GeneralViewStyle.ViewRepresentation` instead.
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetInheritClippingBoundary(self, isInheritClippingBoundary: bool) -> None:
        """
        The status of inherit clipping boundary, if True the model view's 
        clipping boundary are inherited when model view is imported onto the drawing, else 
        the imported model view is placed on the drawing with an Automatic Rectangular Boundary.  
        
        Signature ``SetInheritClippingBoundary(isInheritClippingBoundary)`` 
        
        :param isInheritClippingBoundary:  Inherit XY clipping boundaries of model  
        :type isInheritClippingBoundary: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetTransferAnnotation(self, isTransferAnnotation: bool) -> None:
        """
        The status of transfer annotation controls whether or not annotations created in 
        a model view are transferred to the drawing when a view is imported.  
        
        Signature ``SetTransferAnnotation(isTransferAnnotation)`` 
        
        :param isTransferAnnotation: 
        :type isTransferAnnotation: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def SetAssemblyArrangement(self, config: str) -> None:
        """
        Sets the configuration for the arrangement in assembly after an 
        arrangement part file is loaded.  
        
        Signature ``SetAssemblyArrangement(config)`` 
        
        :param config:  name of the configuration for the arrangement 
        :type config: str 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def LoadModelFromPart(self, loadPartName: str, loadPartToggle: bool) -> None:
        """
        To load the assemblies arrangement part file.  
        
        If the logical argument is True, 
        the part would be loaded.
        
        Signature ``LoadModelFromPart(loadPartName, loadPartToggle)`` 
        
        :param loadPartName:  name of the loaded part 
        :type loadPartName: str 
        :param loadPartToggle:  True or False status for loading the part. 
        :type loadPartToggle: bool 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class SheetDraftingViewCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.DraftingView`s.  
    
    Use :py:meth:`NXOpen.Drawings.DrawingSheet.SheetDraftingViews` to get the instance of this class.
    
    .. versionadded:: NX3.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, journalIdentifier: str) -> DraftingView:
        """
        Finds the :py:class:`NXOpen.Drawings.DraftingView` with the given identifier as recorded in a journal.  
        
        An object may not return the same value as its JournalIdentifier in different versions of 
        the software. However newer versions of the software should find the same object when 
        FindObject is passed older versions of its journal identifier. In general, this method 
        should not be used in handwritten code and exists to support record and playback of journals.
        
        An exception will be thrown if no object can be found with the given journal identifier.  
        
        Signature ``FindObject(journalIdentifier)`` 
        
        :param journalIdentifier:  Identifier of the drafting view to be found  
        :type journalIdentifier: str 
        :returns:  View with this identifier  
        :rtype: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX3.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateBaseView(self, modelView: NXOpen.ModelingView, drawingReferencePoint: NXOpen.Point3d, viewScale: float, inheritClippingBoundry: bool) -> BaseView:
        """
        For the selected part adds the base view as well as returns the reference to :py:class:`NXOpen.Drawings.DraftingView`.  
        
        An imported model view (base view) determines orthographic space on the drawing and is used as a reference to establish the alignment 
        and scale for all subsequent projected views. 
        
        Signature ``CreateBaseView(modelView, drawingReferencePoint, viewScale, inheritClippingBoundry)`` 
        
        :param modelView:  Modeling View to be import as base view.  
        :type modelView: :py:class:`NXOpen.ModelingView` 
        :param drawingReferencePoint:  view origin(location)  
        :type drawingReferencePoint: :py:class:`NXOpen.Point3d` 
        :param viewScale:  view scale  
        :type viewScale: float 
        :param inheritClippingBoundry:  if true inherit xyclip  
        :type inheritClippingBoundry: bool 
        :returns:  Base view  
        :rtype: :py:class:`NXOpen.Drawings.BaseView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def CreateProjectedView(self, parentView: DraftingView, drawingReferencePoint: NXOpen.Point3d) -> ProjectedView:
        """
        Lets you add a projected view (Orthoraphic View) for the selected parent view. 
        
        Signature ``CreateProjectedView(parentView, drawingReferencePoint)`` 
        
        :param parentView:  Selected Parent view  
        :type parentView: :py:class:`NXOpen.Drawings.DraftingView` 
        :param drawingReferencePoint:  view origin(location)  
        :type drawingReferencePoint: :py:class:`NXOpen.Point3d` 
        :returns:  Projected view  
        :rtype: :py:class:`NXOpen.Drawings.ProjectedView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def CreateProjectedView(self, parentView: DraftingView, drawingReferencePoint: NXOpen.Point3d, hingeLine: NXOpen.Direction) -> ProjectedView:
        """
        Lets you add a projected view (A View) for the selected parent view. 
        
        Signature ``CreateProjectedView(parentView, drawingReferencePoint, hingeLine)`` 
        
        :param parentView:  Selected Parent view  
        :type parentView: :py:class:`NXOpen.Drawings.DraftingView` 
        :param drawingReferencePoint:  view origin(location)  
        :type drawingReferencePoint: :py:class:`NXOpen.Point3d` 
        :param hingeLine:  hinge line vector  
        :type hingeLine: :py:class:`NXOpen.Direction` 
        :returns:  Projected view  
        :rtype: :py:class:`NXOpen.Drawings.ProjectedView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def CreateProjectedView(self, parentView: DraftingView, drawingReferencePoint: NXOpen.Point3d, reverseDirection: bool) -> ProjectedView:
        """
        Lets you add a projected view (A View) for the selected parent view. 
        
        Signature ``CreateProjectedView(parentView, drawingReferencePoint, reverseDirection)`` 
        
        :param parentView:  Selected Parent view  
        :type parentView: :py:class:`NXOpen.Drawings.DraftingView` 
        :param drawingReferencePoint:  view origin(location)  
        :type drawingReferencePoint: :py:class:`NXOpen.Point3d` 
        :param reverseDirection:  reverse direction of projection  
        :type reverseDirection: bool 
        :returns:  Projected view  
        :rtype: :py:class:`NXOpen.Drawings.ProjectedView` 
        
        .. versionadded:: NX5.0.1
        
        License requirements: None.
        """
        ...
    
    
    def DeleteView(self, currentView: DraftingView) -> None:
        """
        Lets you delete the view 
        
        Signature ``DeleteView(currentView)`` 
        
        :param currentView:  View to be deleted  
        :type currentView: :py:class:`NXOpen.Drawings.DraftingView` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    


class OvtBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.OvtBuilder`
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    AssociativeOrientation: bool = ...
    """
    Returns or sets  the associative orientation that specifies whether or not the view 
    will be associative to the specified plane and/or X direction 
    
    <hr>
    
    Getter Method
    
    Signature ``AssociativeOrientation`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``AssociativeOrientation`` 
    
    :param associativeOrientation: 
    :type associativeOrientation: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    NormalDirection: NXOpen.Direction = ...
    """
    Returns or sets  the vector that represents the normal direction for the view to be created or edited 
    
    <hr>
    
    Getter Method
    
    Signature ``NormalDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``NormalDirection`` 
    
    :param normalDirection: 
    :type normalDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    XDirection: NXOpen.Direction = ...
    """
    Returns or sets  the x direction vector for the view to be created or edited 
    
    <hr>
    
    Getter Method
    
    Signature ``XDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``XDirection`` 
    
    :param xDirection: 
    :type xDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: OvtBuilder = ...  # unknown typename


class OrientationViewStyle(NXOpen.Preferences.IOrientationViewPreferences):
    """
    Represents set of Orientation View Style Preferences applicable to drafting views.  
    
    To obtain an instance of this class use :py:meth:`Drawings.ViewStyle.Orientation`
    
    .. versionadded:: NX5.0.0
    """
    
    def ReverseRotationVector(self) -> None:
        """
        Reverse the rotation vector.  
        
        The direction of this vector 
        determines how the view is rendered. 
        
        Signature ``ReverseRotationVector()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def ReverseHingeLine(self) -> None:
        """
        Reverse the hinge line.  
        
        The direction of this vector 
        determines how the view is rendered. 
        
        Signature ``ReverseHingeLine()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def Restore(self) -> None:
        """
        Removes the associativity to the defined plane (if it existed) and returns 
        the member view to its orientation with the model with respect to the Absolute 
        Coordinate System.  
        
        Signature ``Restore()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def OrientView(self, matrix: NXOpen.Matrix3x3) -> None:
        """
        Orients the view.  
        
        Signature ``OrientView(matrix)`` 
        
        :param matrix:  Orientation relative to the absolute coordinate system.                                    Must be orthonormal.  
        :type matrix: :py:class:`NXOpen.Matrix3x3` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    HingeLine: NXOpen.Direction = ...
    """
    Returns or sets  the hinge line for an existing auxillary view.  
    
    <hr>
    
    Getter Method
    
    Signature ``HingeLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HingeLine`` 
    
    :param hingeLine: 
    :type hingeLine: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RotationPlane: NXOpen.Xform = ...
    """
    Returns or sets  the rotation plane.  
    
    <hr>
    
    Getter Method
    
    Signature ``RotationPlane`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Xform` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``RotationPlane`` 
    
    :param plane: 
    :type plane: :py:class:`NXOpen.Xform` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    RotationXDirection: NXOpen.Direction = ...
    """
    Returns or sets  the rotation in x-direction for the drawing member view which stays 
    parallel to the x-axis drawing coordinate.  
    
    The orientation of the view is 
    associative to the x-direction.
    
    <hr>
    
    Getter Method
    
    Signature ``RotationXDirection`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    
    <hr>
    
    Setter Method
    
    Signature ``RotationXDirection`` 
    
    :param xDirection: 
    :type xDirection: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX5.0.0
    
    License requirements: drafting ("DRAFTING")
    """


class ViewStyleProjectedBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the PROJECTED tab on the View Style Dialog (Drawings.  
    
    ViewStyleProjectedBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Align: bool = ...
    """
    Returns or sets  the projected view style align toggle on the PROJECTED tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Align`` 
    
    :returns:  Returns the align toggle value that is on the projected sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Align`` 
    
    :param alignToggle:  Sets a new align toggle value on the projected sub-builder  
    :type alignToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Gdt: bool = ...
    """
    Returns or sets  the projected view style gdt toggle on the PROJECTED tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Gdt`` 
    
    :returns:  Returns the gdt toggle value that is on the projected sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Gdt`` 
    
    :param gdtToggle:  Sets a new gdt toggle value on the projected sub-builder  
    :type gdtToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Offset: bool = ...
    """
    Returns or sets  the projected view style offset toggle on the PROJECTED tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Offset`` 
    
    :returns:  Returns the offset toggle value that is on the projected sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Offset`` 
    
    :param offsetToggle:  Sets a new offset toggle value on the projected sub-builder  
    :type offsetToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Orient: bool = ...
    """
    Returns or sets  the projected view style orient toggle on the PROJECTED tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Orient`` 
    
    :returns:  Returns the orient toggle value that is on the projected sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Orient`` 
    
    :param orientToggle:  Sets a new orient toggle value on the projected sub-builder  
    :type orientToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Scale: bool = ...
    """
    Returns or sets  the projected view style scale toggle on the PROJECTED tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns:  Returns the scale toggle value that is on the projected sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Scale`` 
    
    :param scaleToggle:  Sets a new scale toggle value on the projected sub-builder  
    :type scaleToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Sheet: bool = ...
    """
    Returns or sets  the projected view style sheet toggle on the PROJECTED tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Sheet`` 
    
    :returns:  Returns the sheet toggle value that is on the projected sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Sheet`` 
    
    :param sheetToggle:  Sets a new sheet toggle value on the projected sub-builder  
    :type sheetToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleProjectedBuilder = ...  # unknown typename


class OrientedSectionLineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.OrientedSectionLineBuilder`.  
    
    This class is used to create or edit a
    :py:class:`NXOpen.Drawings.OrientedSectionLine`. 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    CutLocation3D: NXOpen.Point = ...
    """
    Returns or sets  the 3D cut location 
    
    <hr>
    
    Getter Method
    
    Signature ``CutLocation3D`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CutLocation3D`` 
    
    :param cutLocation3D: 
    :type cutLocation3D: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: drafting ("DRAFTING")
    """
    EndLocation1: NXOpen.Point = ...
    """
    Returns or sets  the end location 1 which determines the position of the
    first arrow segment in the section line.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation1`` 
    
    :param endLocation1: 
    :type endLocation1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: drafting ("DRAFTING")
    """
    EndLocation2: NXOpen.Point = ...
    """
    Returns or sets  the end location 2 which determines the position of the
    second arrow segment in the section line 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation2`` 
    
    :param endLocation2: 
    :type endLocation2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       This API is not supported yet and should not be used.
    
    License requirements: drafting ("DRAFTING")
    """
    Null: OrientedSectionLineBuilder = ...  # unknown typename


class PictorialSectionLine(SteppedSectionLine):
    """
    A Pictorial Simple or Pictorial Stepped Section Line.  
    
    This section line is used to create either a simple or stepped
    section cut from a pictorial parent member view. The section line
    displays as a pictorial section line.
    
    Pictorial Simple Section Line provides one cut to form a view that
    allows you to see the inside of a part. The view is created by
    dividing the part with a single cutting plane.
    
    Pictorial Stepped Section Line lets you create a section view which
    contains linear steps. You can make these steps by indicating multiple
    cuts, bends, and arrow segments. All bend and arrow segments are
    created perpendicular to cut segments. 
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.SectionLineBuilder`
    
    .. versionadded:: NX6.0.0
    """
    Null: PictorialSectionLine = ...  # unknown typename


class HingeLineBuilderHingelineMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class HingeLineBuilderHingeline():
    """
    Specifies the hinge line vector option 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inferred", "The option to infer a hinge line based on parent, child view position"
       "Defined", "The option for selecting hinge line using vector construction tools"
    """
    Inferred = 0  # HingeLineBuilderHingelineMemberType
    Defined = 1  # HingeLineBuilderHingelineMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class HingeLineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a Drawings.  
    
    HingeLineBuilder. A hinge line is a line displayed on the parent 
    view and used as a reference to rotate a child view in proper orthographic space.
    
    .. versionadded:: NX6.0.0
    """
    
    class Hingeline():
        """
        Specifies the hinge line vector option 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inferred", "The option to infer a hinge line based on parent, child view position"
           "Defined", "The option for selecting hinge line using vector construction tools"
        """
        Inferred = 0  # HingeLineBuilderHingelineMemberType
        Defined = 1  # HingeLineBuilderHingelineMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Associative: bool = ...
    """
    Returns or sets  the infer associative setting 
    
    <hr>
    
    Getter Method
    
    Signature ``Associative`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Associative`` 
    
    :param associative: 
    :type associative: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ReverseDirection: bool = ...
    """
    Returns or sets  the reverse direction setting 
    
    <hr>
    
    Getter Method
    
    Signature ``ReverseDirection`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReverseDirection`` 
    
    :param reverseDirection: 
    :type reverseDirection: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    SpecifyVector: NXOpen.Direction = ...
    """
    Returns or sets  the direction for the hinge line 
    
    <hr>
    
    Getter Method
    
    Signature ``SpecifyVector`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SpecifyVector`` 
    
    :param specifyVector: 
    :type specifyVector: :py:class:`NXOpen.Direction` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    VectorOption: HingeLineBuilderHingeline = ...
    """
    Returns or sets  the vector option: Inferred or Defined 
    
    <hr>
    
    Getter Method
    
    Signature ``VectorOption`` 
    
    :returns:  The vector option  
    :rtype: :py:class:`NXOpen.Drawings.HingeLineBuilderHingeline` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VectorOption`` 
    
    :param vectorOption: 
    :type vectorOption: :py:class:`NXOpen.Drawings.HingeLineBuilderHingeline` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: HingeLineBuilder = ...  # unknown typename


class ViewBreak(NXOpen.NXObject):
    """
    ViewBreak - defines the portion of a view that gets hidden to
    produce a broken view   
    
    To create or edit an instance of this class, use :py:class:`NXOpen.Drawings.BrokenViewBuilder`
    
    .. versionadded:: NX7.5.0
    """
    
    def GetViewBreakDisplayableObjectsAndOffsets(self) -> tuple:
        """
        Returns an array of displayable object and theirs offsets representing the view break in the view.  
        
        Signature ``GetViewBreakDisplayableObjectsAndOffsets()`` 
        
        :returns: a tuple 
        :rtype: A tuple consisting of (offsetPosition, displayObjects). offsetPosition is a list of :py:class:`NXOpen.Vector3d`. displayObjects is a list of :py:class:`NXOpen.DisplayableObject`. 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    Null: ViewBreak = ...  # unknown typename


class ShipDraftingViewLinesBuilderList(NXOpen.TaggedObject):
    """
    Represents a list of objects.  
    
    To create a new instance of this class, use :py:meth:`NXOpen.Part.CreateObjectList`
    
    .. versionadded:: NX4.0.0
    """
    
    @typing.overload
    def Append(self, objects: 'list[ShipDraftingViewLinesBuilder]') -> None:
        """
        Appends a set of objects to the list
        
        Signature ``Append(objects)`` 
        
        :param objects:  items to append  
        :type objects: list of :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Append(self, object: ShipDraftingViewLinesBuilder) -> None:
        """
        Appends an object to the list
        
        Signature ``Append(object)`` 
        
        :param object:  item to append  
        :type object: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def ClearIndex(self, deleteIdx: int) -> None:
        """
        Deletes the item at the index specified.  
        
        The size of the list does
        *   not change, but the item at this index is set to NULL.
        
        Signature ``ClearIndex(deleteIdx)`` 
        
        :param deleteIdx:  index of item to be deleted  
        :type deleteIdx: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindIndex(self, obj: ShipDraftingViewLinesBuilder) -> int:
        """
        Finds the index where the input object appears.  
        
        If it does not appear,
        *   -1 is returned.
        
        Signature ``FindIndex(obj)`` 
        
        :param obj:  Object to find index for  
        :type obj: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        :returns:  index of input object, -1 if not on list  
        :rtype: int 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    def FindItem(self, index: int) -> ShipDraftingViewLinesBuilder:
        """
        Returns the object at the input index.  
        
        May be NULL.
        
        Signature ``FindItem(index)`` 
        
        :param index:  index of object to return  
        :type index: int 
        :returns:  object found at input index  
        :rtype: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX4.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Erase(self, index: int) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, index: int, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object at the given position from the list.
        The list is shifted so that there isn't a null where the object used to be. 
        
        Signature ``Erase(index, deleteOption)`` 
        
        :param index:  index of item to be removed from the list  
        :type index: int 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ShipDraftingViewLinesBuilder) -> None:
        """
        Erases the object from the list, but does not delete the object.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Erase(self, obj: ShipDraftingViewLinesBuilder, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Erases the object from the list.
        The list is shifted so that there isn't a null where the object used to exist. 
        
        Signature ``Erase(obj, deleteOption)`` 
        
        :param obj:  object to be removed from the list  
        :type obj: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        :param deleteOption:  whether to delete the object  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Clear(self) -> None:
        """
        Clears the entire list without deleting the objects.  The caller is responsible for 
        accounting for these objects.  If they are not used or deleted by the time the part is 
        closed (in other words, leaked) an error will occur 
        
        Signature ``Clear()`` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Clear(self, deleteOption: NXOpen.ObjectListDeleteOption) -> None:
        """
        Clears the entire list 
        
        Signature ``Clear(deleteOption)`` 
        
        :param deleteOption:  whether to delete the objects when removing them  
        :type deleteOption: :py:class:`NXOpen.ObjectListDeleteOption` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def GetContents(self) -> 'list[ShipDraftingViewLinesBuilder]':
        """
        Gets the contents of the entire list  
        
        Signature ``GetContents()`` 
        
        :returns:  The list contents  
        :rtype: list of :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def SetContents(self, objects: 'list[ShipDraftingViewLinesBuilder]') -> None:
        """
        Sets the contents of the entire list.  
        
        This overwrites the previous contents of this list, 
        but does not delete any objects that were originally on the list.
        
        Signature ``SetContents(objects)`` 
        
        :param objects:  The list contents  
        :type objects: list of :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    @typing.overload
    def Swap(self, index1: int, index2: int) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(index1, index2)`` 
        
        :param index1:  location of the first item  
        :type index1: int 
        :param index2:  location of the second item  
        :type index2: int 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    @typing.overload
    def Swap(self, object1: ShipDraftingViewLinesBuilder, object2: ShipDraftingViewLinesBuilder) -> None:
        """
        Exchanges the position of two objects inside the list.
        The first object is placed where the second used to be,
        and second object where the first used to be. 
        
        Signature ``Swap(object1, object2)`` 
        
        :param object1:  first item  
        :type object1: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        :param object2:  second item  
        :type object2: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def Insert(self, location: int, object: ShipDraftingViewLinesBuilder) -> None:
        """
        Inserts an object at the specified location 
        
        Signature ``Insert(location, object)`` 
        
        :param location:  location at which to insert the object  
        :type location: int 
        :param object:  object to be inserted  
        :type object: :py:class:`NXOpen.Drawings.ShipDraftingViewLinesBuilder` 
        
        .. versionadded:: NX5.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToTop(self, index: int) -> None:
        """
        Move object at the specified location to the top of the list.  
        
        Signature ``MoveToTop(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    
    def MoveToBottom(self, index: int) -> None:
        """
        Move object at the specified location to the bottom of the list.  
        
        Signature ``MoveToBottom(index)`` 
        
        :param index:  location of the item  
        :type index: int 
        
        .. versionadded:: NX10.0.0
        
        License requirements: None.
        """
        ...
    
    Length: int = ...
    """
    Returns  the length of the list 
    
    <hr>
    
    Getter Method
    
    Signature ``Length`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX5.0.0
    
    License requirements: None.
    """
    Null: ShipDraftingViewLinesBuilderList = ...  # unknown typename


class ViewScaleBuilderTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewScaleBuilderType():
    """
    The view scale type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Ratio", "determine scale from numerator / denominator"
       "Expression", "determine scale from expression"
    """
    Ratio = 0  # ViewScaleBuilderTypeMemberType
    Expression = 1  # ViewScaleBuilderTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewScaleBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the View Scale (Drawings.  
    
    ViewScaleBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    class Type():
        """
        The view scale type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Ratio", "determine scale from numerator / denominator"
           "Expression", "determine scale from expression"
        """
        Ratio = 0  # ViewScaleBuilderTypeMemberType
        Expression = 1  # ViewScaleBuilderTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Denominator: float = ...
    """
    Returns or sets  the scale denominator 
    
    <hr>
    
    Getter Method
    
    Signature ``Denominator`` 
    
    :returns:  returns the denominator for the view's scale  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Denominator`` 
    
    :param denominator:  sets the denominator for the view's scale  
    :type denominator: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Expression: NXOpen.Expression = ...
    """
    Returns or sets  the scale expression 
    
    <hr>
    
    Getter Method
    
    Signature ``Expression`` 
    
    :returns:  returns the expression used to determine the view scale.  It will only be used if type is set to :py:class:`Drawings.ViewScaleBuilderType.Expression <Drawings.ViewScaleBuilderType>`. 
    :rtype: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Expression`` 
    
    :param expression:  sets the expression used to determine the view scale.  It will only be used if type is set to :py:class:`Drawings.ViewScaleBuilderType.Expression <Drawings.ViewScaleBuilderType>`. 
    :type expression: :py:class:`NXOpen.Expression` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Numerator: float = ...
    """
    Returns or sets  the scale numerator 
    
    <hr>
    
    Getter Method
    
    Signature ``Numerator`` 
    
    :returns:  returns the numerator for the view's scale  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Numerator`` 
    
    :param numerator:  sets the numerator for the view's scale  
    :type numerator: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ScaleType: ViewScaleBuilderType = ...
    """
    Returns or sets  the scale type 
    
    <hr>
    
    Getter Method
    
    Signature ``ScaleType`` 
    
    :returns:  returns the scale type.  
    :rtype: :py:class:`NXOpen.Drawings.ViewScaleBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ScaleType`` 
    
    :param type:  sets the scale type.  
    :type type: :py:class:`NXOpen.Drawings.ViewScaleBuilderType` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewScaleBuilder = ...  # unknown typename


class AddObjectsToRegionBuilder(NXOpen.Builder):
    """
    Creates the builder for associating the symbols from library to the region     
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DrawingRegionCollection.CreateAddObjectsToRegionBuilder`
    
    .. versionadded:: NX8.0.0
    """
    
    def SetMasterSymbolFilePaths(self, symbolPath: 'list[str]') -> None:
        """
        Set the master symbol paths
        
        Signature ``SetMasterSymbolFilePaths(symbolPath)`` 
        
        :param symbolPath:  the list of selected symbol paths  
        :type symbolPath: list of str 
        
        .. versionadded:: NX8.0.0
        
        License requirements: nx_drawing_auto ("NX Drawing Automation")
        """
        ...
    
    SelectedRegion: SelectDrawingRegion = ...
    """
    Returns  the get selected region 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectedRegion`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDrawingRegion` 
    
    .. versionadded:: NX8.0.0
    
    License requirements: None.
    """
    Null: AddObjectsToRegionBuilder = ...  # unknown typename


class BordersAndZonesCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.BordersAndZones` objects   
    
    To obtain an instance of this class, refer to :py:class:`NXOpen.DraftingManager`
    
    .. versionadded:: NX8.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    
    
    def FindObject(self, name: str) -> BordersAndZones:
        """
        Finds the :py:class:`NXOpen.Drawings.BordersAndZones` with the given name.  
        
        An exception will be thrown if no object can be found with the given name.  
        
        Signature ``FindObject(name)`` 
        
        :param name:  Drawing sheet name  
        :type name: str 
        :returns:   Borders and zones object  
        :rtype: :py:class:`NXOpen.Drawings.BordersAndZones` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: None.
        """
        ...
    
    
    def CreateBordersAndZonesBuilder(self, bordersAndZones: BordersAndZones) -> BordersAndZonesBuilder:
        """
        Creates a borders and zones builder  
        
        Signature ``CreateBordersAndZonesBuilder(bordersAndZones)`` 
        
        :param bordersAndZones:  :py:class:`NXOpen.Drawings.BordersAndZones` to be redefined, if None then creates a new one  
        :type bordersAndZones: :py:class:`NXOpen.Drawings.BordersAndZones` 
        :returns:  BordersAndZonesBuilder object  
        :rtype: :py:class:`NXOpen.Drawings.BordersAndZonesBuilder` 
        
        .. versionadded:: NX8.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    


class BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BordersAndZonesBuilderHorizontalCenteringMarkType():
    """
    the horizontal centering mark type   
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.Drawings.HorizontalCenteringMarkType` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "LeftArrow", "Left Arrow"
       "RightArrow", "Right Arrow"
       "LeftandRightArrow", "Left and Right Arrow"
       "LeftandRightLine", " - "
    """
    NotSet = 0  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
    LeftArrow = 1  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
    RightArrow = 2  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
    LeftandRightArrow = 3  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
    LeftandRightLine = 4  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BordersAndZonesBuilderVerticalCenteringMarkType():
    """
    the vertical centering mark type   
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.Drawings.VerticalCenteringMarkType` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "BottomArrow", "Bottom Arrow"
       "TopArrow", "Top Arrow"
       "BottomandTopArrow", "Bottom and Top Arrow"
       "BottomandTopLine", " - "
    """
    NotSet = 0  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
    BottomArrow = 1  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
    TopArrow = 2  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
    BottomandTopArrow = 3  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
    BottomandTopLine = 4  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BordersAndZonesBuilderZoneMethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BordersAndZonesBuilderZoneMethod():
    """
    the zone method  
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.Drawings.Method` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "None"
       "Standard", "Standard"
       "Custom", " - "
    """
    NotSet = 0  # BordersAndZonesBuilderZoneMethodMemberType
    Standard = 1  # BordersAndZonesBuilderZoneMethodMemberType
    Custom = 2  # BordersAndZonesBuilderZoneMethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BordersAndZonesBuilderZoneOriginMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BordersAndZonesBuilderZoneOrigin():
    """
    the zone origin   
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.Drawings.ZoneOrigin` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "BottomRight", "Bottom Right"
       "TopLeft", "Top Left"
       "TopRight", "Top Right"
       "BottomLeft", " - "
    """
    BottomRight = 0  # BordersAndZonesBuilderZoneOriginMemberType
    TopLeft = 1  # BordersAndZonesBuilderZoneOriginMemberType
    TopRight = 2  # BordersAndZonesBuilderZoneOriginMemberType
    BottomLeft = 3  # BordersAndZonesBuilderZoneOriginMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BordersAndZonesBuilderFontEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class BordersAndZonesBuilderFontEnum():
    """
    the font   
    
    .. deprecated::  NX10.0.0
       Use :py:class:`NXOpen.Drawings.FontEnum` instead.
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Blockfont", " - "
    """
    Blockfont = 0  # BordersAndZonesBuilderFontEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class BordersAndZonesBuilder(NXOpen.Builder):
    """
    Builder for creating Borders and Zones.  
    
    It creates and redefines borders and zones. 
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.BordersAndZonesCollection.CreateBordersAndZonesBuilder`
    
    Default values.
    
    =====================================  ============================================
    Property                               Value
    =====================================  ============================================
    BottomMargin (deprecated)              0 (millimeters part), 0 (inches part) 
    -------------------------------------  --------------------------------------------
    CenteringMarkExtension (deprecated)    5 (millimeters part), 0.25 (inches part) 
    -------------------------------------  --------------------------------------------
    CreateBorders (deprecated)             1 
    -------------------------------------  --------------------------------------------
    CreateTrimmingMarks (deprecated)       1 
    -------------------------------------  --------------------------------------------
    CreateZoneLabels (deprecated)          1 
    -------------------------------------  --------------------------------------------
    CreateZoneMarking (deprecated)         1 
    -------------------------------------  --------------------------------------------
    HorizontalCenteringMark (deprecated)   None 
    -------------------------------------  --------------------------------------------
    HorizontalSize (deprecated)            50 (millimeters part), 2.5 (inches part) 
    -------------------------------------  --------------------------------------------
    LabelFont (deprecated)                 0 
    -------------------------------------  --------------------------------------------
    LabelHeight (deprecated)               3.5 (millimeters part), 0.125 (inches part) 
    -------------------------------------  --------------------------------------------
    LeftMargin (deprecated)                0 (millimeters part), 0 (inches part) 
    -------------------------------------  --------------------------------------------
    MarkingHeight (deprecated)             10 (millimeters part), 0.375 (inches part) 
    -------------------------------------  --------------------------------------------
    Method (deprecated)                    Standard 
    -------------------------------------  --------------------------------------------
    Origin (deprecated)                    TopLeft 
    -------------------------------------  --------------------------------------------
    RightMargin (deprecated)               0 (millimeters part), 0 (inches part) 
    -------------------------------------  --------------------------------------------
    TopMargin (deprecated)                 0 (millimeters part), 0 (inches part) 
    -------------------------------------  --------------------------------------------
    TrimmingMarkLength (deprecated)        10 (millimeters part), 0.5 (inches part) 
    -------------------------------------  --------------------------------------------
    TrimmingMarkThickness (deprecated)     5 (millimeters part), 0.25 (inches part) 
    -------------------------------------  --------------------------------------------
    VerticalCenteringMark (deprecated)     None 
    -------------------------------------  --------------------------------------------
    VerticalSize (deprecated)              50 (millimeters part), 2.5 (inches part) 
    -------------------------------------  --------------------------------------------
    Width (deprecated)                     10 (millimeters part), 0.375 (inches part) 
    =====================================  ============================================
    
    .. versionadded:: NX8.0.0
    """
    
    class HorizontalCenteringMarkType():
        """
        the horizontal centering mark type   
        
        .. deprecated::  NX10.0.0
           Use :py:class:`NXOpen.Drawings.HorizontalCenteringMarkType` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "LeftArrow", "Left Arrow"
           "RightArrow", "Right Arrow"
           "LeftandRightArrow", "Left and Right Arrow"
           "LeftandRightLine", " - "
        """
        NotSet = 0  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
        LeftArrow = 1  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
        RightArrow = 2  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
        LeftandRightArrow = 3  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
        LeftandRightLine = 4  # BordersAndZonesBuilderHorizontalCenteringMarkTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class VerticalCenteringMarkType():
        """
        the vertical centering mark type   
        
        .. deprecated::  NX10.0.0
           Use :py:class:`NXOpen.Drawings.VerticalCenteringMarkType` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "BottomArrow", "Bottom Arrow"
           "TopArrow", "Top Arrow"
           "BottomandTopArrow", "Bottom and Top Arrow"
           "BottomandTopLine", " - "
        """
        NotSet = 0  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
        BottomArrow = 1  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
        TopArrow = 2  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
        BottomandTopArrow = 3  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
        BottomandTopLine = 4  # BordersAndZonesBuilderVerticalCenteringMarkTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ZoneMethod():
        """
        the zone method  
        
        .. deprecated::  NX10.0.0
           Use :py:class:`NXOpen.Drawings.Method` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "NotSet", "None"
           "Standard", "Standard"
           "Custom", " - "
        """
        NotSet = 0  # BordersAndZonesBuilderZoneMethodMemberType
        Standard = 1  # BordersAndZonesBuilderZoneMethodMemberType
        Custom = 2  # BordersAndZonesBuilderZoneMethodMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class ZoneOrigin():
        """
        the zone origin   
        
        .. deprecated::  NX10.0.0
           Use :py:class:`NXOpen.Drawings.ZoneOrigin` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "BottomRight", "Bottom Right"
           "TopLeft", "Top Left"
           "TopRight", "Top Right"
           "BottomLeft", " - "
        """
        BottomRight = 0  # BordersAndZonesBuilderZoneOriginMemberType
        TopLeft = 1  # BordersAndZonesBuilderZoneOriginMemberType
        TopRight = 2  # BordersAndZonesBuilderZoneOriginMemberType
        BottomLeft = 3  # BordersAndZonesBuilderZoneOriginMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class FontEnum():
        """
        the font   
        
        .. deprecated::  NX10.0.0
           Use :py:class:`NXOpen.Drawings.FontEnum` instead.
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Blockfont", " - "
        """
        Blockfont = 0  # BordersAndZonesBuilderFontEnumMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    BorderAndZoneStyle: BorderAndZoneStyleBuilder = ...
    """
    Returns  the border and zone style builder 
    
    <hr>
    
    Getter Method
    
    Signature ``BorderAndZoneStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BorderAndZoneStyleBuilder` 
    
    .. versionadded:: NX10.0.0
    
    License requirements: None.
    """
    BottomMargin: float = ...
    """
    Returns or sets  the bottom margin 
    
    <hr>
    
    Getter Method
    
    Signature ``BottomMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetMarginSettingsBuilder.BottomTrimmedMargin` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``BottomMargin`` 
    
    :param bottomMargin: 
    :type bottomMargin: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetMarginSettingsBuilder.BottomTrimmedMargin` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CenteringMarkExtension: float = ...
    """
    Returns or sets  the centering mark extension 
    
    <hr>
    
    Getter Method
    
    Signature ``CenteringMarkExtension`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CenteringMarksExtension` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CenteringMarkExtension`` 
    
    :param centeringMarkExtension: 
    :type centeringMarkExtension: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CenteringMarksExtension` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CreateBorders: bool = ...
    """
    Returns or sets  the create borders 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateBorders`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CreateBorders` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateBorders`` 
    
    :param createBorders: 
    :type createBorders: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CreateBorders` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CreateTrimmingMarks: bool = ...
    """
    Returns or sets  the create trimming marks 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateTrimmingMarks`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CreateTrimmingMarks` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateTrimmingMarks`` 
    
    :param createTrimmingMarks: 
    :type createTrimmingMarks: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CreateTrimmingMarks` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CreateZoneLabels: bool = ...
    """
    Returns or sets  the create zone labels 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateZoneLabels`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.CreateZoneLabels` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateZoneLabels`` 
    
    :param createZoneLabels: 
    :type createZoneLabels: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.CreateZoneLabels` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    CreateZoneMarking: bool = ...
    """
    Returns or sets  the create zone marking 
    
    <hr>
    
    Getter Method
    
    Signature ``CreateZoneMarking`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.CreateZoneMarkings` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``CreateZoneMarking`` 
    
    :param createZoneMarking: 
    :type createZoneMarking: bool 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.CreateZoneMarkings` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    HorizontalCenteringMark: BordersAndZonesBuilderHorizontalCenteringMarkType = ...
    """
    Returns or sets  the horizontal centering mark 
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalCenteringMark`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BordersAndZonesBuilderHorizontalCenteringMarkType` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CenteringMarksHorizontal` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalCenteringMark`` 
    
    :param horizontalCenteringMark: 
    :type horizontalCenteringMark: :py:class:`NXOpen.Drawings.BordersAndZonesBuilderHorizontalCenteringMarkType` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CenteringMarksHorizontal` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    HorizontalSize: float = ...
    """
    Returns or sets  the horizontal size of the zones
    
    <hr>
    
    Getter Method
    
    Signature ``HorizontalSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.HorizontalSize` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HorizontalSize`` 
    
    :param horizontalSize: 
    :type horizontalSize: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.HorizontalSize` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    LabelFont: int = ...
    """
    Returns or sets  the label font 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelFont`` 
    
    :returns: 
    :rtype: int 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.LabelFont` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelFont`` 
    
    :param labelFont: 
    :type labelFont: int 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.LabelFont` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    LabelHeight: float = ...
    """
    Returns or sets  the label height 
    
    <hr>
    
    Getter Method
    
    Signature ``LabelHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.LabelHeight` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LabelHeight`` 
    
    :param labelHeight: 
    :type labelHeight: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.LabelHeight` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    LeftMargin: float = ...
    """
    Returns or sets  the left margin 
    
    <hr>
    
    Getter Method
    
    Signature ``LeftMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetMarginSettingsBuilder.LeftTrimmedMargin` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``LeftMargin`` 
    
    :param leftMargin: 
    :type leftMargin: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetMarginSettingsBuilder.LeftTrimmedMargin` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    MarkingHeight: float = ...
    """
    Returns or sets  the marking height 
    
    <hr>
    
    Getter Method
    
    Signature ``MarkingHeight`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.MarkingHeight` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``MarkingHeight`` 
    
    :param markingHeight: 
    :type markingHeight: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.MarkingHeight` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Method: BordersAndZonesBuilderZoneMethod = ...
    """
    Returns or sets  the method of creation of zones
    
    <hr>
    
    Getter Method
    
    Signature ``Method`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BordersAndZonesBuilderZoneMethod` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.Method` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Method`` 
    
    :param method: 
    :type method: :py:class:`NXOpen.Drawings.BordersAndZonesBuilderZoneMethod` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.Method` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Origin: BordersAndZonesBuilderZoneOrigin = ...
    """
    Returns or sets  the zone origin type
    
    <hr>
    
    Getter Method
    
    Signature ``Origin`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BordersAndZonesBuilderZoneOrigin` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.Origin` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Origin`` 
    
    :param origin: 
    :type origin: :py:class:`NXOpen.Drawings.BordersAndZonesBuilderZoneOrigin` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.Origin` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    RightMargin: float = ...
    """
    Returns or sets  the right margin 
    
    <hr>
    
    Getter Method
    
    Signature ``RightMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetMarginSettingsBuilder.RightTrimmedMargin` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``RightMargin`` 
    
    :param rightMargin: 
    :type rightMargin: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetMarginSettingsBuilder.RightTrimmedMargin` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    TopMargin: float = ...
    """
    Returns or sets  the top margin 
    
    <hr>
    
    Getter Method
    
    Signature ``TopMargin`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetMarginSettingsBuilder.TopTrimmedMargin` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TopMargin`` 
    
    :param topMargin: 
    :type topMargin: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetMarginSettingsBuilder.TopTrimmedMargin` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    TrimmingMarkLength: float = ...
    """
    Returns or sets  the trimming mark length 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingMarkLength`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.TrimmingMarkLength` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimmingMarkLength`` 
    
    :param trimmingMarkLength: 
    :type trimmingMarkLength: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.TrimmingMarkLength` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    TrimmingMarkThickness: float = ...
    """
    Returns or sets  the trimming mark thickness 
    
    <hr>
    
    Getter Method
    
    Signature ``TrimmingMarkThickness`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.TrimmingMarkWidth` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``TrimmingMarkThickness`` 
    
    :param trimmingMarkThickness: 
    :type trimmingMarkThickness: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.TrimmingMarkWidth` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    VerticalCenteringMark: BordersAndZonesBuilderVerticalCenteringMarkType = ...
    """
    Returns or sets  the vertical centering mark 
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalCenteringMark`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.BordersAndZonesBuilderVerticalCenteringMarkType` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CenteringMarksVertical` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalCenteringMark`` 
    
    :param verticalCenteringMark: 
    :type verticalCenteringMark: :py:class:`NXOpen.Drawings.BordersAndZonesBuilderVerticalCenteringMarkType` 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.CenteringMarksVertical` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    VerticalSize: float = ...
    """
    Returns or sets  the vertical size of the zones
    
    <hr>
    
    Getter Method
    
    Signature ``VerticalSize`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.VerticalSize` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``VerticalSize`` 
    
    :param verticalSize: 
    :type verticalSize: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetZoneSettingsBuilder.VerticalSize` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Width: float = ...
    """
    Returns or sets  the width of the border
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.BorderLineWidth` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width: 
    :type width: float 
    
    .. versionadded:: NX8.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`NXOpen.Drawings.SheetBorderSettingsBuilder.BorderLineWidth` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Null: BordersAndZonesBuilder = ...  # unknown typename


class DraftingDrawingSheetBuilder(DrawingSheetBuilder):
    """
    Represents a Builder for creating :py:class:`NXOpen.Drawings.DraftingDrawingSheet`s   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingDrawingSheetCollection.CreateDraftingDrawingSheetBuilder`
    
    .. versionadded:: NX12.0.0
    """
    Null: DraftingDrawingSheetBuilder = ...  # unknown typename


class ViewAlignment(NXOpen.NXObject):
    """
    View Alignment object.  
    
    This object represents an associative view alignment between two views. 
    To create an instance of this object use :py:class:`NXOpen.Drawings.ViewAlignmentBuilder`
    
    .. versionadded:: NX8.5.0
    """
    Null: ViewAlignment = ...  # unknown typename


class DrawingViewBuilder(NXOpen.Builder):
    """
    This builder allows the user to create a Drawing View   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateDrawingViewBuilder`
    
    Default values.
    
    ==========================================================  =============
    Property                                                    Value
    ==========================================================  =============
    MultipleViewPlacement.OptionType                            Center 
    ----------------------------------------------------------  -------------
    MultipleViewPlacement.ViewPlacementCenter.AlignmentMethod   Infer 
    ----------------------------------------------------------  -------------
    MultipleViewPlacement.ViewPlacementCenter.AlignmentOption   ToView 
    ----------------------------------------------------------  -------------
    Scale.Denominator                                           1.0 
    ----------------------------------------------------------  -------------
    Scale.Numerator                                             1.0 
    ----------------------------------------------------------  -------------
    Scale.ScaleType                                             Ratio 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleGeneral.AngleSetting.Angle.Value         0 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleGeneral.AngleSetting.Associative         0 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleGeneral.AngleSetting.EvaluationPlane     DrawingSheet 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleOrientation.HingeLine.ReverseDirection   false 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleOrientation.HingeLine.VectorOption       Inferred 
    ----------------------------------------------------------  -------------
    ViewStyle.ViewStyleOrientation.Ovt.AssociativeOrientation   0 
    ==========================================================  =============
    
    .. versionadded:: NX6.0.0
    """
    CenterCoordinate: ViewCenterCoordinateBuilder = ...
    """
    Returns  the center coordinate 
    
    <hr>
    
    Getter Method
    
    Signature ``CenterCoordinate`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCenterCoordinateBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    MultipleViewPlacement: MultipleViewPlacementBuilder = ...
    """
    Returns  the multiple view placement 
    
    <hr>
    
    Getter Method
    
    Signature ``MultipleViewPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.MultipleViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.2
    
    License requirements: None.
    """
    Scale: ViewScaleBuilder = ...
    """
    Returns  the view scale 
    
    <hr>
    
    Getter Method
    
    Signature ``Scale`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewScaleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    TwodOrientation: View2dOrientBuilder = ...
    """
    Returns  the view orientation in 2D 
    
    <hr>
    
    Getter Method
    
    Signature ``TwodOrientation`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.View2dOrientBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    ViewBoundary: ViewBoundaryBuilder = ...
    """
    Returns  the view boundary.  
    
    It is replace by :py:meth:`Drawings.DrawingViewBuilder.MultipleViewPlacement` 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewBoundary`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewBoundaryBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX6.0.2
       Use :py:meth:`Drawings.DrawingViewBuilder.MultipleViewPlacement`
    
    License requirements: None.
    """
    ViewPlacement: ViewPlacementBuilder = ...
    """
    Returns  the view placement.  
    
    It is replace by :py:meth:`Drawings.DrawingViewBuilder.MultipleViewPlacement` 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewPlacement`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewPlacementBuilder` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX6.0.2
       Use :py:meth:`Drawings.DrawingViewBuilder.MultipleViewPlacement`
    
    License requirements: None.
    """
    ViewStyle: ViewStyleBuilder = ...
    """
    Returns  the view style 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewStyle`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewStyleBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: DrawingViewBuilder = ...  # unknown typename


class SheetSectionLineCollection(NXOpen.TaggedObjectCollection):
    """
    Represents a collection of :py:class:`NXOpen.Drawings.SectionLine`s.  
    
    Use :py:meth:`NXOpen.Drawings.DrawingSheet` to get the instance of this class.
    
    .. versionadded:: NX6.0.0
    """
    
    def __iter__(self) -> None:
        """Implement iter(self)."""
        ...
    


class ConvertDraftingContentsBuilderSelectConversionEntityTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ConvertDraftingContentsBuilderSelectConversionEntityType():
    """
    enum is used to list out different entity that can be use for conversion 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Drawing", " - "
       "Sheet", " - "
       "View", " - "
       "Annotation", " - "
    """
    Drawing = 0  # ConvertDraftingContentsBuilderSelectConversionEntityTypeMemberType
    Sheet = 1  # ConvertDraftingContentsBuilderSelectConversionEntityTypeMemberType
    View = 2  # ConvertDraftingContentsBuilderSelectConversionEntityTypeMemberType
    Annotation = 3  # ConvertDraftingContentsBuilderSelectConversionEntityTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ConvertDraftingContentsBuilder(NXOpen.Builder):
    """
    Represents a :py:class:`Drawings.ConvertDraftingContentsBuilder`.  
    
    This class queries and sets settings specific to drafting data which will get converted to PMI.
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.ConvertToPMIBuilderManager.CreateConvertDraftingContentsBuilder`
    
    Default values.
    
    ===================  ========
    Property             Value
    ===================  ========
    SelectionType        Drawing 
    -------------------  --------
    UseContextAssembly   0 
    ===================  ========
    
    .. versionadded:: NX11.0.0
    """
    
    class SelectConversionEntityType():
        """
        enum is used to list out different entity that can be use for conversion 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Drawing", " - "
           "Sheet", " - "
           "View", " - "
           "Annotation", " - "
        """
        Drawing = 0  # ConvertDraftingContentsBuilderSelectConversionEntityTypeMemberType
        Sheet = 1  # ConvertDraftingContentsBuilderSelectConversionEntityTypeMemberType
        View = 2  # ConvertDraftingContentsBuilderSelectConversionEntityTypeMemberType
        Annotation = 3  # ConvertDraftingContentsBuilderSelectConversionEntityTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def SetContextAssembly(self, contextAssembly: str) -> None:
        """
        Context assembly part file path 
        
        Signature ``SetContextAssembly(contextAssembly)`` 
        
        :param contextAssembly: 
        :type contextAssembly: str 
        
        .. versionadded:: NX11.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    ConfigurationFile: str = ...
    """
    Returns or sets  the configuration file 
    
    <hr>
    
    Getter Method
    
    Signature ``ConfigurationFile`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ConfigurationFile`` 
    
    :param filename: 
    :type filename: str 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    OpenConvertedPmiDestinationPart: bool = ...
    """
    Returns or sets  the option to open converted pmi destination part 
    
    <hr>
    
    Getter Method
    
    Signature ``OpenConvertedPmiDestinationPart`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``OpenConvertedPmiDestinationPart`` 
    
    :param openConvertedPmiDestinationPart: 
    :type openConvertedPmiDestinationPart: bool 
    
    .. versionadded:: NX12.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelectDraftingSheet: NXOpen.SelectViewList = ...
    """
    Returns  the select drafting sheet block.  
    
    Expect selection object of type DraftingSheet, validation is done at builder level 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectDraftingSheet`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectViewList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectDraftingView: SelectDraftingViewList = ...
    """
    Returns  the select drafting view block 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectDraftingView`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingViewList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectObjectsToConvert: NXOpen.SelectNXObjectList = ...
    """
    Returns  the select objects to convert 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectObjectsToConvert`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.SelectNXObjectList` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    SelectionType: ConvertDraftingContentsBuilderSelectConversionEntityType = ...
    """
    Returns or sets  the selection type 
    
    <hr>
    
    Getter Method
    
    Signature ``SelectionType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ConvertDraftingContentsBuilderSelectConversionEntityType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelectionType`` 
    
    :param selectionType: 
    :type selectionType: :py:class:`NXOpen.Drawings.ConvertDraftingContentsBuilderSelectConversionEntityType` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SettingsBuilder: SettingsBuilder = ...
    """
    Returns  the settings 
    
    <hr>
    
    Getter Method
    
    Signature ``SettingsBuilder`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SettingsBuilder` 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    """
    UseContextAssembly: bool = ...
    """
    Returns or sets  the use context assembly 
    
    <hr>
    
    Getter Method
    
    Signature ``UseContextAssembly`` 
    
    :returns: 
    :rtype: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``UseContextAssembly`` 
    
    :param useContextAssembly: 
    :type useContextAssembly: bool 
    
    .. versionadded:: NX11.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ConvertDraftingContentsBuilder = ...  # unknown typename


class PointToPointSectionLineBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.PointToPointSectionLineBuilder`.  
    
    This class is used to create or edit a
    :py:class:`NXOpen.Drawings.PointToPointSectionLine`. 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionViewType` instead.
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    EndLocation1: NXOpen.Point = ...
    """
    Returns or sets  the end location 1 which determines the position of the
    first arrow segment in the section line.  
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation1`` 
    
    :param endLocation1: 
    :type endLocation1: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    EndLocation2: NXOpen.Point = ...
    """
    Returns or sets  the end location 2 which determines the position of the
    second arrow segment in the section line 
    
    <hr>
    
    Getter Method
    
    Signature ``EndLocation2`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EndLocation2`` 
    
    :param endLocation2: 
    :type endLocation2: :py:class:`NXOpen.Point` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    Leg1: SectionLineSegmentBuilderList = ...
    """
    Returns  the list of cut segments.  
    
    The list will contain :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderTypes.Cut <NXOpen.Drawings.SectionLineSegmentBuilderTypes>`
    type :py:class:`NXOpen.Drawings.SectionLineSegmentBuilder` segments only.
    
    Note that there is no order to the elements of this list since the order is
    determined by the hinge or arrow direction. 
    
    <hr>
    
    Getter Method
    
    Signature ``Leg1`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionLineSegmentBuilderList` 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX10.0.0
       Use :py:meth:`Drawings.SectionViewBuilder.SectionLineSegments` instead.
    
    License requirements: None.
    """
    Null: PointToPointSectionLineBuilder = ...  # unknown typename


class ViewStyleHiddenLinesBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents the HIDDEN LINES tab on the View Style Dialog (Drawings.  
    
    ViewStyleHiddenLinesBuilder)
    
    .. versionadded:: NX6.0.0
    """
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Color: NXOpen.NXColor = ...
    """
    Returns or sets  the color on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Color`` 
    
    :returns:  Returns the color that is on the hidden line sub-builder  
    :rtype: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Color`` 
    
    :param color:  Sets a new color on the hidden line sub-builder  
    :type color: Id 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    EdgesHiddenByEdges: bool = ...
    """
    Returns or sets  the edges hidden by edges toggle on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``EdgesHiddenByEdges`` 
    
    :returns:  Returns the edges hidden by edges toggle value that is on the hidden line sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EdgesHiddenByEdges`` 
    
    :param edgesHiddenByEdgesToggle:  Sets a new edges hidden by edges toggle value on the hidden line sub-builder  
    :type edgesHiddenByEdgesToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Font: NXOpen.Preferences.Font = ...
    """
    Returns or sets  the font on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Font`` 
    
    :returns:  Returns the font that is on the hidden line sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Font`` 
    
    :param font:  Sets a new font on the hidden line sub-builder  
    :type font: :py:class:`NXOpen.Preferences.Font` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    HiddenLine: bool = ...
    """
    Returns or sets  the hidden line toggle on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``HiddenLine`` 
    
    :returns:  Returns the hidden line toggle value that is on the hidden line sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``HiddenLine`` 
    
    :param hiddenLineToggle:  Sets a new hidden line toggle value on the hidden line sub-builder  
    :type hiddenLineToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeModelCurves: bool = ...
    """
    Returns or sets  the include model curves toggle on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeModelCurves`` 
    
    :returns:  Returns the include model curves toggle value that is on the hidden line sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`Drawings.ViewStyleHiddenLinesBuilder.IncludeModelCurvesOption` instead.
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeModelCurves`` 
    
    :param includeModelCurvesToggle:  Sets a new include model curves toggle value on the hidden line sub-builder  
    :type includeModelCurvesToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    .. deprecated::  NX12.0.0
       Use :py:meth:`Drawings.ViewStyleHiddenLinesBuilder.IncludeModelCurvesOption` instead.
    
    License requirements: drafting ("DRAFTING")
    """
    IncludeModelCurvesOption: NXOpen.Preferences.IncludeModelCurvesOption = ...
    """
    Returns or sets  the include model curves option on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``IncludeModelCurvesOption`` 
    
    :returns:  Returns the include model curves option that is on the hidden line sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.IncludeModelCurvesOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``IncludeModelCurvesOption`` 
    
    :param includeModelCurvesPointsOptionData:  Sets a new include model curves option on the hidden line sub-builder  
    :type includeModelCurvesPointsOptionData: :py:class:`NXOpen.Preferences.IncludeModelCurvesOption` 
    
    .. versionadded:: NX12.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    InterferingSolids: NXOpen.Preferences.HiddenLineInterferingSolidsOption = ...
    """
    Returns or sets  the interfering solids toggle on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``InterferingSolids`` 
    
    :returns:  Returns the interfering solids toggle value that is on the hidden line sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.HiddenLineInterferingSolidsOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``InterferingSolids`` 
    
    :param interferingSolidsOption:  Sets a new interfering solids toggle value on the hidden line sub-builder  
    :type interferingSolidsOption: :py:class:`NXOpen.Preferences.HiddenLineInterferingSolidsOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    ReferenceEdgesOnly: bool = ...
    """
    Returns or sets  the reference edges only toggle on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``ReferenceEdgesOnly`` 
    
    :returns:  Returns the reference edges only toggle value that is on the hidden line sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``ReferenceEdgesOnly`` 
    
    :param referenceEdgesOnlyToggle:  Sets a new reference edges only toggle value on the hidden line sub-builder  
    :type referenceEdgesOnlyToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SelfHidden: bool = ...
    """
    Returns or sets  the self hidden toggle on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SelfHidden`` 
    
    :returns:  Returns the self hidden toggle value that is on the hidden line sub-builder  
    :rtype: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SelfHidden`` 
    
    :param selfHiddenToggle:  Sets a new self hidden toggle value on the hidden line sub-builder  
    :type selfHiddenToggle: bool 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmallFeature: NXOpen.Preferences.HiddenLineSmallFeatureOption = ...
    """
    Returns or sets  the small feature option on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SmallFeature`` 
    
    :returns:  Returns the small feature option that is on the hidden line sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.HiddenLineSmallFeatureOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmallFeature`` 
    
    :param smallFeatureOption:  Sets a new small feature option on the hidden line sub-builder  
    :type smallFeatureOption: :py:class:`NXOpen.Preferences.HiddenLineSmallFeatureOption` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SmallFeaturesTolerance: float = ...
    """
    Returns or sets  the small features tolerance on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``SmallFeaturesTolerance`` 
    
    :returns:  Returns the small features tolerance value that is on the hidden line sub-builder  
    :rtype: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SmallFeaturesTolerance`` 
    
    :param smallFeaturesTolerance:  Sets a new small features tolerance value on the hidden line sub-builder  
    :type smallFeaturesTolerance: float 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Width: NXOpen.Preferences.Width = ...
    """
    Returns or sets  the width on the HIDDEN LINES tab of the View Style Dialog 
    
    <hr>
    
    Getter Method
    
    Signature ``Width`` 
    
    :returns:  Returns the width that is on the hidden line sub-builder  
    :rtype: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Width`` 
    
    :param width:  Sets a new width on the hidden line sub-builder  
    :type width: :py:class:`NXOpen.Preferences.Width` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewStyleHiddenLinesBuilder = ...  # unknown typename


class FontEnumMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class FontEnum():
    """
    the font 
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Blockfont", " - "
    """
    Blockfont = 0  # FontEnumMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class MethodMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class Method():
    """
    the zone method
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "NotSet", "To support legacy parts"
       "Standard", "Standard"
       "Custom", " - "
    """
    NotSet = 0  # MethodMemberType
    Standard = 1  # MethodMemberType
    Custom = 2  # MethodMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class EditSectionLineSettingsBuilder(NXOpen.Drafting.BaseEditSettingsBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.EditSectionLineSettingsBuilder` builder.  
    
    It provides an interface for editing section line style settings.
    This can be used to change one specific section line or all section lines. 
    To create a new instance of this class, use :py:meth:`NXOpen.Drafting.SettingsManager.CreateDrawingEditSectionLineSettingsBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    def InheritSettingsFromSelectedObjects(self, selectedObject: SectionLine) -> None:
        """
        Inherit Settings From Selected Objects 
        
        Signature ``InheritSettingsFromSelectedObjects(selectedObject)`` 
        
        :param selectedObject:  The selected section line instance object.                                                                            None is not allowed.  
        :type selectedObject: :py:class:`NXOpen.Drawings.SectionLine` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromCustomerDefault(self) -> None:
        """
        Inherit Settings From Customer Default 
        
        Signature ``InheritSettingsFromCustomerDefault()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    
    def InheritSettingsFromPreferences(self) -> None:
        """
        Inherit Settings From Preference 
        
        Signature ``InheritSettingsFromPreferences()`` 
        
        .. versionadded:: NX9.0.0
        
        License requirements: drafting ("DRAFTING")
        """
        ...
    
    ViewCommonViewLabel: ViewCommonViewLabelBuilder = ...
    """
    Returns  the view common label builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewCommonViewLabel`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    ViewSectionLine: ViewSectionLineBuilder = ...
    """
    Returns  the view section line builder 
    
    <hr>
    
    Getter Method
    
    Signature ``ViewSectionLine`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewSectionLineBuilder` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    """
    Null: EditSectionLineSettingsBuilder = ...  # unknown typename


class ViewCommonViewLabelBuilderSecondaryIndexingTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCommonViewLabelBuilderSecondaryIndexingType():
    """
    secondary Indexing Type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Alphabetic", " - "
       "Numeric", " - "
    """
    Alphabetic = 0  # ViewCommonViewLabelBuilderSecondaryIndexingTypeMemberType
    Numeric = 1  # ViewCommonViewLabelBuilderSecondaryIndexingTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCommonViewLabelBuilderSecondaryAlignmentTypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class ViewCommonViewLabelBuilderSecondaryAlignmentType():
    """
    secondary Alignment Type
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "Inline", " - "
       "Subscript", " - "
    """
    Inline = 0  # ViewCommonViewLabelBuilderSecondaryAlignmentTypeMemberType
    Subscript = 1  # ViewCommonViewLabelBuilderSecondaryAlignmentTypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class ViewCommonViewLabelBuilder(NXOpen.TaggedObject, NXOpen.GeometricUtilities.IComponentBuilder):
    """
    Represents a :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilder`
    
    .. versionadded:: NX9.0.0
    """
    
    class SecondaryIndexingType():
        """
        secondary Indexing Type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Alphabetic", " - "
           "Numeric", " - "
        """
        Alphabetic = 0  # ViewCommonViewLabelBuilderSecondaryIndexingTypeMemberType
        Numeric = 1  # ViewCommonViewLabelBuilderSecondaryIndexingTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    class SecondaryAlignmentType():
        """
        secondary Alignment Type
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "Inline", " - "
           "Subscript", " - "
        """
        Inline = 0  # ViewCommonViewLabelBuilderSecondaryAlignmentTypeMemberType
        Subscript = 1  # ViewCommonViewLabelBuilderSecondaryAlignmentTypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    
    def Validate(self) -> bool:
        """
        Validate whether the inputs to the component are sufficient for 
        commit to be called.  
        
        If the component is not in a state to commit
        then an exception is thrown.  For example, if the component requires
        you to set some property, this method will throw an exception if
        you haven't set it.  This method throws a not-yet-implemented
        NXException for some components.
        
        Signature ``Validate()`` 
        
        :returns:  Was self validation successful  
        :rtype: bool 
        
        .. versionadded:: NX3.0.1
        
        License requirements: None.
        """
        ...
    
    Letter: str = ...
    """
    Returns or sets  the letter 
    
    <hr>
    
    Getter Method
    
    Signature ``Letter`` 
    
    :returns: 
    :rtype: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``Letter`` 
    
    :param letter: 
    :type letter: str 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondaryAlignment: ViewCommonViewLabelBuilderSecondaryAlignmentType = ...
    """
    Returns or sets  the secondary alignment 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryAlignment`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilderSecondaryAlignmentType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryAlignment`` 
    
    :param secondaryAlignment: 
    :type secondaryAlignment: :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilderSecondaryAlignmentType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SecondaryIndexing: ViewCommonViewLabelBuilderSecondaryIndexingType = ...
    """
    Returns or sets  the secondary indexing 
    
    <hr>
    
    Getter Method
    
    Signature ``SecondaryIndexing`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilderSecondaryIndexingType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SecondaryIndexing`` 
    
    :param secondaryIndexing: 
    :type secondaryIndexing: :py:class:`NXOpen.Drawings.ViewCommonViewLabelBuilderSecondaryIndexingType` 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    SubscriptSizeFactor: float = ...
    """
    Returns or sets  the subscript size factor 
    
    <hr>
    
    Getter Method
    
    Signature ``SubscriptSizeFactor`` 
    
    :returns: 
    :rtype: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``SubscriptSizeFactor`` 
    
    :param subscriptSizeFactor: 
    :type subscriptSizeFactor: float 
    
    .. versionadded:: NX9.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Null: ViewCommonViewLabelBuilder = ...  # unknown typename


class SectionInViewBuilderEditSxtypeMemberType():
    
    def __str__(self) -> None:
        """Return str(self)."""
        ...
    
    value = ...
    """value of enum member"""


class SectionInViewBuilderEditSxtype():
    """
    Edit Section type 
    
    Enum Members
    
    .. csv-table::
       :header: "Enum Member", "Enum Member Description" 
    
       "MakeNonSectioned", " - "
       "MakeSectioned", " - "
       "RemoveViewSpecific", " - "
    """
    MakeNonSectioned = 0  # SectionInViewBuilderEditSxtypeMemberType
    MakeSectioned = 1  # SectionInViewBuilderEditSxtypeMemberType
    RemoveViewSpecific = 2  # SectionInViewBuilderEditSxtypeMemberType
    
    @staticmethod
    def ValueOf(value: int) -> None:
        """
        Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
        
        Signature ``ValueOf(value)`` 
        
        :param value: Any integer value or bit operation result of enum members
        :type value: int
        :returns:  Enum member equivalent to the value passed.
        :rtype: Enum Member type. 
        
        .. versionadded:: NX9.0.1
        
        License requirements: None.
        """
        ...
    


class SectionInViewBuilder(NXOpen.Builder):
    """
    This builder allows the user to select a view in which component or
    solid body objects can be designated as section, non-sectioned, or neither   
    
    To create a new instance of this class, use :py:meth:`NXOpen.Drawings.DraftingViewCollection.CreateSectionInViewBuilder`
    
    Default values.
    
    =========  =================
    Property   Value
    =========  =================
    EditType   MakeNonSectioned 
    =========  =================
    
    .. versionadded:: NX6.0.0
    """
    
    class EditSxtype():
        """
        Edit Section type 
        
        Enum Members
        
        .. csv-table::
           :header: "Enum Member", "Enum Member Description" 
        
           "MakeNonSectioned", " - "
           "MakeSectioned", " - "
           "RemoveViewSpecific", " - "
        """
        MakeNonSectioned = 0  # SectionInViewBuilderEditSxtypeMemberType
        MakeSectioned = 1  # SectionInViewBuilderEditSxtypeMemberType
        RemoveViewSpecific = 2  # SectionInViewBuilderEditSxtypeMemberType
        
        @staticmethod
        def ValueOf(value: int) -> None:
            """
            Returns enum member equivalent to the value passed. Useful for bit operations of enum members. 
            
            Signature ``ValueOf(value)`` 
            
            :param value: Any integer value or bit operation result of enum members
            :type value: int
            :returns:  Enum member equivalent to the value passed.
            :rtype: Enum Member type. 
            
            .. versionadded:: NX9.0.1
            
            License requirements: None.
            """
            ...
        
    
    EditObjects: HiddenObjectsBuilder = ...
    """
    Returns  the objects 
    
    <hr>
    
    Getter Method
    
    Signature ``EditObjects`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.HiddenObjectsBuilder` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    EditType: SectionInViewBuilderEditSxtype = ...
    """
    Returns or sets  the type 
    
    <hr>
    
    Getter Method
    
    Signature ``EditType`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SectionInViewBuilderEditSxtype` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    
    <hr>
    
    Setter Method
    
    Signature ``EditType`` 
    
    :param editType: 
    :type editType: :py:class:`NXOpen.Drawings.SectionInViewBuilderEditSxtype` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: drafting ("DRAFTING")
    """
    Views: SelectDraftingViewList = ...
    """
    Returns  the views 
    
    <hr>
    
    Getter Method
    
    Signature ``Views`` 
    
    :returns: 
    :rtype: :py:class:`NXOpen.Drawings.SelectDraftingViewList` 
    
    .. versionadded:: NX6.0.0
    
    License requirements: None.
    """
    Null: SectionInViewBuilder = ...  # unknown typename


